<Type Name="IDataObject" FullName="System.Windows.Forms.IDataObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="107b075d1988af8904fd028834582734403a58f8" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65015632" /></Metadata><TypeSignature Language="C#" Value="public interface IDataObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.IDataObject" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataObject" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataObject" />
  <TypeSignature Language="F#" Value="type IDataObject = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Зависящий от формата механизм передачи данных.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IDataObject` Интерфейс используется <xref:System.Windows.Forms.Clipboard> класса и в операциях перетаскивания и вставки.  
  
 При реализации в классе, <xref:System.Windows.Forms.IDataObject> методы позволяют пользователю хранить данные в нескольких форматах в экземпляре класса. Хранение данных в нескольких форматах повышает вероятность того, что целевое приложение, требования к формату, которого вы можете не знать, можно извлечь сохраненные данные. Для хранения данных в экземпляре <xref:System.Windows.Forms.IDataObject>, вызовите <xref:System.Windows.Forms.IDataObject.SetData%2A> метод и указать формат данных в `format` параметра. Задайте `autoConvert` параметр `false` Если сохраненные данные для преобразования в другой формат при извлечении не нужно. Вызвать <xref:System.Windows.Forms.IDataObject.SetData%2A> несколько раз в одном экземпляре <xref:System.Windows.Forms.IDataObject> для хранения данных в нескольких форматах.  
  
 Чтобы извлечь сохраненные данные из <xref:System.Windows.Forms.IDataObject> путем вызова <xref:System.Windows.Forms.IDataObject.GetData%2A> метод и указав данные форматирования в `format` параметра. Задайте `autoConvert` параметр `false` извлекать только те данные, хранящиеся в указанном формате. Чтобы преобразовать хранящиеся данные в указанный формат, задайте `autoConvert` для `true`, или не используйте `autoConvert`.  
  
 Чтобы определить форматы данных, хранящихся в <xref:System.Windows.Forms.IDataObject>, используйте следующую команду <xref:System.Windows.Forms.IDataObject> методы.  
  
-   Вызовите <xref:System.Windows.Forms.IDataObject.GetFormats%2A> метод для извлечения всех форматов, в котором данные недоступны в массиве. Задайте `autoConvert` параметр `false` для получения только форматов, в которых хранятся данные. Чтобы получить все форматы, в которых данные недоступны, установите `autoConvert` для `true`, или этот параметр не используется.  
  
-   Вызовите <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> метод, чтобы определить, доступен ли хранимые данные в определенном формате. Если не хотите, чтобы хранимых данных для преобразования в указанный формат, задайте `autoConvert` параметр `false`.  
  
 См. в разделе <xref:System.Windows.Forms.DataObject> класс для реализации этого интерфейса. См. в разделе <xref:System.Windows.Forms.DataFormats> класс для стандартных <xref:System.Windows.Forms.Clipboard> форматы данных.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DataObject" />
    <altmember cref="T:System.Windows.Forms.DataFormats" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Извлекает данные, связанные с заданным форматом.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Формат извлекаемых данных. См. в разделе <see cref="T:System.Windows.Forms.DataFormats" /> о предварительно определенных форматах.</param>
        <summary>Извлекает данные, связанные с заданным форматом.</summary>
        <returns>Данные, связанные с указанным форматом или <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если этот метод не удается найти данные в указанном формате, он предпринимает попытку преобразования данных в формате. Если данные невозможно преобразовать в указанный формат, этот метод возвращает `null`.  
  
 Чтобы определить, связан с данных, или может быть преобразован в формат, вызовите <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> перед вызовом <xref:System.Windows.Forms.IDataObject.GetData%2A>. Вызовите <xref:System.Windows.Forms.IDataObject.GetFormats%2A> список допустимых форматов для данных, хранящихся в данном экземпляре.  
  
> [!NOTE]
>  Данные могут преобразовываться в другой формат, если он был сохранен, указав, что преобразование разрешено, и в том случае, если запрошенный формат совместим с форматом данных. Например данные, хранящиеся в виде Юникода могут быть преобразованы в текст.  
  
 Реализация этого метода, см. в разделе <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В этом примере используется <xref:System.Windows.Forms.DataObject> класса, который реализует `IDataObject,` для демонстрации использования `GetData` метод. Метод, используемый для получения данных, хранящихся в `myDataObject`, с которой связан `Text` формат. В примере предполагается, что вы уже создали <xref:System.Windows.Forms.Form> с именем `Form1` и <xref:System.Windows.Forms.TextBox> с именем `textBox1`.  
  
 [!code-cpp[GetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData1/CPP/getdata1.cpp#1)]
 [!code-csharp[GetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData1/CS/getdata1.cs#1)]
 [!code-vb[GetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData1/VB/getdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : Type -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format">Объект <see cref="T:System.Type" /> представляющий формат извлекаемых данных. См. в разделе <see cref="T:System.Windows.Forms.DataFormats" /> о предварительно определенных форматах.</param>
        <summary>Извлекает данные, связанные с заданным форматом типа класса.</summary>
        <returns>Данные, связанные с указанным форматом или <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если этот метод не удается найти данные в указанном формате, он предпринимает попытку преобразования данных в формате. Если данные невозможно преобразовать в указанный формат, этот метод возвращает `null`.  
  
 Чтобы определить, связан с данных, или может быть преобразован в формат, вызовите <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> перед вызовом <xref:System.Windows.Forms.IDataObject.GetData%2A>. Вызовите <xref:System.Windows.Forms.IDataObject.GetFormats%2A> список допустимых форматов для данных, хранящихся в данном экземпляре.  
  
> [!NOTE]
>  Данные могут преобразовываться в другой формат, если он был сохранен, указав, что преобразование разрешено, и в том случае, если запрошенный формат совместим с форматом данных. Например данные, хранящиеся в виде Юникода могут быть преобразованы в текст.  
  
 Реализация этого метода, см. в разделе <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В этом примере используется <xref:System.Windows.Forms.DataObject> класса, который реализует `IDataObject`, чтобы продемонстрировать использование `GetData` метод. Метод, используемый для получения данных, хранящихся в `myObject`, который связан с определенным типом, `myType`. Тип полученных данных отображается в окне сообщения. В примере предполагается, что вы уже создали <xref:System.Windows.Forms.Form> с именем `Form1`.  
  
 [!code-cpp[GetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData2/CPP/getdata2.cpp#1)]
 [!code-csharp[GetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData2/CS/getdata2.cs#1)]
 [!code-vb[GetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData2/VB/getdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String, autoConvert As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string * bool -&gt; obj" Usage="iDataObject.GetData (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">Формат извлекаемых данных. См. в разделе <see cref="T:System.Windows.Forms.DataFormats" /> о предварительно определенных форматах.</param>
        <param name="autoConvert"><see langword="true" /> для преобразования данных в указанном формате. в противном случае <see langword="false" />.</param>
        <summary>Извлекает данные, связанные с указанным форматом данных, используя значение типа Boolean для определения необходимости преобразования данных в формате.</summary>
        <returns>Данные, связанные с указанным форматом или <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `autoConvert` параметр `true` и этот метод не удается найти данные в указанном формате, он предпринимает попытку преобразования данных в формат. Если данные невозможно преобразовать в указанный формат, или если данные были сохранены с `autoConvert` параметру присвоить `false`, этот метод возвращает `null`.  
  
 Если `autoConvert` параметр `false`, этот метод возвращает данные в указанном формате, или `null` Если невозможно найти данные в этом формате.  
  
 Чтобы определить, связан с данных, или может быть преобразован в формат, вызовите <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> перед вызовом <xref:System.Windows.Forms.IDataObject.GetData%2A>. Вызовите <xref:System.Windows.Forms.IDataObject.GetFormats%2A> список допустимых форматов для данных, хранящихся в данном экземпляре.  
  
> [!NOTE]
>  Данные могут преобразовываться в другой формат, если он был сохранен, указав, что преобразование разрешено, и в том случае, если запрошенный формат совместим с форматом данных. Например данные, хранящиеся в виде Юникода могут быть преобразованы в текст.  
  
 Реализация этого метода, см. в разделе <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В этом примере используется <xref:System.Windows.Forms.DataObject> класса, который реализует `IDataObject`, чтобы продемонстрировать использование `GetData` метод. Извлекаются данные, хранящиеся в `DataObject`, с использованием `autoConvert` параметр для указания необходимости преобразования формата данных. Во-первых, `myDataObject` создается с текстовыми данными. Затем в примере предпринимается дважды получить данные. В первой попытке, оно задается формат как строка и наборы `autoConvert` параметр `false`. Эта попытка завершается сбоем, и результат отображается в окне сообщения с меткой «Message #1». Во второй попытке, в примере извлекается те же данные `autoConvert` параметру присвоить `true`. Эта попытка завершается успешно, и результат отображается в окне сообщения с меткой «Message #2». В примере предполагается, что вы создали <xref:System.Windows.Forms.Form> с именем `Form1`.  
  
 [!code-cpp[GetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData3/CPP/getdata3.cpp#1)]
 [!code-csharp[GetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData3/CS/getdata3.cs#1)]
 [!code-vb[GetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData3/VB/getdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDataPresent">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Определяет, связан ли хранимые в данном экземпляре данные с указанным форматом.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Формат, для которого требуется проверить. См. в разделе <see cref="T:System.Windows.Forms.DataFormats" /> о предварительно определенных форматах.</param>
        <summary>Определяет, связан с данные, хранящиеся в данном экземпляре, или можно преобразовать в указанный формат.</summary>
        <returns><see langword="true" /> Если данные хранятся в связан с данного экземпляра, или могут быть преобразованы в указанный формат; в противном случае <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызовите этот метод, чтобы определить, существует ли в этом формате <xref:System.Windows.Forms.DataObject> перед вызовом <xref:System.Windows.Forms.IDataObject.GetData%2A>. Вызовите <xref:System.Windows.Forms.IDataObject.GetFormats%2A> для форматов, доступных в данном экземпляре.  
  
> [!NOTE]
>  Данные могут преобразовываться в другой формат, если он был сохранен, указав, что преобразование разрешено, и в том случае, если запрошенный формат совместим с форматом данных. Например данные, хранящиеся в виде Юникода могут быть преобразованы в текст.  
  
 Реализация этого метода, см. в разделе <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В этом примере используется <xref:System.Windows.Forms.DataObject> класса, который реализует `IDataObject`, чтобы продемонстрировать использование `GetDataPresent` метод. Во-первых, он создает объект данных, используя строку и `Text` формат. Затем он проверяет, что данные уже находятся в `Text` форматирования и отображает результаты в окне сообщения. В примере предполагается, что вы создали <xref:System.Windows.Forms.Form> с именем `Form1`.  
  
 [!code-cpp[GetDataPresent1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent1/CPP/getdatapresent1.cpp#1)]
 [!code-csharp[GetDataPresent1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent1/CS/getdatapresent1.cs#1)]
 [!code-vb[GetDataPresent1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent1/VB/getdatapresent1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : Type -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format">Объект <see cref="T:System.Type" /> представляющий формат, для которого требуется проверить. См. в разделе <see cref="T:System.Windows.Forms.DataFormats" /> о предварительно определенных форматах.</param>
        <summary>Определяет, связан с данные, хранящиеся в данном экземпляре, или можно преобразовать в указанный формат.</summary>
        <returns><see langword="true" /> Если данные хранятся в связан с данного экземпляра, или могут быть преобразованы в указанный формат; в противном случае <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызовите этот метод, чтобы определить, существует ли в этом формате <xref:System.Windows.Forms.DataObject> перед вызовом <xref:System.Windows.Forms.IDataObject.GetData%2A>. Вызовите <xref:System.Windows.Forms.IDataObject.GetFormats%2A> для форматов, доступных в данном экземпляре.  
  
> [!NOTE]
>  Данные могут преобразовываться в другой формат, если он был сохранен, указав, что преобразование разрешено, и в том случае, если запрошенный формат совместим с форматом данных. Например данные, хранящиеся в виде Юникода могут быть преобразованы в текст.  
  
 Реализация этого метода, см. в разделе <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В этом примере используется <xref:System.Windows.Forms.DataObject> класса, который реализует `IDataObject`, чтобы продемонстрировать использование `GetDataPresent` метод. Во-первых, он создает компонент (`myComponent`) и сохраняет его в объект данных (`myDataObject`). Затем он проверяет, хранится ли указанные данные в `myDataObject`. Если результатом проверки является `true`, он отображает результат в окне сообщения и отображает тип данных в текстовом поле. В этом примере предполагается, что вы уже создали <xref:System.Windows.Forms.Form> с именем `Form1` и <xref:System.Windows.Forms.TextBox> с именем `textBox1`.  
  
 [!code-cpp[GetDataPresent2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent2/CPP/getdatapresent2.cpp#1)]
 [!code-csharp[GetDataPresent2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent2/CS/getdatapresent2.cs#1)]
 [!code-vb[GetDataPresent2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent2/VB/getdatapresent2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String, autoConvert As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string * bool -&gt; bool" Usage="iDataObject.GetDataPresent (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">Формат, для которого требуется проверить. См. в разделе <see cref="T:System.Windows.Forms.DataFormats" /> о предварительно определенных форматах.</param>
        <param name="autoConvert"><see langword="true" /> для определения данных, хранимых в данном экземпляре можно преобразовать в указанный формат; <see langword="false" /> для проверки, являются ли данные в указанном формате.</param>
        <summary>Определяет, связан ли хранимые в данном экземпляре данные с указанным форматом, используя значение типа Boolean для определения необходимости данные преобразуются в формат.</summary>
        <returns><see langword="true" /> Если данные в, или могут быть преобразованы в указанный формат; в противном случае <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызовите этот метод, чтобы определить, существует ли в этом формате <xref:System.Windows.Forms.DataObject> перед вызовом <xref:System.Windows.Forms.IDataObject.GetData%2A>. Вызовите <xref:System.Windows.Forms.IDataObject.GetFormats%2A> для форматов, доступных в данном экземпляре.  
  
 Этот метод возвращает `true` при:  
  
-   `autoConvert` Параметр `true` , и данные в формате, который можно преобразовать в соответствующий формат.  
  
-   `autoConvert` Параметр `false` , и данные в соответствующем формате.  
  
 Этот метод возвращает `false` при:  
  
-   `autoConvert` Параметр `true` и этот метод не удается найти данные в указанном формате и не может преобразовать их в указанный формат, или данные были сохранены с `autoConvert` присвоено `false`.  
  
-   `autoConvert` Параметр `false`, и данные не существуют в данном экземпляре, в указанном формате.  
  
> [!NOTE]
>  Данные могут преобразовываться в другой формат, если он был сохранен, указав, что преобразование разрешено, и в том случае, если запрошенный формат совместим с форматом данных. Например данные, хранящиеся в виде Юникода могут быть преобразованы в текст.  
  
 Реализация этого метода, см. в разделе <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В этом примере используется <xref:System.Windows.Forms.DataObject> класса, который реализует `IDataObject`, чтобы продемонстрировать использование `GetDataPresent` метод. Во-первых, он создает объект данных (`myDataObject`) с помощью строки и `Text` формат. Затем он запрашивает у объекта данные, связанные с `Text` формат, с помощью `autoConvert` параметру присвоить `false`. Эта попытка завершается сбоем, и результат отображается в окне сообщения с меткой «Message #1». Во второй попытке, он задает `autoConvert` параметр `true`. Эта попытка завершается успешно, и результат отображается в окне сообщения с меткой «Message #2». В примере предполагается, что вы создали <xref:System.Windows.Forms.Form> с именем `Form1`.  
  
 [!code-cpp[GetDataPresent3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent3/CPP/getdatapresent3.cpp#1)]
 [!code-csharp[GetDataPresent3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent3/CS/getdatapresent3.cs#1)]
 [!code-vb[GetDataPresent3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent3/VB/getdatapresent3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFormats">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает список всех форматов, в которых данные, хранящиеся в этом экземпляре или в которые они может быть преобразован в.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats();" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : unit -&gt; string[]" Usage="iDataObject.GetFormats " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает список всех форматов, в которых данные, хранящиеся в этом экземпляре или в которые они может быть преобразован в.</summary>
        <returns>Массив имен, представляющий список всех форматов, поддерживаемых данные, хранящиеся в этом объекте.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызовите этот метод, чтобы получить поддерживаемые форматы данных перед вызовом <xref:System.Windows.Forms.IDataObject.GetData%2A> метод. См. в разделе <xref:System.Windows.Forms.DataFormats> класс для стандартных форматов.  
  
> [!NOTE]
>  Данные могут преобразовываться в другой формат, если он был сохранен, указав, что преобразование разрешено, и в том случае, если запрошенный формат совместим с форматом данных. Например данные, хранящиеся в виде Юникода могут быть преобразованы в текст.  
  
 Реализация этого метода, см. в разделе <xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В этом примере используется <xref:System.Windows.Forms.DataObject> класса, который реализует `IDataObject`, чтобы продемонстрировать использование `GetFormats` метод. Во-первых, он создает объект данных (`myDataObject`) с помощью строки и `Text` формат. Затем он извлекает все форматы данных и форматы преобразования данных в объекте данных и отображает полученный список в окне сообщения. В этом примере предполагается, что вы создали <xref:System.Windows.Forms.Form> с именем `Form1`.  
  
 [!code-cpp[GetFormats1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats1/CPP/getformats1.cpp#1)]
 [!code-csharp[GetFormats1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats1/CS/getformats1.cs#1)]
 [!code-vb[GetFormats1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats1/VB/getformats1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats (bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats(bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats (autoConvert As Boolean) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats(bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : bool -&gt; string[]" Usage="iDataObject.GetFormats autoConvert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="autoConvert"><see langword="true" /> для извлечения всех форматов данные, хранящиеся в данном экземпляре, связанный с или могут быть преобразованы. <see langword="false" /> чтобы извлечь только собственные форматы данных.</param>
        <summary>Получает список всех форматов, данные, хранящиеся в данном экземпляре связаны с или могут быть преобразованы, используя значение типа Boolean для определения ли для извлечения всех форматов, которые могут быть преобразованы данные или данные форматов.</summary>
        <returns>Массив имен, представляющий список всех форматов, поддерживаемых данные, хранящиеся в этом объекте.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызовите этот метод, чтобы получить поддерживаемые форматы данных перед вызовом <xref:System.Windows.Forms.IDataObject.GetData%2A> метод. См. в разделе <xref:System.Windows.Forms.DataFormats> класс для стандартных форматов.  
  
> [!NOTE]
>  Данные могут преобразовываться в другой формат, если он был сохранен, указав, что преобразование разрешено, и в том случае, если запрошенный формат совместим с форматом данных. Например данные, хранящиеся в виде Юникода могут быть преобразованы в текст.  
  
 Реализация этого метода, см. в разделе <xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В этом примере используется <xref:System.Windows.Forms.DataObject> класса, который реализует `IDataObject`, чтобы продемонстрировать использование `GetFormats` метод. Во-первых, он создает объект данных (`myDataObject`) с помощью строки и `UnicodeText` формат. Затем оно отправляет два запроса, чтобы получить список всех форматов, связанный с данными. В первом запросе, он задает `autoConvert` параметр `false` : в этом случае возвращается только в собственном формате данных. Во втором запросе, он задает `autoConvert` параметр `true`, так что он получает список форматов, включая форматы, которые могут быть преобразованы данные. В каждом случае полученный список отображается в окне сообщения. В этом примере предполагается, что вы создали <xref:System.Windows.Forms.Form> с именем `Form1`.  
  
 [!code-cpp[GetFormats2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats2/CPP/getformats2.cpp#1)]
 [!code-csharp[GetFormats2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats2/CS/getformats2.cs#1)]
 [!code-vb[GetFormats2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats2/VB/getformats2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Сохраняет указанные данные и связанный с ними формат в этом экземпляре.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : obj -&gt; unit" Usage="iDataObject.SetData data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">Сохраняемые данные.</param>
        <summary>Сохраняет указанные данные в этом экземпляре, используя класс данных для формата.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Формат является производным от класса данных.  
  
 Хранить данные с помощью этого метода могут преобразовываться в совместимый формат при извлечении.  
  
 Реализация этого метода, см. в разделе <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В этом примере используется <xref:System.Windows.Forms.DataObject> класса, который реализует `IDataObject`, чтобы продемонстрировать использование `SetData` метод. Во-первых, он создает компонент (`myComponent`) и сохраняет его в объект данных (`myDataObject`). Затем проверяется ли указанные данные хранятся в объекте данных и отображает результат в окне сообщения. В примере предполагается, что вы создали <xref:System.Windows.Forms.Form> с именем `Form1`.  
  
 [!code-cpp[SetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData1/CPP/setdata1.cpp#1)]
 [!code-csharp[SetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData1/CS/setdata1.cs#1)]
 [!code-vb[SetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData1/VB/setdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Формат, связанный с данными. См. в разделе <see cref="T:System.Windows.Forms.DataFormats" /> о предварительно определенных форматах.</param>
        <param name="data">Сохраняемые данные.</param>
        <summary>Сохраняет указанные данные и связанный с ними формат в этом экземпляре.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если вы не знаете формат целевого приложения, данные можно хранить в нескольких форматах, с помощью этого метода.  
  
 Хранить данные с помощью этого метода могут преобразовываться в совместимый формат при извлечении.  
  
 Реализация этого метода, см. в разделе <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В этом примере используется <xref:System.Windows.Forms.DataObject> класса, который реализует `IDataObject`, чтобы продемонстрировать использование `SetData` метод. Во-первых, он создает объект данных (`myDataObject`) и сохраняет строки в объекте, который задает `UnicodeText` формат. Затем он извлекает данные, хранящиеся в объекте, который задает `Text` форматирования, чтобы данные преобразуются в `Text` формате. Результат отображается в окне сообщения. В этом примере предполагается, что вы создали <xref:System.Windows.Forms.Form> с именем `Form1`.  
  
 [!code-cpp[SetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData2/CPP/setdata2.cpp#1)]
 [!code-csharp[SetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData2/CS/setdata2.cs#1)]
 [!code-vb[SetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData2/VB/setdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (Type format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(class System.Type format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As Type, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(Type ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : Type * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Объект <see cref="T:System.Type" /> представляющий формат, связанный с данными. См. в разделе <see cref="T:System.Windows.Forms.DataFormats" /> о предварительно определенных форматах.</param>
        <param name="data">Сохраняемые данные.</param>
        <summary>Сохраняет указанные данные и связанный тип класса в этом экземпляре.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если вы не знаете формат целевого приложения, данные можно хранить в нескольких форматах, с помощью этого метода.  
  
 Хранить данные с помощью этого метода могут преобразовываться в совместимый формат при извлечении.  
  
 Реализация этого метода, см. в разделе <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В этом примере используется <xref:System.Windows.Forms.DataObject> класса, который реализует `IDataObject`, чтобы продемонстрировать использование `SetData` метод. Во-первых, он создает компонент (`myComponent`) и сохраняет его в объект данных (`myDataObject`), с использованием `myType` указать формат данных. Затем он проверяет, хранится в объекте данных указанного типа и отображает результат в окне сообщения. В примере предполагается, что вы создали <xref:System.Windows.Forms.Form> с именем `Form1`.  
  
 [!code-cpp[SetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData3/CPP/setdata3.cpp#1)]
 [!code-csharp[SetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData3/CS/setdata3.cs#1)]
 [!code-vb[SetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData3/VB/setdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, bool autoConvert, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, bool autoConvert, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, autoConvert As Boolean, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, bool autoConvert, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * bool * obj -&gt; unit" Usage="iDataObject.SetData (format, autoConvert, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Формат, связанный с данными. См. в разделе <see cref="T:System.Windows.Forms.DataFormats" /> о предварительно определенных форматах.</param>
        <param name="autoConvert"><see langword="true" /> Чтобы данные для преобразования в другой формат; в противном случае <see langword="false" />.</param>
        <param name="data">Сохраняемые данные.</param>
        <summary>Сохраняет указанные данные и связанный с ними формат в этом экземпляре, используя значение типа Boolean для указания, может ли быть преобразован в другой формат данных.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если вы не знаете формат целевого приложения, данные можно хранить в нескольких форматах, с помощью этого метода.  
  
 Реализация этого метода, см. в разделе <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В этом примере используется <xref:System.Windows.Forms.DataObject> класса, который реализует `IDataObject`, чтобы продемонстрировать использование `SetData` метод. Во-первых, он создает объект данных (`myDataObject`) и сохраняет `UnicodeText` строка, с помощью `autoConvert` параметру присвоить `false`. Затем получаются форматы, связанные с данными, хранящимися в объекте и отображает результат в окне сообщения. Единственный формат, связанный с данными — `UnicodeText` формат. В этом примере предполагается, что вы создали <xref:System.Windows.Forms.Form> с именем `Form1`.  
  
 [!code-cpp[SetData4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData4/CPP/form1.cpp#1)]
 [!code-csharp[SetData4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData4/CS/form1.cs#1)]
 [!code-vb[SetData4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData4/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>