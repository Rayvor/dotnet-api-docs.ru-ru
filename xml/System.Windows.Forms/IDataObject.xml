<Type Name="IDataObject" FullName="System.Windows.Forms.IDataObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="107b075d1988af8904fd028834582734403a58f8" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65015632" /></Metadata><TypeSignature Language="C#" Value="public interface IDataObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.IDataObject" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataObject" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataObject" />
  <TypeSignature Language="F#" Value="type IDataObject = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Предоставляет не зависящий от формата механизм передачи данных.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IDataObject` Интерфейс используется<xref:System.Windows.Forms.Clipboard> классом и в операциях перетаскивания.  
  
 При реализации в классе <xref:System.Windows.Forms.IDataObject> методы позволяют пользователю хранить данные в нескольких форматах в экземпляре класса. Хранение данных в нескольких форматах повышает вероятность того, что целевое приложение, чьи требования к формату могут быть незнакомыми, может получить хранимые данные. Чтобы сохранить данные в экземпляре <xref:System.Windows.Forms.IDataObject>, <xref:System.Windows.Forms.IDataObject.SetData%2A> вызовите метод и укажите формат данных в `format` параметре. Установите параметр в `false` значение, если не нужно, чтобы сохраненные данные были преобразованы в другой формат при извлечении. `autoConvert` Вызовите <xref:System.Windows.Forms.IDataObject.SetData%2A> несколько раз в одном <xref:System.Windows.Forms.IDataObject> экземпляре для хранения данных более чем в одном формате.  
  
 Хранимые данные извлекаются <xref:System.Windows.Forms.IDataObject> из объекта путем <xref:System.Windows.Forms.IDataObject.GetData%2A> вызова метода и указания формата данных в `format` параметре. Задайте для `autoConvert` `false` параметра значение, чтобы получить только данные, сохраненные в указанном формате. Для преобразования сохраненных данных в указанный формат задайте значение `autoConvert` `true`или не используйте `autoConvert`.  
  
 Чтобы определить форматы данных <xref:System.Windows.Forms.IDataObject>, хранящихся в, используйте следующие <xref:System.Windows.Forms.IDataObject> методы.  
  
-   Вызовите <xref:System.Windows.Forms.IDataObject.GetFormats%2A> метод, чтобы получить массив всех форматов, в которых доступны данные. Задайте для `autoConvert` `false` параметра значение, чтобы получить только те форматы, в которых хранятся данные. Чтобы получить все форматы, в которых доступны данные, задайте для `autoConvert` `true`значение или не используйте этот параметр.  
  
-   Вызовите <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> метод, чтобы определить, доступны ли сохраненные данные в определенном формате. Если вы не хотите, чтобы сохраненные данные были преобразованы в указанный формат, присвойте `autoConvert` `false`параметру значение.  
  
 См. <xref:System.Windows.Forms.DataObject> класс для реализации этого интерфейса. <xref:System.Windows.Forms.Clipboard> См. <xref:System.Windows.Forms.DataFormats> класс для предопределенных форматов данных.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DataObject" />
    <altmember cref="T:System.Windows.Forms.DataFormats" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Получает данные, связанные с заданным форматом.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Формат извлекаемых данных. Сведения о предварительно определенных форматах см. в разделе <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <summary>Получает данные, связанные с заданным форматом.</summary>
        <returns>Данные, связанные с заданным форматом, или значение <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если этот метод не может найти данные в указанном формате, он пытается преобразовать данные в формат. Если данные не могут быть преобразованы в указанный формат, этот метод возвращает `null`значение.  
  
 Чтобы определить, связаны ли данные с или их можно преобразовать в формат, вызовите <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> перед вызовом <xref:System.Windows.Forms.IDataObject.GetData%2A>метода. Вызовите метод <xref:System.Windows.Forms.IDataObject.GetFormats%2A> , чтобы получить список допустимых форматов для данных, хранящихся в этом экземпляре.  
  
> [!NOTE]
>  Данные могут быть преобразованы в другой формат, если они были сохранены с указанием того, что преобразование разрешено, и если запрошенный формат совместим с сохраненным форматом. Например, данные, хранящиеся в Юникоде, можно преобразовать в текст.  
  
 Реализацию этого метода см. в разделе <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В <xref:System.Windows.Forms.DataObject> этом примере используется класс, который реализует `IDataObject,` , чтобы `GetData` продемонстрировать использование метода. Метод используется для получения данных, хранящихся в `myDataObject`, которые связаны `Text` с форматом. В этом примере предполагается, что вы уже <xref:System.Windows.Forms.Form> создали `Form1` именованный <xref:System.Windows.Forms.TextBox> объект `textBox1`и именованный объект.  
  
 [!code-cpp[GetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData1/CPP/getdata1.cpp#1)]
 [!code-csharp[GetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData1/CS/getdata1.cs#1)]
 [!code-vb[GetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData1/VB/getdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : Type -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format">Объект <see cref="T:System.Type" />, представляющий формат извлекаемых данных. Сведения о предварительно определенных форматах см. в разделе <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <summary>Получает данные, связанные с заданным форматом типа класса.</summary>
        <returns>Данные, связанные с заданным форматом, или значение <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если этот метод не может найти данные в указанном формате, он пытается преобразовать данные в формат. Если данные не могут быть преобразованы в указанный формат, этот метод возвращает `null`значение.  
  
 Чтобы определить, связаны ли данные с или их можно преобразовать в формат, вызовите <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> перед вызовом <xref:System.Windows.Forms.IDataObject.GetData%2A>метода. Вызовите метод <xref:System.Windows.Forms.IDataObject.GetFormats%2A> , чтобы получить список допустимых форматов для данных, хранящихся в этом экземпляре.  
  
> [!NOTE]
>  Данные могут быть преобразованы в другой формат, если они были сохранены с указанием того, что преобразование разрешено, и если запрошенный формат совместим с сохраненным форматом. Например, данные, хранящиеся в Юникоде, можно преобразовать в текст.  
  
 Реализацию этого метода см. в разделе <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В этом примере используется <xref:System.Windows.Forms.DataObject> класс, реализующий `IDataObject`, для `GetData` демонстрации использования метода. Метод используется для получения данных, хранящихся в `myObject`, которые связаны с конкретным `myType`типом. Тип полученных данных отображается в окне сообщения. В этом примере предполагается, что вы уже <xref:System.Windows.Forms.Form> создали `Form1`именованный объект.  
  
 [!code-cpp[GetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData2/CPP/getdata2.cpp#1)]
 [!code-csharp[GetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData2/CS/getdata2.cs#1)]
 [!code-vb[GetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData2/VB/getdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String, autoConvert As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string * bool -&gt; obj" Usage="iDataObject.GetData (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">Формат извлекаемых данных. Сведения о предварительно определенных форматах см. в разделе <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <param name="autoConvert">Значение <see langword="true" />, если данные необходимо преобразовать в указанный формат, и значение <see langword="false" /> в противном случае.</param>
        <summary>Получает данные, связанные с указанным форматом данных, используя значение типа Boolean для определения необходимости преобразования данных в этот формат.</summary>
        <returns>Данные, связанные с заданным форматом, или значение <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если параметр имеет значение `true` и этот метод не может найти данные в указанном формате, он пытается преобразовать данные в формат. `autoConvert` Если данные не могут быть преобразованы в указанный формат или если данные были сохранены с `autoConvert` параметром, для `false`которого задано значение, этот `null`метод возвращает значение.  
  
 Если параметр имеет значение `false`, этот метод возвращает данные в указанном формате или `null` значение, если данные в этом формате не могут быть найдены. `autoConvert`  
  
 Чтобы определить, связаны ли данные с или их можно преобразовать в формат, вызовите <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> перед вызовом <xref:System.Windows.Forms.IDataObject.GetData%2A>метода. Вызовите метод <xref:System.Windows.Forms.IDataObject.GetFormats%2A> , чтобы получить список допустимых форматов для данных, хранящихся в этом экземпляре.  
  
> [!NOTE]
>  Данные могут быть преобразованы в другой формат, если они были сохранены с указанием того, что преобразование разрешено, и если запрошенный формат совместим с сохраненным форматом. Например, данные, хранящиеся в Юникоде, можно преобразовать в текст.  
  
 Реализацию этого метода см. в разделе <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В этом примере используется <xref:System.Windows.Forms.DataObject> класс, реализующий `IDataObject`, для `GetData` демонстрации использования метода. В примере извлекаются данные `DataObject`, хранящиеся в, `autoConvert` с помощью параметра указывается, следует ли преобразовывать формат данных. `myDataObject` Сначала создается с текстовыми данными. Затем пример пытается дважды получить данные. В первой пробной версии она задает формат в виде строки и задает для `autoConvert` `false`параметра значение. Эта пробная версия завершается ошибкой, и результат отображается в окне сообщения с меткой "сообщение #1". Во второй пробной версии в примере извлекаются те же данные `autoConvert` с параметром `true`, имеющим значение. Эта пробная версия прошла удачно, и результат отображается в окне сообщения с меткой "сообщение #2". В этом примере предполагается, что вы <xref:System.Windows.Forms.Form> создали `Form1`именованный объект.  
  
 [!code-cpp[GetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData3/CPP/getdata3.cpp#1)]
 [!code-csharp[GetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData3/CS/getdata3.cs#1)]
 [!code-vb[GetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData3/VB/getdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDataPresent">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Определяет, связаны ли хранимые в данном экземпляре данные с указанным форматом.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Формат, для которого выполняется проверка. Сведения о предварительно определенных форматах см. в разделе <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <summary>Определяет, связаны ли хранимые в данном экземпляре данные с указанным форматом или возможно ли их преобразование в этот формат.</summary>
        <returns>Значение <see langword="true" />, если хранящиеся в данном экземпляре данные связаны с указанным форматом или могут быть преобразованы в него. В противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызовите этот метод, чтобы определить, существует ли в <xref:System.Windows.Forms.DataObject> нем формат <xref:System.Windows.Forms.IDataObject.GetData%2A>перед вызовом. Вызовите метод <xref:System.Windows.Forms.IDataObject.GetFormats%2A> для форматов, доступных в этом экземпляре.  
  
> [!NOTE]
>  Данные могут быть преобразованы в другой формат, если они были сохранены с указанием того, что преобразование разрешено, и если запрошенный формат совместим с сохраненным форматом. Например, данные, хранящиеся в Юникоде, можно преобразовать в текст.  
  
 Реализацию этого метода см. в разделе <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В этом примере используется <xref:System.Windows.Forms.DataObject> класс, реализующий `IDataObject`, для `GetDataPresent` демонстрации использования метода. Во-первых, он создает объект данных, используя строку и `Text` формат. Затем он проверяет наличие данных в `Text` формате и отображает результаты в окне сообщения. В этом примере предполагается, что вы <xref:System.Windows.Forms.Form> создали `Form1`именованный объект.  
  
 [!code-cpp[GetDataPresent1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent1/CPP/getdatapresent1.cpp#1)]
 [!code-csharp[GetDataPresent1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent1/CS/getdatapresent1.cs#1)]
 [!code-vb[GetDataPresent1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent1/VB/getdatapresent1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : Type -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format">Тип <see cref="T:System.Type" />, представляющий формат, для которого выполняется проверка. Сведения о предварительно определенных форматах см. в разделе <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <summary>Определяет, связаны ли хранимые в данном экземпляре данные с указанным форматом или возможно ли их преобразование в этот формат.</summary>
        <returns>Значение <see langword="true" />, если хранящиеся в данном экземпляре данные связаны с указанным форматом или могут быть преобразованы в него. В противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызовите этот метод, чтобы определить, существует ли в <xref:System.Windows.Forms.DataObject> нем формат <xref:System.Windows.Forms.IDataObject.GetData%2A>перед вызовом. Вызовите метод <xref:System.Windows.Forms.IDataObject.GetFormats%2A> для форматов, доступных в этом экземпляре.  
  
> [!NOTE]
>  Данные могут быть преобразованы в другой формат, если они были сохранены с указанием того, что преобразование разрешено, и если запрошенный формат совместим с сохраненным форматом. Например, данные, хранящиеся в Юникоде, можно преобразовать в текст.  
  
 Реализацию этого метода см. в разделе <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В этом примере используется <xref:System.Windows.Forms.DataObject> класс, реализующий `IDataObject`, для `GetDataPresent` демонстрации использования метода. Во-первых, он создает компонент`myComponent`() и сохраняет его в объекте данных (`myDataObject`). Затем проверяется, хранятся ли указанные данные в `myDataObject`. Если тест оценивается `true`, он отображает результат в окне сообщения и отображает тип данных в текстовом поле. В <xref:System.Windows.Forms.Form> этом примере предполагается, что вы уже создали `Form1` именованный <xref:System.Windows.Forms.TextBox> объект `textBox1`и именованный объект.  
  
 [!code-cpp[GetDataPresent2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent2/CPP/getdatapresent2.cpp#1)]
 [!code-csharp[GetDataPresent2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent2/CS/getdatapresent2.cs#1)]
 [!code-vb[GetDataPresent2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent2/VB/getdatapresent2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String, autoConvert As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string * bool -&gt; bool" Usage="iDataObject.GetDataPresent (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">Формат, для которого выполняется проверка. Сведения о предварительно определенных форматах см. в разделе <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <param name="autoConvert">Значение <see langword="true" />, если необходимо определить возможность преобразования данных, хранимых в данном экземпляре, в указанный формат, и значение <see langword="false" />, если необходимо проверить наличие данных в указанном формате.</param>
        <summary>Определяет, связаны ли хранимые в данном экземпляре данные с указанным форматом, определяя с помощью значения типа Boolean, необходимо ли преобразовать данные в этот формат.</summary>
        <returns>Значение <see langword="true" />, если данные находятся в указанном формате или могут быть в него преобразованы; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызовите этот метод, чтобы определить, существует ли в <xref:System.Windows.Forms.DataObject> нем формат <xref:System.Windows.Forms.IDataObject.GetData%2A>перед вызовом. Вызовите метод <xref:System.Windows.Forms.IDataObject.GetFormats%2A> для форматов, доступных в этом экземпляре.  
  
 Этот метод возвращает `true` значение, если:  
  
-   Параметр имеет значение `true` , а данные имеют формат, который можно преобразовать в соответствующий формат. `autoConvert`  
  
-   `autoConvert` Параметр имеет`false` значение, и данные имеют соответствующий формат.  
  
 Этот метод возвращает `false` значение, если:  
  
-   Параметр имеет значение `true` , и этот метод не может найти данные в указанном формате и не может преобразовать данные в указанный формат, или если данные `false`были сохранены с `autoConvert` параметром. `autoConvert`  
  
-   Параметр имеет значение `false`, а данные не существуют в данном экземпляре в указанном формате. `autoConvert`  
  
> [!NOTE]
>  Данные могут быть преобразованы в другой формат, если они были сохранены с указанием того, что преобразование разрешено, и если запрошенный формат совместим с сохраненным форматом. Например, данные, хранящиеся в Юникоде, можно преобразовать в текст.  
  
 Реализацию этого метода см. в разделе <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В этом примере используется <xref:System.Windows.Forms.DataObject> класс, реализующий `IDataObject`, для `GetDataPresent` демонстрации использования метода. Во-первых, он создает объект данных`myDataObject`(), используя строку `Text` и формат. Затем он запрашивает у объекта данные, связанные с `Text` форматом, `autoConvert` а параметр имеет значение `false`. Эта пробная версия завершается ошибкой, и результат отображается в окне сообщения с меткой "сообщение #1". Во второй пробной версии для `autoConvert` `true`параметра задается значение. Эта пробная версия прошла удачно, и результат отображается в окне сообщения с меткой "сообщение #2". В этом примере предполагается, что вы <xref:System.Windows.Forms.Form> создали `Form1`именованный объект.  
  
 [!code-cpp[GetDataPresent3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent3/CPP/getdatapresent3.cpp#1)]
 [!code-csharp[GetDataPresent3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent3/CS/getdatapresent3.cs#1)]
 [!code-vb[GetDataPresent3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent3/VB/getdatapresent3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFormats">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает список всех форматов, с которыми связаны данные, хранящиеся в этом экземпляре, или в которые они могут быть преобразованы.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats();" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : unit -&gt; string[]" Usage="iDataObject.GetFormats " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает список всех форматов, с которыми связаны данные, хранящиеся в этом экземпляре, или в которые они могут быть преобразованы.</summary>
        <returns>Массив имен, представляющий список всех форматов, поддерживаемых данными, хранящимися в данном объекте.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызовите этот метод, чтобы получить Поддерживаемые форматы данных перед вызовом <xref:System.Windows.Forms.IDataObject.GetData%2A> метода. См. <xref:System.Windows.Forms.DataFormats> класс для стандартных форматов.  
  
> [!NOTE]
>  Данные могут быть преобразованы в другой формат, если они были сохранены с указанием того, что преобразование разрешено, и если запрошенный формат совместим с сохраненным форматом. Например, данные, хранящиеся в Юникоде, можно преобразовать в текст.  
  
 Реализацию этого метода см. в разделе <xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В этом примере используется <xref:System.Windows.Forms.DataObject> класс, реализующий `IDataObject`, для `GetFormats` демонстрации использования метода. Во-первых, он создает объект данных`myDataObject`(), используя строку `Text` и формат. Затем он извлекает все форматы данных и форматы преобразования данных в объекте данных и отображает полученный список в окне сообщения. В этом примере предполагается, что вы <xref:System.Windows.Forms.Form> создали `Form1`именованный объект.  
  
 [!code-cpp[GetFormats1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats1/CPP/getformats1.cpp#1)]
 [!code-csharp[GetFormats1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats1/CS/getformats1.cs#1)]
 [!code-vb[GetFormats1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats1/VB/getformats1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats (bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats(bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats (autoConvert As Boolean) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats(bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : bool -&gt; string[]" Usage="iDataObject.GetFormats autoConvert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="autoConvert">Значение <see langword="true" />, если необходимо извлечь все форматы, с которыми связаны данные, хранящиеся в этом экземпляре, или форматы, в которые они могут быть преобразованы. Значение <see langword="false" />, если необходимо извлечь только собственные форматы данных.</param>
        <summary>Получает список всех форматов, с которыми связаны хранимые в этом экземпляре данные или в которые они могут быть преобразованы. С помощью значения типа Boolean определяется, необходимо ли извлечь все форматы, в которые данные могут быть преобразованы, или только собственные форматы данных.</summary>
        <returns>Массив имен, представляющий список всех форматов, поддерживаемых данными, хранящимися в данном объекте.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызовите этот метод, чтобы получить Поддерживаемые форматы данных перед вызовом <xref:System.Windows.Forms.IDataObject.GetData%2A> метода. См. <xref:System.Windows.Forms.DataFormats> класс для стандартных форматов.  
  
> [!NOTE]
>  Данные могут быть преобразованы в другой формат, если они были сохранены с указанием того, что преобразование разрешено, и если запрошенный формат совместим с сохраненным форматом. Например, данные, хранящиеся в Юникоде, можно преобразовать в текст.  
  
 Реализацию этого метода см. в разделе <xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В этом примере используется <xref:System.Windows.Forms.DataObject> класс, реализующий `IDataObject`, для `GetFormats` демонстрации использования метода. Во-первых, он создает объект данных`myDataObject`(), используя строку `UnicodeText` и формат. Затем он выполняет два запроса для получения форматов, связанных с данными. В первом запросе он устанавливает `autoConvert` для `false` параметра значение: в этом случае возвращаются только собственные форматы данных. Во втором запросе он устанавливает `autoConvert` для `true`параметра значение, чтобы он мог получить список форматов, включая форматы, в которые данные могут быть преобразованы. В каждом случае полученный список отображается в окне сообщения. В этом примере предполагается, что вы <xref:System.Windows.Forms.Form> создали `Form1`именованный объект.  
  
 [!code-cpp[GetFormats2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats2/CPP/getformats2.cpp#1)]
 [!code-csharp[GetFormats2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats2/CS/getformats2.cs#1)]
 [!code-vb[GetFormats2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats2/VB/getformats2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Сохраняет указанные данные и связанный с ними формат в этом экземпляре.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : obj -&gt; unit" Usage="iDataObject.SetData data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">Сохраняемые данные.</param>
        <summary>Сохраняет указанные данные в этом экземпляре, используя класс данных для формата.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Формат является производным от класса данных.  
  
 Данные, хранимые с помощью этого метода, можно преобразовать в совместимый формат при извлечении.  
  
 Реализацию этого метода см. в разделе <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В этом примере используется <xref:System.Windows.Forms.DataObject> класс, реализующий `IDataObject`, для `SetData` демонстрации использования метода. Во-первых, он создает компонент`myComponent`() и сохраняет его в объекте данных (`myDataObject`). Затем он проверяет, хранятся ли указанные данные в объекте данных, и отображает результат в окне сообщения. В этом примере предполагается, что вы <xref:System.Windows.Forms.Form> создали `Form1`именованный объект.  
  
 [!code-cpp[SetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData1/CPP/setdata1.cpp#1)]
 [!code-csharp[SetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData1/CS/setdata1.cs#1)]
 [!code-vb[SetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData1/VB/setdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Формат, связанный с данными. Сведения о предварительно определенных форматах см. в разделе <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <param name="data">Сохраняемые данные.</param>
        <summary>Сохраняет указанные данные и связанный с ними формат в этом экземпляре.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если вы не знакомы с форматом целевого приложения, вы можете хранить данные в нескольких форматах с помощью этого метода.  
  
 Данные, хранимые с помощью этого метода, можно преобразовать в совместимый формат при извлечении.  
  
 Реализацию этого метода см. в разделе <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В этом примере используется <xref:System.Windows.Forms.DataObject> класс, реализующий `IDataObject`, для `SetData` демонстрации использования метода. Сначала он создает объект данных (`myDataObject`) и сохраняет строку в объекте, `UnicodeText` задающем формат. Затем он извлекает данные, хранящиеся в объекте, указав `Text` формат, чтобы данные были преобразованы `Text` в формат. Результат отображается в окне сообщения. В этом примере предполагается, что вы <xref:System.Windows.Forms.Form> создали `Form1`именованный объект.  
  
 [!code-cpp[SetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData2/CPP/setdata2.cpp#1)]
 [!code-csharp[SetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData2/CS/setdata2.cs#1)]
 [!code-vb[SetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData2/VB/setdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (Type format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(class System.Type format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As Type, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(Type ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : Type * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Тип <see cref="T:System.Type" />, представляющий формат, связанный с данными. Сведения о предварительно определенных форматах см. в разделе <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <param name="data">Сохраняемые данные.</param>
        <summary>Сохраняет указанные данные и связанный с ними тип класса в этом экземпляре.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если вы не знакомы с форматом целевого приложения, вы можете хранить данные в нескольких форматах с помощью этого метода.  
  
 Данные, хранимые с помощью этого метода, можно преобразовать в совместимый формат при извлечении.  
  
 Реализацию этого метода см. в разделе <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В этом примере используется <xref:System.Windows.Forms.DataObject> класс, реализующий `IDataObject`, для `SetData` демонстрации использования метода. Во-первых, он создает компонент`myComponent`() и сохраняет его в объекте данных (`myDataObject`), используя `myType` для указания формата данных. Затем он проверяет, хранится ли данные указанного типа в объекте, и отображает результат в окне сообщения. В этом примере предполагается, что вы <xref:System.Windows.Forms.Form> создали `Form1`именованный объект.  
  
 [!code-cpp[SetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData3/CPP/setdata3.cpp#1)]
 [!code-csharp[SetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData3/CS/setdata3.cs#1)]
 [!code-vb[SetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData3/VB/setdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, bool autoConvert, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, bool autoConvert, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, autoConvert As Boolean, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, bool autoConvert, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * bool * obj -&gt; unit" Usage="iDataObject.SetData (format, autoConvert, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Формат, связанный с данными. Сведения о предварительно определенных форматах см. в разделе <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <param name="autoConvert">Значение <see langword="true" />, если необходимо разрешить преобразование данных в другой формат; в противном случае — значение <see langword="false" />.</param>
        <param name="data">Сохраняемые данные.</param>
        <summary>Сохраняет указанные данные и связанный с ними формат в этом экземпляре и в значении типа Boolean задает, возможно ли преобразование данных в другой формат.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если вы не знакомы с форматом целевого приложения, вы можете хранить данные в нескольких форматах с помощью этого метода.  
  
 Реализацию этого метода см. в разделе <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В этом примере используется <xref:System.Windows.Forms.DataObject> класс, реализующий `IDataObject`, для `SetData` демонстрации использования метода. Сначала он создает`myDataObject`объект данных () и `UnicodeText` сохраняет `autoConvert` в нем строку `false`с параметром, имеющим значение. Затем он получает формат (ы), связанный с данными, хранящимися в объекте, и отображает результат в окне сообщения. Единственный формат, связанный с данными, — `UnicodeText` это формат. В этом примере предполагается, что вы <xref:System.Windows.Forms.Form> создали `Form1`именованный объект.  
  
 [!code-cpp[SetData4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData4/CPP/form1.cpp#1)]
 [!code-csharp[SetData4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData4/CS/form1.cs#1)]
 [!code-vb[SetData4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData4/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>