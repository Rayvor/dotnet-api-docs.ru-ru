<Type Name="HtmlWindow" FullName="System.Windows.Forms.HtmlWindow">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1aef2f327973525b659c9b3f24e2a0fac27a3ad0" /><Meta Name="ms.sourcegitcommit" Value="9a6da88bd5455e8274257ca7ad259b42f1de114f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="05/22/2019" /><Meta Name="ms.locfileid" Value="66008436" /></Metadata><TypeSignature Language="C#" Value="public sealed class HtmlWindow" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HtmlWindow extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.HtmlWindow" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HtmlWindow" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlWindow sealed" />
  <TypeSignature Language="F#" Value="type HtmlWindow = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Представляет логическое окно, в котором содержится один или несколько экземпляров <see cref="T:System.Windows.Forms.HtmlDocument" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow> не следует путать с концепцией окна в Windows Forms или Windows API; существует не `HWND` или аналогичному ресурсу Windows, соответствующий экземпляр <xref:System.Windows.Forms.HtmlWindow>. Вместо этого <xref:System.Windows.Forms.HtmlWindow> содержит высокоуровневый описания расположению документа на пользователя экрана, а также методы для взаимодействия с пользователями, запросы и диалоговые окна. <xref:System.Windows.Forms.HtmlWindow> действует как логический контейнер для документов веб-страницы и ее метаданные, такие как расположение документа и возможности веб-браузера.  
  
 Веб страница состоит из одного документа, или в `FRAMESET` содержащий один или несколько `FRAME` элементов, каждый из которых размещает свой собственный документ. Разработчики используют наборы рамок для отображения логически связанных страниц рядом друг с другом (например, страницы содержимого рядом со страницей навигации). Если страница состоит из одного документа, вы сможете открыть его через <xref:System.Windows.Forms.HtmlWindow.Document%2A> свойство <xref:System.Windows.Forms.HtmlWindow>; Если страница использует кадры, можно получить доступ к их документов с помощью <xref:System.Windows.Forms.HtmlWindow.Frames%2A> коллекции, которая состоит из одного или нескольких <xref:System.Windows.Forms.HtmlWindow> объектов.  
  
 При узла <xref:System.Windows.Forms.WebBrowser> элемента управления в приложении Windows Forms, вы можете взаимодействовать с пользователем, с помощью стандартных классов Windows Forms, таких как <xref:System.Windows.Forms.Form> или <xref:System.Windows.Forms.MessageBox>, или можно использовать методы <xref:System.Windows.Forms.HtmlWindow> определенные для этой цели. <xref:System.Windows.Forms.HtmlWindow.Alert%2A> Метод представляет простое диалоговое окно с пользовательским текстом и **ОК** меню. <xref:System.Windows.Forms.HtmlWindow.Prompt%2A> представляет строку пользовательского текста и поля ввода текста для пользователя; и <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> выводит диалоговое окно с указанием пользовательского текста и **ОК** и **отменить** кнопки.  
  
 Можно использовать <xref:System.Windows.Forms.HtmlWindow> для открытия новых окон, содержащий новые документы. <xref:System.Windows.Forms.HtmlWindow.Open%2A> Загружает указанный URL-адрес в именованном окне, создает его, если он еще не существует, хотя <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> всегда открывает ее URL-адрес в только что созданный окне.  
  
   
  
## Examples  
 В следующем примере кода содержит два метода. Первый открывает URL-адреса в окне в виде `displayWindow`, создающий со строкой состояния отображения. Второй открывается другой URL-адрес в одном окне, но указывает, что должно отображаться только строка размещения. Обратите внимание на то, что размеры окна и элементы управления, которые отображаются зависит, в которой сначала открыт URL-адрес. В примере кода требуется, что форма содержит <xref:System.Windows.Forms.WebBrowser> управления с именем `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#13)]  
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms535873.aspx">окно объекта</related>
    <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/aa741505.aspx">IHTMLWindow2 Interface</related>
  </Docs>
  <Members>
    <Member MemberName="Alert">
      <MemberSignature Language="C#" Value="public void Alert (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Alert(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Alert(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Alert (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Alert(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Alert : string -&gt; unit" Usage="htmlWindow.Alert message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Строка <see cref="T:System.String" />, отображаемая в окне сообщения.</param>
        <summary>Отображает окно сообщения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MessageBox?displayProperty=nameWithType> Класс предлагает более мощная версия <xref:System.Windows.Forms.HtmlWindow.Alert%2A> метод.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms535933.aspx">Метод Alert</related>
      </Docs>
    </Member>
    <Member MemberName="AttachEventHandler">
      <MemberSignature Language="C#" Value="public void AttachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.AttachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.AttachEventHandler : string * EventHandler -&gt; unit" Usage="htmlWindow.AttachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">Имя события для обработки.</param>
        <param name="eventHandler">Ссылка на управляемый код, который обрабатывает это событие.</param>
        <summary>Добавляет обработчик событий для именованного события HTML DOM.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Не следует присоединять событие HTML-документ или одного из его объектов, пока завершится загрузка документа. Является самой ранней, этот метод следует вызывать в <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> событие <xref:System.Windows.Forms.WebBrowser> элемента управления.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener">EventTarget.addEventListener()</related>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="htmlWindow.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Закрывает окно.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Windows.Forms.HtmlWindow.IsClosed%2A> свойства, чтобы определить, если окно уже закрыто. Если окно уже закрыто, этот метод не будет действовать.  
  
 При создании новых окон с помощью <xref:System.Windows.Forms.HtmlWindow.Open%2A> или <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, <xref:System.Windows.Forms.HtmlWindow.Close%2A> приводит к объектной модели документов HTML открыть новый экземпляр Internet Explorer. Если вы не вызываете <xref:System.Windows.Forms.HtmlWindow.Close%2A> на всех windows, вы создали этот экземпляр Internet Explorer будут продолжать выполняться даже в том случае, после закрытия приложения.  
  
   
  
## Examples  
 В следующем примере кода открывает окно и закрывается, если пользователь не использовал его в течение пяти минут. В примере кода написано в предположении, что форма содержит <xref:System.Windows.Forms.WebBrowser> управления с именем `WebBrowser1`, <xref:System.Windows.Forms.Button> с именем `Button1`и <xref:System.Windows.Forms.Timer> класс с именем `Timer1`. Чтобы успешно выполнить этот пример, измените первый аргумент, предоставленный для <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> на допустимый URL-адрес.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#9)]
 [!code-vb[System.Windows.Forms.HtmlWindow#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536367.aspx">Метод Close</related>
      </Docs>
    </Member>
    <Member MemberName="Confirm">
      <MemberSignature Language="C#" Value="public bool Confirm (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Confirm(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Confirm(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confirm (message As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Confirm(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Confirm : string -&gt; bool" Usage="htmlWindow.Confirm message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Текст, отображаемый для пользователя.</param>
        <summary>Отображает диалоговое окно с сообщением и кнопками для запроса ответа «Да» или «Нет».</summary>
        <returns>Значение <see langword="true" />, если пользователь нажал кнопку **Да**; значение <see langword="false" />, если пользователь нажал кнопку **Нет** или закрыл диалоговое окно.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> отображает модальное диалоговое окно; он не будет иметь возможность доступа к нижележащей страницы HTML, закрывая это диалоговое окно.  
  
## Examples  

Скопируйте следующий код HTML и сохраните его в форму с названием orderForm.htm:  

```html
<HTML>
<BODY>
<FORM name="NewOrderForm">
Select Part Type:
<SELECT name="PartType">
  <OPTION>AZ-3700
  <OPTION>AZ-3701
  <OPTION>AZ-3702  
</SELECT><br/>
Quantity: <INPUT type="text" name="PartQty" size="2" maxsize="2" /><br/>
Building/Desk:
<INPUT type="text" name="PartBuilding" size="2" maxsize="2"/> /  
<INPUT type="text" name="PartDesk" size="2" maxsize="2"/><p/>
<INPUT type="submit" value="Transmit Order"/>
</FORM>
</BODY>
</HTML>
```

В следующем примере отображается <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> диалоговое окно, когда пользователь отправляет `NewOrderForm`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#10)]
 [!code-vb[System.Windows.Forms.HtmlWindow#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536376.aspx">Подтвердите способ</related>
      </Docs>
    </Member>
    <Member MemberName="DetachEventHandler">
      <MemberSignature Language="C#" Value="public void DetachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DetachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.DetachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DetachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.DetachEventHandler : string * EventHandler -&gt; unit" Usage="htmlWindow.DetachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">Имя события для обработки.</param>
        <param name="eventHandler">Ссылка на управляемый код, который обрабатывает это событие.</param>
        <summary>Удаляет именованный обработчик событий.</summary>
        <remarks>To be added.</remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536411.aspx">Метод detachEvent</related>
      </Docs>
    </Member>
    <Member MemberName="Document">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlDocument Document { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlDocument Document" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Document" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Document As HtmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlDocument ^ Document { System::Windows::Forms::HtmlDocument ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Document : System.Windows.Forms.HtmlDocument" Usage="System.Windows.Forms.HtmlWindow.Document" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает HTML-документ, содержащийся в этом окне.</summary>
        <value>Допустимый экземпляр <see cref="T:System.Windows.Forms.HtmlDocument" />, если документ загружен. Если это окно содержит <c>FRAMESET</c>, или документ не загружена, будет возвращена <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило, вы будете обращаться к <xref:System.Windows.Forms.HtmlWindow.Document%2A> через <xref:System.Windows.Forms.WebBrowser.Document%2A> свойство <xref:System.Windows.Forms.WebBrowser> элемента управления. Это свойство используется, когда необходимо получить доступ к документу в `FRAME` с помощью <xref:System.Windows.Forms.HtmlWindow.Frames%2A> коллекции.  
  
   
  
## Examples  
 В следующем примере кода проверяет каждый документ на странице, содержащей рамки и создается таблица, содержащая все внешние ссылки с каждой страницы для дальнейшего изучения.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#2)]
 [!code-vb[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DomWindow">
      <MemberSignature Language="C#" Value="public object DomWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DomWindow" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.DomWindow" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DomWindow As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DomWindow { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DomWindow : obj" Usage="System.Windows.Forms.HtmlWindow.DomWindow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает неуправляемый интерфейс, оболочкой для которого является этот класс.</summary>
        <value>Объект, который может быть приведен к <see langword="IHTMLWindow2" />, <see langword="IHTMLWindow3" />, или <see langword="IHTMLWindow4" /> указатель.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Использование базовых указателей неуправляемый интерфейс для модели объектов документов (DOM) для выполнения методов, не предоставляемые <xref:System.Windows.Forms.HtmlWindow>.  
  
 Необходимо добавить указанный неуправляемый MSHTML.dll для использования <xref:System.Windows.Forms.HtmlWindow.DomWindow%2A>. Дополнительные сведения см. в разделе [импорт библиотеки типов в виде сборки](~/docs/framework/interop/importing-a-type-library-as-an-assembly.md).  
  
   
  
## Examples  
 Следующий пример кода получает `IHTMLWindow2` указатель из документа в окно и отображает новый документ в модальном окне.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#3)]
 [!code-vb[System.Windows.Forms.HtmlWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/aa741505.aspx">IHTMLWindow2 Interface</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/aa741356.aspx">Интерфейс IHTMLWindow3</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/aa741344.aspx">IHTMLWindow4 Interface</related>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="htmlWindow.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Объект для тестирования.</param>
        <summary>Тестирует объект на равенство с текущим объектом.</summary>
        <returns>Значение <see langword="true" />, если объекты равны, в противном случае — значение <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementErrorEventHandler Error;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementErrorEventHandler Error" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Error" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Error As HtmlElementErrorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementErrorEventHandler ^ Error;" />
      <MemberSignature Language="F#" Value="member this.Error : System.Windows.Forms.HtmlElementErrorEventHandler " Usage="member this.Error : System.Windows.Forms.HtmlElementErrorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при появлении ошибки во время выполнения в скрипты, выполняющемся в окне.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML-страницы могут содержать код скрипта, обычно на языке JScript или VBScript, который выполняется при загрузке страницы. <xref:System.Windows.Forms.HtmlWindow.Error> происходит каждый раз, когда скрипт обнаруживает ошибку времени выполнения. Так как код сценария с поздним связыванием, что означает, что вызовы для объекта не разрешаются до времени выполнения, ошибки могут содержать все, от ссылки на пустой объект для вызова неопределенного свойства или метода.  
  
 Можно задать <xref:System.Windows.Forms.HtmlElementErrorEventArgs.Handled%2A> свойство <xref:System.Windows.Forms.HtmlElementErrorEventArgs> в значение true, чтобы предотвратить отображение в диалоговом окне собственной ошибки в Internet Explorer.
  
   
  
## Examples  
 В следующем примере кода перехватывается ошибка, результаты, если скрипт на HTML-странице пытается получить доступ к объекту, который не определен в документе. Должна быть полностью загружены, прежде чем <xref:System.Windows.Forms.HtmlWindow.Error> присоединен обработчик событий, в противном случае пример не будет работать.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#16](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#16)]
 [!code-vb[System.Windows.Forms.HtmlWindow#16](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#16)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/cc197053.aspx">События OnError</related>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Focus();" />
      <MemberSignature Language="F#" Value="member this.Focus : unit -&gt; unit" Usage="htmlWindow.Focus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Перемещает фокус в текущее окно.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если другое окно фокус перед <xref:System.Windows.Forms.HtmlWindow.Focus%2A> был вызван, это окно теряет фокус.  
  
 Не вызывайте фокус на элементе внутри окна до окна <xref:System.Windows.Forms.HtmlWindow.Load> события.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536425.aspx">Метод фокус</related>
      </Docs>
    </Member>
    <Member MemberName="Frames">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindowCollection Frames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindowCollection Frames" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Frames" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Frames As HtmlWindowCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindowCollection ^ Frames { System::Windows::Forms::HtmlWindowCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Frames : System.Windows.Forms.HtmlWindowCollection" Usage="System.Windows.Forms.HtmlWindow.Frames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindowCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает ссылку на каждый из элементов <c>FRAME</c>, определенных на веб-странице.</summary>
        <value><see cref="T:System.Windows.Forms.HtmlWindowCollection" /> В документе <c>КАДРА</c> и <c>IFRAME</c> объектов.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект `FRAME` — это набор окон, определенный в `FRAMESET`. `FRAME`позволяет размещать несколько документов в одном документе. Каждый `FRAME` имеет определенную определенных строк и столбцов шириной и располагается на странице по отношению к другой `FRAME`определенных в `FRAMESET`; положение `FRAME` фиксирована, несмотря на то, что пользователь может иногда с помощью мыши курсор, чтобы увеличить или уменьшить размер `FRAME`. `IFRAME` Похож на кадр, но она должна быть зафиксирована это Фиксированная позиция.  
  
 Кадры будет содержать один экземпляр <xref:System.Windows.Forms.HtmlWindow> для каждого `FRAME` или `IFRAME` определенных веб-странице.  
  
   
  
## Examples  
 В следующем примере кода проверяет каждый документ на странице, содержащей рамки и создается таблица, содержащая все внешние ссылки с каждой страницы для дальнейшего изучения.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#2)]
 [!code-vb[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms537459.aspx">кадры коллекции</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="htmlWindow.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Служит хэш-функцией для определенного типа.</summary>
        <returns>Хэш-код для текущего объекта <see cref="T:System.Windows.Forms.HtmlWindow" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.GotFocus : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при получении текущим окном фокуса пользовательского ввода.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.GotFocus> происходит по:  
  
-   Первое окно в `FRAMESET` при `FRAMESET` первой загрузке.  
  
-   `FRAME` , Последнее было фокус, если окно, содержащее <xref:System.Windows.Forms.WebBrowser> управления будет выведен на передний план.  
  
-   Объект `FRAME` выбранной пользователем, но только в том случае, если щелчка не поместить фокус на элемент в пределах окна.  
  
 Не удается отменить действие по умолчанию для <xref:System.Windows.Forms.HtmlWindow.GotFocus> событий, или помешать восходящей маршрутизации.
  
   
  
## Examples  
 В следующем примере кода показано использование этого элемента. В примере обработчик событий сообщает о вхождение <xref:System.Windows.Forms.HtmlWindow.GotFocus> событий. Этот отчет позволяет выяснить, когда происходит событие и может оказаться полезным при отладке.  
  
 Чтобы запустить пример кода, вставьте его в проект, который содержит экземпляр типа <xref:System.Windows.Forms.HtmlWindow> с именем `HtmlWindow1`. Убедитесь, что обработчик событий, связанный с <xref:System.Windows.Forms.HtmlWindow.GotFocus> событий.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#452](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#452)]
 [!code-vb[System.Windows.Forms.EventExamples#452](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#452)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536934.aspx">onfocus событий</related>
      </Docs>
    </Member>
    <Member MemberName="History">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlHistory History { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlHistory History" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.History" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property History As HtmlHistory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlHistory ^ History { System::Windows::Forms::HtmlHistory ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.History : System.Windows.Forms.HtmlHistory" Usage="System.Windows.Forms.HtmlWindow.History" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlHistory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает объект, содержащий последние посещенные пользователем URL-адреса.</summary>
        <value><see cref="T:System.Windows.Forms.HtmlHistory" /> для текущего окна.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.History%2A> содержит все URL-адреса, переход в текущем окне, который называется *стек навигации*и предоставляет методы для перехода назад в этих документах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClosed">
      <MemberSignature Language="C#" Value="public bool IsClosed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClosed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.IsClosed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClosed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClosed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClosed : bool" Usage="System.Windows.Forms.HtmlWindow.IsClosed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, является ли это окно открытым или закрытым.</summary>
        <value>Значение <see langword="true" />, если окно все еще открыто на экране; в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если <xref:System.Windows.Forms.HtmlWindow> было закрыто пользователем или посредством вызова <xref:System.Windows.Forms.HtmlWindow.Close%2A> метод, попытка перехода на новый URL-адрес или получить доступ к документу окна будет привести к ошибке. Это свойство используется для определения его можно безопасно вызывать свойства и методы в объекте текущего окна.  
  
   
  
## Examples  
 В следующем примере кода открывает окно и закрывается, если пользователь не использовал его в течение пяти минут. В примере кода требуется наличие формы <xref:System.Windows.Forms.WebBrowser> управления с именем `WebBrowser1`, <xref:System.Windows.Forms.Button> с именем `Button1`и <xref:System.Windows.Forms.Timer> класс с именем `Timer1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms537459.aspx">закрытое свойство</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Load;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Load" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Load" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Load As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Load;" />
      <MemberSignature Language="F#" Value="member this.Load : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Load : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит после окончания инициализации документа окна и всех его элементов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.Load> Событий работает аналогично <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> событий на <xref:System.Windows.Forms.WebBrowser> управления: он сообщает, что он безопасен для доступа к HTML-элементам внутри документа.  
  
 Не удается отменить действие по умолчанию для <xref:System.Windows.Forms.HtmlWindow.Load> событий.
  
   
  
## Examples  
 В следующем примере кода показано использование этого элемента. В примере обработчик событий сообщает о вхождение <xref:System.Windows.Forms.HtmlWindow.Load> событий. Этот отчет позволяет выяснить, когда происходит событие и может оказаться полезным при отладке. Чтобы создать отчет для нескольких событий или событий, которые происходят часто, рассмотрите возможность замены <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> с <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> или добавлении сообщения в многострочном <xref:System.Windows.Forms.TextBox>.  
  
 Чтобы запустить пример кода, вставьте его в проект, который содержит экземпляр типа <xref:System.Windows.Forms.HtmlWindow> с именем `HtmlWindow1`. Убедитесь, что обработчик событий, связанный с <xref:System.Windows.Forms.HtmlWindow.Load> событий.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#453](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#453)]
 [!code-vb[System.Windows.Forms.EventExamples#453](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#453)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/cc197055.aspx">Событие onLoad</related>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.LostFocus : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при потере окном фокуса ввода пользователя.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода показано использование этого элемента. В примере обработчик событий сообщает о вхождение <xref:System.Windows.Forms.HtmlWindow.LostFocus> событий. Этот отчет позволяет выяснить, когда происходит событие и может оказаться полезным при отладке.  
  
 Чтобы запустить пример кода, вставьте его в проект, который содержит экземпляр типа <xref:System.Windows.Forms.HtmlWindow> с именем `HtmlWindow1`. Убедитесь, что обработчик событий, связанный с <xref:System.Windows.Forms.HtmlWindow.LostFocus> событий.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#454](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#454)]
 [!code-vb[System.Windows.Forms.EventExamples#454](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#454)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Перемещает окно в место, указанное координатами на экране.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.MoveTo(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveTo(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.MoveTo : System.Drawing.Point -&gt; unit" Usage="htmlWindow.MoveTo point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">Координата по оси X и Y верхнего левого угла.</param>
        <summary>Перемещает окно в место, указанное координатами на экране.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Нельзя использовать <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> для перемещение окна за пределы видимой края экрана; этот метод также доступен в сценарии на веб-страницы и позволяя недоверенных скрипт для визуализации окна не считается безопасным.  
  
 <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> будет выдано <xref:System.UnauthorizedAccessException> Если вы пытаетесь переместить окно и родительского окна имеют разные домены верхнего уровня. Например, если вы размещаете <xref:System.Windows.Forms.WebBrowser> для управления a.adatum.com, создание нового окна с помощью <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> для отображения b.adatum.com. В этом случае оба окна считаются частью один и тот же домен верхнего уровня, и исключение не создается. Тем не менее при вызове метода <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> для отображения www,microsoft.com, два окна теперь имеют разные домены верхнего уровня и <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> операцию вызовет исключение, порождаемое.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">Код, пытающийся выполнить эту операцию, не имеет разрешение на работу с этим окном.</exception>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536626.aspx">Метод moveTo</related>
      </Docs>
    </Member>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.MoveTo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveTo (x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveTo(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.MoveTo : int * int -&gt; unit" Usage="htmlWindow.MoveTo (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Координата по оси X верхнего левого угла окна.</param>
        <param name="y">Координата по оси Y верхнего левого угла окна.</param>
        <summary>Перемещает окно в место, указанное координатами на экране.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Нельзя использовать <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> для перемещение окна за пределы видимой края экрана; этот метод также доступен в сценарии на веб-страницы и позволяя недоверенных скрипт для визуализации окна не считается безопасным.  
  
 <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> будет выдано <xref:System.UnauthorizedAccessException> Если вы пытаетесь переместить окно и родительского окна имеют разные домены верхнего уровня. Например, если вы размещаете <xref:System.Windows.Forms.WebBrowser> указывает a.adatum.com, управления и создания нового окна с помощью <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> для отображения b.adatum.com. В этом случае оба окна считаются частью один и тот же домен верхнего уровня, и исключение не создается. Тем не менее при вызове метода <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> для отображения www,microsoft.com, два окна теперь имеют разные домены верхнего уровня и <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> операцию вызовет исключение, порождаемое.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">Код, пытающийся выполнить эту операцию, не имеет разрешение на работу с этим окном.</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.Forms.HtmlWindow.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает имя окна.</summary>
        <value><see cref="T:System.String" />, представляющий имя.</value>
        <remarks>To be added.</remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534187.aspx">Свойство name</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Navigate">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Отображает или загружает новое содержимое, расположенное по указанному URL-адресу.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public void Navigate (string urlString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Navigate(string urlString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Navigate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Navigate (urlString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Navigate(System::String ^ urlString);" />
      <MemberSignature Language="F#" Value="member this.Navigate : string -&gt; unit" Usage="htmlWindow.Navigate urlString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlString">Отображаемый ресурс, описанный при помощи URI.</param>
        <summary>Отображает или загружает новое содержимое, расположенное по указанному URL-адресу.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `url` параметр указывает на страницу HTML, страницы, отображаемой в окне будут удалены и заменены новой страницы; все ссылки, приложение содержит управляемые объекты DOM старой страницы не будут допустимыми. Если `url` указывает на ресурс, который не может быть отображено Internet Explorer, он откроется диалоговое окно с запросом, следует ли открывать ресурсов вне приложения, сохраните его на диск, или отменить операцию загрузки.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536638.aspx">Перейдите в метод</related>
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public void Navigate (Uri url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Navigate(class System.Uri url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Navigate(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Navigate (url As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Navigate(Uri ^ url);" />
      <MemberSignature Language="F#" Value="member this.Navigate : Uri -&gt; unit" Usage="htmlWindow.Navigate url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="url">Расположение, указанное как <see cref="T:System.Uri" />, документа или объекта для отображения в текущем окне.</param>
        <summary>Отображает новый документ в текущем окне.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Forms.HtmlWindow left, System.Windows.Forms.HtmlWindow right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Forms.HtmlWindow left, class System.Windows.Forms.HtmlWindow right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.op_Equality(System.Windows.Forms.HtmlWindow,System.Windows.Forms.HtmlWindow)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As HtmlWindow, right As HtmlWindow) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Forms::HtmlWindow ^ left, System::Windows::Forms::HtmlWindow ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.Forms.HtmlWindow * System.Windows.Forms.HtmlWindow -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlWindow" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlWindow" />
      </Parameters>
      <Docs>
        <param name="left">Первый объект <see cref="T:System.Windows.Forms.HtmlWindow" />.</param>
        <param name="right">Второй объект <see cref="T:System.Windows.Forms.HtmlWindow" />.</param>
        <summary>Сравнивает два объекта <see cref="T:System.Windows.Forms.HtmlWindow" />, чтобы определить, равны ли они.</summary>
        <returns>Значение <see langword="true" />, если оба параметра имеют значение <see langword="null" /> или имеют общий базовый интерфейс модели COM. В противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Оператор проверок на равенство `IUnknown` указатели базовых объектов COM в оболочку с помощью предоставленного <xref:System.Windows.Forms.HtmlWindow> классы.  
  
 Имеет эквивалентный метод для этого оператора <xref:System.Windows.Forms.HtmlWindow.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Forms.HtmlWindow left, System.Windows.Forms.HtmlWindow right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Forms.HtmlWindow left, class System.Windows.Forms.HtmlWindow right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.op_Inequality(System.Windows.Forms.HtmlWindow,System.Windows.Forms.HtmlWindow)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As HtmlWindow, right As HtmlWindow) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Forms::HtmlWindow ^ left, System::Windows::Forms::HtmlWindow ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.Forms.HtmlWindow * System.Windows.Forms.HtmlWindow -&gt; bool" Usage="System.Windows.Forms.HtmlWindow.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlWindow" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlWindow" />
      </Parameters>
      <Docs>
        <param name="left">Первый объект <see cref="T:System.Windows.Forms.HtmlWindow" />.</param>
        <param name="right">Второй объект <see cref="T:System.Windows.Forms.HtmlWindow" />.</param>
        <summary>Сравнивает два объекта <see langword="HtmlWindow" />, чтобы определить их неравенство.</summary>
        <returns>Значение <see langword="true" />, если один, но не оба объекта имеют значение <see langword="null" /> или если базовые указатели COM не совпадают; в противном случае — <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Open">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Отображает файл в именованном окне.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Open (string urlString, string target, string windowOptions, bool replaceEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow Open(string urlString, string target, string windowOptions, bool replaceEntry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Open (urlString As String, target As String, windowOptions As String, replaceEntry As Boolean) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ Open(System::String ^ urlString, System::String ^ target, System::String ^ windowOptions, bool replaceEntry);" />
      <MemberSignature Language="F#" Value="member this.Open : string * string * string * bool -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.Open (urlString, target, windowOptions, replaceEntry)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
        <Parameter Name="replaceEntry" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="urlString">URL-адрес, который описывает расположение загружаемого файла.</param>
        <param name="target">Имя окна, в котором будет открыт ресурс. Это может быть имя, предоставленное разработчиком, или одним из следующих специальных значений: 
 <c>_blank</c>. Открывает <paramref name="urlString" /> в новом окне. Работает так же, как вызов метода <see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />.  
  
 <c>_media</c>. Открывает <paramref name="urlString" /> в панели мультимедиа.  
  
 <c>_parent</c>. Открывает <paramref name="urlString" /> в окне, создавшем текущее окно.  
  
 <c>_search</c>. Открывает <paramref name="urlString" /> в панели поиска.  
  
 <c>_self</c>. Открывает <paramref name="urlString" /> в текущем окне.  
  
 <c>_top</c>. При вызове для окна, принадлежащего элементу <c>FRAME</c>, открывает <paramref name="urlString" /> в окне, размещающем его <c>FRAMESET</c>. В противном случае функционирует так же, как <c>_self</c>.</param>
        <param name="windowOptions">Строка, разделяемая запятыми, состоящая из нуля или более следующих параметров в форме <c>name=value</c>. Кроме параметров <c>left</c>, <c>top</c>, <c>height</c> и <c>width</c>, которые принимают произвольные целые числа, все остальные параметры принимают в качестве допустимых значений <c>да</c> или <see langword="1" />, а также <c>нет</c> или <see langword="0" />.  
  
 <c>channelmode</c>. Используется вместе с устаревшей технологией каналов Internet Explorer 4.0. Значение по умолчанию — <c>нет</c>.  
  
 <c>directories</c>. Должно ли окно отображать кнопки навигации по каталогам. Значение по умолчанию — <c>да</c>.  
  
 <c>height</c>. Высота клиентской области окна (в пикселях). Минимальное значение равно 100, попытки открыть окно с меньшим размером приведет к открытию окна, соответствующего значениям по умолчанию, установленным в Internet Explorer.  
  
 <c>left</c>. Левая позиция окна (координата X) относительно верхнего левого угла экрана пользователя (в пикселях). Должно быть положительным целым числом.  
  
 <c>location</c>. Следует ли отображать адресную строку, с помощью которой пользователь сможет перейти по новому URL-адресу. Значение по умолчанию — <c>да</c>.  
  
 <c>menubar</c>. Следует ли отображать меню в новом окне. Значение по умолчанию — <c>да</c>.  
  
 <c>resizable</c>. Могут ли размеры окна изменяться пользователем. Значение по умолчанию — <c>да</c>.  
  
 <c>scrollbars</c>. Имеет ли окно горизонтальную и вертикальную полосы прокрутки. Значение по умолчанию — <c>да</c>.  
  
 <c>status</c>. Имеет ли окно строку состояния в нижней части. Значение по умолчанию — <c>да</c>.  
  
 <c>titlebar</c>. Следует ли отображать заголовок текущей страницы. Задание для этого параметра значения <c>Нет</c> не действует в управляемом приложении; строка заголовка будет отображаться всегда.  
  
 <c>toolbar</c>. Следует ли отображать кнопки **Назад**, **Вперед** и **Стоп**. Значение по умолчанию — <c>да</c>.  
  
 <c>top</c>. Верхняя позиция (координата Y) окна относительно верхнего левого угла экрана пользователя (в пикселях). Должно быть положительным целым числом.  
  
 <c>width</c>. Ширина клиентской области окна (в пикселях). Минимальное значение равно 100, попытки открыть окно с меньшим размером приведет к открытию окна, соответствующего значениям по умолчанию, установленным в Internet Explorer.</param>
        <param name="replaceEntry">Заменяет ли <paramref name="urlString" /> URL-адрес текущего окна в истории переходов. Это может повлиять на действие методов класса <see cref="T:System.Windows.Forms.HtmlHistory" />.</param>
        <summary>Отображает файл в именованном окне.</summary>
        <returns>Окно <see cref="T:System.Windows.Forms.HtmlWindow" />, представляющее новое окно или предыдущее созданное окно, именованное с помощью параметра <paramref name="target" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `target` Параметру можно присвоить имя окна, который был создан в результате предыдущего вызова <xref:System.Windows.Forms.HtmlWindow.Open%2A>. Параметр также может указывать на окно, открытое, щелкнув гиперссылку (`A` элемент) или `FORM` элемент, использующий `TARGET` атрибут, чтобы открыть его URL-адрес в новом окне. Следующий код HTML будет открыть новое окно с именем `orderWindow` при щелчке по нему:  
  
 `<A HREF="/startOrder.aspx" TARGET="orderWindow">Click to Start Order</a>`  
  
 Если указать любые параметры для `windowOptions` параметра, любой параметр, который не включается автоматически отключается. Другими словами Если вы укажете только посредством `windowOptions` что требуется, чтобы строка состояния, а затем строке меню, панели инструментов, заголовок, полосы прокрутки и т. д. не отображается, если только вы явным образом включить их посредством `windowOptions`.  
  
 Если файл, указанный в `url` файл HTML, текстовый файл или другой тип файла, который может быть в обозревателе Internet Explorer, он будет отображаться в именованном окне. Если файл не может отображаться в Internet Explorer и именованное целевое окно еще не существует, то откроется окно только на время для Internet Explorer для загрузки ресурса; он будет закрыт немедленно после этого.  
  
 При создании новых окон с помощью <xref:System.Windows.Forms.HtmlWindow.Open%2A> или <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, приводит его к объектной модели документов HTML открыть новый экземпляр Internet Explorer. Если вы не вызываете <xref:System.Windows.Forms.HtmlWindow.Close%2A> на всех windows, вы создали этот экземпляр Internet Explorer будут продолжать выполняться даже после выйдет из приложения.  
  
 Если вы используете <xref:System.Windows.Forms.HtmlWindow.Open%2A> URL-адрес в открытом окне, `windowOptions` будет игнорироваться; окно будет сохранять измерения, внешний вид и расположение на экране, сначала предоставить ему при первом вызове <xref:System.Windows.Forms.HtmlWindow.Open%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Open (Uri url, string target, string windowOptions, bool replaceEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow Open(class System.Uri url, string target, string windowOptions, bool replaceEntry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Open(System.Uri,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Open (url As Uri, target As String, windowOptions As String, replaceEntry As Boolean) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ Open(Uri ^ url, System::String ^ target, System::String ^ windowOptions, bool replaceEntry);" />
      <MemberSignature Language="F#" Value="member this.Open : Uri * string * string * bool -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.Open (url, target, windowOptions, replaceEntry)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
        <Parameter Name="replaceEntry" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="url">URL-адрес, который описывает расположение загружаемого файла.</param>
        <param name="target">Имя окна, в котором будет открыт ресурс. Это может быть имя, предоставленное разработчиком, или одним из следующих специальных значений: 
 <c>_blank</c>. Открывает <paramref name="url" /> в новом окне. Работает так же, как вызов метода <see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />.  
  
 <c>_media</c>. Открывает <paramref name="url" /> в панели мультимедиа.  
  
 <c>_parent</c>. Открывает <paramref name="url" /> в окне, создавшем текущее окно.  
  
 <c>_search</c>. Открывает <paramref name="url" /> в панели поиска.  
  
 <c>_self</c>. Открывает <paramref name="url" /> в текущем окне.  
  
 <c>_top</c>. При вызове для окна, принадлежащего элементу <c>FRAME</c>, открывает <paramref name="url" /> в окне, размещающем его <c>FRAMESET</c>. В противном случае функционирует так же, как <c>_self</c>.</param>
        <param name="windowOptions">Строка, разделяемая запятыми, состоящая из нуля или более следующих параметров в форме <c>name=value</c>. Кроме параметров <c>left</c>, <c>top</c>, <c>height</c> и <c>width</c>, которые принимают произвольные целые числа, все остальные параметры принимают в качестве допустимых значений <c>да</c> или <see langword="1" />, а также <c>нет</c> или <see langword="0" />.  
  
 <c>channelmode</c>. Используется вместе с устаревшей технологией каналов Internet Explorer 4.0. Значение по умолчанию — <c>нет</c>.  
  
 <c>directories</c>. Должно ли окно отображать кнопки навигации по каталогам. Значение по умолчанию — <c>да</c>.  
  
 <c>height</c>. Высота клиентской области окна (в пикселях). Минимальное значение равно 100, попытки открыть окно с меньшим размером приведет к открытию окна, соответствующего значениям по умолчанию, установленным в Internet Explorer.  
  
 <c>left</c>. Левая позиция окна (координата X) относительно верхнего левого угла экрана пользователя (в пикселях). Должно быть положительным целым числом.  
  
 <c>location</c>. Следует ли отображать адресную строку, с помощью которой пользователь сможет перейти по новому URL-адресу. Значение по умолчанию — <c>да</c>.  
  
 <c>menubar</c>. Следует ли отображать меню в новом окне. Значение по умолчанию — <c>да</c>.  
  
 <c>resizable</c>. Могут ли размеры окна изменяться пользователем. Значение по умолчанию — <c>да</c>.  
  
 <c>scrollbars</c>. Имеет ли окно горизонтальную и вертикальную полосы прокрутки. Значение по умолчанию — <c>да</c>.  
  
 <c>status</c>. Имеет ли окно строку состояния в нижней части. Значение по умолчанию — <c>да</c>.  
  
 <c>titlebar</c>. Следует ли отображать заголовок текущей страницы. Задание для этого параметра значения <c>Нет</c> не действует в управляемом приложении; строка заголовка будет отображаться всегда.  
  
 <c>toolbar</c>. Следует ли отображать кнопки **Назад**, **Вперед** и **Стоп**. Значение по умолчанию — <c>да</c>.  
  
 <c>top</c>. Верхняя позиция (координата Y) окна относительно верхнего левого угла экрана пользователя (в пикселях). Должно быть положительным целым числом.  
  
 <c>width</c>. Ширина клиентской области окна (в пикселях). Минимальное значение равно 100, попытки открыть окно с меньшим размером приведет к открытию окна, соответствующего значениям по умолчанию, установленным в Internet Explorer.</param>
        <param name="replaceEntry">Заменяет ли <paramref name="url" /> URL-адрес текущего окна в истории переходов. Это может повлиять на действие методов класса <see cref="T:System.Windows.Forms.HtmlHistory" />.</param>
        <summary>Отображает файл в именованном окне.</summary>
        <returns>Окно <see cref="T:System.Windows.Forms.HtmlWindow" />, представляющее новое окно или предыдущее созданное окно, именованное с помощью параметра <paramref name="target" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `target` Параметру можно присвоить имя окна, который был создан в результате предыдущего вызова <xref:System.Windows.Forms.HtmlWindow.Open%2A>. Параметр также может указывать на окно, открытое, щелкнув гиперссылку (`A` элемент) или `FORM` элемент, использующий `TARGET` атрибут, чтобы открыть его URL-адрес в новом окне. Следующий код HTML будет открыть новое окно с именем `orderWindow` при щелчке по нему:  
  
 `<A HREF="/startOrder.aspx" TARGET="orderWindow">Click to Start Order</a>`  
  
 Если указать любые параметры для `windowOptions` параметра, любой параметр, который не включается автоматически отключается. Другими словами Если вы укажете только посредством `windowOptions` что требуется, чтобы строка состояния, а затем строке меню, панели инструментов, заголовок, полосы прокрутки и т. д. не отображается, если только вы явным образом включить их посредством `windowOptions`.  
  
 Если файл, указанный в `url` файл HTML, текстовый файл или другой тип файла, который может быть в обозревателе Internet Explorer, он будет отображаться в именованном окне. Если файл не может отображаться в Internet Explorer и именованное целевое окно еще не существует, то откроется окно только на время для Internet Explorer для загрузки ресурса; он будет закрыт немедленно после этого.  
  
 При создании новых окон с помощью <xref:System.Windows.Forms.HtmlWindow.Open%2A> или <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, приводит его к объектной модели документов HTML открыть новый экземпляр Internet Explorer. Если вы не вызываете <xref:System.Windows.Forms.HtmlWindow.Close%2A> на всех windows, вы создали этот экземпляр Internet Explorer будут продолжать выполняться даже после выйдет из приложения.  
  
 Если вы используете <xref:System.Windows.Forms.HtmlWindow.Open%2A> URL-адрес в открытом окне, `windowOptions` будет игнорироваться; окно будет сохранять измерения, внешний вид и расположение на экране, сначала предоставить ему при первом вызове <xref:System.Windows.Forms.HtmlWindow.Open%2A> .  
  
   
  
## Examples  
 В следующем примере кода содержит два метода:  
  
-   Первый открывает URL-адреса в окне в виде `displayWindow`, создающий со строкой состояния отображения.  
  
-   Второй открывается другой URL-адрес в одном окне, но указывает, что должно отображаться только строка размещения.  
  
 Обратите внимание на то, что размеры окна и элементы управления, которые отображаются зависит, в которой сначала открыт URL-адрес. В примере кода требуется, что форма содержит <xref:System.Windows.Forms.WebBrowser> управления с именем `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536651.aspx">Метод Open</related>
      </Docs>
    </Member>
    <Member MemberName="Opener">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Opener { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindow Opener" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Opener" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Opener As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindow ^ Opener { System::Windows::Forms::HtmlWindow ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Opener : System.Windows.Forms.HtmlWindow" Usage="System.Windows.Forms.HtmlWindow.Opener" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает ссылку на окно, которое открыло текущее окно.</summary>
        <value>Окно <see cref="T:System.Windows.Forms.HtmlWindow" />, созданное посредством вызова метода <see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" /> или методов <see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />. Если окно не было создано с помощью одного из этих методов, это свойство возвращает значение <see langword="null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenNew">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Отображает файл в новом окне.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenNew">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow OpenNew (string urlString, string windowOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow OpenNew(string urlString, string windowOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenNew (urlString As String, windowOptions As String) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ OpenNew(System::String ^ urlString, System::String ^ windowOptions);" />
      <MemberSignature Language="F#" Value="member this.OpenNew : string * string -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.OpenNew (urlString, windowOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlString">URL-адрес, который описывает расположение загружаемого файла.</param>
        <param name="windowOptions">Строка, разделяемая запятыми, состоящая из нуля или более следующих параметров в форме <c>name=value</c>. Полное описание допустимых параметров см. в сведениях о методе <see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" />.</param>
        <summary>Отображает файл в новом окне.</summary>
        <returns>Объект <see cref="T:System.Windows.Forms.HtmlWindow" />, представляющий новое окно.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если файл, указанный в `url` файл HTML, текстовый файл или другой тип файла, который может быть в обозревателе Internet Explorer, он будет отображаться в новом окне. Если файл не может отображаться в Internet Explorer, а затем появится окно только на время для Internet Explorer для загрузки ресурса; он будет закрыт немедленно после этого.  
  
 При создании новых окон с помощью <xref:System.Windows.Forms.HtmlWindow.Open%2A> или <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, приводит его к объектной модели документов HTML открыть новый экземпляр Internet Explorer. Если вы не вызываете <xref:System.Windows.Forms.HtmlWindow.Close%2A> на всех windows, вы создали этот экземпляр Internet Explorer будут продолжать выполняться даже после выйдет из приложения.  
  
 Если вы хотите загрузить документ в предыдущем открытом окне, см. в разделе <xref:System.Windows.Forms.HtmlWindow.Open%2A> метод.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenNew">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow OpenNew (Uri url, string windowOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow OpenNew(class System.Uri url, string windowOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.OpenNew(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenNew (url As Uri, windowOptions As String) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ OpenNew(Uri ^ url, System::String ^ windowOptions);" />
      <MemberSignature Language="F#" Value="member this.OpenNew : Uri * string -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.OpenNew (url, windowOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="windowOptions" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">URL-адрес, который описывает расположение загружаемого файла.</param>
        <param name="windowOptions">Строка, разделяемая запятыми, состоящая из нуля или более следующих параметров в форме <c>name=value</c>. Полное описание допустимых параметров см. в сведениях о методе <see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" />.</param>
        <summary>Отображает файл в новом окне.</summary>
        <returns>Объект <see cref="T:System.Windows.Forms.HtmlWindow" />, представляющий новое окно.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если файл, указанный в `url` файл HTML, текстовый файл или другой тип файла, который может быть в обозревателе Internet Explorer, он будет отображаться в новом окне. Если файл не может отображаться в Internet Explorer, а затем появится окно только на время для Internet Explorer для загрузки ресурса; он будет закрыт немедленно после этого.  
  
 При создании новых окон с помощью <xref:System.Windows.Forms.HtmlWindow.Open%2A> или <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, приводит его к объектной модели документов HTML открыть новый экземпляр Internet Explorer. Если вы не вызываете <xref:System.Windows.Forms.HtmlWindow.Close%2A> на всех windows, вы создали этот экземпляр Internet Explorer будут продолжать выполняться даже после выйдет из приложения.  
  
 Если вы хотите загрузить документ в предыдущем открытом окне, см. в разделе <xref:System.Windows.Forms.HtmlWindow.Open%2A> метод.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536651.aspx">Метод Open</related>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindow Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindow ^ Parent { System::Windows::Forms::HtmlWindow ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.Forms.HtmlWindow" Usage="System.Windows.Forms.HtmlWindow.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает окно, которое располагается над текущим окном на странице, содержащей рамки.</summary>
        <value>Окно <see cref="T:System.Windows.Forms.HtmlWindow" />, являющееся владельцем текущего окна. Если текущее окно не <c>КАДРА</c>, или не встроено в словаре <c>КАДРА</c>, он возвращает <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В документе, содержащем рамки каждый `FRAME` в `FRAMESET` действует как отдельное дочернее окно на странице. Родительского объекта каждой `FRAME` — `FRAMESET` , содержащее `FRAME`.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534326.aspx">Родительское свойство</related>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public System.Drawing.Point Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point Position" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Position" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Position As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Point Position { System::Drawing::Point get(); };" />
      <MemberSignature Language="F#" Value="member this.Position : System.Drawing.Point" Usage="System.Windows.Forms.HtmlWindow.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает положение клиентской области в окне на экране.</summary>
        <value>Объект <see cref="T:System.Drawing.Point" />, описывающий координаты по оси X и Y (в пикселях) верхнего левого угла экрана.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Control.Location%2A> Свойство <xref:System.Windows.Forms.WebBrowser> элемент управления будет возвращать положение элемента управления относительно верхнего левого угла формы. Напротив <xref:System.Windows.Forms.HtmlWindow.Position%2A> возвращает расположение, в область отображения документа относительно верхнего левого угла панели.  
  
   
  
## Examples  
 В следующем примере кода открывается новое окно непосредственно поверх <xref:System.Windows.Forms.WebBrowser> управления на форме. В примере кода требуется, что форма содержит экземпляр <xref:System.Windows.Forms.WebBrowser> управления с именем `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#5)]
 [!code-vb[System.Windows.Forms.HtmlWindow#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/cc06e61f-43b6-4408-a676-2542dcfcd96e">Координаты Windows Forms</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534389.aspx">screenLeft свойство</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534390.aspx">screenTop свойство</related>
      </Docs>
    </Member>
    <Member MemberName="Prompt">
      <MemberSignature Language="C#" Value="public string Prompt (string message, string defaultInputValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Prompt(string message, string defaultInputValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Prompt(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Prompt (message As String, defaultInputValue As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Prompt(System::String ^ message, System::String ^ defaultInputValue);" />
      <MemberSignature Language="F#" Value="member this.Prompt : string * string -&gt; string" Usage="htmlWindow.Prompt (message, defaultInputValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="defaultInputValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Сообщение, отображаемое для пользователя.</param>
        <param name="defaultInputValue">Значение по умолчанию, отображаемое в текстовом окне.</param>
        <summary>Отображает диалоговое окно, в котором отображается сообщение и текстовое окно, предназначенные для пользователя.</summary>
        <returns>Строка <see cref="T:System.String" />, представляющая текст, введенный пользователем.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.Prompt%2A> предоставляет быстрый и простой способ получить простой текстовый ввод от пользователя.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536673.aspx">Метод запроса</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveFocus">
      <MemberSignature Language="C#" Value="public void RemoveFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveFocus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.RemoveFocus" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveFocus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveFocus();" />
      <MemberSignature Language="F#" Value="member this.RemoveFocus : unit -&gt; unit" Usage="htmlWindow.RemoveFocus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Перемещает фокус из текущего окна.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При вызове `FRAME` окно в `FRAMESET`, <xref:System.Windows.Forms.HtmlWindow.RemoveFocus%2A> приведет к потере фокуса этого окна, но он не будет автоматически устанавливать фокус на другое окно.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536347.aspx">Метод размытия</related>
      </Docs>
    </Member>
    <Member MemberName="Resize">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Resize;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Resize" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Resize" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Resize As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Resize;" />
      <MemberSignature Language="F#" Value="member this.Resize : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Resize : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при использовании пользователем мыши для изменения размером окна.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода показано использование этого элемента. В примере обработчик событий сообщает о вхождение <xref:System.Windows.Forms.HtmlWindow.Resize> событий. Этот отчет позволяет выяснить, когда происходит событие и может оказаться полезным при отладке. Чтобы создать отчет для нескольких событий или событий, которые происходят часто, рассмотрите возможность замены <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> с <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> или добавлении сообщения в многострочном <xref:System.Windows.Forms.TextBox>.  
  
 Чтобы запустить пример кода, вставьте его в проект, который содержит экземпляр типа <xref:System.Windows.Forms.HtmlWindow> с именем `HtmlWindow1`. Убедитесь, что обработчик событий, связанный с <xref:System.Windows.Forms.HtmlWindow.Resize> событий.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#455](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#455)]
 [!code-vb[System.Windows.Forms.EventExamples#455](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#455)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536959.aspx">OnResize событий</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ResizeTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Изменяет размер окна до указанных размеров.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ResizeTo">
      <MemberSignature Language="C#" Value="public void ResizeTo (System.Drawing.Size size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResizeTo(valuetype System.Drawing.Size size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ResizeTo(System.Drawing.Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResizeTo(System::Drawing::Size size);" />
      <MemberSignature Language="F#" Value="member this.ResizeTo : System.Drawing.Size -&gt; unit" Usage="htmlWindow.ResizeTo size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="size">Объект <see cref="T:System.Drawing.Size" />, описывающий необходимую ширину и высоту окна (в пикселях). Должно быть не менее 100 пикселей для обоих размеров.</param>
        <summary>Изменяет размер окна до указанных размеров.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода открывается новое окно и размер до заполнения области экрана.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#15)]
 [!code-vb[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">Окно, размеры которого следует изменить, находится в другом домене, чем родительское окно. Это ограничение является частью сценария безопасности между рамками; дополнительные сведения содержатся в разделе [Межкадровые скрипты и вопросы безопасности](https://msdn.microsoft.com/library/ms533028.aspx).</exception>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536723.aspx">Метод resizeTo</related>
      </Docs>
    </Member>
    <Member MemberName="ResizeTo">
      <MemberSignature Language="C#" Value="public void ResizeTo (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResizeTo(int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ResizeTo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResizeTo (width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResizeTo(int width, int height);" />
      <MemberSignature Language="F#" Value="member this.ResizeTo : int * int -&gt; unit" Usage="htmlWindow.ResizeTo (width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">Описывает необходимую ширину окна (в пикселях). Должна быть не менее 100 пикселей.</param>
        <param name="height">Описывает необходимую высоту окна (в пикселях). Должна быть не менее 100 пикселей.</param>
        <summary>Изменяет размер окна до указанных размеров.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.UnauthorizedAccessException">Окно, размеры которого следует изменить, находится в другом домене, чем родительское окно. Это ограничение является частью сценария безопасности между рамками; дополнительные сведения содержатся в разделе [Межкадровые скрипты и вопросы безопасности](https://msdn.microsoft.com/library/ms533028.aspx).</exception>
      </Docs>
    </Member>
    <Member MemberName="Scroll">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Scroll;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Scroll" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Scroll" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Scroll As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Scroll;" />
      <MemberSignature Language="F#" Value="member this.Scroll : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Scroll : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при прокрутке пользователем содержимого окна для просмотра текста, находящегося вне экрана.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода показано использование этого элемента. В примере обработчик событий сообщает о вхождение <xref:System.Windows.Forms.HtmlWindow.Scroll> событий. Этот отчет позволяет выяснить, когда происходит событие и может оказаться полезным при отладке. Чтобы создать отчет для нескольких событий или событий, которые происходят часто, рассмотрите возможность замены <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> с <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> или добавлении сообщения в многострочном <xref:System.Windows.Forms.TextBox>.  
  
 Чтобы запустить пример кода, вставьте его в проект, который содержит экземпляр типа <xref:System.Windows.Forms.HtmlWindow> с именем `HtmlWindow1`. Убедитесь, что обработчик событий, связанный с <xref:System.Windows.Forms.HtmlWindow.Scroll> событий.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#456](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#456)]
 [!code-vb[System.Windows.Forms.EventExamples#456](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#456)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536966.aspx">onScroll событий</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ScrollTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Прокручивает окно до назначенной позиции.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ScrollTo">
      <MemberSignature Language="C#" Value="public void ScrollTo (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollTo(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ScrollTo(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollTo(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.ScrollTo : System.Drawing.Point -&gt; unit" Usage="htmlWindow.ScrollTo point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">Координаты X и Y, относящиеся к верхнему левому углу текущего окна, к которым следует прокручивать страницу.</param>
        <summary>Перемещает окно в место, указанное координатами.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> приводит для прокрутки таким образом, чтобы указанной координате в документе находится в левом верхнем углу окна документа. Если документ не является длинным или достаточно широким, чтобы это сделать, <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> прокручивается в этом документе, насколько это возможно в указанном направлении.  
  
   
  
## Examples  
 В следующем примере кода документ прокручивается до координат позиции, выбранный пользователем.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#15)]
 [!code-vb[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536731.aspx">Метод scrollTo</related>
      </Docs>
    </Member>
    <Member MemberName="ScrollTo">
      <MemberSignature Language="C#" Value="public void ScrollTo (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollTo(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ScrollTo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollTo (x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollTo(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.ScrollTo : int * int -&gt; unit" Usage="htmlWindow.ScrollTo (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Координата X, относящаяся к верхнему левому углу текущего окна, к которому следует прокручивать страницу.</param>
        <param name="y">Координата Y, относящаяся к верхнему левому углу текущего окна, к которому следует прокручивать страницу.</param>
        <summary>Прокручивает окно до назначенной позиции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> приводит для прокрутки таким образом, чтобы указанной координате в документе находится в левом верхнем углу окна документа. Если документ не является длинным или достаточно широким, чтобы это сделать, <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> прокручивается в этом документе, насколько это возможно в указанном направлении.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Drawing.Size Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size Size" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Size" />
      <MemberSignature Language="VB.NET" Value="Public Property Size As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size Size { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.Size : System.Drawing.Size with get, set" Usage="System.Windows.Forms.HtmlWindow.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает размер текущего окна.</summary>
        <value>Объект <see cref="T:System.Drawing.Size" />, описывающий размер окна в пикселях.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StatusBarText">
      <MemberSignature Language="C#" Value="public string StatusBarText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StatusBarText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.StatusBarText" />
      <MemberSignature Language="VB.NET" Value="Public Property StatusBarText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StatusBarText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StatusBarText : string with get, set" Usage="System.Windows.Forms.HtmlWindow.StatusBarText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает текст, отображаемый в строке состояния окна.</summary>
        <value>Объект <see cref="T:System.String" />, в котором содержатся сведения о текущем состоянии текста.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.WebBrowser> Элемент управления отображает строку состояния. Любое новое окно, откройте с <xref:System.Windows.Forms.HtmlWindow.Open%2A> или <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> методы, тем не менее, будет отображаться в строке состояния по умолчанию.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534648.aspx">состояние свойства</related>
      </Docs>
    </Member>
    <Member MemberName="Unload">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Unload;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Unload" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Unload" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Unload As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Unload;" />
      <MemberSignature Language="F#" Value="member this.Unload : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Unload : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при выгрузке текущей страницы и сразу перед отображением новой страницы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода показано использование этого элемента. В примере обработчик событий сообщает о вхождение <xref:System.Windows.Forms.HtmlWindow.Unload> событий. Этот отчет позволяет выяснить, когда происходит событие и может оказаться полезным при отладке. Чтобы создать отчет для нескольких событий или событий, которые происходят часто, рассмотрите возможность замены <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> с <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> или добавлении сообщения в многострочном <xref:System.Windows.Forms.TextBox>.  
  
 Чтобы запустить пример кода, вставьте его в проект, который содержит экземпляр типа <xref:System.Windows.Forms.HtmlWindow> с именем `HtmlWindow1`. Убедитесь, что обработчик событий, связанный с <xref:System.Windows.Forms.HtmlWindow.Unload> событий.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#457](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#457)]
 [!code-vb[System.Windows.Forms.EventExamples#457](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#457)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536973.aspx">События onunload</related>
      </Docs>
    </Member>
    <Member MemberName="Url">
      <MemberSignature Language="C#" Value="public Uri Url { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Url" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Url" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Url As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Url { Uri ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Url : Uri" Usage="System.Windows.Forms.HtmlWindow.Url" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает URL-адрес, соответствующий текущему элементу, отображаемому в окне.</summary>
        <value>Объект <see cref="T:System.Uri" />, описывающий URL-адрес.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство доступно только для чтения. Чтобы переместиться в новый документ, используйте <xref:System.Windows.Forms.HtmlWindow.Navigate%2A> метод.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowFrameElement">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement WindowFrameElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement WindowFrameElement" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.WindowFrameElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WindowFrameElement As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ WindowFrameElement { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WindowFrameElement : System.Windows.Forms.HtmlElement" Usage="System.Windows.Forms.HtmlWindow.WindowFrameElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает элемент рамки, соответствующий этому окну.</summary>
        <value><see cref="T:System.Windows.Forms.HtmlElement" /> Соответствующий этому окну <c>КАДРА</c> элемент. Если это окно не является рамкой, оно возвращает значения <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При извлечении `FRAME` элемент из <xref:System.Windows.Forms.HtmlWindow.Frames%2A> коллекции, он возвращает <xref:System.Windows.Forms.HtmlWindow>. Вызовите <xref:System.Windows.Forms.HtmlWindow.WindowFrameElement%2A> для данного объекта, если вам нужно получить доступ к атрибутам базового `FRAME` элемент, такой как `SRC` атрибута.  
  
   
  
## Examples  
 Следующий пример кода сравнивает `SRC` атрибут кадров в `FRAMESET` к текущему расположению. Если они отличаются, кадры будут заменены их исходный URL-адрес.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.UnauthorizedAccessException">Не удается получить доступ к <c>КАДРА</c> элементов или <c>КАДРА</c>элемента документа, если <c>КАДРА</c> находится в другой зоне, чем <c>FRAMESET</c> , содержащий его. Полное описание, см. в разделе [о Межкадровые скрипты и вопросы безопасности](https://msdn.microsoft.com/library/ms533028.aspx).</permission>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms533771.aspx">frameElement свойство</related>
      </Docs>
    </Member>
  </Members>
</Type>