<Type Name="IContainerControl" FullName="System.Windows.Forms.IContainerControl">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d6563b7ff5fa530f4e8019a47d01f6cd53344c5d" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69187938" /></Metadata><TypeSignature Language="C#" Value="public interface IContainerControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContainerControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.IContainerControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IContainerControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IContainerControl" />
  <TypeSignature Language="F#" Value="type IContainerControl = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Предоставляет функциональные возможности, позволяющие одному элементу управления быть родительским по отношению к другим элементам управления.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере <xref:System.Windows.Forms.ScrollableControl> класс наследуется от класса и <xref:System.Windows.Forms.IContainerControl> реализует интерфейс. Реализация добавляется в <xref:System.Windows.Forms.IContainerControl.ActiveControl%2A> свойство <xref:System.Windows.Forms.IContainerControl.ActivateControl%2A> и метод.  
  
 [!code-cpp[IContainerControl Implementation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IContainerControl Implementation/CPP/mycontainercontrol.cpp#1)]
 [!code-csharp[IContainerControl Implementation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IContainerControl Implementation/CS/mycontainercontrol.cs#1)]
 [!code-vb[IContainerControl Implementation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IContainerControl Implementation/VB/mycontainercontrol.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Реализуйте этот интерфейс в классах, которые должны быть родительскими для коллекции элементов управления. Члены этого интерфейса позволяют активировать дочерний элемент управления или определять, какой элемент управления активен в данный момент. При реализации в классе <see cref="M:System.Windows.Forms.IContainerControl.ActivateControl(System.Windows.Forms.Control)" /> принимает в <see cref="T:System.Windows.Forms.Control" /> качестве параметра и активирует указанный элемент управления. <see cref="P:System.Windows.Forms.IContainerControl.ActiveControl" /> Свойство активирует или получает активный элемент управления.  
  
В большинстве распространенных сценариев нет необходимости напрямую реализовывать этот интерфейс. Например, при создании проекта библиотеки элементов управления Windows Visual Studio создает исходный класс. Этот класс наследуется от <see cref="T:System.Windows.Forms.UserControl" /> класса и <see cref="T:System.Windows.Forms.UserControl" /> реализуется <see cref="T:System.Windows.Forms.IContainerControl" /> для вас.</para></block>
    <altmember cref="T:System.Windows.Forms.ContainerControl" />
    <altmember cref="T:System.Windows.Forms.Control" />
  </Docs>
  <Members>
    <Member MemberName="ActivateControl">
      <MemberSignature Language="C#" Value="public bool ActivateControl (System.Windows.Forms.Control active);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ActivateControl(class System.Windows.Forms.Control active) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IContainerControl.ActivateControl(System.Windows.Forms.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Function ActivateControl (active As Control) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ActivateControl(System::Windows::Forms::Control ^ active);" />
      <MemberSignature Language="F#" Value="abstract member ActivateControl : System.Windows.Forms.Control -&gt; bool" Usage="iContainerControl.ActivateControl active" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="active" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="active">Активизированный объект <see cref="T:System.Windows.Forms.Control" />.</param>
        <summary>Активизирует заданный элемент управления.</summary>
        <returns>Значение <see langword="true" />, если элемент управления успешно активизирован; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере <xref:System.Windows.Forms.ScrollableControl> класс наследуется от класса и <xref:System.Windows.Forms.IContainerControl> реализует интерфейс. Реализация добавляется в <xref:System.Windows.Forms.IContainerControl.ActiveControl%2A> свойство <xref:System.Windows.Forms.IContainerControl.ActivateControl%2A> и метод.  
  
 [!code-cpp[IContainerControl Implementation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IContainerControl Implementation/CPP/mycontainercontrol.cpp#1)]
 [!code-csharp[IContainerControl Implementation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IContainerControl Implementation/CS/mycontainercontrol.cs#1)]
 [!code-vb[IContainerControl Implementation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IContainerControl Implementation/VB/mycontainercontrol.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>При реализации в классе этот метод активирует указанный <see cref="T:System.Windows.Forms.Control" />объект. Элемент управления должен быть дочерним по отношению к контейнерному элементу управления.</para></block>
        <altmember cref="P:System.Windows.Forms.IContainerControl.ActiveControl" />
        <altmember cref="T:System.Windows.Forms.ContainerControl" />
      </Docs>
    </Member>
    <Member MemberName="ActiveControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control ActiveControl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control ActiveControl" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IContainerControl.ActiveControl" />
      <MemberSignature Language="VB.NET" Value="Public Property ActiveControl As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ ActiveControl { System::Windows::Forms::Control ^ get(); void set(System::Windows::Forms::Control ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ActiveControl : System.Windows.Forms.Control with get, set" Usage="System.Windows.Forms.IContainerControl.ActiveControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает элемент управления, являющийся активным в элементе управления контейнера.</summary>
        <value>Элемент управления <see cref="T:System.Windows.Forms.Control" />, который активен в данный момент в элементе управления контейнера.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере <xref:System.Windows.Forms.ScrollableControl> класс наследуется от класса и <xref:System.Windows.Forms.IContainerControl> реализует интерфейс. Реализация добавляется в <xref:System.Windows.Forms.IContainerControl.ActiveControl%2A> свойство <xref:System.Windows.Forms.IContainerControl.ActivateControl%2A> и метод.  
  
 [!code-cpp[IContainerControl Implementation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IContainerControl Implementation/CPP/mycontainercontrol.cpp#1)]
 [!code-csharp[IContainerControl Implementation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IContainerControl Implementation/CS/mycontainercontrol.cs#1)]
 [!code-vb[IContainerControl Implementation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IContainerControl Implementation/VB/mycontainercontrol.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>При реализации в классе это свойство активирует или получает активный элемент управления контейнера.</para></block>
        <altmember cref="M:System.Windows.Forms.IContainerControl.ActivateControl(System.Windows.Forms.Control)" />
      </Docs>
    </Member>
  </Members>
</Type>
