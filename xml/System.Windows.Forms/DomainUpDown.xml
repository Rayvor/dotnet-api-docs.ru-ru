<Type Name="DomainUpDown" FullName="System.Windows.Forms.DomainUpDown">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6414455a9bb6df4cd9cc6c9c53db9180570c1a51" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65005766" /></Metadata><TypeSignature Language="C#" Value="public class DomainUpDown : System.Windows.Forms.UpDownBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DomainUpDown extends System.Windows.Forms.UpDownBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.DomainUpDown" />
  <TypeSignature Language="VB.NET" Value="Public Class DomainUpDown&#xA;Inherits UpDownBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class DomainUpDown : System::Windows::Forms::UpDownBase" />
  <TypeSignature Language="F#" Value="type DomainUpDown = class&#xA;    inherit UpDownBase" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.UpDownBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.ComponentModel.DefaultBindingProperty("SelectedItem")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("SelectedItemChanged")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Items")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Представляет регулятор Windows (также известный как элемент управления "вверх-вниз"), отображающий строковые значения.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Элемент управления отображает одно строковое значение, выбранное <xref:System.Object> из коллекции, нажимая кнопки вверх или вниз элемента управления. <xref:System.Windows.Forms.DomainUpDown> Пользователь также может ввести текст в элемент управления, если только <xref:System.Windows.Forms.UpDownBase.ReadOnly%2A> свойство не имеет `true` значение (строка, введенная в, должна соответствовать элементу в коллекции, который должен быть принят). При выборе элемента объект преобразуется в строковое значение, чтобы его можно было отобразить в регуляторе.  
  
 Чтобы создать коллекцию объектов, отображаемых в <xref:System.Windows.Forms.DomainUpDown> элементе управления, можно добавлять или удалять элементы по отдельности <xref:System.Collections.ArrayList.Add%2A> с помощью методов и <xref:System.Collections.ArrayList.Remove%2A> . Его можно вызвать в обработчике событий, например в <xref:System.Windows.Forms.Control.Click> событии кнопки. Коллекцию объектов можно сортировать в алфавитном порядке, присвоив <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> `true`свойству значение. Если для <xref:System.Windows.Forms.DomainUpDown.Wrap%2A> `true`свойства задано значение, то при прокрутке последнего или первого объекта в коллекции список будет начинаться с первого или последнего объекта соответственно и выглядеть непрерывным списком.  
  
 Если методы <xref:System.Windows.Forms.DomainUpDown.DownButton%2A> <xref:System.Windows.Forms.DomainUpDown.UpdateEditText%2A> или вызываются либо в коде, либо нажатием кнопок вверх или вниз, вызывается для обновления элемента управления новой строкой. <xref:System.Windows.Forms.DomainUpDown.UpButton%2A> Если <xref:System.Windows.Forms.UpDownBase.UserEdit%2A> параметр имеет `true`значение, строка сопоставляется с одним из значений в коллекции перед обновлением отображаемого текста элемента управления.  
  
 Начиная с .NET Framework 4,6, <xref:System.Windows.Forms.DomainUpDown> размер элемента управления будет изменен на основе параметра dpi системы, если файл App. config содержит следующую запись:  
  
```  
<appSettings>  
  <add key="EnableWindowsFormsHighDpiAutoResizing" value="true" />  
</appSettings>  
  
```  
  
   
  
## Examples  
 В следующем примере кода создается и инициализируется <xref:System.Windows.Forms.DomainUpDown> элемент управления. В этом примере можно задать некоторые свойства и создать коллекцию строк для показа в регуляторе. В коде предполагается, <xref:System.Windows.Forms.TextBox>что <xref:System.Windows.Forms.CheckBox>экземпляры, <xref:System.Windows.Forms.Button> и были созданы в форме. В примере также предполагается, что у вас есть переменная-член на уровне класса, объявленная как 32-разрядное целое число `myCounter`со знаком. Вы можете ввести строку в текстовое поле и добавить ее <xref:System.Windows.Forms.DomainUpDown.Items%2A> в коллекцию при нажатии кнопки. Если щелкнуть этот флажок, можно переключить <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> свойство и увидеть разницу в коллекции элементов регулятора.  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.UpDownBase" />
    <altmember cref="T:System.Windows.Forms.NumericUpDown" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DomainUpDown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DomainUpDown();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Forms.DomainUpDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода создается и инициализируется <xref:System.Windows.Forms.DomainUpDown> элемент управления. В этом примере можно задать некоторые свойства и создать коллекцию строк для показа в регуляторе (также известном как элемент управления "вверх-вниз"). В коде предполагается, <xref:System.Windows.Forms.TextBox>что <xref:System.Windows.Forms.CheckBox>экземпляры, <xref:System.Windows.Forms.Button> и были созданы в форме. В примере также предполагается, что у вас есть переменная-член на уровне класса, объявленная как 32-разрядное целое число `myCounter`со знаком. Вы можете ввести строку в текстовое поле и добавить ее <xref:System.Windows.Forms.DomainUpDown.Items%2A> в коллекцию при нажатии кнопки. Если щелкнуть этот флажок, можно переключить <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> свойство и увидеть разницу в коллекции элементов регулятора.  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.UpDownBase" />
      </Docs>
    </Member>
    <Member MemberName="CreateAccessibilityInstance">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.AccessibleObject CreateAccessibilityInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Forms.AccessibleObject CreateAccessibilityInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.CreateAccessibilityInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateAccessibilityInstance () As AccessibleObject" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Forms::AccessibleObject ^ CreateAccessibilityInstance();" />
      <MemberSignature Language="F#" Value="override this.CreateAccessibilityInstance : unit -&gt; System.Windows.Forms.AccessibleObject" Usage="domainUpDown.CreateAccessibilityInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Создает для элемента управления <see cref="T:System.Windows.Forms.DomainUpDown" /> новый объект с поддержкой специальных возможностей.</summary>
        <returns>Новый объект <see cref="T:System.Windows.Forms.DomainUpDown.DomainUpDownAccessibleObject" /> для элемента управления.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если метод <xref:System.Windows.Forms.DomainUpDown.CreateAccessibilityInstance%2A> не вызывается явно, он будет вызван при обращении к свойству <xref:System.Windows.Forms.Control.AccessibilityObject%2A>.  
  
> [!NOTE]
>  Чтобы получить или задать свойство <xref:System.Windows.Forms.Control.AccessibilityObject%2A>, необходимо добавить ссылку на сборку Accessibility, устанавливаемую вместе с платформой .NET Framework.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>При переопределении <see cref="M:System.Windows.Forms.DomainUpDown.CreateAccessibilityInstance" /> в производном классе не следует вызывать <see cref="M:System.Windows.Forms.DomainUpDown.CreateAccessibilityInstance" /> метод базового класса.</para></block>
      </Docs>
    </Member>
    <Member MemberName="DownButton">
      <MemberSignature Language="C#" Value="public override void DownButton ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void DownButton() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.DownButton" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub DownButton ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void DownButton();" />
      <MemberSignature Language="F#" Value="override this.DownButton : unit -&gt; unit" Usage="domainUpDown.DownButton " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Отображает следующий элемент в коллекции объектов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При перемещении по коллекции элементов в <xref:System.Windows.Forms.DomainUpDown> элементе управления с помощью кнопки вниз в конечном итоге будет достигнут последний элемент в коллекции. Если продолжить и <xref:System.Windows.Forms.DomainUpDown.Wrap%2A> `true`задано значение, список будет начинаться с первого элемента в коллекции и будет отображаться непрерывно. Такое поведение также происходит при перемещении по коллекции с помощью кнопки вверх.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DomainUpDown.UpButton" />
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DomainUpDown/DomainUpDownItemCollection Items" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DomainUpDown.Items" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Items As DomainUpDown.DomainUpDownItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DomainUpDown::DomainUpDownItemCollection ^ Items { System::Windows::Forms::DomainUpDown::DomainUpDownItemCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Items : System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection" Usage="System.Windows.Forms.DomainUpDown.Items" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.StringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.StringCollectionEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.StringCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DomainUpDown+DomainUpDownItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Коллекция объектов, назначенных регулятору (также известному как элемент управления "вверх-вниз").</summary>
        <value>Коллекция <see cref="T:System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection" />, которая содержит коллекцию <see cref="T:System.Object" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Коллекцию можно построить и сделать доступной <xref:System.Windows.Forms.DomainUpDown> для элемента управления двумя способами. <xref:System.Object> Элементы в коллекцию можно добавлять с помощью <xref:System.Collections.ArrayList.Add%2A> методов или. <xref:System.Collections.ArrayList.Insert%2A>  
  
   
  
## Examples  
 В следующем примере кода создается и инициализируется <xref:System.Windows.Forms.DomainUpDown> элемент управления. В этом примере можно задать некоторые свойства и создать коллекцию строк для показа в регуляторе. В коде предполагается, <xref:System.Windows.Forms.TextBox>что <xref:System.Windows.Forms.CheckBox>экземпляры, <xref:System.Windows.Forms.Button> и были созданы в форме. В примере также предполагается, что у вас есть переменная-член на уровне класса, объявленная как 32-разрядное целое число `myCounter`со знаком. Вы можете ввести строку в текстовое поле и добавить ее <xref:System.Windows.Forms.DomainUpDown.Items%2A> в коллекцию при нажатии кнопки. Если щелкнуть этот флажок, можно переключить <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> свойство и увидеть разницу в коллекции элементов регулятора.  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DomainUpDown.Items" />
        <altmember cref="T:System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection" />
      </Docs>
    </Member>
    <Member MemberName="OnChanged">
      <MemberSignature Language="C#" Value="protected override void OnChanged (object source, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnChanged(object source, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.OnChanged(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnChanged (source As Object, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnChanged(System::Object ^ source, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnChanged : obj * EventArgs -&gt; unit" Usage="domainUpDown.OnChanged (source, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="source">Источник события.</param>
        <param name="e">Объект класса <see cref="T:System.EventArgs" />, содержащий данные события.</param>
        <summary>Вызывает событие <see cref="E:System.Windows.Forms.DomainUpDown.SelectedItemChanged" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedItemChanged">
      <MemberSignature Language="C#" Value="protected void OnSelectedItemChanged (object source, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnSelectedItemChanged(object source, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.OnSelectedItemChanged(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnSelectedItemChanged (source As Object, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnSelectedItemChanged(System::Object ^ source, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnSelectedItemChanged : obj * EventArgs -&gt; unit" Usage="domainUpDown.OnSelectedItemChanged (source, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="source">Источник события.</param>
        <param name="e">Объект класса <see cref="T:System.EventArgs" />, содержащий данные события.</param>
        <summary>Вызывает событие <see cref="E:System.Windows.Forms.DomainUpDown.SelectedItemChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При возникновении события через делегат вызывается обработчик события. Дополнительные сведения см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
 Метод <xref:System.Windows.Forms.DomainUpDown.OnSelectedItemChanged%2A> также позволяет производным классам обрабатывать событие, не присоединяя делегат. Это предпочтительная методика обработки событий в производном классе.  
  
   
  
## Examples  
 В следующем примере кода создается и инициализируется <xref:System.Windows.Forms.DomainUpDown> элемент управления. В этом примере можно задать некоторые свойства и создать коллекцию строк для показа в регуляторе (также известном как элемент управления "вверх-вниз"). В коде предполагается, <xref:System.Windows.Forms.TextBox>что <xref:System.Windows.Forms.CheckBox>экземпляры, <xref:System.Windows.Forms.Button> и были созданы в форме. В примере также предполагается, что у вас есть переменная-член на уровне класса, объявленная как 32-разрядное целое число `myCounter`со знаком. Вы можете ввести строку в текстовое поле и добавить ее <xref:System.Windows.Forms.DomainUpDown.Items%2A> в коллекцию при нажатии кнопки. Если щелкнуть этот флажок, можно переключить <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> свойство и увидеть разницу в коллекции элементов регулятора.  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>При переопределении <see cref="M:System.Windows.Forms.DomainUpDown.OnSelectedItemChanged(System.Object,System.EventArgs)" /> в производном классе обязательно вызовите <see cref="M:System.Windows.Forms.DomainUpDown.OnSelectedItemChanged(System.Object,System.EventArgs)" /> метод базового класса, чтобы зарегистрированные делегаты получили событие.</para></block>
        <altmember cref="P:System.Windows.Forms.DomainUpDown.SelectedItem" />
        <altmember cref="E:System.Windows.Forms.DomainUpDown.SelectedItemChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTextBoxKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnTextBoxKeyDown (object source, System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnTextBoxKeyDown(object source, class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.OnTextBoxKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnTextBoxKeyDown (source As Object, e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnTextBoxKeyDown(System::Object ^ source, System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnTextBoxKeyDown : obj * System.Windows.Forms.KeyEventArgs -&gt; unit" Usage="domainUpDown.OnTextBoxKeyDown (source, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" Index="1" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="source">Объект, содержащий данные о событии.</param>
        <param name="e">To be added.</param>
        <summary>Вызывает событие <see cref="E:System.Windows.Forms.Control.KeyDown" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTextBoxKeyPress">
      <MemberSignature Language="C#" Value="protected override void OnTextBoxKeyPress (object source, System.Windows.Forms.KeyPressEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnTextBoxKeyPress(object source, class System.Windows.Forms.KeyPressEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.OnTextBoxKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnTextBoxKeyPress (source As Object, e As KeyPressEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnTextBoxKeyPress(System::Object ^ source, System::Windows::Forms::KeyPressEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnTextBoxKeyPress : obj * System.Windows.Forms.KeyPressEventArgs -&gt; unit" Usage="domainUpDown.OnTextBoxKeyPress (source, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="e" Type="System.Windows.Forms.KeyPressEventArgs" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="source">Источник события.</param>
        <param name="e">Объект <see cref="T:System.Windows.Forms.KeyPressEventArgs" />, содержащий данные события.</param>
        <summary>Вызывает событие <see cref="E:System.Windows.Forms.Control.KeyPress" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если свойство имеет `true`значение, <xref:System.Windows.Forms.DomainUpDown> элемент управления выбирает элемент в списке, который начинается с символа. <xref:System.Windows.Forms.UpDownBase.ReadOnly%2A> Если несколько элементов в коллекции начинаются с одного и того же символа, <xref:System.Windows.Forms.DomainUpDown> элемент управления выбирает следующий элемент, который начинается с введенного символа, начиная с текущей выбранной позиции.  
  
 При возникновении события через делегат вызывается обработчик события. Дополнительные сведения см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
 Метод <xref:System.Windows.Forms.DomainUpDown.OnTextBoxKeyPress%2A> также позволяет производным классам обрабатывать событие, не присоединяя делегат. Это предпочтительная методика обработки событий в производном классе.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>При переопределении <see cref="M:System.Windows.Forms.DomainUpDown.OnTextBoxKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)" /> в производном классе обязательно вызовите <see cref="M:System.Windows.Forms.DomainUpDown.OnTextBoxKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)" /> метод базового класса, чтобы зарегистрированные делегаты получили событие.</para></block>
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DomainUpDown.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Padding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Padding Padding { System::Windows::Forms::Padding get(); void set(System::Windows::Forms::Padding value); };" />
      <MemberSignature Language="F#" Value="member this.Padding : System.Windows.Forms.Padding with get, set" Usage="System.Windows.Forms.DomainUpDown.Padding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает расстояние между содержимым элемента управления <see cref="T:System.Windows.Forms.DomainUpDown" /> и его краями.</summary>
        <value>Значение <see cref="F:System.Windows.Forms.Padding.Empty" /> во всех случаях.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Даже если задать <xref:System.Windows.Forms.DomainUpDown.Padding%2A> свойство, оно будет иметь <xref:System.Windows.Forms.Padding.Empty>значение.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PaddingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PaddingChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DomainUpDown.PaddingChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PaddingChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PaddingChanged;" />
      <MemberSignature Language="F#" Value="member this.PaddingChanged : EventHandler " Usage="member this.PaddingChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при изменении значения свойства <see cref="P:System.Windows.Forms.DomainUpDown.Padding" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения об обработке событий см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedIndex">
      <MemberSignature Language="C#" Value="public int SelectedIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectedIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DomainUpDown.SelectedIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectedIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SelectedIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SelectedIndex : int with get, set" Usage="System.Windows.Forms.DomainUpDown.SelectedIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение индекса для выделенного элемента.</summary>
        <value>Отсчитываемое от нуля значение индекса для выделенного элемента. Значение по умолчанию — -1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DomainUpDown.SelectedIndex%2A> Свойство содержит значение индекса элемента в коллекции, выбранного в данный момент в регуляторе (также известном как элемент управления "вверх-вниз"). Если <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> свойство было изменено с `false` на `true`, элементы коллекции могут быть переназначены новым значениям индекса. Так как коллекция пересортируется в алфавитном порядке, элементам будет назначено новое значение индекса.  
  
> [!NOTE]
>  Если пользователь вошел в регулятор или не выбрал элемент, <xref:System.Windows.Forms.DomainUpDown.SelectedIndex%2A> значением будет значение по умолчанию-1.  
  
   
  
## Examples  
 В следующем примере кода создается и инициализируется <xref:System.Windows.Forms.DomainUpDown> элемент управления. В этом примере можно задать некоторые свойства и создать коллекцию строк для показа в регуляторе. В коде предполагается, <xref:System.Windows.Forms.TextBox>что <xref:System.Windows.Forms.CheckBox>экземпляры, <xref:System.Windows.Forms.Button> и были созданы в форме. В примере также предполагается, что у вас есть переменная-член на уровне класса, объявленная как 32-разрядное целое число `myCounter`со знаком. Вы можете ввести строку в текстовое поле и добавить ее <xref:System.Windows.Forms.DomainUpDown.Items%2A> в коллекцию при нажатии кнопки. Если щелкнуть этот флажок, можно переключить <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> свойство и увидеть разницу в коллекции элементов регулятора.  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Назначенное значение меньше используемого по умолчанию (-1).  
  
- или - 
Назначенное значение больше числа <see cref="P:System.Windows.Forms.DomainUpDown.Items" />.</exception>
        <altmember cref="P:System.Windows.Forms.DomainUpDown.SelectedItem" />
      </Docs>
    </Member>
    <Member MemberName="SelectedItem">
      <MemberSignature Language="C#" Value="public object SelectedItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SelectedItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DomainUpDown.SelectedItem" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectedItem As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SelectedItem { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectedItem : obj with get, set" Usage="System.Windows.Forms.DomainUpDown.SelectedItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает элемент, выделенный по значению индекса элемента, выделенного в коллекции.</summary>
        <value>Выделенный элемент, основанный на значении <see cref="P:System.Windows.Forms.DomainUpDown.SelectedIndex" />. Значение по умолчанию — <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если это свойство задано, значение проверяется как один из элементов в коллекции, а <xref:System.Windows.Forms.DomainUpDown.SelectedIndex%2A> для свойства задается соответствующее значение индекса.  
  
   
  
## Examples  
 В следующем примере кода создается и инициализируется <xref:System.Windows.Forms.DomainUpDown> элемент управления. В этом примере можно задать некоторые свойства и создать коллекцию строк для показа в регуляторе (также известном как элемент управления "вверх-вниз"). В коде предполагается, <xref:System.Windows.Forms.TextBox>что <xref:System.Windows.Forms.CheckBox>экземпляры, <xref:System.Windows.Forms.Button> и были созданы в форме. В примере также предполагается, что у вас есть переменная-член на уровне класса, объявленная как 32-разрядное целое число `myCounter`со знаком. Вы можете ввести строку в текстовое поле и добавить ее <xref:System.Windows.Forms.DomainUpDown.Items%2A> в коллекцию при нажатии кнопки. Если щелкнуть этот флажок, можно переключить <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> свойство и увидеть разницу в коллекции элементов регулятора.  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DomainUpDown.SelectedIndex" />
      </Docs>
    </Member>
    <Member MemberName="SelectedItemChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SelectedItemChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SelectedItemChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DomainUpDown.SelectedItemChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SelectedItemChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SelectedItemChanged;" />
      <MemberSignature Language="F#" Value="member this.SelectedItemChanged : EventHandler " Usage="member this.SelectedItemChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит, если значение свойства <see cref="P:System.Windows.Forms.DomainUpDown.SelectedItem" /> было изменено.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы событие произошло, его <xref:System.Windows.Forms.DomainUpDown.SelectedItem%2A> можно изменить в коде, введя новое значение пользователем или нажав кнопки вверх или вниз элемента управления. <xref:System.Windows.Forms.DomainUpDown.SelectedItemChanged>  
  
   
  
## Examples  
 В следующем примере кода показано использование этого элемента. В этом примере обработчик событий сообщает о возникновении <xref:System.Windows.Forms.DomainUpDown.SelectedItemChanged> события. Этот отчет поможет вам узнать, когда происходит событие и может помочь при отладке. Чтобы сообщить о нескольких событиях или о событиях, которые происходят часто, рассмотрите <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> возможность замены <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> или добавления сообщения в многострочный <xref:System.Windows.Forms.TextBox>.  
  
 Чтобы выполнить пример кода, вставьте его в проект, содержащий экземпляр типа <xref:System.Windows.Forms.DomainUpDown> с именем. `DomainUpDown1` Затем убедитесь, что обработчик событий связан с <xref:System.Windows.Forms.DomainUpDown.SelectedItemChanged> событием.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#381](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#381)]
 [!code-vb[System.Windows.Forms.EventExamples#381](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#381)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DomainUpDown.SelectedItem" />
        <altmember cref="M:System.Windows.Forms.DomainUpDown.UpButton" />
        <altmember cref="M:System.Windows.Forms.DomainUpDown.DownButton" />
      </Docs>
    </Member>
    <Member MemberName="Sorted">
      <MemberSignature Language="C#" Value="public bool Sorted { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Sorted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DomainUpDown.Sorted" />
      <MemberSignature Language="VB.NET" Value="Public Property Sorted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Sorted { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Sorted : bool with get, set" Usage="System.Windows.Forms.DomainUpDown.Sorted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее, отсортирована ли коллекция элементов.</summary>
        <value>Значение <see langword="true" />, если коллекция элементов отсортирована; в противном случае — <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> для`true`задано значение, коллекция сортируется в алфавитном порядке.  
  
   
  
## Examples  
 В следующем примере кода создается и инициализируется <xref:System.Windows.Forms.DomainUpDown> элемент управления. В этом примере можно задать некоторые свойства и создать коллекцию строк для показа в регуляторе (также известном как элемент управления "вверх-вниз"). В коде предполагается, <xref:System.Windows.Forms.TextBox>что <xref:System.Windows.Forms.CheckBox>экземпляры, <xref:System.Windows.Forms.Button> и были созданы в форме. В примере также предполагается, что у вас есть переменная-член на уровне класса, объявленная как 32-разрядное целое число `myCounter`со знаком. Вы можете ввести строку в текстовое поле и добавить ее <xref:System.Windows.Forms.DomainUpDown.Items%2A> в коллекцию при нажатии кнопки. Если щелкнуть этот флажок, можно переключить <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> свойство и увидеть разницу в коллекции элементов регулятора.  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="domainUpDown.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает строку, представляющую элемент управления <see cref="T:System.Windows.Forms.DomainUpDown" />.</summary>
        <returns>Строка, представляющая текущий объект <see cref="T:System.Windows.Forms.DomainUpDown" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Возвращаемая строка включает тип и значения для <xref:System.Collections.ArrayList.Count%2A> свойств и. <xref:System.Windows.Forms.DomainUpDown.SelectedIndex%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpButton">
      <MemberSignature Language="C#" Value="public override void UpButton ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void UpButton() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.UpButton" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub UpButton ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void UpButton();" />
      <MemberSignature Language="F#" Value="override this.UpButton : unit -&gt; unit" Usage="domainUpDown.UpButton " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Отображает предыдущий элемент в коллекции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При перемещении по коллекции элементов в <xref:System.Windows.Forms.DomainUpDown> элементе управления с помощью кнопки вверх в конечном итоге будет достигнут первый элемент в коллекции. Если продолжить и <xref:System.Windows.Forms.DomainUpDown.Wrap%2A> `true`задано значение, то список будет начинаться с последнего элемента в коллекции и будет отображаться непрерывно. Такое поведение также происходит при перемещении по коллекции с помощью кнопки вниз.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DomainUpDown.DownButton" />
      </Docs>
    </Member>
    <Member MemberName="UpdateEditText">
      <MemberSignature Language="C#" Value="protected override void UpdateEditText ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void UpdateEditText() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.UpdateEditText" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub UpdateEditText ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void UpdateEditText();" />
      <MemberSignature Language="F#" Value="override this.UpdateEditText : unit -&gt; unit" Usage="domainUpDown.UpdateEditText " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Обновляет текст, отображаемый в регуляторе (также известном как элемент управления "вверх-вниз"), для отображения выбранного элемента.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.UpDownBase.Text" />
      </Docs>
    </Member>
    <Member MemberName="Wrap">
      <MemberSignature Language="C#" Value="public bool Wrap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Wrap" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DomainUpDown.Wrap" />
      <MemberSignature Language="VB.NET" Value="Public Property Wrap As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Wrap { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Wrap : bool with get, set" Usage="System.Windows.Forms.DomainUpDown.Wrap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, определяющее возможность перехода в коллекции элементов к первому или последнему элементу в случае, когда пользователь продолжает просмотр после окончания списка.</summary>
        <value>Значение <see langword="true" />, если список начинается заново при достижении пользователем начала или конца коллекции; в противном случае — <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если свойство имеет `true`значение, то если достигнут последний элемент в коллекции и продолжится, список будет начинаться с первого элемента и будет выглядеть непрерывно. <xref:System.Windows.Forms.DomainUpDown.Wrap%2A> Это поведение работает и в противоположном порядке.  
  
   
  
## Examples  
 В следующем примере кода создается и инициализируется <xref:System.Windows.Forms.DomainUpDown> элемент управления. В этом примере можно задать некоторые свойства и создать коллекцию строк для показа в регуляторе (также известном как элемент управления "вверх-вниз"). В коде предполагается, <xref:System.Windows.Forms.TextBox>что <xref:System.Windows.Forms.CheckBox>экземпляры, <xref:System.Windows.Forms.Button> и были созданы в форме. В примере также предполагается, что у вас есть переменная-член на уровне класса, объявленная как 32-разрядное целое число `myCounter`со знаком. Вы можете ввести строку в текстовое поле и добавить ее <xref:System.Windows.Forms.DomainUpDown.Items%2A> в коллекцию при нажатии кнопки. Если щелкнуть этот флажок, можно переключить <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> свойство и увидеть разницу в коллекции элементов регулятора.  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DomainUpDown.DownButton" />
        <altmember cref="M:System.Windows.Forms.DomainUpDown.UpButton" />
      </Docs>
    </Member>
  </Members>
</Type>