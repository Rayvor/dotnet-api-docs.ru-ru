<Type Name="SendKeys" FullName="System.Windows.Forms.SendKeys">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e17014706f0bc08fefb8c6ceeca5f194e4d1f7de" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69180364" /></Metadata><TypeSignature Language="C#" Value="public class SendKeys" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi SendKeys extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.SendKeys" />
  <TypeSignature Language="VB.NET" Value="Public Class SendKeys" />
  <TypeSignature Language="C++ CLI" Value="public ref class SendKeys" />
  <TypeSignature Language="F#" Value="type SendKeys = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет методы для отправки приложению сообщений о нажатиях клавиш.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используется <xref:System.Windows.Forms.SendKeys> для отправки нажатий клавиш и сочетаний клавиш в активное приложение. Для этого класса невозможно создание экземпляров. Чтобы отправить нажатие клавиши в класс и сразу же продолжить работу с потоком программы, используйте <xref:System.Windows.Forms.SendKeys.Send%2A>. Для ожидания любых процессов, запущенных нажатием клавиши, <xref:System.Windows.Forms.SendKeys.SendWait%2A>используйте.  
  
 Каждый ключ представлен одним или несколькими символами. Чтобы указать одиночный символ клавиатуры, используйте сам символ. Например, чтобы представить букву A, передайте в метод строку "A". Чтобы представить более одного символа, добавьте каждый дополнительный символ в предыдущий. Чтобы представить буквы A, B и C, укажите для параметра значение "ABC".  
  
 Знак плюс (+), символ (^), знак процента (%), тильда (~) и круглые скобки () имеют специальное значение <xref:System.Windows.Forms.SendKeys>. Чтобы указать один из этих символов, заключите его в фигурные скобки ({}). Например, чтобы указать знак "плюс", используйте "{+}". Чтобы указать символы фигурных скобок, используйте{}"{"{}и "}". Квадратные скобки ([]) не имеют <xref:System.Windows.Forms.SendKeys>особого смысла, но их необходимо заключить в фигурные скобки. В других приложениях скобки имеют специальное значение, которое может быть значительным при выполнении динамического обмена данными (DDE).  
  
> [!CAUTION]
>  Если приложение предназначено для международного использования с различными клавиатурами, применение метода <xref:System.Windows.Forms.SendKeys.Send%2A> может иметь непредсказуемые результаты и его следует избегать.  
  
 Чтобы указать символы, которые не отображаются при нажатии клавиши, например ENTER или TAB, а также ключи, представляющие действия, а не символы, используйте коды, приведенные в следующей таблице.  
  
|Ключ|Код|  
|---------|----------|  
|BACKSPACE|{Backspace}, {BS} или {БКСП}|  
|РАЗБИЕНИ|РАЗБИЕНИ|  
|CAPS LOCK|{КАПСЛОКК}|  
|DEL или DELETE|{DELETE} или {DEL}|  
|СТРЕЛКА ВНИЗ|КРЫВАЮЩЕЙ|  
|END|КОНЦЕ|  
|ВВОД|{ENTER} или ~|  
|ESC|ESC|  
|СПРАВКА|ПОЗВОЛЯЮТ|  
|ГЛАВНАЯ|ДОМОМ|  
|INS или INSERT|{INSERT} или {INS}|  
|СТРЕЛКА ВЛЕВО|СЛЕВА|  
|NUM LOCK|NUMLOCK|  
|PAGE DOWN|PAGE DOWN|  
|PAGE UP|PAGE UP|  
|ПЕЧАТЬ ЭКРАНА|{ПРТСК} (зарезервировано для будущего использования)|  
|СТРЕЛКА ВПРАВО|СПРАВА|  
|ПРОКРУТИТЬ БЛОКИРОВКУ|{СКРОЛЛЛОКК}|  
|TAB|ВКЛАДКЕ|  
|СТРЕЛКА ВВЕРХ|КРЫВАЮЩЕМСЯ|  
|F1|{F1}|  
|F2|{F2}|  
|F3|{F3}|  
|F4|{F4}|  
|F5|{F5}|  
|F6|{F6}|  
|F7|{F7}|  
|F8|{F8}|  
|F9|{F9}|  
|F10|{F10}|  
|F11|{F11}|  
|F12|{F12}|  
|F13|{F13}|  
|F14|{F14}|  
|F15|{F15}|  
|F16|{F16}|  
|Добавление клавиатуры|ВКЛЮЧИТЬ|  
|Вычитание с клавиатуры|ВЫЧЕСТЬ|  
|Умножение клавиатуры|ПЕРЕМНОЖАЕМЫХ|  
|Разделительная клавиша|ДЕЛЕНИЕ|  
  
 Чтобы указать ключи в сочетании с любым сочетанием клавиш SHIFT, CTRL и ALT, перед кодом клавиши укажите один или несколько из следующих кодов.  
  
|Ключ|Код|  
|---------|----------|  
|МЕСТИ|+|  
|КОМБИНАЦИ|^|  
|МЕЩАЮЩИЙ|%|  
  
 Чтобы указать, что сочетание клавиш SHIFT, CTRL и ALT должно удерживаться при нажатии нескольких других клавиш, заключите код этих клавиш в круглые скобки. Например, чтобы указать, чтобы при нажатии клавиш «E» и «C» использовались клавиши SHIFT, используйте «+ (EC)». Чтобы указать, что при нажатии клавиши «E», а затем C без СДВИГа, следует использовать «+ EC».  
  
 Чтобы указать повторяющиеся ключи, используйте форму {номер ключа}. Необходимо поставить пробел между ключом и числом. Например, {LEFT 42} означает нажатие клавиши со стрелкой влево 42 раз; {h 10} означает нажатие клавиши H 10 раз.  
  
> [!NOTE]
>  Поскольку нет управляемого метода для активации другого приложения, можно либо использовать этот класс в текущем приложении, либо использовать собственные методы Windows, такие как `FindWindow` и `SetForegroundWindow`, чтобы принудительно сосредоточиться на других приложениях.  
  
> [!NOTE]
>  Класс <xref:System.Windows.Forms.SendKeys> был обновлен в .NET Framework 3.0, что позволило использовать его в приложениях, работающих в Windows Vista. Усиленная система безопасности Windows Vista (известная как контроль учетных записей или UAC) не позволяет предыдущей реализации работать должным образом.  
>   
>  Класс <xref:System.Windows.Forms.SendKeys> подвержен проблемам со временем, которые пришлось решать некоторым разработчикам. Обновленная реализация по-прежнему подвержена этим проблемам, но она работает немного быстрее, поэтому существующие решения может потребоваться переработать. Класс <xref:System.Windows.Forms.SendKeys> сначала пытается использовать предыдущую реализацию, и если это не удается, использует новую реализацию. В результате класс <xref:System.Windows.Forms.SendKeys> может работать по-разному в разных операционных системах. Кроме того, при использовании новой реализации класса <xref:System.Windows.Forms.SendKeys> метод <xref:System.Windows.Forms.SendKeys.SendWait%2A> не будет дожидаться обработки сообщений, если они отправляются другому процессу.  
>   
>  Если необходимо обеспечить согласованное поведение приложения независимо от операционной системы, можно заставить класс <xref:System.Windows.Forms.SendKeys> использовать новую реализацию, добавив указанный ниже параметр приложения в файл app.config.  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  Для принудительного использования классом <xref:System.Windows.Forms.SendKeys> предыдущей реализации задайте значение `"JournalHook"` .  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать метод <xref:System.Windows.Forms.SendKeys.Send%2A>. Чтобы выполнить пример, вставьте следующий код в форму с именем Form1, содержащую кнопку с именем Button1. Убедитесь, что события щелчка связаны с методами обработки событий в этом примере. <xref:System.Windows.Forms.Control.TabIndex%2A> Свойству элемента управления "Кнопка" должно быть присвоено значение 0. При выполнении примера дважды щелкните форму, чтобы активировать событие нажатия кнопки.  
  
 [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public static void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Flush();" />
      <MemberSignature Language="F#" Value="static member Flush : unit -&gt; unit" Usage="System.Windows.Forms.SendKeys.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Обрабатывает все сообщения Windows, находящиеся в настоящий момент в очереди сообщений.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Windows.Forms.SendKeys.Flush%2A> , чтобы подождать, пока приложение обработает нажатия клавиш и другие сообщения операционной системы, находящиеся в очереди сообщений. Это эквивалентно вызову <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType> до тех пор, пока больше нет ключей для обработки.  
  
> [!NOTE]
>  Поскольку нет управляемого метода для активации другого приложения, можно либо использовать этот класс в текущем приложении, либо использовать собственные методы Windows, такие как `FindWindow` и `SetForegroundWindow`, чтобы принудительно сосредоточиться на других приложениях.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public static void Send (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Send(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Send (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Send(System::String ^ keys);" />
      <MemberSignature Language="F#" Value="static member Send : string -&gt; unit" Usage="System.Windows.Forms.SendKeys.Send keys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">Строка, содержащая отправляемые данные о нажатиях клавиш.</param>
        <summary>Посылает сообщения о нажатии клавиш активному приложению.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждый ключ представлен одним или несколькими символами. Чтобы указать одиночный символ клавиатуры, используйте сам символ. Например, чтобы представить букву A, передайте в метод строку "A". Чтобы представить более одного символа, добавьте каждый дополнительный символ в предыдущий. Чтобы представить буквы A, B и C, укажите для параметра значение "ABC".  
  
 Знак плюс (+), символ (^), знак процента (%), тильда (~) и круглые скобки () имеют специальное значение <xref:System.Windows.Forms.SendKeys>. Чтобы указать один из этих символов, заключите его в фигурные скобки ({}). Например, чтобы указать знак "плюс", используйте "{+}". Чтобы указать символы фигурных скобок, используйте{}"{"{}и "}". Квадратные скобки ([]) не имеют <xref:System.Windows.Forms.SendKeys>особого смысла, но их необходимо заключить в фигурные скобки. В других приложениях скобки имеют специальное значение, которое может быть значительным при выполнении динамического обмена данными (DDE).  
  
> [!CAUTION]
>  Если приложение предназначено для международного использования с различными клавиатурами, применение метода <xref:System.Windows.Forms.SendKeys.Send%2A> может иметь непредсказуемые результаты и его следует избегать.  
  
 Чтобы указать символы, которые не отображаются при нажатии клавиши, например ENTER или TAB, а также ключи, представляющие действия, а не символы, используйте коды, приведенные в следующей таблице.  
  
|Ключ|Код|  
|---------|----------|  
|BACKSPACE|{Backspace}, {BS} или {БКСП}|  
|РАЗБИЕНИ|РАЗБИЕНИ|  
|CAPS LOCK|{КАПСЛОКК}|  
|DEL или DELETE|{DELETE} или {DEL}|  
|СТРЕЛКА ВНИЗ|КРЫВАЮЩЕЙ|  
|END|КОНЦЕ|  
|ВВОД|{ENTER} или ~|  
|ESC|ESC|  
|СПРАВКА|ПОЗВОЛЯЮТ|  
|ГЛАВНАЯ|ДОМОМ|  
|INS или INSERT|{INSERT} или {INS}|  
|СТРЕЛКА ВЛЕВО|СЛЕВА|  
|NUM LOCK|NUMLOCK|  
|PAGE DOWN|PAGE DOWN|  
|PAGE UP|PAGE UP|  
|ПЕЧАТЬ ЭКРАНА|{ПРТСК} (зарезервировано для будущего использования)|  
|СТРЕЛКА ВПРАВО|СПРАВА|  
|ПРОКРУТИТЬ БЛОКИРОВКУ|{СКРОЛЛЛОКК}|  
|TAB|ВКЛАДКЕ|  
|СТРЕЛКА ВВЕРХ|КРЫВАЮЩЕМСЯ|  
|F1|{F1}|  
|F2|{F2}|  
|F3|{F3}|  
|F4|{F4}|  
|F5|{F5}|  
|F6|{F6}|  
|F7|{F7}|  
|F8|{F8}|  
|F9|{F9}|  
|F10|{F10}|  
|F11|{F11}|  
|F12|{F12}|  
|F13|{F13}|  
|F14|{F14}|  
|F15|{F15}|  
|F16|{F16}|  
|Добавление клавиатуры|ВКЛЮЧИТЬ|  
|Вычитание с клавиатуры|ВЫЧЕСТЬ|  
|Умножение клавиатуры|ПЕРЕМНОЖАЕМЫХ|  
|Разделительная клавиша|ДЕЛЕНИЕ|  
  
 Чтобы указать ключи в сочетании с любым сочетанием клавиш SHIFT, CTRL и ALT, перед кодом клавиши укажите один или несколько из следующих кодов.  
  
|Ключ|Код|  
|---------|----------|  
|МЕСТИ|+|  
|КОМБИНАЦИ|^|  
|МЕЩАЮЩИЙ|%|  
  
 Чтобы указать, что сочетание клавиш SHIFT, CTRL и ALT должно удерживаться при нажатии нескольких других клавиш, заключите код этих клавиш в круглые скобки. Например, чтобы указать, чтобы при нажатии клавиш «E» и «C» использовались клавиши SHIFT, используйте «+ (EC)». Чтобы указать, что при нажатии клавиши «E», а затем C без СДВИГа, следует использовать «+ EC».  
  
 Чтобы указать повторяющиеся ключи, используйте форму {номер ключа}. Необходимо поставить пробел между ключом и числом. Например, {LEFT 42} означает нажатие клавиши со стрелкой влево 42 раз; {h 10} означает нажатие клавиши H 10 раз.  
  
> [!NOTE]
>  Поскольку нет управляемого метода для активации другого приложения, можно либо использовать этот класс в текущем приложении, либо использовать собственные методы Windows, такие как `FindWindow` и `SetForegroundWindow`, чтобы принудительно сосредоточиться на других приложениях.  
  
> [!NOTE]
>  Класс <xref:System.Windows.Forms.SendKeys> был обновлен в .NET Framework 3.0, что позволило использовать его в приложениях, работающих в Windows Vista. Усиленная система безопасности Windows Vista (известная как контроль учетных записей или UAC) не позволяет предыдущей реализации работать должным образом.  
>   
>  Класс <xref:System.Windows.Forms.SendKeys> подвержен проблемам со временем, которые пришлось решать некоторым разработчикам. Обновленная реализация по-прежнему подвержена этим проблемам, но она работает немного быстрее, поэтому существующие решения может потребоваться переработать. Класс <xref:System.Windows.Forms.SendKeys> сначала пытается использовать предыдущую реализацию, и если это не удается, использует новую реализацию. В результате класс <xref:System.Windows.Forms.SendKeys> может работать по-разному в разных операционных системах. Кроме того, при использовании новой реализации класса <xref:System.Windows.Forms.SendKeys> метод <xref:System.Windows.Forms.SendKeys.SendWait%2A> не будет дожидаться обработки сообщений, если они отправляются другому процессу.  
>   
>  Если необходимо обеспечить согласованное поведение приложения независимо от операционной системы, можно заставить класс <xref:System.Windows.Forms.SendKeys> использовать новую реализацию, добавив указанный ниже параметр приложения в файл app.config.  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  Для принудительного использования классом <xref:System.Windows.Forms.SendKeys> предыдущей реализации задайте значение `"JournalHook"` .  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать <xref:System.Windows.Forms.SendKeys.Send%2A> метод. Чтобы выполнить пример, вставьте следующий код в форму с именем Form1, содержащую кнопку с именем Button1. Убедитесь, что события щелчка связаны с методами обработки событий в этом примере. <xref:System.Windows.Forms.Control.TabIndex%2A> Свойству элемента управления "Кнопка" должно быть присвоено значение 0. При выполнении примера дважды щелкните форму, чтобы активировать событие нажатия кнопки.  
  
 [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Отсутствует активное приложение для отправки сообщений о нажатии клавиш.</exception>
        <exception cref="T:System.ArgumentException">Объект <paramref name="keys" /> не представляет допустимые сообщения о нажатии клавиш.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для неуправляемого кода, чтобы вызвать этот метод. Связанное перечисление:<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendWait">
      <MemberSignature Language="C#" Value="public static void SendWait (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SendWait(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.SendWait(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SendWait (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SendWait(System::String ^ keys);" />
      <MemberSignature Language="F#" Value="static member SendWait : string -&gt; unit" Usage="System.Windows.Forms.SendKeys.SendWait keys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">Строка, содержащая отправляемые данные о нажатиях клавиш.</param>
        <summary>Отправляет данные об указанных клавишах активному приложению и ожидает окончания обработки сообщений.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Windows.Forms.SendKeys.SendWait%2A> для отправки нажатий клавиш или сочетаний клавиш в активное приложение и ожидания обработки сообщений о нажатии клавиш. Этот метод можно использовать для отправки в приложение нажатий клавиш и ожидания завершения всех процессов, запущенных нажатиями клавиш. Это может быть важно, если другое приложение должно завершиться до того, как приложение сможет продолжить работу.  
  
> [!NOTE]
>  Поскольку нет управляемого метода для активации другого приложения, можно либо использовать этот класс в текущем приложении, либо использовать собственные методы Windows, такие как `FindWindow` и `SetForegroundWindow`, чтобы принудительно сосредоточиться на других приложениях.  
  
> [!NOTE]
>  Класс <xref:System.Windows.Forms.SendKeys> был обновлен в .NET Framework 3.0, что позволило использовать его в приложениях, работающих в Windows Vista. Усиленная система безопасности Windows Vista (известная как контроль учетных записей или UAC) не позволяет предыдущей реализации работать должным образом.  
>   
>  Класс <xref:System.Windows.Forms.SendKeys> подвержен проблемам со временем, которые пришлось решать некоторым разработчикам. Обновленная реализация по-прежнему подвержена этим проблемам, но она работает немного быстрее, поэтому существующие решения может потребоваться переработать. Класс <xref:System.Windows.Forms.SendKeys> сначала пытается использовать предыдущую реализацию, и если это не удается, использует новую реализацию. В результате класс <xref:System.Windows.Forms.SendKeys> может работать по-разному в разных операционных системах. Кроме того, при использовании новой реализации класса <xref:System.Windows.Forms.SendKeys> метод <xref:System.Windows.Forms.SendKeys.SendWait%2A> не будет дожидаться обработки сообщений, если они отправляются другому процессу.  
>   
>  Если необходимо обеспечить согласованное поведение приложения независимо от операционной системы, можно заставить класс <xref:System.Windows.Forms.SendKeys> использовать новую реализацию, добавив указанный ниже параметр приложения в файл app.config.  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  Для принудительного использования классом <xref:System.Windows.Forms.SendKeys> предыдущей реализации задайте значение `"JournalHook"` .  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для неуправляемого кода, чтобы вызвать этот метод. Связанное перечисление:<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>
