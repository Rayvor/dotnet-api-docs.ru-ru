<Type Name="SendMailErrorEventArgs" FullName="System.Web.UI.WebControls.SendMailErrorEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="00715f412bbf912e6bff44346d1360d65931b831" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70627916" /></Metadata><TypeSignature Language="C#" Value="public class SendMailErrorEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SendMailErrorEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.SendMailErrorEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class SendMailErrorEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class SendMailErrorEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type SendMailErrorEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет данные для события <see langword="SendMailError" /> в таких элементах управления, как <see cref="T:System.Web.UI.WebControls.ChangePassword" />, <see cref="T:System.Web.UI.WebControls.CreateUserWizard" /> и <see cref="T:System.Web.UI.WebControls.PasswordRecovery" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект содержит сообщение об ошибке, вызываемое поставщиком почты SMTP, если сообщение электронной почты не может быть отправлено <xref:System.Web.UI.WebControls.ChangePassword> элементом управления или <xref:System.Web.UI.WebControls.CreateUserWizard> элементом управления. <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> В этом случае <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> объект отправляется <xref:System.Web.UI.WebControls.SendMailErrorEventHandler>в.  
  
 <xref:System.Web.UI.WebControls.SendMailErrorEventHandler> Создайте делегат для обработчика события. Обработка события позволяет веб-приложению продолжать работу, даже если возникло исключение. Это полезно, когда не очень важно отправлять сообщение электронной почты. Например, если исключение возникает, когда пользователь работает с многошаговым мастером, может быть полезно зарегистрировать ошибку, отобразить информативное сообщение для пользователя и разрешить пользователю завершить работу мастера.  
  
 Изучите <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception%2A> свойство, чтобы определить фактическую причину исключения. Наиболее распространенной причиной исключения является ошибка конфигурации в [ &lt;элементе SMTP&gt; (параметры сети)](~/docs/framework/configure-apps/file-schema/network/smtp-element-network-settings.md) файла конфигурации компьютера. Хотя подобная ошибка обычно обнаруживается во время разработки и отладки приложения, почтовые серверы могут неожиданно завершить работу в рабочей среде, и необходимо определить, нужно ли в такой ситуации завершить работу всего приложения. В противном случае обработка события позволяет приложению продолжать работу.  
  
 Необходимо задать <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> для `true` свойства значение, чтобы сообщить о том, что исключение обработано; в противном случае исключение вызывается повторно и будет включать исходный стек вызовов и сообщение об ошибке.  
  
 Если вы не создаете обработчик событий для <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> события или создаете обработчик событий, но <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> оставляете для свойства значение, веб-приложение `false`прекращает работать в случае возникновения ошибки при отправке сообщения электронной почты, а ASP.NET будет Отображение сообщения об ошибке.  
  
 Метод также позволяет производным классам управлять событием, а не делать это в  <xref:System.Web.UI.WebControls.SendMailErrorEventHandler> .  <xref:System.Web.UI.WebControls.ChangePassword.OnSendMailError%2A> Это предпочтительный способ обработки события в классе, производном от <xref:System.Web.UI.WebControls.ChangePassword> или. <xref:System.Web.UI.WebControls.CreateUserWizard>  
  
 Дополнительные сведения об обработке событий см. [в разделе Обработка событий сервера на страницах веб-форм ASP.NET](https://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9).  
  
   
  
## Examples  
 В следующем примере кода демонстрируется страница ASP.NET, которая использует <xref:System.Web.UI.WebControls.ChangePassword> веб-элемент управления, и включает обработчик событий <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> для события с именем сендмаилеррор. В примере кода предполагается, что веб-сайт ASP.NET настроен для использования проверки подлинности членства и форм ASP.NET, а также что пользователь создал имя и пароль, которые вам известны. Дополнительные сведения см. [в разделе Практические руководства. Реализация простой проверки подлинности с помощью форм](https://msdn.microsoft.com/library/9522bc8d-1a41-480a-aa11-c389a4ac2d2e).  
  
 Если изменение пароля прошло удачно, код в `SendingMail` обработчике событий пытается отправить пользователю сообщение электронной почты для подтверждения изменения. Чтобы этот пример кода работал, протокол SMTP уже должен быть настроен на сервере. Сведения о настройке SMTP-сервера см. [в разделе NIB: как установить и настроить виртуальные SMTP-серверы в IIS 6,0](https://msdn.microsoft.com/library/ed204b58-24af-47d0-9687-60e5df5f17f8). В этом примере нет необходимости настраивать SMTP-сервер. Этот пример создается для проверки сбоя при отправке сообщения электронной почты.  
  
 Если почтовый сервер настроен неправильно или возникла какая-либо другая ошибка и сообщение электронной почты не удается отправить, `SendMailError` вызывается функция. Пользователю выводится сообщение. Кроме того, событие заносится в журнал событий приложений Windows с предположением о том, что источник события с именем Мисамплессите уже существует. Чтобы создать указанный источник события, см. Приведенный ниже пример кода. Дополнительные сведения о создании источника событий см. в разделе [Обработка событий сервера на страницах веб-форм ASP.NET](https://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9). Свойство объекта устанавливается в значение, чтобы указать, что ошибка была обработана. `true` <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> <xref:System.Web.UI.WebControls.SendMailErrorEventArgs>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/CS/changepassword_cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/VB/changepassword_vb.aspx#1)]  
  
 Используйте следующий пример кода, если необходимо программно добавить источник событий с именем Мисамплессите в журнал приложения. Чтобы первый пример кода работал правильно, этот источник событий должен существовать. Для следующего примера кода требуются права администратора.  
  
 [!code-csharp[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/CS/createeventsource.cs#1)]
 [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/VB/createeventsource.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>При переопределении <see cref="M:System.Web.UI.WebControls.ChangePassword.OnSendMailError(System.Web.UI.WebControls.SendMailErrorEventArgs)" /> в производном классе обязательно <see cref="M:System.Web.UI.WebControls.ChangePassword.OnSendMailError(System.Web.UI.WebControls.SendMailErrorEventArgs)" /> вызовите метод базового класса, чтобы разрешить зарегистрированным делегатам получать событие.</para></block>
    <altmember cref="E:System.Web.UI.WebControls.CreateUserWizard.SendMailError" />
    <altmember cref="E:System.Web.UI.WebControls.ChangePassword.SendMailError" />
    <altmember cref="E:System.Web.UI.WebControls.PasswordRecovery.SendMailError" />
    <altmember cref="T:System.Net.Mail.MailMessage" />
    <related type="Article" href="https://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9">Обработка событий сервера в веб-страницы ASP.NET</related>
    <related type="Article" href="https://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f">Обработка и вызов событий</related>
    <related type="Article" href="https://msdn.microsoft.com/library/448f7802-0aa8-4304-abf7-82e138877dc8">Вкладка "приложение" средства администрирования веб-сайта</related>
    <related type="Article" href="https://msdn.microsoft.com/library/d85075bc-9c1a-4453-8a0c-539b10853c9c">Защита элементов управления входом</related>
    <related type="Article" href="https://msdn.microsoft.com/library/3eeeee9e-b09f-4c7f-8ce5-d9ca1f9322ad">Основные методы обеспечения безопасности для веб-приложений</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SendMailErrorEventArgs (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SendMailErrorEventArgs.#ctor(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SendMailErrorEventArgs(Exception ^ e);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.SendMailErrorEventArgs : Exception -&gt; System.Web.UI.WebControls.SendMailErrorEventArgs" Usage="new System.Web.UI.WebControls.SendMailErrorEventArgs e" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e">Объект <see cref="T:System.Exception" />, содержащий исключение.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.UI.WebControls.SendMailErrorEventArgs" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Web.UI.WebControls.CreateUserWizard.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.ChangePassword.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.PasswordRecovery.SendMailError" />
        <altmember cref="T:System.Net.Mail.MailMessage" />
        <related type="Article" href="https://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9">Обработка событий сервера в веб-страницы ASP.NET</related>
        <related type="Article" href="https://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f">Обработка и вызов событий</related>
        <related type="Article" href="https://msdn.microsoft.com/library/448f7802-0aa8-4304-abf7-82e138877dc8">Вкладка "приложение" средства администрирования веб-сайта</related>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); void set(Exception ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Exception : Exception with get, set" Usage="System.Web.UI.WebControls.SendMailErrorEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает исключение, выбрасываемое почтовым SMTP-сервером при невозможности отправить сообщение электронной почты.</summary>
        <value>Объект <see cref="T:System.Exception" />, который содержит исключение.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство содержит исключение, выдаваемое поставщиком почты SMTP, если сообщение электронной почты не может быть отправлено <xref:System.Web.UI.WebControls.ChangePassword> элементом управления или  <xref:System.Web.UI.WebControls.CreateUserWizard> .  <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception%2A> Наиболее распространенной причиной этого исключения является ошибка конфигурации в [ &lt;элементе SMTP&gt; (параметры сети)](~/docs/framework/configure-apps/file-schema/network/smtp-element-network-settings.md) файла конфигурации компьютера, который создает следующее сообщение об исключении:`The transport failed to connect to the server.`  
  
 Исключения не создаются, если в сообщении электронной почты возникла ошибка при внедрении файла с помощью <xref:System.Web.UI.WebControls.MailDefinition.EmbeddedObjects%2A>. Вместо этого внедренный файл отображается как неработающий при просмотре сообщения электронной почты.  
  
 Чтобы сообщить о том <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> , что исключение обработано, <xref:System.Web.UI.WebControls.SendMailErrorEventArgs>необходимо задать `true` объект, переданный в `e` качестве параметра метода, в противном случае исключение создается повторно и включает исходный стек вызовов и сообщение об ошибке.  
  
   
  
## Examples  
 В следующем примере кода показана страница ASP.NET, использующая <xref:System.Web.UI.WebControls.ChangePassword> веб-элемент управления и содержащая обработчик событий <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> для события с `SendMailError`именем. В примере кода предполагается, что веб-сайт ASP.NET настроен для использования проверки подлинности членства и форм ASP.NET, а также что пользователь создал имя и пароль, которые вам известны. Дополнительные сведения см. [в разделе Практические руководства. Реализация простой проверки подлинности с помощью форм](https://msdn.microsoft.com/library/9522bc8d-1a41-480a-aa11-c389a4ac2d2e).  
  
 Если изменение пароля прошло удачно, код в `SendingMail` обработчике событий пытается отправить пользователю сообщение электронной почты для подтверждения изменения. Чтобы этот пример кода работал, протокол SMTP уже должен быть настроен на сервере. Сведения о настройке SMTP-сервера см. [в разделе NIB: как установить и настроить виртуальные SMTP-серверы в IIS 6,0](https://msdn.microsoft.com/library/ed204b58-24af-47d0-9687-60e5df5f17f8). В этом примере нет необходимости настраивать SMTP-сервер. Этот пример создается для проверки сбоя при отправке сообщения электронной почты.  
  
 Если почтовый сервер настроен неправильно или возникла какая-либо другая ошибка и сообщение электронной почты не удается отправить, `SendMailError` вызывается функция. Пользователю выводится сообщение. Кроме того, событие заносится в журнал событий приложений Windows с предположением о том, что источник события с именем Мисамплессите уже существует. Чтобы создать указанный источник события, см. Приведенный ниже пример кода. Дополнительные сведения о создании источника событий см. в разделе [Обработка событий сервера на страницах веб-форм ASP.NET](https://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9). Свойство объекта устанавливается в значение, чтобы указать, что ошибка была обработана. `true` <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> <xref:System.Web.UI.WebControls.SendMailErrorEventArgs>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/CS/changepassword_cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/VB/changepassword_vb.aspx#1)]  
  
 Используйте следующий пример кода, если необходимо программно добавить источник событий с именем Мисамплессите в журнал приложения. Чтобы первый пример кода работал правильно, этот источник событий должен существовать. Для следующего примера кода требуются права администратора.  
  
 [!code-csharp[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/CS/createeventsource.cs#1)]
 [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/VB/createeventsource.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.CreateUserWizard.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.ChangePassword.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.PasswordRecovery.SendMailError" />
        <altmember cref="T:System.Net.Mail.MailMessage" />
        <related type="Article" href="https://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9">Обработка событий сервера в веб-страницы ASP.NET</related>
        <related type="Article" href="https://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f">Обработка и вызов событий</related>
        <related type="Article" href="https://msdn.microsoft.com/library/448f7802-0aa8-4304-abf7-82e138877dc8">Вкладка "приложение" средства администрирования веб-сайта</related>
      </Docs>
    </Member>
    <Member MemberName="Handled">
      <MemberSignature Language="C#" Value="public bool Handled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Handled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled" />
      <MemberSignature Language="VB.NET" Value="Public Property Handled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Handled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Handled : bool with get, set" Usage="System.Web.UI.WebControls.SendMailErrorEventArgs.Handled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Указывает, было ли обработано исключение SMTP, содержащееся в свойстве <see cref="P:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception" />.</summary>
        <value>Если значение равно <see langword="true" />, исключение утилизируется и обрабатывается делегатом <see cref="T:System.Web.UI.WebControls.SendMailErrorEventHandler" />. Если значение равно <see langword="false" />, исключение выбрасывается, включая исходный стек вызова и сообщение об ошибке.  
  
Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство указывает, было ли обработано значение  <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception%2A> . <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> Исключение вызывается поставщиком почты SMTP, если сообщение электронной почты не может быть отправлено <xref:System.Web.UI.WebControls.ChangePassword> элементом управления <xref:System.Web.UI.WebControls.CreateUserWizard>или. Наиболее распространенной причиной исключения является ошибка конфигурации в [ &lt;элементе SMTP&gt; (параметры сети)](~/docs/framework/configure-apps/file-schema/network/smtp-element-network-settings.md) файла конфигурации компьютера. Хотя подобная ошибка обычно обнаруживается во время разработки и отладки приложения, почтовые серверы могут неожиданно завершить работу в рабочей среде, и необходимо определить, нужно ли в такой ситуации завершить работу всего приложения. В противном случае обработка события позволяет приложению продолжать работу.  
  
 Если вы не создаете обработчик событий для <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> события или создаете обработчик событий, но <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> оставляете для свойства значение, веб-приложение `false`прекращает работать в случае возникновения ошибки при отправке сообщения электронной почты, а ASP.NET будет Отображение сообщения об ошибке. Обработка события позволяет веб-приложению продолжать работу, даже если возникло исключение. Это полезно, когда не очень важно отправлять сообщение электронной почты. Например, если исключение возникает, когда пользователь работает с многошаговым мастером, может быть полезно зарегистрировать ошибку, отобразить информативное сообщение для пользователя и разрешить пользователю завершить работу мастера.  
  
   
  
## Examples  
 В следующем примере кода показана страница ASP.NET, использующая <xref:System.Web.UI.WebControls.ChangePassword> веб-элемент управления и содержащая обработчик событий <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> для события с `SendMailError`именем. В примере кода предполагается, что веб-сайт ASP.NET настроен для использования проверки подлинности членства и форм ASP.NET, а также что пользователь создал имя и пароль, которые вам известны. Дополнительные сведения см. [в разделе Практические руководства. Реализация простой проверки подлинности с помощью форм](https://msdn.microsoft.com/library/9522bc8d-1a41-480a-aa11-c389a4ac2d2e).  
  
 Если изменение пароля прошло удачно, код в `SendingMail` обработчике событий пытается отправить пользователю сообщение электронной почты для подтверждения изменения. Чтобы этот пример кода работал, протокол SMTP уже должен быть настроен на сервере. Сведения о настройке SMTP-сервера см. [в разделе NIB: как установить и настроить виртуальные SMTP-серверы в IIS 6,0](https://msdn.microsoft.com/library/ed204b58-24af-47d0-9687-60e5df5f17f8). В этом примере нет необходимости настраивать SMTP-сервер. Этот пример создается для проверки сбоя при отправке сообщения электронной почты.  
  
 Если почтовый сервер настроен неправильно или возникла какая-либо другая ошибка и сообщение электронной почты не удается отправить, `SendMailError` вызывается функция. Пользователю выводится сообщение. Кроме того, событие заносится в журнал событий приложений Windows с предположением о том, что источник события с именем Мисамплессите уже существует. Чтобы создать указанный источник события, см. Приведенный ниже пример кода. Дополнительные сведения о создании источника событий см. в разделе [Обработка событий сервера на страницах веб-форм ASP.NET](https://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9). Свойство объекта устанавливается в значение, чтобы указать, что ошибка была обработана. `true` <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> <xref:System.Web.UI.WebControls.SendMailErrorEventArgs>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/CS/changepassword_cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/VB/changepassword_vb.aspx#1)]  
  
 Используйте следующий пример кода, если необходимо программно добавить источник событий с именем Мисамплессите в журнал приложения. Чтобы первый пример кода работал правильно, этот источник событий должен существовать. Для следующего примера кода требуются права администратора.  
  
 [!code-csharp[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/CS/createeventsource.cs#1)]
 [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/VB/createeventsource.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.CreateUserWizard.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.ChangePassword.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.PasswordRecovery.SendMailError" />
        <altmember cref="T:System.Net.Mail.MailMessage" />
        <related type="Article" href="https://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9">Обработка событий сервера в веб-страницы ASP.NET</related>
        <related type="Article" href="https://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f">Обработка и вызов событий</related>
        <related type="Article" href="https://msdn.microsoft.com/library/448f7802-0aa8-4304-abf7-82e138877dc8">Вкладка "приложение" средства администрирования веб-сайта</related>
      </Docs>
    </Member>
  </Members>
</Type>
