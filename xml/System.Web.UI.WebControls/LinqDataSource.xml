<Type Name="LinqDataSource" FullName="System.Web.UI.WebControls.LinqDataSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0f1db1003ae6d2ffd89e8894dcdf948b98cfd7c2" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73396591" /></Metadata><TypeSignature Language="C#" Value="public class LinqDataSource : System.Web.UI.WebControls.ContextDataSource, System.Web.DynamicData.IDynamicDataSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSource extends System.Web.UI.WebControls.ContextDataSource implements class System.Web.DynamicData.IDynamicDataSource, class System.Web.UI.IDataSource" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSource&#xA;Inherits ContextDataSource&#xA;Implements IDynamicDataSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSource : System::Web::UI::WebControls::ContextDataSource, System::Web::DynamicData::IDynamicDataSource" />
  <TypeSignature Language="F#" Value="type LinqDataSource = class&#xA;    inherit ContextDataSource&#xA;    interface IDynamicDataSource&#xA;    interface IDataSource" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.ContextDataSource</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-3.5">System.Web.UI.DataSourceControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IDynamicDataSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IDataSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Selecting")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("ContextTypeName")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.bmp")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", System.ComponentModel.ToolboxItemFilterType.Require)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.ico")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Позволяет использовать LINQ на страницах ASP.NET при помощи текста разметки, для извлечения и изменения данных из объекта данных.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В этом разделе.  
  
-   [Введение](#introduction)  
  
-   [Порядок операций](#order_of_operations)  
  
-   [Упорядочение данных](#ordering_data)  
  
-   [Группировка данных](#grouping_data)  
  
-   [Изменения данных](#data_modifications)  
  
-   [Вычисление значений во время выполнения](#evaluating_value_at_run_time)  
  
-   [Работа с хранимыми процедурами](#working_with_stored_procedures)  
  
-   [Декларативный синтаксис](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Вступление  
 LINQ — это синтаксис запросов, определяющий набор операторов запросов, которые позволяют декларативно выражать операции обхода, фильтрации и проекции в любом случае. Язык программирования на основе NET. Объект данных может быть коллекцией данных в памяти или объектом, представляющим данные из базы данных. Вы можете извлекать или изменять данные без необходимости написания команд SQL для каждой операции.  
  
 Элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> позволяет использовать LINQ на веб-странице ASP.NET, задавая свойства в тексте разметки. Элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> использует LINQ to SQL для автоматического создания команд данных. Дополнительные сведения о LINQ to SQL см. в разделе [LINQ to SQL](https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655).  
  
 При извлечении данных из коллекции данных в памяти свойству <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> присваивается класс, содержащий коллекцию данных. Свойству <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> задается свойство или поле, которые возвращают сбор данных. Например, у вас может быть класс с именем `Person`, содержащий свойство с именем `FavoriteCities`, которое возвращает массив строковых значений. В этом случае задайте для свойства <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> значение `Person` и задайте для свойства <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> значение `FavoriteCities`.  
  
 При запросе к базе данных необходимо сначала создать классы сущностей, представляющие базу данных и ее таблицы. Для создания этих классов можно использовать [!INCLUDE[vs_ordesigner_long](~/includes/vs-ordesigner-long-md.md)] или программу SqlMetal. exe. Затем свойству <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> присваивается класс, представляющий базу данных, и свойству <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> присваивается значение свойства, представляющего таблицу базы данных.  
  
<a name="order_of_operations"></a>   
## <a name="order-of-operations"></a>Порядок операций  
 Элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> применяет операции с данными в следующем порядке:  
  
1.  Где (укажите возвращаемые записи данных).  
  
2.  Упорядочение по (Sort).  
  
3.  Group By (статистические записи данных, которые совместно используют значения).  
  
4.  Упорядочение групп по (Сортировка сгруппированных данных).  
  
5.  SELECT (укажите, какие поля или свойства следует возвращать).  
  
6.  Автоматическая сортировка (сортировка записей данных по свойству, выбранному пользователем).  
  
7.  Автоматическая страница (получение подмножества записей данных, выбранных пользователем).  
  
 Можно добавить условия в свойство <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>, чтобы отфильтровать записи данных, возвращаемые запросом. Если свойство <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> не задано, элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> извлекает каждую запись из объекта данных.  
  
<a name="ordering_data"></a>   
## <a name="ordering-data"></a>Упорядочение данных  
 Используйте свойство <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>, чтобы указать имена свойств из возвращаемых данных для сортировки.  
  
> [!NOTE]
>  При использовании элемента управления <xref:System.Web.UI.WebControls.LinqDataSource> с [!INCLUDE[ss2k](~/includes/ss2k-md.md)] или [!INCLUDE[ssEW](~/includes/ssew-md.md)] а свойством <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> — `true`, необходимо указать значение в свойстве <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>. По умолчанию свойство <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> `true`. Если присвоить значение свойству <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>, необходимо также включить все столбцы идентификаторов в список свойств, возвращаемых в запросе.  
  
<a name="grouping_data"></a>   
## <a name="grouping-data"></a>Группировка данных  
 Используйте свойство <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>, чтобы указать, какие свойства используются для консолидации записей данных с одинаковыми значениями. При группировании данных можно включать `Key` и `It`, которые динамически создаются свойствами в свойстве <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>. Свойство `Key` ссылается на значения в свойстве или свойствах, которые использовались для группирования данных. Например, при группировании по свойству с именем `Category`свойство `Key` будет содержать все уникальные значения в свойстве `Category`. Свойство `It` ссылается на коллекцию отдельных записей в группировании данных. Можно выполнить итерацию по свойству `It`, чтобы получить отдельные записи, Объединенные в операцию группирования. Например, при группировании по свойству с именем `Category`свойство `It` содержит все отдельные записи, имеющие общее значение в свойстве `Category`.  
  
 Свойство <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> используется для указания свойств, используемых для сортировки сгруппированных данных. При группировании данных свойство <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> указывает, как сортируются отдельные записи в сгруппированных данных.  
  
 По умолчанию элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> извлекает значения для всех свойств из объекта данных. Свойство <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> используется для указания возвращаемых свойств, если требуется работать с подмножеством доступных свойств. Операция SELECT применяется после операций WHERE, ORDER BY и Group By. Поэтому при создании имени с псевдонимом в предложении SELECT псевдоним недоступен в других предложениях.  
  
<a name="data_modifications"></a>   
## <a name="data-modifications"></a>Модификации данных  
 Можно указать, включены ли изменения данных с помощью свойств <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>и <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A>. Пользовательский интерфейс для изменения данных из элемента управления <xref:System.Web.UI.WebControls.LinqDataSource> обычно предоставляется через элемент управления с привязкой к данным, например элемент управления <xref:System.Web.UI.WebControls.DetailsView>. Помимо установки <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>или <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> для `true`, для включения автоматического изменения данных необходимы следующие условия.  
  
-   Свойству <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> не может быть присвоено значение.  
  
-   Свойству <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> не может быть присвоено значение.  
  
-   Класс, назначенный свойству <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>, должен быть производным от <xref:System.Data.Linq.DataContext>.  
  
-   Свойство, присваиваемое свойству <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>, должно быть производным от <xref:System.Data.Linq.Table%601>.  
  
 Можно ограничить свойства, отображаемые в элементе управления с привязкой к данным двумя способами. Можно либо задать для свойства <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> подмножество свойств, либо определить поля для элемента управления с привязкой к данным путем добавления элементов управления <xref:System.Web.UI.WebControls.DataControlField>. Однако если задать свойство <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>, это означает, что невозможно включить автоматические операции обновления, вставки и удаления. Если вы хотите включить автоматическое изменение данных при работе с подмножеством доступных свойств, не устанавливайте свойство <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>. Вместо этого извлеките все свойства из объекта данных и управляйте, какие из них отображаются с помощью элемента управления с привязкой к данным. При использовании элемента управления <xref:System.Web.UI.WebControls.DetailsView> или <xref:System.Web.UI.WebControls.GridView> необходимо также задать для свойств <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> или <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> значение `false`. Таким образом, элемент управления с привязкой к данным не будет автоматически включать кнопки для редактирования и удаления данных. Все значения, не отображаемые в элементе управления с привязкой к данным, сохраняются в состоянии представления. При выполнении обновления данных они передаются в источник данных без изменений.  
  
<a name="evaluating_value_at_run_time"></a>   
## <a name="evaluating-values-at-run-time"></a>Вычисление значений во время выполнения  
 Если необходимо оценивать значения во время выполнения для упорядочивания, фильтрации или группирования значений, можно добавить параметры в коллекции <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>или <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>.  
  
 Если необходимо указать значения по умолчанию, можно добавить параметры в коллекцию <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>.  
  
 Если необходимо проверить или изменить значения перед выполнением операции с данными, можно обрабатывать события <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserting>, <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>или <xref:System.Web.UI.WebControls.LinqDataSource.Updating>. Можно также обрабатывайте эти события, чтобы отменить операцию с данными или проверить ошибки проверки, произошедшие при установке свойств в классе данных на основе вводимых пользователем данных.  
  
 Чтобы проверить значения после завершения операции с данными, обработайте события <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, <xref:System.Web.UI.WebControls.LinqDataSource.Selected>или <xref:System.Web.UI.WebControls.LinqDataSource.Updated>.  
  
<a name="working_with_stored_procedures"></a>   
## <a name="working-with-stored-procedures"></a>Работа с хранимыми процедурами  
 Элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> используется для получения данных из хранимой процедуры путем создания обработчика событий для события <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>. В обработчике событий вы вызываете метод в классе контекста данных, который представляет хранимую процедуру, и присваивает результат свойству <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> объекта <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>. Если необходимо включить автоматические операции обновления, вставки и удаления данных, тип, возвращаемый методом, должен соответствовать типу, указанному в свойстве <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>. Дополнительные сведения о создании методов контекста данных см. [в разделе инструкции. Создание методов DataContext, сопоставленных с хранимыми процедурами и функциями (реляционный конструктор операций и т. д.)](https://msdn.microsoft.com/library/e7ca32f1-50b3-48af-ad92-ceafd749296a).  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Декларативный синтаксис  
  
```  
<asp:LinqDataSource  
    AutoGenerateOrderByClause="True|False"  
    AutoGenerateWhereClause="True|False"  
    AutoPage="True|False"  
    AutoSort="True|False"  
    ContextTypeName="string"  
    EnableDelete="True|False"  
    EnableInsert="True|False"  
    EnableTheming="True|False"  
    EnableUpdate="True|False"  
    EnableViewState="True|False"  
    GroupBy="string"  
    ID="string"  
    OnContextCreated="ContextCreated event handler"  
    OnContextCreating="ContextCreating event handler"  
    OnContextDisposing="ContextDisposing event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDeleted="Deleted event handler"  
    OnDeleting="Deleting event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnInserted="Inserted event handler"  
    OnInserting="Inserting event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnSelected="Selected event handler"  
    OnSelecting="Selecting event handler"  
    OnUnload="Unload event handler"  
    OnUpdated="Updated event handler"  
    OnUpdating="Updating event handler"  
    OrderBy="string"  
    runat="server"  
    Select="string"  
    SkinID="string"  
    StoreOriginalValuesInViewState="True|False"  
    TableName="string"  
    Visible="True|False"  
    Where="string"  
>  
        <GroupByParameters />  
        <InsertParameters />  
        <OrderByParameters />  
        <SelectParameters />  
        <WhereParameters />  
</asp:LinqDataSource>  
```  
  
   
  
## Examples  
 В следующем примере показан элемент управления <xref:System.Web.UI.WebControls.LinqDataSource>, который извлекает данные из класса сущностей с именем `Products`. Класс сущностей мог быть создан с помощью [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] или программы SqlMetal. exe. Свойство <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> имеет значение, возвращающее только те записи, которые имеют значение в свойстве `Price` больше 50. Элемент управления <xref:System.Web.UI.WebControls.GridView> привязан к элементу управления <xref:System.Web.UI.WebControls.LinqDataSource> для вывода данных.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 В следующем примере показан элемент управления <xref:System.Web.UI.WebControls.LinqDataSource>, который позволяет пользователям обновлять, удалять и вставлять записи в источнике данных. Элемент управления <xref:System.Web.UI.WebControls.DetailsView> привязан к элементу управления <xref:System.Web.UI.WebControls.LinqDataSource> и позволяет пользователям просматривать и изменять данные. Обратите внимание, что команды SQL не требуются для выбора, обновления, удаления или вставки записей.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 В следующем примере показан обработчик событий для события <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>, которое задает объект данных на основе значения на веб-странице.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 В следующем примере показан элемент управления <xref:System.Web.UI.WebControls.LinqDataSource>, для которого настроено группирование по двум столбцам. Свойство `Key` ссылается на объект с двумя свойствами: `ProductCategory` и `Color`. Объект, представленный `It`, переименовывается (имеет псевдоним) для `Products`. Переименованный объект `Products` содержит коллекцию отдельных записей в группировании. Каждый экземпляр будет содержать все столбцы таблицы `Products`.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 В следующем примере показаны два элемента управления <xref:System.Web.UI.WebControls.ListView>, отображающих данные из элемента управления <xref:System.Web.UI.WebControls.LinqDataSource> в предыдущем примере. Один элемент управления <xref:System.Web.UI.WebControls.ListView> отображает сгруппированные данные, а другой элемент управления <xref:System.Web.UI.WebControls.ListView> отображает отдельные имена продуктов, принадлежащих к этой группе. Свойству <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> вложенного элемента управления с привязкой к данным присвоено значение `Products`, которое является псевдонимом для объекта `It`.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655">LINQ to SQL</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateOrderByClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateOrderByClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateOrderByClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateOrderByClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateOrderByClause { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoGenerateOrderByClause : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, которое указывает, создает ли элемент управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> динамически предложение ORDER BY на основе значений в коллекции <see cref="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />.</summary>
        <value><see langword="true" />, если элемент управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> создает предложение ORDER BY; в противном случае <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если для свойства <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> задано значение `true`, элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> динамически создает предложение ORDER BY, основанное на значениях в коллекции <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>. Элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> сортирует данные по первому параметру, а затем дополнительно сортирует данные для каждого дополнительного параметра. Параметры, содержащие `null` или пустое значение, не включаются в предложение ORDER BY.  
  
 Свойство <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> не задается, если <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> имеет значение `true`, так как средство синтаксического анализа динамически создает предложение ORDER BY. Элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> создает исключение, если <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> имеет значение `true` и свойству <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> присваиваются значения.  
  
   
  
## Examples  
 В следующем примере показан элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> с <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>, для которого задано значение `true`. Параметр включается в коллекцию <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>, которая упорядочивает данные на основе имени свойства, которое пользователь выбирает из элемента управления <xref:System.Web.UI.WebControls.DropDownList>.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateWhereClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateWhereClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateWhereClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateWhereClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateWhereClause { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoGenerateWhereClause : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.AutoGenerateWhereClause</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, определяющее, создает ли динамически элемент управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> оператор Where, основываясь на значениях, определенных в коллекции <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" />.</summary>
        <value><see langword="true" />, если элемент управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> создает оператор Where; в противном случае — <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если для свойства <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> задано значение `true`, элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> динамически создает предложение WHERE на основе параметров в коллекции <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>. Каждый параметр, добавляемый в коллекцию <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>, должен иметь свойство <xref:System.Web.UI.WebControls.Parameter.Name%2A>, для которого задано значение, совпадающее со свойством в объекте данных, к которому выполняется запрос. Автоматически созданное предложение WHERE проверит, равно ли значение, указанное в коллекции <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>, значению соответствующего свойства в объекте данных. При предоставлении более одного параметра параметры связываются с логической операцией `AND`. Параметры, содержащие `null` или пустое значение, не включаются в предложение WHERE.  
  
 Автоматически созданное предложение <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> может проверять только на равенство и может связывать параметры только с операцией `AND`. Не устанавливайте свойство <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> в значение `true`, если необходимо добавить условие, которое не проверяет на равенство, или если необходимо связать параметры с операцией `OR`. Эти задачи можно выполнить, задав для свойства <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> значение `false` и добавив заполнители в свойство <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> для каждого параметра в коллекции <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>. В свойстве <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> перед именем заполнителя введите символ @.  
  
 Свойство <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> не задается, если свойство <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> имеет значение `true`, так как средство синтаксического анализа динамически создает предложение WHERE. Элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> создает исключение, если свойство <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> имеет значение `true` и свойству <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> присваиваются значения.  
  
   
  
## Examples  
 В следующем примере показан элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> с <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A>, для которого задано значение `true`. Элемент управления <xref:System.Web.UI.WebControls.GridView> привязан к элементу управления <xref:System.Web.UI.WebControls.LinqDataSource> для вывода данных, возвращаемых из запроса. Включается элемент управления <xref:System.Web.UI.WebControls.DropDownList>, который заполняется тремя значениями. Параметр включается в коллекцию <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> с именем, равным `Category,` что соответствует одному из свойств объекта данных. Его свойству <xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A> присваивается идентификатор элемента управления <xref:System.Web.UI.WebControls.DropDownList>. Элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> автоматически создает свойство <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> для фильтрации записей на основе значения, которое пользователь выбирает из элемента управления <xref:System.Web.UI.WebControls.DropDownList>. Запрос возвращает записи, свойство `Category` которых соответствует значению, выбранному пользователем из элемента управления <xref:System.Web.UI.WebControls.DropDownList>.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default7.aspx#7)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default7.aspx#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoPage">
      <MemberSignature Language="C#" Value="public bool AutoPage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoPage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoPage" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoPage As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoPage { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoPage : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает и задает значение, указывающее, поддерживает ли элемент управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> переход между разделами данных во время выполнения.</summary>
        <value>Возвращает значение <see langword="true" />, если пользователь может просматривать данные. В противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Задайте для свойства <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> значение `true`, чтобы включить разбиение по страницам в элементе управления <xref:System.Web.UI.WebControls.LinqDataSource>. Чтобы разрешить пользователю пролистывать данные, соедините элемент управления с привязкой к данным, предоставляющий интерфейс для разбиения на страницы элемента управления <xref:System.Web.UI.WebControls.LinqDataSource>. Если свойство <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> имеет значение `true`, элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> извлекает достаточное количество записей для одной страницы в элементе управления с привязкой к данным. Для получения записей о текущей странице используются методы <xref:System.Linq.Enumerable.Skip%2A> и <xref:System.Linq.Enumerable.Take%2A>.  
  
   
  
## Examples  
 В следующем примере показан элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> со свойством <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>, для которого задано значение `true`, и элемент управления <xref:System.Web.UI.WebControls.GridView>, привязанный к элементу управления <xref:System.Web.UI.WebControls.LinqDataSource>. Свойство <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> элемента управления <xref:System.Web.UI.WebControls.GridView> имеет значение `true`, чтобы предоставить интерфейс, позволяющий пользователям пролистывать данные.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSort">
      <MemberSignature Language="C#" Value="public bool AutoSort { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSort" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoSort" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoSort As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoSort { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoSort : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoSort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее на то, поддерживает ли элемент управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> сортировку данных во время выполнения.</summary>
        <value>Значение <see langword="true" />, если пользователь может сортировать данные. В противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> поддерживает два подхода к сортировке данных. Чтобы включить сортировку во время выполнения, можно использовать свойство <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> или задать свойство <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>, чтобы определить сортировку во время разработки.  
  
 Задайте для свойства <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> значение `true`, чтобы включить сортировку в элементе управления <xref:System.Web.UI.WebControls.LinqDataSource>, основанном на выражении сортировки из элемента управления с привязкой к данным. Элемент управления с привязкой к данным предоставляет интерфейс, позволяющий пользователю выбирать во время выполнения свойство, используемое для сортировки.  
  
 Порядок, в котором возвращаются данные, можно задать программным путем, задав для свойства <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> свойство или свойства, используемые для сортировки. Если для свойства <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> задано свойство, а <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> свойство имеет значение `true`, выражение сортировки из элемента управления с привязкой к данным применяется после выражения в свойстве <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>. Таким образом, это определяет окончательную сортировку данных.  
  
   
  
## Examples  
 В следующем примере показан элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> со свойством <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A>, для которого задано значение `true`, и элемент управления <xref:System.Web.UI.WebControls.GridView>, привязанный к элементу управления <xref:System.Web.UI.WebControls.LinqDataSource>. Свойство <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> элемента управления <xref:System.Web.UI.WebControls.GridView> имеет значение `true`, чтобы предоставить интерфейс, позволяющий пользователям сортировать данные.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreated As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ ContextCreated;" />
      <MemberSignature Language="F#" Value="member this.ContextCreated : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.ContextCreated : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит после создания экземпляра объекта типа контекста.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обрабатывает событие <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>, чтобы проверить объект типа контекста или проверить исключения, возникающие во время создания объекта. Объект типа контекста извлекается из свойства <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> объекта <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>, связанного с этим событием. Вы получаете исключение, которое было вызвано во время операции с данными из свойства <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>.  
  
 Объект типа контекста создается во время операций выбора, обновления, вставки и удаления и используется по всему запросу.  
  
 Если событие не возникло, возникает один раз. Это происходит, когда вы программно устанавливаете свойство <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> в объект во время события <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>. Дополнительное условие заключается в том, что исходные значения не обязательно должны храниться в состоянии представления, или объект в свойстве <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> реализует интерфейс <xref:System.Data.Linq.ITable>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreating As EventHandler(Of LinqDataSourceContextEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceContextEventArgs ^&gt; ^ ContextCreating;" />
      <MemberSignature Language="F#" Value="member this.ContextCreating : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; " Usage="member this.ContextCreating : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит перед созданием экземпляра объекта типа контекста.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> создает экземпляр типа, который указан в свойстве <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>. Элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> вызывает конструктор без параметров объекта контекста данных для создания экземпляра объекта. Возможно, необходимо использовать конструктор без параметров или создать объект, отличающийся от того, который указан в свойстве <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>. В этом случае необходимо выполнить обработку события <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> и вручную создать объект контекста данных.  
  
 Объект типа контекста создается во время операций выбора, обновления, вставки и удаления.  
  
 Если событие не возникло, возникает один раз. Это происходит при программном задании свойства <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> объекту в обработчике событий для события <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>. Дополнительное условие заключается в том, что исходные значения не обязательно должны храниться в состоянии представления, или объект в свойстве <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> реализует интерфейс <xref:System.Data.Linq.ITable>.  
  
   
  
## Examples  
 В следующем примере показано, как создать объект контекста данных с помощью конструктора без параметров во время события <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating>. Код присваивает объект свойству <xref:System.Web.UI.WebControls.LinqDataSourceContextEventArgs.ObjectInstance%2A>.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextDisposing">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextDisposing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextDisposing As EventHandler(Of LinqDataSourceDisposeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceDisposeEventArgs ^&gt; ^ ContextDisposing;" />
      <MemberSignature Language="F#" Value="member this.ContextDisposing : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; " Usage="member this.ContextDisposing : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит перед удалением объекта типа контекста.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Событие <xref:System.Web.UI.WebControls.LinqDataSource.ContextDisposing> обрабатывается для удаления объекта вручную или для выполнения очистки, относящейся к объекту перед уничтожением объекта.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextTypeName">
      <MemberSignature Language="C#" Value="public string ContextTypeName { get; set; }" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContextTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.ContextTypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property ContextTypeName As String" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ContextTypeName { System::String ^ get(); void set(System::String ^ value); };" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="member this.ContextTypeName : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.ContextTypeName" />
      <MemberSignature Language="C#" Value="public override string ContextTypeName { get; set; }" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ContextTypeName As String" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ContextTypeName { System::String ^ get(); void set(System::String ^ value); };" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает имя типа, содержащего свойство, значение которого включает предназначенные для извлечения данные.</summary>
        <value>Имя класса, из которого должны извлекаться данные.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При использовании элемента управления <xref:System.Web.UI.WebControls.LinqDataSource> для получения данных из коллекции данных в памяти или из базы данных необходимо указать два свойства. Первый — это класс контекста данных, представляющий источник данных. Второй является свойством в классе контекста данных, который содержит данные. Для свойства <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> задается имя класса контекста данных, а свойству <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> — набор данных, содержащий данные.  
  
 Например, при извлечении данных из базы данных задайте свойству <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> имя класса, представляющего базу данных. Также присвойте свойству <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> свойство, представляющее таблицу в базе данных. Чтобы создать классы из базы данных, используйте [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] или программу SqlMetal. exe для автоматического создания этих классов.  
  
 При извлечении данных из коллекции данных в памяти, например массива, задайте для свойства <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> имя класса, содержащего свойство массива. Затем присвойте свойству <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> свойство, которое получает массив.  
  
 Чтобы включить автоматическое обновление, вставку или удаление операций с помощью элемента управления <xref:System.Web.UI.WebControls.LinqDataSource>, класс, присвоенный свойству <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>, должен быть производным от <xref:System.Data.Linq.DataContext>. Кроме того, свойство, присвоенное свойству <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>, должно быть производным от <xref:System.Data.Linq.Table%601>. Если не требуется включать автоматические операции обновления, вставки или удаления, можно присвоить имя любого типа класса свойству <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>.  
  
 Сведения о том, как выбрать данные из экземпляра класса, см. в описании свойства <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>.  
  
   
  
## Examples  
 В следующем примере показано, как задать для свойства <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> класс, содержащий массив строк. В нем также показано, как задать свойство для класса (созданного [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]), который представляет базу данных.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 В этом примере не показан класс с именем `ExampleDataContext`, представляющий таблицу базы данных. Чтобы этот пример работал, необходимо создать этот класс путем добавления класса LINQ to SQL с именем example. dbml и перетаскивания таблицы с именем Movie на [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]. Создается класс с именем `ExampleDataContext` со свойством с именем `Movies`.  
  
 В следующем примере показан класс с именем `MovieLibrary`, на который ссылается элемент управления <xref:System.Web.UI.WebControls.LinqDataSource>.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655">LINQ to SQL</related>
      </Docs>
    </Member>
    <Member MemberName="CreateQueryableView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateQueryableView" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateQueryableView () As QueryableDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::WebControls::QueryableDataSourceView ^ CreateQueryableView();" />
      <MemberSignature Language="F#" Value="override this.CreateQueryableView : unit -&gt; System.Web.UI.WebControls.QueryableDataSourceView" Usage="linqDataSource.CreateQueryableView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.QueryableDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает представление, доступное для запросов.</summary>
        <returns>Представление, доступное для запросов.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateView">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.LinqDataSourceView CreateView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.LinqDataSourceView CreateView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateView" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateView () As LinqDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::LinqDataSourceView ^ CreateView();" />
      <MemberSignature Language="F#" Value="abstract member CreateView : unit -&gt; System.Web.UI.WebControls.LinqDataSourceView&#xA;override this.CreateView : unit -&gt; System.Web.UI.WebControls.LinqDataSourceView" Usage="linqDataSource.CreateView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LinqDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Создает новый экземпляр класса <see cref="T:System.Web.UI.WebControls.LinqDataSourceView" />, связанный с данным элементом управления.</summary>
        <returns>Объект, действующий как интерфейс для элементов управления с привязкой к данным.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы предоставить пользовательское представление, этот метод можно переопределить в производном классе.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete(class System.Collections.IDictionary keys, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete (keys As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Delete(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="member this.Delete : System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Delete (keys, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">Ключевые значения строк для удаляемых записей.</param>
        <param name="oldValues">Значения строк, которые проверяются на наличие конфликтов данных.</param>
        <summary>Выполняет операцию удаления.</summary>
        <returns>Количество записей, затронутых операцией удаления.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило, нет необходимости вызывать метод <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> из кода. При использовании элемента управления <xref:System.Web.UI.WebControls.LinqDataSource> с элементом управления с привязкой к данным элемент управления с привязкой к данным будет автоматически вызывать метод <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A>, когда пользователь предпринимает действия для удаления записи. Метод <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> явно вызывается, если требуется создать собственный процесс удаления данных. Например, можно вызвать метод <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A>, если нужно удалить запись, основанную на событии за пределами элемента управления с привязкой к данным.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Deleted;" />
      <MemberSignature Language="F#" Value="member this.Deleted : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Deleted : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при завершении операции удаления.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обработайте событие <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, чтобы перехватить все исключения из операции удаления или проверить выходные параметры после завершения операции. Выходные параметры можно получить из объекта <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>, который передается в обработчики событий.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.DeleteParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Это свойство не используется классом <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <value>Коллекция параметров.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As EventHandler(Of LinqDataSourceDeleteEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceDeleteEventArgs ^&gt; ^ Deleting;" />
      <MemberSignature Language="F#" Value="member this.Deleting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; " Usage="member this.Deleting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит перед операцией удаления.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обрабатывайте событие <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, чтобы проверить объект, который необходимо удалить, чтобы проверить ошибки проверки данных в классе данных, изменить значение перед операцией Delete или отменить операцию удаления. Элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> передает <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>ный объект обработчикам событий <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> события. Объект <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> содержит данные, которые будут удалены, и позволяет отменить операцию удаления. Если класс данных вызывает исключение <xref:System.Web.UI.WebControls.LinqDataSourceValidationException>, объект <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> содержит это исключение в свойстве <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A>.  
  
 Если в обработчике событий для события <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> возникает исключение, необходимо выполнить обработку исключения в этом обработчике событий. Исключение не будет передано обработчику событий для события <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> (через свойство <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> объекта <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>). Свойство <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> содержит только исключения, вызываемые после события <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>.  
  
   
  
## Examples  
 В следующем примере показан обработчик событий для события <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>. Код отменяет операцию удаления на основе свойства в свойстве <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.OriginalObject%2A> и значения из веб-страницы. В этом примере, если свойство `OnSale` имеет значение `true`, пользователь должен выбрать элемент управления <xref:System.Web.UI.WebControls.CheckBox>, чтобы подтвердить удаление записи.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableDelete">
      <MemberSignature Language="C#" Value="public bool EnableDelete { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableDelete" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableDelete" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableDelete As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableDelete { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableDelete : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableDelete" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableDelete</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее, могут ли быть удалены записи данных при помощи элемента управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <value><see langword="true" />, если автоматическое удаление включено; в противном случае <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Задайте для свойства <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> значение `true`, если необходимо разрешить пользователям удалять запись данных через элемент управления <xref:System.Web.UI.WebControls.LinqDataSource>. Если <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> `true`, элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> использует LINQ to SQL для автоматического создания команды для удаления данных. Необходимо включить интерфейс, позволяющий пользователям выбрать удаляемую запись, например элемент управления <xref:System.Web.UI.WebControls.DetailsView>.  
  
 Элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> не поддерживает автоматические операции удаления, если задано свойство <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> или свойство <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>. В этом случае элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> создает исключение при попытке выполнить операцию удаления.  
  
   
  
## Examples  
 В следующем примере показан элемент управления <xref:System.Web.UI.WebControls.LinqDataSource>, для которого <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> задано значение `true`. Элемент управления <xref:System.Web.UI.WebControls.DetailsView> отображает данные и создает кнопку, которая позволяет пользователям удалить запись данных.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655">LINQ to SQL</related>
      </Docs>
    </Member>
    <Member MemberName="EnableInsert">
      <MemberSignature Language="C#" Value="public bool EnableInsert { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableInsert" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableInsert" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableInsert As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableInsert { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableInsert : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableInsert" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableInsert</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее, могут ли быть вставлены записи данных при помощи элемента управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <value><see langword="true" />, если автоматическая вставки включена; в противном случае <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Задайте для свойства <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> значение `true`, если необходимо разрешить пользователям вставлять новую запись данных через элемент управления <xref:System.Web.UI.WebControls.LinqDataSource>. Если <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> `true`, элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> использует LINQ to SQL для автоматического создания команды вставки данных. Необходимо включить интерфейс, позволяющий пользователям вставлять новую запись, например элемент управления <xref:System.Web.UI.WebControls.DetailsView>.  
  
 Элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> не поддерживает автоматические операции вставки, если задано свойство <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> или свойство <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>. В этом случае элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> создает исключение при попытке выполнить операцию вставки.  
  
   
  
## Examples  
 В следующем примере показан элемент управления <xref:System.Web.UI.WebControls.LinqDataSource>, для которого <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> задано значение `true`. Элемент управления <xref:System.Web.UI.WebControls.DetailsView> отображает данные и отображает кнопку, которая переключает элемент управления в режим вставки, где пользователи могут создавать и сохранять новые записи.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655">LINQ to SQL</related>
      </Docs>
    </Member>
    <Member MemberName="EnableObjectTracking">
      <MemberSignature Language="C#" Value="public bool EnableObjectTracking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableObjectTracking" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableObjectTracking As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableObjectTracking { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableObjectTracking : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее, отслеживаются ли изменения в объекте контекста данных.</summary>
        <value><see langword="true" />, если изменения в объекте контекста данных отслеживаются; в противном случае — <see langword="false" />. Значение по умолчанию — <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> используется только при выборе данных из объекта контекста данных LINQ to SQL.  
  
 При взаимодействии с данными только для чтения установка свойства <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> в значение `false` повышает производительность, поскольку данные не кэшируются для определения их изменения. Однако он также отключает отложенное выполнение запросов. Для этого свойства необходимо задать значение `true`, если требуется использовать отложенное выполнение запроса.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" />
      </Docs>
    </Member>
    <Member MemberName="EnableUpdate">
      <MemberSignature Language="C#" Value="public bool EnableUpdate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableUpdate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableUpdate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableUpdate { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableUpdate : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableUpdate" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableUpdate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее, могут ли быть обновлены записи данных при помощи элемента управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <value><see langword="true" />, если автоматическое обновление включено; в противном случае <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Задайте для свойства <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> значение `true`, если необходимо разрешить пользователям обновлять запись данных с помощью элемента управления <xref:System.Web.UI.WebControls.LinqDataSource>. Если <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> `true`, элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> использует LINQ to SQL для автоматического создания команды для обновления данных. Необходимо включить интерфейс, позволяющий пользователям обновлять записи, например элемент управления <xref:System.Web.UI.WebControls.DetailsView>.  
  
 Элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> не поддерживает операции автоматического обновления, если задано свойство <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> или свойство <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>. В этом случае элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> создает исключение при попытке выполнить операцию обновления.  
  
   
  
## Examples  
 В следующем примере показан элемент управления <xref:System.Web.UI.WebControls.LinqDataSource>, для которого <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> задано значение `true`. Элемент управления <xref:System.Web.UI.WebControls.DetailsView> отображает данные и создает кнопку, которая позволяет пользователям обновлять запись данных.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceView GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetView (viewName As String) As DataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::DataSourceView ^ GetView(System::String ^ viewName);" />
      <MemberSignature Language="F#" Value="override this.GetView : string -&gt; System.Web.UI.DataSourceView" Usage="linqDataSource.GetView viewName" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetView(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" Index="0" FrameworkAlternate="netframework-3.5" />
      </Parameters>
      <Docs>
        <param name="viewName">Имя получаемого представления, должно быть — "DefaultView".</param>
        <summary>Возвращает представление источника данных, связанное с объектом <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <returns>Представление источника данных, связанное с объектом <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> поддерживает только одно представление источника данных. Объект <xref:System.Web.UI.WebControls.LinqDataSourceView> имеет имя по умолчанию «DefaultView». Объект <xref:System.Web.UI.WebControls.LinqDataSourceView> определяет возможности элемента управления источниками данных, извлекает данные из базовой базы данных и выполняет такие операции, как сортировка, вставка, удаление и обновление.

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><p>viewName имеет значение null (в Visual Basic — Nothing) или любое отличное от "DefaultView".</p></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)">Обзор серверного веб-элемента управления LinqDataSource</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)">Общие сведения о доступе к данным в ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="protected override System.Collections.ICollection GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.ICollection GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetViewNames () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Collections::ICollection ^ GetViewNames();" />
      <MemberSignature Language="F#" Value="override this.GetViewNames : unit -&gt; System.Collections.ICollection" Usage="linqDataSource.GetViewNames " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetViewNames</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает коллекцию имен, представляющих список объектов представления, связанных с элементом управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <returns>Коллекция с одним элементом, которая содержит имя "DefaultView".</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> поддерживает только одно представление базовых данных, которое называется `DefaultView`. Таким образом, метод `GetViewNames` Возвращает коллекцию только с одним элементом, который содержит это имя представления.

]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)">Обзор серверного веб-элемента управления LinqDataSource</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)">Общие сведения о доступе к данным в ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy">
      <MemberSignature Language="C#" Value="public string GroupBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string GroupBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupBy" />
      <MemberSignature Language="VB.NET" Value="Public Property GroupBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ GroupBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.GroupBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.GroupBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, определяющее свойства, используемые для группировки и получения данных.</summary>
        <value>Строка, используемая для создания предложения GROUP BY.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте свойство <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>, чтобы указать, какие свойства используются для консолидации записей данных с одинаковыми значениями. Например, если задать для свойства <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> значение `Name`, то в качестве одной консолидированной записи возвращаются все записи в запросе с одинаковым значением свойства `Name`.  
  
 Можно назначить несколько свойств свойству <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>, заключив все свойства функции `new` и разделив каждое свойство с помощью запятой. Например, чтобы выполнить группировку по свойствам `Name` а затем `Category`, задайте для свойства <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> значение `new(Name, Category)`.  
  
 Значения в свойстве, используемые для группирования, возвращаются с помощью созданного свойства с именем `Key`. Чтобы получить сгруппированные значения, включите свойство `Key` в свойство <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>. Можно задать для свойства `Key` псевдоним, используя ключевое слово `As`, но не обязательно использовать псевдоним. Например, свойству <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> можно присвоить свойство с именем `Category`. Можно извлечь консолидированные значения из свойства `Category`, задав свойству <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> значение `new(Key As ProductCategory)`.  
  
 Можно получить доступ к отдельным записям в группировании, включив свойство `It` в свойство <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>. Свойство `It` содержит коллекцию записей, совместно использующих значение в сгруппированном свойстве. Можно выполнить итерацию по свойству `It`, чтобы получить отдельные записи.  
  
 Свойство <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> часто используется с методами агрегирования. Можно использовать следующие статистические методы:  
  
-   `Count()`  
  
-   `)` `Average(` *столбца*  
  
-   `)` `Sum(` *столбца*  
  
-   `)` `Max(` *столбца*  
  
-   `)` `Min(` *столбца*  
  
-   *условие* `Where(` `)`  
  
-   `Any()`  
  
-   *условие* `All(` `)`  
  
 Дополнительные сведения см. в статьях [Общие сведения о серверном веб-элементе управления LinqDataSource](https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)) и [инструкции по группированию и статистической обработке данных с помощью элемента управления LinqDataSource](https://docs.microsoft.com/previous-versions/aspnet/bb470251(v=vs.100)).  
  
   
  
## Examples  
 В следующем примере показан элемент управления <xref:System.Web.UI.WebControls.LinqDataSource>, который группирует возвращаемые данные по свойству с именем `Category`. Он возвращает общие значения и вычисляет среднюю цену для сгруппированных записей.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 В следующем примере показан элемент управления <xref:System.Web.UI.WebControls.LinqDataSource>, для которого настроено группирование по двум столбцам. Свойство `Key` ссылается на объект с двумя свойствами: `ProductCategory` и `Color`. Объект, представленный `It`, переименовывается `Products`. Переименованный объект `Products` содержит коллекцию отдельных записей в группировании, а каждый экземпляр содержит все столбцы из таблицы Products.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 В следующем примере показаны два элемента управления <xref:System.Web.UI.WebControls.ListView> для отображения данных из элемента управления <xref:System.Web.UI.WebControls.LinqDataSource> в предыдущем примере. Один элемент управления <xref:System.Web.UI.WebControls.ListView> отображает сгруппированные данные, а другой элемент управления <xref:System.Web.UI.WebControls.ListView> отображает отдельные имена продуктов, принадлежащих этой группе. Свойству <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> вложенного элемента управления с привязкой к данным присвоено значение `Products`, которое является псевдонимом для объекта `It`.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection GroupByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection GroupByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GroupByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ GroupByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GroupByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.GroupByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает коллекцию параметров, которые используются для создания предложения Group By.</summary>
        <value>Параметры, используемые для создания предложения GROUP BY.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> использует параметры в коллекции <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> для создания предложения GROUP BY во время выполнения. Обычно для группирования данных не используется коллекция <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>. Вместо этого можно использовать свойство <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>. Коллекция <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> используется только в том случае, если значение в предложении GROUP BY должно быть задано во время выполнения, а это значение не является именем свойства. Например, можно использовать коллекцию <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> для группирования данных на основе того, что свойство `LastName` в записях данных равно значению, предоставленному пользователем.  
  
 Если вы хотите сгруппировать данные по свойству и это свойство не должно быть задано во время выполнения, можно определить свойство группирования в свойстве <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>. Например, чтобы вернуть значения из таблицы базы данных, сгруппированной по `LastName`, задайте для <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> значение LastName без параметров. Если требуется динамически группировать данные по свойству, создайте обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> события и настройте свойство <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> по мере необходимости.  
  
 Нельзя присвоить имя свойства в качестве значения для параметра в коллекции <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>. Параметры добавляются в коллекцию <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>, если необходимо добавить условие в свойство <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>, которое должно быть задано во время выполнения.  
  
 Чтобы задать значения в коллекции <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>, необходимо назначить имя каждому параметру, а затем добавить заполнитель в свойство <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> для этого именованного параметра. В предложении GROUP BY перед каждым именем параметра следует добавлять символ @.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert (System.Collections.IDictionary values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert(class System.Collections.IDictionary values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (values As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Insert(System::Collections::IDictionary ^ values);" />
      <MemberSignature Language="F#" Value="member this.Insert : System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Insert values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="values">Значения строк, которые вносятся в источник данных.</param>
        <summary>Выполняет операцию вставки.</summary>
        <returns>Количество строк, на которые повлияла операция вставки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило, нет необходимости вызывать метод <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> из кода. Элемент управления с привязкой к данным будет автоматически вызывать метод <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A>, когда пользователь предпринимает действия для вставки новой записи. Метод <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> явно вызывается, если требуется создать собственный процесс для вставки данных.  
  
   
  
## Examples  
 В следующем примере показано, как программным способом вставить новую запись в источник данных после нажатия пользователем кнопки. Код передает объект <xref:System.Collections.Specialized.ListDictionary>, содержащий значения по умолчанию, в метод <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A>.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx.vb#1)]  
  
 В следующем примере показана разметка для предыдущего примера.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Inserted;" />
      <MemberSignature Language="F#" Value="member this.Inserted : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Inserted : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при завершении операции вставки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обработайте событие <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, чтобы перехватить все исключения из операции вставки или проверить значения после завершения операции вставки. Новые значения можно получить с помощью объекта <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>, который передается в обработчики событий. Например, можно использовать объект <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> для получения свойства Identity, созданного базой данных, для новой записи данных.  
  
   
  
## Examples  
 В следующем примере показано, как создать обработчик событий для события <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, которое проверяет наличие исключений и извлекает свойство Identity для новой записи.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As EventHandler(Of LinqDataSourceInsertEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceInsertEventArgs ^&gt; ^ Inserting;" />
      <MemberSignature Language="F#" Value="member this.Inserting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; " Usage="member this.Inserting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит перед операцией вставки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обрабатывает событие <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> для проверки объекта, который необходимо вставить, для проверки ошибок проверки данных в классе данных, изменения значения перед операцией вставки или отмены операции вставки. <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> объект, передаваемый обработчикам событий для этого события, содержит новый объект для вставки в источник данных.  
  
 Если во время операции вставки возникает ошибка проверки, то объект <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> содержит исключения проверки, вызываемые классом данных. Ошибка проверки возникает, если вставляемое значение не соответствует типу свойства в классе данных или если не прошел пользовательскую проверку. В обработчике события <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> можно получить исключения проверки и предпринять соответствующие действия.  
  
 Если в обработчике событий для события <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> возникает исключение, необходимо выполнить обработку исключения в этом обработчике событий. Исключение не будет передано обработчику событий для события <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> (через свойство <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> объекта <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>). Свойство <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> содержит только исключения, вызываемые после события <xref:System.Web.UI.WebControls.LinqDataSource.Inserting>.  
  
   
  
## Examples  
 В следующем примере показан обработчик событий для события <xref:System.Web.UI.WebControls.LinqDataSource.Inserting>, изменяющего данные перед операцией вставки. Объект из свойства <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> приводится к типу с именем `Product`. Свойству `DateModified` объекта `Product` присвоена текущая дата и время.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/vb/Default.aspx.vb#1)]  
  
 В следующем примере показан обработчик событий для события <xref:System.Web.UI.WebControls.LinqDataSource.Inserting>, которое получает исключения проверки.  
  
```vb  
Protected Sub LinqDataSource_Inserting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceInsertEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Inserting(object sender,   
        LinqDataSourceInsertEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 В предыдущем примере извлекаются исключения проверки. Если значение не соответствует типу свойства, может возникнуть исключение. Кроме того, она может быть вызвана из настроенной проверки, как в следующем примере. Метод `OnAgeChanging` проверяет, что число для свойства `Age` не отрицательное.  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InsertParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.InsertParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает коллекцию параметров, которые используются во время операции вставки.</summary>
        <value>Параметры, которые используются во время операции вставки.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обычно значения, необходимые для операции вставки, передаются элементу управления <xref:System.Web.UI.WebControls.LinqDataSource> элементом управления с привязкой к данным. Параметры INSERT указываются, если необходимо указать значение по умолчанию или преобразовать пустые значения в `null`. Нет необходимости предоставлять параметр для каждого значения, которое будет вставлено, только для значений, которые должны быть обработаны, если пользователь не предоставил значение.  
  
 Значения, предоставленные в коллекции <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>, используются только для полей, определенных в источнике данных, но не привязанных к элементу управления данными. Например, предположим, что таблица базы данных содержит столбцы с именами Name, Address и PostalCode, но элемент управления <xref:System.Web.UI.WebControls.ListView>, привязанный к таблице, привязан только к полям имя и адрес. Значения в коллекции <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> будут использоваться только для поля PostalCode. Они не будут использоваться для поля "имя" и "адрес". Это справедливо, даже если для этих полей не задано значение. Если элемент управления с привязкой к данным автоматически создает поля для всех полей в источнике данных, то значения из коллекции <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> не будут использоваться.  
  
   
  
## Examples  
 В следующем примере показан элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> с параметром, предоставляющим значение по умолчанию в коллекции <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>. Если пользователь не предоставляет значение для свойства `Category`, значение по умолчанию, предоставляемое параметром, сохраняется в базе данных.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default9.aspx#9)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default9.aspx#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void LoadViewState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.LoadViewState : obj -&gt; unit" Usage="linqDataSource.LoadViewState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" Index="0" FrameworkAlternate="netframework-3.5" />
      </Parameters>
      <Docs>
        <param name="savedState">Объект, представляющий состояние элемента управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</param>
        <summary>Загружает в элемент управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> состояние значений, которые необходимо сохранить.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Метод `LoadViewState` используется для загрузки ранее сохраненного состояния представления элемента управления <xref:System.Web.UI.WebControls.LinqDataSource>.

]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)">Обзор серверного веб-элемента управления LinqDataSource</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)">Общие сведения о доступе к данным в ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="linqDataSource.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Данные события.</param>
        <summary>Выполняет инициализацию объекта <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUnload">
      <MemberSignature Language="C#" Value="protected internal override void OnUnload (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnUnload(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnUnload (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnUnload(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnUnload : EventArgs -&gt; unit" Usage="linqDataSource.OnUnload e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект <see cref="T:System.EventArgs" />, содержащий данные о событии.</param>
        <summary>Создает событие <see cref="E:System.Web.UI.Control.Unload" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.Control.OnUnload(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OrderBy">
      <MemberSignature Language="C#" Value="public string OrderBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OrderBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.OrderBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, определяющее поля, используемые для сортировки полученных данных.</summary>
        <value>Строка, используемая для создания предложения ORDER BY.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте свойство <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>, чтобы указать, какие свойства из возвращаемых данных следует использовать для сортировки. Свойство для сортировки данных должно существовать в исходном источнике данных, но не обязательно включать в свойство <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>. Можно добавить пробел и `Ascending`, `ASC`, `Descending`или `DESC` в свойство в строке <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>, чтобы указать способ возврата упорядоченных данных.  
  
 Можно предоставить несколько свойств в свойстве <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>, разделив каждое свойство с помощью запятой. Например, чтобы упорядочить по свойствам с именами `LastName` и `FirstName`, задайте для свойства <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> значение "LastName, FirstName".  
  
> [!NOTE]
>  При использовании элемента управления <xref:System.Web.UI.WebControls.LinqDataSource> с [!INCLUDE[ss2k](~/includes/ss2k-md.md)] или [!INCLUDE[ssEW](~/includes/ssew-md.md)] а свойством <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> — `true`, необходимо указать значение в свойстве <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>. По умолчанию свойство <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> `true`. Если присвоить значение свойству <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>, необходимо также включить все столбцы идентификаторов в список свойств, возвращаемых в запросе.  
  
 Если свойство <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> имеет значение `true`, то элемент управления с привязкой к данным может передать выражение сортировки элементу управления <xref:System.Web.UI.WebControls.LinqDataSource> во время выполнения. Элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> будет применять выражение сортировки из элемента управления с привязкой к данным после того, как он применяет свойство <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>. Таким образом, данные возвращаются в соответствии с выражением сортировки элемента управления с привязкой к данным.  
  
   
  
## Examples  
 В следующем примере данные возвращаются в алфавитном порядке на основе значений в свойстве `Category`.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default4.aspx#4)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default4.aspx#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrderByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает коллекцию параметров, которые используются для создания предложения Order By.</summary>
        <value>Параметры, используемые для создания предложения ORDER BY.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> использует параметры в коллекции <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> для создания предложения ORDER BY во время выполнения. Обычно для свойства <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> устанавливается значение `true` при добавлении параметров в коллекцию <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>. Если свойство <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> имеет значение `true`, каждый параметр в коллекции <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> добавляется в предложение ORDER BY в последовательности, в которой они указаны в коллекции <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>. Если свойство <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> `true`, параметры не должны быть именованы, так как они применяются последовательно и не соответствуют заполнительу.  
  
 Если не нужно задавать значение во время выполнения в предложении ORDER BY, не нужно использовать коллекцию <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>. Можно определить поля, которые будут использоваться для упорядочивания данных в свойстве <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>. Например, чтобы вернуть значения из таблицы базы данных, упорядоченной по `LastName`, задайте для параметра <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> значение LastName без параметров.  
  
 Вы можете задать параметры в коллекции <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> и сопоставить параметры с заполнителями в свойстве <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>, но этот подход имеет ограниченное приложение. При использовании такого подхода параметры в коллекции <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> не могут представлять имя столбца. Можно задать для параметра значение, а затем сравнить это значение со значениями в свойстве. Например, можно упорядочить данные в зависимости от того, меньше ли значение в свойстве значения времени выполнения, представленного параметром.  
  
   
  
## Examples  
 В следующем примере показан элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> со свойством <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>, имеющим значение `true`. Параметр включается в коллекцию <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>, которая упорядочивает данные на основе имени свойства, которое пользователь выбирает из элемента управления <xref:System.Web.UI.WebControls.DropDownList>.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsBy">
      <MemberSignature Language="C#" Value="public string OrderGroupsBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderGroupsBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderGroupsBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderGroupsBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OrderGroupsBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает поля, используемые для сортировки группированных данных.</summary>
        <value>Строка, используемая для создания предложения Order Group By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для указания способа сортировки групп данных используется свойство <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>. Например, можно группировать по свойству `CategoryID`, а затем сортировать каждую группу ИДЕНТИФИКАТОРов категорий по среднему значению свойства `Price`.  
  
 Свойство <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> можно задать только в том случае, если данные сгруппированы. Если задать свойство <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> без задания свойства <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>, то элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> выдаст исключение.  
  
 Свойство, используемое для сортировки данных, должно быть либо свойством, используемым для группирования данных, либо результатом статистической функции для сгруппированных данных. Чтобы указать способ сортировки данных, можно добавить пробел и строку "Ascending", "ASC", "Descending" или "DESC" к имени свойства в строке <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>.  
  
 В свойстве <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> можно указать более одного свойства. Разделите каждое свойство, используя запятую.  
  
   
  
## Examples  
 В следующем примере показано, как группировать данные с помощью двух свойств и как сортировать сгруппированные данные с помощью одного из этих свойств. Данные из таблицы с именем `Products` группируются с помощью свойств с именами `CategoryID` и `Discontinued`. Сгруппированные данные сортируются по свойству `CategoryID`.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default.aspx#1)]  
  
 В следующем примере показано, как группировать данные с помощью свойства и как отсортировать его на основе результатов статистической функции. Данные из `Products` таблицы группируются с помощью свойства `CategoryID`. Он сортируется на основе среднего значения свойства `UnitPrice` в каждой группе.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderGroupsByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderGroupsByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrderGroupsByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает коллекцию параметров, которые используются для создания предложения Order Groups By.</summary>
        <value>Параметры, используемые для создания предложения Order Group By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> использует параметры в коллекции <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> для создания предложения Order Group By во время выполнения.  
  
 Значения добавляются в коллекцию <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> только в том случае, если необходимо задать значения во время выполнения в предложении ORDER Group By. Поля, используемые для упорядочивания данных, можно определить с помощью свойства <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>.  
  
 Можно задать параметры в коллекции <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> и сопоставить параметры с заполнителями в свойстве <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>. Однако при использовании такого подхода параметры в коллекции <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> не могут представлять имя столбца. они должны представлять значения. Можно задать для параметра значение, а затем сравнить это значение со свойством. Например, можно упорядочить данные в зависимости от того, меньше ли значение в свойстве значения времени выполнения, представленного параметром.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ SaveViewState();" />
      <MemberSignature Language="F#" Value="override this.SaveViewState : unit -&gt; obj" Usage="linqDataSource.SaveViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Сохраняет текущее состояние представления элемента управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <returns>Объект, который содержит сохраненное состояние элемента управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)">Обзор серверного веб-элемента управления LinqDataSource</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)">Общие сведения о доступе к данным в ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public string Select { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Select" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Select" />
      <MemberSignature Language="VB.NET" Value="Public Property Select As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Select { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Select : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.Select" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает свойства и рассчитанные значение, которые включаются в извлеченные данные.</summary>
        <value>Строка, которая используется для создания предложения "Select".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если не задать свойство <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>, элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> извлекает все свойства (столбцы данных) из объекта данных. Свойство <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> используется для получения подмножества свойств объекта или для вычисления новых значений при извлечении данных.  
  
 Вы указываете, какие свойства следует извлечь, присвоив свойству <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> имена свойств, которые необходимо включить в возвращаемые данные.  
  
 При извлечении подмножества свойств из объекта данных <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления динамически создает класс, который содержит только свойства, указанные в свойстве <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>. Кроме того, класс создается динамически при вычислении свойств, которые не являются свойствами в объекте данных. В таких случаях объект, возвращенный из запроса, не является экземпляром класса, который указан в свойстве <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>. Вместо этого необходимо использовать метод `new` в свойстве <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>, чтобы указать, что из запроса возвращается новый класс. Например, чтобы вернуть только свойства `FirstName` и `LastName` из объекта, который содержит больше этих свойств, установите для свойства <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> значение `new(FirstName, LastName)`. Элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> динамически создает новый класс, указанный в методе `new`.  
  
 Для назначения псевдонима выбранному значению можно использовать ключевое слово `As`. При назначении псевдонима необходимо включить свойства с псевдонимами в метод `new`. Любой элемент управления с привязкой к данным, привязанный к результатам из элемента управления <xref:System.Web.UI.WebControls.LinqDataSource>, должен ссылаться на свойство по псевдониму. Например, если задать для свойства <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> значение `new(Region As SalesRegion, Revenue / 1000 As RevenueThousands)`, элемент управления с привязкой к данным сможет получить доступ к двум свойствам, `SalesRegion` и `RevenueThousands`.  
  
 Используйте функцию `new` в свойстве <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> в соответствии с условиями, перечисленными в следующей таблице.  
  
|Выбрать|Использование New|Пример|  
|------------|----------------|-------------|  
|Одно свойство.|`new` не требуется.|`Select="Category"`|  
|Несколько свойств.|требуется `new`.|`Select="new(Category, Name)"`|  
|Одно или несколько свойств, имеющих псевдоним.|требуется `new`.|`Select="new(Category As CategoryGroup)"`|  
  
 Если вы хотите включить автоматическое изменение данных, но не хотите выводить все свойства из объекта данных, не устанавливайте свойство <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>. Вместо этого следует управлять отображением с помощью элемента управления с привязкой к данным. При использовании элемента управления <xref:System.Web.UI.WebControls.DetailsView> или <xref:System.Web.UI.WebControls.GridView> необходимо также задать для свойства <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> или <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> значение `false`. Все значения, не отображаемые в элементе управления с привязкой к данным, сохраняются в состоянии представления. При выполнении обновления данных они передаются в источник данных без изменений.  
  
 При группировании данных в запросе можно включить статистические методы в свойство <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>. Можно использовать следующие статистические методы:  
  
-   `Count()`  
  
-   `)` `Average(` *столбца*  
  
-   `)` `Sum(` *столбца*  
  
-   `)` `Max(` *столбца*  
  
-   `)` `Min(` *столбца*  
  
-   *условие* `Where(` `)`  
  
-   `Any()`  
  
-   *условие* `All(` `)`  
  
 Дополнительные сведения см. в статьях [Общие сведения о серверном веб-элементе управления LinqDataSource](https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)) и [инструкции по группированию и статистической обработке данных с помощью элемента управления LinqDataSource](https://docs.microsoft.com/previous-versions/aspnet/bb470251(v=vs.100)).  
  
 При группировании данных можно включать `Key` и `It`, которые динамически создаются свойствами в свойстве <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>. Свойство `Key` ссылается на значения в свойстве или свойствах, которые использовались для группирования данных. Например, при группировании по свойству с именем `Category`свойство `Key` будет содержать каждое уникальное значение в свойстве `Category`. Свойство `It` ссылается на коллекцию отдельных записей в группировании данных. Можно выполнить итерацию по свойству `It`, чтобы получить отдельные записи, Объединенные в операцию группирования. Например, при группировании по свойству с именем `Category`свойство `It` содержит все отдельные записи, имеющие общее значение в свойстве `Category`.  
  
 При включении ключевого слова `It` в свойство <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> при группировании данных необходимо назначить псевдоним ключевому слову `It`. Элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> выдаст исключение, если `It` не имеет псевдонима. Можно назначить псевдоним ключевому слову `Key`, но это не является обязательным.  
  
   
  
## Examples  
 В следующем примере показано, как задать для свойства <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> подмножество свойств в объекте данных.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default10.aspx#10)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default10.aspx#10)]  
  
 В следующем примере показано, как получить значения в свойстве, которое было использовано для группирования данных, и получить среднее для сгруппированных записей. Ключевое слово `Key` содержит свойство, которое было использовано для группирования данных. В этом примере `Key` будут содержать общие значения из свойства `ProductCategory`.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Selected;" />
      <MemberSignature Language="F#" Value="member this.Selected : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Selected : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при завершении операции извлечения данных.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обработайте событие <xref:System.Web.UI.WebControls.LinqDataSource.Selected>, чтобы перехватить все исключения из операции получения данных или проверить объект данных после завершения операции извлечения. Объект доступен из объекта <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>, который передается в обработчики событий.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As EventHandler(Of LinqDataSourceSelectEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceSelectEventArgs ^&gt; ^ Selecting;" />
      <MemberSignature Language="F#" Value="member this.Selecting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; " Usage="member this.Selecting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит перед операцией извлечения данных.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обработайте событие <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>, чтобы выполнить следующие задачи:  
  
-   Изменение параметров для получения данных.  
  
-   Создание запроса программным способом.  
  
-   Измените значения параметров сортировки или разбиения на страницы.  
  
-   Выполнить пользовательскую сортировку или разбиение по страницам.  
  
-   Отмените операцию получения данных.  
  
 Объект <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>, который передается обработчикам событий для этого события, содержит параметры операции получения данных. Можно изменить параметры в обработчике <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> событий перед выполнением запроса или создать новый результирующий набор и присвоить его свойству <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>.  
  
 Возможность реализовать пользовательскую сортировку или разбиение по страницам в обработчиках для этого события может быть ограничена элементом управления, привязанным к <xref:System.Web.UI.WebControls.LinqDataSource>. Например, при щелчке заголовка столбца элемента управления <xref:System.Web.UI.WebControls.GridView> элемент управления выполняет автоматическую сортировку, которая может переопределять любой порядок, установленный в обработчике событий.  
  
 Если в обработчике событий для события <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> возникает исключение, необходимо выполнить обработку исключения в этом обработчике событий. Исключение не будет передано обработчику событий для события <xref:System.Web.UI.WebControls.LinqDataSource.Selected> (через свойство <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> объекта <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>). Свойство <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> содержит только исключения, вызываемые после события <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>.  
  
   
  
## Examples  
 В следующем примере показан обработчик событий для события <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>. Обработчик создает запрос, извлекающий значения из массива строковых значений на веб-странице.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 В следующем примере показано, как присвоить свойство <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> объекту, возвращаемому методом, который представляет хранимую процедуру.  
  
```vb  
Protected Sub LinqDataSource_Selecting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceSelectEventArgs)  
    Dim exampleContext As ExampleDataContext = New ExampleDataContext()  
    e.Result = exampleContext.GetRegisteredCustomers()  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Selecting(object sender,   
        LinqDataSourceSelectEventArgs e)  
{  
    ExampleDataContext exampleContext = new ExampleDataContext();  
    e.Result = exampleContext.GetRegisteredCustomers();  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.SelectParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает коллекцию параметров, которые используются во время операции извлечения данных.</summary>
        <value>Параметры, которые используются для создания предложения Select.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> использует параметры в коллекции <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> для создания предложения SELECT во время выполнения. Вы добавляете параметры в коллекцию <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A>, если хотите использовать значения времени выполнения в предложении SELECT. Например, можно добавить параметр в коллекцию <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A>, чтобы представить свойство в профиле пользователя. Затем можно использовать это свойство и значение из источника данных для вычисления нового значения.  
  
 Если не нужно задавать значение во время выполнения в предложении SELECT, не нужно использовать коллекцию <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A>. Свойства, которые необходимо получить, можно определить в свойстве <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>. Например, чтобы вернуть значения `FirstName` и `LastName` из таблицы базы данных, задайте для <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> значение "FirstName, LastName" без параметров.  
  
 Чтобы задать значения в коллекции <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A>, необходимо добавить заполнитель в свойство <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> для именованного параметра. В предложении SELECT перед именем каждого параметра добавьте символ @.  
  
 Нельзя использовать параметр в коллекции <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> для представления имени свойства. Чтобы динамически присвоить свойству <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> имя свойства, создайте обработчик события <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> и при необходимости настройте свойство <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>.  
  
   
  
## Examples  
 В следующем примере показано, как использовать предоставляемое пользователем значение для вычисления значения в возвращаемых данных. Пользователь может ввести в текстовое поле значение, представляющее количество производственных дней. Это значение делится на значение из базы данных, представляющее число дней для производства продукта. Возвращаемое значение показывает, сколько продуктов может быть изготовлено в течение указанного числа дней. Входные данные пользователя включаются в команду SELECT через коллекцию <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A>.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreOriginalValuesInViewState">
      <MemberSignature Language="C#" Value="public bool StoreOriginalValuesInViewState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StoreOriginalValuesInViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState" />
      <MemberSignature Language="VB.NET" Value="Public Property StoreOriginalValuesInViewState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool StoreOriginalValuesInViewState { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.StoreOriginalValuesInViewState : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, определяющее необходимость хранения данных из источника данных в состоянии просмотра для гарантии неизменности данных другим процессом перед их обновлением или удалением.</summary>
        <value>Значение <see langword="true" />, если значения сохраняются в состоянии представления; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию, когда операции обновления и удаления включены, элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> сохраняет исходные значения для всех записей в состоянии представления. Элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> сохраняет значения для всех первичных ключей и все свойства, не помеченные `UpdateCheck.Never` в атрибуте `Column`. Свойство `UpdateCheck` атрибута `Column` задается в [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)].  
  
 Прежде чем LINQ to SQL обновляет или удаляет данные, он проверяет значения в состоянии представления на соответствие текущим значениям в источнике данных. Если значения не совпадают, запись источника данных изменилась. В этом случае LINQ to SQL создает исключение и не продолжает выполнение операции обновления или удаления. Дополнительные сведения о LINQ to SQL см. в разделе [LINQ to SQL](https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655).  
  
 Сохранение исходных значений в состоянии просмотра может привести к тому, что размер страницы станет ненужным большим и может представлять конфиденциальные данные пользователю-злоумышленнику. Можно отключить сохранение значений в состоянии представления, задав для свойства <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> значение `false`. В этом случае необходимо предоставить собственный способ убедиться, что данные не изменялись. Если для свойства <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> задано значение `false`, исходные значения не сохраняются в состоянии представления для элемента управления с привязкой к данным. В этом случае LINQ to SQL не может проверить целостность данных. LINQ to SQL выдаст исключение, указывающее на конфликт данных, даже если данные в источнике данных фактически не изменились.  
  
 Если базовый источник данных содержит поле метки времени, которое автоматически обновляется во время обновления, можно сохранить только это значение в состоянии представления. В этом случае свойству timestamp в классе сущности присваивается значение `IsVersion=true`, а всем свойствам присваивается значение `UpdateCheck.Never`. Так как поле метки времени автоматически обновляется базой данных каждый раз, когда данные в этой записи меняются, LINQ to SQL определяет это значение, если данные изменились. Это позволяет уменьшить размер состояния представления, а конфиденциальные данные не предоставляются. LINQ to SQL будет проверять согласованность данных, сравнивая значение метки времени в состоянии представления со значением метки времени в базе данных. Дополнительные сведения см. в разделе [Пошаговое руководство. Использование метки времени с элементом управления LinqDataSource для проверки целостности данных](https://msdn.microsoft.com/library/e7700162-4f05-4130-81f7-3be1361027fa).  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655">LINQ to SQL</related>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.ContextType">
      <MemberSignature Language="C#" Value="Type System.Web.DynamicData.IDynamicDataSource.ContextType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type System.Web.DynamicData.IDynamicDataSource.ContextType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType" />
      <MemberSignature Language="VB.NET" Value=" Property ContextType As Type Implements IDynamicDataSource.ContextType" />
      <MemberSignature Language="C++ CLI" Value="property Type ^ System::Web::DynamicData::IDynamicDataSource::ContextType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Web.DynamicData.IDynamicDataSource.ContextType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.ContextType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Описание этого члена см. в разделе <see cref="T:System.Web.DynamicData.IDynamicDataSource" />.</summary>
        <value>Тип, связанный с данным классом.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет собой явную реализацию члена интерфейса. Он может использоваться, только если экземпляр <xref:System.Web.UI.WebControls.LinqDataSource> приведен к типу интерфейса <xref:System.Web.DynamicData.IDynamicDataSource>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.EntitySetName">
      <MemberSignature Language="C#" Value="string System.Web.DynamicData.IDynamicDataSource.EntitySetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string System.Web.DynamicData.IDynamicDataSource.EntitySetName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName" />
      <MemberSignature Language="VB.NET" Value=" Property EntitySetName As String Implements IDynamicDataSource.EntitySetName" />
      <MemberSignature Language="C++ CLI" Value="property System::String ^ System::Web::DynamicData::IDynamicDataSource::EntitySetName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Web.DynamicData.IDynamicDataSource.EntitySetName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EntitySetName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Описание этого члена см. в разделе <see cref="T:System.Web.DynamicData.IDynamicDataSource" />.</summary>
        <value>Имя сущности.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет собой явную реализацию члена интерфейса. Он может использоваться, только если экземпляр <xref:System.Web.UI.WebControls.LinqDataSource> приведен к типу интерфейса <xref:System.Web.DynamicData.IDynamicDataSource>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.Exception">
      <MemberSignature Language="C#" Value="event EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#Exception" />
      <MemberSignature Language="VB.NET" Value="Custom Event Exception As EventHandler(Of DynamicValidatorEventArgs) Implements System.Web.DynamicData.IDynamicDataSource" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.DynamicData.IDynamicDataSource.Exception</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Описание этого члена см. в разделе <see cref="T:System.Web.DynamicData.IDynamicDataSource" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет собой явную реализацию члена интерфейса. Он может использоваться, только если экземпляр <xref:System.Web.UI.WebControls.LinqDataSource> приведен к типу интерфейса <xref:System.Web.DynamicData.IDynamicDataSource>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TableName">
      <MemberSignature Language="C#" Value="public string TableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TableName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.TableName" />
      <MemberSignature Language="VB.NET" Value="Public Property TableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TableName : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.TableName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает имя свойства или поля в классе контекста данных, представляющем коллекцию данных.</summary>
        <value>Строка, содержащую имя свойства, содержащего коллекцию данных.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Задайте для свойства <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> имя свойства или поля, представляющего данные, которые требуется получить. При соединении с таблицей базы данных имя свойства обычно совпадает с именем таблицы. При подключении к коллекции данных в памяти задайте свойству <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> имя свойства или поля, возвращающего коллекцию данных.  
  
 Можно назначить свойство, возвращающее любой тип, в свойство <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> для операций получения. Если объект, представленный свойством, не реализует <xref:System.Collections.IEnumerable>, элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> автоматически заключает объект в экземпляр объекта <xref:System.Collections.IEnumerable>.  
  
 Чтобы включить автоматическое обновление, вставку или удаление, класс, назначенный свойству <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>, должен быть производным от <xref:System.Data.Linq.DataContext> и свойство, назначенное свойству <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>, должно быть производным от <xref:System.Data.Linq.Table%601>.  
  
 Сведения о том, как выбрать данные из экземпляра класса, см. в описании свойства <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>.  
  
   
  
## Examples  
 В следующем примере показаны два элемента управления <xref:System.Web.UI.WebControls.LinqDataSource>. В одном <xref:System.Web.UI.WebControls.LinqDataSource> элементе управления свойству <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> задается свойство в классе. Это свойство возвращает массив строк. В другом элементе управления <xref:System.Web.UI.WebControls.LinqDataSource> свойству <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> задается свойство, представляющее таблицу базы данных.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 В этом примере не показан класс с именем `ExampleDataContext`, представляющий таблицу базы данных. Чтобы этот пример работал, необходимо создать этот класс, добавив LINQ to SQL класс с именем example. dbml и перетащив таблицу с именем Movie на [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]. Создается класс с именем `ExampleDataContext` со свойством с именем `Movies`.  
  
 В следующем примере показан класс с именем `MovieLibrary`, на который ссылается элемент управления <xref:System.Web.UI.WebControls.LinqDataSource>.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberSignature Language="F#" Value="override this.TrackViewState : unit -&gt; unit" Usage="linqDataSource.TrackViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Отслеживает изменения состояния представления элемента управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> для сохранения их в объекте <see cref="T:System.Web.UI.StateBag" /> этого элемента управления.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)">Обзор серверного веб-элемента управления LinqDataSource</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)">Общие сведения о доступе к данным в ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Collections.IDictionary keys, class System.Collections.IDictionary values, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (keys As IDictionary, values As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ values, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="member this.Update : System.Collections.IDictionary * System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Update (keys, values, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="values" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">Ключевые значения строк для обновляемых записей.</param>
        <param name="values">Значения строк, для обновления в источнике данных.</param>
        <param name="oldValues">Значения строк, которые проверяются на наличие конфликтов данных.</param>
        <summary>Выполняет операцию обновления.</summary>
        <returns>Количество записей, затронутых операцией обновления.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило, нет необходимости вызывать метод <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> из кода. Элемент управления с привязкой к данным будет автоматически вызывать метод <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A>, когда пользователь предпринимает действия для обновления записи. Метод <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> явно вызывается, если требуется создать собственный процесс обновления данных.  
  
   
  
## Examples  
 В следующем примере показано, как программным способом обновить запись в источнике данных после нажатия пользователем кнопки. Код передает объект <xref:System.Collections.Specialized.ListDictionary>, содержащий значение ключа, <xref:System.Collections.Specialized.ListDictionary> объект, содержащий исходные значения, и объект <xref:System.Collections.Specialized.ListDictionary>, который содержит новые значения для метода <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A>.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Update#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx.vb#1)]  
  
 В следующем примере показана разметка для предыдущего примера.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.Update#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.Update#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Updated;" />
      <MemberSignature Language="F#" Value="member this.Updated : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Updated : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при завершении операции обновления.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обработайте событие <xref:System.Web.UI.WebControls.LinqDataSource.Updated>, чтобы перехватить все исключения из операции обновления или проверить значения выходных параметров после завершения операции обновления. Выходные параметры доступны из объекта <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>, который передается в обработчики событий.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UpdateParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.UpdateParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Эта коллекция не используется классом <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <value>Коллекция параметров.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As EventHandler(Of LinqDataSourceUpdateEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceUpdateEventArgs ^&gt; ^ Updating;" />
      <MemberSignature Language="F#" Value="member this.Updating : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; " Usage="member this.Updating : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит перед операцией обновления.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обрабатывайте событие <xref:System.Web.UI.WebControls.LinqDataSource.Updating>, чтобы проверить обновляемый объект, проверить ошибки проверки данных в классе данных, изменить значение перед операцией обновления или отменить операцию обновления. Объект <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>, который передается обработчикам событий, содержит как исходный объект, так и обновленный объект.  
  
 Если во время операции обновления возникает ошибка проверки, то объект <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> содержит исключения проверки, вызываемые классом данных. Ошибка проверки возникает, если обновляемое значение не соответствует типу свойства в классе данных или если не прошел пользовательскую проверку. В обработчике события <xref:System.Web.UI.WebControls.LinqDataSource.Updating> можно получить исключения проверки и предпринять соответствующие действия.  
  
 Если в обработчике событий для события <xref:System.Web.UI.WebControls.LinqDataSource.Updating> возникает исключение, необходимо выполнить обработку исключения в этом обработчике событий. Исключение не будет передано обработчику событий для события <xref:System.Web.UI.WebControls.LinqDataSource.Updated> (через свойство <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> объекта <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>). Свойство <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> содержит только исключения, вызываемые после события <xref:System.Web.UI.WebControls.LinqDataSource.Updating>.  
  
   
  
## Examples  
 В следующем примере показан обработчик событий для события <xref:System.Web.UI.WebControls.LinqDataSource.Updating>. Код сравнивает свойства свойства <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> и свойства <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A>, чтобы определить, изменилось ли значение. Если значение изменилось, то свойству <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> присваивается значение `true`.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 В следующем примере показан обработчик событий для события <xref:System.Web.UI.WebControls.LinqDataSource.Updating>, которое получает исключения проверки.  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 В предыдущем примере извлекаются исключения проверки. Если значение не соответствует типу свойства, может возникнуть исключение. Кроме того, она может быть вызвана из настроенной проверки, как в следующем примере. Метод `OnAgeChanging` проверяет, что число для свойства `Age` не отрицательное.  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Where">
      <MemberSignature Language="C#" Value="public string Where { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Where" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Where" />
      <MemberSignature Language="VB.NET" Value="Public Property Where As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Where { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Where : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.Where" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.Where</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, которое указывает, что условия должны иметь значение true, чтобы запись могла включаться в извлеченные данные.</summary>
        <value>Строка, которая используется для создания предложения Where.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте свойство <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>, чтобы указать условия для записи, возвращаемой запросом. Синтаксис для свойства <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> совпадает с синтаксисом в предложении LINQ WHERE в C#.  
  
 Вы указываете выражение, результатом которого является логическое значение, и если результатом вычисления выражения является `true` для данной строки, строка включается в результирующий набор. Выражения состоят из имен столбцов, операторов сравнения и сравниваемых значений, как показано в следующем примере:  
  
```  
<asp:LinqDataSource ... Where="Price > 50"...>  
```  
  
 Чтобы указать несколько выражений, связанных логическими операторами `AND` или `OR`, используйте `&&` в качестве логического оператора и `||` в качестве логического оператора OR, как показано в следующем примере:  
  
```  
<asp:LinqDataSource ... Where="Price > 50 && Price < 100"...>  
<asp:LinqDataSource ... Where="Price <= 50 || Price >= 100"...>  
```  
  
 Если требуется протестировать свойство по литеральному строковому значению, строковое значение литерала должно быть заключено в двойные кавычки. Чтобы сделать это в разметке, заключите значение предложения <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> в одинарные кавычки, как показано в следующем примере:  
  
```  
<asp:LinqDataSource ... Where='Category = "Sports"' ... >  
```  
  
 Чтобы проверить литеральное строковое значение в коде, используйте escape-символы, соответствующие используемому языку, чтобы вставить двойные кавычки, как показано в следующем примере:  
  
```vb  
LinqDataSource1.Where = "Category = ""Sports"""  
```  
  
```csharp  
LinqDataSource1.Where = "Category = \"Sports\"";  
```  
  
 Если необходимо проверить, является ли строка больше или меньше другой строки, необходимо использовать методы класса <xref:System.String>, а не использовать операторы `<` или `>` между именем столбца и строковым значением. В следующих примерах показано, как выбрать строки со значениями категорий меньше, меньше или равно, больше или больше или равно "Спорт":  
  
```  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") < 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") <= 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") > 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") >= 0' ... >  
```  
  
 Можно также использовать другие методы класса <xref:System.String>, такие как <xref:System.String.StartsWith%2A>, <xref:System.String.EndsWith%2A>и <xref:System.String.Contains%2A>. Дополнительные сведения о сравнении строк см. в разделе [Сравнение строк](~/docs/standard/base-types/comparing.md). Дополнительные сведения о синтаксисе предложения WHERE см. в разделе [ C# операторы](https://msdn.microsoft.com/library/0301e31f-22ad-49af-ac3c-d5eae7f0ac43) и [предложение WHERE](~/docs/csharp/language-reference/keywords/where-clause.md).  
  
 Помимо фильтрации на основе статических значений, которые определяются при создании веб-страницы, можно выполнять фильтрацию на основе динамических значений, вычисляемых во время выполнения. В этом случае в свойство <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> включается именованный параметр, который выступает в качестве заполнителя для значения. Затем добавьте параметр с совпадающим именем в коллекцию <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>.  
  
 Кроме того, можно задать для свойства <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> значение `true` и определить параметры в коллекции <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>. Если свойство <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> `true`, то не нужно включать именованные параметры в свойство <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>. Вместо этого элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> автоматически создает предложение WHERE на основе параметров в свойстве <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>.  
  
 Дополнительные сведения о фильтрации данных см. [в разделе Пошаговое руководство. Выбор и фильтрация подмножества данных с помощью элементов управления LinqDataSource и GridView](https://msdn.microsoft.com/library/c1cca3e8-86e4-4e69-a29f-1c05b91f2205).  
  
   
  
## Examples  
 В следующем примере показано, как фильтровать данные, возвращаемые запросом, на основе статического условия.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 В следующем примере показано, как фильтровать данные на основе значения, предоставленного пользователем во время выполнения. В этом примере на странице отображаются элемент управления <xref:System.Web.UI.WebControls.DropDownList> и <xref:System.Web.UI.WebControls.GridView>. Когда пользователь выбирает одно из значений в элементе управления <xref:System.Web.UI.WebControls.DropDownList>, элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> выбирает из `Products` таблицы только те строки, которые имеют `UserPrice` значения, равные выбранному значению. Затем элемент управления <xref:System.Web.UI.WebControls.GridView> отображает отфильтрованные данные.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WhereParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection WhereParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection WhereParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WhereParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ WhereParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WhereParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.WhereParameters" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.WhereParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает коллекцию параметров, которые используются для создания оператора Where.</summary>
        <value>Коллекцию параметров, которые используются для создания предложения Where в свойстве <see cref="P:System.Web.UI.WebControls.LinqDataSource.Where" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> использует параметры в коллекции <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> для создания предложения WHERE во время выполнения. Параметры добавляются в коллекцию <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>, если необходимо программно задать одно или несколько условий в предложении WHERE. Например, можно выполнить поиск записей в таблице базы данных с фамилией, равным значению элемента управления <xref:System.Web.UI.WebControls.TextBox>. В этом случае вы добавляете параметр в коллекцию <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> для значения текстового поля.  
  
 Если не нужно задавать значение во время выполнения в предложении WHERE, не нужно использовать коллекцию <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>. Можно определить поля для извлечения в свойстве <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>. Например, чтобы вернуть значения из таблицы базы данных, где `LastName` равно "Адамс" в разметке, установите для свойства <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> значение `'LastName = "Adams"'` без каких-либо параметров.  
  
 Чтобы задать значения в коллекции <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>, необходимо назначить имя каждому параметру, а затем добавить заполнитель в свойство <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> для этого параметра. В предложении WHERE перед именем каждого параметра введите символ @.  
  
   
  
## Examples  
 В следующем примере показано, как использовать коллекцию <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> для динамического создания предложения WHERE. Элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> возвращает все записи со значением в столбце `Price`, которое больше значения, выбранного пользователем в элементе управления <xref:System.Web.UI.WebControls.DropDownList>.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
