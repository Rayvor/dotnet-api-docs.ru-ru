<Type Name="CustomValidator" FullName="System.Web.UI.WebControls.CustomValidator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3e3019cacd3e8fbc2a88c59d90da8398cd3a5b23" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69401573" /></Metadata><TypeSignature Language="C#" Value="public class CustomValidator : System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CustomValidator extends System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.CustomValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class CustomValidator&#xA;Inherits BaseValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class CustomValidator : System::Web::UI::WebControls::BaseValidator" />
  <TypeSignature Language="F#" Value="type CustomValidator = class&#xA;    inherit BaseValidator" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.BaseValidator</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("ServerValidate")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Web.UI.ToolboxData("&lt;{0}:CustomValidator runat="server" ErrorMessage="CustomValidator"&gt;&lt;/{0}:CustomValidator&gt;")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.Web.UI.ToolboxData("&lt;{0}:CustomValidator runat=server ErrorMessage="CustomValidator"&gt;&lt;/{0}:CustomValidator&gt;")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Выполняет определяемую пользователем проверку элемента управления вводом.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.CustomValidator> Используйте элемент управления, чтобы предоставить определяемую пользователем функцию проверки для элемента управления вводом. <xref:System.Web.UI.WebControls.CustomValidator> Элемент управления — это отдельный элемент управления от проверяемого элемента управления вводом, который позволяет управлять тем, где отображается сообщение проверки.  
  
 Проверяющие элементы управления всегда выполняют проверку на сервере. У них также есть полная реализация на стороне клиента, позволяющая браузерам с поддержкой скриптов (таким как Microsoft Internet Explorer 4,0 и более поздние версии) выполнять проверку на клиенте. Проверка на стороне клиента улучшает процесс проверки, проверяя ввод пользователя перед его отправкой на сервер. Это позволяет обнаруживать ошибки на клиенте перед отправкой формы, тем самым избегая круговой обработки информации, необходимой для проверки на стороне сервера.  
  
 Чтобы создать функцию проверки на стороне сервера, предоставьте обработчик для <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> события, выполняющего проверку. Для доступа к строке из элемента управления входными данными можно использовать <xref:System.Web.UI.WebControls.ServerValidateEventArgs.Value%2A> свойство <xref:System.Web.UI.WebControls.ServerValidateEventArgs> объекта, переданного в обработчик событий в качестве параметра. Результат проверки сохраняется в <xref:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid%2A> свойстве <xref:System.Web.UI.WebControls.ServerValidateEventArgs> объекта.  
  
 Чтобы создать функцию проверки на стороне клиента, сначала добавьте функцию проверки на стороне сервера, описанную выше. Затем добавьте функцию скрипта проверки на стороне клиента на страницу ASP.NET (. aspx).  
  
 Если используется Visual Basic Scripting Edition (VBScript), функция должна быть в следующей форме:  
  
```  
Sub ValidationFunctionName(source, arguments)  
```  
  
 Если используется JScript, функция должна быть в следующей форме:  
  
```  
function ValidationFunctionName(source, arguments)  
```  
  
 Параметр является ссылкой \<на элемент span >, <xref:System.Web.UI.WebControls.CustomValidator> отображаемый для элемента управления. `source` Это позволяет программным образом управлять \<тегом SPAN >, например <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> изменять атрибут. `arguments` Параметр является объектом с двумя свойствами: Value и IsValid. Этот параметр позволяет получить значение элемента управления для проверки и указать, является ли значение допустимым в зависимости от вашей пользовательской подпрограммы проверки.  
  
 Используйте свойство, чтобы указать имя функции скрипта проверки на стороне клиента, <xref:System.Web.UI.WebControls.CustomValidator> связанной с элементом управления. <xref:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction%2A> Поскольку функция скрипта выполняется на клиенте, функция должна быть на языке, поддерживаемом целевым браузером, например VBScript или JScript.  
  
> [!NOTE]
>  При использовании <xref:System.Web.UI.WebControls.CustomValidator> элемента управления <xref:System.Web.UI.UpdatePanel> внутри элемента управления убедитесь, что проверяющий элемент управления и связанный с ним элемент управления находятся на одной панели. Дополнительные сведения об использовании элемента управления <xref:System.Web.UI.UpdatePanel> для частичного обновления страницы см. в разделе [Общие сведения](https://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49)о частичной отрисовке страниц.  
  
 Как и при проверке на стороне сервера, доступ к строке проверяемого элемента управления входными данными осуществляется <xref:System.Web.UI.WebControls.ServerValidateEventArgs.Value%2A> с помощью свойства `arguments` параметра. Возврат результата проверки путем задания <xref:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid%2A> свойства `arguments` параметра.  
  
> [!CAUTION]
>  При использовании проверяющих элементов управления следует всегда проверять результаты проверки на стороне сервера перед выполнением какой-либо обработки. После выполнения обратной передачи, но до вызова методов событий страница вызывает проверяющие элементы управления и объединяет их результаты в <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> свойство. (Проверяющие элементы управления можно также вызывать явным образом с `Validate` помощью метода.) В своем коде следует проверить, что <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> свойство возвращает `true` , прежде чем обрабатывать входные данные. Несмотря на то, что браузеры с поддержкой скриптов могут препятствовать выполнению обратной передачи на клиенте в случае сбоя проверки, перед обработкой проверенных данных следует всегда проверять <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> код сервера.  
  
 Для проверки различных критериев можно использовать несколько элементов управления проверки с отдельным элементом управления вводом. Например, можно применить несколько проверочных элементов <xref:System.Web.UI.WebControls.TextBox> управления к элементу управления, который позволяет пользователю ввести количество элементов, добавляемых в корзину для покупок. Вы можете использовать <xref:System.Web.UI.WebControls.CustomValidator> элемент управления, чтобы убедиться, что указанное значение меньше суммы в описи <xref:System.Web.UI.WebControls.RequiredFieldValidator> , и элемента управления, чтобы гарантировать, что пользователь <xref:System.Web.UI.WebControls.TextBox> введет значение в элемент управления.  
  
> [!NOTE]
>  Если элемент управления вводом пуст, то не вызываются функции проверки и проверка прошла. <xref:System.Web.UI.WebControls.RequiredFieldValidator> Используйте элемент управления, чтобы требовать от пользователя ввод данных в элемент управления вводом.  
  
 <xref:System.Web.UI.WebControls.CustomValidator> Элемент управления можно использовать без <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> задания свойства. Это обычно делается при проверке нескольких элементов управления вводом или при проверке элементов управления вводом, которые не могут использоваться с элементами управления проверкой, такими как <xref:System.Web.UI.WebControls.CheckBox> элемент управления. В этом случае <xref:System.Web.UI.WebControls.ServerValidateEventArgs.Value%2A> свойство `arguments` параметра, передаваемое обработчику <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> события и функции проверки на стороне клиента, всегда содержит пустую строку (""). Однако эти функции проверки по-прежнему вызываются, если это уместно, чтобы определить допустимость как на сервере, так и на клиенте. Чтобы получить доступ к значению для проверки, необходимо программно ссылаться на элемент управления вводом, который необходимо проверить, а затем извлечь значение из соответствующего свойства. Например, чтобы проверить <xref:System.Web.UI.WebControls.CheckBox> элемент управления на сервере, не <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> задавайте свойство элемента управления проверки и используйте следующий код <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> для обработчика события.  
  
```vb  
Sub ServerValidation (source As object, args As ServerValidateEventArgs)  
    args.IsValid = (CheckBox1.Checked = True)  
 End Sub  
```  
  
```csharp  
void ServerValidation (object source, ServerValidateEventArgs args)  
 {  
    args.IsValid = (CheckBox1.Checked == true);  
 }  
```  
  
 Дополнительные сведения об элементах управления проверки см <xref:System.Web.UI.WebControls.BaseValidator>. в разделе.  
  
## <a name="accessibility"></a>Специальные возможности  
 Сведения о том, как настроить этот элемент управления таким образом, чтобы он создавал разметку, которая соответствует стандартам специальных возможностей, см. [в разделе Специальные возможности в Visual Studio, ASP.NET](https://msdn.microsoft.com/library/7e3ce9c4-6b7d-4fb1-94b5-72cf2a44fe13) и [ASP.NET и специальные возможности](https://msdn.microsoft.com/library/847a37e3-ce20-41da-b0d3-7dfb0fdae9a0).  
  
   
  
## Examples  
 В следующем примере кода показано, как создать элемент управления на стороне <xref:System.Web.UI.WebControls.CustomValidator> сервера.  
  
> [!IMPORTANT]
>  В этом примере имеется текстовое поле, принимающее вводимые пользователем данные, что является потенциальной угрозой безопасности. По умолчанию данные, вводимые пользователем на веб-страницах ASP.NET, проверяются на наличие скриптов и HTML-элементов. Дополнительные сведения см. в разделе [Общие сведения об использовании сценариев](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomValidatorServerValidate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorServerValidate/CS/customvalidatorservervalidatecs.aspx#1)]
 [!code-aspx-vb[CustomValidatorServerValidate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorServerValidate/VB/customvalidatorservervalidatevb.aspx#1)]  
  
 В следующем примере кода показано, как создать элемент управления на стороне <xref:System.Web.UI.WebControls.CustomValidator> клиента.  
  
 [!code-aspx-csharp[CustomValidatorClient#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorClient/CS/customvalidatorclientcs.aspx#1)]
 [!code-aspx-vb[CustomValidatorClient#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorClient/VB/customvalidatorclientvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
    <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
    <altmember cref="P:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction" />
    <altmember cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
    <altmember cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
    <altmember cref="T:System.Web.UI.WebControls.ServerValidateEventArgs" />
    <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.Value" />
    <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CustomValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CustomValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.UI.WebControls.CustomValidator" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
        <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
        <altmember cref="P:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction" />
        <altmember cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
        <altmember cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
        <altmember cref="T:System.Web.UI.WebControls.ServerValidateEventArgs" />
        <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.Value" />
        <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid" />
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddAttributesToRender (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddAttributesToRender(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.AddAttributesToRender : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="customValidator.AddAttributesToRender writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Объект <see cref="T:System.Web.UI.HtmlTextWriter" />, содержащий поток вывода для отрисовки на стороне клиента.</param>
        <summary>Добавляет свойства элемента управления <see cref="T:System.Web.UI.WebControls.CustomValidator" /> в выходной поток для отрисовки на стороне клиента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода показано <xref:System.Web.UI.WebControls.CustomValidator.AddAttributesToRender%2A> <xref:System.Web.UI.WebControls.CustomValidator> , как переопределить метод в пользовательском серверном элементе управления таким образом, чтобы сообщение об ошибке всегда выделено жирным шрифтом.  
  
> [!IMPORTANT]
>  В этом примере имеется текстовое поле, принимающее вводимые пользователем данные, что является потенциальной угрозой безопасности. По умолчанию данные, вводимые пользователем на веб-страницах ASP.NET, проверяются на наличие скриптов и HTML-элементов. Дополнительные сведения см. в разделе [Общие сведения об использовании сценариев](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomCustomValidatorAddAttributesToRender#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/CS/custom_customvalidator_addattributestorendercs.aspx#1)]
 [!code-aspx-vb[CustomCustomValidatorAddAttributesToRender#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/VB/custom_customvalidator_addattributestorendervb.aspx#1)]  
[!code-csharp[CustomCustomValidatorAddAttributesToRender#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/CS/custom_customvalidator_addattributestorender.cs#2)]
[!code-vb[CustomCustomValidatorAddAttributesToRender#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/VB/custom_customvalidator_addattributestorender.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientValidationFunction">
      <MemberSignature Language="C#" Value="public string ClientValidationFunction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClientValidationFunction" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction" />
      <MemberSignature Language="VB.NET" Value="Public Property ClientValidationFunction As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ClientValidationFunction { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ClientValidationFunction : string with get, set" Usage="System.Web.UI.WebControls.CustomValidator.ClientValidationFunction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает имя пользовательской функции скрипта на стороне клиента, используемой для проверки.</summary>
        <value>Имя пользовательской функции скрипта на стороне клиента, используемой для проверки. Значение по умолчанию равно <see cref="F:System.String.Empty" /> и показывает, что значение свойства не задано.  
  
 <block subset="none" type="note"><para>  
 Имя функции не должно включать скобки или параметры.  
  
</para></block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Присвойте этому свойству имя функции, выполняющей проверку на стороне клиента.  
  
 Поскольку функция проверки клиента выполняется в целевом браузере, функция должна быть написана с помощью языка сценариев, поддерживаемого браузером, например JScript или VBScript.  
  
 Значение для данного свойства нельзя задать с помощью тем или тем таблиц стилей. Дополнительные сведения см <xref:System.Web.UI.ThemeableAttribute> . в статьях и [ASP.NET Themes и обложки](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать <xref:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction%2A> свойство для указания имени функции, выполняющей проверку на стороне клиента. Функция проверки проверяет наличие даже чисел. Описание параметров функции см <xref:System.Web.UI.WebControls.CustomValidator>. в подразделе "Примечания" раздела.  
  
> [!IMPORTANT]
>  В этом примере имеется текстовое поле, принимающее вводимые пользователем данные, что является потенциальной угрозой безопасности. По умолчанию данные, вводимые пользователем на веб-страницах ASP.NET, проверяются на наличие скриптов и HTML-элементов. Дополнительные сведения см. в разделе [Общие сведения об использовании сценариев](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomValidatorClient#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorClient/CS/customvalidatorclientcs.aspx#1)]
 [!code-aspx-vb[CustomValidatorClient#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorClient/VB/customvalidatorclientvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.String.Empty" />
      </Docs>
    </Member>
    <Member MemberName="ControlPropertiesValid">
      <MemberSignature Language="C#" Value="protected override bool ControlPropertiesValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ControlPropertiesValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.ControlPropertiesValid" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ControlPropertiesValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ControlPropertiesValid();" />
      <MemberSignature Language="F#" Value="override this.ControlPropertiesValid : unit -&gt; bool" Usage="customValidator.ControlPropertiesValid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Проверяет свойства элемента управления на допустимость значений.</summary>
        <returns>Значение <see langword="true" />, если свойства элемента управления являются допустимыми. В противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода показано, как переопределить <xref:System.Web.UI.WebControls.CustomValidator.ControlPropertiesValid%2A> метод в пользовательском серверном элементе управления таким образом, чтобы он всегда возвращал значение видимого свойства, <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> пока свойство <xref:System.Web.UI.WebControls.CustomValidator> элемента управления находится на странице и содержит свойства проверки.  
  
 [!code-aspx-csharp[CustomCustomValidatorControlPropertiesValid#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/CS/custom_customvalidator_controlpropertiesvalidcs.aspx#1)]
 [!code-aspx-vb[CustomCustomValidatorControlPropertiesValid#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/VB/custom_customvalidator_controlpropertiesvalidvb.aspx#1)]  
[!code-csharp[CustomCustomValidatorControlPropertiesValid#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/CS/custom_customvalidator_controlpropertiesvalid.cs#2)]
[!code-vb[CustomCustomValidatorControlPropertiesValid#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/VB/custom_customvalidator_controlpropertiesvalid.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EvaluateIsValid">
      <MemberSignature Language="C#" Value="protected override bool EvaluateIsValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool EvaluateIsValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.EvaluateIsValid" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EvaluateIsValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool EvaluateIsValid();" />
      <MemberSignature Language="F#" Value="override this.EvaluateIsValid : unit -&gt; bool" Usage="customValidator.EvaluateIsValid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Переопределяет метод <see cref="M:System.Web.UI.MobileControls.BaseValidator.EvaluateIsValid" />.</summary>
        <returns><see langword="true" />, если значение во входном элементе управления является допустимым; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода показано, как переопределить <xref:System.Web.UI.WebControls.CustomValidator.EvaluateIsValid%2A> метод в пользовательском серверном элементе управления.  
  
> [!IMPORTANT]
>  В этом примере имеется текстовое поле, принимающее вводимые пользователем данные, что является потенциальной угрозой безопасности. По умолчанию данные, вводимые пользователем на веб-страницах ASP.NET, проверяются на наличие скриптов и HTML-элементов. Дополнительные сведения см. в разделе [Общие сведения об использовании сценариев](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomCustomValidatorEvaluateIsValid#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/CS/custom_customvalidator_evaluateisvalidcs.aspx#1)]
 [!code-aspx-vb[CustomCustomValidatorEvaluateIsValid#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/VB/custom_customvalidator_evaluateisvalidvb.aspx#1)]  
[!code-csharp[CustomCustomValidatorEvaluateIsValid#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/CS/custom_customvalidator_evaluateisvalid.cs#2)]
[!code-vb[CustomCustomValidatorEvaluateIsValid#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/VB/custom_customvalidator_evaluateisvalid.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnServerValidate">
      <MemberSignature Language="C#" Value="protected virtual bool OnServerValidate (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnServerValidate(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnServerValidate (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnServerValidate(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnServerValidate : string -&gt; bool&#xA;override this.OnServerValidate : string -&gt; bool" Usage="customValidator.OnServerValidate value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Значение для проверки.</param>
        <summary>Создает событие <see cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" /> элемента управления <see cref="T:System.Web.UI.WebControls.CustomValidator" />.</summary>
        <returns>Значение <see langword="true" />, если значение, заданное параметром <paramref name="value" />, проходит проверку; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> Событие возникает при выполнении проверки на сервере.  
  
 При возникновении события через делегат вызывается обработчик события. Дополнительные сведения см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
 Метод <xref:System.Web.UI.WebControls.CustomValidator.OnServerValidate%2A> также позволяет производным классам обрабатывать событие, не присоединяя делегат. Это предпочтительная методика обработки событий в производном классе.  
  
   
  
## Examples  
 В следующем примере кода показано, как задать и закодировать обработчик для элемента управления на стороне <xref:System.Web.UI.WebControls.CustomValidator> сервера.  
  
> [!IMPORTANT]
>  В этом примере имеется текстовое поле, принимающее вводимые пользователем данные, что является потенциальной угрозой безопасности. По умолчанию данные, вводимые пользователем на веб-страницах ASP.NET, проверяются на наличие скриптов и HTML-элементов. Дополнительные сведения см. в разделе [Общие сведения об использовании сценариев](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomValidatorServerValidate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorServerValidate/CS/customvalidatorservervalidatecs.aspx#1)]
 [!code-aspx-vb[CustomValidatorServerValidate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorServerValidate/VB/customvalidatorservervalidatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>При переопределении метода <see cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" /> в производном классе нужно убедиться, что вызывается метод <see cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" /> базового класса, чтобы зарегистрированные делегаты получили событие.</para></block>
        <altmember cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
      </Docs>
    </Member>
    <Member MemberName="ServerValidate">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ServerValidateEventHandler ServerValidate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ServerValidateEventHandler ServerValidate" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ServerValidate As ServerValidateEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ServerValidateEventHandler ^ ServerValidate;" />
      <MemberSignature Language="F#" Value="member this.ServerValidate : System.Web.UI.WebControls.ServerValidateEventHandler " Usage="member this.ServerValidate : System.Web.UI.WebControls.ServerValidateEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ServerValidateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при выполнении проверки на сервере.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> Событие возникает при выполнении проверки на сервере. Это событие используется для предоставления настраиваемой подпрограммы проверки для элемента управления вводом, например <xref:System.Web.UI.WebControls.TextBox> элемента управления.  
  
 Дополнительные сведения об обработке событий см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 В следующем примере кода показано, как задать и закодировать обработчик для элемента управления на стороне <xref:System.Web.UI.WebControls.CustomValidator> сервера. Он создает пользовательскую подпрограммы проверки, проверяет значение <xref:System.Web.UI.WebControls.TextBox> элемента управления на четное число, а затем отображает результат проверки.  
  
> [!IMPORTANT]
>  В этом примере имеется текстовое поле, принимающее вводимые пользователем данные, что является потенциальной угрозой безопасности. По умолчанию данные, вводимые пользователем на веб-страницах ASP.NET, проверяются на наличие скриптов и HTML-элементов. Дополнительные сведения см. в разделе [Общие сведения об использовании сценариев](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomValidatorServerValidate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorServerValidate/CS/customvalidatorservervalidatecs.aspx#1)]
 [!code-aspx-vb[CustomValidatorServerValidate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorServerValidate/VB/customvalidatorservervalidatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
        <altmember cref="T:System.Web.UI.WebControls.ServerValidateEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="ValidateEmptyText">
      <MemberSignature Language="C#" Value="public bool ValidateEmptyText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidateEmptyText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.CustomValidator.ValidateEmptyText" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidateEmptyText As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidateEmptyText { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidateEmptyText : bool with get, set" Usage="System.Web.UI.WebControls.CustomValidator.ValidateEmptyText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение Boolean, указывающее, следует ли проверять пустой текст.</summary>
        <value><see langword="true" />, если пустой текст следует проверять; в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждый проверяющий элемент может быть связан с целевым элементом управления. В предыдущих версиях .NET Framework, если целевой элемент управления имел пустое строковое значение, например <xref:System.Web.UI.WebControls.TextBox.Text%2A> свойство со <xref:System.String.Empty?displayProperty=nameWithType>значением, то <xref:System.Web.UI.WebControls.RequiredFieldValidator> проверяющий элемент управления (за исключением проверяющего) не будет оценивать целевое управление и будет просто возвращать пройденную проверку.  
  
 <xref:System.Web.UI.WebControls.CustomValidator.ValidateEmptyText%2A> Свойство является новым для .NET Framework версии 2,0.  Если <xref:System.Web.UI.WebControls.CustomValidator.ValidateEmptyText%2A> <xref:System.Web.UI.WebControls.CustomValidator> для `true`параметра задано значение, то проверяющий элемент управления вычисляет значения этого элемента (используя заданные в элементе управления условия) и возвращает результаты проверки. Это свойство позволяет разработчикам оценивать результаты <xref:System.Web.UI.WebControls.CustomValidator> элемента управления независимо от значения целевого элемента управления.  
  
 Значение для данного свойства нельзя задать с помощью тем или тем таблиц стилей. Дополнительные сведения см <xref:System.Web.UI.ThemeableAttribute> . в статьях и [ASP.NET Themes и обложки](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
        <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
      </Docs>
    </Member>
  </Members>
</Type>
