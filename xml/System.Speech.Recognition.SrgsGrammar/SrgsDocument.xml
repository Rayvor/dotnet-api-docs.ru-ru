<Type Name="SrgsDocument" FullName="System.Speech.Recognition.SrgsGrammar.SrgsDocument">
  <Metadata><Meta Name="ms.openlocfilehash" Value="88552cf1d889d4c92ddd1242cd0aa6bbd9d383f0" /><Meta Name="ms.sourcegitcommit" Value="75eca440f8f4d595506405f48961f38649e160d7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="06/01/2019" /><Meta Name="ms.locfileid" Value="66457839" /></Metadata><TypeSignature Language="C#" Value="public class SrgsDocument" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SrgsDocument extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
  <TypeSignature Language="VB.NET" Value="Public Class SrgsDocument" />
  <TypeSignature Language="C++ CLI" Value="public ref class SrgsDocument" />
  <TypeSignature Language="F#" Value="type SrgsDocument = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Определяет объект времени разработки, используемый для построения строго типизированных грамматик, соответствующих <see href="https://www.w3.org/TR/speech-grammar/">cпецификации грамматики распознавания речи (SRGS) версии 1.0</see>.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вы можете создать пустой <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> экземпляра и построения грамматику путем добавления экземпляров классов, представляющих элементы SRGS, такие как <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf>,<xref:System.Speech.Recognition.SrgsGrammar.SrgsItem>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag>, и <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken>. Можно также создать <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> экземпляр из существующего файла грамматику SRGS-совместимый XML, из экземпляра <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>, или из экземпляра <xref:System.Speech.Recognition.GrammarBuilder>.  
  
 После <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> объект создан, его можно загрузить в <xref:System.Speech.Recognition.Grammar> объекта или скомпилированы с <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler>, что позволяет ему быть прочитан <xref:System.Speech.Recognition.Grammar> объекта.  
  
 См. в разделе [создание грамматики с помощью SrgsGrammar](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361680(v%3doffice.14)) в [системы распознавания речи руководство по программированию для платформы .NET Framework](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361625(v%3doffice.14)) Дополнительные сведения и примеры.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361680(v%3doffice.14)">Создавать грамматики, с помощью SrgsGrammar</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Использование конструкторов для <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> класса, можно создать экземпляр <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> из <xref:System.Speech.Recognition.GrammarBuilder>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>, или <xref:System.Xml.XmlReader> объекта из строки, которая содержит путь к грамматики в формате XML, вы также можете запустить экземпляр пустым из <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор создает пустой <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> экземпляра. Для создания грамматики в пустой <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> экземпляра, добавьте экземпляры классов, представляющих элементы SRGS, такие как <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf>, и <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem>.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> объекта, а затем создает открытое правило с именем `winnerRule`. Затем он создает <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> , включает строку «страны, который выиграл мира по футболу —:» и добавляет этот элемент, чтобы <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> свойства правила. Затем в примере создается еще два правила (`ruleEurope` и `ruleSAmerica`), каждая из которых — <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> , содержащий три <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> объектов. После этого другой <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> создается объект, содержащий <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef> объектов, которые ссылаются `ruleEurope` и `ruleSAmerica`. Новый <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> объект добавляется в <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> свойство `winnerRule`. После этого все три правила (`winnerRule`, `ruleEurope`, и `ruleSAmerica`) добавляются к <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules%2A> свойство <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>. Наконец три правила компилируются в двоичное представление грамматики.  
  
```csharp  
public void WorldSoccerWinners ()  
{  
  
  // Create an SrgsDocument, create a new rule  
  // and set its scope to public.  
  SrgsDocument document = new SrgsDocument();  
  SrgsRule winnerRule = new SrgsRule("WorldCupWinner");  
  winnerRule.Scope = SrgsRuleScope.Public;  
  
  // Add the introduction.  
  winnerRule.Elements.Add(new SrgsItem("A nation that has won the World Cup is: "));  
  
  // Create the rule for the European nations.  
  SrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem("England"),   
    new SrgsItem("France"), new SrgsItem("Germany"), new SrgsItem("Italy")});  
  SrgsRule ruleEurope = (new SrgsRule("EuropeanNations", new SrgsElement[] {oneOfEurope}));  
  
  // Create the rule for the South American nations.  
  SrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem("Argentina"),   
    new SrgsItem("Brazil"), new SrgsItem("Uruguay")});  
  SrgsRule ruleSAmerica = (new SrgsRule("SouthAmericanNations", new SrgsElement[] {oneOfSAmerica}));  
  
  // Add references to winnerRule for ruleEurope and ruleSAmerica.  
  winnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem   
    (new SrgsRuleRef(ruleEurope))), new SrgsItem(new SrgsRuleRef(ruleSAmerica))}));  
  
  // Add all the rules to the document and make winnerRule   
  // the root rule of the document.  
  document.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  
  document.Root = winnerRule;  
  
  String fileName = Path.GetTempFileName();  
  using (FileStream stream = new FileStream(fileName, FileMode.Create))   
  {   
  
    // Compile the grammar to a binary format.  
    SrgsGrammarCompiler.Compile(document, stream);   
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument (System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument(System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsDocument : System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.SrgsGrammar.SrgsDocument" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsDocument builder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder">Объект <see cref="T:System.Speech.Recognition.GrammarBuilder" />, используемый для создания экземпляра <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> из объекта <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере создается грамматику <xref:System.Speech.Recognition.GrammarBuilder> экземпляра с помощью <xref:System.Speech.Recognition.Choices> объектов. Затем он создает <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> из <xref:System.Speech.Recognition.GrammarBuilder> объекта.  
  
```csharp  
GrammarBuilder builder = null;  
  
// Create new Choices objects and add countries, and create GrammarBuilder objects.  
Choices choicesEurope = new Choices(new string[] { "England", "France", "Germany", "Italy" });  
GrammarBuilder europe = new GrammarBuilder(choicesEurope);  
  
Choices choicesSAmerica = new Choices(new string[] { "Argentina", "Brazil", "Uruguay" });  
GrammarBuilder sAmerica = new GrammarBuilder(choicesSAmerica);  
  
Choices worldCupWinnerChoices = new Choices(new GrammarBuilder[] {choicesEurope, choicesSAmerica});  
  
// Create new GrammarBuilder from a Choices object.  
builder = new GrammarBuilder(worldCupWinnerChoices);  
  
// Create an SrgsDocument object from a GrammarBuilder object.  
SrgsDocument document = new SrgsDocument(builder);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="builder" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument (System.Speech.Recognition.SrgsGrammar.SrgsRule grammarRootRule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsRule grammarRootRule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (grammarRootRule As SrgsRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument(System::Speech::Recognition::SrgsGrammar::SrgsRule ^ grammarRootRule);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsDocument : System.Speech.Recognition.SrgsGrammar.SrgsRule -&gt; System.Speech.Recognition.SrgsGrammar.SrgsDocument" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsDocument grammarRootRule" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="grammarRootRule" Type="System.Speech.Recognition.SrgsGrammar.SrgsRule" />
      </Parameters>
      <Docs>
        <param name="grammarRootRule"><see langword="root rule" /> в объекте <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> и задает объект <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRule" />, который должен функционировать как корневое правило грамматики.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор добавляет указанное правило для <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection> из <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> и устанавливает его как <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root%2A> правило грамматики.  
  
   
  
## Examples  
 В следующем примере создается два правила (`chooseCities` и `destCities`) для выбора назначения и городов рейса. В примере инициализируется <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> экземпляра с помощью `chooseCities` правило в качестве аргумента. Пример записывает содержимое коллекции правил и имя корневого правила в консоль.  
  
```csharp  
// Create a rule that contains a list of destination cities.  
SrgsRule destCities = new SrgsRule("Destination");  
SrgsOneOf toCities = new SrgsOneOf(new string[] { "New York", "Seattle", "Denver" });  
destCities.Add(toCities);  
  
// Create a list of origin cities and supporting phrases.  
SrgsOneOf fromCities = new SrgsOneOf(new SrgsItem[] {   
  new SrgsItem("Dallas"), new SrgsItem("Miami"), new SrgsItem("Chicago") });  
SrgsItem intro = new SrgsItem("I want to fly from");  
SrgsItem to = new SrgsItem("to");  
  
// Create the root rule of the grammar, and assemble the components.  
SrgsRule chooseCities = new SrgsRule("Trip");  
chooseCities.Add(intro);  
chooseCities.Add(fromCities);  
chooseCities.Add(to);  
chooseCities.Add(new SrgsRuleRef(destCities));  
  
// Create the SrgsDocument and specify the root rule to add.  
SrgsDocument bookFlight = new SrgsDocument(chooseCities);  
  
// Add the rule for the destination cities to the document's rule collection.  
bookFlight.Rules.Add(new SrgsRule[] { destCities });  
  
// Display the contents of the Rules collection and the name of the root rule.  
foreach (SrgsRule rule in bookFlight.Rules)  
{  
  Console.WriteLine("Rule " + rule.Id + " is in the rules collection");  
}  
Console.WriteLine("Root Rule " + bookFlight.Root.Id);  
  
// Create a Grammar object and load it to the recognizer.  
Grammar g = new Grammar(bookFlight);  
g.Name = ("City Chooser");  
recognizer.LoadGrammarAsync(g);  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="grammarRootRule" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsDocument : string -&gt; System.Speech.Recognition.SrgsGrammar.SrgsDocument" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsDocument path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Расположение XML-файла SRGS.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />, указывающий местоположение XML-документа, который используется для заполнения экземпляра <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере создается новый <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> в файле с именем «srgsDocumentFile.xml».  
  
```csharp  
string srgsDocumentFile = Path.Combine(Path.GetTempPath(), "srgsDocumentFile.xml");  
SrgsDocument document = null;  
  
if (File.Exists(srgsDocumentFile))  
   document = new SrgsDocument(srgsDocumentFile);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> — <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="path" /> равен пустой строке.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument (System.Xml.XmlReader srgsGrammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlReader srgsGrammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (srgsGrammar As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument(System::Xml::XmlReader ^ srgsGrammar);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsDocument : System.Xml.XmlReader -&gt; System.Speech.Recognition.SrgsGrammar.SrgsDocument" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsGrammar" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="srgsGrammar" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="srgsGrammar">Объект <see cref="T:System.Xml.XmlReader" />, созданный с экземпляром XML <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> из экземпляра <see cref="T:System.Xml.XmlReader" />, который ссылается на файл грамматики XML-формата.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере создается новый экземпляр класса <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> из экземпляра <xref:System.Xml.XmlReader> , ссылающийся на файл «srgsDocumentFile.xml».  
  
```csharp  
string srgsDocumentFile = Path.Combine(Path.GetTempPath(), "srgsDocumentFile.xml");  
SrgsDocument document = null;  
  
if (File.Exists(srgsDocumentFile))  
{  
  XmlReader reader = XmlReader.Create(srgsDocumentFile);  
  document = new SrgsDocument(reader);  
  reader.Close();  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="srgsGrammar" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AssemblyReferences">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;string&gt; AssemblyReferences { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;string&gt; AssemblyReferences" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.AssemblyReferences" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AssemblyReferences As Collection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ AssemblyReferences { System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyReferences : System.Collections.ObjectModel.Collection&lt;string&gt;" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.AssemblyReferences" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает справочные сведения по сборке для экземпляра <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <value>Свойство <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.AssemblyReferences" /> возвращает коллекцию строк, которая содержит ссылки на сборки.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CodeBehind">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;string&gt; CodeBehind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;string&gt; CodeBehind" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.CodeBehind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeBehind As Collection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ CodeBehind { System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeBehind : System.Collections.ObjectModel.Collection&lt;string&gt;" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.CodeBehind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает сведения о фоновом коде для экземпляра <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <value>Свойство <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.CodeBehind" /> возвращает коллекцию строк, содержащую список документов кода программной части.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture" />
      <MemberSignature Language="VB.NET" Value="Public Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Culture : System.Globalization.CultureInfo with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает данные о языке и региональных параметрах для экземпляра <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <value>Объект <see cref="T:System.Globalization.CultureInfo" />, содержащий сведения о текущем языке и региональных параметрах для <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Microsoft Windows и System.Speech API принять все допустимые коды языка страны. Для выполнения распознавания речи с помощью языка, заданного параметром <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture%2A> свойство, в обработчик распознавания речи, который поддерживает, что код страны язык должен быть установлен. Механизмы распознавания речи, поставляемых вместе с Microsoft Windows 7 работать со следующими кодами языка страны.  
  
-   en-GB. Английский (Соединенное Королевство)  
  
-   en US. Русский (Россия)  
  
-   de-DE. Немецкий (Германия)  
  
-   es-ES. Испанский (Испания)  
  
-   fr-FR. Французский (Франция)  
  
-   ja-JP. Японский (Япония)  
  
-   zh-CN. Китайский (Китай)  
  
-   zh-TW. Китайский (Тайвань)  
  
 Коды двухбуквенный языка, например «en», «fr», или «es» разрешено.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойству <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture" /> присваивается значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Свойству <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture" /> присваивается значение <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Debug">
      <MemberSignature Language="C#" Value="public bool Debug { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Debug" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Debug" />
      <MemberSignature Language="VB.NET" Value="Public Property Debug As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Debug { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Debug : bool with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Debug" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее, следует ли добавлять номера строк к встроенным скриптам.</summary>
        <value>Свойство <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Debug" /> возвращает значение <see langword="true" />. если номера строк необходимо добавить в целях отладки; в противном случае свойство возвращает значение <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportNamespaces">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;string&gt; ImportNamespaces { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;string&gt; ImportNamespaces" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.ImportNamespaces" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ImportNamespaces As Collection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ ImportNamespaces { System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ImportNamespaces : System.Collections.ObjectModel.Collection&lt;string&gt;" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.ImportNamespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает связанные пространства имен для текущего экземпляра <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <value><see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.ImportNamespaces" /> Свойство возвращает коллекцию строк, содержащий список связанных пространств имен в <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> экземпляра.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public string Language { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Language" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Language" />
      <MemberSignature Language="VB.NET" Value="Public Property Language As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Language { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Language : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Language" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает язык программирования, используемый для встроенного кода в классе <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <value>Свойство <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Language" /> возвращает язык программирования, который установлен для данного <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Mode" />
      <MemberSignature Language="VB.NET" Value="Public Property Mode As SrgsGrammarMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SrgsGrammar::SrgsGrammarMode Mode { System::Speech::Recognition::SrgsGrammar::SrgsGrammarMode get(); void set(System::Speech::Recognition::SrgsGrammar::SrgsGrammarMode value); };" />
      <MemberSignature Language="F#" Value="member this.Mode : System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает режим для класса <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <value>Режим распознавания <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Mode%2A> Свойство возвращает член <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode> , определяющий тип ввода, <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> ожидает. Двумя возможными значениями являются `Voice` речевого ввода и `Dtmf` для входных данных тонов двухтонального многочастотного (набора DTMF), которые обычно связаны с телефона.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode" />
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает пространство имен класса <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <value>Свойство <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Namespace" /> возвращает пространство имен для текущего <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PhoneticAlphabet">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet PhoneticAlphabet { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet PhoneticAlphabet" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet" />
      <MemberSignature Language="VB.NET" Value="Public Property PhoneticAlphabet As SrgsPhoneticAlphabet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SrgsGrammar::SrgsPhoneticAlphabet PhoneticAlphabet { System::Speech::Recognition::SrgsGrammar::SrgsPhoneticAlphabet get(); void set(System::Speech::Recognition::SrgsGrammar::SrgsPhoneticAlphabet value); };" />
      <MemberSignature Language="F#" Value="member this.PhoneticAlphabet : System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает фонетический алфавит класса <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <value>Возвращает фонетический алфавит, который необходимо использовать для определения пользовательских произношений в объекте <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Фонетические алфавиты включают телефоны, состоящих из букв, цифр и символов, порой в сочетании. Каждый телефона описывает уникальный звука речи. Это отличается от латинского алфавита, для которого любую букву может представлять несколько разговорные звуков. Рассмотрите возможность разных произношений буквы «c» в слова «конфеты» и «прекратить» или другой произношений комбинации буквы «th» в слова «штука» и «запросы».  
  
 В System.Speech можно использовать любой из трех фонетические алфавиты для определения пользовательских произношений: Международный телефонный алфавита (IPA), универсальный набор звуков (UPS) или SAPI телефона набора. Указанный фонетический алфавит определяет, какой набор телефона будет использоваться для определения встроенных произношения <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> объектов. Телефоны, указанный в <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> должно соответствовать фонетического алфавита, указанного в <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet%2A>.  
  
 См. в разделе [словари и фонетические алфавиты](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh378335(v%3doffice.14)) Дополнительные сведения.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Root">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SrgsGrammar.SrgsRule Root { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.SrgsGrammar.SrgsRule Root" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root" />
      <MemberSignature Language="VB.NET" Value="Public Property Root As SrgsRule" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SrgsGrammar::SrgsRule ^ Root { System::Speech::Recognition::SrgsGrammar::SrgsRule ^ get(); void set(System::Speech::Recognition::SrgsGrammar::SrgsRule ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Root : System.Speech.Recognition.SrgsGrammar.SrgsRule with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SrgsGrammar.SrgsRule</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает корневое правило класса <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <value>Возвращает правило, которое обозначается как корневое правило <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> Объект уже должен находиться в документе <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection> прежде, чем он может быть присвоено **корневое правило**.  
  
 Можно также задать корневое правило для <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> объекта с помощью <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> в качестве аргумента <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> конструктор.  
  
   
  
## Examples  
 В следующем примере создается правило с именем `winnerRule`, а затем создает <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> объект с именем `document`. Затем в примере вызывается <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection.Add%2A> метод, чтобы добавить правило к документу. И, наконец, в этом примере документа <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root%2A> свойства `winnerRule`, тем самым делая `root rule` для грамматики, определяется <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> объекта.  
  
```csharp  
SrgsRule winnerRule = new SrgsRule("WorldCupWinner");  
winnerRule.Scope = SrgsRuleScope.Public;  
  
SrgsDocument document = new SrgsDocument();  
  
document.Rules.Add(winnerRule);  
document.Root = winnerRule;   
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRule" />
      </Docs>
    </Member>
    <Member MemberName="Rules">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection Rules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection Rules" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rules As SrgsRulesCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SrgsGrammar::SrgsRulesCollection ^ Rules { System::Speech::Recognition::SrgsGrammar::SrgsRulesCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Rules : System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает коллекцию правил, определенных на данный момент для класса <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <value>Возвращает правила, определенные для объекта <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вы можете добавить <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> объектов <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection> с помощью <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection.Add%2A> метод <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules%2A> свойство. Если инициализировать <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> и укажите <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> в качестве аргумента, <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> автоматически добавляется <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection> для <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>.  
  
   
  
## Examples  
 В следующем примере создается грамматику, которая распознает фразу «страны, который выиграл мира по футболу» следуют страны, который выиграл мира по футболу. В примере создается <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> объекта, а затем создает открытое правило с именем `winnerRule`. После добавления строки к правилу `winnerRule`, в примере создается еще два правила (`ruleEurope` и `ruleSAmerica`), каждая из которых содержит список стран. С помощью <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection.Add%2A> примеры метода добавляются все три правила (`winnerRule`, `ruleEurope`, и `ruleSAmerica`) для <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules%2A> свойство <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>.  
  
```csharp  
public void WorldSoccerWinners ()  
{  
  
  // Create an SrgsDocument, create a new rule  
  // and set its scope to public.  
  SrgsDocument document = new SrgsDocument();  
  SrgsRule winnerRule = new SrgsRule("WorldCupWinner");  
  winnerRule.Scope = SrgsRuleScope.Public;  
  
  // Add the introduction.  
  winnerRule.Elements.Add(new SrgsItem("A nation that has won the World Cup is: "));  
  
  // Create the rule for the European nations.  
  SrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem("England"),   
    new SrgsItem("France"), new SrgsItem("Germany"), new SrgsItem("Italy")});  
  SrgsRule ruleEurope = (new SrgsRule("EuropeanNations", new SrgsElement[] {oneOfEurope}));  
  
  // Create the rule for the South American nations.  
  SrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem("Argentina"),   
    new SrgsItem("Brazil"), new SrgsItem("Uruguay")});  
  SrgsRule ruleSAmerica = (new SrgsRule("SouthAmericanNations", new SrgsElement[] {oneOfSAmerica}));  
  
  // Add references to winnerRule for ruleEurope and ruleSAmerica.  
  winnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem   
    (new SrgsRuleRef(ruleEurope))), new SrgsItem(new SrgsRuleRef(ruleSAmerica))}));  
  
  // Add all the rules to the document and make winnerRule   
  // the root rule of the document.  
  document.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  
  document.Root = winnerRule;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection" />
      </Docs>
    </Member>
    <Member MemberName="Script">
      <MemberSignature Language="C#" Value="public string Script { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Script" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script" />
      <MemberSignature Language="VB.NET" Value="Public Property Script As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Script { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Script : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает скриптовый язык .NET для класса <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <value>Свойство <see langword="Script" /> возвращает текущий язык письменности .NET для класса <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Это свойство использовать не рекомендуется. Больше не рекомендуется его использовать.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Предпринята попытка задать свойству значение <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script" /> значение NULL.</exception>
        <exception cref="T:System.ArgumentException">Выполнена попытка присвоить свойству <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script" /> пустую строку.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteSrgs">
      <MemberSignature Language="C#" Value="public void WriteSrgs (System.Xml.XmlWriter srgsGrammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteSrgs(class System.Xml.XmlWriter srgsGrammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.WriteSrgs(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteSrgs (srgsGrammar As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteSrgs(System::Xml::XmlWriter ^ srgsGrammar);" />
      <MemberSignature Language="F#" Value="member this.WriteSrgs : System.Xml.XmlWriter -&gt; unit" Usage="srgsDocument.WriteSrgs srgsGrammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srgsGrammar" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="srgsGrammar"><see cref="T:System.Xml.XmlWriter" />, используемый для записи экземпляра <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</param>
        <summary>Записывает содержимое объекта <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> в файл грамматики XML-формата, который соответствует [cпецификации грамматики распознавания речи (SRGS) версии 1.0](https://go.microsoft.com/fwlink/?LinkId=201761).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере создается <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> объекта, а затем создает открытое правило с именем `winnerRule`. Затем он создает <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> , включает строку «страны, который выиграл мира по футболу —:» и добавляет этот элемент, чтобы <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> свойства правила. Затем в примере создается еще два правила (`ruleEurope` и `ruleSAmerica`), каждая из которых — <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> , содержащий три <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> объектов. После этого другой <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> создается объект, содержащий <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef> объектов, которые ссылаются `ruleEurope` и `ruleSAmerica`. Новый <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> объект добавляется в <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> свойство `winnerRule`. После этого все три правила (`winnerRule`, `ruleEurope`, и `ruleSAmerica`) добавляются к <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules%2A> свойство <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>. Наконец, в примере создается пустой файл XML и экземпляром <xref:System.Xml.XmlWriter>.  <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.WriteSrgs%2A> Использует метод <xref:System.Xml.XmlWriter> экземпляр для записи содержимого <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> XML-файл.  
  
```csharp  
public void WorldSoccerWinners ()  
{  
  
  // Create an SrgsDocument, create a new rule  
  // and set its scope to public.  
  SrgsDocument document = new SrgsDocument();  
  SrgsRule winnerRule = new SrgsRule("WorldCupWinner");  
  winnerRule.Scope = SrgsRuleScope.Public;  
  
  // Add the introduction.  
  winnerRule.Elements.Add(new SrgsItem("A nation that has won the World Cup is: "));  
  
  // Create the rule for the European nations.  
  SrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem("England"),   
    new SrgsItem("France"), new SrgsItem("Germany"), new SrgsItem("Italy")});  
  SrgsRule ruleEurope = (new SrgsRule("EuropeanNations", new SrgsElement[] {oneOfEurope}));  
  
  // Create the rule for the South American nations.  
  SrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem("Argentina"),   
    new SrgsItem("Brazil"), new SrgsItem("Uruguay")});  
  SrgsRule ruleSAmerica = (new SrgsRule("SouthAmericanNations", new SrgsElement[] {oneOfSAmerica}));  
  
  // Add references to winnerRule for ruleEurope and ruleSAmerica.  
  winnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem   
    (new SrgsRuleRef(ruleEurope))), new SrgsItem(new SrgsRuleRef(ruleSAmerica))}));  
  
  // Add all the rules to the document and make winnerRule   
  // the root rule of the document.  
  document.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  
  document.Root = winnerRule;  
  
  // Create a string object with the path to the file to use.  
  string srgsDocumentFile = Path.Combine(Path.GetTempPath(), "srgsDocumentFile.xml");  
  
  // Create an XmlWriter object and pass the file path.  
  XmlWriter writer = XmlWriter.Create(srgsDocumentFile);  
  
  // Write the contents of the XmlWriter object to an SRGS-compatible XML file.  
  document.WriteSrgs(writer);  
  writer.Close();  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="srgsGrammar" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="XmlBase">
      <MemberSignature Language="C#" Value="public Uri XmlBase { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri XmlBase" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlBase As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ XmlBase { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlBase : Uri with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает базовый универсальный код ресурса (URI) класса <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <value>Текущий базовый универсальный код ресурса (URI) объекта <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase%2A> Получает значение, которое используется для разрешения относительных URI в <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> объекта. Предположим, что значение <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase%2A> — "http://www.contoso.com/" и <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> содержит относительную ссылку правила с другим документом, например `SrgsRuleRef("ExternalGrammar.grxml")`. При этом создается следующий абсолютный путь к документу внешних: `http://www.contoso.com/ExternalGrammar.grxml`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>