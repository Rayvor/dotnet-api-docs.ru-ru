<Type Name="Match" FullName="System.Text.RegularExpressions.Match">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1ae3d1a8366308d45ec74411563c61beaaa5c316" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69144953" /></Metadata><TypeSignature Language="C#" Value="public class Match : System.Text.RegularExpressions.Group" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Match extends System.Text.RegularExpressions.Group" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Match" />
  <TypeSignature Language="VB.NET" Value="Public Class Match&#xA;Inherits Group" />
  <TypeSignature Language="C++ CLI" Value="public ref class Match : System::Text::RegularExpressions::Group" />
  <TypeSignature Language="F#" Value="type Match = class&#xA;    inherit Group" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.RegularExpressions.Group</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Представляет результаты из отдельного совпадения регулярного выражения.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Match> Объект является неизменяемым и не имеет открытого конструктора. Экземпляр <xref:System.Text.RegularExpressions.Match> класса возвращается <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> методом и представляет первое совпадение шаблона в строке. Последующие соответствия представлены <xref:System.Text.RegularExpressions.Match> объектами, возвращаемыми <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> методом. Кроме того, <xref:System.Text.RegularExpressions.MatchCollection> <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> метод возвращает объект, который состоит из нуля, одного или <xref:System.Text.RegularExpressions.Match> нескольких объектов.  
  
 Если метод не соответствует шаблону регулярного выражения во входной строке, он возвращает пустой <xref:System.Text.RegularExpressions.MatchCollection> объект. <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> Затем можно использовать `foreach` конструкцию в C# или `For Each` конструкцию в Visual Basic для прохода по коллекции.  
  
 Если метод не соответствует шаблону регулярного выражения, он <xref:System.Text.RegularExpressions.Match> возвращает <xref:System.Text.RegularExpressions.Match.Empty%2A?displayProperty=nameWithType>объект, равный. <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> Чтобы определить, было <xref:System.Text.RegularExpressions.Group.Success%2A> ли соответствие успешным, можно использовать свойство. Ниже приведен пример.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match1.vb#1)]  
  
 Если сопоставление шаблона выполнено успешно, <xref:System.Text.RegularExpressions.Capture.Value%2A> свойство содержит сопоставленную подстроку <xref:System.Text.RegularExpressions.Capture.Index%2A> , свойство указывает начальную точку сопоставленной подстроки во <xref:System.Text.RegularExpressions.Capture.Length%2A> входной строке с отсчетом от нуля, а свойство указывает Длина сопоставленной подстроки во входной строке.  
  
 Поскольку одно совпадение может затрагивать несколько групп записи, <xref:System.Text.RegularExpressions.Match> <xref:System.Text.RegularExpressions.Match.Groups%2A> имеет свойство, возвращающее <xref:System.Text.RegularExpressions.GroupCollection>. Сам экземпляр эквивалентен первому объекту в коллекции `Match.Groups[0]` (`Match.Groups(0)` в Visual Basic), который представляет все совпадение. <xref:System.Text.RegularExpressions.Match> Получить доступ к захваченным группам можно в соответствии следующими способами.  
  
-   Можно <xref:System.Text.RegularExpressions.GroupCollection> выполнить итерацию элементов объекта с `foreach` помощью конструкции (C#) или `For Each` (Visual Basic).  
  
-   <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29?displayProperty=nameWithType> Свойство можно использовать для получения групп по номеру группы записи. Обратите внимание, что пронумерованные группы, представленные в регулярном выражении, можно определить <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> , вызвав метод экземпляра.  
  
-   <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29?displayProperty=nameWithType> Свойство можно использовать для получения групп по имени захваченной группы. Обратите внимание, что именованные группы можно определить в регулярном выражении, вызвав <xref:System.Text.RegularExpressions.Regex.GetGroupNames?displayProperty=nameWithType> метод экземпляра.  
  
   
  
## Examples  
 В следующих примерах используется регулярное `Console\.Write(Line)?`выражение. Регулярное выражение интерпретируется следующим образом:  
  
|||  
|-|-|  
|Консоль\\. Будет|Совпадение со строкой "Console.Write". Обратите внимание, что символ "." экранирован, так что он интерпретируется как литеральный период, а не как подстановочный знак, совпадающий с любым символом.|  
|(Строка)?|Совпадение с нулевым или единичным вхождением строки "Line".|  
  
 **Пример 1**  
  
 В следующем примере вызывается <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType> метод для получения всех совпадений шаблонов во входной строке. Затем он перебирает <xref:System.Text.RegularExpressions.Match> объекты в возвращенном <xref:System.Text.RegularExpressions.MatchCollection> объекте, чтобы отобразить сведения о каждом совпадении.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match2.vb#2)]  
  
 **Пример 2**  
  
 В следующем примере вызываются <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> методы <xref:System.Text.RegularExpressions.Match.NextMatch%2A> и для получения одного совпадения за раз.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match3.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.MatchCollection" />
    <altmember cref="T:System.Text.RegularExpressions.Regex" />
  </Docs>
  <Members>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.RegularExpressions.Match Empty" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::RegularExpressions::Match ^ Empty { System::Text::RegularExpressions::Match ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает пустую группу. Все неудавшиеся совпадения возвращают это пустое совпадение.</summary>
        <value>Пустое совпадение.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство не следует использовать для определения успешности сопоставления. Вместо этого используйте `Match.Success` свойство (унаследованное от <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType>).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Groups">
      <MemberSignature Language="C#" Value="public virtual System.Text.RegularExpressions.GroupCollection Groups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.GroupCollection Groups" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Groups" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Groups As GroupCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Text::RegularExpressions::GroupCollection ^ Groups { System::Text::RegularExpressions::GroupCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Groups : System.Text.RegularExpressions.GroupCollection" Usage="System.Text.RegularExpressions.Match.Groups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.GroupCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает коллекцию групп, соответствующих регулярному выражению.</summary>
        <value>Группы символов, соответствующие шаблону.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Шаблон регулярного выражения может включать части выражения, которые определяются путем заключения фрагмента шаблона регулярного выражения в круглые скобки. Каждая такая часть выражения образует группу. <xref:System.Text.RegularExpressions.Match.Groups%2A> Свойство предоставляет доступ к сведениям о соответствии этих частей выражения. Например, шаблон `(\d{3})-(\d{3}-\d{4})`регулярного выражения, который соответствует телефонным номерам Северной Америки, содержит две части выражения. Первый состоит из кода города, составляющего первые три цифры телефонного номера. Эта группа фиксируется первой частью регулярного выражения `(\d{3})`. Вторая состоит из номера телефона, который объединяет последние семь цифр телефонного номера. Эта группа фиксируется во второй части регулярного выражения `(\d{3}-\d{4})`. Затем эти две группы можно получить из <xref:System.Text.RegularExpressions.GroupCollection> объекта, возвращаемого <xref:System.Text.RegularExpressions.Match.Groups%2A> свойством, как показано в следующем примере.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/cs/groups1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/vb/groups1.vb#1)]  
  
 Объект, возвращаемый свойством, является объектом коллекции, начинающимся с нуля, который всегда содержит по крайней мере один элемент. <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> <xref:System.Text.RegularExpressions.GroupCollection> Если обработчик регулярных выражений не может найти <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> совпадения в определенной входной строке, свойство одного <xref:System.Text.RegularExpressions.Group> объекта в коллекции (объект с индексом `false` 0) <xref:System.Text.RegularExpressions.Group> имеет значение, а объект <xref:System.Text.RegularExpressions.Capture.Value%2A>свойство имеет значение <xref:System.String.Empty?displayProperty=nameWithType>. Если обработчик регулярных выражений может найти совпадение, первый элемент <xref:System.Text.RegularExpressions.GroupCollection> объекта (элемент с индексом 0), возвращаемый <xref:System.Text.RegularExpressions.Match.Groups%2A> свойством, содержит строку, соответствующую всему шаблону регулярного выражения. Каждый последующий элемент (от одного индекса вверх) представляет захваченную группу, если регулярное выражение включает захваченные группы. Дополнительные сведения см. в подразделе «конструкции группирования и объекты регулярных выражений» статьи [](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md) о конструкциях группирования.  
  
   
  
## Examples  
 В следующем примере предпринимается попытка сопоставить шаблон регулярного выражения с образцом строки. В примере <xref:System.Text.RegularExpressions.Match.Groups%2A> свойство используется для хранения сведений, получаемых с помощью сопоставления для вывода на консоль.  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMatch">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match NextMatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match NextMatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.NextMatch" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMatch () As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ NextMatch();" />
      <MemberSignature Language="F#" Value="member this.NextMatch : unit -&gt; System.Text.RegularExpressions.Match" Usage="match.NextMatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает новый объект <see cref="T:System.Text.RegularExpressions.Match" /> с результатами для следующего сопоставления, начиная с позиции, на которой завершилось последнее сопоставление (с символа после последнего сопоставленного символа).</summary>
        <returns>Следующее сопоставление регулярному выражению.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод аналогичен вызову <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> и передаче (`Index+Length`) в качестве новой начальной позицией.  
  
> [!NOTE]
>  Этот метод не изменяет текущий экземпляр. Вместо этого он возвращает новый <xref:System.Text.RegularExpressions.Match> объект, содержащий сведения о следующем совпадении.  
  
 Попытка получить следующее совпадение может вызвать исключение, <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> если значение времени ожидания для операций сопоставления действует, а попытка найти следующее совпадение превышает этот интервал времени ожидания.  
  
   
  
## Examples  
 В следующем примере <xref:System.Text.RegularExpressions.Match.NextMatch%2A> метод используется для записи совпадений регулярных выражений за пределами первого совпадения.  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Время ожидания истекло.</exception>
        <block subset="none" type="usage"><para>При повторении попытки сопоставления путем вызова <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> метода обработчик регулярных выражений выдает пустое соответствие. Как правило <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> , начинает поиск следующего совпадения в том месте, где осталось предыдущее совпадение. Однако после пустого совпадения <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> метод перемещается на один символ, прежде чем пытаться выполнить следующее совпадение. Такое поведение гарантирует, что обработчик регулярных выражений будет проходить через строку. В противном случае, поскольку пустое соответствие не приводит к перемещению вперед, следующее совпадение будет начинаться точно так же, как и предыдущее совпадение, и при этом одна и та же пустая строка будет сопоставлена повторно.  
  
Ниже приведен пример. Шаблон регулярного выражения <c>а *</c> ищет ноль или более вхождений буквы "a" в строке "абаабб". Как видно из выходных данных в примере, поиск будет искать шесть соответствий. Первая попыток соответствия находит первый "a". Второе совпадение начинается точно там, где заканчивается первое соответствие, перед первым b; Он находит нулевые вхождения "a" и возвращает пустую строку. Третье соответствие не начинается точно там, где заканчивается второе соответствие, поскольку второе совпадение вернуло пустую строку. Вместо этого он начинается с одного символа позже, после первого "b". Третье совпадение находит два вхождения "a" и возвращает "AA". Четвертая попыток соответствия начинается с того места, где заканчивается третье соответствие, перед вторым "b" и возвращает пустую строку. В пятой попытке сопоставления один символ передается, чтобы он начинался перед третьим "b", и возвращает пустую строку. Шестое совпадение начинается после последней "b" и снова возвращает пустую строку.  
  
[!code-csharp[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/cs/nextmatch1.cs#1)] [!code-vb[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/vb/nextmatch1.vb#1)]</para></block>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public virtual string Result (string replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Result(string replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Result(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Result (replacement As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ Result(System::String ^ replacement);" />
      <MemberSignature Language="F#" Value="abstract member Result : string -&gt; string&#xA;override this.Result : string -&gt; string" Usage="match.Result replacement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replacement" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="replacement">Шаблон замены для использования.</param>
        <summary>Возвращает расширение указанного шаблона замены.</summary>
        <returns>Расширенная версия параметра <paramref name="replacement" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В то время как <xref:System.Text.RegularExpressions.Match.Result%2A> методзаменяетвсесовпадениявовходнойстрокезаданнымшаблономзамены,методзаменяетодносоответствиезаданнымшаблономзамены.<xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=nameWithType> Так как он работает с отдельным совпадением, можно также выполнить обработку соответствующей строки перед вызовом <xref:System.Text.RegularExpressions.Match.Result%2A> метода.  
  
 `replacement` Параметр является стандартным шаблоном замены регулярных выражений. Он может состоять из литеральных символов и подстановок регулярных выражений. Для получения дополнительной информации см. [Подстановки](~/docs/standard/base-types/substitutions-in-regular-expressions.md).  
  
   
  
## Examples  
 В следующем примере заменяются дефисы, начинающиеся и заканчивающиеся выражением в скобках.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/cs/result1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/vb/result1.vb#1)]  
  
 Возможные интерпретации шаблона регулярного выражения `--(.+?)--` показаны в следующей таблице.  
  
|Шаблон|Описание|  
|-------------|-----------------|  
|`--`|Совпадение с двумя дефисами.|  
|`(.+?)`|Совпадение с любым символом один или более раз, но как можно меньшее число раз. Это первая группа записи.|  
|`--`|Совпадение с двумя дефисами.|  
  
 Обратите внимание, что шаблон `--(.+?)--` регулярного выражения использует ленивый `+?`квантор. Если вместо этого использовался жадный квантификатор `+` , обработчик регулярных выражений обнаружит только одно совпадение во входной строке.  
  
 Строка `($1)` замены заменяет совпадение первой захваченной группой, заключенной в круглые скобки.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="replacement" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">Расширение для этого шаблона не разрешено.</exception>
        <altmember cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)" />
        <related type="Article" href="https://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e">Подстановки</related>
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Synchronized (System.Text.RegularExpressions.Match inner);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Synchronized(class System.Text.RegularExpressions.Match inner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Synchronized (inner As Match) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Synchronized(System::Text::RegularExpressions::Match ^ inner);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.Text.RegularExpressions.Match -&gt; System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Synchronized inner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inner" Type="System.Text.RegularExpressions.Match" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="inner">Сопоставление регулярному выражению, эквивалентное ожидаемому.</param>
        <summary>Возвращает экземпляр <see cref="T:System.Text.RegularExpressions.Match" />, эквивалентный одному из предоставленных экземпляров, пригодному для совместного использования несколькими потоками.</summary>
        <returns>Сопоставление регулярному выражению, пригодное для разделения между несколькими потоками.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="inner" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
