<Type Name="ECDiffieHellmanOpenSsl" FullName="System.Security.Cryptography.ECDiffieHellmanOpenSsl">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9c3bbfc20b4f492a306a5030dba95f7a8a6daf7e" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75074749" /></Metadata><TypeSignature Language="C#" Value="public sealed class ECDiffieHellmanOpenSsl : System.Security.Cryptography.ECDiffieHellman" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ECDiffieHellmanOpenSsl extends System.Security.Cryptography.ECDiffieHellman" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.ECDiffieHellmanOpenSsl" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ECDiffieHellmanOpenSsl&#xA;Inherits ECDiffieHellman" />
  <TypeSignature Language="C++ CLI" Value="public ref class ECDiffieHellmanOpenSsl sealed : System::Security::Cryptography::ECDiffieHellman" />
  <TypeSignature Language="F#" Value="type ECDiffieHellmanOpenSsl = class&#xA;    inherit ECDiffieHellman" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>4.1.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.ECDiffieHellman</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="ea640-101">Предоставляет реализацию алгоритма эллиптических кривых Диффи-Хелмана (ECDH) на основе OpenSSL.</span><span class="sxs-lookup"><span data-stu-id="ea640-101">Provides an implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm backed by OpenSSL.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="ea640-102">Этот класс следует использовать непосредственно при взаимодействии платформ с библиотекой System OpenSSL.</span><span class="sxs-lookup"><span data-stu-id="ea640-102">This class should only be used directly when doing platform interop with the system OpenSSL library.</span></span> <span data-ttu-id="ea640-103">Если взаимодействие с платформой не требуется, следует использовать <xref:System.Security.Cryptography.ECDiffieHellman.Create%2A?displayProperty=nameWithType> фабричные методы вместо определенной производной реализации.</span><span class="sxs-lookup"><span data-stu-id="ea640-103">When platform interop is not needed, you should use the <xref:System.Security.Cryptography.ECDiffieHellman.Create%2A?displayProperty=nameWithType> factory methods instead of a specific derived implementation.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanOpenSsl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanOpenSsl();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ea640-104">Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.ECDiffieHellmanOpenSsl" /> с кривой по умолчанию NIST P-521/secp521r1.</span><span class="sxs-lookup"><span data-stu-id="ea640-104">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanOpenSsl" /> class with a default curve of NIST P-521/secp521r1.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="ea640-105">Этот конструктор не создает новую пару ключей Public и Private немедленно, он просто устанавливает размер, который будет использоваться для создания ключа, если он необходим.</span><span class="sxs-lookup"><span data-stu-id="ea640-105">This constructor does not generate a new public/private keypair immediately, it just sets the size which will be used to generate a key when one is needed.</span></span>
<span data-ttu-id="ea640-106">Если ключ загружается с помощью метода <xref:System.Security.Cryptography.ECDiffieHellmanOpenSsl.ImportParameters%2A> или другого метода импорта ключа, размер ключа из этого конструктора не имеет смысла.</span><span class="sxs-lookup"><span data-stu-id="ea640-106">If key is loaded via the <xref:System.Security.Cryptography.ECDiffieHellmanOpenSsl.ImportParameters%2A> method, or other key import method, the key size from this constructor has no meaning.</span></span>

 ]]></format>
        </remarks>
        <altmember cref="M:System.Security.Cryptography.ECDiffieHellman.Create" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanOpenSsl (int keySize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 keySize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (keySize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanOpenSsl(int keySize);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.ECDiffieHellmanOpenSsl : int -&gt; System.Security.Cryptography.ECDiffieHellmanOpenSsl" Usage="new System.Security.Cryptography.ECDiffieHellmanOpenSsl keySize" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="keySize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="keySize"><span data-ttu-id="ea640-107">Размер создаваемого ключа, когда он необходим.</span><span class="sxs-lookup"><span data-stu-id="ea640-107">The size of the key to generate, when a key is needed.</span></span></param>
        <summary><span data-ttu-id="ea640-108">Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.ECDiffieHellmanOpenSsl" />, по умолчанию содержащий простую кривую NIST указанного размера.</span><span class="sxs-lookup"><span data-stu-id="ea640-108">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanOpenSsl" /> class defaulting to the NIST prime curve of the specified size.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="ea640-109">Этот конструктор поддерживает только три размера ключей: 256 (NIST P-256/secp256r1), 384 (NIST P-384/secp384r1) и 521 (NIST P-521/secp521r1).</span><span class="sxs-lookup"><span data-stu-id="ea640-109">Only three key sizes are supported by this constructor: 256 (NIST P-256/secp256r1), 384 (NIST P-384/secp384r1), and 521 (NIST P-521/secp521r1).</span></span>
<span data-ttu-id="ea640-110">Чтобы создать ключи для любой другой кривой, используйте конструктор <xref:System.Security.Cryptography.ECDiffieHellmanOpenSsl.%23ctor(System.Security.Cryptography.ECCurve)> или метод <xref:System.Security.Cryptography.ECDiffieHellmanOpenSsl.GenerateKey(System.Security.Cryptography.ECCurve)>.</span><span class="sxs-lookup"><span data-stu-id="ea640-110">To generate keys For any other curve, use the <xref:System.Security.Cryptography.ECDiffieHellmanOpenSsl.%23ctor(System.Security.Cryptography.ECCurve)> constructor or the <xref:System.Security.Cryptography.ECDiffieHellmanOpenSsl.GenerateKey(System.Security.Cryptography.ECCurve)> method.</span></span>

<span data-ttu-id="ea640-111">Этот конструктор не создает новую пару ключей Public и Private немедленно, он просто устанавливает размер, который будет использоваться для создания ключа, если он необходим.</span><span class="sxs-lookup"><span data-stu-id="ea640-111">This constructor does not generate a new public/private keypair immediately, it just sets the size which will be used to generate a key when one is needed.</span></span>
<span data-ttu-id="ea640-112">Если ключ загружается с помощью метода <xref:System.Security.Cryptography.ECDiffieHellmanOpenSsl.ImportParameters%2A> или другого метода импорта ключа, размер ключа из этого конструктора не имеет смысла.</span><span class="sxs-lookup"><span data-stu-id="ea640-112">If key is loaded via the <xref:System.Security.Cryptography.ECDiffieHellmanOpenSsl.ImportParameters%2A> method, or other key import method, the key size from this constructor has no meaning.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ea640-113">Значение <paramref name="keySize" /> не поддерживается этой реализацией.</span><span class="sxs-lookup"><span data-stu-id="ea640-113">The <paramref name="keySize" /> value is not supported by this implementation.</span></span></exception>
        <altmember cref="M:System.Security.Cryptography.ECDiffieHellman.Create" />
        <altmember cref="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.#ctor(System.Security.Cryptography.ECCurve)" />
        <altmember cref="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.GenerateKey(System.Security.Cryptography.ECCurve)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanOpenSsl (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.#ctor(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanOpenSsl(IntPtr handle);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.ECDiffieHellmanOpenSsl : nativeint -&gt; System.Security.Cryptography.ECDiffieHellmanOpenSsl" Usage="new System.Security.Cryptography.ECDiffieHellmanOpenSsl handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="ea640-114">Значение <c>EC_KEY\*</c> OpenSSL, используемое в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="ea640-114">The OpenSSL <c>EC_KEY\*</c> value to use as the key.</span></span></param>
        <summary><span data-ttu-id="ea640-115">Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.ECDiffieHellmanOpenSsl" /> из существующего ключа OpenSSL, представленного в виде <c>EC_KEY\*</c>.</span><span class="sxs-lookup"><span data-stu-id="ea640-115">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanOpenSsl" /> class from an existing OpenSSL key represented as an <c>EC_KEY\*</c>.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

> [!IMPORTANT]
> <span data-ttu-id="ea640-116">OpenSSL поддерживает загрузку нескольких версий библиотек в рамках одного процесса.</span><span class="sxs-lookup"><span data-stu-id="ea640-116">OpenSSL supports multiple library versions being loaded within the same process.</span></span>
> <span data-ttu-id="ea640-117">Перед вызовом этого конструктора убедитесь, что значение указателя получено из той же версии OpenSSL, которую использует этот класс. Дополнительные сведения см. в разделе <xref:System.Security.Cryptography.SafeEvpPKeyHandle.OpenSslVersion>.</span><span class="sxs-lookup"><span data-stu-id="ea640-117">Before calling this constructor verify your pointer value came from the same version of OpenSSL that this class uses, see <xref:System.Security.Cryptography.SafeEvpPKeyHandle.OpenSslVersion> for more information.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea640-118"><paramref name="handle" /> имеет значение <see cref="F:System.IntPtr.Zero" />.</span><span class="sxs-lookup"><span data-stu-id="ea640-118"><paramref name="handle" /> is <see cref="F:System.IntPtr.Zero" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ea640-119"><paramref name="handle" /> не является допустимым значением <c>EC_KEY\*</c>.</span><span class="sxs-lookup"><span data-stu-id="ea640-119"><paramref name="handle" /> is not a valid <c>EC_KEY\*</c>.</span></span></exception>
        <altmember cref="P:System.Security.Cryptography.SafeEvpPKeyHandle.OpenSslVersion" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanOpenSsl (System.Security.Cryptography.ECCurve curve);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Cryptography.ECCurve curve) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.#ctor(System.Security.Cryptography.ECCurve)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (curve As ECCurve)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanOpenSsl(System::Security::Cryptography::ECCurve curve);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.ECDiffieHellmanOpenSsl : System.Security.Cryptography.ECCurve -&gt; System.Security.Cryptography.ECDiffieHellmanOpenSsl" Usage="new System.Security.Cryptography.ECDiffieHellmanOpenSsl curve" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="curve" Type="System.Security.Cryptography.ECCurve" />
      </Parameters>
      <Docs>
        <param name="curve"><span data-ttu-id="ea640-120">Кривая, используемая для создания пары открытого и закрытого эфемерных ключей.</span><span class="sxs-lookup"><span data-stu-id="ea640-120">The curve used to generate an ephemeral public/private key pair.</span></span></param>
        <summary><span data-ttu-id="ea640-121">Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.ECDiffieHellmanOpenSsl" /> и создает ключ на основе указанной кривой.</span><span class="sxs-lookup"><span data-stu-id="ea640-121">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanOpenSsl" /> class and generates a new key on the specified curve.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ea640-122"><paramref name="curve" /> не выполняет проверку.</span><span class="sxs-lookup"><span data-stu-id="ea640-122"><paramref name="curve" /> does not validate.</span></span></exception>
        <altmember cref="M:System.Security.Cryptography.ECCurve.Validate" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanOpenSsl (System.Security.Cryptography.SafeEvpPKeyHandle pkeyHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Cryptography.SafeEvpPKeyHandle pkeyHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.#ctor(System.Security.Cryptography.SafeEvpPKeyHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pkeyHandle As SafeEvpPKeyHandle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanOpenSsl(System::Security::Cryptography::SafeEvpPKeyHandle ^ pkeyHandle);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.ECDiffieHellmanOpenSsl : System.Security.Cryptography.SafeEvpPKeyHandle -&gt; System.Security.Cryptography.ECDiffieHellmanOpenSsl" Usage="new System.Security.Cryptography.ECDiffieHellmanOpenSsl pkeyHandle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pkeyHandle" Type="System.Security.Cryptography.SafeEvpPKeyHandle" />
      </Parameters>
      <Docs>
        <param name="pkeyHandle"><span data-ttu-id="ea640-123">Значение <c>EVP_PKEY\*</c> OpenSSL, используемое в качестве ключа, который представлен в виде <see cref="T:System.Security.Cryptography.SafeEvpPKeyHandle" />.</span><span class="sxs-lookup"><span data-stu-id="ea640-123">The OpenSSL <c>EVP_PKEY\*</c> value to use as the key, represented as a <see cref="T:System.Security.Cryptography.SafeEvpPKeyHandle" />.</span></span></param>
        <summary><span data-ttu-id="ea640-124">Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.ECDiffieHellmanOpenSsl" /> из существующего ключа OpenSSL, представленного в виде <c>EVP_PKEY\*</c>.</span><span class="sxs-lookup"><span data-stu-id="ea640-124">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanOpenSsl" /> class from an existing OpenSSL key represented as an <c>EVP_PKEY\*</c>.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
> [!IMPORTANT]
> <span data-ttu-id="ea640-125">OpenSSL поддерживает загрузку нескольких версий библиотек в рамках одного процесса.</span><span class="sxs-lookup"><span data-stu-id="ea640-125">OpenSSL supports multiple library versions being loaded within the same process.</span></span>
> <span data-ttu-id="ea640-126">Перед вызовом этого конструктора убедитесь, что значение указателя получено из той же версии OpenSSL, которую использует этот класс.</span><span class="sxs-lookup"><span data-stu-id="ea640-126">Before calling this constructor, verify your pointer value came from the same version of OpenSSL that this class uses.</span></span>
> <span data-ttu-id="ea640-127">Для получения дополнительной информации см. <xref:System.Security.Cryptography.SafeEvpPKeyHandle.OpenSslVersion>.</span><span class="sxs-lookup"><span data-stu-id="ea640-127">For more information, see <xref:System.Security.Cryptography.SafeEvpPKeyHandle.OpenSslVersion>.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea640-128"><paramref name="pkeyHandle" /> представляет недопустимый дескриптор.</span><span class="sxs-lookup"><span data-stu-id="ea640-128"><paramref name="pkeyHandle" /> represents an invalid handle.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ea640-129"><paramref name="pkeyHandle" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ea640-129"><paramref name="pkeyHandle" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ea640-130"><paramref name="pkeyHandle" /> не представляет ключ на основе эллиптической кривой.</span><span class="sxs-lookup"><span data-stu-id="ea640-130"><paramref name="pkeyHandle" /> does not represent a elliptic curve (EC) key.</span></span></exception>
        <seealso cref="P:System.Security.Cryptography.SafeEvpPKeyValue.OpenSslVersion" />
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyFromHash">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] secretPrepend, byte[] secretAppend);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyFromHash(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, unsigned int8[] secretPrepend, unsigned int8[] secretAppend) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyFromHash (otherPartyPublicKey As ECDiffieHellmanPublicKey, hashAlgorithm As HashAlgorithmName, secretPrepend As Byte(), secretAppend As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyFromHash(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, cli::array &lt;System::Byte&gt; ^ secretPrepend, cli::array &lt;System::Byte&gt; ^ secretAppend);" />
      <MemberSignature Language="F#" Value="override this.DeriveKeyFromHash : System.Security.Cryptography.ECDiffieHellmanPublicKey * System.Security.Cryptography.HashAlgorithmName * byte[] * byte[] -&gt; byte[]" Usage="eCDiffieHellmanOpenSsl.DeriveKeyFromHash (otherPartyPublicKey, hashAlgorithm, secretPrepend, secretAppend)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="secretPrepend" Type="System.Byte[]" />
        <Parameter Name="secretAppend" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="ea640-131">Открытый ключ другой стороны.</span><span class="sxs-lookup"><span data-stu-id="ea640-131">The other party's public key.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="ea640-132">Хэш-алгоритм, используемый для получения материала ключа.</span><span class="sxs-lookup"><span data-stu-id="ea640-132">The hash algorithm to use to derive the key material.</span></span></param>
        <param name="secretPrepend"><span data-ttu-id="ea640-133">Значение, добавляемое к производному секрету (в начало) перед хэшированием.</span><span class="sxs-lookup"><span data-stu-id="ea640-133">A value to prepend to the derived secret before hashing.</span></span></param>
        <param name="secretAppend"><span data-ttu-id="ea640-134">Значение, добавляемое к производному секрету перед хэшированием.</span><span class="sxs-lookup"><span data-stu-id="ea640-134">A value to append to the derived secret before hashing.</span></span></param>
        <summary><span data-ttu-id="ea640-135">Выполняет формирование ключа с использованием указанного хэш-алгоритма с дополнительными данными, добавленными в начале или конце.</span><span class="sxs-lookup"><span data-stu-id="ea640-135">Performs key derivation using a specified hash algorithm with optional prepended or appended data.</span></span></summary>
        <returns><span data-ttu-id="ea640-136">Хэш общего секрета после добавления данных по запросу в начале или конце.</span><span class="sxs-lookup"><span data-stu-id="ea640-136">The hash of the shared secret after prepending or appending data as requested.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea640-137">Размер кривой, используемой параметром <paramref name="otherPartyPublicKey" />, отличается от размера кривой из этого ключа.</span><span class="sxs-lookup"><span data-stu-id="ea640-137">The curve used by <paramref name="otherPartyPublicKey" /> has a different size than the curve from this key.</span></span>

<span data-ttu-id="ea640-138">-или-</span><span class="sxs-lookup"><span data-stu-id="ea640-138">-or-</span></span>

<span data-ttu-id="ea640-139">В параметре <paramref name="hashAlgorithm" /> не указан хэш.</span><span class="sxs-lookup"><span data-stu-id="ea640-139">The <paramref name="hashAlgorithm" /> parameter does not specify a hash.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ea640-140"><paramref name="otherPartyPublicKey" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ea640-140"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ea640-141">Кривая, используемая параметром <paramref name="otherPartyPublicKey" />, отличается от кривой из этого ключа.</span><span class="sxs-lookup"><span data-stu-id="ea640-141">The curve used by <paramref name="otherPartyPublicKey" /> is different than the curve from this key.</span></span>

<span data-ttu-id="ea640-142">-или-</span><span class="sxs-lookup"><span data-stu-id="ea640-142">-or-</span></span>

<span data-ttu-id="ea640-143">Этот экземпляр представляет только открытый ключ.</span><span class="sxs-lookup"><span data-stu-id="ea640-143">This instance represents only a public key.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyFromHmac">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey, byte[] secretPrepend, byte[] secretAppend);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyFromHmac(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, unsigned int8[] hmacKey, unsigned int8[] secretPrepend, unsigned int8[] secretAppend) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyFromHmac (otherPartyPublicKey As ECDiffieHellmanPublicKey, hashAlgorithm As HashAlgorithmName, hmacKey As Byte(), secretPrepend As Byte(), secretAppend As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyFromHmac(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, cli::array &lt;System::Byte&gt; ^ hmacKey, cli::array &lt;System::Byte&gt; ^ secretPrepend, cli::array &lt;System::Byte&gt; ^ secretAppend);" />
      <MemberSignature Language="F#" Value="override this.DeriveKeyFromHmac : System.Security.Cryptography.ECDiffieHellmanPublicKey * System.Security.Cryptography.HashAlgorithmName * byte[] * byte[] * byte[] -&gt; byte[]" Usage="eCDiffieHellmanOpenSsl.DeriveKeyFromHmac (otherPartyPublicKey, hashAlgorithm, hmacKey, secretPrepend, secretAppend)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="hmacKey" Type="System.Byte[]" />
        <Parameter Name="secretPrepend" Type="System.Byte[]" />
        <Parameter Name="secretAppend" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="ea640-144">Открытый ключ другой стороны.</span><span class="sxs-lookup"><span data-stu-id="ea640-144">The other party's public key.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="ea640-145">Хэш-алгоритм, используемый для получения материала ключа.</span><span class="sxs-lookup"><span data-stu-id="ea640-145">The hash algorithm to use to derive the key material.</span></span></param>
        <param name="hmacKey"><span data-ttu-id="ea640-146">Ключ HMAC.</span><span class="sxs-lookup"><span data-stu-id="ea640-146">The key for the HMAC.</span></span></param>
        <param name="secretPrepend"><span data-ttu-id="ea640-147">Значение, добавляемое к производному секрету (в начало) перед хэшированием.</span><span class="sxs-lookup"><span data-stu-id="ea640-147">A value to prepend to the derived secret before hashing.</span></span></param>
        <param name="secretAppend"><span data-ttu-id="ea640-148">Значение, добавляемое к производному секрету перед хэшированием.</span><span class="sxs-lookup"><span data-stu-id="ea640-148">A value to append to the derived secret before hashing.</span></span></param>
        <summary><span data-ttu-id="ea640-149">Выполняет формирование ключа с использованием указанного алгоритма HMAC с дополнительными данными, добавленными в начале или конце.</span><span class="sxs-lookup"><span data-stu-id="ea640-149">Performs key derivation using a specified HMAC (Hash-based Message Authentication Code) algorithm with optional prepended or appended data.</span></span></summary>
        <returns><span data-ttu-id="ea640-150">Код HMAC общего секрета после добавления данных по запросу в начале или конце.</span><span class="sxs-lookup"><span data-stu-id="ea640-150">The HMAC of the shared secret after prepending or appending data as requested.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea640-151">Размер кривой, используемой параметром <paramref name="otherPartyPublicKey" />, отличается от размера кривой из этого ключа.</span><span class="sxs-lookup"><span data-stu-id="ea640-151">The curve used by <paramref name="otherPartyPublicKey" /> has a different size than the curve from this key.</span></span>

<span data-ttu-id="ea640-152">-или-</span><span class="sxs-lookup"><span data-stu-id="ea640-152">-or-</span></span>

<span data-ttu-id="ea640-153">В параметре <paramref name="hashAlgorithm" /> не указан хэш.</span><span class="sxs-lookup"><span data-stu-id="ea640-153">The <paramref name="hashAlgorithm" /> parameter does not specify a hash.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ea640-154"><paramref name="otherPartyPublicKey" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ea640-154"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ea640-155">Кривая, используемая параметром <paramref name="otherPartyPublicKey" />, отличается от кривой из этого ключа.</span><span class="sxs-lookup"><span data-stu-id="ea640-155">The curve used by <paramref name="otherPartyPublicKey" /> is different than the curve from this key.</span></span>

<span data-ttu-id="ea640-156">-или-</span><span class="sxs-lookup"><span data-stu-id="ea640-156">-or-</span></span>

<span data-ttu-id="ea640-157">Этот экземпляр представляет только открытый ключ.</span><span class="sxs-lookup"><span data-stu-id="ea640-157">This instance represents only a public key.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyMaterial">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyMaterial (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyMaterial(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyMaterial (otherPartyPublicKey As ECDiffieHellmanPublicKey) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyMaterial(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey);" />
      <MemberSignature Language="F#" Value="override this.DeriveKeyMaterial : System.Security.Cryptography.ECDiffieHellmanPublicKey -&gt; byte[]" Usage="eCDiffieHellmanOpenSsl.DeriveKeyMaterial otherPartyPublicKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="ea640-158">Открытый ключ другой стороны.</span><span class="sxs-lookup"><span data-stu-id="ea640-158">The other party's public key.</span></span></param>
        <summary><span data-ttu-id="ea640-159">Выполняет формирование ключа для общего секрета.</span><span class="sxs-lookup"><span data-stu-id="ea640-159">Performs a key derivation on the shared secret.</span></span></summary>
        <returns><span data-ttu-id="ea640-160">Хэш SHA-256 общего секрета.</span><span class="sxs-lookup"><span data-stu-id="ea640-160">The SHA-256 hash of the shared secret.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea640-161">Размер кривой, используемой параметром <paramref name="otherPartyPublicKey" />, отличается от размера кривой из этого ключа.</span><span class="sxs-lookup"><span data-stu-id="ea640-161">The curve used by <paramref name="otherPartyPublicKey" /> has a different size than the curve from this key.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ea640-162"><paramref name="otherPartyPublicKey" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ea640-162"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ea640-163">Кривая, используемая параметром <paramref name="otherPartyPublicKey" />, отличается от кривой из этого ключа.</span><span class="sxs-lookup"><span data-stu-id="ea640-163">The curve used by <paramref name="otherPartyPublicKey" /> is different than the curve from this key.</span></span>

<span data-ttu-id="ea640-164">-или-</span><span class="sxs-lookup"><span data-stu-id="ea640-164">-or-</span></span>

<span data-ttu-id="ea640-165">Этот экземпляр представляет только открытый ключ.</span><span class="sxs-lookup"><span data-stu-id="ea640-165">This instance represents only a public key.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyTls">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyTls (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, byte[] prfLabel, byte[] prfSeed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyTls(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, unsigned int8[] prfLabel, unsigned int8[] prfSeed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyTls (otherPartyPublicKey As ECDiffieHellmanPublicKey, prfLabel As Byte(), prfSeed As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyTls(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, cli::array &lt;System::Byte&gt; ^ prfLabel, cli::array &lt;System::Byte&gt; ^ prfSeed);" />
      <MemberSignature Language="F#" Value="override this.DeriveKeyTls : System.Security.Cryptography.ECDiffieHellmanPublicKey * byte[] * byte[] -&gt; byte[]" Usage="eCDiffieHellmanOpenSsl.DeriveKeyTls (otherPartyPublicKey, prfLabel, prfSeed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
        <Parameter Name="prfLabel" Type="System.Byte[]" />
        <Parameter Name="prfSeed" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="ea640-166">Открытый ключ другой стороны.</span><span class="sxs-lookup"><span data-stu-id="ea640-166">The other party's public key.</span></span></param>
        <param name="prfLabel"><span data-ttu-id="ea640-167">Метка PRF с использованием кодировки ASCII.</span><span class="sxs-lookup"><span data-stu-id="ea640-167">The ASCII-encoded PRF label.</span></span></param>
        <param name="prfSeed"><span data-ttu-id="ea640-168">Начальное значение PRF (64-байтовое).</span><span class="sxs-lookup"><span data-stu-id="ea640-168">The 64-byte PRF seed.</span></span></param>
        <summary><span data-ttu-id="ea640-169">Выполняет формирование ключа с использованием псевдослучайной функции (PRF) протокола TLS 1.1.</span><span class="sxs-lookup"><span data-stu-id="ea640-169">Performs key derivation using the TLS (Transport Layer Security) 1.1 PRF (Pseudo-Random Function).</span></span></summary>
        <returns><span data-ttu-id="ea640-170">Первые 48 байт, полученные из функции PRF TLS 1.1 с использованием общего секрета в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="ea640-170">The first 48 bytes from the TLS 1.1 PRF, using the shared secret as the key.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="ea640-171">Производный класс должен переопределять этот метод.</span><span class="sxs-lookup"><span data-stu-id="ea640-171">A derived class must override this method.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea640-172">Размер кривой, используемой параметром <paramref name="otherPartyPublicKey" />, отличается от размера кривой из этого ключа.</span><span class="sxs-lookup"><span data-stu-id="ea640-172">The curve used by <paramref name="otherPartyPublicKey" /> has a different size than the curve from this key.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ea640-173">Параметр <paramref name="otherPartyPublicKey" />, <paramref name="prfLabel" /> или <paramref name="prfSeed" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ea640-173"><paramref name="otherPartyPublicKey" />, <paramref name="prfLabel" /> or <paramref name="prfSeed" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ea640-174"><paramref name="prfSeed" /> — длина не соответствует 64 байтам.</span><span class="sxs-lookup"><span data-stu-id="ea640-174"><paramref name="prfSeed" /> is not exactly 64 bytes in length.</span></span>

<span data-ttu-id="ea640-175">-или-</span><span class="sxs-lookup"><span data-stu-id="ea640-175">-or-</span></span>

<span data-ttu-id="ea640-176">Кривая, используемая параметром <paramref name="otherPartyPublicKey" />, отличается от кривой из этого ключа.</span><span class="sxs-lookup"><span data-stu-id="ea640-176">The curve used by <paramref name="otherPartyPublicKey" /> is different than the curve from this key.</span></span>

<span data-ttu-id="ea640-177">-или-</span><span class="sxs-lookup"><span data-stu-id="ea640-177">-or-</span></span>

<span data-ttu-id="ea640-178">Этот экземпляр представляет только открытый ключ.</span><span class="sxs-lookup"><span data-stu-id="ea640-178">This instance represents only a public key.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DuplicateKeyHandle">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.SafeEvpPKeyHandle DuplicateKeyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.Cryptography.SafeEvpPKeyHandle DuplicateKeyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.DuplicateKeyHandle" />
      <MemberSignature Language="VB.NET" Value="Public Function DuplicateKeyHandle () As SafeEvpPKeyHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::Cryptography::SafeEvpPKeyHandle ^ DuplicateKeyHandle();" />
      <MemberSignature Language="F#" Value="member this.DuplicateKeyHandle : unit -&gt; System.Security.Cryptography.SafeEvpPKeyHandle" Usage="eCDiffieHellmanOpenSsl.DuplicateKeyHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.SafeEvpPKeyHandle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ea640-179">Возвращает представление <see cref="T:System.Security.Cryptography.SafeEvpPKeyHandle" /> криптографического ключа.</span><span class="sxs-lookup"><span data-stu-id="ea640-179">Gets a <see cref="T:System.Security.Cryptography.SafeEvpPKeyHandle" /> representation of the cryptographic key.</span></span></summary>
        <returns><span data-ttu-id="ea640-180">Представление <see cref="T:System.Security.Cryptography.SafeEvpPKeyHandle" /> криптографического ключа.</span><span class="sxs-lookup"><span data-stu-id="ea640-180">A <see cref="T:System.Security.Cryptography.SafeEvpPKeyHandle" /> representation of the cryptographic key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

<span data-ttu-id="ea640-181">Каждый вызов этого метода создает новый объект <xref:System.Security.Cryptography.SafeEvpPKeyHandle> с собственным временем существования.</span><span class="sxs-lookup"><span data-stu-id="ea640-181">Each call to this method produces a new <xref:System.Security.Cryptography.SafeEvpPKeyHandle> object with its own lifetime.</span></span>
<span data-ttu-id="ea640-182">Объекты, возвращаемые этим методом, можно безопасно использовать даже после удаления этого <xref:System.Security.Cryptography.ECDiffieHellmanOpenSsl> экземпляра.</span><span class="sxs-lookup"><span data-stu-id="ea640-182">The objects returned by this method can safely be used even after this <xref:System.Security.Cryptography.ECDiffieHellmanOpenSsl> instance has been disposed.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportExplicitParameters">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ECParameters ExportExplicitParameters (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Security.Cryptography.ECParameters ExportExplicitParameters(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.ExportExplicitParameters(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ExportExplicitParameters (includePrivateParameters As Boolean) As ECParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::Cryptography::ECParameters ExportExplicitParameters(bool includePrivateParameters);" />
      <MemberSignature Language="F#" Value="override this.ExportExplicitParameters : bool -&gt; System.Security.Cryptography.ECParameters" Usage="eCDiffieHellmanOpenSsl.ExportExplicitParameters includePrivateParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters"><span data-ttu-id="ea640-183">Значение <see langword="true" /> для включения закрытых параметров; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ea640-183"><see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="ea640-184">Экспортирует сведения об открытом или открытом и закрытом ключах, используя формат явной кривой, из текущего ключа в структуру <see cref="T:System.Security.Cryptography.ECParameters" /> таким образом, чтобы их можно было передать в метод <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" />.</span><span class="sxs-lookup"><span data-stu-id="ea640-184">Exports either the public or the public and private key information using the explicit curve form from the current key to an <see cref="T:System.Security.Cryptography.ECParameters" /> structure so that it can be passed to the <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ea640-185">Объект, представляющий точку на кривой для этого ключа, в формате явной кривой.</span><span class="sxs-lookup"><span data-stu-id="ea640-185">An object that represents the point on the curve for this key, using the explicit curve format.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ea640-186">Метод не может получить значения кривой.</span><span class="sxs-lookup"><span data-stu-id="ea640-186">The method cannot obtain curve values.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExportParameters">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ECParameters ExportParameters (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Security.Cryptography.ECParameters ExportParameters(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.ExportParameters(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ExportParameters (includePrivateParameters As Boolean) As ECParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::Cryptography::ECParameters ExportParameters(bool includePrivateParameters);" />
      <MemberSignature Language="F#" Value="override this.ExportParameters : bool -&gt; System.Security.Cryptography.ECParameters" Usage="eCDiffieHellmanOpenSsl.ExportParameters includePrivateParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters"><span data-ttu-id="ea640-187">Значение <see langword="true" /> для включения закрытых параметров; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ea640-187"><see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="ea640-188">Экспортирует ключ, используемый объектом <see cref="T:System.Security.Cryptography.ECCurve" />, в объект <see cref="T:System.Security.Cryptography.ECParameters" />.</span><span class="sxs-lookup"><span data-stu-id="ea640-188">Exports the key used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object into an <see cref="T:System.Security.Cryptography.ECParameters" /> object.</span></span></summary>
        <returns><span data-ttu-id="ea640-189">Ключ и параметры именованной кривой, используемые объектом <see cref="T:System.Security.Cryptography.ECCurve" />.</span><span class="sxs-lookup"><span data-stu-id="ea640-189">The key and named curve parameters used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea640-190">Если ключ был создан как именованная кривая, то поле <xref:System.Security.Cryptography.ECParameters.Curve?displayProperty=nameWithType> содержит параметры именованной кривой. в противном случае он содержит явные параметры.</span><span class="sxs-lookup"><span data-stu-id="ea640-190">If the key was created as a named curve, the <xref:System.Security.Cryptography.ECParameters.Curve?displayProperty=nameWithType> field contains named curve parameters; otherwise,  it contains explicit parameters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ea640-191">Метод не может получить значения кривой.</span><span class="sxs-lookup"><span data-stu-id="ea640-191">The method cannot obtain curve values.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GenerateKey">
      <MemberSignature Language="C#" Value="public override void GenerateKey (System.Security.Cryptography.ECCurve curve);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GenerateKey(valuetype System.Security.Cryptography.ECCurve curve) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.GenerateKey(System.Security.Cryptography.ECCurve)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GenerateKey (curve As ECCurve)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GenerateKey(System::Security::Cryptography::ECCurve curve);" />
      <MemberSignature Language="F#" Value="override this.GenerateKey : System.Security.Cryptography.ECCurve -&gt; unit" Usage="eCDiffieHellmanOpenSsl.GenerateKey curve" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="curve" Type="System.Security.Cryptography.ECCurve" />
      </Parameters>
      <Docs>
        <param name="curve"><span data-ttu-id="ea640-192">Кривая, используемая для создания пары открытого и закрытого эфемерных ключей.</span><span class="sxs-lookup"><span data-stu-id="ea640-192">The curve used to generate an ephemeral public/private key pair.</span></span></param>
        <summary><span data-ttu-id="ea640-193">Создает новую пару открытого и закрытого эфемерных ключей для указанной кривой.</span><span class="sxs-lookup"><span data-stu-id="ea640-193">Generates a new ephemeral public/private key pair for the specified curve.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea640-194">`curve` необходимо проверить (то есть он должен возвращать значение true при передаче методу <xref:System.Security.Cryptography.ECCurve.Validate?displayProperty=nameWithType>) и не должен быть неявным.</span><span class="sxs-lookup"><span data-stu-id="ea640-194">`curve` must validate (that is, it must return true when passed to the <xref:System.Security.Cryptography.ECCurve.Validate?displayProperty=nameWithType> method) and must not be implicit.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ea640-195"><paramref name="curve" /> не выполняет проверку.</span><span class="sxs-lookup"><span data-stu-id="ea640-195"><paramref name="curve" /> does not validate.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportParameters">
      <MemberSignature Language="C#" Value="public override void ImportParameters (System.Security.Cryptography.ECParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportParameters(valuetype System.Security.Cryptography.ECParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanOpenSsl.ImportParameters(System.Security.Cryptography.ECParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportParameters (parameters As ECParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportParameters(System::Security::Cryptography::ECParameters parameters);" />
      <MemberSignature Language="F#" Value="override this.ImportParameters : System.Security.Cryptography.ECParameters -&gt; unit" Usage="eCDiffieHellmanOpenSsl.ImportParameters parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Security.Cryptography.ECParameters" />
      </Parameters>
      <Docs>
        <param name="parameters"><span data-ttu-id="ea640-196">Параметры кривой для импорта.</span><span class="sxs-lookup"><span data-stu-id="ea640-196">The curve's parameters to import.</span></span></param>
        <summary><span data-ttu-id="ea640-197">Импортирует заданные параметры для объекта <see cref="T:System.Security.Cryptography.ECCurve" /> как ключ в текущий экземпляр.</span><span class="sxs-lookup"><span data-stu-id="ea640-197">Imports the specified parameters for an <see cref="T:System.Security.Cryptography.ECCurve" /> object as a key into the current instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea640-198">Метод <xref:System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters%2A> заменяет существующий ключ, с которым работает этот объект, создавая новый объект <xref:System.Security.Cryptography.CngKey>.</span><span class="sxs-lookup"><span data-stu-id="ea640-198">The <xref:System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters%2A> method replaces the existing key that this object is working with by creating a         new <xref:System.Security.Cryptography.CngKey> object.</span></span> <span data-ttu-id="ea640-199">Если `parameters` содержит только поле <xref:System.Security.Cryptography.ECParameters.Q>, то импортируется только открытый ключ.</span><span class="sxs-lookup"><span data-stu-id="ea640-199">If `parameters` contains only the <xref:System.Security.Cryptography.ECParameters.Q> field, then only a public key is imported.</span></span>         <span data-ttu-id="ea640-200">Если `parameters` также содержит <xref:System.Security.Cryptography.ECParameters.D>, импортируется полная пара ключей.</span><span class="sxs-lookup"><span data-stu-id="ea640-200">If `parameters` also contains <xref:System.Security.Cryptography.ECParameters.D>, then a full key pair is be imported.</span></span> <span data-ttu-id="ea640-201">Значение `parameter` <xref:System.Security.Cryptography.ECParameters.Curve> указывает тип кривой для импорта.</span><span class="sxs-lookup"><span data-stu-id="ea640-201">The `parameter` <xref:System.Security.Cryptography.ECParameters.Curve> value specifies the type of the curve to import.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ea640-202"><paramref name="parameters" /> не выполняет проверку.</span><span class="sxs-lookup"><span data-stu-id="ea640-202"><paramref name="parameters" /> does not validate.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="ea640-203"><paramref name="parameters" /> ссылается на кривую, которую нельзя импортировать.</span><span class="sxs-lookup"><span data-stu-id="ea640-203"><paramref name="parameters" /> references a curve that cannot be imported.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="ea640-204"><paramref name="parameters" /> ссылается на кривую, которая не поддерживается этой платформой.</span><span class="sxs-lookup"><span data-stu-id="ea640-204"><paramref name="parameters" /> references a curve that is not supported by this platform.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PublicKey">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanOpenSsl.PublicKey" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property PublicKey As ECDiffieHellmanPublicKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Cryptography::ECDiffieHellmanPublicKey ^ PublicKey { System::Security::Cryptography::ECDiffieHellmanPublicKey ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PublicKey : System.Security.Cryptography.ECDiffieHellmanPublicKey" Usage="System.Security.Cryptography.ECDiffieHellmanOpenSsl.PublicKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellmanPublicKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ea640-205">Получает открытый ключ, который может использоваться другим объектом <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> для генерации секретного соглашения.</span><span class="sxs-lookup"><span data-stu-id="ea640-205">Gets the public key that can be used by another <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> object to generate a shared secret agreement.</span></span></summary>
        <value><span data-ttu-id="ea640-206">Открытый ключ, связанный с этим экземпляром класса <see cref="T:System.Security.Cryptography.ECDiffieHellmanOpenSsl" />.</span><span class="sxs-lookup"><span data-stu-id="ea640-206">The public key that is associated with this instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanOpenSsl" /> object.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
