<Type Name="IDispatchMessageInspector" FullName="System.ServiceModel.Dispatcher.IDispatchMessageInspector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5080315ea2c1a94f83db594050f031dd3d468bda" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70503205" /></Metadata><TypeSignature Language="C#" Value="public interface IDispatchMessageInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDispatchMessageInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDispatchMessageInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDispatchMessageInspector" />
  <TypeSignature Language="F#" Value="type IDispatchMessageInspector = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="22e43-101">Определяет методы, разрешающие производить настраиваемую проверку или изменение входящих и исходящих сообщений приложения в приложениях служб.</span><span class="sxs-lookup"><span data-stu-id="22e43-101">Defines the methods that enable custom inspection or modification of inbound and outbound application messages in service applications.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22e43-102">Примените объект <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> для проверки или изменения входящих или исходящих сообщений приложения либо до распределения сообщений запроса по операциям, либо до возвращения ответного сообщения вызывающему.</span><span class="sxs-lookup"><span data-stu-id="22e43-102">Implement <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to inspect or modify inbound or outbound application messages either prior to dispatching a request message to an operation or before returning a reply message to a caller.</span></span> <span data-ttu-id="22e43-103">Существует большое количество сценариев, требующих перехватывания сообщений до вызова операции, для которой оно было предназначено.</span><span class="sxs-lookup"><span data-stu-id="22e43-103">There are a large number of scenarios that require intercepting messages prior to invoking the operation for which it is destined.</span></span> <span data-ttu-id="22e43-104">Например, можно записывать в журнал входящие сообщения приложения или применять какую-либо функцию, основанную на заголовке сообщения.</span><span class="sxs-lookup"><span data-stu-id="22e43-104">For example, you can log incoming application messages or perform some feature based on a message header.</span></span>  
  
 <span data-ttu-id="22e43-105">Обычно инспекторы сообщений вставляются поведением службы (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>), поведением конечной точки (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>) или поведением контракта (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>).</span><span class="sxs-lookup"><span data-stu-id="22e43-105">Typically, message inspectors are inserted by a service behavior (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>), an endpoint behavior (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>), or a contract behavior (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>).</span></span> <span data-ttu-id="22e43-106">После этого поведение добавляет инспектор сообщений в коллекцию <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="22e43-106">The behavior then adds the message inspector to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span> <span data-ttu-id="22e43-107">Дополнительные сведения о расширении среды выполнения с помощью поведений см. [в разделе Расширение ServiceHost и уровня модели службы](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).</span><span class="sxs-lookup"><span data-stu-id="22e43-107">For more information about extending the runtime using behaviors, see [Extending ServiceHost and the Service Model Layer](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).</span></span>  
  
-   <span data-ttu-id="22e43-108">Метод <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> включает настраиваемое поведение после приема сообщений, но до распределения их по надлежащим операциям.</span><span class="sxs-lookup"><span data-stu-id="22e43-108">The <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method enables custom behavior after receiving the message but before dispatching it to the intended operation.</span></span>  
  
-   <span data-ttu-id="22e43-109">Метод <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> включает настраиваемое поведение после возвращения операции, но до отправки ответа.</span><span class="sxs-lookup"><span data-stu-id="22e43-109">The <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method enables custom behavior after the operation returns but before the reply is sent.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="22e43-110">Объекты <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> всегда вызываются в один и тот же момент во время распределения сообщений, вне зависимости от того, требует ли операция ответа или нет.</span><span class="sxs-lookup"><span data-stu-id="22e43-110"><xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> objects are always called at the same point during message dispatch regardless of whether an operation is one-way or request-reply.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="22e43-111">В следующем образце кода показан базовый метод <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>, который при вызове записывает строку в консоль.</span><span class="sxs-lookup"><span data-stu-id="22e43-111">The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.</span></span>  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 <span data-ttu-id="22e43-112">В следующем образце кода демонстрируется реализация <xref:System.ServiceModel.Description.IServiceBehavior>, которое добавляет метод `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> в коллекцию <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="22e43-112">The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span>  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 <span data-ttu-id="22e43-113">В следующем образце кода показано использование файла конфигурации приложения для загрузки поведения службы, которое вставляет метод `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span><span class="sxs-lookup"><span data-stu-id="22e43-113">The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span></span>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterReceiveRequest">
      <MemberSignature Language="C#" Value="public object AfterReceiveRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AfterReceiveRequest(class System.ServiceModel.Channels.Message&amp; request, class System.ServiceModel.IClientChannel channel, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AfterReceiveRequest(System::ServiceModel::Channels::Message ^ % request, System::ServiceModel::IClientChannel ^ channel, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member AfterReceiveRequest :  * System.ServiceModel.IClientChannel * System.ServiceModel.InstanceContext -&gt; obj" Usage="iDispatchMessageInspector.AfterReceiveRequest (request, channel, instanceContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="22e43-114">Сообщение запроса.</span><span class="sxs-lookup"><span data-stu-id="22e43-114">The request message.</span></span></param>
        <param name="channel"><span data-ttu-id="22e43-115">Входящий канал.</span><span class="sxs-lookup"><span data-stu-id="22e43-115">The incoming channel.</span></span></param>
        <param name="instanceContext"><span data-ttu-id="22e43-116">Текущий экземпляр службы.</span><span class="sxs-lookup"><span data-stu-id="22e43-116">The current service instance.</span></span></param>
        <summary><span data-ttu-id="22e43-117">Вызывается после приема входящего сообщения, но после распределения сообщения на надлежащую операцию.</span><span class="sxs-lookup"><span data-stu-id="22e43-117">Called after an inbound message has been received but before the message is dispatched to the intended operation.</span></span></summary>
        <returns><span data-ttu-id="22e43-118">Объект, используемый для корреляции состояния.</span><span class="sxs-lookup"><span data-stu-id="22e43-118">The object used to correlate state.</span></span> <span data-ttu-id="22e43-119">Этот объект передается обратно в методе <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="22e43-119">This object is passed back in the <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" /> method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22e43-120">Для проверки или изменения входящих сообщений, каналов клиентов, предоставляющих их, и текущих экземпляров служб используйте метод <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A>.</span><span class="sxs-lookup"><span data-stu-id="22e43-120">Use the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method to inspect or modify the incoming message, the client channel that provided it, and the current service instance.</span></span> <span data-ttu-id="22e43-121">Возвращаемое значение может быть любым объектом, который требуется использовать для проведения корреляции; оно возвращается в виде параметра `correlationState` в методе <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A>.</span><span class="sxs-lookup"><span data-stu-id="22e43-121">The return value can be any object that you want to use for correlation purposes; it is returned to you as the `correlationState` parameter in the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="22e43-122">Текст сообщения нельзя использовать, если сообщение целиком не было помещено в буфер и не была сделана копия.</span><span class="sxs-lookup"><span data-stu-id="22e43-122">You cannot use the body of the message unless you buffer the entire message and make a copy.</span></span> <span data-ttu-id="22e43-123">Если сделать это, то необходимо сделать две копии сообщения: одну для проверки, а другую для перезаписи параметра `request`.</span><span class="sxs-lookup"><span data-stu-id="22e43-123">If you do this, you must make two copies of the message: one to inspect, and the other to overwrite the `request` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="22e43-124">В следующем образце кода показан базовый метод <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>, который при вызове записывает строку в консоль.</span><span class="sxs-lookup"><span data-stu-id="22e43-124">The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.</span></span>  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 <span data-ttu-id="22e43-125">В следующем образце кода демонстрируется реализация <xref:System.ServiceModel.Description.IServiceBehavior>, которое добавляет метод `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> в коллекцию <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="22e43-125">The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span>  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 <span data-ttu-id="22e43-126">В следующем образце кода показано использование файла конфигурации приложения для загрузки поведения службы, которое вставляет метод `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span><span class="sxs-lookup"><span data-stu-id="22e43-126">The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span></span>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSendReply">
      <MemberSignature Language="C#" Value="public void BeforeSendReply (ref System.ServiceModel.Channels.Message reply, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeforeSendReply(class System.ServiceModel.Channels.Message&amp; reply, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeforeSendReply (ByRef reply As Message, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeforeSendReply(System::ServiceModel::Channels::Message ^ % reply, System::Object ^ correlationState);" />
      <MemberSignature Language="F#" Value="abstract member BeforeSendReply :  * obj -&gt; unit" Usage="iDispatchMessageInspector.BeforeSendReply (reply, correlationState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reply" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reply"><span data-ttu-id="22e43-127">Ответное сообщение.</span><span class="sxs-lookup"><span data-stu-id="22e43-127">The reply message.</span></span> <span data-ttu-id="22e43-128">Это значение равно нулю, если операция является односторонней.</span><span class="sxs-lookup"><span data-stu-id="22e43-128">This value is null if the operation is one way.</span></span></param>
        <param name="correlationState"><span data-ttu-id="22e43-129">Объект корреляции, возвращаемый из метода <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />.</span><span class="sxs-lookup"><span data-stu-id="22e43-129">The correlation object returned from the <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" /> method.</span></span></param>
        <summary><span data-ttu-id="22e43-130">Вызывается после возвращения операции, но после отправки ответного сообщения.</span><span class="sxs-lookup"><span data-stu-id="22e43-130">Called after the operation has returned but before the reply message is sent.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22e43-131">Для применения настраиваемого поведения до отправки возвращаемого сообщения используйте метод <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A>.</span><span class="sxs-lookup"><span data-stu-id="22e43-131">Use the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method to perform custom behavior prior to sending the return message.</span></span> <span data-ttu-id="22e43-132">Параметр `correlationState` является объектом, возвращаемым из метода <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A>, который можно использовать для осуществления корреляции между входящими и исходящими вызовами, чтобы поддерживать поведение.</span><span class="sxs-lookup"><span data-stu-id="22e43-132">The `correlationState` is the object returned from the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method that you can use to perform correlation between inbound and outbound calls to support your behavior.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="22e43-133">В следующем образце кода показан базовый метод <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>, который при вызове записывает строку в консоль.</span><span class="sxs-lookup"><span data-stu-id="22e43-133">The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.</span></span>  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 <span data-ttu-id="22e43-134">В следующем образце кода демонстрируется реализация <xref:System.ServiceModel.Description.IServiceBehavior>, которое добавляет метод `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> в коллекцию <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="22e43-134">The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span>  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 <span data-ttu-id="22e43-135">В следующем образце кода показано использование файла конфигурации приложения для загрузки поведения службы, которое вставляет метод `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span><span class="sxs-lookup"><span data-stu-id="22e43-135">The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span></span>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
