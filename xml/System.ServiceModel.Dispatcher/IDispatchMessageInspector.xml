<Type Name="IDispatchMessageInspector" FullName="System.ServiceModel.Dispatcher.IDispatchMessageInspector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5080315ea2c1a94f83db594050f031dd3d468bda" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69235938" /></Metadata><TypeSignature Language="C#" Value="public interface IDispatchMessageInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDispatchMessageInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDispatchMessageInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDispatchMessageInspector" />
  <TypeSignature Language="F#" Value="type IDispatchMessageInspector = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Определяет методы, разрешающие производить настраиваемую проверку или изменение входящих и исходящих сообщений приложения в приложениях служб.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Примените объект <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> для проверки или изменения входящих или исходящих сообщений приложения либо до распределения сообщений запроса по операциям, либо до возвращения ответного сообщения вызывающему. Существует большое количество сценариев, требующих перехватывания сообщений до вызова операции, для которой оно было предназначено. Например, можно записывать в журнал входящие сообщения приложения или применять какую-либо функцию, основанную на заголовке сообщения.  
  
 Обычно инспекторы сообщений вставляются поведением службы (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>), поведением конечной точки (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>) или поведением контракта (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>). После этого поведение добавляет инспектор сообщений в коллекцию <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>. Дополнительные сведения о расширении среды выполнения с помощью поведений см. [в разделе Расширение ServiceHost и уровня модели службы](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).  
  
-   Метод <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> включает настраиваемое поведение после приема сообщений, но до распределения их по надлежащим операциям.  
  
-   Метод <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> включает настраиваемое поведение после возвращения операции, но до отправки ответа.  
  
> [!NOTE]
>  Объекты <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> всегда вызываются в один и тот же момент во время распределения сообщений, вне зависимости от того, требует ли операция ответа или нет.  
  
   
  
## Examples  
 В следующем образце кода показан базовый метод <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>, который при вызове записывает строку в консоль.  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 В следующем образце кода демонстрируется реализация <xref:System.ServiceModel.Description.IServiceBehavior>, которое добавляет метод `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> в коллекцию <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 В следующем образце кода показано использование файла конфигурации приложения для загрузки поведения службы, которое вставляет метод `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterReceiveRequest">
      <MemberSignature Language="C#" Value="public object AfterReceiveRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AfterReceiveRequest(class System.ServiceModel.Channels.Message&amp; request, class System.ServiceModel.IClientChannel channel, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AfterReceiveRequest(System::ServiceModel::Channels::Message ^ % request, System::ServiceModel::IClientChannel ^ channel, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member AfterReceiveRequest :  * System.ServiceModel.IClientChannel * System.ServiceModel.InstanceContext -&gt; obj" Usage="iDispatchMessageInspector.AfterReceiveRequest (request, channel, instanceContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="request">Сообщение запроса.</param>
        <param name="channel">Входящий канал.</param>
        <param name="instanceContext">Текущий экземпляр службы.</param>
        <summary>Вызывается после приема входящего сообщения, но после распределения сообщения на надлежащую операцию.</summary>
        <returns>Объект, используемый для корреляции состояния. Этот объект передается обратно в методе <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для проверки или изменения входящих сообщений, каналов клиентов, предоставляющих их, и текущих экземпляров служб используйте метод <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A>. Возвращаемое значение может быть любым объектом, который требуется использовать для проведения корреляции; оно возвращается в виде параметра `correlationState` в методе <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A>.  
  
> [!IMPORTANT]
>  Текст сообщения нельзя использовать, если сообщение целиком не было помещено в буфер и не была сделана копия. Если сделать это, то необходимо сделать две копии сообщения: одну для проверки, а другую для перезаписи параметра `request`.  
  
   
  
## Examples  
 В следующем образце кода показан базовый метод <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>, который при вызове записывает строку в консоль.  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 В следующем образце кода демонстрируется реализация <xref:System.ServiceModel.Description.IServiceBehavior>, которое добавляет метод `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> в коллекцию <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 В следующем образце кода показано использование файла конфигурации приложения для загрузки поведения службы, которое вставляет метод `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSendReply">
      <MemberSignature Language="C#" Value="public void BeforeSendReply (ref System.ServiceModel.Channels.Message reply, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeforeSendReply(class System.ServiceModel.Channels.Message&amp; reply, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeforeSendReply (ByRef reply As Message, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeforeSendReply(System::ServiceModel::Channels::Message ^ % reply, System::Object ^ correlationState);" />
      <MemberSignature Language="F#" Value="abstract member BeforeSendReply :  * obj -&gt; unit" Usage="iDispatchMessageInspector.BeforeSendReply (reply, correlationState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reply" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reply">Ответное сообщение. Это значение равно нулю, если операция является односторонней.</param>
        <param name="correlationState">Объект корреляции, возвращаемый из метода <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />.</param>
        <summary>Вызывается после возвращения операции, но после отправки ответного сообщения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для применения настраиваемого поведения до отправки возвращаемого сообщения используйте метод <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A>. Параметр `correlationState` является объектом, возвращаемым из метода <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A>, который можно использовать для осуществления корреляции между входящими и исходящими вызовами, чтобы поддерживать поведение.  
  
   
  
## Examples  
 В следующем образце кода показан базовый метод <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>, который при вызове записывает строку в консоль.  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 В следующем образце кода демонстрируется реализация <xref:System.ServiceModel.Description.IServiceBehavior>, которое добавляет метод `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> в коллекцию <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 В следующем образце кода показано использование файла конфигурации приложения для загрузки поведения службы, которое вставляет метод `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
