<Type Name="IInstanceContextProvider" FullName="System.ServiceModel.Dispatcher.IInstanceContextProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d5fe22adabd6c7ddbd809e7be39d5cd041175a39" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70471200" /></Metadata><TypeSignature Language="C#" Value="public interface IInstanceContextProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceContextProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceContextProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceContextProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceContextProvider" />
  <TypeSignature Language="F#" Value="type IInstanceContextProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="1a7b6-101">Реализуйте для участия в создании или выборе объекта <see cref="T:System.ServiceModel.InstanceContext" />, в особенности для обеспечения общих сеансов.</span><span class="sxs-lookup"><span data-stu-id="1a7b6-101">Implement to participate in the creation or choosing of a <see cref="T:System.ServiceModel.InstanceContext" /> object, especially to enable shared sessions.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a7b6-102">Реализуйте интерфейс <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider>, чтобы предоставить системе соответствующий объект <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="1a7b6-102">Implement the <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> interface to provide the appropriate <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType> object to the system.</span></span> <span data-ttu-id="1a7b6-103">Обычно этот интерфейс реализуется для поддержки общих сеансов, обеспечения пулов экземпляров служб, контроля времени существования экземпляров служб или группировки контекстов клиентов.</span><span class="sxs-lookup"><span data-stu-id="1a7b6-103">Typically, this interface is implemented to support shared sessions, enable service instance pooling, control lifetimes of service instances, or to group contexts among clients.</span></span>  
  
 <span data-ttu-id="1a7b6-104">Например, для реализации общего использования вставьте пользовательский интерфейс <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider>, чтобы определить, какой сеанс или вызов от клиента связан с объектом <xref:System.ServiceModel.InstanceContext>.</span><span class="sxs-lookup"><span data-stu-id="1a7b6-104">For example, to implement sharing, insert a custom <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> to decide which session or call from a client is associated with which <xref:System.ServiceModel.InstanceContext> object.</span></span> <span data-ttu-id="1a7b6-105">Пример, демонстрирующий совместное использование контекстов экземпляра, см. в разделе [инстанцеконтекстшаринг](https://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).</span><span class="sxs-lookup"><span data-stu-id="1a7b6-105">For an example that demonstrates the sharing of instance contexts, see [InstanceContextSharing](https://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1a7b6-106">Когда объект <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> вставляется в Windows Communication Foundation (WCF), свойство "нормальное", которое управляет <xref:System.ServiceModel.InstanceContext> созданием объектов <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> (свойство), больше не проверяется и не оказывает никакого влияния.</span><span class="sxs-lookup"><span data-stu-id="1a7b6-106">When an <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> is inserted into Windows Communication Foundation (WCF), the normal property that controls the creation of <xref:System.ServiceModel.InstanceContext> objects (the <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> property) is no longer checked and has no effect.</span></span>  
  
 <span data-ttu-id="1a7b6-107">Более универсальным механизмом, с помощью которого можно инициализировать объекты <xref:System.ServiceModel.InstanceContext> при создании (например, для присоединения пользовательских расширений к каждому объекту<xref:System.ServiceModel.InstanceContext>) является интерфейс <xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="1a7b6-107">A more generic mechanism by which you can initialize <xref:System.ServiceModel.InstanceContext> objects when created (for example, to attach custom extensions to each <xref:System.ServiceModel.InstanceContext>) is the <xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetExistingInstanceContext">
      <MemberSignature Language="C#" Value="public System.ServiceModel.InstanceContext GetExistingInstanceContext (System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.InstanceContext GetExistingInstanceContext(class System.ServiceModel.Channels.Message message, class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::InstanceContext ^ GetExistingInstanceContext(System::ServiceModel::Channels::Message ^ message, System::ServiceModel::IContextChannel ^ channel);" />
      <MemberSignature Language="F#" Value="abstract member GetExistingInstanceContext : System.ServiceModel.Channels.Message * System.ServiceModel.IContextChannel -&gt; System.ServiceModel.InstanceContext" Usage="iInstanceContextProvider.GetExistingInstanceContext (message, channel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.InstanceContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="1a7b6-108">Входящее сообщение.</span><span class="sxs-lookup"><span data-stu-id="1a7b6-108">The incoming message.</span></span></param>
        <param name="channel"><span data-ttu-id="1a7b6-109">Канал, получивший сообщение.</span><span class="sxs-lookup"><span data-stu-id="1a7b6-109">The channel that received the message.</span></span></param>
        <summary><span data-ttu-id="1a7b6-110">Вызывается при получении нового сообщения.</span><span class="sxs-lookup"><span data-stu-id="1a7b6-110">Called when a new message is received.</span></span></summary>
        <returns><span data-ttu-id="1a7b6-111">Объект <see cref="T:System.ServiceModel.InstanceContext" />, который используется для обработки сообщения; передайте значение <see langword="null" />, чтобы дать указание службе WCF о создании нового объекта <see cref="T:System.ServiceModel.InstanceContext" />.</span><span class="sxs-lookup"><span data-stu-id="1a7b6-111">The <see cref="T:System.ServiceModel.InstanceContext" /> object that is used to process the message; return <see langword="null" /> to instruct WCF to create a new <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a7b6-112">Метод <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> вызывается при получении сообщения.</span><span class="sxs-lookup"><span data-stu-id="1a7b6-112">The <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> method is called when a message is received.</span></span> <span data-ttu-id="1a7b6-113">Передайте объект <xref:System.ServiceModel.InstanceContext>, который требуется использовать для обработки сообщения, или `null`.</span><span class="sxs-lookup"><span data-stu-id="1a7b6-113">Return the <xref:System.ServiceModel.InstanceContext> object that you want to process the message, or `null`.</span></span> <span data-ttu-id="1a7b6-114">В случае `null`, WCF создает новый <xref:System.ServiceModel.InstanceContext> объект для <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> сообщения, а затем вызывает метод.</span><span class="sxs-lookup"><span data-stu-id="1a7b6-114">In the case of `null`, WCF creates a new <xref:System.ServiceModel.InstanceContext> object for the message and then calls the <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> method.</span></span>  
  
 <span data-ttu-id="1a7b6-115">Если передается значение `null`, то новый объект<xref:System.ServiceModel.InstanceContext> проходит через систему регулирования количества запросов и увеличивает число <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="1a7b6-115">If you return `null`, the new <xref:System.ServiceModel.InstanceContext> object goes through the throttling system and increments the count of <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeInstanceContext">
      <MemberSignature Language="C#" Value="public void InitializeInstanceContext (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InitializeInstanceContext(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message, class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InitializeInstanceContext(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message, System::ServiceModel::IContextChannel ^ channel);" />
      <MemberSignature Language="F#" Value="abstract member InitializeInstanceContext : System.ServiceModel.InstanceContext * System.ServiceModel.Channels.Message * System.ServiceModel.IContextChannel -&gt; unit" Usage="iInstanceContextProvider.InitializeInstanceContext (instanceContext, message, channel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="instanceContext"><span data-ttu-id="1a7b6-116">Новый объект <see cref="T:System.ServiceModel.InstanceContext" />.</span><span class="sxs-lookup"><span data-stu-id="1a7b6-116">The new <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></param>
        <param name="message"><span data-ttu-id="1a7b6-117">Входящее сообщение.</span><span class="sxs-lookup"><span data-stu-id="1a7b6-117">The incoming message.</span></span></param>
        <param name="channel"><span data-ttu-id="1a7b6-118">Канал, получивший сообщение.</span><span class="sxs-lookup"><span data-stu-id="1a7b6-118">The channel that received the message.</span></span></param>
        <summary><span data-ttu-id="1a7b6-119">Вызывается, когда из метода <see langword="null" /> возвращается значение <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />.</span><span class="sxs-lookup"><span data-stu-id="1a7b6-119">Called when <see langword="null" /> is returned from the <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a7b6-120">Метод <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> вызывается, когда <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> возвращает значение `null` и создается новый объект <xref:System.ServiceModel.InstanceContext>.</span><span class="sxs-lookup"><span data-stu-id="1a7b6-120"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> is called when <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> returns `null` and a new <xref:System.ServiceModel.InstanceContext> object is created.</span></span> <span data-ttu-id="1a7b6-121">Этот метод вызывается для уведомления пользователя о том, что создан новый объект <xref:System.ServiceModel.InstanceContext>.</span><span class="sxs-lookup"><span data-stu-id="1a7b6-121">This method is called to notify you that a new <xref:System.ServiceModel.InstanceContext> has been created.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIdle">
      <MemberSignature Language="C#" Value="public bool IsIdle (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsIdle(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsIdle(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member IsIdle : System.ServiceModel.InstanceContext -&gt; bool" Usage="iInstanceContextProvider.IsIdle instanceContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext"><span data-ttu-id="1a7b6-122">Объект <see cref="T:System.ServiceModel.InstanceContext" />, который считается бездействующим.</span><span class="sxs-lookup"><span data-stu-id="1a7b6-122">The <see cref="T:System.ServiceModel.InstanceContext" /> object that is considered idle.</span></span></param>
        <summary><span data-ttu-id="1a7b6-123">Вызывается, когда все действия <see cref="T:System.ServiceModel.InstanceContext" /> завершаются, чтобы позволить разработчикам предотвратить уничтожение объекта <see cref="T:System.ServiceModel.InstanceContext" />.</span><span class="sxs-lookup"><span data-stu-id="1a7b6-123">Called when all <see cref="T:System.ServiceModel.InstanceContext" /> activities have completed to enable implementers to prevent the <see cref="T:System.ServiceModel.InstanceContext" /> from being recycled.</span></span></summary>
        <returns><span data-ttu-id="1a7b6-124">Значение <see langword="true" />, если служба Windows Communication Foundation (WCF) должна закрыть и уничтожить объект <see cref="T:System.ServiceModel.InstanceContext" />, а также изменить значение параметра <see cref="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1a7b6-124"><see langword="true" /> if Windows Communication Foundation (WCF) is to close and recycle the <see cref="T:System.ServiceModel.InstanceContext" /> object and adjust the value of <see cref="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a7b6-125"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A>вызывается, когда WCF собирается закрыть и повторно запустить неактивный <xref:System.ServiceModel.InstanceContext> объект, чтобы вы могли сообщить среде выполнения, следует ли продолжать это.</span><span class="sxs-lookup"><span data-stu-id="1a7b6-125"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> is called when WCF is about to close and recycle an idle <xref:System.ServiceModel.InstanceContext> object so that you can inform the runtime whether to continue doing so.</span></span>  
  
 <span data-ttu-id="1a7b6-126">Пример, демонстрирующий совместное использование контекстов экземпляра, см. в разделе [инстанцеконтекстшаринг](https://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).</span><span class="sxs-lookup"><span data-stu-id="1a7b6-126">For an example that demonstrates the sharing of instance contexts, see [InstanceContextSharing](https://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyIdle">
      <MemberSignature Language="C#" Value="public void NotifyIdle (System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifyIdle(class System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NotifyIdle(System::ServiceModel::Dispatcher::InstanceContextIdleCallback ^ callback, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member NotifyIdle : System.ServiceModel.Dispatcher.InstanceContextIdleCallback * System.ServiceModel.InstanceContext -&gt; unit" Usage="iInstanceContextProvider.NotifyIdle (callback, instanceContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.ServiceModel.Dispatcher.InstanceContextIdleCallback" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="1a7b6-127">Объект <see cref="T:System.ServiceModel.Dispatcher.InstanceContextIdleCallback" />, который уведомляет службу WCF, когда объект <see cref="T:System.ServiceModel.InstanceContext" /> должен быть закрыт и перезапущен.</span><span class="sxs-lookup"><span data-stu-id="1a7b6-127">The <see cref="T:System.ServiceModel.Dispatcher.InstanceContextIdleCallback" /> object that notifies WCF when the <see cref="T:System.ServiceModel.InstanceContext" /> object is to be closed and recycled.</span></span></param>
        <param name="instanceContext"><span data-ttu-id="1a7b6-128">Текущий контекст <see cref="T:System.ServiceModel.InstanceContext" />.</span><span class="sxs-lookup"><span data-stu-id="1a7b6-128">The current <see cref="T:System.ServiceModel.InstanceContext" />.</span></span></param>
        <summary><span data-ttu-id="1a7b6-129">Вызывается, когда метод <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" /> возвращает значение <see langword="false" />, чтобы позволить разработчику обеспечить обратный вызов с целью уведомить WCF, когда существование объекта <see cref="T:System.ServiceModel.InstanceContext" />завершается.</span><span class="sxs-lookup"><span data-stu-id="1a7b6-129">Called when the <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" /> method returns <see langword="false" /> to enable implementers to provide a callback to notify WCF when the <see cref="T:System.ServiceModel.InstanceContext" /> object is finished.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a7b6-130">`false` <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> <xref:System.ServiceModel.InstanceContext> Метод вызывается, <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> когда метод возвращает, чтобы предоставить WCF объекту, который используется для информирования среды выполнения о завершении работы. <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle%2A></span><span class="sxs-lookup"><span data-stu-id="1a7b6-130">The <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle%2A> method is called when the <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> method returns `false` to enable you to provide WCF with a <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> object that you use to inform the runtime that the <xref:System.ServiceModel.InstanceContext> has finished its work.</span></span> <span data-ttu-id="1a7b6-131">Когда объект уведомляет среду выполнения <xref:System.ServiceModel.InstanceContext> о завершении работы, WCF вызывает <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> один раз. <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="1a7b6-131">When the <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> object notifies the runtime that the <xref:System.ServiceModel.InstanceContext> has finished its work, WCF calls <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> once again.</span></span> <span data-ttu-id="1a7b6-132">Этот цикл продолжается, пока метод <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> не вернет значение `true`, а контекст не будет закрыт и уничтожен.</span><span class="sxs-lookup"><span data-stu-id="1a7b6-132">This cycle continues until <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> returns `true` and the context is closed and recycled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
