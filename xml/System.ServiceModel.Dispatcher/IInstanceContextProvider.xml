<Type Name="IInstanceContextProvider" FullName="System.ServiceModel.Dispatcher.IInstanceContextProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d5fe22adabd6c7ddbd809e7be39d5cd041175a39" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70471200" /></Metadata><TypeSignature Language="C#" Value="public interface IInstanceContextProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceContextProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceContextProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceContextProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceContextProvider" />
  <TypeSignature Language="F#" Value="type IInstanceContextProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Реализуйте для участия в создании или выборе объекта <see cref="T:System.ServiceModel.InstanceContext" />, в особенности для обеспечения общих сеансов.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Реализуйте интерфейс <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider>, чтобы предоставить системе соответствующий объект <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType>. Обычно этот интерфейс реализуется для поддержки общих сеансов, обеспечения пулов экземпляров служб, контроля времени существования экземпляров служб или группировки контекстов клиентов.  
  
 Например, для реализации общего использования вставьте пользовательский интерфейс <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider>, чтобы определить, какой сеанс или вызов от клиента связан с объектом <xref:System.ServiceModel.InstanceContext>. Пример, демонстрирующий совместное использование контекстов экземпляра, см. в разделе [инстанцеконтекстшаринг](https://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).  
  
> [!NOTE]
>  Когда объект <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> вставляется в Windows Communication Foundation (WCF), свойство "нормальное", которое управляет <xref:System.ServiceModel.InstanceContext> созданием объектов <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> (свойство), больше не проверяется и не оказывает никакого влияния.  
  
 Более универсальным механизмом, с помощью которого можно инициализировать объекты <xref:System.ServiceModel.InstanceContext> при создании (например, для присоединения пользовательских расширений к каждому объекту<xref:System.ServiceModel.InstanceContext>) является интерфейс <xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetExistingInstanceContext">
      <MemberSignature Language="C#" Value="public System.ServiceModel.InstanceContext GetExistingInstanceContext (System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.InstanceContext GetExistingInstanceContext(class System.ServiceModel.Channels.Message message, class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::InstanceContext ^ GetExistingInstanceContext(System::ServiceModel::Channels::Message ^ message, System::ServiceModel::IContextChannel ^ channel);" />
      <MemberSignature Language="F#" Value="abstract member GetExistingInstanceContext : System.ServiceModel.Channels.Message * System.ServiceModel.IContextChannel -&gt; System.ServiceModel.InstanceContext" Usage="iInstanceContextProvider.GetExistingInstanceContext (message, channel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.InstanceContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="message">Входящее сообщение.</param>
        <param name="channel">Канал, получивший сообщение.</param>
        <summary>Вызывается при получении нового сообщения.</summary>
        <returns>Объект <see cref="T:System.ServiceModel.InstanceContext" />, который используется для обработки сообщения; передайте значение <see langword="null" />, чтобы дать указание службе WCF о создании нового объекта <see cref="T:System.ServiceModel.InstanceContext" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> вызывается при получении сообщения. Передайте объект <xref:System.ServiceModel.InstanceContext>, который требуется использовать для обработки сообщения, или `null`. В случае `null`, WCF создает новый <xref:System.ServiceModel.InstanceContext> объект для <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> сообщения, а затем вызывает метод.  
  
 Если передается значение `null`, то новый объект<xref:System.ServiceModel.InstanceContext> проходит через систему регулирования количества запросов и увеличивает число <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeInstanceContext">
      <MemberSignature Language="C#" Value="public void InitializeInstanceContext (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InitializeInstanceContext(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message, class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InitializeInstanceContext(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message, System::ServiceModel::IContextChannel ^ channel);" />
      <MemberSignature Language="F#" Value="abstract member InitializeInstanceContext : System.ServiceModel.InstanceContext * System.ServiceModel.Channels.Message * System.ServiceModel.IContextChannel -&gt; unit" Usage="iInstanceContextProvider.InitializeInstanceContext (instanceContext, message, channel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Новый объект <see cref="T:System.ServiceModel.InstanceContext" />.</param>
        <param name="message">Входящее сообщение.</param>
        <param name="channel">Канал, получивший сообщение.</param>
        <summary>Вызывается, когда из метода <see langword="null" /> возвращается значение <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> вызывается, когда <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> возвращает значение `null` и создается новый объект <xref:System.ServiceModel.InstanceContext>. Этот метод вызывается для уведомления пользователя о том, что создан новый объект <xref:System.ServiceModel.InstanceContext>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIdle">
      <MemberSignature Language="C#" Value="public bool IsIdle (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsIdle(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsIdle(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member IsIdle : System.ServiceModel.InstanceContext -&gt; bool" Usage="iInstanceContextProvider.IsIdle instanceContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Объект <see cref="T:System.ServiceModel.InstanceContext" />, который считается бездействующим.</param>
        <summary>Вызывается, когда все действия <see cref="T:System.ServiceModel.InstanceContext" /> завершаются, чтобы позволить разработчикам предотвратить уничтожение объекта <see cref="T:System.ServiceModel.InstanceContext" />.</summary>
        <returns>Значение <see langword="true" />, если служба Windows Communication Foundation (WCF) должна закрыть и уничтожить объект <see cref="T:System.ServiceModel.InstanceContext" />, а также изменить значение параметра <see cref="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" />; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A>вызывается, когда WCF собирается закрыть и повторно запустить неактивный <xref:System.ServiceModel.InstanceContext> объект, чтобы вы могли сообщить среде выполнения, следует ли продолжать это.  
  
 Пример, демонстрирующий совместное использование контекстов экземпляра, см. в разделе [инстанцеконтекстшаринг](https://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyIdle">
      <MemberSignature Language="C#" Value="public void NotifyIdle (System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifyIdle(class System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NotifyIdle(System::ServiceModel::Dispatcher::InstanceContextIdleCallback ^ callback, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member NotifyIdle : System.ServiceModel.Dispatcher.InstanceContextIdleCallback * System.ServiceModel.InstanceContext -&gt; unit" Usage="iInstanceContextProvider.NotifyIdle (callback, instanceContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.ServiceModel.Dispatcher.InstanceContextIdleCallback" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="callback">Объект <see cref="T:System.ServiceModel.Dispatcher.InstanceContextIdleCallback" />, который уведомляет службу WCF, когда объект <see cref="T:System.ServiceModel.InstanceContext" /> должен быть закрыт и перезапущен.</param>
        <param name="instanceContext">Текущий контекст <see cref="T:System.ServiceModel.InstanceContext" />.</param>
        <summary>Вызывается, когда метод <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" /> возвращает значение <see langword="false" />, чтобы позволить разработчику обеспечить обратный вызов с целью уведомить WCF, когда существование объекта <see cref="T:System.ServiceModel.InstanceContext" />завершается.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `false` <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> <xref:System.ServiceModel.InstanceContext> Метод вызывается, <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> когда метод возвращает, чтобы предоставить WCF объекту, который используется для информирования среды выполнения о завершении работы. <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle%2A> Когда объект уведомляет среду выполнения <xref:System.ServiceModel.InstanceContext> о завершении работы, WCF вызывает <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> один раз. <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> Этот цикл продолжается, пока метод <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> не вернет значение `true`, а контекст не будет закрыт и уничтожен.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
