<Type Name="IParameterInspector" FullName="System.ServiceModel.Dispatcher.IParameterInspector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ce14953aaf6b791c89c5a49fa389441aad8b140c" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70525255" /></Metadata><TypeSignature Language="C#" Value="public interface IParameterInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IParameterInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IParameterInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IParameterInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IParameterInspector" />
  <TypeSignature Language="F#" Value="type IParameterInspector = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Определяет контракт, реализуемый пользовательскими инспекторами параметров, которые обеспечивают проверку или модификацию данных до и после вызовов со стороны службы или клиента.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Реализуйте интерфейс <xref:System.ServiceModel.Dispatcher.IParameterInspector> для создания пользовательского инспектора параметров, который может проверять и модифицировать содержимое вызова до и после осуществления вызова со стороны приложения клиента или службы.  
  
 Для исходящих вызовов от клиента инспектор вызывается до сериализации содержимого запроса и направляется в службу. Инспектор также вызывается после десериализации ответного сообщения, но до передачи возвращаемых значений в прокси-метод.  
  
 Для входящих вызовов к службе инспектор вызывается после десериализации параметров, но до их передачи в операцию службы.  
  
 Используйте свойство <xref:System.ServiceModel.Dispatcher.ClientOperation.ParameterInspectors%2A?displayProperty=nameWithType> или <xref:System.ServiceModel.Dispatcher.DispatchOperation.ParameterInspectors%2A?displayProperty=nameWithType> для добавления реализации <xref:System.ServiceModel.Dispatcher.IParameterInspector> в коллекцию инспекторов для конкретной операции.  
  
 **Примечание** . Разработчики и администраторы должны обеспечить понимание взаимодействия с другими <xref:System.ServiceModel.Dispatcher.IParameterInspector> реализациями.  
  
   
  
## Examples  
 В следующем примере кода показана реализация <xref:System.ServiceModel.Dispatcher.IParameterInspector>, которая  
  
-   записывает имя операции и возвращаемое значение в консоль после десериализации ответного сообщения службой или сериализации сообщения запроса клиентом;  
  
-   записывает имя операции в консоль после десериализации ответного сообщения клиентом или после сериализации сообщения службой.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 В следующем примере кода демонстрируется использование поведения <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> или <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> для вставки объектов <xref:System.ServiceModel.Dispatcher.IParameterInspector>.  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterCall">
      <MemberSignature Language="C#" Value="public void AfterCall (string operationName, object[] outputs, object returnValue, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AfterCall(string operationName, object[] outputs, object returnValue, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AfterCall (operationName As String, outputs As Object(), returnValue As Object, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AfterCall(System::String ^ operationName, cli::array &lt;System::Object ^&gt; ^ outputs, System::Object ^ returnValue, System::Object ^ correlationState);" />
      <MemberSignature Language="F#" Value="abstract member AfterCall : string * obj[] * obj * obj -&gt; unit" Usage="iParameterInspector.AfterCall (operationName, outputs, returnValue, correlationState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationName" Type="System.String" />
        <Parameter Name="outputs" Type="System.Object[]" />
        <Parameter Name="returnValue" Type="System.Object" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="operationName">Имя вызываемой операции.</param>
        <param name="outputs">Любые выходные объекты.</param>
        <param name="returnValue">Возвращаемое значение операции.</param>
        <param name="correlationState">Любое состояние корреляции, возвращаемое из метода <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" />, или <see langword="null" />.</param>
        <summary>Вызывается после возвращения вызовов клиента и до отправления ответных сообщений службы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для исходящих вызовов от клиента инспектор вызывается до сериализации содержимого запроса и направляется в службу. Инспектор также вызывается после десериализации ответного сообщения, но до передачи возвращаемых значений в прокси-метод.  
  
 Для входящих вызовов к службе инспектор вызывается после десериализации параметров, но до их передачи в операцию службы.  
  
   
  
## Examples  
 В следующем примере кода показана реализация <xref:System.ServiceModel.Dispatcher.IParameterInspector>, которая  
  
-   записывает имя операции и возвращаемое значение в консоль после десериализации ответного сообщения службой или сериализации сообщения запроса клиентом;  
  
-   записывает имя операции в консоль после десериализации ответного сообщения клиентом или после сериализации сообщения службой.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 В следующем примере демонстрируется использование поведения <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> или <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> для вставки объектов <xref:System.ServiceModel.Dispatcher.IParameterInspector>.  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeCall">
      <MemberSignature Language="C#" Value="public object BeforeCall (string operationName, object[] inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object BeforeCall(string operationName, object[] inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeforeCall (operationName As String, inputs As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ BeforeCall(System::String ^ operationName, cli::array &lt;System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="abstract member BeforeCall : string * obj[] -&gt; obj" Usage="iParameterInspector.BeforeCall (operationName, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationName" Type="System.String" />
        <Parameter Name="inputs" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="operationName">Имя операции.</param>
        <param name="inputs">Объекты, передаваемые в метод клиентом.</param>
        <summary>Вызывается до отправления вызовов клиента и после возвращения ответных сообщений службы.</summary>
        <returns>Состояние корреляции, возвращаемое в качестве параметра <paramref name="correlationState" /> в методе <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" />. Передайте значение <see langword="null" />, если состояние корреляции применяться не будет.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для исходящих вызовов от клиента инспектор вызывается до сериализации содержимого запроса и направляется в службу. Инспектор также вызывается после десериализации ответного сообщения, но до передачи возвращаемых значений в прокси-метод.  
  
 Для входящих вызовов в службу инспектор вызывается после десериализации содержимого запроса и передачи в операцию службы, и до сериализации содержимого ответного сообщения и отправления клиенту.  
  
   
  
## Examples  
 В следующем примере кода показана реализация <xref:System.ServiceModel.Dispatcher.IParameterInspector>, которая  
  
-   записывает имя операции и возвращаемое значение в консоль после десериализации ответного сообщения службой или сериализации сообщения запроса клиентом;  
  
-   записывает имя операции в консоль после десериализации ответного сообщения клиентом или после сериализации сообщения службой.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 В следующем примере кода демонстрируется использование поведения <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> или <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> для вставки объектов <xref:System.ServiceModel.Dispatcher.IParameterInspector>.  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
