<Type Name="QueryStringConverter" FullName="System.ServiceModel.Dispatcher.QueryStringConverter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f21394278c041232441fd431fd04b6b8f65ebf30" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70702189" /></Metadata><TypeSignature Language="C#" Value="public class QueryStringConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit QueryStringConverter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.QueryStringConverter" />
  <TypeSignature Language="VB.NET" Value="Public Class QueryStringConverter" />
  <TypeSignature Language="C++ CLI" Value="public ref class QueryStringConverter" />
  <TypeSignature Language="F#" Value="type QueryStringConverter = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Web</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Этот класс преобразует параметр в строке запроса в объект нужного типа. Он также может преобразовывать параметр из объекта в представление строки запроса.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Параметры могут задаваться в строке запроса внутри URL-адреса. Этот класс берет параметры, указанные в строке, и преобразует их в объекты. Например, задается следующий контракт.  
  
```csharp
[ServiceContract]  
interface Calculator  
{  
   [WebGet(UriTemplate="Add?n1={n1}&n2={n2}")]  
   [OperationContract]  
   long Add(long n1, long n2);  
}  
```  
  
 Служба Windows Communication Foundation (WCF) реализует этот интерфейс и предоставляет его в конечной точке с помощью  <xref:System.ServiceModel.Description.WebHttpBehavior> . `http://localhost:8000/MyCalcService` Операция службы может быть вызвана путем отправки HTTP GET к  `http://localhost:8000/MyCalcService/Add?n1=10&n2=5` .  `Add` Объект <xref:System.ServiceModel.Dispatcher.QueryStringConverter> получает этот URL-адрес и преобразует два параметра (N1 и N2), указанные в URL- `long` адресе, в два объекта с соответствующими значениями.  
  
 Класс можно вывести из объекта <xref:System.ServiceModel.Dispatcher.QueryStringConverter>, чтобы управлять отображением параметров строки запроса в параметрах служебной операции.  
  
 Объект <xref:System.ServiceModel.Dispatcher.QueryStringConverter> по умолчанию поддерживает следующие типы:  
  
-   <xref:System.Byte>  
  
-   <xref:System.SByte>  
  
-   <xref:System.Int16>  
  
-   <xref:System.Int32>  
  
-   <xref:System.Int64>  
  
-   <xref:System.UInt16>  
  
-   <xref:System.UInt32>  
  
-   <xref:System.UInt64>  
  
-   <xref:System.Single>  
  
-   <xref:System.Double>  
  
-   <xref:System.Char>  
  
-   <xref:System.Decimal>  
  
-   <xref:System.Boolean>  
  
-   <xref:System.String>  
  
-   <xref:System.DateTime>  
  
-   <xref:System.TimeSpan>  
  
-   <xref:System.Guid>  
  
-   Массив <xref:System.Byte>  
  
-   <xref:System.Uri>  
  
-   <xref:System.Object>  
  
-   <xref:System.DateTimeOffset>  
  
-   перечислениям;  
  
-   Типы, содержащие `TypeConverterAttribute`, который может преобразовать типы в строковое представление и обратно.  
  
   
  
## Examples  
 В следующем образце кода демонстрируется, как использовать класс <xref:System.ServiceModel.Dispatcher.QueryStringConverter> для преобразования строки в 32-разрядное целое число и обратно.  
  
 [!code-csharp[QueryStringConverter#0](~/samples/snippets/csharp/VS_Snippets_CFX/querystringconverter/cs/program.cs#0)]
 [!code-vb[QueryStringConverter#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/querystringconverter/vb/program.vb#0)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public QueryStringConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.QueryStringConverter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; QueryStringConverter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.ServiceModel.Dispatcher.QueryStringConverter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем образце кода демонстрируется, как создать экземпляр класса <xref:System.ServiceModel.Dispatcher.QueryStringConverter>.  
  
 [!code-csharp[QueryStringConverter#1](~/samples/snippets/csharp/VS_Snippets_CFX/querystringconverter/cs/program.cs#1)]
 [!code-vb[QueryStringConverter#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/querystringconverter/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvert">
      <MemberSignature Language="C#" Value="public virtual bool CanConvert (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvert(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.QueryStringConverter.CanConvert(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConvert(Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member CanConvert : Type -&gt; bool&#xA;override this.CanConvert : Type -&gt; bool" Usage="queryStringConverter.CanConvert type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">Преобразуемый объект <see cref="T:System.Type" />.</param>
        <summary>Определяет, может ли указанный тип быть преобразован из строкового представления и обратно.</summary>
        <returns>Значение, указывающее, возможно ли преобразование типа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем образце кода демонстрируется, как определить, возможно ли преобразование объекта <xref:System.ServiceModel.Dispatcher.QueryStringConverter> в указанный тип и обратно.  
  
 [!code-csharp[QueryStringConverter#2](~/samples/snippets/csharp/VS_Snippets_CFX/querystringconverter/cs/program.cs#2)]
 [!code-vb[QueryStringConverter#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/querystringconverter/vb/program.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertStringToValue">
      <MemberSignature Language="C#" Value="public virtual object ConvertStringToValue (string parameter, Type parameterType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ConvertStringToValue(string parameter, class System.Type parameterType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.QueryStringConverter.ConvertStringToValue(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConvertStringToValue (parameter As String, parameterType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ConvertStringToValue(System::String ^ parameter, Type ^ parameterType);" />
      <MemberSignature Language="F#" Value="abstract member ConvertStringToValue : string * Type -&gt; obj&#xA;override this.ConvertStringToValue : string * Type -&gt; obj" Usage="queryStringConverter.ConvertStringToValue (parameter, parameterType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.String" />
        <Parameter Name="parameterType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="parameter">Строковая форма параметра и его значение.</param>
        <param name="parameterType"><see cref="T:System.Type" />, в который преобразуется параметр.</param>
        <summary>Преобразует параметр строки запроса в указанный тип.</summary>
        <returns>Преобразованный параметр.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если параметр `parameterType` является типом значения и имеет значение `null`, то возвращается значение по умолчанию параметра `parameterType`.  
  
   
  
## Examples  
 В следующем образце кода демонстрируется, как преобразовать строку в указанный тип.  
  
 [!code-csharp[QueryStringConverter#2](~/samples/snippets/csharp/VS_Snippets_CFX/querystringconverter/cs/program.cs#2)]
 [!code-vb[QueryStringConverter#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/querystringconverter/vb/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">Предоставленная строка имеет неправильный формат.</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertValueToString">
      <MemberSignature Language="C#" Value="public virtual string ConvertValueToString (object parameter, Type parameterType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ConvertValueToString(object parameter, class System.Type parameterType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.QueryStringConverter.ConvertValueToString(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConvertValueToString (parameter As Object, parameterType As Type) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ConvertValueToString(System::Object ^ parameter, Type ^ parameterType);" />
      <MemberSignature Language="F#" Value="abstract member ConvertValueToString : obj * Type -&gt; string&#xA;override this.ConvertValueToString : obj * Type -&gt; string" Usage="queryStringConverter.ConvertValueToString (parameter, parameterType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="parameterType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="parameter">Преобразуемый параметр.</param>
        <param name="parameterType">Тип <see cref="T:System.Type" /> параметра для преобразования.</param>
        <summary>Преобразует параметр в представление строки запроса.</summary>
        <returns>Значения и имя параметра.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем образце кода демонстрируется, как преобразовать типизированное значение в строковое представление значения.  
  
 [!code-csharp[QueryStringConverter#3](~/samples/snippets/csharp/VS_Snippets_CFX/querystringconverter/cs/program.cs#3)]
 [!code-vb[QueryStringConverter#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/querystringconverter/vb/program.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
