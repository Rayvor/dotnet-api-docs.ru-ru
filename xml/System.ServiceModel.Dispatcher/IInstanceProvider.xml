<Type Name="IInstanceProvider" FullName="System.ServiceModel.Dispatcher.IInstanceProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8d7f5cb8ac72f0db7316c602201327733c3521a0" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70403540" /></Metadata><TypeSignature Language="C#" Value="public interface IInstanceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceProvider" />
  <TypeSignature Language="F#" Value="type IInstanceProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="041e2-101">Объявляются методы, предоставляющие объект службы или перезапускающие объект службы для службы Windows Communication Foundation (WCF).</span><span class="sxs-lookup"><span data-stu-id="041e2-101">Declares methods that provide a service object or recycle a service object for a Windows Communication Foundation (WCF) service.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041e2-102">Для управления созданием и перезапуском объектов служб применяется интерфейс <xref:System.ServiceModel.Dispatcher.IInstanceProvider>, когда один из них запрашивается или освобождается объектом <xref:System.ServiceModel.InstanceContext>.</span><span class="sxs-lookup"><span data-stu-id="041e2-102">Implement the <xref:System.ServiceModel.Dispatcher.IInstanceProvider> interface to control the creation and recycling of service objects when one is requested or disposed by an <xref:System.ServiceModel.InstanceContext> object.</span></span>  
  
 <span data-ttu-id="041e2-103">После реализации интерфейса <xref:System.ServiceModel.Dispatcher.IInstanceProvider> необходимо сопоставить настраиваемому объекту экземпляра поставщика свойство <xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A> при помощи либо поведения конечной точки (объект <xref:System.ServiceModel.Description.IEndpointBehavior>), либо поведения контракта (объект <xref:System.ServiceModel.Description.IContractBehavior>).</span><span class="sxs-lookup"><span data-stu-id="041e2-103">Once the <xref:System.ServiceModel.Dispatcher.IInstanceProvider> interface is implemented, you must assign your custom instance provider object to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A> property using either an endpoint behavior (a <xref:System.ServiceModel.Description.IEndpointBehavior> object) or a contract behavior (a <xref:System.ServiceModel.Description.IContractBehavior> object).</span></span>  
  
 <span data-ttu-id="041e2-104">Если механизм вставки относится к поведению конечной точки, то также можно применить объект <xref:System.ServiceModel.Configuration.BehaviorExtensionElement>, который может вставить ваше настраиваемое поведение при помощи файла конфигурации.</span><span class="sxs-lookup"><span data-stu-id="041e2-104">If the insertion mechanism is an endpoint behavior you can also implement a <xref:System.ServiceModel.Configuration.BehaviorExtensionElement> object that can insert your custom behavior using a configuration file.</span></span> <span data-ttu-id="041e2-105">Если механизм вставки относится к поведению контракта, то поведение можно вставить программным путем до открытия узла службы или же можно применить настраиваемый атрибут.</span><span class="sxs-lookup"><span data-stu-id="041e2-105">If the insertion mechanism is a contract behavior, you can insert the behavior programmatically prior to the opening of the service host or you can implement a custom attribute.</span></span> <span data-ttu-id="041e2-106">(Пример подхода поведения контракта см. в разделе «Примеры»).</span><span class="sxs-lookup"><span data-stu-id="041e2-106">(For an example of the contract behavior approach, see the Example section.)</span></span>  
  
 <span data-ttu-id="041e2-107">Объект <xref:System.ServiceModel.Dispatcher.IInstanceProvider> имеет два метода: <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> и <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>.</span><span class="sxs-lookup"><span data-stu-id="041e2-107"><xref:System.ServiceModel.Dispatcher.IInstanceProvider> has two methods, <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> and <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>.</span></span> <span data-ttu-id="041e2-108">Эти методы обычно реализуются для создания объектов службы с помощью конструктора без параметров или для инициализации или удаления некоторого состояния, связанного со временем существования объекта.</span><span class="sxs-lookup"><span data-stu-id="041e2-108">These methods are typically implemented to create service objects using a non-parameterless constructor or to initialize or dispose of some state related to the lifetime of the object.</span></span> <span data-ttu-id="041e2-109">Группирование объектов служб является примером одной из функциональных возможностей объекта <xref:System.ServiceModel.Dispatcher.IInstanceProvider>.</span><span class="sxs-lookup"><span data-stu-id="041e2-109">Service object pooling is one example of custom <xref:System.ServiceModel.Dispatcher.IInstanceProvider> functionality.</span></span>  
  
 <span data-ttu-id="041e2-110">Обычно объект <xref:System.ServiceModel.InstanceContext> вызывает метод <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>, когда объект <xref:System.ServiceModel.InstanceContext> создается, и вызывает метод <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>, когда объект <xref:System.ServiceModel.InstanceContext> закрывается.</span><span class="sxs-lookup"><span data-stu-id="041e2-110">Typically, the <xref:System.ServiceModel.InstanceContext> invokes the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> when the <xref:System.ServiceModel.InstanceContext> is first created and invokes the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> method when the <xref:System.ServiceModel.InstanceContext> is closed.</span></span>  
  
 <span data-ttu-id="041e2-111">Существует два пути выпуска объектом <xref:System.ServiceModel.InstanceContext> объекта службы до закрытия объекта <xref:System.ServiceModel.InstanceContext>.</span><span class="sxs-lookup"><span data-stu-id="041e2-111">There are two ways to cause an <xref:System.ServiceModel.InstanceContext> object to release a service object before the <xref:System.ServiceModel.InstanceContext> is closed.</span></span> <span data-ttu-id="041e2-112">Первый метод заключается в задании у объекта <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> свойства <xref:System.ServiceModel.ReleaseInstanceMode.AfterCall> или <xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall>.</span><span class="sxs-lookup"><span data-stu-id="041e2-112">The first method is to set the <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> to <xref:System.ServiceModel.ReleaseInstanceMode.AfterCall> or <xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall>.</span></span> <span data-ttu-id="041e2-113">Второй метод заключается в вызове метода <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A>.</span><span class="sxs-lookup"><span data-stu-id="041e2-113">The second method is to call the <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> method.</span></span> <span data-ttu-id="041e2-114">Если это выполняется, то объект <xref:System.ServiceModel.InstanceContext> вызывает метод <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> в экземпляре поставщика диспетчера.</span><span class="sxs-lookup"><span data-stu-id="041e2-114">If this is done, the <xref:System.ServiceModel.InstanceContext> calls the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> method on the dispatcher's instance provider.</span></span> <span data-ttu-id="041e2-115">Если новое сообщение поступает после выпуска экземпляра, WCF создает новый экземпляр с помощью <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> метода.</span><span class="sxs-lookup"><span data-stu-id="041e2-115">If a new message arrives after the instance has been released, WCF creates a new instance using the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="041e2-116">Если свойство <xref:System.ServiceModel.InstanceContextMode> службы имеет значение <xref:System.ServiceModel.InstanceContextMode.Single>, то система не вызывает метод <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> или <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> даже когда пользователь не предоставляет хорошо известный объект служб, если только пользователь не вызывает непосредственно метод <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A>, а затем метод <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>.</span><span class="sxs-lookup"><span data-stu-id="041e2-116">If the <xref:System.ServiceModel.InstanceContextMode> of the service is <xref:System.ServiceModel.InstanceContextMode.Single>, the system does not call the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> or <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> methods even when the user did not provide a well-known service object unless the user directly calls <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> and then calls <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041e2-117">В следующем образце кода показано, как применять объект <xref:System.ServiceModel.Dispatcher.IInstanceProvider>, который предоставляет «одноэлементное» поведение; он всегда возвращает одинаковый экземпляр службы и не перезапускает его.</span><span class="sxs-lookup"><span data-stu-id="041e2-117">The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</span></span>  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 <span data-ttu-id="041e2-118">В следующем образце кода показано, как применять настраиваемый атрибут, реализующий <xref:System.ServiceModel.Description.IContractBehavior> для вставки настраиваемого поставщика экземпляра службы.</span><span class="sxs-lookup"><span data-stu-id="041e2-118">The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider.</span></span> <span data-ttu-id="041e2-119">Он также реализует <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, который связывает его использование с конкретным контрактом.</span><span class="sxs-lookup"><span data-stu-id="041e2-119">It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.</span></span>  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetInstance">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="041e2-120">Возвращает объект службы.</span><span class="sxs-lookup"><span data-stu-id="041e2-120">Returns a service object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member GetInstance : System.ServiceModel.InstanceContext -&gt; obj" Usage="iInstanceProvider.GetInstance instanceContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext"><span data-ttu-id="041e2-121">Текущий объект <see cref="T:System.ServiceModel.InstanceContext" />.</span><span class="sxs-lookup"><span data-stu-id="041e2-121">The current <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></param>
        <summary><span data-ttu-id="041e2-122">Возвращает объект службы, которому дан указанный объект <see cref="T:System.ServiceModel.InstanceContext" />.</span><span class="sxs-lookup"><span data-stu-id="041e2-122">Returns a service object given the specified <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></summary>
        <returns><span data-ttu-id="041e2-123">Объект службы, задаваемый пользователем.</span><span class="sxs-lookup"><span data-stu-id="041e2-123">A user-defined service object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041e2-124"><xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29> Используйте метод для управления точным объектом службы, получаемым службой WCF при попытке создать новую службу.</span><span class="sxs-lookup"><span data-stu-id="041e2-124">Use the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29> method to control the exact service object that a WCF service receives when it attempts to create a new one.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041e2-125">В следующем образце кода показано, как применять объект <xref:System.ServiceModel.Dispatcher.IInstanceProvider>, который предоставляет «одноэлементное» поведение; он всегда возвращает одинаковый экземпляр службы и не перезапускает его.</span><span class="sxs-lookup"><span data-stu-id="041e2-125">The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</span></span>  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 <span data-ttu-id="041e2-126">В следующем образце кода показано, как применять настраиваемый атрибут, реализующий <xref:System.ServiceModel.Description.IContractBehavior> для вставки настраиваемого поставщика экземпляра службы.</span><span class="sxs-lookup"><span data-stu-id="041e2-126">The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider.</span></span> <span data-ttu-id="041e2-127">Он также реализует <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, который связывает его использование с конкретным контрактом.</span><span class="sxs-lookup"><span data-stu-id="041e2-127">It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.</span></span>  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member GetInstance : System.ServiceModel.InstanceContext * System.ServiceModel.Channels.Message -&gt; obj" Usage="iInstanceProvider.GetInstance (instanceContext, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="instanceContext"><span data-ttu-id="041e2-128">Текущий объект <see cref="T:System.ServiceModel.InstanceContext" />.</span><span class="sxs-lookup"><span data-stu-id="041e2-128">The current <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></param>
        <param name="message"><span data-ttu-id="041e2-129">Сообщение, вызывающее создание объекта службы.</span><span class="sxs-lookup"><span data-stu-id="041e2-129">The message that triggered the creation of a service object.</span></span></param>
        <summary><span data-ttu-id="041e2-130">Возвращает объект службы, которому дан указанный объект <see cref="T:System.ServiceModel.InstanceContext" />.</span><span class="sxs-lookup"><span data-stu-id="041e2-130">Returns a service object given the specified <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></summary>
        <returns><span data-ttu-id="041e2-131">Объект службы.</span><span class="sxs-lookup"><span data-stu-id="041e2-131">The service object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041e2-132"><xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29> Используйте метод для управления точным объектом службы, получаемым службой WCF при попытке создать новую службу.</span><span class="sxs-lookup"><span data-stu-id="041e2-132">Use the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29> method to control the exact service object that a WCF service receives when it attempts to create a new one.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041e2-133">В следующем образце кода показано, как применять объект <xref:System.ServiceModel.Dispatcher.IInstanceProvider>, который предоставляет «одноэлементное» поведение; он всегда возвращает одинаковый экземпляр службы и не перезапускает его.</span><span class="sxs-lookup"><span data-stu-id="041e2-133">The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</span></span>  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 <span data-ttu-id="041e2-134">В следующем образце кода показано, как применять настраиваемый атрибут, реализующий <xref:System.ServiceModel.Description.IContractBehavior> для вставки настраиваемого поставщика экземпляра службы.</span><span class="sxs-lookup"><span data-stu-id="041e2-134">The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider.</span></span> <span data-ttu-id="041e2-135">Он также реализует <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, который связывает его использование с конкретным контрактом.</span><span class="sxs-lookup"><span data-stu-id="041e2-135">It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.</span></span>  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseInstance">
      <MemberSignature Language="C#" Value="public void ReleaseInstance (System.ServiceModel.InstanceContext instanceContext, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseInstance(class System.ServiceModel.InstanceContext instanceContext, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member ReleaseInstance : System.ServiceModel.InstanceContext * obj -&gt; unit" Usage="iInstanceProvider.ReleaseInstance (instanceContext, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceContext"><span data-ttu-id="041e2-136">Контекст экземпляра службы.</span><span class="sxs-lookup"><span data-stu-id="041e2-136">The service's instance context.</span></span></param>
        <param name="instance"><span data-ttu-id="041e2-137">Перезапускаемый объект службы.</span><span class="sxs-lookup"><span data-stu-id="041e2-137">The service object to be recycled.</span></span></param>
        <summary><span data-ttu-id="041e2-138">Вызывается, когда объект <see cref="T:System.ServiceModel.InstanceContext" /> перезапускает объект службы.</span><span class="sxs-lookup"><span data-stu-id="041e2-138">Called when an <see cref="T:System.ServiceModel.InstanceContext" /> object recycles a service object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041e2-139">Для осуществления настраиваемого освобождения ресурсов или других настроек перезапуска при перезапуске службой объекта службы используйте метод <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>.</span><span class="sxs-lookup"><span data-stu-id="041e2-139">Use the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> method to perform some custom resource disposal or other recycling customization when a service recycles a service object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
