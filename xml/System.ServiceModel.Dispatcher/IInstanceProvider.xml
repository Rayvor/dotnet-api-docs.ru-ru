<Type Name="IInstanceProvider" FullName="System.ServiceModel.Dispatcher.IInstanceProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9add5e6cc7de34a7ed7cbeac8c904bfc6af4be62" /><Meta Name="ms.sourcegitcommit" Value="e7974886b08aa83a8fb461e8550f31a7d4331ee3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="07/23/2019" /><Meta Name="ms.locfileid" Value="68392591" /></Metadata><TypeSignature Language="C#" Value="public interface IInstanceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceProvider" />
  <TypeSignature Language="F#" Value="type IInstanceProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Объявляются методы, предоставляющие объект службы или перезапускающие объект службы для службы Windows Communication Foundation (WCF).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для управления созданием и перезапуском объектов служб применяется интерфейс <xref:System.ServiceModel.Dispatcher.IInstanceProvider>, когда один из них запрашивается или освобождается объектом <xref:System.ServiceModel.InstanceContext>.  
  
 После реализации интерфейса <xref:System.ServiceModel.Dispatcher.IInstanceProvider> необходимо сопоставить настраиваемому объекту экземпляра поставщика свойство <xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A> при помощи либо поведения конечной точки (объект <xref:System.ServiceModel.Description.IEndpointBehavior>), либо поведения контракта (объект <xref:System.ServiceModel.Description.IContractBehavior>).  
  
 Если механизм вставки относится к поведению конечной точки, то также можно применить объект <xref:System.ServiceModel.Configuration.BehaviorExtensionElement>, который может вставить ваше настраиваемое поведение при помощи файла конфигурации. Если механизм вставки относится к поведению контракта, то поведение можно вставить программным путем до открытия узла службы или же можно применить настраиваемый атрибут. (Пример подхода поведения контракта см. в разделе «Примеры»).  
  
 Объект <xref:System.ServiceModel.Dispatcher.IInstanceProvider> имеет два метода: <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> и <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>. Эти методы обычно реализуются для создания объектов службы с помощью конструктора без параметров или для инициализации или удаления некоторого состояния, связанного со временем существования объекта. Группирование объектов служб является примером одной из функциональных возможностей объекта <xref:System.ServiceModel.Dispatcher.IInstanceProvider>.  
  
 Обычно объект <xref:System.ServiceModel.InstanceContext> вызывает метод <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>, когда объект <xref:System.ServiceModel.InstanceContext> создается, и вызывает метод <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>, когда объект <xref:System.ServiceModel.InstanceContext> закрывается.  
  
 Существует два пути выпуска объектом <xref:System.ServiceModel.InstanceContext> объекта службы до закрытия объекта <xref:System.ServiceModel.InstanceContext>. Первый метод заключается в задании у объекта <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> свойства <xref:System.ServiceModel.ReleaseInstanceMode.AfterCall> или <xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall>. Второй метод заключается в вызове метода <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A>. Если это выполняется, то объект <xref:System.ServiceModel.InstanceContext> вызывает метод <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> в экземпляре поставщика диспетчера. Если новое сообщение поступает после выпуска экземпляра, WCF создает новый экземпляр с помощью <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> метода.  
  
> [!NOTE]
>  Если свойство <xref:System.ServiceModel.InstanceContextMode> службы имеет значение <xref:System.ServiceModel.InstanceContextMode.Single>, то система не вызывает метод <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> или <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> даже когда пользователь не предоставляет хорошо известный объект служб, если только пользователь не вызывает непосредственно метод <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A>, а затем метод <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>.  
  
   
  
## Examples  
 В следующем образце кода показано, как применять объект <xref:System.ServiceModel.Dispatcher.IInstanceProvider>, который предоставляет «одноэлементное» поведение; он всегда возвращает одинаковый экземпляр службы и не перезапускает его.  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 В следующем образце кода показано, как применять настраиваемый атрибут, реализующий <xref:System.ServiceModel.Description.IContractBehavior> для вставки настраиваемого поставщика экземпляра службы. Он также реализует <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, который связывает его использование с конкретным контрактом.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetInstance">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает объект службы.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member GetInstance : System.ServiceModel.InstanceContext -&gt; obj" Usage="iInstanceProvider.GetInstance instanceContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Текущий объект <see cref="T:System.ServiceModel.InstanceContext" />.</param>
        <summary>Возвращает объект службы, которому дан указанный объект <see cref="T:System.ServiceModel.InstanceContext" />.</summary>
        <returns>Объект службы, задаваемый пользователем.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29> Используйте метод для управления точным объектом службы, получаемым службой WCF при попытке создать новую службу.  
  
   
  
## Examples  
 В следующем образце кода показано, как применять объект <xref:System.ServiceModel.Dispatcher.IInstanceProvider>, который предоставляет «одноэлементное» поведение; он всегда возвращает одинаковый экземпляр службы и не перезапускает его.  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 В следующем образце кода показано, как применять настраиваемый атрибут, реализующий <xref:System.ServiceModel.Description.IContractBehavior> для вставки настраиваемого поставщика экземпляра службы. Он также реализует <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, который связывает его использование с конкретным контрактом.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member GetInstance : System.ServiceModel.InstanceContext * System.ServiceModel.Channels.Message -&gt; obj" Usage="iInstanceProvider.GetInstance (instanceContext, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Текущий объект <see cref="T:System.ServiceModel.InstanceContext" />.</param>
        <param name="message">Сообщение, вызывающее создание объекта службы.</param>
        <summary>Возвращает объект службы, которому дан указанный объект <see cref="T:System.ServiceModel.InstanceContext" />.</summary>
        <returns>Объект службы.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29> Используйте метод для управления точным объектом службы, получаемым службой WCF при попытке создать новую службу.  
  
   
  
## Examples  
 В следующем образце кода показано, как применять объект <xref:System.ServiceModel.Dispatcher.IInstanceProvider>, который предоставляет «одноэлементное» поведение; он всегда возвращает одинаковый экземпляр службы и не перезапускает его.  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 В следующем образце кода показано, как применять настраиваемый атрибут, реализующий <xref:System.ServiceModel.Description.IContractBehavior> для вставки настраиваемого поставщика экземпляра службы. Он также реализует <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, который связывает его использование с конкретным контрактом.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseInstance">
      <MemberSignature Language="C#" Value="public void ReleaseInstance (System.ServiceModel.InstanceContext instanceContext, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseInstance(class System.ServiceModel.InstanceContext instanceContext, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member ReleaseInstance : System.ServiceModel.InstanceContext * obj -&gt; unit" Usage="iInstanceProvider.ReleaseInstance (instanceContext, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Контекст экземпляра службы.</param>
        <param name="instance">Перезапускаемый объект службы.</param>
        <summary>Вызывается, когда объект <see cref="T:System.ServiceModel.InstanceContext" /> перезапускает объект службы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для осуществления настраиваемого освобождения ресурсов или других настроек перезапуска при перезапуске службой объекта службы используйте метод <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>