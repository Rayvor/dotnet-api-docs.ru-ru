<Type Name="PEReader" FullName="System.Reflection.PortableExecutable.PEReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a53f2b8559f81b4099ca583f6f30750a242adb1b" /><Meta Name="ms.sourcegitcommit" Value="c573d537afba2d4c1463538f1095f2f155025464" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="10/16/2019" /><Meta Name="ms.locfileid" Value="72396607" /></Metadata><TypeSignature Language="C#" Value="public sealed class PEReader : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PEReader extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.PortableExecutable.PEReader" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PEReader&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class PEReader sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type PEReader = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Metadata</AssemblyName>
    <AssemblyVersion>1.0.22.0</AssemblyVersion>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
    <AssemblyVersion>1.4.1.0</AssemblyVersion>
    <AssemblyVersion>1.4.2.0</AssemblyVersion>
    <AssemblyVersion>1.4.3.0</AssemblyVersion>
    <AssemblyVersion>1.4.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="693f8-101">Предоставляет средство чтения для переносимых исполняемых (PE) файлов.</span><span class="sxs-lookup"><span data-stu-id="693f8-101">Provides a reader for Portable Executable format (PE) files.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="693f8-102">Реализация является потокобезопасной.</span><span class="sxs-lookup"><span data-stu-id="693f8-102">The implementation is thread-safe.</span></span> <span data-ttu-id="693f8-103">То есть несколько потоков могут считывать данные из модуля чтения параллельно.</span><span class="sxs-lookup"><span data-stu-id="693f8-103">That is, multiple threads can read data from the reader in parallel.</span></span> <span data-ttu-id="693f8-104">Удаление модуля чтения не является потокобезопасным (см. <xref:System.Reflection.PortableExecutable.PEReader.Dispose>).</span><span class="sxs-lookup"><span data-stu-id="693f8-104">Disposal of the reader is not thread-safe (see <xref:System.Reflection.PortableExecutable.PEReader.Dispose>).</span></span>

          ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (System.Collections.Immutable.ImmutableArray&lt;byte&gt; peImage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Collections.Immutable.ImmutableArray`1&lt;unsigned int8&gt; peImage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.Collections.Immutable.ImmutableArray{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peImage As ImmutableArray(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::Collections::Immutable::ImmutableArray&lt;System::Byte&gt; peImage);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : System.Collections.Immutable.ImmutableArray&lt;byte&gt; -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader peImage" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peImage" Type="System.Collections.Immutable.ImmutableArray&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="peImage"><span data-ttu-id="693f8-105">Неизменяемый массив байтов, представляющий образ PE.</span><span class="sxs-lookup"><span data-stu-id="693f8-105">An immutable array of bytes representing the PE image.</span></span></param>
        <summary><span data-ttu-id="693f8-106">Создает средство чтения переносимых исполняемых файлов с использованием образа PE, хранящегося в массиве байтов.</span><span class="sxs-lookup"><span data-stu-id="693f8-106">Creates a Portable Executable reader over a PE image stored in a byte array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="693f8-107">Содержимое изображения не считывается во время создания <xref:System.Reflection.PortableExecutable.PEReader></span><span class="sxs-lookup"><span data-stu-id="693f8-107">The content of the image is not read during the construction of the <xref:System.Reflection.PortableExecutable.PEReader></span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="693f8-108"><paramref name="peImage" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="693f8-108"><paramref name="peImage" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (System.IO.Stream peStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream peStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::IO::Stream ^ peStream);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : System.IO.Stream -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader peStream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="peStream"><span data-ttu-id="693f8-109">Поток образа PE.</span><span class="sxs-lookup"><span data-stu-id="693f8-109">PE image stream.</span></span></param>
        <summary><span data-ttu-id="693f8-110">Создает средство чтения переносимых исполняемых файлов с использованием образа PE, хранящегося в потоке.</span><span class="sxs-lookup"><span data-stu-id="693f8-110">Creates a Portable Executable reader over a PE image stored in a stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="693f8-111">Владение потоком передается <xref:System.Reflection.PortableExecutable.PEReader> после успешной проверки аргументов конструктора.</span><span class="sxs-lookup"><span data-stu-id="693f8-111">Ownership of the stream is transferred to the <xref:System.Reflection.PortableExecutable.PEReader> upon successful validation of constructor arguments.</span></span> <span data-ttu-id="693f8-112">Он будет удален <xref:System.Reflection.PortableExecutable.PEReader>, и вызывающий объект не должен манипулировать им.</span><span class="sxs-lookup"><span data-stu-id="693f8-112">It will be disposed by the <xref:System.Reflection.PortableExecutable.PEReader> and the caller must not manipulate it.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="693f8-113">Свойство <paramref name="peStream" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="693f8-113"><paramref name="peStream" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (byte* peImage, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8* peImage, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::Byte* peImage, int size);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : nativeptr&lt;byte&gt; * int -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader (peImage, size)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peImage" Type="System.Byte*" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="peImage"><span data-ttu-id="693f8-114">Указатель на начало образа PE.</span><span class="sxs-lookup"><span data-stu-id="693f8-114">A pointer to the start of the PE image.</span></span></param>
        <param name="size"><span data-ttu-id="693f8-115">Размер образа PE.</span><span class="sxs-lookup"><span data-stu-id="693f8-115">The size of the PE image.</span></span></param>
        <summary><span data-ttu-id="693f8-116">Создает средство чтения переносимых исполняемых файлов с использованием образа PE, хранящегося в памяти.</span><span class="sxs-lookup"><span data-stu-id="693f8-116">Creates a Portable Executable reader over a PE image stored in memory.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="693f8-117">Память принадлежит вызывающему объекту и не освобождается при освобождении <xref:System.Reflection.PortableExecutable.PEReader>.</span><span class="sxs-lookup"><span data-stu-id="693f8-117">The memory is owned by the caller and not released on disposal of the <xref:System.Reflection.PortableExecutable.PEReader>.</span></span> <span data-ttu-id="693f8-118">Вызывающий объект отвечает за поддержание активности памяти и неизменности в течение времени существования <xref:System.Reflection.PortableExecutable.PEReader>.</span><span class="sxs-lookup"><span data-stu-id="693f8-118">The caller is responsible for keeping the memory alive and unmodified throughout the lifetime of the <xref:System.Reflection.PortableExecutable.PEReader>.</span></span>


<span data-ttu-id="693f8-119">Содержимое изображения не считывается во время создания <xref:System.Reflection.PortableExecutable.PEReader></span><span class="sxs-lookup"><span data-stu-id="693f8-119">The content of the image is not read during the construction of the <xref:System.Reflection.PortableExecutable.PEReader></span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="693f8-120">Свойство <paramref name="peImage" /> имеет значение <see cref="F:System.IntPtr.Zero" />.</span><span class="sxs-lookup"><span data-stu-id="693f8-120"><paramref name="peImage" /> is <see cref="F:System.IntPtr.Zero" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="693f8-121"><paramref name="size" /> является отрицательным значением.</span><span class="sxs-lookup"><span data-stu-id="693f8-121"><paramref name="size" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (System.IO.Stream peStream, System.Reflection.PortableExecutable.PEStreamOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream peStream, valuetype System.Reflection.PortableExecutable.PEStreamOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peStream As Stream, options As PEStreamOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::IO::Stream ^ peStream, System::Reflection::PortableExecutable::PEStreamOptions options);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : System.IO.Stream * System.Reflection.PortableExecutable.PEStreamOptions -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader (peStream, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peStream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Reflection.PortableExecutable.PEStreamOptions" />
      </Parameters>
      <Docs>
        <param name="peStream"><span data-ttu-id="693f8-122">Поток образа PE.</span><span class="sxs-lookup"><span data-stu-id="693f8-122">A PE image stream.</span></span></param>
        <param name="options"><span data-ttu-id="693f8-123">Параметры, которые определяют способ считывания разделов образа PE из потока.</span><span class="sxs-lookup"><span data-stu-id="693f8-123">Options specifying how sections of the PE image are read from the stream.</span></span></param>
        <summary><span data-ttu-id="693f8-124">Создает средство чтения переносимых исполняемых файлов с использованием образа PE, который хранится в потоке, начиная с его текущей позиции и заканчивая концом потока.</span><span class="sxs-lookup"><span data-stu-id="693f8-124">Creates a Portable Executable reader over a PE image stored in a stream beginning at its current position and ending at the end of the stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 
<span data-ttu-id="693f8-125">Если не указано значение <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType>, владение потоком передается <xref:System.Reflection.PortableExecutable.PEReader> после успешного выполнения проверки аргументов.</span><span class="sxs-lookup"><span data-stu-id="693f8-125">Unless <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> is specified, ownership of the stream is transferred to the <xref:System.Reflection.PortableExecutable.PEReader> upon successful argument validation.</span></span> <span data-ttu-id="693f8-126">Он будет удален <xref:System.Reflection.PortableExecutable.PEReader>, и вызывающий объект не должен манипулировать им.</span><span class="sxs-lookup"><span data-stu-id="693f8-126">It will be disposed by the <xref:System.Reflection.PortableExecutable.PEReader> and the caller must not manipulate it.</span></span>
 
<span data-ttu-id="693f8-127">Если не задано значение <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> или <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType>, данные не считываются из потока во время создания <xref:System.Reflection.PortableExecutable.PEReader>.</span><span class="sxs-lookup"><span data-stu-id="693f8-127">Unless <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> or <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType> is specified, no data is read from the stream during the construction of the <xref:System.Reflection.PortableExecutable.PEReader>.</span></span> <span data-ttu-id="693f8-128">Кроме того, поток не должен обрабатываться вызывающим объектом, пока <xref:System.Reflection.PortableExecutable.PEReader> является активным и неосвобожденным.</span><span class="sxs-lookup"><span data-stu-id="693f8-128">Furthermore, the stream must not be manipulated by caller while the <xref:System.Reflection.PortableExecutable.PEReader> is alive and undisposed.</span></span>
 
<span data-ttu-id="693f8-129">Если `options` включает <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> или <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType>, <xref:System.Reflection.PortableExecutable.PEReader> будет считывать все данные, запрошенные во время создания.</span><span class="sxs-lookup"><span data-stu-id="693f8-129">If `options` includes <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> or <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType>, the <xref:System.Reflection.PortableExecutable.PEReader> will have read all of the data requested during construction.</span></span> <span data-ttu-id="693f8-130">Таким образом, если также задано значение <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType>, вызывающий объект удерживает полный доступ к потоку и гарантирует, что он не будет обрабатываться <xref:System.Reflection.PortableExecutable.PEReader> после создания.</span><span class="sxs-lookup"><span data-stu-id="693f8-130">As such, if <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> is also specified, the caller retains full ownership of the stream and is assured that it will not be manipulated by the <xref:System.Reflection.PortableExecutable.PEReader> after construction.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="693f8-131">Свойство <paramref name="peStream" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="693f8-131"><paramref name="peStream" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="693f8-132">Недопустимое значение параметра <paramref name="options" />.</span><span class="sxs-lookup"><span data-stu-id="693f8-132"><paramref name="options" /> has an invalid value.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="693f8-133">Ошибка при чтении из потока (только при предварительном получении данных).</span><span class="sxs-lookup"><span data-stu-id="693f8-133">Error reading from the stream (only when prefetching data).</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="693f8-134"><see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata" /> указан, а PE-заголовки образа недопустимы.</span><span class="sxs-lookup"><span data-stu-id="693f8-134"><see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata" /> is specified, and the PE headers of the image are invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (byte* peImage, int size, bool isLoadedImage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8* peImage, int32 size, bool isLoadedImage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.Byte*,System.Int32,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::Byte* peImage, int size, bool isLoadedImage);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : nativeptr&lt;byte&gt; * int * bool -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader (peImage, size, isLoadedImage)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peImage" Type="System.Byte*" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="size" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="isLoadedImage" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="peImage"><span data-ttu-id="693f8-135">Указатель на начало образа PE.</span><span class="sxs-lookup"><span data-stu-id="693f8-135">A pointer to the start of the PE image.</span></span></param>
        <param name="size"><span data-ttu-id="693f8-136">Размер образа PE.</span><span class="sxs-lookup"><span data-stu-id="693f8-136">The size of the PE image.</span></span></param>
        <param name="isLoadedImage"><span data-ttu-id="693f8-137">Значение <see langword="true" />, если образ PE был загружен в память загрузчиком ОС; в противном случае значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="693f8-137"><see langword="true" /> if the PE image has been loaded into memory by the OS loader; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="693f8-138">Создает средство чтения переносимых исполняемых файлов с использованием образа PE, хранящегося в памяти.</span><span class="sxs-lookup"><span data-stu-id="693f8-138">Creates a Portable Executable reader over a PE image stored in memory.</span></span> <span data-ttu-id="693f8-139">Флаг указывает, был ли образ уже загружен в память.</span><span class="sxs-lookup"><span data-stu-id="693f8-139">A flag indicates whether the image has already been loaded into memory.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="693f8-140">Память принадлежит вызывающему объекту и не освобождается при удалении <xref:System.Reflection.PortableExecutable.PEReader>.</span><span class="sxs-lookup"><span data-stu-id="693f8-140">The memory is owned by the caller and is not released when the <xref:System.Reflection.PortableExecutable.PEReader> is disposed.</span></span> <span data-ttu-id="693f8-141">Вызывающий объект отвечает за поддержание активности памяти и неизменности в течение времени существования <xref:System.Reflection.PortableExecutable.PEReader>.</span><span class="sxs-lookup"><span data-stu-id="693f8-141">The caller is responsible for keeping the memory alive and unmodified throughout the lifetime of the <xref:System.Reflection.PortableExecutable.PEReader>.</span></span>


<span data-ttu-id="693f8-142">Содержимое изображения не считывается во время создания <xref:System.Reflection.PortableExecutable.PEReader></span><span class="sxs-lookup"><span data-stu-id="693f8-142">The content of the image is not read during the construction of the <xref:System.Reflection.PortableExecutable.PEReader></span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="693f8-143">Свойство <paramref name="peImage" /> имеет значение <see cref="F:System.IntPtr.Zero" />.</span><span class="sxs-lookup"><span data-stu-id="693f8-143"><paramref name="peImage" /> is <see cref="F:System.IntPtr.Zero" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="693f8-144"><paramref name="size" /> является отрицательным значением.</span><span class="sxs-lookup"><span data-stu-id="693f8-144"><paramref name="size" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (System.IO.Stream peStream, System.Reflection.PortableExecutable.PEStreamOptions options, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream peStream, valuetype System.Reflection.PortableExecutable.PEStreamOptions options, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peStream As Stream, options As PEStreamOptions, size As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::IO::Stream ^ peStream, System::Reflection::PortableExecutable::PEStreamOptions options, int size);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : System.IO.Stream * System.Reflection.PortableExecutable.PEStreamOptions * int -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader (peStream, options, size)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peStream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Reflection.PortableExecutable.PEStreamOptions" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="peStream"><span data-ttu-id="693f8-145">Поток образа PE.</span><span class="sxs-lookup"><span data-stu-id="693f8-145">A PE image stream.</span></span></param>
        <param name="options"><span data-ttu-id="693f8-146">Параметры, которые определяют способ считывания разделов образа PE из потока.</span><span class="sxs-lookup"><span data-stu-id="693f8-146">Options specifying how sections of the PE image are read from the stream.</span></span></param>
        <param name="size"><span data-ttu-id="693f8-147">Размер образа PE.</span><span class="sxs-lookup"><span data-stu-id="693f8-147">The PE image size.</span></span></param>
        <summary><span data-ttu-id="693f8-148">Создает средство чтения переносимых исполняемых файлов с использованием образа PE заданного размера, начиная с текущей позиции потока.</span><span class="sxs-lookup"><span data-stu-id="693f8-148">Creates a Portable Executable reader over a PE image of the given size beginning at the stream's current position.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="693f8-149">Если не указано значение <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType>, владение потоком передается <xref:System.Reflection.PortableExecutable.PEReader> после успешного выполнения проверки аргументов.</span><span class="sxs-lookup"><span data-stu-id="693f8-149">Unless <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> is specified, ownership of the stream is transferred to the <xref:System.Reflection.PortableExecutable.PEReader> upon successful argument validation.</span></span> <span data-ttu-id="693f8-150">Он будет удален <xref:System.Reflection.PortableExecutable.PEReader>, и вызывающий объект не должен манипулировать им.</span><span class="sxs-lookup"><span data-stu-id="693f8-150">It will be disposed by the <xref:System.Reflection.PortableExecutable.PEReader>, and the caller must not manipulate it.</span></span>
 
<span data-ttu-id="693f8-151">Если не задано значение <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> или <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType>, данные не считываются из потока во время создания <xref:System.Reflection.PortableExecutable.PEReader>.</span><span class="sxs-lookup"><span data-stu-id="693f8-151">Unless <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> or <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType> is specified, no data is read from the stream during the construction of the <xref:System.Reflection.PortableExecutable.PEReader>.</span></span> <span data-ttu-id="693f8-152">Кроме того, поток не должен обрабатываться вызывающим объектом, пока <xref:System.Reflection.PortableExecutable.PEReader> является активным и неуничтоженным.</span><span class="sxs-lookup"><span data-stu-id="693f8-152">Furthermore, the stream must not be manipulated by the caller while the <xref:System.Reflection.PortableExecutable.PEReader> is alive and undisposed.</span></span>
 
<span data-ttu-id="693f8-153">Если `options` включает значения <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> или <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType>, то <xref:System.Reflection.PortableExecutable.PEReader> будет считывать все данные, запрошенные во время создания.</span><span class="sxs-lookup"><span data-stu-id="693f8-153">If `options` includes the <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> or <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType> values, the <xref:System.Reflection.PortableExecutable.PEReader> will have read all of the data requested during construction.</span></span> <span data-ttu-id="693f8-154">Таким образом, если также задано значение <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType>, вызывающий объект удерживает полный доступ к потоку и гарантирует, что он не будет обрабатываться <xref:System.Reflection.PortableExecutable.PEReader> после создания.</span><span class="sxs-lookup"><span data-stu-id="693f8-154">As such, if <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType> is also specified, the caller retains full ownership of the stream and is assured that it will not be manipulated by the <xref:System.Reflection.PortableExecutable.PEReader> after construction.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="693f8-155">Параметр <paramref name="size" /> является отрицательным или превышает длину потока.</span><span class="sxs-lookup"><span data-stu-id="693f8-155"><paramref name="size" /> is negative or extends past the end of the stream.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="693f8-156">Ошибка при чтении из потока (только при предварительном получении данных).</span><span class="sxs-lookup"><span data-stu-id="693f8-156">Error reading from the stream (only when prefetching data).</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="693f8-157"><see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata" /> указан, а PE-заголовки образа недопустимы.</span><span class="sxs-lookup"><span data-stu-id="693f8-157"><see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata" /> is specified, and the PE headers of the image are invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="pEReader.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="693f8-158">Удаляет весь объем памяти, выделенный средством чтения.</span><span class="sxs-lookup"><span data-stu-id="693f8-158">Disposes all memory allocated by the reader.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!IMPORTANT]
> <span data-ttu-id="693f8-159"><xref:System.Reflection.PortableExecutable.PEReader.Dispose> можно вызывать несколько раз, но не параллельно.</span><span class="sxs-lookup"><span data-stu-id="693f8-159"><xref:System.Reflection.PortableExecutable.PEReader.Dispose>  can be called multiple times, but not in parallel.</span></span>
> <span data-ttu-id="693f8-160">Необязательно вызывать <xref:System.Reflection.PortableExecutable.PEReader.Dispose> параллельно с любой другой операцией в <xref:System.Reflection.PortableExecutable.PEReader> или при чтении из <xref:System.Reflection.PortableExecutable.PEMemoryBlock>S, полученного от средства чтения.</span><span class="sxs-lookup"><span data-stu-id="693f8-160">It is not safe to call <xref:System.Reflection.PortableExecutable.PEReader.Dispose> in parallel with any other operation on the <xref:System.Reflection.PortableExecutable.PEReader> or when reading from <xref:System.Reflection.PortableExecutable.PEMemoryBlock>s retrieved from the reader.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEntireImage">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEMemoryBlock GetEntireImage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PEMemoryBlock GetEntireImage() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.GetEntireImage" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEntireImage () As PEMemoryBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PEMemoryBlock GetEntireImage();" />
      <MemberSignature Language="F#" Value="member this.GetEntireImage : unit -&gt; System.Reflection.PortableExecutable.PEMemoryBlock" Usage="pEReader.GetEntireImage " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEMemoryBlock</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="693f8-161">Возвращает объект <see cref="T:System.Reflection.PortableExecutable.PEMemoryBlock" />, содержащий весь образ PE.</span><span class="sxs-lookup"><span data-stu-id="693f8-161">Gets a <see cref="T:System.Reflection.PortableExecutable.PEMemoryBlock" /> object containing the entire PE image.</span></span></summary>
        <returns><span data-ttu-id="693f8-162">Блок памяти, содержащий весь образ PE.</span><span class="sxs-lookup"><span data-stu-id="693f8-162">A memory block that contains the entire PE image.</span></span></returns>
        <remarks>  
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="693f8-163">Можно получить значение свойства <xref:System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable>, чтобы определить, делает ли <xref:System.Reflection.PortableExecutable.PEReader> доступ ко всему изображению.</span><span class="sxs-lookup"><span data-stu-id="693f8-163">You can retrieve the value of the <xref:System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable> property to determine whether the <xref:System.Reflection.PortableExecutable.PEReader> makes the entire image available.</span></span>

         ]]></format>
         </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="693f8-164">Весь образ PE недоступен.</span><span class="sxs-lookup"><span data-stu-id="693f8-164">The entire PE image is not available.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEMemoryBlock GetMetadata ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PEMemoryBlock GetMetadata() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.GetMetadata" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadata () As PEMemoryBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PEMemoryBlock GetMetadata();" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : unit -&gt; System.Reflection.PortableExecutable.PEMemoryBlock" Usage="pEReader.GetMetadata " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEMemoryBlock</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="693f8-165">Загружает раздел PE, содержащий метаданные CLI.</span><span class="sxs-lookup"><span data-stu-id="693f8-165">Loads a PE section that contains CLI metadata.</span></span></summary>
        <returns><span data-ttu-id="693f8-166">Блок памяти, содержащий метаданные CLI.</span><span class="sxs-lookup"><span data-stu-id="693f8-166">A memory block that contains the CLI metadata.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="693f8-167">Образ PE не содержит метаданные (<see cref="P:System.Reflection.PortableExecutable.PEReader.HasMetadata" /> возвращает <see langword="false" />).</span><span class="sxs-lookup"><span data-stu-id="693f8-167">The PE image doesn't contain metadata (<see cref="P:System.Reflection.PortableExecutable.PEReader.HasMetadata" /> returns <see langword="false" />).</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="693f8-168">Заголовки PE содержат недопустимые данные.</span><span class="sxs-lookup"><span data-stu-id="693f8-168">The PE headers contain invalid data.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="693f8-169">Ошибка ввода-вывода при чтении из базового потока.</span><span class="sxs-lookup"><span data-stu-id="693f8-169">IO error while reading from the underlying stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetSectionData">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEMemoryBlock GetSectionData (int relativeVirtualAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PEMemoryBlock GetSectionData(int32 relativeVirtualAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.GetSectionData(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSectionData (relativeVirtualAddress As Integer) As PEMemoryBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PEMemoryBlock GetSectionData(int relativeVirtualAddress);" />
      <MemberSignature Language="F#" Value="member this.GetSectionData : int -&gt; System.Reflection.PortableExecutable.PEMemoryBlock" Usage="pEReader.GetSectionData relativeVirtualAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEMemoryBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relativeVirtualAddress" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="relativeVirtualAddress"><span data-ttu-id="693f8-170">Относительный виртуальный адрес данных для чтения.</span><span class="sxs-lookup"><span data-stu-id="693f8-170">The Relative Virtual Address of the data to read.</span></span></param>
        <summary><span data-ttu-id="693f8-171">Загружает раздел PE, который содержит указанный относительный виртуальный адрес, в память и возвращает блок памяти, который начинается с этого адреса и заканчивается в конце содержащего его раздела.</span><span class="sxs-lookup"><span data-stu-id="693f8-171">Loads the PE section that contains the specified relative virtual address into memory and returns a memory block that starts at that address and ends at the end of the containing section.</span></span></summary>
        <returns><span data-ttu-id="693f8-172">Блок памяти, начинающийся с <paramref name="relativeVirtualAddress" /> и заканчивающийся в конце содержащего его раздела, или пустой блок, если <paramref name="relativeVirtualAddress" /> не представляет расположение ни в одном из разделов PE этого образа PE.</span><span class="sxs-lookup"><span data-stu-id="693f8-172">A memory block that starats at <paramref name="relativeVirtualAddress" /> and ends at the end of the containing section, or an empty block if <paramref name="relativeVirtualAddress" /> doesn't represent a location in any of the PE sections of this PE image.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="693f8-173">Заголовки PE содержат недопустимые данные.</span><span class="sxs-lookup"><span data-stu-id="693f8-173">The PE headers contain invalid data.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="693f8-174">Ошибка ввода-вывода при чтении из базового потока.</span><span class="sxs-lookup"><span data-stu-id="693f8-174">An IO error occurred while reading from the underlying stream.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="693f8-175">Образ PE недоступен.</span><span class="sxs-lookup"><span data-stu-id="693f8-175">The PE image is not available.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="693f8-176"><paramref name="relativeVirtualAddress" /> является отрицательным значением.</span><span class="sxs-lookup"><span data-stu-id="693f8-176"><paramref name="relativeVirtualAddress" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetSectionData">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEMemoryBlock GetSectionData (string sectionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PEMemoryBlock GetSectionData(string sectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.GetSectionData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSectionData (sectionName As String) As PEMemoryBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PEMemoryBlock GetSectionData(System::String ^ sectionName);" />
      <MemberSignature Language="F#" Value="member this.GetSectionData : string -&gt; System.Reflection.PortableExecutable.PEMemoryBlock" Usage="pEReader.GetSectionData sectionName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEMemoryBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sectionName" Type="System.String" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="sectionName"><span data-ttu-id="693f8-177">Имя раздела.</span><span class="sxs-lookup"><span data-stu-id="693f8-177">The name of the section.</span></span></param>
        <summary><span data-ttu-id="693f8-178">Загружает раздел PE с указанным именем в память и возвращает блок памяти, охватывающий этот раздел.</span><span class="sxs-lookup"><span data-stu-id="693f8-178">Loads the PE section with the specified name into memory and returns a memory block that spans the section.</span></span></summary>
        <returns><span data-ttu-id="693f8-179">Блок памяти, охватывающий раздел, или пустой блок, если в этом образе PE не существует раздел заданного <paramref name="sectionName" />.</span><span class="sxs-lookup"><span data-stu-id="693f8-179">A memory block that spans the section, or an empty block if no section of the given <paramref name="sectionName" /> exists in this PE image.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="693f8-180">Свойство <paramref name="sectionName" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="693f8-180"><paramref name="sectionName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="693f8-181">Образ PE недоступен.</span><span class="sxs-lookup"><span data-stu-id="693f8-181">The PE image is not available.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="HasMetadata">
      <MemberSignature Language="C#" Value="public bool HasMetadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasMetadata" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEReader.HasMetadata" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasMetadata As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasMetadata { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasMetadata : bool" Usage="System.Reflection.PortableExecutable.PEReader.HasMetadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="693f8-182">Возвращает значение, которое указывает, содержит ли образ PE метаданные CLI.</span><span class="sxs-lookup"><span data-stu-id="693f8-182">Gets a value that indicates if the PE image contains CLI metadata.</span></span></summary>
        <value><span data-ttu-id="693f8-183"><see langword="true" />, если образ PE содержит метаданные CLI; в противном случае <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="693f8-183"><see langword="true" /> if the PE image contains CLI metadata; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="693f8-184">Заголовки PE содержат недопустимые данные.</span><span class="sxs-lookup"><span data-stu-id="693f8-184">The PE headers contain invalid data.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="693f8-185">Ошибка при чтении из базового потока.</span><span class="sxs-lookup"><span data-stu-id="693f8-185">Error reading from the underlying stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsEntireImageAvailable">
      <MemberSignature Language="C#" Value="public bool IsEntireImageAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEntireImageAvailable" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEntireImageAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEntireImageAvailable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEntireImageAvailable : bool" Usage="System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="693f8-186">Возвращает значение, которое указывает, может ли средство чтения получить доступ ко всему образу PE.</span><span class="sxs-lookup"><span data-stu-id="693f8-186">Gets a value that indicates if the reader can access the entire PE image.</span></span></summary>
        <value><span data-ttu-id="693f8-187"><see langword="true" />, если читатель может получить доступ ко всему образу PE; в противном случае <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="693f8-187"><see langword="true" /> if the reader can access the entire PE image; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="693f8-188">Свойство возвращает `false`, если <xref:System.Reflection.PortableExecutable.PEReader> создается из потока, и только его часть предварительно извлекается в память.</span><span class="sxs-lookup"><span data-stu-id="693f8-188">The property returns `false` if the <xref:System.Reflection.PortableExecutable.PEReader> is constructed from a stream and only part of it is prefetched into memory.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoadedImage">
      <MemberSignature Language="C#" Value="public bool IsLoadedImage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoadedImage" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEReader.IsLoadedImage" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLoadedImage As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLoadedImage { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLoadedImage : bool" Usage="System.Reflection.PortableExecutable.PEReader.IsLoadedImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="693f8-189">Возвращает значение, которое указывает, был ли образ PE загружен в память загрузчиком ОС.</span><span class="sxs-lookup"><span data-stu-id="693f8-189">Gets a value that indicates if the PE image has been loaded into memory by the OS loader.</span></span></summary>
        <value><span data-ttu-id="693f8-190"><see langword="true" />, если образ PE загружен в память загрузчиком ОС; в противном случае <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="693f8-190"><see langword="true" /> if the PE image has been loaded into memory by the OS loader; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PEHeaders">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEHeaders PEHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.PortableExecutable.PEHeaders PEHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEReader.PEHeaders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PEHeaders As PEHeaders" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::PortableExecutable::PEHeaders ^ PEHeaders { System::Reflection::PortableExecutable::PEHeaders ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PEHeaders : System.Reflection.PortableExecutable.PEHeaders" Usage="System.Reflection.PortableExecutable.PEReader.PEHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEHeaders</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="693f8-191">Возвращает заголовки PE.</span><span class="sxs-lookup"><span data-stu-id="693f8-191">Gets the PE headers.</span></span></summary>
        <value><span data-ttu-id="693f8-192">Заголовки PE для этого образа PE.</span><span class="sxs-lookup"><span data-stu-id="693f8-192">The PE headers for this PE image.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="693f8-193">Заголовки содержат недопустимые данные.</span><span class="sxs-lookup"><span data-stu-id="693f8-193">The headers contain invalid data.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="693f8-194">Ошибка при чтении из потока.</span><span class="sxs-lookup"><span data-stu-id="693f8-194">Error reading from the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadCodeViewDebugDirectoryData">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.CodeViewDebugDirectoryData ReadCodeViewDebugDirectoryData (System.Reflection.PortableExecutable.DebugDirectoryEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.CodeViewDebugDirectoryData ReadCodeViewDebugDirectoryData(valuetype System.Reflection.PortableExecutable.DebugDirectoryEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.ReadCodeViewDebugDirectoryData(System.Reflection.PortableExecutable.DebugDirectoryEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadCodeViewDebugDirectoryData (entry As DebugDirectoryEntry) As CodeViewDebugDirectoryData" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::CodeViewDebugDirectoryData ReadCodeViewDebugDirectoryData(System::Reflection::PortableExecutable::DebugDirectoryEntry entry);" />
      <MemberSignature Language="F#" Value="member this.ReadCodeViewDebugDirectoryData : System.Reflection.PortableExecutable.DebugDirectoryEntry -&gt; System.Reflection.PortableExecutable.CodeViewDebugDirectoryData" Usage="pEReader.ReadCodeViewDebugDirectoryData entry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.CodeViewDebugDirectoryData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Reflection.PortableExecutable.DebugDirectoryEntry" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="entry"><span data-ttu-id="693f8-195">Экземпляр записи каталога отладки.</span><span class="sxs-lookup"><span data-stu-id="693f8-195">A Debug Directory entry instance.</span></span></param>
        <summary><span data-ttu-id="693f8-196">Считывает данные, на которые указывает заданная запись каталога отладки, и интерпретирует их как CodeView.</span><span class="sxs-lookup"><span data-stu-id="693f8-196">Reads the data pointed to by the specified Debug Directory entry and interprets it as CodeView.</span></span></summary>
        <returns><span data-ttu-id="693f8-197">Экземпляр данных каталога отладки для представления кода.</span><span class="sxs-lookup"><span data-stu-id="693f8-197">A code view debug directory data instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="693f8-198"><paramref name="entry" /> не является записью CodeView.</span><span class="sxs-lookup"><span data-stu-id="693f8-198"><paramref name="entry" /> is not a CodeView entry.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="693f8-199">Неправильный формат данных.</span><span class="sxs-lookup"><span data-stu-id="693f8-199">Bad format of the data.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="693f8-200">Ошибка ввода-вывода при чтении из базового потока.</span><span class="sxs-lookup"><span data-stu-id="693f8-200">IO error while reading from the underlying stream.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="693f8-201">Образ PE недоступен.</span><span class="sxs-lookup"><span data-stu-id="693f8-201">The PE image is not available.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadDebugDirectory">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;System.Reflection.PortableExecutable.DebugDirectoryEntry&gt; ReadDebugDirectory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;valuetype System.Reflection.PortableExecutable.DebugDirectoryEntry&gt; ReadDebugDirectory() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.ReadDebugDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadDebugDirectory () As ImmutableArray(Of DebugDirectoryEntry)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;System::Reflection::PortableExecutable::DebugDirectoryEntry&gt; ReadDebugDirectory();" />
      <MemberSignature Language="F#" Value="member this.ReadDebugDirectory : unit -&gt; System.Collections.Immutable.ImmutableArray&lt;System.Reflection.PortableExecutable.DebugDirectoryEntry&gt;" Usage="pEReader.ReadDebugDirectory " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;System.Reflection.PortableExecutable.DebugDirectoryEntry&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="693f8-202">Считывает все записи в таблице каталога отладки.</span><span class="sxs-lookup"><span data-stu-id="693f8-202">Reads all Debug Directory table entries.</span></span></summary>
        <returns><span data-ttu-id="693f8-203">Массив записей в таблице каталога отладки.</span><span class="sxs-lookup"><span data-stu-id="693f8-203">An array of Debug Directory table entries.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="693f8-204">Неправильный формат записи.</span><span class="sxs-lookup"><span data-stu-id="693f8-204">Bad format of the entry.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="693f8-205">Ошибка ввода-вывода при чтении из базового потока.</span><span class="sxs-lookup"><span data-stu-id="693f8-205">IO error while reading from the underlying stream.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="693f8-206">Образ PE недоступен.</span><span class="sxs-lookup"><span data-stu-id="693f8-206">The PE image is not available.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadEmbeddedPortablePdbDebugDirectoryData">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.MetadataReaderProvider ReadEmbeddedPortablePdbDebugDirectoryData (System.Reflection.PortableExecutable.DebugDirectoryEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Metadata.MetadataReaderProvider ReadEmbeddedPortablePdbDebugDirectoryData(valuetype System.Reflection.PortableExecutable.DebugDirectoryEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.ReadEmbeddedPortablePdbDebugDirectoryData(System.Reflection.PortableExecutable.DebugDirectoryEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadEmbeddedPortablePdbDebugDirectoryData (entry As DebugDirectoryEntry) As MetadataReaderProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Metadata::MetadataReaderProvider ^ ReadEmbeddedPortablePdbDebugDirectoryData(System::Reflection::PortableExecutable::DebugDirectoryEntry entry);" />
      <MemberSignature Language="F#" Value="member this.ReadEmbeddedPortablePdbDebugDirectoryData : System.Reflection.PortableExecutable.DebugDirectoryEntry -&gt; System.Reflection.Metadata.MetadataReaderProvider" Usage="pEReader.ReadEmbeddedPortablePdbDebugDirectoryData entry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReaderProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Reflection.PortableExecutable.DebugDirectoryEntry" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="entry"><span data-ttu-id="693f8-207">Запись каталога отладки, данные которой должны быть считаны.</span><span class="sxs-lookup"><span data-stu-id="693f8-207">The Debug Directory entry whose data is to be read.</span></span></param>
        <summary><span data-ttu-id="693f8-208">Считывает данные, на которые указывает заданная запись каталога отладки, и интерпретирует их как BLOB-объект внедренного переносимого PDB.</span><span class="sxs-lookup"><span data-stu-id="693f8-208">Reads the data pointed to by the specified Debug Directory entry and interprets it as an Embedded Portable PDB blob.</span></span></summary>
        <returns><span data-ttu-id="693f8-209">Поставщик средства чтения метаданных для чтения образа переносимого PDB.</span><span class="sxs-lookup"><span data-stu-id="693f8-209">The provider of a metadata reader for reading a Portable PDB image.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="693f8-210"><paramref name="entry" /> не является записью <see cref="F:System.Reflection.PortableExecutable.DebugDirectoryEntryType.EmbeddedPortablePdb" />.</span><span class="sxs-lookup"><span data-stu-id="693f8-210"><paramref name="entry" /> is not a <see cref="F:System.Reflection.PortableExecutable.DebugDirectoryEntryType.EmbeddedPortablePdb" /> entry.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="693f8-211">Неправильный формат данных.</span><span class="sxs-lookup"><span data-stu-id="693f8-211">Bad format of the data.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="693f8-212">Образ PE недоступен.</span><span class="sxs-lookup"><span data-stu-id="693f8-212">PE image not available.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadPdbChecksumDebugDirectoryData">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData ReadPdbChecksumDebugDirectoryData (System.Reflection.PortableExecutable.DebugDirectoryEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData ReadPdbChecksumDebugDirectoryData(valuetype System.Reflection.PortableExecutable.DebugDirectoryEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.ReadPdbChecksumDebugDirectoryData(System.Reflection.PortableExecutable.DebugDirectoryEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadPdbChecksumDebugDirectoryData (entry As DebugDirectoryEntry) As PdbChecksumDebugDirectoryData" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PdbChecksumDebugDirectoryData ReadPdbChecksumDebugDirectoryData(System::Reflection::PortableExecutable::DebugDirectoryEntry entry);" />
      <MemberSignature Language="F#" Value="member this.ReadPdbChecksumDebugDirectoryData : System.Reflection.PortableExecutable.DebugDirectoryEntry -&gt; System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData" Usage="pEReader.ReadPdbChecksumDebugDirectoryData entry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Reflection.PortableExecutable.DebugDirectoryEntry" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="entry"><span data-ttu-id="693f8-213">Запись каталога отладки, данные которой должны быть считаны.</span><span class="sxs-lookup"><span data-stu-id="693f8-213">The Debug Directory entry whose data is to be read.</span></span></param>
        <summary><span data-ttu-id="693f8-214">Считывает данные, на которые указывает заданная запись каталога отладки, и интерпретирует их как запись контрольной суммы PDB.</span><span class="sxs-lookup"><span data-stu-id="693f8-214">Reads the data pointed to by the specified Debug Directory entry and interprets it as a PDB Checksum entry.</span></span></summary>
        <returns><span data-ttu-id="693f8-215">Запись контрольной суммы PDB.</span><span class="sxs-lookup"><span data-stu-id="693f8-215">The PDB Checksum entry.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="693f8-216"><paramref name="entry" /> не является записью контрольной суммы PDB.</span><span class="sxs-lookup"><span data-stu-id="693f8-216"><paramref name="entry" /> is not a PDB Checksum entry.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="693f8-217">Неправильный формат данных.</span><span class="sxs-lookup"><span data-stu-id="693f8-217">Bad format of the data.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="693f8-218">Ошибка ввода-вывода при чтении из базового потока.</span><span class="sxs-lookup"><span data-stu-id="693f8-218">IO error while reading from the underlying stream.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="693f8-219">Образ PE недоступен.</span><span class="sxs-lookup"><span data-stu-id="693f8-219">The PE image is not available.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryOpenAssociatedPortablePdb">
      <MemberSignature Language="C#" Value="public bool TryOpenAssociatedPortablePdb (string peImagePath, Func&lt;string,System.IO.Stream&gt; pdbFileStreamProvider, out System.Reflection.Metadata.MetadataReaderProvider pdbReaderProvider, out string pdbPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryOpenAssociatedPortablePdb(string peImagePath, class System.Func`2&lt;string, class System.IO.Stream&gt; pdbFileStreamProvider, [out] class System.Reflection.Metadata.MetadataReaderProvider&amp; pdbReaderProvider, [out] string&amp; pdbPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.TryOpenAssociatedPortablePdb(System.String,System.Func{System.String,System.IO.Stream},System.Reflection.Metadata.MetadataReaderProvider@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryOpenAssociatedPortablePdb (peImagePath As String, pdbFileStreamProvider As Func(Of String, Stream), ByRef pdbReaderProvider As MetadataReaderProvider, ByRef pdbPath As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryOpenAssociatedPortablePdb(System::String ^ peImagePath, Func&lt;System::String ^, System::IO::Stream ^&gt; ^ pdbFileStreamProvider, [Runtime::InteropServices::Out] System::Reflection::Metadata::MetadataReaderProvider ^ % pdbReaderProvider, [Runtime::InteropServices::Out] System::String ^ % pdbPath);" />
      <MemberSignature Language="F#" Value="member this.TryOpenAssociatedPortablePdb : string * Func&lt;string, System.IO.Stream&gt; * MetadataReaderProvider * string -&gt; bool" Usage="pEReader.TryOpenAssociatedPortablePdb (peImagePath, pdbFileStreamProvider, pdbReaderProvider, pdbPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="peImagePath" Type="System.String" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="pdbFileStreamProvider" Type="System.Func&lt;System.String,System.IO.Stream&gt;" Index="1" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="pdbReaderProvider" Type="System.Reflection.Metadata.MetadataReaderProvider" RefType="out" Index="2" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="pdbPath" Type="System.String" RefType="out" Index="3" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="peImagePath"><span data-ttu-id="693f8-220">Путь к образу PE.</span><span class="sxs-lookup"><span data-stu-id="693f8-220">The path to the PE image.</span></span> <span data-ttu-id="693f8-221">Этот путь используется для поиска PDB-файла, который находится в каталоге, содержащем PE-файл.</span><span class="sxs-lookup"><span data-stu-id="693f8-221">The path is used to locate the PDB file located in the directory containing the PE file.</span></span></param>
        <param name="pdbFileStreamProvider"><span data-ttu-id="693f8-222">Если указан, вызывается для открытия <see cref="T:System.IO.Stream" /> для заданного пути к файлу.</span><span class="sxs-lookup"><span data-stu-id="693f8-222">If specified, called to open a <see cref="T:System.IO.Stream" /> for a given file path.</span></span> <span data-ttu-id="693f8-223">Поставщик должен возвращать либо доступный для чтения и поиска <see cref="T:System.IO.Stream" />, либо значение <see langword="null" />, если целевой файл не существует либо по какой-либо причине должен быть проигнорирован.</span><span class="sxs-lookup"><span data-stu-id="693f8-223">The provider is expected to either return a readable and seekable <see cref="T:System.IO.Stream" />, or <see langword="null" /> if the target file doesn't exist or should be ignored for some reason.</span></span> <span data-ttu-id="693f8-224">Поставщик должен выдать <see cref="T:System.IO.IOException" />, если ему не удается открыть файл из-за непредвиденной ошибки ввода-вывода.</span><span class="sxs-lookup"><span data-stu-id="693f8-224">The provider should throw <see cref="T:System.IO.IOException" /> if it fails to open the file due to an unexpected IO error.</span></span></param>
        <param name="pdbReaderProvider"><span data-ttu-id="693f8-225">В случае успеха новый экземпляр <see cref="T:System.Reflection.Metadata.MetadataReaderProvider" /> используется для чтения переносимого PDB.</span><span class="sxs-lookup"><span data-stu-id="693f8-225">If successful, a new instance of <see cref="T:System.Reflection.Metadata.MetadataReaderProvider" /> to be used to read the Portable PDB,.</span></span></param>
        <param name="pdbPath"><span data-ttu-id="693f8-226">Если операция выполнена успешно и PDB найден в файле, путь к файлу, либо <see langword="null" />, если PDB внедрен в сам образ PE.</span><span class="sxs-lookup"><span data-stu-id="693f8-226">If successful and the PDB is found in a file, the path to the file, or <see langword="null" /> if the PDB is embedded in the PE image itself.</span></span></param>
        <summary><span data-ttu-id="693f8-227">Открывает переносимый PDB, связанный с этим образом PE.</span><span class="sxs-lookup"><span data-stu-id="693f8-227">Opens a Portable PDB associated with this PE image.</span></span></summary>
        <returns><span data-ttu-id="693f8-228">Значение <see langword="true" />, если образ PE имеет связанный с ним PDB, который был успешно открыт; в противном случае значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="693f8-228"><see langword="true" /> if the PE image has a PDB associated with it and the PDB has been successfully opened; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="693f8-229">Этот метод реализует простой поиск PDB-файла на основе содержимого каталога отладки PE-образа.</span><span class="sxs-lookup"><span data-stu-id="693f8-229">This method implements a simple PDB file lookup based on the content of the PE image Debug Directory.</span></span> <span data-ttu-id="693f8-230">Более сложному средству может потребоваться выполнить дополнительные Поиск по путям поиска или серверу символов.</span><span class="sxs-lookup"><span data-stu-id="693f8-230">A more sophisticated tool might need to follow up with additional lookup on search paths or a symbol server.</span></span>
 
<span data-ttu-id="693f8-231">Метод выполняет поиск в файле PDB в следующем порядке:</span><span class="sxs-lookup"><span data-stu-id="693f8-231">The method looks the PDB up in the following order:</span></span>

1) <span data-ttu-id="693f8-232">Проверяет наличие совпадающего PDB-файла с именем, найденным в записи Информация CodeView в каталоге, содержащем PE-файл (каталог @no__t – 0).</span><span class="sxs-lookup"><span data-stu-id="693f8-232">Checks for a matching PDB file of the name found in the CodeView entry in the directory containing the PE file (the directory of `peImagePath`).</span></span>
2) <span data-ttu-id="693f8-233">Проверяет наличие PDB-файла, встроенного в образ PE.</span><span class="sxs-lookup"><span data-stu-id="693f8-233">Checks for a PDB embedded in the PE image itself.</span></span>
 
<span data-ttu-id="693f8-234">Возвращается первый PDB-файл, соответствующий информации, указанной в каталоге отладки.</span><span class="sxs-lookup"><span data-stu-id="693f8-234">The first PDB that matches the information specified in the Debug Directory is returned.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="693f8-235">Параметр <paramref name="peImagePath" /> или <paramref name="pdbFileStreamProvider" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="693f8-235"><paramref name="peImagePath" /> or <paramref name="pdbFileStreamProvider" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="693f8-236">Поток, возвращенный из <paramref name="pdbFileStreamProvider" />, не поддерживает операции чтения и поиска.</span><span class="sxs-lookup"><span data-stu-id="693f8-236">The stream returned from <paramref name="pdbFileStreamProvider" /> doesn't support read and seek operations.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="693f8-237">Соответствующий PDB-файл не найден из-за ошибки: Недопустимый образ PE или PDB.</span><span class="sxs-lookup"><span data-stu-id="693f8-237">No matching PDB file was found due to an error: The PE image or the PDB is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="693f8-238">Соответствующий PDB-файл не найден из-за ошибки: При чтении образа PE или PDB произошла ошибка ввода-вывода.</span><span class="sxs-lookup"><span data-stu-id="693f8-238">No matching PDB file was found due to an error: An IO error occurred while reading the PE image or the PDB.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
