<Type Name="PEReader" FullName="System.Reflection.PortableExecutable.PEReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a53f2b8559f81b4099ca583f6f30750a242adb1b" /><Meta Name="ms.sourcegitcommit" Value="c573d537afba2d4c1463538f1095f2f155025464" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="10/16/2019" /><Meta Name="ms.locfileid" Value="72396607" /></Metadata><TypeSignature Language="C#" Value="public sealed class PEReader : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PEReader extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.PortableExecutable.PEReader" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PEReader&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class PEReader sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type PEReader = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Metadata</AssemblyName>
    <AssemblyVersion>1.0.22.0</AssemblyVersion>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
    <AssemblyVersion>1.4.1.0</AssemblyVersion>
    <AssemblyVersion>1.4.2.0</AssemblyVersion>
    <AssemblyVersion>1.4.3.0</AssemblyVersion>
    <AssemblyVersion>1.4.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Предоставляет средство чтения для переносимых исполняемых (PE) файлов.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

Реализация является потокобезопасной. То есть несколько потоков могут считывать данные из модуля чтения параллельно. Удаление модуля чтения не является потокобезопасным (см. <xref:System.Reflection.PortableExecutable.PEReader.Dispose>).

          ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (System.Collections.Immutable.ImmutableArray&lt;byte&gt; peImage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Collections.Immutable.ImmutableArray`1&lt;unsigned int8&gt; peImage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.Collections.Immutable.ImmutableArray{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peImage As ImmutableArray(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::Collections::Immutable::ImmutableArray&lt;System::Byte&gt; peImage);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : System.Collections.Immutable.ImmutableArray&lt;byte&gt; -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader peImage" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peImage" Type="System.Collections.Immutable.ImmutableArray&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="peImage">Неизменяемый массив байтов, представляющий образ PE.</param>
        <summary>Создает средство чтения переносимых исполняемых файлов с использованием образа PE, хранящегося в массиве байтов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Содержимое изображения не считывается во время создания <xref:System.Reflection.PortableExecutable.PEReader>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="peImage" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (System.IO.Stream peStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream peStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::IO::Stream ^ peStream);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : System.IO.Stream -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader peStream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="peStream">Поток образа PE.</param>
        <summary>Создает средство чтения переносимых исполняемых файлов с использованием образа PE, хранящегося в потоке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Владение потоком передается <xref:System.Reflection.PortableExecutable.PEReader> после успешной проверки аргументов конструктора. Он будет удален <xref:System.Reflection.PortableExecutable.PEReader>, и вызывающий объект не должен манипулировать им.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="peStream" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (byte* peImage, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8* peImage, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::Byte* peImage, int size);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : nativeptr&lt;byte&gt; * int -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader (peImage, size)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peImage" Type="System.Byte*" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="peImage">Указатель на начало образа PE.</param>
        <param name="size">Размер образа PE.</param>
        <summary>Создает средство чтения переносимых исполняемых файлов с использованием образа PE, хранящегося в памяти.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Память принадлежит вызывающему объекту и не освобождается при освобождении <xref:System.Reflection.PortableExecutable.PEReader>. Вызывающий объект отвечает за поддержание активности памяти и неизменности в течение времени существования <xref:System.Reflection.PortableExecutable.PEReader>.


Содержимое изображения не считывается во время создания <xref:System.Reflection.PortableExecutable.PEReader>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="peImage" /> имеет значение <see cref="F:System.IntPtr.Zero" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size" /> является отрицательным значением.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (System.IO.Stream peStream, System.Reflection.PortableExecutable.PEStreamOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream peStream, valuetype System.Reflection.PortableExecutable.PEStreamOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peStream As Stream, options As PEStreamOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::IO::Stream ^ peStream, System::Reflection::PortableExecutable::PEStreamOptions options);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : System.IO.Stream * System.Reflection.PortableExecutable.PEStreamOptions -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader (peStream, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peStream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Reflection.PortableExecutable.PEStreamOptions" />
      </Parameters>
      <Docs>
        <param name="peStream">Поток образа PE.</param>
        <param name="options">Параметры, которые определяют способ считывания разделов образа PE из потока.</param>
        <summary>Создает средство чтения переносимых исполняемых файлов с использованием образа PE, который хранится в потоке, начиная с его текущей позиции и заканчивая концом потока.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 
Если не указано значение <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType>, владение потоком передается <xref:System.Reflection.PortableExecutable.PEReader> после успешного выполнения проверки аргументов. Он будет удален <xref:System.Reflection.PortableExecutable.PEReader>, и вызывающий объект не должен манипулировать им.
 
Если не задано значение <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> или <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType>, данные не считываются из потока во время создания <xref:System.Reflection.PortableExecutable.PEReader>. Кроме того, поток не должен обрабатываться вызывающим объектом, пока <xref:System.Reflection.PortableExecutable.PEReader> является активным и неосвобожденным.
 
Если `options` включает <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> или <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType>, <xref:System.Reflection.PortableExecutable.PEReader> будет считывать все данные, запрошенные во время создания. Таким образом, если также задано значение <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType>, вызывающий объект удерживает полный доступ к потоку и гарантирует, что он не будет обрабатываться <xref:System.Reflection.PortableExecutable.PEReader> после создания.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="peStream" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Недопустимое значение параметра <paramref name="options" />.</exception>
        <exception cref="T:System.IO.IOException">Ошибка при чтении из потока (только при предварительном получении данных).</exception>
        <exception cref="T:System.BadImageFormatException"><see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata" /> указан, а PE-заголовки образа недопустимы.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (byte* peImage, int size, bool isLoadedImage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8* peImage, int32 size, bool isLoadedImage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.Byte*,System.Int32,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::Byte* peImage, int size, bool isLoadedImage);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : nativeptr&lt;byte&gt; * int * bool -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader (peImage, size, isLoadedImage)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peImage" Type="System.Byte*" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="size" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="isLoadedImage" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="peImage">Указатель на начало образа PE.</param>
        <param name="size">Размер образа PE.</param>
        <param name="isLoadedImage">Значение <see langword="true" />, если образ PE был загружен в память загрузчиком ОС; в противном случае значение <see langword="false" />.</param>
        <summary>Создает средство чтения переносимых исполняемых файлов с использованием образа PE, хранящегося в памяти. Флаг указывает, был ли образ уже загружен в память.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Память принадлежит вызывающему объекту и не освобождается при удалении <xref:System.Reflection.PortableExecutable.PEReader>. Вызывающий объект отвечает за поддержание активности памяти и неизменности в течение времени существования <xref:System.Reflection.PortableExecutable.PEReader>.


Содержимое изображения не считывается во время создания <xref:System.Reflection.PortableExecutable.PEReader>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="peImage" /> имеет значение <see cref="F:System.IntPtr.Zero" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size" /> является отрицательным значением.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PEReader (System.IO.Stream peStream, System.Reflection.PortableExecutable.PEStreamOptions options, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream peStream, valuetype System.Reflection.PortableExecutable.PEStreamOptions options, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (peStream As Stream, options As PEStreamOptions, size As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PEReader(System::IO::Stream ^ peStream, System::Reflection::PortableExecutable::PEStreamOptions options, int size);" />
      <MemberSignature Language="F#" Value="new System.Reflection.PortableExecutable.PEReader : System.IO.Stream * System.Reflection.PortableExecutable.PEStreamOptions * int -&gt; System.Reflection.PortableExecutable.PEReader" Usage="new System.Reflection.PortableExecutable.PEReader (peStream, options, size)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="peStream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Reflection.PortableExecutable.PEStreamOptions" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="peStream">Поток образа PE.</param>
        <param name="options">Параметры, которые определяют способ считывания разделов образа PE из потока.</param>
        <param name="size">Размер образа PE.</param>
        <summary>Создает средство чтения переносимых исполняемых файлов с использованием образа PE заданного размера, начиная с текущей позиции потока.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Если не указано значение <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType>, владение потоком передается <xref:System.Reflection.PortableExecutable.PEReader> после успешного выполнения проверки аргументов. Он будет удален <xref:System.Reflection.PortableExecutable.PEReader>, и вызывающий объект не должен манипулировать им.
 
Если не задано значение <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> или <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType>, данные не считываются из потока во время создания <xref:System.Reflection.PortableExecutable.PEReader>. Кроме того, поток не должен обрабатываться вызывающим объектом, пока <xref:System.Reflection.PortableExecutable.PEReader> является активным и неуничтоженным.
 
Если `options` включает значения <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata?displayProperty=nameWithType> или <xref:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage?displayProperty=nameWithType>, то <xref:System.Reflection.PortableExecutable.PEReader> будет считывать все данные, запрошенные во время создания. Таким образом, если также задано значение <xref:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen?displayProperty=nameWithType>, вызывающий объект удерживает полный доступ к потоку и гарантирует, что он не будет обрабатываться <xref:System.Reflection.PortableExecutable.PEReader> после создания.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="size" /> является отрицательным или превышает длину потока.</exception>
        <exception cref="T:System.IO.IOException">Ошибка при чтении из потока (только при предварительном получении данных).</exception>
        <exception cref="T:System.BadImageFormatException"><see cref="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata" /> указан, а PE-заголовки образа недопустимы.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="pEReader.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Удаляет весь объем памяти, выделенный средством чтения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!IMPORTANT]
> <xref:System.Reflection.PortableExecutable.PEReader.Dispose> можно вызывать несколько раз, но не параллельно.
> Необязательно вызывать <xref:System.Reflection.PortableExecutable.PEReader.Dispose> параллельно с любой другой операцией в <xref:System.Reflection.PortableExecutable.PEReader> или при чтении из <xref:System.Reflection.PortableExecutable.PEMemoryBlock>S, полученного от средства чтения.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEntireImage">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEMemoryBlock GetEntireImage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PEMemoryBlock GetEntireImage() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.GetEntireImage" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEntireImage () As PEMemoryBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PEMemoryBlock GetEntireImage();" />
      <MemberSignature Language="F#" Value="member this.GetEntireImage : unit -&gt; System.Reflection.PortableExecutable.PEMemoryBlock" Usage="pEReader.GetEntireImage " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEMemoryBlock</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает объект <see cref="T:System.Reflection.PortableExecutable.PEMemoryBlock" />, содержащий весь образ PE.</summary>
        <returns>Блок памяти, содержащий весь образ PE.</returns>
        <remarks>  
          <format type="text/markdown"><![CDATA[  

Можно получить значение свойства <xref:System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable>, чтобы определить, делает ли <xref:System.Reflection.PortableExecutable.PEReader> доступ ко всему изображению.

         ]]></format>
         </remarks>
        <exception cref="T:System.InvalidOperationException">Весь образ PE недоступен.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEMemoryBlock GetMetadata ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PEMemoryBlock GetMetadata() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.GetMetadata" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadata () As PEMemoryBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PEMemoryBlock GetMetadata();" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : unit -&gt; System.Reflection.PortableExecutable.PEMemoryBlock" Usage="pEReader.GetMetadata " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEMemoryBlock</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Загружает раздел PE, содержащий метаданные CLI.</summary>
        <returns>Блок памяти, содержащий метаданные CLI.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Образ PE не содержит метаданные (<see cref="P:System.Reflection.PortableExecutable.PEReader.HasMetadata" /> возвращает <see langword="false" />).</exception>
        <exception cref="T:System.BadImageFormatException">Заголовки PE содержат недопустимые данные.</exception>
        <exception cref="T:System.IO.IOException">Ошибка ввода-вывода при чтении из базового потока.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSectionData">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEMemoryBlock GetSectionData (int relativeVirtualAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PEMemoryBlock GetSectionData(int32 relativeVirtualAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.GetSectionData(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSectionData (relativeVirtualAddress As Integer) As PEMemoryBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PEMemoryBlock GetSectionData(int relativeVirtualAddress);" />
      <MemberSignature Language="F#" Value="member this.GetSectionData : int -&gt; System.Reflection.PortableExecutable.PEMemoryBlock" Usage="pEReader.GetSectionData relativeVirtualAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEMemoryBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relativeVirtualAddress" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="relativeVirtualAddress">Относительный виртуальный адрес данных для чтения.</param>
        <summary>Загружает раздел PE, который содержит указанный относительный виртуальный адрес, в память и возвращает блок памяти, который начинается с этого адреса и заканчивается в конце содержащего его раздела.</summary>
        <returns>Блок памяти, начинающийся с <paramref name="relativeVirtualAddress" /> и заканчивающийся в конце содержащего его раздела, или пустой блок, если <paramref name="relativeVirtualAddress" /> не представляет расположение ни в одном из разделов PE этого образа PE.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException">Заголовки PE содержат недопустимые данные.</exception>
        <exception cref="T:System.IO.IOException">Ошибка ввода-вывода при чтении из базового потока.</exception>
        <exception cref="T:System.InvalidOperationException">Образ PE недоступен.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="relativeVirtualAddress" /> является отрицательным значением.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSectionData">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEMemoryBlock GetSectionData (string sectionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PEMemoryBlock GetSectionData(string sectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.GetSectionData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSectionData (sectionName As String) As PEMemoryBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PEMemoryBlock GetSectionData(System::String ^ sectionName);" />
      <MemberSignature Language="F#" Value="member this.GetSectionData : string -&gt; System.Reflection.PortableExecutable.PEMemoryBlock" Usage="pEReader.GetSectionData sectionName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEMemoryBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sectionName" Type="System.String" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="sectionName">Имя раздела.</param>
        <summary>Загружает раздел PE с указанным именем в память и возвращает блок памяти, охватывающий этот раздел.</summary>
        <returns>Блок памяти, охватывающий раздел, или пустой блок, если в этом образе PE не существует раздел заданного <paramref name="sectionName" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="sectionName" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Образ PE недоступен.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasMetadata">
      <MemberSignature Language="C#" Value="public bool HasMetadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasMetadata" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEReader.HasMetadata" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasMetadata As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasMetadata { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasMetadata : bool" Usage="System.Reflection.PortableExecutable.PEReader.HasMetadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, которое указывает, содержит ли образ PE метаданные CLI.</summary>
        <value><see langword="true" />, если образ PE содержит метаданные CLI; в противном случае <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException">Заголовки PE содержат недопустимые данные.</exception>
        <exception cref="T:System.IO.IOException">Ошибка при чтении из базового потока.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEntireImageAvailable">
      <MemberSignature Language="C#" Value="public bool IsEntireImageAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEntireImageAvailable" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEntireImageAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEntireImageAvailable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEntireImageAvailable : bool" Usage="System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, которое указывает, может ли средство чтения получить доступ ко всему образу PE.</summary>
        <value><see langword="true" />, если читатель может получить доступ ко всему образу PE; в противном случае <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Свойство возвращает `false`, если <xref:System.Reflection.PortableExecutable.PEReader> создается из потока, и только его часть предварительно извлекается в память.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoadedImage">
      <MemberSignature Language="C#" Value="public bool IsLoadedImage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoadedImage" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEReader.IsLoadedImage" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLoadedImage As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLoadedImage { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLoadedImage : bool" Usage="System.Reflection.PortableExecutable.PEReader.IsLoadedImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, которое указывает, был ли образ PE загружен в память загрузчиком ОС.</summary>
        <value><see langword="true" />, если образ PE загружен в память загрузчиком ОС; в противном случае <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PEHeaders">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PEHeaders PEHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.PortableExecutable.PEHeaders PEHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PortableExecutable.PEReader.PEHeaders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PEHeaders As PEHeaders" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::PortableExecutable::PEHeaders ^ PEHeaders { System::Reflection::PortableExecutable::PEHeaders ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PEHeaders : System.Reflection.PortableExecutable.PEHeaders" Usage="System.Reflection.PortableExecutable.PEReader.PEHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PEHeaders</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает заголовки PE.</summary>
        <value>Заголовки PE для этого образа PE.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException">Заголовки содержат недопустимые данные.</exception>
        <exception cref="T:System.IO.IOException">Ошибка при чтении из потока.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadCodeViewDebugDirectoryData">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.CodeViewDebugDirectoryData ReadCodeViewDebugDirectoryData (System.Reflection.PortableExecutable.DebugDirectoryEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.CodeViewDebugDirectoryData ReadCodeViewDebugDirectoryData(valuetype System.Reflection.PortableExecutable.DebugDirectoryEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.ReadCodeViewDebugDirectoryData(System.Reflection.PortableExecutable.DebugDirectoryEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadCodeViewDebugDirectoryData (entry As DebugDirectoryEntry) As CodeViewDebugDirectoryData" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::CodeViewDebugDirectoryData ReadCodeViewDebugDirectoryData(System::Reflection::PortableExecutable::DebugDirectoryEntry entry);" />
      <MemberSignature Language="F#" Value="member this.ReadCodeViewDebugDirectoryData : System.Reflection.PortableExecutable.DebugDirectoryEntry -&gt; System.Reflection.PortableExecutable.CodeViewDebugDirectoryData" Usage="pEReader.ReadCodeViewDebugDirectoryData entry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.CodeViewDebugDirectoryData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Reflection.PortableExecutable.DebugDirectoryEntry" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="entry">Экземпляр записи каталога отладки.</param>
        <summary>Считывает данные, на которые указывает заданная запись каталога отладки, и интерпретирует их как CodeView.</summary>
        <returns>Экземпляр данных каталога отладки для представления кода.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="entry" /> не является записью CodeView.</exception>
        <exception cref="T:System.BadImageFormatException">Неправильный формат данных.</exception>
        <exception cref="T:System.IO.IOException">Ошибка ввода-вывода при чтении из базового потока.</exception>
        <exception cref="T:System.InvalidOperationException">Образ PE недоступен.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadDebugDirectory">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;System.Reflection.PortableExecutable.DebugDirectoryEntry&gt; ReadDebugDirectory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;valuetype System.Reflection.PortableExecutable.DebugDirectoryEntry&gt; ReadDebugDirectory() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.ReadDebugDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadDebugDirectory () As ImmutableArray(Of DebugDirectoryEntry)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;System::Reflection::PortableExecutable::DebugDirectoryEntry&gt; ReadDebugDirectory();" />
      <MemberSignature Language="F#" Value="member this.ReadDebugDirectory : unit -&gt; System.Collections.Immutable.ImmutableArray&lt;System.Reflection.PortableExecutable.DebugDirectoryEntry&gt;" Usage="pEReader.ReadDebugDirectory " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;System.Reflection.PortableExecutable.DebugDirectoryEntry&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Считывает все записи в таблице каталога отладки.</summary>
        <returns>Массив записей в таблице каталога отладки.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.BadImageFormatException">Неправильный формат записи.</exception>
        <exception cref="T:System.IO.IOException">Ошибка ввода-вывода при чтении из базового потока.</exception>
        <exception cref="T:System.InvalidOperationException">Образ PE недоступен.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadEmbeddedPortablePdbDebugDirectoryData">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.MetadataReaderProvider ReadEmbeddedPortablePdbDebugDirectoryData (System.Reflection.PortableExecutable.DebugDirectoryEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Metadata.MetadataReaderProvider ReadEmbeddedPortablePdbDebugDirectoryData(valuetype System.Reflection.PortableExecutable.DebugDirectoryEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.ReadEmbeddedPortablePdbDebugDirectoryData(System.Reflection.PortableExecutable.DebugDirectoryEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadEmbeddedPortablePdbDebugDirectoryData (entry As DebugDirectoryEntry) As MetadataReaderProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Metadata::MetadataReaderProvider ^ ReadEmbeddedPortablePdbDebugDirectoryData(System::Reflection::PortableExecutable::DebugDirectoryEntry entry);" />
      <MemberSignature Language="F#" Value="member this.ReadEmbeddedPortablePdbDebugDirectoryData : System.Reflection.PortableExecutable.DebugDirectoryEntry -&gt; System.Reflection.Metadata.MetadataReaderProvider" Usage="pEReader.ReadEmbeddedPortablePdbDebugDirectoryData entry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReaderProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Reflection.PortableExecutable.DebugDirectoryEntry" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="entry">Запись каталога отладки, данные которой должны быть считаны.</param>
        <summary>Считывает данные, на которые указывает заданная запись каталога отладки, и интерпретирует их как BLOB-объект внедренного переносимого PDB.</summary>
        <returns>Поставщик средства чтения метаданных для чтения образа переносимого PDB.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="entry" /> не является записью <see cref="F:System.Reflection.PortableExecutable.DebugDirectoryEntryType.EmbeddedPortablePdb" />.</exception>
        <exception cref="T:System.BadImageFormatException">Неправильный формат данных.</exception>
        <exception cref="T:System.InvalidOperationException">Образ PE недоступен.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadPdbChecksumDebugDirectoryData">
      <MemberSignature Language="C#" Value="public System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData ReadPdbChecksumDebugDirectoryData (System.Reflection.PortableExecutable.DebugDirectoryEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData ReadPdbChecksumDebugDirectoryData(valuetype System.Reflection.PortableExecutable.DebugDirectoryEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.ReadPdbChecksumDebugDirectoryData(System.Reflection.PortableExecutable.DebugDirectoryEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadPdbChecksumDebugDirectoryData (entry As DebugDirectoryEntry) As PdbChecksumDebugDirectoryData" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PortableExecutable::PdbChecksumDebugDirectoryData ReadPdbChecksumDebugDirectoryData(System::Reflection::PortableExecutable::DebugDirectoryEntry entry);" />
      <MemberSignature Language="F#" Value="member this.ReadPdbChecksumDebugDirectoryData : System.Reflection.PortableExecutable.DebugDirectoryEntry -&gt; System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData" Usage="pEReader.ReadPdbChecksumDebugDirectoryData entry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Reflection.PortableExecutable.DebugDirectoryEntry" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="entry">Запись каталога отладки, данные которой должны быть считаны.</param>
        <summary>Считывает данные, на которые указывает заданная запись каталога отладки, и интерпретирует их как запись контрольной суммы PDB.</summary>
        <returns>Запись контрольной суммы PDB.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="entry" /> не является записью контрольной суммы PDB.</exception>
        <exception cref="T:System.BadImageFormatException">Неправильный формат данных.</exception>
        <exception cref="T:System.IO.IOException">Ошибка ввода-вывода при чтении из базового потока.</exception>
        <exception cref="T:System.InvalidOperationException">Образ PE недоступен.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryOpenAssociatedPortablePdb">
      <MemberSignature Language="C#" Value="public bool TryOpenAssociatedPortablePdb (string peImagePath, Func&lt;string,System.IO.Stream&gt; pdbFileStreamProvider, out System.Reflection.Metadata.MetadataReaderProvider pdbReaderProvider, out string pdbPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryOpenAssociatedPortablePdb(string peImagePath, class System.Func`2&lt;string, class System.IO.Stream&gt; pdbFileStreamProvider, [out] class System.Reflection.Metadata.MetadataReaderProvider&amp; pdbReaderProvider, [out] string&amp; pdbPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PortableExecutable.PEReader.TryOpenAssociatedPortablePdb(System.String,System.Func{System.String,System.IO.Stream},System.Reflection.Metadata.MetadataReaderProvider@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryOpenAssociatedPortablePdb (peImagePath As String, pdbFileStreamProvider As Func(Of String, Stream), ByRef pdbReaderProvider As MetadataReaderProvider, ByRef pdbPath As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryOpenAssociatedPortablePdb(System::String ^ peImagePath, Func&lt;System::String ^, System::IO::Stream ^&gt; ^ pdbFileStreamProvider, [Runtime::InteropServices::Out] System::Reflection::Metadata::MetadataReaderProvider ^ % pdbReaderProvider, [Runtime::InteropServices::Out] System::String ^ % pdbPath);" />
      <MemberSignature Language="F#" Value="member this.TryOpenAssociatedPortablePdb : string * Func&lt;string, System.IO.Stream&gt; * MetadataReaderProvider * string -&gt; bool" Usage="pEReader.TryOpenAssociatedPortablePdb (peImagePath, pdbFileStreamProvider, pdbReaderProvider, pdbPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="peImagePath" Type="System.String" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="pdbFileStreamProvider" Type="System.Func&lt;System.String,System.IO.Stream&gt;" Index="1" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="pdbReaderProvider" Type="System.Reflection.Metadata.MetadataReaderProvider" RefType="out" Index="2" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="pdbPath" Type="System.String" RefType="out" Index="3" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="peImagePath">Путь к образу PE. Этот путь используется для поиска PDB-файла, который находится в каталоге, содержащем PE-файл.</param>
        <param name="pdbFileStreamProvider">Если указан, вызывается для открытия <see cref="T:System.IO.Stream" /> для заданного пути к файлу. Поставщик должен возвращать либо доступный для чтения и поиска <see cref="T:System.IO.Stream" />, либо значение <see langword="null" />, если целевой файл не существует либо по какой-либо причине должен быть проигнорирован. Поставщик должен выдать <see cref="T:System.IO.IOException" />, если ему не удается открыть файл из-за непредвиденной ошибки ввода-вывода.</param>
        <param name="pdbReaderProvider">В случае успеха новый экземпляр <see cref="T:System.Reflection.Metadata.MetadataReaderProvider" /> используется для чтения переносимого PDB.</param>
        <param name="pdbPath">Если операция выполнена успешно и PDB найден в файле, путь к файлу, либо <see langword="null" />, если PDB внедрен в сам образ PE.</param>
        <summary>Открывает переносимый PDB, связанный с этим образом PE.</summary>
        <returns>Значение <see langword="true" />, если образ PE имеет связанный с ним PDB, который был успешно открыт; в противном случае значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Этот метод реализует простой поиск PDB-файла на основе содержимого каталога отладки PE-образа. Более сложному средству может потребоваться выполнить дополнительные Поиск по путям поиска или серверу символов.
 
Метод выполняет поиск в файле PDB в следующем порядке:

1) Проверяет наличие совпадающего PDB-файла с именем, найденным в записи Информация CodeView в каталоге, содержащем PE-файл (каталог @no__t – 0).
2) Проверяет наличие PDB-файла, встроенного в образ PE.
 
Возвращается первый PDB-файл, соответствующий информации, указанной в каталоге отладки.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="peImagePath" /> или <paramref name="pdbFileStreamProvider" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Поток, возвращенный из <paramref name="pdbFileStreamProvider" />, не поддерживает операции чтения и поиска.</exception>
        <exception cref="T:System.BadImageFormatException">Соответствующий PDB-файл не найден из-за ошибки: Недопустимый образ PE или PDB.</exception>
        <exception cref="T:System.IO.IOException">Соответствующий PDB-файл не найден из-за ошибки: При чтении образа PE или PDB произошла ошибка ввода-вывода.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
