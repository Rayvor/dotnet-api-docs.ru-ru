<Type Name="MutexSecurity" FullName="System.Security.AccessControl.MutexSecurity">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cb99280c145167b31e93e52d990eaf815dd5fa4d" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69264678" /></Metadata><TypeSignature Language="C#" Value="public sealed class MutexSecurity : System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MutexSecurity extends System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.MutexSecurity" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MutexSecurity&#xA;Inherits NativeObjectSecurity" />
  <TypeSignature Language="C++ CLI" Value="public ref class MutexSecurity sealed : System::Security::AccessControl::NativeObjectSecurity" />
  <TypeSignature Language="F#" Value="type MutexSecurity = class&#xA;    inherit NativeObjectSecurity" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.NativeObjectSecurity</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Представляет систему безопасности управления доступом Windows для именованного мьютекса. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.MutexSecurity> Объект задает права доступа для именованного системного мьютекса, а также указывает способ аудита попыток доступа. Права доступа к мьютексу выражаются в виде правил с каждым правилом доступа, <xref:System.Security.AccessControl.MutexAccessRule> представленным объектом. Каждое правило аудита представлено <xref:System.Security.AccessControl.MutexAuditRule> объектом.  
  
 Это отражает базовую систему безопасности Windows, в которой каждый защищаемый объект имеет по крайней мере один избирательный список управления доступом (DACL), управляющий доступом к защищенному объекту, и не более одного системного списка управления доступом (SACL), который указывает, какой доступ попытки аудита. Списки DACL и SACL представляют собой упорядоченные списки записей управления доступом (ACE), которые определяют доступ и аудит для пользователей и групп. Объект <xref:System.Security.AccessControl.MutexAccessRule> или<xref:System.Security.AccessControl.MutexAuditRule> может представлять более одной записи ACE.  
  
> [!NOTE]
>  <xref:System.Threading.Mutex> Объект может представлять локальный мьютекс или именованный системный мьютекс. Безопасность управления доступом Windows имеет смысл только для именованных системных мьютексов.  
  
 Классы <xref:System.Security.AccessControl.MutexSecurity>, <xref:System.Security.AccessControl.MutexAccessRule> и<xref:System.Security.AccessControl.MutexAuditRule> скрывают сведения о реализации списков управления доступом и ACE. Они позволяют игнорировать Севентин различные типы ACE и сложность правильного поддержания наследования и распространения прав доступа. Эти объекты также предназначены для предотвращения следующих распространенных ошибок управления доступом:  
  
-   Создание дескриптора безопасности с пустым списком DACL. Пустая ссылка на DACL позволяет любому пользователю добавлять правила доступа к объекту, потенциально создавая атаку типа "отказ в обслуживании". Новый <xref:System.Security.AccessControl.MutexSecurity> объект всегда начинается с пустого списка DACL, который запрещает доступ всем пользователям.  
  
-   Нарушение канонического порядка записей ACE. Если список ACE в списке DACL не хранится в каноническом порядке, пользователям может быть непреднамеренно предоставлен доступ к защищенному объекту. Например, запрещенные права доступа всегда должны отображаться до разрешения доступа. <xref:System.Security.AccessControl.MutexSecurity>объекты обслуживают правильный порядок внутри.  
  
-   Управление флагами дескриптора безопасности, которые должны быть только в управлении Resource Manager.  
  
-   Создание недопустимых сочетаний флагов ACE.  
  
-   Управление унаследованными элементами ACE. Наследование и распространение обрабатываются диспетчером ресурсов в ответ на изменения, вносимые в правила доступа и аудита.  
  
-   Вставка бессмысленных элементов ACE в списки управления доступом.  
  
 Единственными возможностями, которые не поддерживаются объектами безопасности .NET, являются опасные действия, которые следует избегать большинству разработчиков приложений, в том числе следующие:  
  
-   Низкоуровневые задачи, которые обычно выполняются диспетчером ресурсов.  
  
-   Добавление или удаление записей контроля доступа таким образом, чтобы не поддерживать каноническое упорядочение.  
  
 Чтобы изменить безопасность управления доступом Windows для именованного мьютекса, используйте <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType> метод для <xref:System.Security.AccessControl.MutexSecurity> получения объекта. Измените объект безопасности, добавив и удалив правила, а затем повторно подключите <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType> его с помощью метода.  
  
> [!IMPORTANT]
>  Изменения, вносимые в <xref:System.Security.AccessControl.MutexSecurity> объект, не влияют на уровни доступа именованного мьютекса до тех пор, пока не будет <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType> вызван метод назначения измененного объекта безопасности именованному мьютексу.  
  
 Чтобы скопировать безопасность управления доступом из одного мьютекса в другой, используйте <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType> метод, чтобы <xref:System.Security.AccessControl.MutexSecurity> получить объект, представляющий правила доступа и аудита для первого мьютекса <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType> , а затем используйте метод или конструктор, принимающий <xref:System.Security.AccessControl.MutexSecurity>объект, чтобы назначить эти правила второму мьютексу.  
  
 Пользователи с вложениями в языке определения дескрипторов безопасности (SDDL) могут использовать <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> метод для задания правил доступа для именованного мьютекса, <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> а метод — для получения строки, представляющей правила доступа в формате SDDL. Это не рекомендуется для новых разработок.  
  
> [!NOTE]
>  Безопасность объектов синхронизации не поддерживается для Windows 98 или Windows Millennium Edition.  
  
   
  
## Examples  
 В следующем примере кода показано разделение <xref:System.Security.AccessControl.AccessControlType.Allow> правил и <xref:System.Security.AccessControl.AccessControlType.Deny> правил, а также показано сочетание прав в совместимых правилах. В примере создается <xref:System.Security.AccessControl.MutexSecurity> объект, добавляются правила, которые разрешают и отклоняют различные права для текущего пользователя, а также выводятся полученные пары правил. Затем этот пример разрешает новые права для текущего пользователя и отображает результат, показывая, что новые права объединяются с существующим <xref:System.Security.AccessControl.AccessControlType.Allow> правилом.  
  
> [!NOTE]
>  В этом примере объект безопасности не подключается к <xref:System.Threading.Mutex> объекту. Примеры, в которых присоединяются объекты безопасности, <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType> можно <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>найти в и.  
  
 [!code-csharp[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.AccessControl.MutexAccessRule" />
    <altmember cref="T:System.Security.AccessControl.MutexAuditRule" />
    <altmember cref="T:System.Security.AccessControl.MutexRights" />
    <altmember cref="M:System.Threading.Mutex.GetAccessControl" />
    <altmember cref="M:System.Threading.Mutex.SetAccessControl(System.Security.AccessControl.MutexSecurity)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.AccessControl.MutexSecurity" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MutexSecurity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MutexSecurity();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.AccessControl.MutexSecurity" /> со значениями по умолчанию.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Новый <xref:System.Security.AccessControl.MutexSecurity> объект всегда начинается с пустого списка доступа на уровне пользователей (DACL), который запрещает доступ всем пользователям.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">В Windows 98 и Windows Millenium Edition этот класс не поддерживается.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MutexSecurity (string name, System.Security.AccessControl.AccessControlSections includeSections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Security.AccessControl.AccessControlSections includeSections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, includeSections As AccessControlSections)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MutexSecurity(System::String ^ name, System::Security::AccessControl::AccessControlSections includeSections);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.MutexSecurity : string * System.Security.AccessControl.AccessControlSections -&gt; System.Security.AccessControl.MutexSecurity" Usage="new System.Security.AccessControl.MutexSecurity (name, includeSections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="includeSections" Type="System.Security.AccessControl.AccessControlSections" />
      </Parameters>
      <Docs>
        <param name="name">Имя системного мьютекса, у которого запрашиваются правила безопасности управления доступом.</param>
        <param name="includeSections">Сочетание флагов <see cref="T:System.Security.AccessControl.AccessControlSections" />, которое определяет получаемые разделы.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.AccessControl.MutexSecurity" /> с указанными разделами правил безопасности управления доступом из системного мьютекса с указанным именем.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор позволяет получить безопасность управления доступом для именованного системного мьютекса без предварительного создания <xref:System.Threading.Mutex> объекта.  
  
 При работе с именованными системными объектами необходимо соблюдать осторожность. Если имеется системный объект с именем `name` , который не является мьютексом, может быть получено управление доступом к нему.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">Отсутствует системный объект с указанным именем.</exception>
        <exception cref="T:System.NotSupportedException">В Windows 98 и Windows Millenium Edition этот класс не поддерживается.</exception>
      </Docs>
    </Member>
    <Member MemberName="AccessRightType">
      <MemberSignature Language="C#" Value="public override Type AccessRightType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRightType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.MutexSecurity.AccessRightType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRightType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRightType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessRightType : Type" Usage="System.Security.AccessControl.MutexSecurity.AccessRightType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение перечисления, используемое классом <see cref="T:System.Security.AccessControl.MutexSecurity" /> для обозначения прав доступа.</summary>
        <value>Объект <see cref="T:System.Type" />, представляющий перечисление <see cref="T:System.Security.AccessControl.MutexRights" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Классы, производные от <xref:System.Security.AccessControl.ObjectSecurity> класса переопределение <xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> свойства и возвращаемые типа, они используют для обозначения прав доступа. При работе с массивами или коллекциями, содержащими объекты безопасности нескольких типов, используйте это свойство, чтобы определить правильный тип перечисления для использования с каждым объектом безопасности.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AccessRule AccessRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AccessRule ^ AccessRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="override this.AccessRuleFactory : System.Security.Principal.IdentityReference * int * bool * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.AccessRule" Usage="mutexSecurity.AccessRuleFactory (identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AccessRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identityReference">Объект <see cref="T:System.Security.Principal.IdentityReference" />, идентифицирующий пользователя или группу, к которым относится данное правило.</param>
        <param name="accessMask">Побитовое сочетание значений <see cref="T:System.Security.AccessControl.MutexRights" />, определяющее разрешаемые или запрещаемые права доступа, приведенное к целочисленному типу.</param>
        <param name="isInherited">Нет смысла использовать для именованных мьютексов, так как у них отсутствует иерархия.</param>
        <param name="inheritanceFlags">Нет смысла использовать для именованных мьютексов, так как у них отсутствует иерархия.</param>
        <param name="propagationFlags">Нет смысла использовать для именованных мьютексов, так как у них отсутствует иерархия.</param>
        <param name="type">Одно из значений <see cref="T:System.Security.AccessControl.AccessControlType" />, определяющее тип правила ("разрешить" или "запретить").</param>
        <summary>Создает новое правило управления доступом для указанного пользователя с указанными правами, типом управления доступом и флагами.</summary>
        <returns>Объект <see cref="T:System.Security.AccessControl.MutexAccessRule" />, представляющий указанные права для указанного пользователя.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для создания правил управления доступом рекомендуется использовать конструкторы <xref:System.Security.AccessControl.MutexAccessRule> класса.  
  
> [!NOTE]
>  Хотя флаги наследования и распространения не имеют смысла для именованных мьютексов, их все равно можно указать. Это не рекомендуется, так как это не является достаточно сложным обслуживанием правил, например, мешая сочетанию правил, которые в противном случае были бы совместимы.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" /> или <paramref name="type" /> имеет недопустимое значение.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="identityReference" /> — <see langword="null" />.  
  
- или - 
 <paramref name="accessMask" /> равен нулю.</exception>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="identityReference" /> не относится к типу <see cref="T:System.Security.Principal.SecurityIdentifier" /> и к такому типу, как <see cref="T:System.Security.Principal.NTAccount" />, который можно преобразовать в тип <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleType">
      <MemberSignature Language="C#" Value="public override Type AccessRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.MutexSecurity.AccessRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRuleType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessRuleType : Type" Usage="System.Security.AccessControl.MutexSecurity.AccessRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает тип, используемый классом <see cref="T:System.Security.AccessControl.MutexSecurity" /> для обозначения правил доступа.</summary>
        <value>Объект <see cref="T:System.Type" />, представляющий класс <see cref="T:System.Security.AccessControl.MutexAccessRule" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Классы, производные от <xref:System.Security.AccessControl.ObjectSecurity> класса, <xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> переопределяют свойство и возвращают тип, который они используют для представления правил доступа. При работе с массивами или коллекциями, содержащими объекты безопасности нескольких типов, используйте это свойство, чтобы определить правильный тип правила доступа для использования с каждым объектом безопасности.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAccessRule">
      <MemberSignature Language="C#" Value="public void AddAccessRule (System.Security.AccessControl.MutexAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAccessRule(class System.Security.AccessControl.MutexAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.AddAccessRule(System.Security.AccessControl.MutexAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAccessRule (rule As MutexAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAccessRule(System::Security::AccessControl::MutexAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.AddAccessRule : System.Security.AccessControl.MutexAccessRule -&gt; unit" Usage="mutexSecurity.AddAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">Добавляемое правило управления доступом.</param>
        <summary>Выполняет поиск подходящего правила управления доступом, с которым можно объединить новое правило. Если поиск не дал результатов, добавляется новое правило.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.MutexSecurity.AddAccessRule%2A> Метод осуществляет поиск правила с тем же именем пользователя или группу и же <xref:System.Security.AccessControl.AccessControlType> как `rule`. Если ничего не найдено, `rule` добавляется. Если правило сопоставления найдено, права в `rule` объединяются с существующим правилом.  
  
   
  
## Examples  
 В следующем примере кода показано разделение <xref:System.Security.AccessControl.AccessControlType.Allow> правил и <xref:System.Security.AccessControl.AccessControlType.Deny> правил, а также показано сочетание прав в совместимых правилах. В примере создается <xref:System.Security.AccessControl.MutexSecurity> объект, добавляются правила, которые разрешают и отклоняют различные права для текущего пользователя, а также выводятся полученные пары правил. Затем этот пример разрешает новые права для текущего пользователя и отображает результат, показывая, что новые права объединяются с существующим <xref:System.Security.AccessControl.AccessControlType.Allow> правилом.  
  
> [!NOTE]
>  В этом примере объект безопасности не подключается к <xref:System.Threading.Mutex> объекту. Примеры, в которых присоединяются объекты безопасности, <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType>можно найти в <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="rule" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Security.Principal.IdentityNotMappedException"><paramref name="rule" /> не может быть сопоставлен известному удостоверению.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddAuditRule">
      <MemberSignature Language="C#" Value="public void AddAuditRule (System.Security.AccessControl.MutexAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAuditRule(class System.Security.AccessControl.MutexAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.AddAuditRule(System.Security.AccessControl.MutexAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAuditRule (rule As MutexAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAuditRule(System::Security::AccessControl::MutexAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.AddAuditRule : System.Security.AccessControl.MutexAuditRule -&gt; unit" Usage="mutexSecurity.AddAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">Добавляемое правило аудита. Поиск ведется по имени пользователя, указанному в этом правиле.</param>
        <summary>Осуществляет поиск правила аудита, с которым можно объединить новое правило. Если поиск не дал результатов, добавляется новое правило.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод выполняет поиск правил с тем же пользователем или группой, что `rule`и. <xref:System.Security.AccessControl.MutexSecurity.AddAuditRule%2A> Если ничего не найдено, `rule` добавляется. Если правило сопоставления найдено, то флаги в `rule` объединяются в существующее правило.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AuditRule AuditRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AuditRule ^ AuditRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AuditFlags flags);" />
      <MemberSignature Language="F#" Value="override this.AuditRuleFactory : System.Security.Principal.IdentityReference * int * bool * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AuditFlags -&gt; System.Security.AccessControl.AuditRule" Usage="mutexSecurity.AuditRuleFactory (identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AuditRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identityReference">Объект <see cref="T:System.Security.Principal.IdentityReference" />, идентифицирующий пользователя или группу, к которым относится данное правило.</param>
        <param name="accessMask">Побитовое сочетание значений <see cref="T:System.Security.AccessControl.MutexRights" />, определяющее права доступа для аудита, приведенное к целочисленному типу.</param>
        <param name="isInherited">Нет смысла использовать для именованных дескрипторов ожидания, так как у них отсутствует иерархия.</param>
        <param name="inheritanceFlags">Нет смысла использовать для именованных дескрипторов ожидания, так как у них отсутствует иерархия.</param>
        <param name="propagationFlags">Нет смысла использовать для именованных дескрипторов ожидания, так как у них отсутствует иерархия.</param>
        <param name="flags">Побитовое сочетание значений <see cref="T:System.Security.AccessControl.AuditFlags" />, определяющее предмет аудита — успешные попытки доступа, неудачные попытки доступа или все попытки доступа.</param>
        <summary>Создает новое правило аудита, в котором указывается пользователь, к которому относится правило, правила доступа для аудита, а также событие, вызывающее срабатывание правила аудита.</summary>
        <returns>Объект <see cref="T:System.Security.AccessControl.MutexAuditRule" />, представляющий указанное правило аудита для указанного пользователя. Метод возвращает объект базового класса (<see cref="T:System.Security.AccessControl.AuditRule" />), но возвращаемое значение можно безопасно привести к производному классу.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для создания правил аудита рекомендуется использовать конструкторы <xref:System.Security.AccessControl.MutexAuditRule> класса.  
  
> [!NOTE]
>  Хотя флаги наследования и распространения не имеют смысла для именованных мьютексов, их все равно можно указать. Это не рекомендуется, так как это не является достаточно сложным обслуживанием правил, например, мешая сочетанию правил, которые в противном случае были бы совместимы.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" /> или <paramref name="flags" /> имеет недопустимое значение.</exception>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="identityReference" /> имеет значение <see langword="null" />.  
  
- или - 
 <paramref name="accessMask" /> равен нулю.</exception>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="identityReference" /> не относится к типу <see cref="T:System.Security.Principal.SecurityIdentifier" /> и к такому типу, как <see cref="T:System.Security.Principal.NTAccount" />, который можно преобразовать в тип <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleType">
      <MemberSignature Language="C#" Value="public override Type AuditRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AuditRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.MutexSecurity.AuditRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AuditRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AuditRuleType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AuditRuleType : Type" Usage="System.Security.AccessControl.MutexSecurity.AuditRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает тип, используемый классом <see cref="T:System.Security.AccessControl.MutexSecurity" /> для обозначения правил аудита.</summary>
        <value>Объект <see cref="T:System.Type" />, представляющий класс <see cref="T:System.Security.AccessControl.MutexAuditRule" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Классы, производные от <xref:System.Security.AccessControl.ObjectSecurity> класса переопределение <xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> свойства и возвращаемые типа, они используют для обозначения прав аудита. При работе с массивами или коллекциями, содержащими объекты безопасности нескольких типов, используйте это свойство, чтобы определить правильный тип правила аудита для использования с каждым объектом безопасности.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRule">
      <MemberSignature Language="C#" Value="public bool RemoveAccessRule (System.Security.AccessControl.MutexAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAccessRule(class System.Security.AccessControl.MutexAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.RemoveAccessRule(System.Security.AccessControl.MutexAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAccessRule (rule As MutexAccessRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAccessRule(System::Security::AccessControl::MutexAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRule : System.Security.AccessControl.MutexAccessRule -&gt; bool" Usage="mutexSecurity.RemoveAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">Объект <see cref="T:System.Security.AccessControl.MutexAccessRule" />, определяющий пользователя и тип <see cref="T:System.Security.AccessControl.AccessControlType" /> для поиска, а также набор флагов наследования и распространения, с которыми должно быть совместимо найденное правило. Задает права, которые требуется удалить из совместимого правила, если оно будет найдено.</param>
        <summary>Осуществляет поиск правила управления доступом с тем же именем пользователя и значением <see cref="T:System.Security.AccessControl.AccessControlType" /> ("разрешить" или "запретить"), что и указанного правила, а также с совместимыми флагами наследования и распространения; если правило найдено, содержащиеся в указанном правиле доступа права удаляются.</summary>
        <returns>Значение <see langword="true" />, если совместимое правило найдено; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Текущий <xref:System.Security.AccessControl.MutexSecurity> ищется правило, которое имеет тот же пользователь и имеет одинаковые <xref:System.Security.AccessControl.AccessControlType> значение как `rule`. Если такое правило не найдено, никакие действия не выполняются и метод возвращает `false`значение. Если правила сопоставления найдены, их флагов наследования и совместимости проверка на совместимость с флагов, указанных в `rule`. Если не совместимое правило найдено, никакие действия не выполняются, и метод возвращает `false`. Если обнаруживается правило с совместимыми флагами, права, указанные в `rule` удаляются из совместимого правила, а метод возвращает `true`. Если `rule` задает права, не содержится в совместимого правила, никакие действия не выполняются по отношению к эти права. Если все права удаляются из совместимого правила, правило целиком удаляется из текущей <xref:System.Security.AccessControl.MutexSecurity> объекта.  
  
> [!IMPORTANT]
>  Хотя вы можете указать флаги наследования и распространения для правил доступа к мьютексу, создав их <xref:System.Security.AccessControl.MutexSecurity.AccessRuleFactory%2A> с помощью метода, это делать не рекомендуется. Наследование и распространение не имеют смысла для именованных мьютексов, и они делают обслуживание правил доступа более сложным.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется использование <xref:System.Security.AccessControl.MutexSecurity.RemoveAccessRule%2A> метод для удаления прав из <xref:System.Security.AccessControl.AccessControlType.Allow> правило из <xref:System.Security.AccessControl.MutexSecurity> объекта. Он также показывает, что другие права `rule` в не учитываются.  
  
 В примере создается <xref:System.Security.AccessControl.MutexSecurity> объект и добавляются правила, которые разрешают и отклоняют различные права для текущего пользователя. Права допускается включать <xref:System.Security.AccessControl.MutexRights.Modify>, <xref:System.Security.AccessControl.MutexRights.ReadPermissions>, и <xref:System.Security.AccessControl.MutexRights.Synchronize>. Затем в примере создается новое правило для текущего пользователя, включая <xref:System.Security.AccessControl.MutexRights.ReadPermissions> и <xref:System.Security.AccessControl.MutexRights.TakeOwnership> прав и использует правила с <xref:System.Security.AccessControl.MutexSecurity.RemoveAccessRule%2A> способ удаления <xref:System.Security.AccessControl.MutexRights.ReadPermissions> из <xref:System.Security.AccessControl.AccessControlType.Allow> правило из <xref:System.Security.AccessControl.MutexSecurity> объекта. Лишнее <xref:System.Security.AccessControl.MutexRights.TakeOwnership> право в `rule` не учитывается.  
  
> [!NOTE]
>  В этом примере объект безопасности не подключается к <xref:System.Threading.Mutex> объекту. Примеры, в которых присоединяются объекты безопасности, <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType> можно <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>найти в и.  
  
 [!code-csharp[System.Security.AccessControl.MutexSecurity.RemoveAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.RemoveAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.MutexSecurity.RemoveAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.RemoveAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleAll (System.Security.AccessControl.MutexAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleAll(class System.Security.AccessControl.MutexAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll(System.Security.AccessControl.MutexAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAccessRuleAll (rule As MutexAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAccessRuleAll(System::Security::AccessControl::MutexAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRuleAll : System.Security.AccessControl.MutexAccessRule -&gt; unit" Usage="mutexSecurity.RemoveAccessRuleAll rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">Объект <see cref="T:System.Security.AccessControl.MutexAccessRule" />, определяющий пользователя и значение <see cref="T:System.Security.AccessControl.AccessControlType" /> для поиска. Все указанные в данном правиле права игнорируются.</param>
        <summary>Осуществляет поиск всех правил управления доступом с тем же именем пользователя и значением свойства <see cref="T:System.Security.AccessControl.AccessControlType" /> ("разрешить" или "запретить"), что и у указанного правила, и удаляет найденные правила.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Текущий <xref:System.Security.AccessControl.MutexSecurity> объект ищется правила, имеющие тот же пользователь и имеет одинаковые <xref:System.Security.AccessControl.AccessControlType> значение как `rule`. Все права, заданные параметром `rule` , игнорируются при выполнении этого поиска. Если соответствующие правила не найдены, никакие действия не выполняются.  
  
   
  
## Examples  
 В следующем примере кода показано, что <xref:System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll%2A> метод удаляет все правила, соответствующие пользователю, <xref:System.Security.AccessControl.AccessControlType>и, игнорируя права.  
  
 В примере создается <xref:System.Security.AccessControl.MutexSecurity> , добавляются правила, разрешающие и запрещающие различные права для текущего пользователя и затем объединяет дополнительные права в <xref:System.Security.AccessControl.AccessControlType.Allow> правило. Затем в примере создается новое правило, текущий пользователь может стать владельцем и использует правила, чтобы удалить <xref:System.Security.AccessControl.AccessControlType.Allow> правила из <xref:System.Security.AccessControl.MutexSecurity> объекта.  
  
> [!NOTE]
>  В этом примере объект безопасности не подключается к <xref:System.Threading.Mutex> объекту. Примеры, в которых присоединяются объекты безопасности, <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType> можно <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>найти в и.  
  
 [!code-csharp[System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="rule" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleSpecific (System.Security.AccessControl.MutexAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleSpecific(class System.Security.AccessControl.MutexAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.MutexAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAccessRuleSpecific (rule As MutexAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAccessRuleSpecific(System::Security::AccessControl::MutexAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRuleSpecific : System.Security.AccessControl.MutexAccessRule -&gt; unit" Usage="mutexSecurity.RemoveAccessRuleSpecific rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">Объект <see cref="T:System.Security.AccessControl.MutexAccessRule" /> для удаления.</param>
        <summary>Осуществляет поиск правила управления доступом, в точности соответствующего указанному правилу, и удаляет найденное правило.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Правило удаляется только в том случае, если `rule` оно точно совпадает со всеми сведениями, включая флаги. Другие правила с тем же пользователем и <xref:System.Security.AccessControl.AccessControlType> не затрагиваются.  
  
> [!IMPORTANT]
>  Правило представляет одну или несколько базовых записей контроля доступа (ACE), и эти записи при необходимости разбиваются или объединяются при изменении правил безопасности доступа для пользователя. Таким <xref:System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific%2A> способом, правило может больше не существовать в конкретной форме, когда оно было добавлено, и в этом случае метод не может удалить его.  
  
   
  
## Examples  
 В следующем примере кода показано, что <xref:System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific%2A> методу требуется точное соответствие для удаления правила, а правила разрешения и запрета не зависят друг от друга.  
  
 В примере создается <xref:System.Security.AccessControl.MutexSecurity> объект, добавляются правила, разрешающие и отклоняющие различные права для текущего пользователя, а затем объединяются дополнительные права <xref:System.Security.AccessControl.AccessControlType.Allow> в правиле доступа. Затем в примере исходное <xref:System.Security.AccessControl.AccessControlType.Allow> правило <xref:System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific%2A> передается в метод, а результаты отображаются, что показывает, что ничего не удаляется. Затем в примере создается правило, соответствующее <xref:System.Security.AccessControl.AccessControlType.Allow> правилу <xref:System.Security.AccessControl.MutexSecurity> в объекте <xref:System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific%2A> , и для удаления правила используется метод.  
  
> [!NOTE]
>  В этом примере объект безопасности не подключается к <xref:System.Threading.Mutex> объекту. Примеры, в которых присоединяются объекты безопасности, <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType> можно <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>найти в и.  
  
 [!code-csharp[System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="rule" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRule">
      <MemberSignature Language="C#" Value="public bool RemoveAuditRule (System.Security.AccessControl.MutexAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAuditRule(class System.Security.AccessControl.MutexAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.RemoveAuditRule(System.Security.AccessControl.MutexAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAuditRule (rule As MutexAuditRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAuditRule(System::Security::AccessControl::MutexAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRule : System.Security.AccessControl.MutexAuditRule -&gt; bool" Usage="mutexSecurity.RemoveAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">Объект <see cref="T:System.Security.AccessControl.MutexAuditRule" />, определяющий пользователя для поиска, а также набор флагов наследования и распространения, с которыми должно быть совместимо найденное правило. Задает права, которые требуется удалить из совместимого правила, если оно будет найдено.</param>
        <summary>Осуществляет поиск правила управления аудитом с тем же именем пользователя, что и указанного правила доступа, а также с совместимыми флагами наследования и распространения; если совместимое правило найдено, содержащиеся в указанном правиле права удаляются.</summary>
        <returns>Значение <see langword="true" />, если совместимое правило найдено; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В текущем <xref:System.Security.AccessControl.MutexSecurity> поиске выполняется поиск правила аудита с тем же пользователем, что `rule`и. Если такое правило не найдено, никакие действия не выполняются и метод возвращает `false`значение. Если правила сопоставления найдены, их флагов наследования и совместимости проверка на совместимость с флагов, указанных в `rule`. Если не совместимое правило найдено, никакие действия не выполняются, и метод возвращает `false`. Если обнаруживается правило с совместимыми флагами, права, указанные в `rule` удаляются из совместимого правила, а метод возвращает `true`. Если `rule` задает права, не содержится в совместимого правила, никакие действия не выполняются по отношению к эти права. Если все права удаляются из совместимого правила, правило целиком удаляется из текущей <xref:System.Security.AccessControl.MutexSecurity> объекта.  
  
> [!IMPORTANT]
>  Хотя вы можете указать флаги наследования и распространения для правил аудита мьютексов, создав их с <xref:System.Security.AccessControl.MutexSecurity.AccessRuleFactory%2A> помощью метода, это делать не рекомендуется. Наследование и распространение не имеют смысла для именованных мьютексов, и они делают обслуживание правил аудита более сложным.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="rule" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleAll (System.Security.AccessControl.MutexAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleAll(class System.Security.AccessControl.MutexAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.RemoveAuditRuleAll(System.Security.AccessControl.MutexAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleAll (rule As MutexAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleAll(System::Security::AccessControl::MutexAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRuleAll : System.Security.AccessControl.MutexAuditRule -&gt; unit" Usage="mutexSecurity.RemoveAuditRuleAll rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">Объект <see cref="T:System.Security.AccessControl.MutexAuditRule" />, определяющий пользователя для поиска. Все указанные в данном правиле права игнорируются.</param>
        <summary>Производит поиск всех правил аудита с тем же пользователем, что и у указанного правила, и удаляет найденные правила.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В текущем <xref:System.Security.AccessControl.MutexSecurity> поиске выполняется поиск правил аудита, имеющих того же пользователя, `rule`что и. Все права, заданные параметром `rule` , игнорируются при выполнении этого поиска. Удаляются все правила сопоставления. Если соответствующие правила не найдены, никакие действия не выполняются.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleSpecific (System.Security.AccessControl.MutexAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleSpecific(class System.Security.AccessControl.MutexAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.MutexAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleSpecific (rule As MutexAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleSpecific(System::Security::AccessControl::MutexAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRuleSpecific : System.Security.AccessControl.MutexAuditRule -&gt; unit" Usage="mutexSecurity.RemoveAuditRuleSpecific rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">Удаляемый объект <see cref="T:System.Security.AccessControl.MutexAuditRule" />.</param>
        <summary>Осуществляет поиск правила аудита, в точности соответствующего указанному правилу, и удаляет найденное правило.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Правило удаляется только в том случае, если `rule` оно точно совпадает со всеми сведениями, включая флаги. Другие правила аудита для этого же пользователя не затрагиваются.  
  
> [!IMPORTANT]
>  Правило представляет одну или несколько базовых записей контроля доступа (ACE), и эти записи при необходимости разбиваются или объединяются при изменении правил безопасности аудита для пользователя. Таким <xref:System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific%2A> способом, правило может больше не существовать в конкретной форме, когда оно было добавлено, и в этом случае метод не может удалить его.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ResetAccessRule">
      <MemberSignature Language="C#" Value="public void ResetAccessRule (System.Security.AccessControl.MutexAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetAccessRule(class System.Security.AccessControl.MutexAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.ResetAccessRule(System.Security.AccessControl.MutexAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetAccessRule (rule As MutexAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetAccessRule(System::Security::AccessControl::MutexAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.ResetAccessRule : System.Security.AccessControl.MutexAccessRule -&gt; unit" Usage="mutexSecurity.ResetAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">Добавляемый объект <see cref="T:System.Security.AccessControl.MutexAccessRule" />. Имя пользователя, заданное в этом правиле, определяет правила, которые необходимо удалить перед добавлением данного правила.</param>
        <summary>Удаляет все правила управления доступом с тем же именем пользователя, что и у указанного правила, вне зависимости от значения свойства <see cref="T:System.Security.AccessControl.AccessControlType" />, после чего добавляет указанное правило.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если нет правил доступа, для которых пользователь соответствует указанному правилу `rule` , добавляется.  
  
   
  
## Examples  
 В следующем примере кода показано, <xref:System.Security.AccessControl.MutexSecurity.ResetAccessRule%2A> как метод заменяет все правила для соответствующего пользователя правилом, указанным для сопоставления.  
  
 В примере создается <xref:System.Security.AccessControl.MutexSecurity> объект и добавляются правила, которые разрешают и отклоняют различные права для текущего пользователя. Затем в примере создается новое правило, которое разрешает текущему пользователю полный доступ, и использует <xref:System.Security.AccessControl.MutexSecurity.ResetAccessRule%2A> метод для замены обоих существующих правил новым правилом.  
  
> [!NOTE]
>  В этом примере объект безопасности не подключается к <xref:System.Threading.Mutex> объекту. Примеры, в которых присоединяются объекты безопасности, <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType> можно <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>найти в и.  
  
 [!code-csharp[System.Security.AccessControl.MutexSecurity.ResetAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.ResetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.MutexSecurity.ResetAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.ResetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="rule" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAccessRule">
      <MemberSignature Language="C#" Value="public void SetAccessRule (System.Security.AccessControl.MutexAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessRule(class System.Security.AccessControl.MutexAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.SetAccessRule(System.Security.AccessControl.MutexAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAccessRule (rule As MutexAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessRule(System::Security::AccessControl::MutexAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.SetAccessRule : System.Security.AccessControl.MutexAccessRule -&gt; unit" Usage="mutexSecurity.SetAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">Добавляемый объект <see cref="T:System.Security.AccessControl.MutexAccessRule" />. Имя пользователя и значение <see cref="T:System.Security.AccessControl.AccessControlType" /> определяют правила, которые необходимо удалить перед добавлением этого правила.</param>
        <summary>Удаляет все правила управления доступом с тем же именем пользователя и значением свойства <see cref="T:System.Security.AccessControl.AccessControlType" /> ("разрешить" или "запретить"), что и у указанного правила, после чего добавляет указанное правило.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если указанное правило имеет <xref:System.Security.AccessControl.AccessControlType.Allow>значение, результатом этого метода будет удалить все <xref:System.Security.AccessControl.AccessControlType.Allow> правила для указанного пользователя, заменив их указанным правилом. Если указанное правило имеет <xref:System.Security.AccessControl.AccessControlType.Deny>значение, все <xref:System.Security.AccessControl.AccessControlType.Deny> правила для указанного пользователя заменяются указанным правилом.  
  
 Если правила, для которых пользователь <xref:System.Security.AccessControl.AccessControlType> соответствует указанному правилу, не существует, `rule` добавляется.  
  
   
  
## Examples  
 В следующем примере <xref:System.Security.AccessControl.MutexSecurity.SetAccessRule%2A> кода показано `rule`, как метод удаляет все правила, совпадающие как с пользователем, <xref:System.Security.AccessControl.AccessControlType> так и с, заменяя их на `rule`.  
  
 В примере создается <xref:System.Security.AccessControl.MutexSecurity> объект и добавляются правила, которые разрешают и отклоняют различные права для текущего пользователя. Затем в примере создается новое правило, которое разрешает текущему пользователю полный доступ, и использует <xref:System.Security.AccessControl.MutexSecurity.SetAccessRule%2A> метод для замены существующего правила разрешения на новое правило. Правило, запрещающее доступ, не затрагивается.  
  
> [!NOTE]
>  В этом примере объект безопасности не подключается к <xref:System.Threading.Mutex> объекту. Примеры, в которых присоединяются объекты безопасности, <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType> можно <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>найти в и.  
  
 [!code-csharp[System.Security.AccessControl.MutexSecurity.SetAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.SetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.MutexSecurity.SetAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.SetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAuditRule">
      <MemberSignature Language="C#" Value="public void SetAuditRule (System.Security.AccessControl.MutexAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAuditRule(class System.Security.AccessControl.MutexAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.SetAuditRule(System.Security.AccessControl.MutexAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAuditRule (rule As MutexAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAuditRule(System::Security::AccessControl::MutexAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.SetAuditRule : System.Security.AccessControl.MutexAuditRule -&gt; unit" Usage="mutexSecurity.SetAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">Добавляемый объект <see cref="T:System.Security.AccessControl.MutexAuditRule" />. Имя пользователя, заданное в этом правиле, определяет правила, которые необходимо удалить перед добавлением данного правила.</param>
        <summary>Удаляет все правила аудита с тем же именем пользователя, что и у указанного правила, вне зависимости от значения свойства <see cref="T:System.Security.AccessControl.AuditFlags" />, после чего добавляет указанное правило.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если правила аудита, для которых пользователь соответствует указанному правилу, `rule` не существует, добавляется.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="rule" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
