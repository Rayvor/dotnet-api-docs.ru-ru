<Type Name="AceEnumerator" FullName="System.Security.AccessControl.AceEnumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e243cb564071bf81517ddfffdd03c3b5e986c43c" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70657346" /></Metadata><TypeSignature Language="C#" Value="public sealed class AceEnumerator : System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AceEnumerator extends System.Object implements class System.Collections.IEnumerator" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.AceEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AceEnumerator&#xA;Implements IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class AceEnumerator sealed : System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type AceEnumerator = class&#xA;    interface IEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Security.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Предоставляет возможность итерации по записям управления доступом (ACE) в списке управления доступом (ACL).</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.GenericAce Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.AccessControl.GenericAce Current" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.AceEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As GenericAce" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::GenericAce ^ Current { System::Security::AccessControl::GenericAce ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Security.AccessControl.GenericAce" Usage="System.Security.AccessControl.AceEnumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.GenericAce</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает текущий элемент в коллекции <see cref="T:System.Security.AccessControl.GenericAce" />. Это свойство получает версию объекта удобного типа.</summary>
        <value>Текущий элемент коллекции <see cref="T:System.Security.AccessControl.GenericAce" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.AceEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="aceEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Перемещает перечислитель к следующему элементу коллекции <see cref="T:System.Security.AccessControl.GenericAce" />.</summary>
        <returns>Значение <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу; значение <see langword="false" />, если перечислитель достиг конца коллекции.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 После создания перечислителя или после вызова <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> метода перечислитель позиционируется перед первым элементом коллекции, а первый вызов <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> метода перемещает перечислитель на первый элемент коллекции.  
  
 После передачи конца коллекции последующие вызовы <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> возвращаются `false` до <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> вызова метода.  
  
 Перечислитель остается действительным, пока коллекция не изменяется. Если в коллекцию вносятся изменения, такие как добавление, изменение или удаление элементов, перечислитель становится необратимо недействительным, а следующий вызов <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> или <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> вызывает <xref:System.InvalidOperationException>исключение.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">После создания перечислителя семейство было изменено.</exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.AceEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="aceEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Устанавливает перечислитель в исходное положение перед первым элементом коллекции <see cref="T:System.Security.AccessControl.GenericAce" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Перечислитель остается действительным, пока коллекция не изменяется. Если, например, в коллекцию добавляются, изменяются или удаляются элементы, перечислитель становится необратимо недействительным, а следующий вызов <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> метода <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> или метода вызывает исключение<xref:System.InvalidOperationException>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">После создания перечислителя семейство было изменено.</exception>
        <block subset="none" type="overrides"><para>Все вызовы <see cref="M:System.Security.AccessControl.AceEnumerator.Reset" /> должны приводить к одному и тому же состоянию перечислителя. Предпочтительная реализация — переместить перечислитель в начало коллекции перед первым элементом. Это сделает перечислитель недействительным, если коллекция была изменена с момента создания перечислителя, что согласуется с <see cref="M:System.Security.AccessControl.AceEnumerator.MoveNext" /> и <see cref="P:System.Security.AccessControl.AceEnumerator.Current" />.</para></block>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает текущий элемент в коллекции.</summary>
        <value>Текущий элемент в коллекции.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 После <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> создания перечислителя или после вызова метода необходимо <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> вызвать метод, чтобы переместить перечислитель к первому элементу коллекции <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>перед считыванием <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> значения; в противном случае — не определено. .  
  
 <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>также вызывает исключение, если последний вызов <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> возвращен `false`, который указывает на конец коллекции.  
  
 <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>не перемещает положение перечислителя и последовательные вызовы <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> , возвращающие один и тот же объект, <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> пока не будет вызван метод или.  
  
 Перечислитель остается действительным, пока коллекция не изменяется. Если в коллекцию вносятся изменения, такие как добавление, изменение или удаление элементов, перечислитель становится необратимо недействительным, а следующий вызов <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> или <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> вызывает <xref:System.InvalidOperationException>исключение. Если коллекция изменяется между <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> и <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>, <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> Возвращает элемент, для которого он установлен, даже если перечислитель уже недействителен.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">После создания перечислителя семейство было изменено.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
