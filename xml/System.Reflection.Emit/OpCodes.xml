<Type Name="OpCodes" FullName="System.Reflection.Emit.OpCodes">
  <Metadata><Meta Name="ms.openlocfilehash" Value="31aacfb3c9c41209604373f1222ef49403dcd208" /><Meta Name="ms.sourcegitcommit" Value="c573d537afba2d4c1463538f1095f2f155025464" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="10/16/2019" /><Meta Name="ms.locfileid" Value="72409087" /></Metadata><TypeSignature Language="C#" Value="public class OpCodes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit OpCodes extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.OpCodes" />
  <TypeSignature Language="VB.NET" Value="Public Class OpCodes" />
  <TypeSignature Language="C++ CLI" Value="public ref class OpCodes" />
  <TypeSignature Language="F#" Value="type OpCodes = class" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="5d800-101">Содержит поля, предоставляющие инструкции языка MSIL для выпуска элементами класса <see cref="T:System.Reflection.Emit.ILGenerator" /> (например, <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" />).</span><span class="sxs-lookup"><span data-stu-id="5d800-101">Provides field representations of the Microsoft Intermediate Language (MSIL) instructions for emission by the <see cref="T:System.Reflection.Emit.ILGenerator" /> class members (such as <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" />).</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-102">Подробное описание кодов операций для элементов см. в документации по Common Language Infrastructure (CLI), особенно в разделе III: Набор инструкций CIL "и" раздел II: Определение и семантика метаданных ".</span><span class="sxs-lookup"><span data-stu-id="5d800-102">For a detailed description of the member opcodes, see the Common Language Infrastructure (CLI) documentation, especially "Partition III: CIL Instruction Set" and "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="5d800-103">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](https://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="5d800-103">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5d800-104">В следующем примере демонстрируется создание динамического метода с помощью <xref:System.Reflection.Emit.ILGenerator> для порождения `OpCodes` в <xref:System.Reflection.Emit.MethodBuilder>.</span><span class="sxs-lookup"><span data-stu-id="5d800-104">The following example demonstrates the construction of a dynamic method using <xref:System.Reflection.Emit.ILGenerator> to emit `OpCodes` into a <xref:System.Reflection.Emit.MethodBuilder>.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add;" />
      <MemberSignature Language="F#" Value=" staticval mutable Add : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Add" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-105">Складывает два значения и помещает результат в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-105">Adds two values and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-106">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-106">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-107">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-107">Format</span></span>|<span data-ttu-id="5d800-108">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-108">Assembly Format</span></span>|<span data-ttu-id="5d800-109">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-109">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-110">58</span><span class="sxs-lookup"><span data-stu-id="5d800-110">58</span></span>|<span data-ttu-id="5d800-111">add</span><span class="sxs-lookup"><span data-stu-id="5d800-111">add</span></span>|<span data-ttu-id="5d800-112">Складывает два числовых значения, возвращая новое числовое значение.</span><span class="sxs-lookup"><span data-stu-id="5d800-112">Adds two numeric values, returning a new numeric value.</span></span>|  
  
 <span data-ttu-id="5d800-113">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-113">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-114">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-114">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-115">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-115">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-116">`value2` и `value1` извлекаются из стека; `value1` добавляется в `value2`.</span><span class="sxs-lookup"><span data-stu-id="5d800-116">`value2` and `value1` are popped from the stack; `value1` is added to `value2`.</span></span>  
  
4.  <span data-ttu-id="5d800-117">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-117">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-118">Переполнение не обнаружено для целочисленных операций (для правильной обработки переполнения см. <xref:System.Reflection.Emit.OpCodes.Add_Ovf>).</span><span class="sxs-lookup"><span data-stu-id="5d800-118">Overflow is not detected for integer operations (for proper overflow handling, see <xref:System.Reflection.Emit.OpCodes.Add_Ovf>).</span></span>  
  
 <span data-ttu-id="5d800-119">Сложение целых чисел, а не насыщенность.</span><span class="sxs-lookup"><span data-stu-id="5d800-119">Integer addition wraps, rather than saturates.</span></span> <span data-ttu-id="5d800-120">Например, при использовании 8-разрядных целых чисел, где `value1` устанавливается равным 255, а `value2` — 1, то упакованным результатом будет 0, а не 256.</span><span class="sxs-lookup"><span data-stu-id="5d800-120">For example, assuming 8-bit integers where `value1` is set to 255 and `value2` is set to 1, the wrapped result is 0 rather than 256.</span></span>  
  
 <span data-ttu-id="5d800-121">Переполнение с плавающей точкой возвращает `+inf` (`PositiveInfinity`) или `-inf` (`NegativeInfinity`).</span><span class="sxs-lookup"><span data-stu-id="5d800-121">Floating-point overflow returns `+inf` (`PositiveInfinity`) or `-inf` (`NegativeInfinity`).</span></span>  
  
 <span data-ttu-id="5d800-122">Допустимые типы операндов и соответствующий тип данных результата перечислены в таблице ниже.</span><span class="sxs-lookup"><span data-stu-id="5d800-122">The acceptable operand types and their corresponding result data type are listed in the table below.</span></span> <span data-ttu-id="5d800-123">Если нет записи для определенного сочетания типа (например, `int32` и `float`; `int32` и `int64`), это недопустимый MSIL и создает ошибку.</span><span class="sxs-lookup"><span data-stu-id="5d800-123">If there is no entry for a particular type combination (for example, `int32` and `float`; `int32` and `int64`), it is an invalid Microsoft Intermediate Language (MSIL) and generates an error.</span></span>  
  
|<span data-ttu-id="5d800-124">операнд</span><span class="sxs-lookup"><span data-stu-id="5d800-124">operand</span></span>|<span data-ttu-id="5d800-125">Тип value1</span><span class="sxs-lookup"><span data-stu-id="5d800-125">value1 type</span></span>|<span data-ttu-id="5d800-126">Тип value2</span><span class="sxs-lookup"><span data-stu-id="5d800-126">value2 type</span></span>|<span data-ttu-id="5d800-127">Тип результата</span><span class="sxs-lookup"><span data-stu-id="5d800-127">result type</span></span>|  
|-------------|-----------------|-----------------|-----------------|  
|<span data-ttu-id="5d800-128">add</span><span class="sxs-lookup"><span data-stu-id="5d800-128">add</span></span>|`int32`|`int32`|`int32`|  
|<span data-ttu-id="5d800-129">add</span><span class="sxs-lookup"><span data-stu-id="5d800-129">add</span></span>|`int32`|`native int`|`native int`|  
|<span data-ttu-id="5d800-130">add</span><span class="sxs-lookup"><span data-stu-id="5d800-130">add</span></span>|`int32`|`&`|`&`|  
|<span data-ttu-id="5d800-131">add</span><span class="sxs-lookup"><span data-stu-id="5d800-131">add</span></span>|`int32`|`*`|`*`|  
|<span data-ttu-id="5d800-132">add</span><span class="sxs-lookup"><span data-stu-id="5d800-132">add</span></span>|`int64`|`int64`|`int64`|  
|<span data-ttu-id="5d800-133">add</span><span class="sxs-lookup"><span data-stu-id="5d800-133">add</span></span>|`native int`|`int32`|`native int`|  
|<span data-ttu-id="5d800-134">add</span><span class="sxs-lookup"><span data-stu-id="5d800-134">add</span></span>|`native int`|`native int`|`native int`|  
|<span data-ttu-id="5d800-135">add</span><span class="sxs-lookup"><span data-stu-id="5d800-135">add</span></span>|`native int`|`&`|`&`|  
|<span data-ttu-id="5d800-136">add</span><span class="sxs-lookup"><span data-stu-id="5d800-136">add</span></span>|`native int`|`*`|`*`|  
|<span data-ttu-id="5d800-137">add</span><span class="sxs-lookup"><span data-stu-id="5d800-137">add</span></span>|`F`|`F`|`F`|  
|<span data-ttu-id="5d800-138">add</span><span class="sxs-lookup"><span data-stu-id="5d800-138">add</span></span>|`&`|`int32`|`&`|  
|<span data-ttu-id="5d800-139">add</span><span class="sxs-lookup"><span data-stu-id="5d800-139">add</span></span>|`&`|`native int`|`&`|  
|<span data-ttu-id="5d800-140">add</span><span class="sxs-lookup"><span data-stu-id="5d800-140">add</span></span>|`*`|`int32`|`*`|  
|<span data-ttu-id="5d800-141">add</span><span class="sxs-lookup"><span data-stu-id="5d800-141">add</span></span>|`*`|`native int`|`*`|  
  
 <span data-ttu-id="5d800-142">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `add`:</span><span class="sxs-lookup"><span data-stu-id="5d800-142">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `add` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-143">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-143">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add_Ovf;" />
      <MemberSignature Language="F#" Value=" staticval mutable Add_Ovf : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Add_Ovf" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-144">Складывает два целых числа, выполняет проверку переполнения и помещает результат в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-144">Adds two integers, performs an overflow check, and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-145">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-145">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-146">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-146">Format</span></span>|<span data-ttu-id="5d800-147">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-147">Assembly Format</span></span>|<span data-ttu-id="5d800-148">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-148">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-149">D6</span><span class="sxs-lookup"><span data-stu-id="5d800-149">D6</span></span>|<span data-ttu-id="5d800-150">Добавить. ovf</span><span class="sxs-lookup"><span data-stu-id="5d800-150">add.ovf</span></span>|<span data-ttu-id="5d800-151">Добавляет два целочисленных значения со знаком с помощью проверки переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-151">Adds two signed integer values with an overflow check.</span></span>|  
  
 <span data-ttu-id="5d800-152">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-152">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-153">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-153">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-154">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-154">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-155">`value2` и `value1` извлекаются из стека; `value1` добавляется в `value2` с помощью проверки переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-155">`value2` and `value1` are popped from the stack; `value1` is added to `value2` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="5d800-156">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-156">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-157"><xref:System.OverflowException> создается, если результат не представлен типом результата.</span><span class="sxs-lookup"><span data-stu-id="5d800-157"><xref:System.OverflowException> is thrown if the result is not represented in the result type.</span></span>  
  
 <span data-ttu-id="5d800-158">Эту операцию можно выполнить с целыми числами со знаком.</span><span class="sxs-lookup"><span data-stu-id="5d800-158">You can perform this operation on signed integers.</span></span> <span data-ttu-id="5d800-159">Для значений с плавающей запятой используйте <xref:System.Reflection.Emit.OpCodes.Add>.</span><span class="sxs-lookup"><span data-stu-id="5d800-159">For floating-point values, use <xref:System.Reflection.Emit.OpCodes.Add>.</span></span>  
  
 <span data-ttu-id="5d800-160">Допустимые типы операндов и соответствующий тип данных результата перечислены в таблице ниже.</span><span class="sxs-lookup"><span data-stu-id="5d800-160">The acceptable operand types and their corresponding result data type are listed in the table below.</span></span> <span data-ttu-id="5d800-161">Если нет записи для определенного сочетания типа (например, `int32` и `float`; `int32` и `int64`), это недопустимая инструкция языка MSIL, которая выдает ошибку.</span><span class="sxs-lookup"><span data-stu-id="5d800-161">If there is no entry for a particular type combination (for example, `int32` and `float`; `int32` and `int64`), it is an invalid Microsoft Intermediate Language (MSIL) instruction and generates an error.</span></span>  
  
|<span data-ttu-id="5d800-162">операнд</span><span class="sxs-lookup"><span data-stu-id="5d800-162">operand</span></span>|<span data-ttu-id="5d800-163">Тип value1</span><span class="sxs-lookup"><span data-stu-id="5d800-163">value1 type</span></span>|<span data-ttu-id="5d800-164">Тип value2</span><span class="sxs-lookup"><span data-stu-id="5d800-164">value2 type</span></span>|<span data-ttu-id="5d800-165">Тип результата</span><span class="sxs-lookup"><span data-stu-id="5d800-165">result type</span></span>|  
|-------------|-----------------|-----------------|-----------------|  
|<span data-ttu-id="5d800-166">add</span><span class="sxs-lookup"><span data-stu-id="5d800-166">add</span></span>|`int32`|`int32`|`int32`|  
|<span data-ttu-id="5d800-167">add</span><span class="sxs-lookup"><span data-stu-id="5d800-167">add</span></span>|`int32`|`native int`|`native int`|  
|<span data-ttu-id="5d800-168">add</span><span class="sxs-lookup"><span data-stu-id="5d800-168">add</span></span>|`int32`|`&`|`&`|  
|<span data-ttu-id="5d800-169">add</span><span class="sxs-lookup"><span data-stu-id="5d800-169">add</span></span>|`int32`|`*`|`*`|  
|<span data-ttu-id="5d800-170">add</span><span class="sxs-lookup"><span data-stu-id="5d800-170">add</span></span>|`int64`|`int64`|`int64`|  
|<span data-ttu-id="5d800-171">add</span><span class="sxs-lookup"><span data-stu-id="5d800-171">add</span></span>|`native int`|`int32`|`native int`|  
|<span data-ttu-id="5d800-172">add</span><span class="sxs-lookup"><span data-stu-id="5d800-172">add</span></span>|`native int`|`native int`|`native int`|  
|<span data-ttu-id="5d800-173">add</span><span class="sxs-lookup"><span data-stu-id="5d800-173">add</span></span>|`native int`|`&`|`&`|  
|<span data-ttu-id="5d800-174">add</span><span class="sxs-lookup"><span data-stu-id="5d800-174">add</span></span>|`native int`|`*`|`*`|  
|<span data-ttu-id="5d800-175">add</span><span class="sxs-lookup"><span data-stu-id="5d800-175">add</span></span>|`F`|`F`|`F`|  
|<span data-ttu-id="5d800-176">add</span><span class="sxs-lookup"><span data-stu-id="5d800-176">add</span></span>|`&`|`int32`|`&`|  
|<span data-ttu-id="5d800-177">add</span><span class="sxs-lookup"><span data-stu-id="5d800-177">add</span></span>|`&`|`native int`|`&`|  
|<span data-ttu-id="5d800-178">add</span><span class="sxs-lookup"><span data-stu-id="5d800-178">add</span></span>|`*`|`int32`|`*`|  
|<span data-ttu-id="5d800-179">add</span><span class="sxs-lookup"><span data-stu-id="5d800-179">add</span></span>|`*`|`native int`|`*`|  
  
 <span data-ttu-id="5d800-180">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `add.ovf`:</span><span class="sxs-lookup"><span data-stu-id="5d800-180">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `add.ovf` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-181">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-181">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add_Ovf_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Add_Ovf_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Add_Ovf_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-182">Складывает два целочисленных значения без знака, выполняет проверку переполнения и помещает результат в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-182">Adds two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-183">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-183">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-184">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-184">Format</span></span>|<span data-ttu-id="5d800-185">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-185">Assembly Format</span></span>|<span data-ttu-id="5d800-186">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-186">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-187">D7</span><span class="sxs-lookup"><span data-stu-id="5d800-187">D7</span></span>|<span data-ttu-id="5d800-188">Добавить. ovf. un</span><span class="sxs-lookup"><span data-stu-id="5d800-188">add.ovf.un</span></span>|<span data-ttu-id="5d800-189">Добавляет два целочисленных значения без знака с помощью проверки переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-189">Adds two unsigned integer values with an overflow check.</span></span>|  
  
 <span data-ttu-id="5d800-190">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-190">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-191">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-191">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-192">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-192">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-193">`value2` и `value1` извлекаются из стека; `value1` добавляется в `value2` с помощью проверки переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-193">`value2` and `value1` are popped from the stack; `value1` is added to `value2` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="5d800-194">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-194">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-195"><xref:System.OverflowException> создается, если результат не представлен типом результата.</span><span class="sxs-lookup"><span data-stu-id="5d800-195"><xref:System.OverflowException> is thrown if the result is not represented in the result type.</span></span>  
  
 <span data-ttu-id="5d800-196">Эту операцию можно выполнить с целыми числами со знаком.</span><span class="sxs-lookup"><span data-stu-id="5d800-196">You can perform this operation on signed integers.</span></span> <span data-ttu-id="5d800-197">Для значений с плавающей запятой используйте <xref:System.Reflection.Emit.OpCodes.Add>.</span><span class="sxs-lookup"><span data-stu-id="5d800-197">For floating-point values, use <xref:System.Reflection.Emit.OpCodes.Add>.</span></span>  
  
 <span data-ttu-id="5d800-198">Допустимые типы операндов и соответствующий тип данных результата перечислены в таблице ниже.</span><span class="sxs-lookup"><span data-stu-id="5d800-198">The acceptable operand types and their corresponding result data type are listed in the table below.</span></span> <span data-ttu-id="5d800-199">Если нет записи для определенного сочетания типа (например, `int32` и `float`; `int32` и `int64`), это недопустимая инструкция языка MSIL, которая выдает ошибку.</span><span class="sxs-lookup"><span data-stu-id="5d800-199">If there is no entry for a particular type combination (for example, `int32` and `float`; `int32` and `int64`), it is an invalid Microsoft Intermediate Language (MSIL) instruction and generates an error.</span></span>  
  
|<span data-ttu-id="5d800-200">операнд</span><span class="sxs-lookup"><span data-stu-id="5d800-200">operand</span></span>|<span data-ttu-id="5d800-201">Тип value1</span><span class="sxs-lookup"><span data-stu-id="5d800-201">value1 type</span></span>|<span data-ttu-id="5d800-202">Тип value2</span><span class="sxs-lookup"><span data-stu-id="5d800-202">value2 type</span></span>|<span data-ttu-id="5d800-203">Тип результата</span><span class="sxs-lookup"><span data-stu-id="5d800-203">result type</span></span>|  
|-------------|-----------------|-----------------|-----------------|  
|<span data-ttu-id="5d800-204">add</span><span class="sxs-lookup"><span data-stu-id="5d800-204">add</span></span>|`int32`|`int32`|`int32`|  
|<span data-ttu-id="5d800-205">add</span><span class="sxs-lookup"><span data-stu-id="5d800-205">add</span></span>|`int32`|`native int`|`native int`|  
|<span data-ttu-id="5d800-206">add</span><span class="sxs-lookup"><span data-stu-id="5d800-206">add</span></span>|`int32`|`&`|`&`|  
|<span data-ttu-id="5d800-207">add</span><span class="sxs-lookup"><span data-stu-id="5d800-207">add</span></span>|`int32`|`*`|`*`|  
|<span data-ttu-id="5d800-208">add</span><span class="sxs-lookup"><span data-stu-id="5d800-208">add</span></span>|`int64`|`int64`|`int64`|  
|<span data-ttu-id="5d800-209">add</span><span class="sxs-lookup"><span data-stu-id="5d800-209">add</span></span>|`native int`|`int32`|`native int`|  
|<span data-ttu-id="5d800-210">add</span><span class="sxs-lookup"><span data-stu-id="5d800-210">add</span></span>|`native int`|`native int`|`native int`|  
|<span data-ttu-id="5d800-211">add</span><span class="sxs-lookup"><span data-stu-id="5d800-211">add</span></span>|`native int`|`&`|`&`|  
|<span data-ttu-id="5d800-212">add</span><span class="sxs-lookup"><span data-stu-id="5d800-212">add</span></span>|`native int`|`*`|`*`|  
|<span data-ttu-id="5d800-213">add</span><span class="sxs-lookup"><span data-stu-id="5d800-213">add</span></span>|`F`|`F`|`F`|  
|<span data-ttu-id="5d800-214">add</span><span class="sxs-lookup"><span data-stu-id="5d800-214">add</span></span>|`&`|`int32`|`&`|  
|<span data-ttu-id="5d800-215">add</span><span class="sxs-lookup"><span data-stu-id="5d800-215">add</span></span>|`&`|`native int`|`&`|  
|<span data-ttu-id="5d800-216">add</span><span class="sxs-lookup"><span data-stu-id="5d800-216">add</span></span>|`*`|`int32`|`*`|  
|<span data-ttu-id="5d800-217">add</span><span class="sxs-lookup"><span data-stu-id="5d800-217">add</span></span>|`*`|`native int`|`*`|  
  
 <span data-ttu-id="5d800-218">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `add.ovf.un`:</span><span class="sxs-lookup"><span data-stu-id="5d800-218">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `add.ovf.un` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-219">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-219">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode And;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode And" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.And" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly And As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode And;" />
      <MemberSignature Language="F#" Value=" staticval mutable And : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.And" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-220">Вычисляет побитовое И двух значений и помещает результат в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-220">Computes the bitwise AND of two values and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-221">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-221">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-222">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-222">Format</span></span>|<span data-ttu-id="5d800-223">Инструкция</span><span class="sxs-lookup"><span data-stu-id="5d800-223">Instruction</span></span>|<span data-ttu-id="5d800-224">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-224">Description</span></span>|  
|------------|-----------------|-----------------|  
|<span data-ttu-id="5d800-225">5F</span><span class="sxs-lookup"><span data-stu-id="5d800-225">5F</span></span>|<span data-ttu-id="5d800-226">и</span><span class="sxs-lookup"><span data-stu-id="5d800-226">and</span></span>|<span data-ttu-id="5d800-227">Определяет побитовое и для двух целочисленных значений.</span><span class="sxs-lookup"><span data-stu-id="5d800-227">Determines the bitwise AND of two integer values.</span></span>|  
  
 <span data-ttu-id="5d800-228">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-228">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-229">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-229">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-230">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-230">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-231">`value1` и `value2` извлекаются из стека; Побитовое и для двух значений является вычисленным.</span><span class="sxs-lookup"><span data-stu-id="5d800-231">`value1` and `value2` are popped from the stack; the bitwise AND of the two values is computed.</span></span>  
  
4.  <span data-ttu-id="5d800-232">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-232">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-233">Инструкция `and` рассчитывает побитовое и для двух верхних значений в стеке и оставляет результат в стеке.</span><span class="sxs-lookup"><span data-stu-id="5d800-233">The `and` instruction computes the bitwise AND of the top two values on the stack and leaves the result on the stack.</span></span>  
  
 <span data-ttu-id="5d800-234">`And` является операцией, относящейся к целому числу.</span><span class="sxs-lookup"><span data-stu-id="5d800-234">`And` is an integer-specific operation.</span></span>  
  
 <span data-ttu-id="5d800-235">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `and`:</span><span class="sxs-lookup"><span data-stu-id="5d800-235">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `and` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-236">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-236">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Arglist">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Arglist;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Arglist" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Arglist" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Arglist As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Arglist;" />
      <MemberSignature Language="F#" Value=" staticval mutable Arglist : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Arglist" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-237">Возвращает неуправляемый указатель на список аргументов текущего метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-237">Returns an unmanaged pointer to the argument list of the current method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-238">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-238">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-239">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-239">Format</span></span>|<span data-ttu-id="5d800-240">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-240">Assembly Format</span></span>|<span data-ttu-id="5d800-241">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-241">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-242">FE 00</span><span class="sxs-lookup"><span data-stu-id="5d800-242">FE 00</span></span>|<span data-ttu-id="5d800-243">arglist</span><span class="sxs-lookup"><span data-stu-id="5d800-243">arglist</span></span>|<span data-ttu-id="5d800-244">Возвращает маркер списка аргументов для текущего метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-244">Returns an argument list handle for the current method.</span></span>|  
  
 <span data-ttu-id="5d800-245">Эта операция не выполняет поведений стека вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-245">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="5d800-246">Инструкция `arglist` возвращает непрозрачный маркер (неуправляемый указатель типа `native int`), представляющий список аргументов текущего метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-246">The `arglist` instruction returns an opaque handle (an unmanaged pointer, of type `native int`) that represents the argument list of the current method.</span></span> <span data-ttu-id="5d800-247">Этот маркер действителен только в течение времени существования текущего метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-247">This handle is valid only during the lifetime of the current method.</span></span> <span data-ttu-id="5d800-248">Однако можно передать этот обработчик другим методам, если текущий метод находится в потоке управления.</span><span class="sxs-lookup"><span data-stu-id="5d800-248">You can, however, pass the handle to other methods as long as the current method is on the thread of control.</span></span> <span data-ttu-id="5d800-249">В методе, принимающем переменное число аргументов, можно выполнить только инструкцию `arglist`.</span><span class="sxs-lookup"><span data-stu-id="5d800-249">You can only execute the `arglist` instruction within a method that takes a variable number of arguments.</span></span>  
  
 <span data-ttu-id="5d800-250">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `arglist`:</span><span class="sxs-lookup"><span data-stu-id="5d800-250">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `arglist` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-251">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-251">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Beq">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Beq;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Beq" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Beq" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Beq As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Beq;" />
      <MemberSignature Language="F#" Value=" staticval mutable Beq : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Beq" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-252">Передает управление конечной инструкции, если два значения равны.</span><span class="sxs-lookup"><span data-stu-id="5d800-252">Transfers control to a target instruction if two values are equal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-253">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-253">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-254">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-254">Format</span></span>|<span data-ttu-id="5d800-255">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-255">Assembly Format</span></span>|<span data-ttu-id="5d800-256">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-256">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-257">3B < `int32` ></span><span class="sxs-lookup"><span data-stu-id="5d800-257">3B < `int32` ></span></span>|<span data-ttu-id="5d800-258">Бек `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-258">beq `target`</span></span>|<span data-ttu-id="5d800-259">Выполняет переход к целевой инструкции со смещением `target`, если два значения равны.</span><span class="sxs-lookup"><span data-stu-id="5d800-259">Branch to the target instruction at offset `target` if the two values are equal.</span></span>|  
  
 <span data-ttu-id="5d800-260">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-260">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-261">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-261">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-262">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-262">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-263">`value2` и `value1` извлекаются из стека; Если `value1` равно `value2`, выполняется операция ветвления.</span><span class="sxs-lookup"><span data-stu-id="5d800-263">`value2` and `value1` are popped from the stack; if `value1` is equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5d800-264">Инструкция `beq` передает управление в указанную целевую инструкцию, если `value1` равно `value2`.</span><span class="sxs-lookup"><span data-stu-id="5d800-264">The `beq` instruction transfers control to the specified target instruction if `value1` is equal to `value2`.</span></span> <span data-ttu-id="5d800-265">Результат аналогичен выполнению инструкции `ceq`, за которой следует ветвь `brtrue` для конкретной целевой инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-265">The effect is the same as performing a `ceq` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="5d800-266">Целевая инструкция представляется как смещение со знаком длиной 4 байта от начала инструкции, следующей за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-266">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5d800-267">Допустимые типы операндов инкапсулированы ниже:</span><span class="sxs-lookup"><span data-stu-id="5d800-267">The acceptable operand types are encapsulated below:</span></span>  
  
 <span data-ttu-id="5d800-268">Если целевая инструкция имеет один или несколько префиксных кодов, управление может быть передано только первому из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="5d800-268">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="5d800-269">Управление передачей в блоки `try`, `catch`, `filter` и `finally` не может быть выполнено этой инструкцией (такие передачи являются строго ограниченными и должны использовать инструкцию <xref:System.Reflection.Emit.OpCodes.Leave>).</span><span class="sxs-lookup"><span data-stu-id="5d800-269">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction (such transfers are severely restricted and must use the <xref:System.Reflection.Emit.OpCodes.Leave> instruction instead).</span></span>  
  
 <span data-ttu-id="5d800-270">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `beq`:</span><span class="sxs-lookup"><span data-stu-id="5d800-270">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `beq` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-271">ILGenerator. Emit (код операции, метка)</span><span class="sxs-lookup"><span data-stu-id="5d800-271">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Beq_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Beq_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Beq_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Beq_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Beq_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Beq_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Beq_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Beq_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-272">Передает управление конечной инструкции (короткая форма), если два значения равны.</span><span class="sxs-lookup"><span data-stu-id="5d800-272">Transfers control to a target instruction (short form) if two values are equal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-273">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-273">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-274">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-274">Format</span></span>|<span data-ttu-id="5d800-275">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-275">Assembly Format</span></span>|<span data-ttu-id="5d800-276">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-276">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-277">2E < `int8` ></span><span class="sxs-lookup"><span data-stu-id="5d800-277">2E < `int8` ></span></span>|<span data-ttu-id="5d800-278">Бек. s `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-278">beq.s `target`</span></span>|<span data-ttu-id="5d800-279">Переход к целевой инструкции со смещением `target`, если равно, краткая форма</span><span class="sxs-lookup"><span data-stu-id="5d800-279">Branch to the target instruction at offset `target` if equal, short form</span></span>|  
  
 <span data-ttu-id="5d800-280">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-280">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-281">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-281">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-282">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-282">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-283">`value2` и `value1` извлекаются из стека; Если `value1` равно `value2`, выполняется операция ветвления.</span><span class="sxs-lookup"><span data-stu-id="5d800-283">`value2` and `value1` are popped from the stack; if `value1` is equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5d800-284">Инструкция `beq.s` передает управление в указанную целевую инструкцию, если `value1` равно `value2`.</span><span class="sxs-lookup"><span data-stu-id="5d800-284">The `beq.s` instruction transfers control to the specified target instruction if `value1` is equal to `value2`.</span></span> <span data-ttu-id="5d800-285">Результат аналогичен выполнению инструкции `ceq`, за которой следует ветвь `brtrue` для конкретной целевой инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-285">The effect is the same as performing a `ceq` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="5d800-286">Целевая инструкция представлена как смещение со знаком длиной 1 байт от начала инструкции, следующей за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-286">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5d800-287">Допустимые типы операндов инкапсулированы ниже:</span><span class="sxs-lookup"><span data-stu-id="5d800-287">The acceptable operand types are encapsulated below:</span></span>  
  
 <span data-ttu-id="5d800-288">Если целевая инструкция имеет один или несколько префиксных кодов, управление может быть передано только первому из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="5d800-288">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="5d800-289">Управление передачей в блоки `try`, `catch`, `filter` и `finally` не может быть выполнено этой инструкцией (такие передачи являются строго ограниченными и должны использовать инструкцию <xref:System.Reflection.Emit.OpCodes.Leave>).</span><span class="sxs-lookup"><span data-stu-id="5d800-289">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction (such transfers are severely restricted and must use the <xref:System.Reflection.Emit.OpCodes.Leave> instruction instead).</span></span>  
  
 <span data-ttu-id="5d800-290">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `beq.s`:</span><span class="sxs-lookup"><span data-stu-id="5d800-290">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `beq.s` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-291">ILGenerator. Emit (код операции, метка)</span><span class="sxs-lookup"><span data-stu-id="5d800-291">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-292">Передает управление конечной инструкции, если первое значение больше второго или равно ему.</span><span class="sxs-lookup"><span data-stu-id="5d800-292">Transfers control to a target instruction if the first value is greater than or equal to the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-293">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-293">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-294">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-294">Format</span></span>|<span data-ttu-id="5d800-295">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-295">Assembly Format</span></span>|<span data-ttu-id="5d800-296">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-296">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-297">3C `<int32>`</span><span class="sxs-lookup"><span data-stu-id="5d800-297">3C `<int32>`</span></span>|<span data-ttu-id="5d800-298">бже `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-298">bge `target`</span></span>|<span data-ttu-id="5d800-299">Выполняет переход к целевой инструкции с указанным смещением, если первое значение больше второго или равно ему.</span><span class="sxs-lookup"><span data-stu-id="5d800-299">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value.</span></span>|  
  
 <span data-ttu-id="5d800-300">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-300">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-301">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-301">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-302">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-302">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-303">`value2` и `value1` извлекаются из стека; Если `value1` больше или равно `value2`, выполняется операция ветвления.</span><span class="sxs-lookup"><span data-stu-id="5d800-303">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5d800-304">Инструкция `bge` передает управление в указанную целевую инструкцию, если `value1` больше или равен `value2`.</span><span class="sxs-lookup"><span data-stu-id="5d800-304">The `bge` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`.</span></span> <span data-ttu-id="5d800-305">Этот результат идентичен выполнению инструкции `clt.un`, за которой следует ветвь `brfalse` для конкретной целевой инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-305">The effect is identical to performing a `clt.un` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="5d800-306">Целевая инструкция представляется как смещение со знаком длиной 4 байта от начала инструкции, следующей за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-306">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5d800-307">Если целевая инструкция имеет один или несколько префиксных кодов, управление может быть передано только первому из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="5d800-307">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5d800-308">Управление передачей в блоки `try`, `catch`, `filter` и `finally` не может быть выполнено этой инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-308">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5d800-309">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `bge`:</span><span class="sxs-lookup"><span data-stu-id="5d800-309">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-310">ILGenerator. Emit (код операции, метка)</span><span class="sxs-lookup"><span data-stu-id="5d800-310">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-311">Передает управление конечной инструкции (короткая форма), если первое значение больше второго или равно ему.</span><span class="sxs-lookup"><span data-stu-id="5d800-311">Transfers control to a target instruction (short form) if the first value is greater than or equal to the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-312">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-312">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-313">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-313">Format</span></span>|<span data-ttu-id="5d800-314">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-314">Assembly Format</span></span>|<span data-ttu-id="5d800-315">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-315">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-316">2F `<int8>`</span><span class="sxs-lookup"><span data-stu-id="5d800-316">2F `<int8>`</span></span>|<span data-ttu-id="5d800-317">бже. s `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-317">bge.s `target`</span></span>|<span data-ttu-id="5d800-318">Выполняет переход к целевой инструкции с указанным смещением, если первое значение больше второго или равно ему (краткая форма).</span><span class="sxs-lookup"><span data-stu-id="5d800-318">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value, short form.</span></span>|  
  
 <span data-ttu-id="5d800-319">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-319">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-320">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-320">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-321">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-321">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-322">`value2` и `value1` извлекаются из стека; Если `value1` больше или равно `value2`, выполняется операция ветвления.</span><span class="sxs-lookup"><span data-stu-id="5d800-322">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5d800-323">Инструкция `bge.s` передает управление в указанную целевую инструкцию, если `value1` больше или равен `value2`.</span><span class="sxs-lookup"><span data-stu-id="5d800-323">The `bge.s` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`.</span></span> <span data-ttu-id="5d800-324">Этот результат идентичен выполнению инструкции `clt.un`, за которой следует ветвь `brfalse` для конкретной целевой инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-324">The effect is identical to performing a `clt.un` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="5d800-325">Целевая инструкция представлена как смещение со знаком длиной 1 байт от начала инструкции, следующей за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-325">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5d800-326">Если целевая инструкция имеет один или несколько префиксных кодов, управление может быть передано только первому из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="5d800-326">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5d800-327">Управление передачей в блоки `try`, `catch`, `filter` и `finally` не может быть выполнено этой инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-327">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5d800-328">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `bge.s`:</span><span class="sxs-lookup"><span data-stu-id="5d800-328">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge.s` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-329">ILGenerator. Emit (код операции, метка)</span><span class="sxs-lookup"><span data-stu-id="5d800-329">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-330">Передает управление конечной инструкции, если первое значение больше второго (при сравнении целочисленных значений без знака или неупорядоченных значений с плавающей запятой).</span><span class="sxs-lookup"><span data-stu-id="5d800-330">Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-331">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-331">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-332">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-332">Format</span></span>|<span data-ttu-id="5d800-333">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-333">Assembly Format</span></span>|<span data-ttu-id="5d800-334">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-334">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-335">41 `<int32>`</span><span class="sxs-lookup"><span data-stu-id="5d800-335">41 `<int32>`</span></span>|<span data-ttu-id="5d800-336">бже. un `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-336">bge.un `target`</span></span>|<span data-ttu-id="5d800-337">Выполняет переход к целевой инструкции с указанным смещением, если первое значение больше или равно второму значению (значения без знака).</span><span class="sxs-lookup"><span data-stu-id="5d800-337">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="5d800-338">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-338">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-339">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-339">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-340">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-340">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-341">`value2` и `value1` извлекаются из стека; Если `value1` больше или равно `value2`, выполняется операция ветвления.</span><span class="sxs-lookup"><span data-stu-id="5d800-341">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5d800-342">Инструкция `bge.un` передает управление в указанную целевую инструкцию, если `value1` больше или равен `value2` при сравнении с использованием целого числа без знака или неупорядоченных значений с плавающей запятой.</span><span class="sxs-lookup"><span data-stu-id="5d800-342">The `bge.un` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="5d800-343">Этот результат идентичен выполнению инструкции `clt`, за которой следует ветвь `brfalse` для конкретной целевой инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-343">The effect is identical to performing a `clt` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="5d800-344">Целевая инструкция представляется как смещение со знаком длиной 4 байта от начала инструкции, следующей за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-344">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5d800-345">Если целевая инструкция имеет один или несколько префиксных кодов, управление может быть передано только первому из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="5d800-345">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5d800-346">Управление передачей в блоки `try`, `catch`, `filter` и `finally` не может быть выполнено этой инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-346">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5d800-347">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `bge.un`:</span><span class="sxs-lookup"><span data-stu-id="5d800-347">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge.un` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-348">ILGenerator. Emit (код операции, метка)</span><span class="sxs-lookup"><span data-stu-id="5d800-348">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-349">Передает управление конечной инструкции (короткая форма), если первое значение больше второго (при сравнении целочисленных значений без знака или неупорядоченных значений с плавающей запятой).</span><span class="sxs-lookup"><span data-stu-id="5d800-349">Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-350">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-350">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-351">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-351">Format</span></span>|<span data-ttu-id="5d800-352">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-352">Assembly Format</span></span>|<span data-ttu-id="5d800-353">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-353">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-354">34 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="5d800-354">34 < `int8` ></span></span>|<span data-ttu-id="5d800-355">бже. un. s `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-355">bge.un.s `target`</span></span>|<span data-ttu-id="5d800-356">Выполняет переход к целевой инструкции с указанным смещением, если первое значение больше или равно второму (значения без знака), короткая форма.</span><span class="sxs-lookup"><span data-stu-id="5d800-356">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="5d800-357">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-357">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-358">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-358">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-359">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-359">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-360">`value2` и `value1` извлекаются из стека; Если `value1` больше или равно `value2`, выполняется операция ветвления.</span><span class="sxs-lookup"><span data-stu-id="5d800-360">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5d800-361">Инструкция `bge.un.s` передает управление в указанную целевую инструкцию, если `value1` больше или равен `value2` при сравнении с использованием целого числа без знака или неупорядоченных значений с плавающей запятой.</span><span class="sxs-lookup"><span data-stu-id="5d800-361">The `bge.un.s` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="5d800-362">Этот результат идентичен выполнению инструкции `clt`, за которой следует ветвь `brfalse` для конкретной целевой инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-362">The effect is identical to performing a `clt` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="5d800-363">Целевая инструкция представлена как смещение со знаком длиной 1 байт от начала инструкции, следующей за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-363">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5d800-364">Если целевая инструкция имеет один или несколько префиксных кодов, управление может быть передано только первому из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="5d800-364">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5d800-365">Управление передачей в блоки `try`, `catch`, `filter` и `finally` не может быть выполнено этой инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-365">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5d800-366">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `bge.un.s`:</span><span class="sxs-lookup"><span data-stu-id="5d800-366">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-367">ILGenerator. Emit (код операции, метка)</span><span class="sxs-lookup"><span data-stu-id="5d800-367">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-368">Передает управление конечной инструкции, если первое значение больше второго.</span><span class="sxs-lookup"><span data-stu-id="5d800-368">Transfers control to a target instruction if the first value is greater than the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-369">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-369">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-370">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-370">Format</span></span>|<span data-ttu-id="5d800-371">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-371">Assembly Format</span></span>|<span data-ttu-id="5d800-372">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-372">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-373">3D < `int32` ></span><span class="sxs-lookup"><span data-stu-id="5d800-373">3D < `int32` ></span></span>|<span data-ttu-id="5d800-374">БГТ `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-374">bgt `target`</span></span>|<span data-ttu-id="5d800-375">Выполняет переход к целевой инструкции с указанным смещением, если первое значение больше второго.</span><span class="sxs-lookup"><span data-stu-id="5d800-375">Branch to the target instruction at the specified offset if the first value is greater than the second value.</span></span>|  
  
 <span data-ttu-id="5d800-376">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-376">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-377">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-377">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-378">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-378">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-379">`value2` и `value1` извлекаются из стека; Если `value1` больше, чем `value2`, выполняется операция ветвления.</span><span class="sxs-lookup"><span data-stu-id="5d800-379">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5d800-380">Инструкция `bgt` передает управление указанной конечной инструкции, если `value1` больше, чем `value2`.</span><span class="sxs-lookup"><span data-stu-id="5d800-380">The `bgt` instruction transfers control to the specified target instruction if `value1` is greater than `value2`.</span></span> <span data-ttu-id="5d800-381">Этот результат идентичен выполнению инструкции `cgt`, за которой следует ветвь `brtrue` для конкретной целевой инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-381">The effect is identical to performing a `cgt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="5d800-382">Целевая инструкция представляется как смещение со знаком длиной 4 байта от начала инструкции, следующей за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-382">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5d800-383">Если целевая инструкция имеет один или несколько префиксных кодов, управление может быть передано только первому из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="5d800-383">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5d800-384">Управление передачей в блоки `try`, `catch`, `filter` и `finally` не может быть выполнено этой инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-384">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5d800-385">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `bgt`:</span><span class="sxs-lookup"><span data-stu-id="5d800-385">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-386">ILGenerator. Emit (код операции, метка)</span><span class="sxs-lookup"><span data-stu-id="5d800-386">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-387">Передает управление конечной инструкции (короткая форма), если первое значение больше второго.</span><span class="sxs-lookup"><span data-stu-id="5d800-387">Transfers control to a target instruction (short form) if the first value is greater than the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-388">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-388">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-389">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-389">Format</span></span>|<span data-ttu-id="5d800-390">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-390">Assembly Format</span></span>|<span data-ttu-id="5d800-391">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-391">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-392">30 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="5d800-392">30 < `int8` ></span></span>|<span data-ttu-id="5d800-393">БГТ. s `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-393">bgt.s `target`</span></span>|<span data-ttu-id="5d800-394">Выполняет переход к целевой инструкции с указанным смещением, если первое значение больше второго (краткая форма).</span><span class="sxs-lookup"><span data-stu-id="5d800-394">Branch to the target instruction at the specified offset if the first value is greater than the second value, short form.</span></span>|  
  
 <span data-ttu-id="5d800-395">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-395">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-396">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-396">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-397">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-397">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-398">`value2` и `value1` извлекаются из стека; Если `value1` больше, чем `value2`, выполняется операция ветвления.</span><span class="sxs-lookup"><span data-stu-id="5d800-398">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5d800-399">Инструкция `bgt.s` передает управление указанной конечной инструкции, если `value1` больше, чем `value2`.</span><span class="sxs-lookup"><span data-stu-id="5d800-399">The `bgt.s` instruction transfers control to the specified target instruction if `value1` is greater than `value2`.</span></span> <span data-ttu-id="5d800-400">Этот результат идентичен выполнению инструкции `cgt`, за которой следует ветвь `brtrue` для конкретной целевой инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-400">The effect is identical to performing a `cgt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="5d800-401">Целевая инструкция представлена как смещение со знаком длиной 1 байт от начала инструкции, следующей за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-401">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5d800-402">Если целевая инструкция имеет один или несколько префиксных кодов, управление может быть передано только первому из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="5d800-402">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5d800-403">Управление передачей в блоки `try`, `catch`, `filter` и `finally` не может быть выполнено этой инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-403">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5d800-404">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `bgt.s`:</span><span class="sxs-lookup"><span data-stu-id="5d800-404">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt.s` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-405">ILGenerator. Emit (код операции, метка)</span><span class="sxs-lookup"><span data-stu-id="5d800-405">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-406">Передает управление конечной инструкции, если первое значение больше второго (при сравнении целочисленных значений без знака или неупорядоченных значений с плавающей запятой).</span><span class="sxs-lookup"><span data-stu-id="5d800-406">Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-407">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-407">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-408">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-408">Format</span></span>|<span data-ttu-id="5d800-409">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-409">Assembly Format</span></span>|<span data-ttu-id="5d800-410">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-410">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-411">42 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="5d800-411">42 < `int32` ></span></span>|<span data-ttu-id="5d800-412">БГТ. un `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-412">bgt.un `target`</span></span>|<span data-ttu-id="5d800-413">Выполняет переход к целевой инструкции с указанным смещением, если первое значение больше второго (значения без знака).</span><span class="sxs-lookup"><span data-stu-id="5d800-413">Branch to the target instruction at the specified offset if the first value is greater than the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="5d800-414">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-414">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-415">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-415">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-416">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-416">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-417">`value2` и `value1` извлекаются из стека; Если `value1` больше, чем `value2`, выполняется операция ветвления.</span><span class="sxs-lookup"><span data-stu-id="5d800-417">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5d800-418">Инструкция `bgt.un` передает управление указанной конечной инструкции, если `value1` больше, чем `value2`, при сравнении с использованием целого числа без знака или неупорядоченных значений с плавающей запятой.</span><span class="sxs-lookup"><span data-stu-id="5d800-418">The `bgt.un` instruction transfers control to the specified target instruction if `value1` is greater than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="5d800-419">Этот результат идентичен выполнению инструкции `cgt.un`, за которой следует ветвь `brtrue` для конкретной целевой инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-419">The effect is identical to performing a `cgt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="5d800-420">Целевая инструкция представляется как смещение со знаком длиной 4 байта от начала инструкции, следующей за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-420">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5d800-421">Если целевая инструкция имеет один или несколько префиксных кодов, управление может быть передано только первому из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="5d800-421">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5d800-422">Управление передачей в блоки `try`, `catch`, `filter` и `finally` не может быть выполнено этой инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-422">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5d800-423">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `bgt.un`:</span><span class="sxs-lookup"><span data-stu-id="5d800-423">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt.un` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-424">ILGenerator. Emit (код операции, метка)</span><span class="sxs-lookup"><span data-stu-id="5d800-424">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-425">Передает управление конечной инструкции (короткая форма), если первое значение больше второго (при сравнении целочисленных значений без знака или неупорядоченных значений с плавающей запятой).</span><span class="sxs-lookup"><span data-stu-id="5d800-425">Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-426">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-426">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-427">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-427">Format</span></span>|<span data-ttu-id="5d800-428">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-428">Assembly Format</span></span>|<span data-ttu-id="5d800-429">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-429">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-430">35 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="5d800-430">35 < `int8` ></span></span>|<span data-ttu-id="5d800-431">БГТ. un. s `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-431">bgt.un.s `target`</span></span>|<span data-ttu-id="5d800-432">Выполняет переход к целевой инструкции с указанным смещением, если первое значение больше второго (значения без знака), короткая форма.</span><span class="sxs-lookup"><span data-stu-id="5d800-432">Branch to the target instruction at the specified offset if the first value is greater than the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="5d800-433">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-433">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-434">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-434">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-435">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-435">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-436">`value2` и `value1` извлекаются из стека; Если `value1` больше, чем `value2`, выполняется операция ветвления.</span><span class="sxs-lookup"><span data-stu-id="5d800-436">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5d800-437">Инструкция `bgt.un.s` передает управление указанной конечной инструкции, если `value1` больше, чем `value2`, при сравнении с использованием целого числа без знака или неупорядоченных значений с плавающей запятой.</span><span class="sxs-lookup"><span data-stu-id="5d800-437">The `bgt.un.s` instruction transfers control to the specified target instruction if `value1` is greater than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="5d800-438">Этот результат идентичен выполнению инструкции `cgt.un`, за которой следует ветвь `brtrue` для конкретной целевой инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-438">The effect is identical to performing a `cgt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="5d800-439">Целевая инструкция представлена как смещение со знаком длиной 1 байт от начала инструкции, следующей за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-439">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5d800-440">Если целевая инструкция имеет один или несколько префиксных кодов, управление может быть передано только первому из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="5d800-440">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5d800-441">Управление передачей в блоки `try`, `catch`, `filter` и `finally` не может быть выполнено этой инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-441">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5d800-442">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `bgt.un.s`:</span><span class="sxs-lookup"><span data-stu-id="5d800-442">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-443">ILGenerator. Emit (код операции, метка)</span><span class="sxs-lookup"><span data-stu-id="5d800-443">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-444">Передает управление конечной инструкции, если первое значение меньше второго значения или равно ему.</span><span class="sxs-lookup"><span data-stu-id="5d800-444">Transfers control to a target instruction if the first value is less than or equal to the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-445">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-445">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-446">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-446">Format</span></span>|<span data-ttu-id="5d800-447">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-447">Assembly Format</span></span>|<span data-ttu-id="5d800-448">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-448">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-449">3E `<int32>`</span><span class="sxs-lookup"><span data-stu-id="5d800-449">3E `<int32>`</span></span>|<span data-ttu-id="5d800-450">BLE `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-450">ble `target`</span></span>|<span data-ttu-id="5d800-451">Выполняет переход к целевой инструкции с указанным смещением, если первое значение меньше второго или равно ему.</span><span class="sxs-lookup"><span data-stu-id="5d800-451">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value.</span></span>|  
  
 <span data-ttu-id="5d800-452">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-452">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-453">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-453">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-454">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-454">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-455">`value2` и `value1` извлекаются из стека; Если `value1` меньше или равно `value2`, выполняется операция ветвления.</span><span class="sxs-lookup"><span data-stu-id="5d800-455">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5d800-456">Инструкция `ble` передает управление указанной конечной инструкции, если `value1` меньше или равно `value2`.</span><span class="sxs-lookup"><span data-stu-id="5d800-456">The `ble` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`.</span></span> <span data-ttu-id="5d800-457">Этот результат идентичен выполнению инструкции `cgt` (`cgt.un` для float), за которой следует ветвь `brfalse` для конкретной целевой инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-457">The effect is identical to performing a `cgt` instruction (`cgt.un` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="5d800-458">Целевая инструкция представляется как смещение со знаком длиной 4 байта от начала инструкции, следующей за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-458">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5d800-459">Если целевая инструкция имеет один или несколько префиксных кодов, управление может быть передано только первому из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="5d800-459">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5d800-460">Управление передачей в блоки `try`, `catch`, `filter` и `finally` не может быть выполнено этой инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-460">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5d800-461">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ble`:</span><span class="sxs-lookup"><span data-stu-id="5d800-461">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-462">ILGenerator. Emit (код операции, метка)</span><span class="sxs-lookup"><span data-stu-id="5d800-462">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-463">Передает управление конечной инструкции (короткая форма), если первое значение меньше второго или равно ему.</span><span class="sxs-lookup"><span data-stu-id="5d800-463">Transfers control to a target instruction (short form) if the first value is less than or equal to the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-464">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-464">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-465">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-465">Format</span></span>|<span data-ttu-id="5d800-466">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-466">Assembly Format</span></span>|<span data-ttu-id="5d800-467">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-467">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-468">31 `<int8>`</span><span class="sxs-lookup"><span data-stu-id="5d800-468">31 `<int8>`</span></span>|<span data-ttu-id="5d800-469">BLE. s `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-469">ble.s `target`</span></span>|<span data-ttu-id="5d800-470">Выполняет переход к целевой инструкции с указанным смещением, если первое значение меньше второго или равно ему (короткая форма).</span><span class="sxs-lookup"><span data-stu-id="5d800-470">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value, short form.</span></span>|  
  
 <span data-ttu-id="5d800-471">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-471">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-472">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-472">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-473">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-473">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-474">`value2` и `value1` извлекаются из стека; Если `value1` меньше или равно `value2`, выполняется операция ветвления.</span><span class="sxs-lookup"><span data-stu-id="5d800-474">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5d800-475">Инструкция `ble.s` передает управление указанной конечной инструкции, если `value1` меньше или равно `value2`.</span><span class="sxs-lookup"><span data-stu-id="5d800-475">The `ble.s` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`.</span></span> <span data-ttu-id="5d800-476">Этот результат идентичен выполнению инструкции `cgt` (`cgt.un` для float), за которой следует ветвь @ no__t-2 для конкретной целевой инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-476">The effect is identical to performing a `cgt` instruction (`cgt.un` for floats) instruction followed by a`brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="5d800-477">Целевая инструкция представлена как смещение со знаком длиной 1 байт от начала инструкции, следующей за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-477">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5d800-478">Если целевая инструкция имеет один или несколько префиксных кодов, управление может быть передано только первому из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="5d800-478">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5d800-479">Управление передачей в блоки `try`, `catch`, `filter` и `finally` не может быть выполнено этой инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-479">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5d800-480">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ble.s`:</span><span class="sxs-lookup"><span data-stu-id="5d800-480">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble.s` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-481">ILGenerator. Emit (код операции, метка)</span><span class="sxs-lookup"><span data-stu-id="5d800-481">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-482">Передает управление конечной инструкции, если первое значение меньше второго или равно ему (при сравнении целочисленных значений без знака или неупорядоченных значений с плавающей запятой).</span><span class="sxs-lookup"><span data-stu-id="5d800-482">Transfers control to a target instruction if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-483">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-483">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-484">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-484">Format</span></span>|<span data-ttu-id="5d800-485">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-485">Assembly Format</span></span>|<span data-ttu-id="5d800-486">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-486">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-487">43 `<int32>`</span><span class="sxs-lookup"><span data-stu-id="5d800-487">43 `<int32>`</span></span>|<span data-ttu-id="5d800-488">BLE. un `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-488">ble.un `target`</span></span>|<span data-ttu-id="5d800-489">Выполняет переход к целевой инструкции с указанным смещением, если первое значение меньше или равно второму значению (значения без знака).</span><span class="sxs-lookup"><span data-stu-id="5d800-489">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="5d800-490">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-490">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-491">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-491">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-492">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-492">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-493">`value2` и `value1` извлекаются из стека; Если `value1` меньше или равно `value2`, выполняется операция ветвления.</span><span class="sxs-lookup"><span data-stu-id="5d800-493">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5d800-494">Инструкция `ble.un` передает управление в указанную целевую инструкцию, если `value1` меньше или равен `value2` при сравнении с использованием целого числа без знака или неупорядоченных значений с плавающей запятой.</span><span class="sxs-lookup"><span data-stu-id="5d800-494">The `ble.un` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="5d800-495">Этот результат идентичен выполнению инструкции `cgt.un` (`cgt` для float), за которой следует ветвь `brfalse` для конкретной целевой инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-495">The effect is identical to performing a `cgt.un` instruction (`cgt` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="5d800-496">Целевая инструкция представляется как смещение со знаком длиной 4 байта от начала инструкции, следующей за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-496">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5d800-497">Если целевая инструкция имеет один или несколько префиксных кодов, управление может быть передано только первому из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="5d800-497">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5d800-498">Управление передачей в блоки `try`, `catch`, `filter` и `finally` не может быть выполнено этой инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-498">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5d800-499">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ble.un`:</span><span class="sxs-lookup"><span data-stu-id="5d800-499">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble.un` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-500">ILGenerator. Emit (код операции, метка)</span><span class="sxs-lookup"><span data-stu-id="5d800-500">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-501">Передает управление конечной инструкции (короткая форма), если первое значение меньше второго или равно ему (при сравнении целочисленных значений без знака или неупорядоченных значений с плавающей запятой).</span><span class="sxs-lookup"><span data-stu-id="5d800-501">Transfers control to a target instruction (short form) if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-502">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-502">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-503">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-503">Format</span></span>|<span data-ttu-id="5d800-504">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-504">Assembly Format</span></span>|<span data-ttu-id="5d800-505">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-505">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-506">36 `<int8>`</span><span class="sxs-lookup"><span data-stu-id="5d800-506">36 `<int8>`</span></span>|<span data-ttu-id="5d800-507">BLE. un. s `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-507">ble.un.s `target`</span></span>|<span data-ttu-id="5d800-508">Выполняет переход к целевой инструкции с указанным смещением, если первое значение меньше или равно второму (значения без знака), короткая форма.</span><span class="sxs-lookup"><span data-stu-id="5d800-508">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="5d800-509">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-509">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-510">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-510">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-511">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-511">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-512">`value2` и `value1` извлекаются из стека; Если `value1` меньше или равно `value2`, выполняется операция ветвления.</span><span class="sxs-lookup"><span data-stu-id="5d800-512">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5d800-513">Инструкция `ble.un.s` передает управление в указанную целевую инструкцию, если `value1` меньше или равен `value2` при сравнении с использованием целого числа без знака или неупорядоченных значений с плавающей запятой.</span><span class="sxs-lookup"><span data-stu-id="5d800-513">The `ble.un.s` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="5d800-514">Этот результат идентичен выполнению инструкции `cgt.un` (`cgt` для float), за которой следует ветвь `brfalse` для конкретной целевой инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-514">The effect is identical to performing a `cgt.un` instruction (`cgt` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="5d800-515">Целевая инструкция представлена как смещение со знаком длиной 1 байт от начала инструкции, следующей за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-515">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5d800-516">Если целевая инструкция имеет один или несколько префиксных кодов, управление может быть передано только первому из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="5d800-516">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5d800-517">Управление передачей в блоки `try`, `catch`, `filter` и `finally` не может быть выполнено этой инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-517">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5d800-518">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ble.un.s`:</span><span class="sxs-lookup"><span data-stu-id="5d800-518">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-519">ILGenerator. Emit (код операции, метка)</span><span class="sxs-lookup"><span data-stu-id="5d800-519">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-520">Передает управление конечной инструкции, если первое значение меньше второго.</span><span class="sxs-lookup"><span data-stu-id="5d800-520">Transfers control to a target instruction if the first value is less than the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-521">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-521">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-522">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-522">Format</span></span>|<span data-ttu-id="5d800-523">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-523">Assembly Format</span></span>|<span data-ttu-id="5d800-524">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-524">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-525">3F < `int32` ></span><span class="sxs-lookup"><span data-stu-id="5d800-525">3F < `int32` ></span></span>|<span data-ttu-id="5d800-526">БЛТ `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-526">blt `target`</span></span>|<span data-ttu-id="5d800-527">Выполняет переход к целевой инструкции с указанным смещением, если первое значение меньше второго.</span><span class="sxs-lookup"><span data-stu-id="5d800-527">Branch to the target instruction at the specified offset if the first value is less than the second value.</span></span>|  
  
 <span data-ttu-id="5d800-528">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-528">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-529">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-529">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-530">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-530">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-531">`value2` и `value1` извлекаются из стека; Если `value1` меньше `value2`, выполняется операция ветвления.</span><span class="sxs-lookup"><span data-stu-id="5d800-531">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5d800-532">Инструкция `blt` передает управление указанной конечной инструкции, если `value1` меньше или равно `value2`.</span><span class="sxs-lookup"><span data-stu-id="5d800-532">The `blt` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`.</span></span> <span data-ttu-id="5d800-533">Этот результат идентичен выполнению инструкции `clt`, за которой следует ветвь `brtrue` для конкретной целевой инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-533">The effect is identical to performing a `clt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="5d800-534">Целевая инструкция представляется как смещение со знаком длиной 4 байта от начала инструкции, следующей за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-534">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5d800-535">Если целевая инструкция имеет один или несколько префиксных кодов, управление может быть передано только первому из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="5d800-535">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5d800-536">Управление передачей в блоки `try`, `catch`, `filter` и `finally` не может быть выполнено этой инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-536">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5d800-537">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `blt`:</span><span class="sxs-lookup"><span data-stu-id="5d800-537">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-538">ILGenerator. Emit (код операции, метка)</span><span class="sxs-lookup"><span data-stu-id="5d800-538">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-539">Передает управление конечной инструкции (короткая форма), если первое значение меньше второго значения.</span><span class="sxs-lookup"><span data-stu-id="5d800-539">Transfers control to a target instruction (short form) if the first value is less than the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-540">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-540">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-541">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-541">Format</span></span>|<span data-ttu-id="5d800-542">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-542">Assembly Format</span></span>|<span data-ttu-id="5d800-543">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-543">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-544">32 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="5d800-544">32 < `int8` ></span></span>|<span data-ttu-id="5d800-545">БЛТ. s `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-545">blt.s `target`</span></span>|<span data-ttu-id="5d800-546">Выполняет переход к целевой инструкции с указанным смещением, если первое значение меньше второго (краткая форма).</span><span class="sxs-lookup"><span data-stu-id="5d800-546">Branch to the target instruction at the specified offset if the first value is less than the second value, short form.</span></span>|  
  
 <span data-ttu-id="5d800-547">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-547">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-548">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-548">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-549">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-549">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-550">`value2` и `value1` извлекаются из стека; Если `value1` меньше `value2`, выполняется операция ветвления.</span><span class="sxs-lookup"><span data-stu-id="5d800-550">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5d800-551">Инструкция `blt.s` передает управление указанной конечной инструкции, если `value1` меньше, чем `value2`.</span><span class="sxs-lookup"><span data-stu-id="5d800-551">The `blt.s` instruction transfers control to the specified target instruction if `value1` is less than `value2`.</span></span> <span data-ttu-id="5d800-552">Этот результат идентичен выполнению инструкции `clt`, за которой следует ветвь `brtrue` для конкретной целевой инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-552">The effect is identical to performing a `clt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="5d800-553">Целевая инструкция представлена как смещение со знаком длиной 1 байт от начала инструкции, следующей за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-553">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5d800-554">Если целевая инструкция имеет один или несколько префиксных кодов, управление может быть передано только первому из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="5d800-554">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5d800-555">Управление передачей в блоки `try`, `catch`, `filter` и `finally` не может быть выполнено этой инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-555">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5d800-556">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `blt.s`:</span><span class="sxs-lookup"><span data-stu-id="5d800-556">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt.s` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-557">ILGenerator. Emit (код операции, метка)</span><span class="sxs-lookup"><span data-stu-id="5d800-557">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-558">Передает управление конечной инструкции, если первое значение меньше второго (при сравнении целочисленных значений без знака или неупорядоченных значений с плавающей запятой).</span><span class="sxs-lookup"><span data-stu-id="5d800-558">Transfers control to a target instruction if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-559">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-559">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-560">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-560">Format</span></span>|<span data-ttu-id="5d800-561">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-561">Assembly Format</span></span>|<span data-ttu-id="5d800-562">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-562">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-563">44 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="5d800-563">44 < `int32` ></span></span>|<span data-ttu-id="5d800-564">БЛТ. un `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-564">blt.un `target`</span></span>|<span data-ttu-id="5d800-565">Выполняет переход к целевой инструкции с указанным смещением, если первое значение меньше второго (значения без знака).</span><span class="sxs-lookup"><span data-stu-id="5d800-565">Branch to the target instruction at the specified offset if the first value is less than the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="5d800-566">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-566">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-567">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-567">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-568">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-568">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-569">`value2` и `value1` извлекаются из стека; Если `value1` меньше `value2`, выполняется операция ветвления.</span><span class="sxs-lookup"><span data-stu-id="5d800-569">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5d800-570">Инструкция `blt.un` передает управление указанной конечной инструкции, если `value1` меньше, чем `value2`, при сравнении с использованием целого числа без знака или неупорядоченных значений с плавающей запятой.</span><span class="sxs-lookup"><span data-stu-id="5d800-570">The `blt.un` instruction transfers control to the specified target instruction if `value1` is less than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="5d800-571">Этот результат идентичен выполнению инструкции `clt.un`, за которой следует ветвь `brtrue` для конкретной целевой инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-571">The effect is identical to performing a `clt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="5d800-572">Целевая инструкция представляется как смещение со знаком длиной 4 байта от начала инструкции, следующей за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-572">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5d800-573">Если целевая инструкция имеет один или несколько префиксных кодов, управление может быть передано только первому из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="5d800-573">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5d800-574">Управление передачей в блоки `try`, `catch`, `filter` и `finally` не может быть выполнено этой инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-574">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5d800-575">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `blt.un`:</span><span class="sxs-lookup"><span data-stu-id="5d800-575">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt.un` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-576">ILGenerator. Emit (код операции, метка)</span><span class="sxs-lookup"><span data-stu-id="5d800-576">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-577">Передает управление конечной инструкции (короткая форма), если первое значение меньше второго (при сравнении целочисленных значений без знака или неупорядоченных значений с плавающей запятой).</span><span class="sxs-lookup"><span data-stu-id="5d800-577">Transfers control to a target instruction (short form) if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-578">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-578">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-579">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-579">Format</span></span>|<span data-ttu-id="5d800-580">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-580">Assembly Format</span></span>|<span data-ttu-id="5d800-581">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-581">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-582">37 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="5d800-582">37 < `int8` ></span></span>|<span data-ttu-id="5d800-583">БЛТ. un. s `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-583">blt.un.s `target`</span></span>|<span data-ttu-id="5d800-584">Выполняет переход к целевой инструкции с указанным смещением, если первое значение меньше второго (значения без знака), короткая форма.</span><span class="sxs-lookup"><span data-stu-id="5d800-584">Branch to the target instruction at the specified offset if the first value is less than the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="5d800-585">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-585">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-586">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-586">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-587">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-587">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-588">`value2` и `value1` извлекаются из стека; Если `value1` меньше `value2`, выполняется операция ветвления.</span><span class="sxs-lookup"><span data-stu-id="5d800-588">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5d800-589">Инструкция `blt.un` передает управление указанной конечной инструкции, если `value1` меньше, чем `value2`, при сравнении с использованием целого числа без знака или неупорядоченных значений с плавающей запятой.</span><span class="sxs-lookup"><span data-stu-id="5d800-589">The `blt.un` instruction transfers control to the specified target instruction if `value1` is less than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="5d800-590">Этот результат идентичен выполнению инструкции `clt.un`, за которой следует ветвь `brtrue` для конкретной целевой инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-590">The effect is identical to performing a `clt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="5d800-591">Целевая инструкция представляется как смещение со знаком длиной 4 байта от начала инструкции, следующей за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-591">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5d800-592">Если целевая инструкция имеет один или несколько префиксных кодов, управление может быть передано только первому из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="5d800-592">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5d800-593">Управление передачей в блоки `try`, `catch`, `filter` и `finally` не может быть выполнено этой инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-593">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5d800-594">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `blt.un.s`:</span><span class="sxs-lookup"><span data-stu-id="5d800-594">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-595">ILGenerator. Emit (код операции, метка)</span><span class="sxs-lookup"><span data-stu-id="5d800-595">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bne_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bne_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bne_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bne_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bne_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bne_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bne_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bne_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-596">Передает управление конечной инструкции в случае неравенства двух целочисленных значений без знака или двух неупорядоченных значений с плавающей запятой.</span><span class="sxs-lookup"><span data-stu-id="5d800-596">Transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-597">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-597">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-598">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-598">Format</span></span>|<span data-ttu-id="5d800-599">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-599">Assembly Format</span></span>|<span data-ttu-id="5d800-600">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-600">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-601">40 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="5d800-601">40 < `int32` ></span></span>|<span data-ttu-id="5d800-602">бне. un `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-602">bne.un `target`</span></span>|<span data-ttu-id="5d800-603">Выполняет переход к целевой инструкции с указанным смещением, если два целочисленных значения без знака не равны (значения без знака).</span><span class="sxs-lookup"><span data-stu-id="5d800-603">Branch to the target instruction at the specified offset if two unsigned integer values are not equal (unsigned values).</span></span>|  
  
 <span data-ttu-id="5d800-604">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-604">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-605">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-605">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-606">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-606">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-607">`value2` и `value1` извлекаются из стека; Если `value1` не равно `value2`, выполняется операция ветвления.</span><span class="sxs-lookup"><span data-stu-id="5d800-607">`value2` and `value1` are popped from the stack; if `value1` is not equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5d800-608">Инструкция `bne.un` передает управление указанной конечной инструкции, если `value1` не равно `value2`, при сравнении с использованием целого числа без знака или неупорядоченных значений с плавающей запятой.</span><span class="sxs-lookup"><span data-stu-id="5d800-608">The `bne.un` instruction transfers control to the specified target instruction if `value1` is not equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="5d800-609">Этот результат идентичен выполнению инструкции `ceq`, за которой следует ветвь `brfalse` для конкретной целевой инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-609">The effect is identical to performing a `ceq` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="5d800-610">Целевая инструкция представляется как смещение со знаком длиной 4 байта от начала инструкции, следующей за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-610">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5d800-611">Если целевая инструкция имеет один или несколько префиксных кодов, управление может быть передано только первому из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="5d800-611">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5d800-612">Управление передачей в блоки `try`, `catch`, `filter` и `finally` не может быть выполнено этой инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-612">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5d800-613">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `bne.un`:</span><span class="sxs-lookup"><span data-stu-id="5d800-613">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bne.un` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-614">ILGenerator. Emit (код операции, метка)</span><span class="sxs-lookup"><span data-stu-id="5d800-614">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bne_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bne_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bne_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bne_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bne_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bne_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bne_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bne_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-615">Передает управление конечной инструкции (короткая форма) в случае неравенства двух целочисленных значений без знака или двух неупорядоченных значений с плавающей запятой.</span><span class="sxs-lookup"><span data-stu-id="5d800-615">Transfers control to a target instruction (short form) when two unsigned integer values or unordered float values are not equal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-616">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-616">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-617">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-617">Format</span></span>|<span data-ttu-id="5d800-618">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-618">Assembly Format</span></span>|<span data-ttu-id="5d800-619">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-619">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-620">33 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="5d800-620">33 < `int8` ></span></span>|<span data-ttu-id="5d800-621">бне. un. s `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-621">bne.un.s `target`</span></span>|<span data-ttu-id="5d800-622">Выполняет переход к целевой инструкции с указанным смещением, если два целочисленных значения без знака не равны (значения без знака), краткая форма.</span><span class="sxs-lookup"><span data-stu-id="5d800-622">Branch to the target instruction at the specified offset if two unsigned integer values are not equal (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="5d800-623">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-623">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-624">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-624">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-625">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-625">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-626">`value2` и `value1` извлекаются из стека; Если `value1` не равно `value2`, выполняется операция ветвления.</span><span class="sxs-lookup"><span data-stu-id="5d800-626">`value2` and `value1` are popped from the stack; if `value1` is not equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="5d800-627">Инструкция `bne.un` передает управление указанной конечной инструкции, если `value1` не равно `value2`, при сравнении с использованием целого числа без знака или неупорядоченных значений с плавающей запятой.</span><span class="sxs-lookup"><span data-stu-id="5d800-627">The `bne.un` instruction transfers control to the specified target instruction if `value1` is not equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="5d800-628">Этот результат идентичен выполнению инструкции `ceq`, за которой следует ветвь `brfalse` для конкретной целевой инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-628">The effect is identical to performing a `ceq` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="5d800-629">Целевая инструкция представляется как смещение со знаком длиной 4 байта от начала инструкции, следующей за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-629">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5d800-630">Если целевая инструкция имеет один или несколько префиксных кодов, управление может быть передано только первому из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="5d800-630">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5d800-631">Управление передачей в блоки `try`, `catch`, `filter` и `finally` не может быть выполнено этой инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-631">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5d800-632">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `bne.un.s`:</span><span class="sxs-lookup"><span data-stu-id="5d800-632">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bne.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-633">ILGenerator. Emit (код операции, метка)</span><span class="sxs-lookup"><span data-stu-id="5d800-633">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Box">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Box;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Box" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Box" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Box As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Box;" />
      <MemberSignature Language="F#" Value=" staticval mutable Box : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Box" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-634">Преобразует тип значения в ссылку на объект (тип <see langword="O" />).</span><span class="sxs-lookup"><span data-stu-id="5d800-634">Converts a value type to an object reference (type <see langword="O" />).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-635">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-635">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-636">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-636">Format</span></span>|<span data-ttu-id="5d800-637">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-637">Assembly Format</span></span>|<span data-ttu-id="5d800-638">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-638">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-639">8C < `T` ></span><span class="sxs-lookup"><span data-stu-id="5d800-639">8C < `T` ></span></span>|<span data-ttu-id="5d800-640">Box `valTypeToken`</span><span class="sxs-lookup"><span data-stu-id="5d800-640">box `valTypeToken`</span></span>|<span data-ttu-id="5d800-641">Преобразование типа значения (типа, указанного в `valTypeToken`) в истинную ссылку на объект.</span><span class="sxs-lookup"><span data-stu-id="5d800-641">Convert a value type (of the type specified in `valTypeToken`) to a true object reference.</span></span>|  
  
 <span data-ttu-id="5d800-642">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-642">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-643">Тип значения помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-643">A value type is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-644">Тип значения извлекается из стека; выполняется операция `box`.</span><span class="sxs-lookup"><span data-stu-id="5d800-644">The value type is popped from the stack; the `box` operation is performed.</span></span>  
  
3.  <span data-ttu-id="5d800-645">Ссылка на объект, получивший "упакованный" тип значения, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-645">An object reference to the resulting "boxed" value type is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-646">Тип значения имеет два отдельных представления в Common Language Infrastructure (CLI):</span><span class="sxs-lookup"><span data-stu-id="5d800-646">A value type has two separate representations within the Common Language Infrastructure (CLI):</span></span>  
  
-   <span data-ttu-id="5d800-647">Необработанная форма, используемая при внедрении типа значения в другой объект или в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-647">A 'raw' form used when a value type is embedded within another object or on the stack.</span></span>  
  
-   <span data-ttu-id="5d800-648">"Упакованная" форма, в которой данные в типе значения упаковываются (упаковываются) в объект, поэтому он может существовать как независимая сущность.</span><span class="sxs-lookup"><span data-stu-id="5d800-648">A 'boxed' form, where the data in the value type is wrapped (boxed) into an object so it can exist as an independent entity.</span></span>  
  
 <span data-ttu-id="5d800-649">Инструкция `box` преобразует необработанный (неупакованный) тип значения в ссылку на объект (тип `O`).</span><span class="sxs-lookup"><span data-stu-id="5d800-649">The `box` instruction converts the 'raw' (unboxed) value type into an object reference (type `O`).</span></span> <span data-ttu-id="5d800-650">Это достигается путем создания нового объекта и копирования данных из типа значения в новый выделенный объект.</span><span class="sxs-lookup"><span data-stu-id="5d800-650">This is accomplished by creating a new object and copying the data from the value type into the newly allocated object.</span></span> <span data-ttu-id="5d800-651">`valTypeToken` является маркером метаданных, указывающим тип значения в стеке.</span><span class="sxs-lookup"><span data-stu-id="5d800-651">`valTypeToken` is a metadata token indicating the type of the value type on the stack.</span></span>  
  
 <span data-ttu-id="5d800-652"><xref:System.OutOfMemoryException> возникает, если недостаточно памяти для удовлетворения запроса.</span><span class="sxs-lookup"><span data-stu-id="5d800-652"><xref:System.OutOfMemoryException> is thrown if there is insufficient memory to satisfy the request.</span></span>  
  
 <span data-ttu-id="5d800-653">Если класс не найден, возникает исключение <xref:System.TypeLoadException>.</span><span class="sxs-lookup"><span data-stu-id="5d800-653"><xref:System.TypeLoadException> is thrown if the class cannot be found.</span></span> <span data-ttu-id="5d800-654">Обычно это обнаруживается при преобразовании MSIL в машинный код, а не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-654">This is typically detected when Microsoft Intermediate Language (MSIL) is converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="5d800-655">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `box`:</span><span class="sxs-lookup"><span data-stu-id="5d800-655">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `box` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-656">ILGenerator. Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="5d800-656">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Br">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Br;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Br" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Br" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Br As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Br;" />
      <MemberSignature Language="F#" Value=" staticval mutable Br : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Br" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-657">Обеспечивает безусловную передачу управления конечной инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-657">Unconditionally transfers control to a target instruction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-658">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-658">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-659">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-659">Format</span></span>|<span data-ttu-id="5d800-660">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-660">Assembly Format</span></span>|<span data-ttu-id="5d800-661">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-661">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-662">38 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="5d800-662">38 < `int32` ></span></span>|<span data-ttu-id="5d800-663">br `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-663">br `target`</span></span>|<span data-ttu-id="5d800-664">Выполняет переход к целевой инструкции по указанному смещению.</span><span class="sxs-lookup"><span data-stu-id="5d800-664">Branches to a target instruction at the specified offset.</span></span>|  
  
 <span data-ttu-id="5d800-665">Эта операция не выполняет поведений стека вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-665">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="5d800-666">Инструкция `br` безусловно передает управление целевой инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-666">The `br` instruction unconditionally transfers control to a target instruction.</span></span> <span data-ttu-id="5d800-667">Целевая инструкция представляется как смещение со знаком длиной 4 байта от начала инструкции, следующей за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-667">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5d800-668">Если целевая инструкция имеет один или несколько префиксных кодов, управление может быть передано только первому из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="5d800-668">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5d800-669">Управление передачей в блоки `try`, `catch`, `filter` и `finally` не может быть выполнено этой инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-669">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5d800-670">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `br`:</span><span class="sxs-lookup"><span data-stu-id="5d800-670">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `br` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-671">ILGenerator. Emit (код операции, метка)</span><span class="sxs-lookup"><span data-stu-id="5d800-671">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Br_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Br_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Br_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Br_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Br_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Br_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Br_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Br_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-672">Обеспечивает безусловную передачу управления конечной инструкции (короткая форма).</span><span class="sxs-lookup"><span data-stu-id="5d800-672">Unconditionally transfers control to a target instruction (short form).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-673">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-673">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-674">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-674">Format</span></span>|<span data-ttu-id="5d800-675">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-675">Assembly Format</span></span>|<span data-ttu-id="5d800-676">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-676">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-677">2B < `int8` ></span><span class="sxs-lookup"><span data-stu-id="5d800-677">2B < `int8` ></span></span>|<span data-ttu-id="5d800-678">br. s `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-678">br.s `target`</span></span>|<span data-ttu-id="5d800-679">Выполняет переход к целевой инструкции по указанному смещению (краткая форма).</span><span class="sxs-lookup"><span data-stu-id="5d800-679">Branches to a target instruction at the specified offset, short form.</span></span>|  
  
 <span data-ttu-id="5d800-680">Эта операция не выполняет поведений стека вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-680">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="5d800-681">Инструкция `br.s` безусловно передает управление целевой инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-681">The `br.s` instruction unconditionally transfers control to a target instruction.</span></span> <span data-ttu-id="5d800-682">Целевая инструкция представлена как смещение со знаком длиной 1 байт от начала инструкции, следующей за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-682">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5d800-683">Если целевая инструкция имеет один или несколько префиксных кодов, управление может быть передано только первому из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="5d800-683">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5d800-684">Управление передачей в блоки `try`, `catch`, `filter` и `finally` не может быть выполнено этой инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-684">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5d800-685">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `br.s`:</span><span class="sxs-lookup"><span data-stu-id="5d800-685">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `br.s` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-686">ILGenerator. Emit (код операции, метка)</span><span class="sxs-lookup"><span data-stu-id="5d800-686">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Break;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Break" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Break" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Break As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Break;" />
      <MemberSignature Language="F#" Value=" staticval mutable Break : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Break" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-687">Сообщает инфраструктуре CLI, что необходимо оповестить отладчик о достижении точки останова.</span><span class="sxs-lookup"><span data-stu-id="5d800-687">Signals the Common Language Infrastructure (CLI) to inform the debugger that a break point has been tripped.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-688">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-688">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-689">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-689">Format</span></span>|<span data-ttu-id="5d800-690">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-690">Assembly Format</span></span>|<span data-ttu-id="5d800-691">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-691">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-692">01</span><span class="sxs-lookup"><span data-stu-id="5d800-692">01</span></span>|<span data-ttu-id="5d800-693">break</span><span class="sxs-lookup"><span data-stu-id="5d800-693">break</span></span>|<span data-ttu-id="5d800-694">Сообщите отладчику о достижении точки останова.</span><span class="sxs-lookup"><span data-stu-id="5d800-694">inform a debugger that a breakpoint has been reached.</span></span>|  
  
 <span data-ttu-id="5d800-695">Эта операция не выполняет поведений стека вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-695">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="5d800-696">Инструкция `break` предназначена для поддержки отладки.</span><span class="sxs-lookup"><span data-stu-id="5d800-696">The `break` instruction is for debugging support.</span></span> <span data-ttu-id="5d800-697">Он сигнализирует интерфейсу командной строки сообщить отладчику о том, что точка останова была остановлена.</span><span class="sxs-lookup"><span data-stu-id="5d800-697">It signals the CLI to inform the debugger that a break point has been tripped.</span></span> <span data-ttu-id="5d800-698">Он не влияет на состояние интерпретатора.</span><span class="sxs-lookup"><span data-stu-id="5d800-698">It has no other effect on the interpreter state.</span></span>  
  
 <span data-ttu-id="5d800-699">Инструкция `break` имеет наименьший возможный размер инструкции, позволяя выполнять исправление кода с точкой останова и создавать минимальный беспорядки вокруг окружающего кода.</span><span class="sxs-lookup"><span data-stu-id="5d800-699">The `break` instruction has the smallest possible instruction size enabling code patching with a break point and generating minimal disturbance to the surrounding code.</span></span>  
  
 <span data-ttu-id="5d800-700">Инструкция `break` может быть перехватываться в отладчике, не выполнять никаких действий или вызывать исключение безопасности.</span><span class="sxs-lookup"><span data-stu-id="5d800-700">The `break` instruction can trap to a debugger, do nothing, or raise a security exception.</span></span> <span data-ttu-id="5d800-701">Точное поведение определяется реализацией.</span><span class="sxs-lookup"><span data-stu-id="5d800-701">The exact behavior is implementation-defined.</span></span>  
  
 <span data-ttu-id="5d800-702">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `break`:</span><span class="sxs-lookup"><span data-stu-id="5d800-702">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `break` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-703">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-703">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brfalse">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brfalse;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brfalse" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brfalse" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brfalse As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brfalse;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brfalse : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brfalse" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-704">Передает управление конечной инструкции, если значением <paramref name="value" /> является <see langword="false" />, пустая ссылка (<see langword="Nothing" /> в Visual Basic) или ноль.</span><span class="sxs-lookup"><span data-stu-id="5d800-704">Transfers control to a target instruction if <paramref name="value" /> is <see langword="false" />, a null reference (<see langword="Nothing" /> in Visual Basic), or zero.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-705">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-705">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-706">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-706">Format</span></span>|<span data-ttu-id="5d800-707">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-707">Assembly Format</span></span>|<span data-ttu-id="5d800-708">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-708">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-709">39 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="5d800-709">39 < `int32` ></span></span>|<span data-ttu-id="5d800-710">брфалсе `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-710">brfalse `target`</span></span><br /><br /> <span data-ttu-id="5d800-711">брнулл `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-711">brnull `target`</span></span><br /><br /> <span data-ttu-id="5d800-712">брзеро `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-712">brzero `target`</span></span>|<span data-ttu-id="5d800-713">Выполняет переход к целевой инструкции с указанным смещением, если `false`.</span><span class="sxs-lookup"><span data-stu-id="5d800-713">Branches to a target instruction at the specified offset if `false`.</span></span>|  
  
 <span data-ttu-id="5d800-714">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-714">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-715">`value` помещается в стек с помощью предыдущей операции.</span><span class="sxs-lookup"><span data-stu-id="5d800-715">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="5d800-716">`value` извлекается из стека; Если `value` — `false`, ветвь устанавливается в `target`.</span><span class="sxs-lookup"><span data-stu-id="5d800-716">`value` is popped from the stack; if `value` is `false`, branch to `target`.</span></span>  
  
 <span data-ttu-id="5d800-717">Инструкция `brfalse` (и ее псевдонимы `brnull` и `brzero`) передает управление указанной конечной инструкции, если `value` (тип `int32`, `int64`, ссылка на объект `O`, управляемый указатель `&`, временный указатель `*`, `native int`) равен нулю. (0).</span><span class="sxs-lookup"><span data-stu-id="5d800-717">The `brfalse` instruction (and its aliases `brnull` and `brzero`) transfers control to the specified target instruction if `value` (of type `int32`, `int64`, object reference `O`, managed pointer `&`, transient pointer `*`, `native int`) is zero (`false`).</span></span> <span data-ttu-id="5d800-718">Если `value` не равно нулю (`true`), продолжение выполнения выполняется в следующей инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-718">If `value` is non-zero (`true`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="5d800-719">Целевая инструкция представляется как смещение со знаком длиной 4 байта от начала инструкции, следующей за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-719">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5d800-720">Если целевая инструкция имеет один или несколько префиксных кодов, управление может быть передано только первому из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="5d800-720">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5d800-721">Управление передачей в блоки `try`, `catch`, `filter` и `finally` не может быть выполнено этой инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-721">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5d800-722">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `brfalse`:</span><span class="sxs-lookup"><span data-stu-id="5d800-722">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brfalse` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-723">ILGenerator. Emit (код операции, метка)</span><span class="sxs-lookup"><span data-stu-id="5d800-723">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brfalse_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brfalse_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brfalse_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brfalse_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brfalse_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brfalse_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brfalse_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brfalse_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-724">Передает управление конечной инструкции, если значением <paramref name="value" /> является <see langword="false" />, пустая ссылка или ноль.</span><span class="sxs-lookup"><span data-stu-id="5d800-724">Transfers control to a target instruction if <paramref name="value" /> is <see langword="false" />, a null reference, or zero.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-725">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-725">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-726">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-726">Format</span></span>|<span data-ttu-id="5d800-727">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-727">Assembly Format</span></span>|<span data-ttu-id="5d800-728">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-728">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-729">2C <`int8` ></span><span class="sxs-lookup"><span data-stu-id="5d800-729">2C <`int8` ></span></span>|<span data-ttu-id="5d800-730">брфалсе. s `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-730">brfalse.s `target`</span></span><br /><br /> <span data-ttu-id="5d800-731">брнулл. s `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-731">brnull.s `target`</span></span><br /><br /> <span data-ttu-id="5d800-732">брзеро. s `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-732">brzero.s `target`</span></span>|<span data-ttu-id="5d800-733">Выполняет переход к целевой инструкции с указанным смещением, если `false`, короткая форма.</span><span class="sxs-lookup"><span data-stu-id="5d800-733">Branches to a target instruction at the specified offset if `false`, short form.</span></span>|  
  
 <span data-ttu-id="5d800-734">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-734">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-735">`value` помещается в стек с помощью предыдущей операции.</span><span class="sxs-lookup"><span data-stu-id="5d800-735">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="5d800-736">`value` извлекается из стека; Если `value` — `false`, ветвь устанавливается в `target`.</span><span class="sxs-lookup"><span data-stu-id="5d800-736">`value` is popped from the stack; if `value` is `false`, branch to `target`.</span></span>  
  
 <span data-ttu-id="5d800-737">Инструкция `brfalse.s` (и ее псевдонимы `brnull` и `brzero`) передает управление указанной конечной инструкции, если `value` (тип `int32`, `int64`, ссылка на объект `O`, управляемый указатель `&`, временный указатель `*`, `native int`) равен нулю. (0).</span><span class="sxs-lookup"><span data-stu-id="5d800-737">The `brfalse.s` instruction (and its aliases `brnull` and `brzero`) transfers control to the specified target instruction if `value` (of type `int32`, `int64`, object reference `O`, managed pointer `&`, transient pointer `*`, `native int`) is zero (`false`).</span></span> <span data-ttu-id="5d800-738">Если `value` не равно нулю (`true`), продолжение выполнения выполняется в следующей инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-738">If `value` is non-zero (`true`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="5d800-739">Целевая инструкция представлена как смещение со знаком длиной 1 байт от начала инструкции, следующей за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-739">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5d800-740">Если целевая инструкция имеет один или несколько префиксных кодов, управление может быть передано только первому из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="5d800-740">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5d800-741">Управление передачей в блоки `try`, `catch`, `filter` и `finally` не может быть выполнено этой инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-741">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5d800-742">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `brfalse.s`:</span><span class="sxs-lookup"><span data-stu-id="5d800-742">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brfalse.s` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-743">ILGenerator. Emit (код операции, метка)</span><span class="sxs-lookup"><span data-stu-id="5d800-743">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brtrue">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brtrue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brtrue" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brtrue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brtrue As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brtrue;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brtrue : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brtrue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-744">Передает управление конечной инструкции, если значение <paramref name="value" /> равно <see langword="true" />, либо отличается от null и от нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-744">Transfers control to a target instruction if <paramref name="value" /> is <see langword="true" />, not null, or non-zero.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-745">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-745">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-746">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-746">Format</span></span>|<span data-ttu-id="5d800-747">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-747">Assembly Format</span></span>|<span data-ttu-id="5d800-748">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-748">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-749">3A < `int32` ></span><span class="sxs-lookup"><span data-stu-id="5d800-749">3A < `int32` ></span></span>|<span data-ttu-id="5d800-750">требовалась brtrue `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-750">brtrue `target`</span></span><br /><br /> <span data-ttu-id="5d800-751">бринст `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-751">brinst `target`</span></span>|<span data-ttu-id="5d800-752">Выполняет переход к целевой инструкции с указанным смещением, если не равен нулю (`true`).</span><span class="sxs-lookup"><span data-stu-id="5d800-752">Branch to a target instruction at the specified offset if non-zero (`true`).</span></span>|  
  
 <span data-ttu-id="5d800-753">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-753">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-754">`value` помещается в стек с помощью предыдущей операции.</span><span class="sxs-lookup"><span data-stu-id="5d800-754">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="5d800-755">`value` извлекается из стека; Если `value` — `true`, ветвь устанавливается в `target`.</span><span class="sxs-lookup"><span data-stu-id="5d800-755">`value` is popped from the stack; if `value` is `true`, branch to `target`.</span></span>  
  
 <span data-ttu-id="5d800-756">Инструкция `brtrue` передает управление указанной конечной инструкции, если `value` (тип `native int`) не равен нулю (`true`).</span><span class="sxs-lookup"><span data-stu-id="5d800-756">The `brtrue` instruction transfers control to the specified target instruction if `value` (type `native int`) is nonzero (`true`).</span></span> <span data-ttu-id="5d800-757">Если `value` равно нулю (`false`), выполнение продолжится в следующей инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-757">If `value` is zero (`false`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="5d800-758">Если `value` является ссылкой на объект (тип `O`), то `brinst` (псевдоним для `brtrue`) передает управление, если он представляет экземпляр объекта (например, если он не является ссылкой на объект null; см. <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span><span class="sxs-lookup"><span data-stu-id="5d800-758">If `value` is an object reference (type `O`) then `brinst` (an alias for `brtrue`) transfers control if it represents an instance of an object (for example, if it is not the null object reference; see <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span></span>  
  
 <span data-ttu-id="5d800-759">Целевая инструкция представляется как смещение со знаком длиной 4 байта от начала инструкции, следующей за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-759">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5d800-760">Если целевая инструкция имеет один или несколько префиксных кодов, управление может быть передано только первому из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="5d800-760">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5d800-761">Управление передачей в блоки `try`, `catch`, `filter` и `finally` не может быть выполнено этой инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-761">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5d800-762">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `brtrue`:</span><span class="sxs-lookup"><span data-stu-id="5d800-762">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brtrue` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-763">ILGenerator. Emit (код операции, метка)</span><span class="sxs-lookup"><span data-stu-id="5d800-763">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brtrue_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brtrue_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brtrue_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brtrue_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brtrue_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brtrue_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brtrue_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brtrue_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-764">Передает управление конечной инструкции (короткая форма), если значение <paramref name="value" /> равно <see langword="true" /> либо отличается от null и от нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-764">Transfers control to a target instruction (short form) if <paramref name="value" /> is <see langword="true" />, not null, or non-zero.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-765">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-765">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-766">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-766">Format</span></span>|<span data-ttu-id="5d800-767">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-767">Assembly Format</span></span>|<span data-ttu-id="5d800-768">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-768">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-769">2D < `int8` ></span><span class="sxs-lookup"><span data-stu-id="5d800-769">2D < `int8` ></span></span>|<span data-ttu-id="5d800-770">требовалась brtrue. s `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-770">brtrue.s `target`</span></span><br /><br /> <span data-ttu-id="5d800-771">бринст. s `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-771">brinst.s `target`</span></span>|<span data-ttu-id="5d800-772">Переход к целевой инструкции с указанным смещением, если ненулевое значение (`true`), краткая форма.</span><span class="sxs-lookup"><span data-stu-id="5d800-772">Branch to a target instruction at the specified offset if non-zero (`true`), short form.</span></span>|  
  
 <span data-ttu-id="5d800-773">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-773">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-774">`value` помещается в стек с помощью предыдущей операции.</span><span class="sxs-lookup"><span data-stu-id="5d800-774">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="5d800-775">`value` извлекается из стека; Если `value` — `true`, ветвь устанавливается в `target`.</span><span class="sxs-lookup"><span data-stu-id="5d800-775">`value` is popped from the stack; if `value` is `true`, branch to `target`.</span></span>  
  
 <span data-ttu-id="5d800-776">Инструкция `brtrue.s` передает управление указанной конечной инструкции, если `value` (тип `native int`) не равен нулю (`true`).</span><span class="sxs-lookup"><span data-stu-id="5d800-776">The `brtrue.s` instruction transfers control to the specified target instruction if `value` (type `native int`) is nonzero (`true`).</span></span> <span data-ttu-id="5d800-777">Если `value` равно нулю (`false`), выполнение продолжится в следующей инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-777">If `value` is zero (`false`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="5d800-778">Если `value` является ссылкой на объект (тип `O`), то `brinst` (псевдоним для `brtrue`) передает управление, если он представляет экземпляр объекта (например, если он не является ссылкой на объект null; см. <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span><span class="sxs-lookup"><span data-stu-id="5d800-778">If `value` is an object reference (type `O`) then `brinst` (an alias for `brtrue`) transfers control if it represents an instance of an object (for example, if it is not the null object reference; see <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span></span>  
  
 <span data-ttu-id="5d800-779">Целевая инструкция представлена как смещение со знаком длиной 1 байт от начала инструкции, следующей за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-779">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5d800-780">Если целевая инструкция имеет один или несколько префиксных кодов, управление может быть передано только первому из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="5d800-780">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="5d800-781">Управление передачей в блоки `try`, `catch`, `filter` и `finally` не может быть выполнено этой инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-781">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="5d800-782">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `brtrue.s`:</span><span class="sxs-lookup"><span data-stu-id="5d800-782">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brtrue.s` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-783">ILGenerator. Emit (код операции, метка)</span><span class="sxs-lookup"><span data-stu-id="5d800-783">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Call;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Call" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Call" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Call As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Call;" />
      <MemberSignature Language="F#" Value=" staticval mutable Call : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Call" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-784">Вызывает метод, на который ссылается переданный дескриптор метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-784">Calls the method indicated by the passed method descriptor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-785">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-785">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-786">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-786">Format</span></span>|<span data-ttu-id="5d800-787">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-787">Assembly Format</span></span>|<span data-ttu-id="5d800-788">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-788">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-789">28 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5d800-789">28 < `T` ></span></span>|<span data-ttu-id="5d800-790">вызов `methodDesc`</span><span class="sxs-lookup"><span data-stu-id="5d800-790">call `methodDesc`</span></span>|<span data-ttu-id="5d800-791">Вызовите метод, описанный `methodDesc`.</span><span class="sxs-lookup"><span data-stu-id="5d800-791">Call the method described by `methodDesc`.</span></span>|  
  
 <span data-ttu-id="5d800-792">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-792">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-793">Аргументы метода @no__t от-0 до `argN` помещаются в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-793">Method arguments `arg1` through `argN` are pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-794">Аргументы метода @no__t от-0 до `argN` извлекаются из стека; вызов метода выполняется с этими аргументами, и управление передается методу, на который ссылается дескриптор метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-794">Method arguments `arg1` through `argN` are popped from the stack; the method call is performed with these arguments and control is transferred to the method referred to by the method descriptor.</span></span> <span data-ttu-id="5d800-795">По завершении возвращаемое значение создается вызываемым методом и отправляется вызывающему объекту.</span><span class="sxs-lookup"><span data-stu-id="5d800-795">When complete, a return value is generated by the callee method and sent to the caller.</span></span>  
  
3.  <span data-ttu-id="5d800-796">Возвращаемое значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-796">The return value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-797">Инструкция `call` вызывает метод, указанный дескриптором метода, передаваемым с помощью инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-797">The `call` instruction calls the method indicated by the method descriptor passed with the instruction.</span></span> <span data-ttu-id="5d800-798">Дескриптор метода — это маркер метаданных, указывающий вызываемый метод и число, тип и порядок аргументов, которые были помещены в стек для передачи в этот метод, а также соглашение о вызовах для использования.</span><span class="sxs-lookup"><span data-stu-id="5d800-798">The method descriptor is a metadata token that indicates the method to call and the number, type, and order of the arguments that have been placed on the stack to be passed to that method as well as the calling convention to be used.</span></span> <span data-ttu-id="5d800-799">Инструкция `call` может предшествовать префиксу `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>), чтобы указать, что текущее состояние метода должно быть освобождено перед передачей управления.</span><span class="sxs-lookup"><span data-stu-id="5d800-799">The `call` instruction can be immediately preceded by a `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) prefix instruction to specify that the current method state should be released before transferring control.</span></span> <span data-ttu-id="5d800-800">Если вызов передает управление методу более высокого уровня доверия, чем метод источника, кадр стека не освобождается.</span><span class="sxs-lookup"><span data-stu-id="5d800-800">If the call transfers control to a method of higher trust than the origin method, the stack frame is not released.</span></span> <span data-ttu-id="5d800-801">Вместо этого выполнение продолжится автоматически, как если бы `tail` не было предоставлено.</span><span class="sxs-lookup"><span data-stu-id="5d800-801">Instead, the execution continues silently as if the `tail` had not been supplied.</span></span> <span data-ttu-id="5d800-802">Маркер метаданных содержит достаточную информацию для определения того, относится ли вызов к статическому методу, методу экземпляра, виртуальному методу или глобальной функции.</span><span class="sxs-lookup"><span data-stu-id="5d800-802">The metadata token carries sufficient information to determine whether the call is to a static method, an instance method, a virtual method, or a global function.</span></span> <span data-ttu-id="5d800-803">Во всех этих случаях адрес назначения определяется исключительно из дескриптора метода (Сравните это с инструкцией <xref:System.Reflection.Emit.OpCodes.Callvirt> для вызова виртуальных методов, где адрес назначения также зависит от типа среды выполнения ссылки на экземпляр помещается перед <xref:System.Reflection.Emit.OpCodes.Callvirt>).</span><span class="sxs-lookup"><span data-stu-id="5d800-803">In all of these cases the destination address is determined entirely from the method descriptor (contrast this with the <xref:System.Reflection.Emit.OpCodes.Callvirt> instruction for calling virtual methods, where the destination address also depends upon the runtime type of the instance reference pushed before the <xref:System.Reflection.Emit.OpCodes.Callvirt>).</span></span>  
  
 <span data-ttu-id="5d800-804">Аргументы помещаются в стек в порядке слева направо.</span><span class="sxs-lookup"><span data-stu-id="5d800-804">The arguments are placed on the stack in left-to-right order.</span></span> <span data-ttu-id="5d800-805">То есть первый аргумент выводится и помещается в стек, затем второй аргумент — третий, пока все необходимые аргументы не помещаются в стек в убывающем порядке.</span><span class="sxs-lookup"><span data-stu-id="5d800-805">That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order.</span></span> <span data-ttu-id="5d800-806">Существует три важных случая.</span><span class="sxs-lookup"><span data-stu-id="5d800-806">There are three important special cases:</span></span>  
  
 1. <span data-ttu-id="5d800-807">Вызовы метода экземпляра (или виртуального) должны отправить ссылку на этот экземпляр перед любыми видимыми пользователем аргументами.</span><span class="sxs-lookup"><span data-stu-id="5d800-807">Calls to an instance (or virtual) method must push that instance reference before any of the user-visible arguments.</span></span> <span data-ttu-id="5d800-808">Ссылка на экземпляр не должна быть пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="5d800-808">The instance reference must not be a null reference.</span></span> <span data-ttu-id="5d800-809">Сигнатура, перенесенная в метаданные, не содержит записи в списке параметров для указателя `this`; Вместо этого используется бит, указывающий, требует ли метод передачи указателя `this`.</span><span class="sxs-lookup"><span data-stu-id="5d800-809">The signature carried in the metadata does not contain an entry in the parameter list for the `this` pointer; instead, it uses a bit to indicate whether the method requires passing the `this` pointer.</span></span>  
  
 2. <span data-ttu-id="5d800-810">Вызов виртуального метода допускается с помощью `call` (а не `callvirt`); Это означает, что метод должен быть разрешен с помощью класса, заданного методом, а не как указано динамически в вызываемом объекте.</span><span class="sxs-lookup"><span data-stu-id="5d800-810">It is valid to call a virtual method using `call` (rather than `callvirt`); this indicates that the method is to be resolved using the class specified by method rather than as specified dynamically from the object being invoked.</span></span>  
  
 3. <span data-ttu-id="5d800-811">Обратите внимание, что метод `Invoke` делегата можно вызвать с помощью инструкции `call` или `callvirt`.</span><span class="sxs-lookup"><span data-stu-id="5d800-811">Note that a delegate's `Invoke` method can be called with either the `call` or `callvirt` instruction.</span></span>  
  
 <span data-ttu-id="5d800-812"><xref:System.Security.SecurityException> может возникать, если система безопасности не предоставляет вызывающему объекту доступ к вызываемому методу.</span><span class="sxs-lookup"><span data-stu-id="5d800-812"><xref:System.Security.SecurityException> may be thrown if system security does not grant the caller access to the called method.</span></span> <span data-ttu-id="5d800-813">Проверка безопасности может происходить, когда инструкции MSIL преобразуются в машинный код, а не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-813">The security check may occur when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5d800-814">При вызове методов типа System. Object для типов значений рекомендуется использовать префикс `constrained` с инструкцией `callvirt` вместо выдачи инструкции `call`.</span><span class="sxs-lookup"><span data-stu-id="5d800-814">When calling methods of System.Object on value types, consider using the `constrained` prefix with the `callvirt` instruction instead of emitting a `call` instruction.</span></span> <span data-ttu-id="5d800-815">Это избавляет от необходимости создавать разные IL в зависимости от того, переопределяет ли тип значения метод, избегая возможной проблемы управления версиями.</span><span class="sxs-lookup"><span data-stu-id="5d800-815">This removes the need to emit different IL depending on whether or not the value type overrides the method, avoiding a potential versioning problem.</span></span> <span data-ttu-id="5d800-816">Рекомендуется использовать префикс `constrained` при вызове методов интерфейса для типов значений, так как метод типа значения, реализующий метод интерфейса, можно изменить с помощью `MethodImpl`.</span><span class="sxs-lookup"><span data-stu-id="5d800-816">Consider using the `constrained` prefix when invoking interface methods on value types, since the value type method implementing the interface method can be changed using a `MethodImpl`.</span></span> <span data-ttu-id="5d800-817">Эти проблемы более подробно описаны в коде операции <xref:System.Reflection.Emit.OpCodes.Constrained>.</span><span class="sxs-lookup"><span data-stu-id="5d800-817">These issues are described in more detail in the <xref:System.Reflection.Emit.OpCodes.Constrained> opcode.</span></span>  
  
 <span data-ttu-id="5d800-818">Следующие перегрузки метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> могут использовать код операции `call`:</span><span class="sxs-lookup"><span data-stu-id="5d800-818">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `call` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-819">ILGenerator. Emit (код операции, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="5d800-819">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
-   <span data-ttu-id="5d800-820">ILGenerator. Емиткалл (код операции, MethodInfo, тип [])</span><span class="sxs-lookup"><span data-stu-id="5d800-820">ILGenerator.EmitCall(OpCode, MethodInfo, Type[])</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5d800-821">Метод <xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> предоставляется для вызовов `varargs`.</span><span class="sxs-lookup"><span data-stu-id="5d800-821">The <xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> method is provided for `varargs` calls.</span></span> <span data-ttu-id="5d800-822">Используйте метод <xref:System.Reflection.Emit.ILGenerator.Emit%2A> для обычных вызовов.</span><span class="sxs-lookup"><span data-stu-id="5d800-822">Use the <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method for normal calls.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Calli">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Calli;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Calli" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Calli" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Calli As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Calli;" />
      <MemberSignature Language="F#" Value=" staticval mutable Calli : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Calli" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-823">Вызывает метод, заданный в стеке вычислений (как указатель на точку входа), с аргументами, описанными в соглашении о вызовах.</span><span class="sxs-lookup"><span data-stu-id="5d800-823">Calls the method indicated on the evaluation stack (as a pointer to an entry point) with arguments described by a calling convention.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-824">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-824">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-825">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-825">Format</span></span>|<span data-ttu-id="5d800-826">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-826">Assembly Format</span></span>|<span data-ttu-id="5d800-827">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-827">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-828">29 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5d800-828">29 < `T` ></span></span>|<span data-ttu-id="5d800-829">calli `callSiteDescr`</span><span class="sxs-lookup"><span data-stu-id="5d800-829">calli `callSiteDescr`</span></span>|<span data-ttu-id="5d800-830">Вызывает метод, указываемый с аргументами, описанными в соглашении о вызовах.</span><span class="sxs-lookup"><span data-stu-id="5d800-830">Calls the method pointed to with arguments described by the calling convention.</span></span>|  
  
 <span data-ttu-id="5d800-831">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-831">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-832">Аргументы метода @no__t от-0 до `argN` помещаются в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-832">Method arguments `arg1` through `argN` are pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-833">Указатель на запись метода помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-833">The method entry pointer is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-834">Аргументы метода @no__t от-0 до `argN`, а указатель входа метода извлекается из стека; выполняется вызов метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-834">Method arguments `arg1` through `argN` and the method entry pointer are popped from the stack; the call to the method is performed.</span></span> <span data-ttu-id="5d800-835">По завершении возвращаемое значение создается вызываемым методом и отправляется вызывающему объекту.</span><span class="sxs-lookup"><span data-stu-id="5d800-835">When complete, a return value is generated by the callee method and sent to the caller.</span></span>  
  
4.  <span data-ttu-id="5d800-836">Возвращаемое значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-836">The return value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-837">Инструкция `calli` вызывает указатель входа метода с аргументами `arg1` до `argN`.</span><span class="sxs-lookup"><span data-stu-id="5d800-837">The `calli` instruction calls the method entry pointer with the arguments `arg1` through `argN`.</span></span> <span data-ttu-id="5d800-838">Типы этих аргументов описаны определенным соглашением о вызовах (`callSiteDesc`).</span><span class="sxs-lookup"><span data-stu-id="5d800-838">The types of these arguments are described by the specific calling convention (`callSiteDesc`).</span></span> <span data-ttu-id="5d800-839">Инструкции `calli` может предшествовать префикс `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>), чтобы указать, что текущее состояние метода должно быть освобождено перед передачей управления.</span><span class="sxs-lookup"><span data-stu-id="5d800-839">The `calli` instruction may be immediately preceded by a `tail` prefix (<xref:System.Reflection.Emit.OpCodes.Tailcall>) to specify that the current method state should be released before transferring control.</span></span> <span data-ttu-id="5d800-840">Если вызов передает управление методу с более высоким уровнем доверия, чем метод источника, кадр стека не будет освобожден; Вместо этого выполнение продолжится автоматически, как если бы `tail` не было предоставлено.</span><span class="sxs-lookup"><span data-stu-id="5d800-840">If the call would transfer control to a method of higher trust than the origin method the stack frame will not be released; instead, the execution will continue silently as if the `tail` had not been supplied.</span></span>  
  
 <span data-ttu-id="5d800-841">Указатель входа метода считается определенным указателем на машинный код (на целевом компьютере), который можно использовать с аргументами, описанными в соглашении о вызовах (маркер метаданных для отдельной подписи).</span><span class="sxs-lookup"><span data-stu-id="5d800-841">The method entry pointer is assumed to be a specific pointer to native code (of the target machine) that can be legitimately called with the arguments described by the calling convention (a metadata token for a stand-alone signature).</span></span> <span data-ttu-id="5d800-842">Такой указатель может быть создан с помощью инструкций <xref:System.Reflection.Emit.OpCodes.Ldftn> или <xref:System.Reflection.Emit.OpCodes.Ldvirtftn> или передается из машинного кода.</span><span class="sxs-lookup"><span data-stu-id="5d800-842">Such a pointer can be created using the <xref:System.Reflection.Emit.OpCodes.Ldftn> or <xref:System.Reflection.Emit.OpCodes.Ldvirtftn> instructions, or passed in from native code.</span></span>  
  
 <span data-ttu-id="5d800-843">Соглашение о вызовах не проверяется динамически, поэтому код, использующий инструкцию `calli`, не работает правильно, если назначение фактически не использует указанное соглашение о вызовах.</span><span class="sxs-lookup"><span data-stu-id="5d800-843">The calling convention is not checked dynamically, so code that uses a `calli` instruction does not work correctly if the destination does not actually use the specified calling convention.</span></span>  
  
 <span data-ttu-id="5d800-844">Аргументы помещаются в стек в порядке слева направо.</span><span class="sxs-lookup"><span data-stu-id="5d800-844">The arguments are placed on the stack in left-to-right order.</span></span> <span data-ttu-id="5d800-845">То есть первый аргумент выводится и помещается в стек, затем второй аргумент — третий, пока все необходимые аргументы не помещаются в стек в убывающем порядке.</span><span class="sxs-lookup"><span data-stu-id="5d800-845">That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order.</span></span> <span data-ttu-id="5d800-846">Последовательность кода для создания аргументов для экземпляра или виртуального метода должна отправить ссылку на экземпляр (которая не должна быть пустой ссылкой) перед любыми видимыми пользователем аргументами.</span><span class="sxs-lookup"><span data-stu-id="5d800-846">The argument-building code sequence for an instance or virtual method must push that instance reference (which must not be a null reference) before any of the user-visible arguments.</span></span>  
  
 <span data-ttu-id="5d800-847"><xref:System.Security.SecurityException> может возникать, если системная безопасность не предоставляет вызывающему объекту доступ к вызываемому методу.</span><span class="sxs-lookup"><span data-stu-id="5d800-847"><xref:System.Security.SecurityException> may be thrown if the system security does not grant the caller access to the called method.</span></span> <span data-ttu-id="5d800-848">Проверка безопасности может происходить, когда инструкции MSIL преобразуются в машинный код, а не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-848">The security check can occur when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="5d800-849">Следующие методы <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> можно использовать для выполнения инструкции `calli` в стеке.</span><span class="sxs-lookup"><span data-stu-id="5d800-849">The following <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> methods can be used to perform a `calli` instruction on the stack.</span></span> <span data-ttu-id="5d800-850">Обратите внимание, что `calli` следует вызывать через приведенные ниже методы, а не использовать класс <xref:System.Reflection.Emit.ILGenerator.Emit%2A>, чтобы разместить инструкцию непосредственно в стеке.</span><span class="sxs-lookup"><span data-stu-id="5d800-850">Note that `calli` should be called through the below methods rather than using the <xref:System.Reflection.Emit.ILGenerator.Emit%2A> class to place the instruction directly on the stack.</span></span>  
  
-   <span data-ttu-id="5d800-851">ILGenerator. Емиткалли (opcode, Каллингконвентионс, Type, Type [], Type []) для вызовов, использующих соглашение об управляемом вызовах.</span><span class="sxs-lookup"><span data-stu-id="5d800-851">ILGenerator.EmitCalli(Opcode, CallingConventions, Type, Type[], Type[]) for calls using a managed calling convention.</span></span>  
  
-   <span data-ttu-id="5d800-852">ILGenerator. Емиткалли (opcode, CallingConvention, Type, Type []) для вызовов, использующих неуправляемое соглашение о вызовах.</span><span class="sxs-lookup"><span data-stu-id="5d800-852">ILGenerator.EmitCalli(Opcode, CallingConvention, Type, Type[]) for calls using an unmanaged calling convention.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Callvirt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Callvirt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Callvirt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Callvirt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Callvirt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Callvirt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Callvirt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Callvirt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-853">Вызывает метод объекта с поздней привязкой и помещает возвращаемое значение в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-853">Calls a late-bound method on an object, pushing the return value onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-854">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-854">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-855">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-855">Format</span></span>|<span data-ttu-id="5d800-856">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-856">Assembly Format</span></span>|<span data-ttu-id="5d800-857">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-857">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-858">6F < `T` ></span><span class="sxs-lookup"><span data-stu-id="5d800-858">6F < `T` ></span></span>|<span data-ttu-id="5d800-859">callvirt `method`</span><span class="sxs-lookup"><span data-stu-id="5d800-859">callvirt `method`</span></span>|<span data-ttu-id="5d800-860">Вызывает конкретный метод, связанный с `obj`.</span><span class="sxs-lookup"><span data-stu-id="5d800-860">Calls a specific method associated with `obj`.</span></span>|  
  
 <span data-ttu-id="5d800-861">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-861">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-862">Ссылка на объект `obj` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-862">An object reference `obj` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-863">Аргументы метода @no__t от-0 до `argN` помещаются в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-863">Method arguments `arg1` through `argN` are pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-864">Аргументы метода @no__t от-0 до `argN` и ссылка на объект `obj` извлекаются из стека; вызов метода выполняется с этими аргументами, и управление передается методу в `obj`, на который ссылается токен метаданных метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-864">Method arguments `arg1` through `argN` and the object reference `obj` are popped from the stack; the method call is performed with these arguments and control is transferred to the method in `obj` referred to by the method metadata token.</span></span> <span data-ttu-id="5d800-865">По завершении возвращаемое значение создается вызываемым методом и отправляется вызывающему объекту.</span><span class="sxs-lookup"><span data-stu-id="5d800-865">When complete, a return value is generated by the callee method and sent to the caller.</span></span>  
  
4.  <span data-ttu-id="5d800-866">Возвращаемое значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-866">The return value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-867">Инструкция `callvirt` вызывает метод с поздним связыванием для объекта.</span><span class="sxs-lookup"><span data-stu-id="5d800-867">The `callvirt` instruction calls a late-bound method on an object.</span></span> <span data-ttu-id="5d800-868">То есть метод выбирается на основе типа среды выполнения `obj`, а не класса времени компиляции, видимого в указателе метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-868">That is, the method is chosen based on the runtime type of `obj` rather than the compile-time class visible in the method pointer.</span></span> <span data-ttu-id="5d800-869">`Callvirt` можно использовать для вызова как виртуальных, так и методов экземпляра.</span><span class="sxs-lookup"><span data-stu-id="5d800-869">`Callvirt` can be used to call both virtual and instance methods.</span></span> <span data-ttu-id="5d800-870">Инструкции `callvirt` может предшествовать префикс `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>), чтобы указать, что текущий кадр стека следует освободить перед передачей управления.</span><span class="sxs-lookup"><span data-stu-id="5d800-870">The `callvirt` instruction may be immediately preceded by a `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) prefix to specify that the current stack frame should be released before transferring control.</span></span> <span data-ttu-id="5d800-871">Если вызов передает управление методу с более высоким уровнем доверия, чем исходный метод, кадр стека не будет освобожден.</span><span class="sxs-lookup"><span data-stu-id="5d800-871">If the call would transfer control to a method of higher trust than the original method the stack frame will not be released.</span></span>  
  
 <span data-ttu-id="5d800-872">Токен метаданных метода предоставляет имя, класс и сигнатуру вызываемого метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-872">The method metadata token provides the name, class and signature of the method to call.</span></span> <span data-ttu-id="5d800-873">Класс, связанный с `obj`, является классом, экземпляром которого является.</span><span class="sxs-lookup"><span data-stu-id="5d800-873">The class associated with `obj` is the class of which it is an instance.</span></span> <span data-ttu-id="5d800-874">Если класс определяет нестатический метод, соответствующий указанному имени и сигнатуре метода, вызывается этот метод.</span><span class="sxs-lookup"><span data-stu-id="5d800-874">If the class defines a non-static method that matches the indicated method name and signature, this method is called.</span></span> <span data-ttu-id="5d800-875">В противном случае все классы в цепочке базовых классов этого класса проверяются по порядку.</span><span class="sxs-lookup"><span data-stu-id="5d800-875">Otherwise all classes in the base class chain of this class are checked in order.</span></span> <span data-ttu-id="5d800-876">Если метод не найден, возникает ошибка.</span><span class="sxs-lookup"><span data-stu-id="5d800-876">It is an error if no method is found.</span></span>  
  
 <span data-ttu-id="5d800-877">`Callvirt` извлекает объект и связанные аргументы из стека вычислений перед вызовом метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-877">`Callvirt` pops the object and the associated arguments off the evaluation stack before calling the method.</span></span> <span data-ttu-id="5d800-878">Если метод имеет возвращаемое значение, он помещается в стек после завершения метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-878">If the method has a return value, it is pushed on the stack upon method completion.</span></span> <span data-ttu-id="5d800-879">На стороне вызываемого метода доступ к параметру `obj` осуществляется в качестве аргумента 0, `arg1` в качестве аргумента 1 и т. д.</span><span class="sxs-lookup"><span data-stu-id="5d800-879">On the callee side, the `obj` parameter is accessed as argument 0, `arg1` as argument 1, and so on.</span></span>  
  
 <span data-ttu-id="5d800-880">Аргументы помещаются в стек в порядке слева направо.</span><span class="sxs-lookup"><span data-stu-id="5d800-880">The arguments are placed on the stack in left-to-right order.</span></span> <span data-ttu-id="5d800-881">То есть первый аргумент выводится и помещается в стек, затем второй аргумент — третий, пока все необходимые аргументы не помещаются в стек в убывающем порядке.</span><span class="sxs-lookup"><span data-stu-id="5d800-881">That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order.</span></span> <span data-ttu-id="5d800-882">Ссылка на экземпляр `obj` (всегда требуется для `callvirt`) должна быть передана перед любыми видимыми пользователем аргументами.</span><span class="sxs-lookup"><span data-stu-id="5d800-882">The instance reference `obj` (always required for `callvirt`) must be pushed before any of the user-visible arguments.</span></span> <span data-ttu-id="5d800-883">Сигнатура (переданная в маркере метаданных) не должна содержать запись в списке параметров для этого указателя.</span><span class="sxs-lookup"><span data-stu-id="5d800-883">The signature (carried in the metadata token) need not contain an entry in the parameter list for the this pointer.</span></span>  
  
 <span data-ttu-id="5d800-884">Обратите внимание, что виртуальный метод также можно вызвать с помощью инструкции <xref:System.Reflection.Emit.OpCodes.Call>.</span><span class="sxs-lookup"><span data-stu-id="5d800-884">Note that a virtual method can also be called using the <xref:System.Reflection.Emit.OpCodes.Call> instruction.</span></span>  
  
 <span data-ttu-id="5d800-885"><xref:System.MissingMethodException> возникает, если нестатический метод с указанным именем и подписью не удалось найти в классе, связанном с `obj` или с любым из его базовых классов.</span><span class="sxs-lookup"><span data-stu-id="5d800-885"><xref:System.MissingMethodException> is thrown if a non-static method with the indicated name and signature could not be found in the class associated with `obj` or any of its base classes.</span></span> <span data-ttu-id="5d800-886">Обычно это обнаруживается при преобразовании инструкций промежуточного языка MSIL в машинный код, а не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-886">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="5d800-887">если obj имеет значение null, возникает исключение <xref:System.NullReferenceException>.</span><span class="sxs-lookup"><span data-stu-id="5d800-887"><xref:System.NullReferenceException> is thrown if obj is null.</span></span>  
  
 <span data-ttu-id="5d800-888"><xref:System.Security.SecurityException> возникает, если система безопасности не предоставляет вызывающему объекту доступ к вызываемому методу.</span><span class="sxs-lookup"><span data-stu-id="5d800-888"><xref:System.Security.SecurityException> is thrown if system security does not grant the caller access to the called method.</span></span> <span data-ttu-id="5d800-889">Проверка безопасности может произойти, когда CIL преобразуется в машинный код, а не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-889">The security check may occur when the CIL is converted to native code rather than at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5d800-890">При вызове методов типа System. Object для типов значений рекомендуется использовать префикс `constrained` с инструкцией `callvirt`.</span><span class="sxs-lookup"><span data-stu-id="5d800-890">When calling methods of System.Object on value types, consider using the `constrained` prefix with the `callvirt` instruction.</span></span> <span data-ttu-id="5d800-891">Это избавляет от необходимости создавать разные IL в зависимости от того, переопределяет ли тип значения метод, избегая возможной проблемы управления версиями.</span><span class="sxs-lookup"><span data-stu-id="5d800-891">This removes the need to emit different IL depending on whether or not the value type overrides the method, avoiding a potential versioning problem.</span></span> <span data-ttu-id="5d800-892">Рекомендуется использовать префикс `constrained` при вызове методов интерфейса для типов значений, так как метод типа значения, реализующий метод интерфейса, можно изменить с помощью `MethodImpl`.</span><span class="sxs-lookup"><span data-stu-id="5d800-892">Consider using the `constrained` prefix when invoking interface methods on value types, since the value type method implementing the interface method can be changed using a `MethodImpl`.</span></span> <span data-ttu-id="5d800-893">Эти проблемы более подробно описаны в коде операции <xref:System.Reflection.Emit.OpCodes.Constrained>.</span><span class="sxs-lookup"><span data-stu-id="5d800-893">These issues are described in more detail in the <xref:System.Reflection.Emit.OpCodes.Constrained> opcode.</span></span>  
  
 <span data-ttu-id="5d800-894">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `callvirt`:</span><span class="sxs-lookup"><span data-stu-id="5d800-894">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `callvirt` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-895">ILGenerator. Emit (код операции, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="5d800-895">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
-   <span data-ttu-id="5d800-896">ILGenerator. Емиткалл (код операции, MethodInfo, тип [])</span><span class="sxs-lookup"><span data-stu-id="5d800-896">ILGenerator.EmitCall(OpCode, MethodInfo, Type[])</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Castclass">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Castclass;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Castclass" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Castclass" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Castclass As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Castclass;" />
      <MemberSignature Language="F#" Value=" staticval mutable Castclass : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Castclass" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-897">Предпринимает попытку привести объект, передаваемый по ссылке, к указанному классу.</span><span class="sxs-lookup"><span data-stu-id="5d800-897">Attempts to cast an object passed by reference to the specified class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-898">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-898">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-899">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-899">Format</span></span>|<span data-ttu-id="5d800-900">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-900">Assembly Format</span></span>|<span data-ttu-id="5d800-901">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-901">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-902">74 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5d800-902">74 < `T` ></span></span>|<span data-ttu-id="5d800-903">касткласс `class`</span><span class="sxs-lookup"><span data-stu-id="5d800-903">castclass `class`</span></span>|<span data-ttu-id="5d800-904">Приводит объект к новому объекту типа `class`.</span><span class="sxs-lookup"><span data-stu-id="5d800-904">Casts an object to a new object of type `class`.</span></span>|  
  
 <span data-ttu-id="5d800-905">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-905">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-906">Ссылка на объект помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-906">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-907">Ссылка на объект извлекается из стека; Объект, на который указывает ссылка, приводится к указанному `class`.</span><span class="sxs-lookup"><span data-stu-id="5d800-907">The object reference is popped from the stack; the referenced object is cast as the specified `class`.</span></span>  
  
3.  <span data-ttu-id="5d800-908">В случае успеха новая ссылка на объект помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-908">If successful, a new object reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-909">Инструкция `castclass` пытается привести ссылку на объект (Type `O`) на вершине стека к указанному классу.</span><span class="sxs-lookup"><span data-stu-id="5d800-909">The `castclass` instruction attempts to cast the object reference (type `O`) atop the stack to a specified class.</span></span> <span data-ttu-id="5d800-910">Новый класс задается маркером метаданных, указывающим нужный класс.</span><span class="sxs-lookup"><span data-stu-id="5d800-910">The new class is specified by a metadata token indicating the desired class.</span></span> <span data-ttu-id="5d800-911">Если класс объекта в верхней части стека не реализует новый класс (предполагая, что новый класс является интерфейсом) и не является производным классом нового класса, возникает исключение <xref:System.InvalidCastException>.</span><span class="sxs-lookup"><span data-stu-id="5d800-911">If the class of the object on the top of the stack does not implement the new class (assuming the new class is an interface) and is not a derived class of the new class then an <xref:System.InvalidCastException> is thrown.</span></span> <span data-ttu-id="5d800-912">Если ссылка на объект является пустой ссылкой, `castclass` завершается и возвращает новый объект как пустую ссылку.</span><span class="sxs-lookup"><span data-stu-id="5d800-912">If the object reference is a null reference, `castclass` succeeds and returns the new object as a null reference.</span></span>  
  
 <span data-ttu-id="5d800-913">если obj не может быть приведен к классу, возникает исключение <xref:System.InvalidCastException>.</span><span class="sxs-lookup"><span data-stu-id="5d800-913"><xref:System.InvalidCastException> is thrown if obj cannot be cast to class.</span></span>  
  
 <span data-ttu-id="5d800-914">Если класс не найден, возникает исключение <xref:System.TypeLoadException>.</span><span class="sxs-lookup"><span data-stu-id="5d800-914"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="5d800-915">Обычно это обнаруживается при преобразовании инструкции MSIL в машинный код, а не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-915">This is typically detected when a Microsoft Intermediate Language (MSIL) instruction is converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="5d800-916">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `castclass`:</span><span class="sxs-lookup"><span data-stu-id="5d800-916">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `castclass` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-917">ILGenerator. Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="5d800-917">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceq">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ceq;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ceq" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ceq" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ceq As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ceq;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ceq : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ceq" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-918">Сравнивает два значения.</span><span class="sxs-lookup"><span data-stu-id="5d800-918">Compares two values.</span></span> <span data-ttu-id="5d800-919">Если они равны, целочисленное значение 1 (<see langword="(int32" />) помещается в стек вычислений; в противном случае в стек вычислений помещается 0 (<see langword="int32" />).</span><span class="sxs-lookup"><span data-stu-id="5d800-919">If they are equal, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-920">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-920">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-921">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-921">Format</span></span>|<span data-ttu-id="5d800-922">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-922">Assembly Format</span></span>|<span data-ttu-id="5d800-923">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-923">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-924">FE 01</span><span class="sxs-lookup"><span data-stu-id="5d800-924">FE 01</span></span>|<span data-ttu-id="5d800-925">цек</span><span class="sxs-lookup"><span data-stu-id="5d800-925">ceq</span></span>|<span data-ttu-id="5d800-926">Отправляет 1, если `value1` равно `value2`; в противном случае отправляет 0.</span><span class="sxs-lookup"><span data-stu-id="5d800-926">Pushes 1 if `value1` equals `value2`; else pushes 0.</span></span>|  
  
 <span data-ttu-id="5d800-927">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-927">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-928">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-928">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-929">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-929">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-930">`value2` и `value1` извлекаются из стека; `value1` сравнивается с `value2`.</span><span class="sxs-lookup"><span data-stu-id="5d800-930">`value2` and `value1` are popped from the stack; `value1` is compared to `value2`.</span></span>  
  
4.  <span data-ttu-id="5d800-931">Если `value1` равно `value2`, 1 помещается в стек; в противном случае в стек помещается значение 0.</span><span class="sxs-lookup"><span data-stu-id="5d800-931">If `value1` is equal to `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-932">Инструкция `ceq` сравнивает `value1` и `value2`.</span><span class="sxs-lookup"><span data-stu-id="5d800-932">The `ceq` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="5d800-933">Если `value1` равно `value2`, то в стек помещается 1 (типа `int32`).</span><span class="sxs-lookup"><span data-stu-id="5d800-933">If `value1` is equal to `value2`, then 1 (of type `int32`) is pushed on the stack.</span></span> <span data-ttu-id="5d800-934">В противном случае в стек помещается значение 0 (типа `int32`).</span><span class="sxs-lookup"><span data-stu-id="5d800-934">Otherwise 0 (of type `int32`) is pushed on the stack.</span></span>  
  
 <span data-ttu-id="5d800-935">Для числа с плавающей запятой `ceq` возвращает 0, если числа не упорядочены (или оба имеют значение NaN).</span><span class="sxs-lookup"><span data-stu-id="5d800-935">For floating-point number, `ceq` will return 0 if the numbers are unordered (either or both are NaN).</span></span> <span data-ttu-id="5d800-936">Бесконечные значения равны самому себе.</span><span class="sxs-lookup"><span data-stu-id="5d800-936">The infinite values are equal to themselves.</span></span>  
  
 <span data-ttu-id="5d800-937">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ceq`:</span><span class="sxs-lookup"><span data-stu-id="5d800-937">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ceq` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-938">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-938">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cgt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cgt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cgt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cgt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cgt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cgt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cgt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cgt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-939">Сравнивает два значения.</span><span class="sxs-lookup"><span data-stu-id="5d800-939">Compares two values.</span></span> <span data-ttu-id="5d800-940">Если первое значение больше второго, целочисленное значение 1 (<see langword="(int32" />) помещается в стек вычислений; в противном случае в стек вычислений помещается 0 (<see langword="int32" />).</span><span class="sxs-lookup"><span data-stu-id="5d800-940">If the first value is greater than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-941">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-941">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-942">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-942">Format</span></span>|<span data-ttu-id="5d800-943">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-943">Assembly Format</span></span>|<span data-ttu-id="5d800-944">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-944">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-945">FE 02</span><span class="sxs-lookup"><span data-stu-id="5d800-945">FE 02</span></span>|<span data-ttu-id="5d800-946">кгт</span><span class="sxs-lookup"><span data-stu-id="5d800-946">cgt</span></span>|<span data-ttu-id="5d800-947">Отправляет 1, если `value1` больше `value2`; в противном случае отправляет 0.</span><span class="sxs-lookup"><span data-stu-id="5d800-947">Pushes 1 if `value1` is greater than `value2`; else pushes 0.</span></span>|  
  
 <span data-ttu-id="5d800-948">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-948">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-949">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-949">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-950">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-950">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-951">`value2` и `value1` извлекаются из стека; `cgt` тесты, если `value1` больше, чем `value2`.</span><span class="sxs-lookup"><span data-stu-id="5d800-951">`value2` and `value1` are popped from the stack; `cgt` tests if `value1` is greater than `value2`.</span></span>  
  
4.  <span data-ttu-id="5d800-952">Если `value1` больше `value2`, 1 помещается в стек; в противном случае в стек помещается значение 0.</span><span class="sxs-lookup"><span data-stu-id="5d800-952">If `value1` is greater than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-953">Инструкция `cgt` сравнивает `value1` и `value2`.</span><span class="sxs-lookup"><span data-stu-id="5d800-953">The `cgt` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="5d800-954">Если `value1` строго больше `value2`, то в стек помещается значение `int32`, равное 1.</span><span class="sxs-lookup"><span data-stu-id="5d800-954">If `value1` is strictly greater than `value2`, then an `int32` value of 1 is pushed on the stack.</span></span> <span data-ttu-id="5d800-955">В противном случае в стек помещается значение `int32`, равное 0.</span><span class="sxs-lookup"><span data-stu-id="5d800-955">Otherwise, an `int32` value of 0 is pushed on the stack.</span></span>  
  
-   <span data-ttu-id="5d800-956">Для чисел с плавающей запятой `cgt` возвращает 0, если числа не упорядочены (то есть если один или оба аргумента имеют значение NaN).</span><span class="sxs-lookup"><span data-stu-id="5d800-956">For floating-point numbers, `cgt` returns 0 if the numbers are unordered (that is, if one or both of the arguments are NaN).</span></span>  
  
 <span data-ttu-id="5d800-957">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `cgt`:</span><span class="sxs-lookup"><span data-stu-id="5d800-957">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cgt` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-958">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-958">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cgt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cgt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cgt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cgt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cgt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cgt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cgt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cgt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-959">Сравнивает два значения без знака или два неупорядоченных значения.</span><span class="sxs-lookup"><span data-stu-id="5d800-959">Compares two unsigned or unordered values.</span></span> <span data-ttu-id="5d800-960">Если первое значение больше второго, целочисленное значение 1 (<see langword="(int32" />) помещается в стек вычислений; в противном случае в стек вычислений помещается 0 (<see langword="int32" />).</span><span class="sxs-lookup"><span data-stu-id="5d800-960">If the first value is greater than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-961">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-961">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-962">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-962">Format</span></span>|<span data-ttu-id="5d800-963">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-963">Assembly Format</span></span>|<span data-ttu-id="5d800-964">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-964">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-965">FE 03</span><span class="sxs-lookup"><span data-stu-id="5d800-965">FE 03</span></span>|<span data-ttu-id="5d800-966">КГТ. un</span><span class="sxs-lookup"><span data-stu-id="5d800-966">cgt.un</span></span>|<span data-ttu-id="5d800-967">Отправляет 1, если `value1` больше `value2`; в противном случае push-уведомления 0 (неподписанные значения).</span><span class="sxs-lookup"><span data-stu-id="5d800-967">Pushes 1 if `value1` is greater than `value2`; else pushes 0 (unsigned values).</span></span>|  
  
 <span data-ttu-id="5d800-968">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-968">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-969">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-969">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-970">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-970">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-971">`value2` и `value1` извлекаются из стека; `cgt.un` тесты, если `value1` больше, чем `value2`.</span><span class="sxs-lookup"><span data-stu-id="5d800-971">`value2` and `value1` are popped from the stack; `cgt.un` tests if `value1` is greater than `value2`.</span></span>  
  
4.  <span data-ttu-id="5d800-972">Если `value1` больше `value2`, 1 помещается в стек; в противном случае в стек помещается значение 0.</span><span class="sxs-lookup"><span data-stu-id="5d800-972">If `value1` is greater than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-973">Значение `int32`, равное 1, помещается в стек, если любой из следующих `true`:</span><span class="sxs-lookup"><span data-stu-id="5d800-973">An `int32` value of 1 is pushed on the stack if any of the following is `true` :</span></span>  
  
 <span data-ttu-id="5d800-974">Для чисел с плавающей запятой `value1` не упорядочивается по отношению к `value2`.</span><span class="sxs-lookup"><span data-stu-id="5d800-974">For floating-point numbers, `value1` is not ordered with respect to `value2`.</span></span>  
  
 <span data-ttu-id="5d800-975">Для целочисленных значений `value1` строго больше `value2`, если они считаются неподписанными числами.</span><span class="sxs-lookup"><span data-stu-id="5d800-975">For integer values, `value1` is strictly greater than `value2` when considered as unsigned numbers.</span></span>  
  
 <span data-ttu-id="5d800-976">В противном случае в стек помещается значение `int32`, равное 0.</span><span class="sxs-lookup"><span data-stu-id="5d800-976">Otherwise an `int32` value of 0 is pushed on the stack.</span></span>  
  
 <span data-ttu-id="5d800-977">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `cgt.un`:</span><span class="sxs-lookup"><span data-stu-id="5d800-977">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cgt.un` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-978">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-978">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ckfinite">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ckfinite;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ckfinite" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ckfinite" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ckfinite As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ckfinite;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ckfinite : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ckfinite" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-979">Создает исключение <see cref="T:System.ArithmeticException" />, если значение не является конечным числом.</span><span class="sxs-lookup"><span data-stu-id="5d800-979">Throws <see cref="T:System.ArithmeticException" /> if value is not a finite number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-980">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-980">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-981">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-981">Format</span></span>|<span data-ttu-id="5d800-982">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-982">Assembly Format</span></span>|<span data-ttu-id="5d800-983">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-983">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-984">C3</span><span class="sxs-lookup"><span data-stu-id="5d800-984">C3</span></span>|<span data-ttu-id="5d800-985">ккфините</span><span class="sxs-lookup"><span data-stu-id="5d800-985">ckfinite</span></span>|<span data-ttu-id="5d800-986">Вызовите <xref:System.ArithmeticException>, если значение не является конечным числом.</span><span class="sxs-lookup"><span data-stu-id="5d800-986">throw <xref:System.ArithmeticException> if value is not a finite number.</span></span>|  
  
 <span data-ttu-id="5d800-987">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-987">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-988">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-988">`value` is pushed onto the stack.</span></span> 
  
2.  <span data-ttu-id="5d800-989">`value` извлекается из стека и выполняется инструкция `ckfinite`.</span><span class="sxs-lookup"><span data-stu-id="5d800-989">`value` is popped from the stack and the `ckfinite` instruction is performed on it.</span></span>  
  
3.  <span data-ttu-id="5d800-990">`value` помещается обратно в стек, если исключение не создается.</span><span class="sxs-lookup"><span data-stu-id="5d800-990">`value` is pushed back onto the stack if no exception is thrown.</span></span>  
  
 <span data-ttu-id="5d800-991">@No__t-0 вызывает <xref:System.ArithmeticException>, если `value` (число с плавающей запятой) является либо значением "не число" (NaN), либо значением `+-` бесконечности.</span><span class="sxs-lookup"><span data-stu-id="5d800-991">The `ckfinite instruction` throws <xref:System.ArithmeticException> if `value` (a floating-point number) is either a "not a number" value (NaN) or a `+-` infinity value.</span></span> <span data-ttu-id="5d800-992">`Ckfinite` оставляет значение в стеке, если исключение не создается.</span><span class="sxs-lookup"><span data-stu-id="5d800-992">`Ckfinite` leaves the value on the stack if no exception is thrown.</span></span> <span data-ttu-id="5d800-993">Выполнение не указано, если `value` не является числом с плавающей запятой.</span><span class="sxs-lookup"><span data-stu-id="5d800-993">Execution is unspecified if `value` is not a floating-point number.</span></span>  
  
 <span data-ttu-id="5d800-994"><xref:System.ArithmeticException> возникает, если `value` не является нормальным числом.</span><span class="sxs-lookup"><span data-stu-id="5d800-994"><xref:System.ArithmeticException> is thrown if `value` is not a 'normal' number.</span></span>  
  
 <span data-ttu-id="5d800-995">Обратите внимание, что специальное исключение или производный класс <xref:System.ArithmeticException> может быть более подходящим, передавая неверное значение обработчику исключений.</span><span class="sxs-lookup"><span data-stu-id="5d800-995">Note that a special exception or a derived class of <xref:System.ArithmeticException> may be more appropriate, passing the incorrect value to the exception handler.</span></span>  
  
 <span data-ttu-id="5d800-996">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ckfinite`:</span><span class="sxs-lookup"><span data-stu-id="5d800-996">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ckfinite` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-997">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-997">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Clt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Clt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Clt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Clt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Clt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Clt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Clt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-998">Сравнивает два значения.</span><span class="sxs-lookup"><span data-stu-id="5d800-998">Compares two values.</span></span> <span data-ttu-id="5d800-999">Если первое значение меньше второго, целочисленное значение 1 (<see langword="(int32" />) помещается в стек вычислений; в противном случае в стек вычислений помещается 0 (<see langword="int32" />).</span><span class="sxs-lookup"><span data-stu-id="5d800-999">If the first value is less than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1000">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1000">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1001">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1001">Format</span></span>|<span data-ttu-id="5d800-1002">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1002">Assembly Format</span></span>|<span data-ttu-id="5d800-1003">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1003">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1004">FE 04</span><span class="sxs-lookup"><span data-stu-id="5d800-1004">FE 04</span></span>|<span data-ttu-id="5d800-1005">чилийскому</span><span class="sxs-lookup"><span data-stu-id="5d800-1005">clt</span></span>|<span data-ttu-id="5d800-1006">Отправляет 1, если `value1` меньше `value2`; в противном случае отправляет 0.</span><span class="sxs-lookup"><span data-stu-id="5d800-1006">Pushes 1 if `value1` is less than `value2`; else pushes 0.</span></span>|  
  
 <span data-ttu-id="5d800-1007">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1007">The stack transitional behavior, in sequential order, is:</span></span> 

1.  <span data-ttu-id="5d800-1008">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1008">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1009">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1009">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-1010">`value2` и `value1` извлекаются из стека; `clt` тесты, если `value1` меньше `value2`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1010">`value2` and `value1` are popped from the stack; `clt` tests if `value1` is less than `value2`.</span></span>  
  
4.  <span data-ttu-id="5d800-1011">Если `value1` меньше `value2`, 1 помещается в стек; в противном случае в стек помещается значение 0.</span><span class="sxs-lookup"><span data-stu-id="5d800-1011">If `value1` is less than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1012">Инструкция `clt` сравнивает `value1` и `value2`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1012">The `clt` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="5d800-1013">Если `value1` строго меньше `value2`, то в стек помещается значение `int32`, равное 1.</span><span class="sxs-lookup"><span data-stu-id="5d800-1013">If `value1` is strictly less than `value2`, then an `int32` value of 1 is pushed on the stack.</span></span> <span data-ttu-id="5d800-1014">В противном случае в стек помещается значение `int32`, равное 0.</span><span class="sxs-lookup"><span data-stu-id="5d800-1014">Otherwise, an `int32` value of 0 is pushed on the stack.</span></span>  
  
-   <span data-ttu-id="5d800-1015">Для чисел с плавающей запятой `clt` возвращает 0, если числа не упорядочены (то есть если один или оба аргумента имеют значение NaN).</span><span class="sxs-lookup"><span data-stu-id="5d800-1015">For floating-point numbers, `clt` returns 0 if the numbers are unordered (that is, if one or both of the arguments are NaN).</span></span>  
  
 <span data-ttu-id="5d800-1016">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `clt`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1016">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `clt` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1017">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1017">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Clt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Clt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Clt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Clt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Clt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Clt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Clt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1018">Сравнивает два значения без знака или два неупорядоченных значения <paramref name="value1" /> и <paramref name="value2" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-1018">Compares the unsigned or unordered values <paramref name="value1" /> and <paramref name="value2" />.</span></span> <span data-ttu-id="5d800-1019">Если значение <paramref name="value1" /> меньше значения <paramref name="value2" />, целочисленное значение 1 (<see langword="(int32" />) помещается в стек вычислений; в противном случае в стек вычислений помещается 0 (<see langword="int32" />).</span><span class="sxs-lookup"><span data-stu-id="5d800-1019">If <paramref name="value1" /> is less than <paramref name="value2" />, then the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1020">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1020">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1021">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1021">Format</span></span>|<span data-ttu-id="5d800-1022">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1022">Assembly Format</span></span>|<span data-ttu-id="5d800-1023">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1023">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1024">FE 05</span><span class="sxs-lookup"><span data-stu-id="5d800-1024">FE 05</span></span>|<span data-ttu-id="5d800-1025">средство регистрации звонков. un</span><span class="sxs-lookup"><span data-stu-id="5d800-1025">clt.un</span></span>|<span data-ttu-id="5d800-1026">Отправляет 1, если `value1` меньше `value2`; в противном случае push-уведомления 0 (неподписанные значения).</span><span class="sxs-lookup"><span data-stu-id="5d800-1026">Pushes 1 if `value1` is less than `value2`; else pushes 0 (unsigned values).</span></span>|  
  
 <span data-ttu-id="5d800-1027">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1027">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1028">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1028">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1029">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1029">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-1030">`value2` и `value1` извлекаются из стека; `clt.un` тесты, если `value1` меньше `value2`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1030">`value2` and `value1` are popped from the stack; `clt.un` tests if `value1` is less than `value2`.</span></span>  
  
4.  <span data-ttu-id="5d800-1031">Если `value1` меньше `value2`, 1 помещается в стек; в противном случае в стек помещается значение 0.</span><span class="sxs-lookup"><span data-stu-id="5d800-1031">If `value1` is less than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1032">Инструкция `clt.un` сравнивает `value1` и `value2`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1032">The `clt.un` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="5d800-1033">Значение `int32`, равное 1, помещается в стек, если выполняется одно из следующих условий.</span><span class="sxs-lookup"><span data-stu-id="5d800-1033">An `int32` value of 1 is pushed on the stack if any of the following is true:</span></span>  
  
-   <span data-ttu-id="5d800-1034">`value1` строго меньше `value2` (как для `clt`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1034">`value1` is strictly less than `value2` (as for `clt`).</span></span>  
  
-   <span data-ttu-id="5d800-1035">Для чисел с плавающей запятой `value1` не упорядочивается по отношению к `value2`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1035">For floating-point numbers, `value1` is not ordered with respect to `value2`.</span></span>  
  
-   <span data-ttu-id="5d800-1036">Для целочисленных значений `value1` строго меньше `value2`, если считаться числами без знака.</span><span class="sxs-lookup"><span data-stu-id="5d800-1036">For integer values, `value1` is strictly less than `value2` when considered as unsigned numbers.</span></span>  
  
 <span data-ttu-id="5d800-1037">В противном случае в стек помещается значение `int32`, равное 0.</span><span class="sxs-lookup"><span data-stu-id="5d800-1037">Otherwise, an `int32` value of 0 is pushed on the stack.</span></span>  
  
 <span data-ttu-id="5d800-1038">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `clt.un`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1038">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `clt.un` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1039">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1039">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Constrained">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Constrained;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Constrained" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Constrained" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Constrained As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Constrained;" />
      <MemberSignature Language="F#" Value=" staticval mutable Constrained : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Constrained" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1040">Ограничивает тип, для которого был вызван виртуальный метод.</span><span class="sxs-lookup"><span data-stu-id="5d800-1040">Constrains the type on which a virtual method call is made.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1041">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1041">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1042">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1042">Format</span></span>|<span data-ttu-id="5d800-1043">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1043">Assembly Format</span></span>|<span data-ttu-id="5d800-1044">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1044">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1045">FE 16 < `T` @ NO__T-1</span><span class="sxs-lookup"><span data-stu-id="5d800-1045">FE 16 < `T` ></span></span>|<span data-ttu-id="5d800-1046">ограниченного.</span><span class="sxs-lookup"><span data-stu-id="5d800-1046">constrained.</span></span> `thisType`|<span data-ttu-id="5d800-1047">Вызов виртуального метода для типа, ограниченного типом `T`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1047">Call a virtual method on a type constrained to be type `T`.</span></span>|  
  
 <span data-ttu-id="5d800-1048">Префикс `constrained` разрешен только для инструкции `callvirt`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1048">The `constrained` prefix is permitted only on a `callvirt` instruction.</span></span>  
  
 <span data-ttu-id="5d800-1049">В этой точке состояние стека MSIL должно быть следующим:</span><span class="sxs-lookup"><span data-stu-id="5d800-1049">The state of the MSIL stack at this point must be as follows:</span></span>  
  
1.  <span data-ttu-id="5d800-1050">Управляемый указатель, `ptr`, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1050">A managed pointer, `ptr`, is pushed onto the stack.</span></span> <span data-ttu-id="5d800-1051">Тип `ptr` должен быть управляемым указателем (`&`) до `thisType`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1051">The type of `ptr` must be a managed pointer (`&`) to `thisType`.</span></span> <span data-ttu-id="5d800-1052">Обратите внимание, что это отличается от случая непрефиксной инструкции `callvirt`, которая принимает ссылку на `thisType`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1052">Note that this is different from the case of an unprefixed `callvirt` instruction, which expects a reference of `thisType`.</span></span>  
  
2.  <span data-ttu-id="5d800-1053">Аргументы метода @no__t от-0 до `argN` помещаются в стек, так же как и в случае непрефиксной инструкции `callvirt`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1053">Method arguments `arg1` through `argN` are pushed onto the stack, just as with an unprefixed `callvirt` instruction.</span></span>  
  
 <span data-ttu-id="5d800-1054">Префикс `constrained` позволяет делать инструкции `callvirt` единообразно независимо от того, является ли `thisType` типом значения или ссылочным типом.</span><span class="sxs-lookup"><span data-stu-id="5d800-1054">The `constrained` prefix is designed to allow `callvirt` instructions to be made in a uniform way independent of whether `thisType` is a value type or a reference type.</span></span>  
  
 <span data-ttu-id="5d800-1055">Если инструкция `callvirt` `method` предваряется `constrained` `thisType`, инструкция выполняется следующим образом:</span><span class="sxs-lookup"><span data-stu-id="5d800-1055">When a `callvirt` `method` instruction has been prefixed by `constrained` `thisType`, the instruction is executed as follows:</span></span>  
  
-   <span data-ttu-id="5d800-1056">Если `thisType` является ссылочным типом (в отличие от типа значения), `ptr` удаляется из ссылок и передается как указатель this на `callvirt` из `method`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1056">If `thisType` is a reference type (as opposed to a value type) then `ptr` is dereferenced and passed as the 'this' pointer to the `callvirt` of `method`.</span></span>  
  
-   <span data-ttu-id="5d800-1057">Если `thisType` является типом значения и `thisType` реализует `method`, то `ptr` передается без изменений в качестве указателя this на `call` `method` для реализации `method` с `thisType`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1057">If `thisType` is a value type and `thisType` implements `method` then `ptr` is passed unmodified as the 'this' pointer to a `call` `method` instruction, for the implementation of `method` by `thisType`.</span></span>  
  
-   <span data-ttu-id="5d800-1058">Если `thisType` является типом значения, а `thisType` не реализует `method`, то `ptr` отменяется, упаковывается и передается как указатель this в инструкцию `callvirt` `method`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1058">If `thisType` is a value type and `thisType` does not implement `method` then `ptr` is dereferenced, boxed, and passed as the 'this' pointer to the `callvirt` `method` instruction.</span></span>  
  
 <span data-ttu-id="5d800-1059">Последний случай может возникнуть, только если `method` был определен в <xref:System.Object>, <xref:System.ValueType> или <xref:System.Enum> и не переопределен `thisType`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1059">This last case can occur only when `method` was defined on <xref:System.Object>, <xref:System.ValueType>, or <xref:System.Enum> and not overridden by `thisType`.</span></span> <span data-ttu-id="5d800-1060">В этом случае упаковка создает копию исходного объекта.</span><span class="sxs-lookup"><span data-stu-id="5d800-1060">In this case, the boxing causes a copy of the original object to be made.</span></span> <span data-ttu-id="5d800-1061">Однако, поскольку ни один из методов <xref:System.Object>, <xref:System.ValueType> и <xref:System.Enum> изменяет состояние объекта, этот факт не может быть обнаружен.</span><span class="sxs-lookup"><span data-stu-id="5d800-1061">However, because none of the methods of <xref:System.Object>, <xref:System.ValueType>, and <xref:System.Enum> modify the state of the object, this fact cannot be detected.</span></span>  
  
 <span data-ttu-id="5d800-1062">Префикс `constrained` поддерживает генераторы IL, которые создают универсальный код.</span><span class="sxs-lookup"><span data-stu-id="5d800-1062">The `constrained` prefix supports IL generators that create generic code.</span></span> <span data-ttu-id="5d800-1063">Обычно инструкция `callvirt` недопустима для типов значений.</span><span class="sxs-lookup"><span data-stu-id="5d800-1063">Normally the `callvirt` instruction is not valid on value types.</span></span> <span data-ttu-id="5d800-1064">Вместо этого необходимо, чтобы компиляторы IL эффективно выполняли преобразование «this», описанное выше во время компиляции, в зависимости от типа `ptr` и вызываемого метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-1064">Instead it is required that IL compilers effectively perform the 'this' transformation outlined above at compile time, depending on the type of `ptr` and the method being called.</span></span> <span data-ttu-id="5d800-1065">Однако если `ptr` является универсальным типом, неизвестным во время компиляции, это преобразование невозможно выполнить во время компиляции.</span><span class="sxs-lookup"><span data-stu-id="5d800-1065">However, when `ptr` is a generic type that is unknown at compile time, it is not possible to make this transformation at compile time.</span></span>  
  
 <span data-ttu-id="5d800-1066">Код операции `constrained` позволяет компиляторам IL выполнять вызов виртуальной функции единообразно независимо от того, является ли `ptr` типом значения или ссылочным типом.</span><span class="sxs-lookup"><span data-stu-id="5d800-1066">The `constrained` opcode allows IL compilers to make a call to a virtual function in a uniform way independent of whether `ptr` is a value type or a reference type.</span></span> <span data-ttu-id="5d800-1067">Хотя он предназначен для случая, когда `thisType` является переменной универсального типа, префикс `constrained` также работает для неуниверсальных типов и может уменьшить сложность создания виртуальных вызовов в языках, которые скрывают различие между типами значений и ссылками. типов.</span><span class="sxs-lookup"><span data-stu-id="5d800-1067">Although it is intended for the case where `thisType` is a generic type variable, the `constrained` prefix also works for nongeneric types and can reduce the complexity of generating virtual calls in languages that hide the distinction between value types and reference types.</span></span>  
  
 <span data-ttu-id="5d800-1068">Использование префикса `constrained` также позволяет избежать потенциальных проблем с управлением версиями с типами значений.</span><span class="sxs-lookup"><span data-stu-id="5d800-1068">Using the `constrained` prefix also avoids potential versioning problems with value types.</span></span> <span data-ttu-id="5d800-1069">Если префикс `constrained` не используется, должен выдаваться другой IL в зависимости от того, переопределяет ли тип значения метод System. Object.</span><span class="sxs-lookup"><span data-stu-id="5d800-1069">If the `constrained` prefix is not used, different IL must be emitted depending on whether or not a value type overrides a method of System.Object.</span></span> <span data-ttu-id="5d800-1070">Например, если тип значения `V` переопределяет метод Object. ToString (), то создается инструкция `call` `V.ToString()`. в противном случае выдается инструкция `box` и инструкция `callvirt` `Object.ToString()`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1070">For example, if a value type `V` overrides the Object.ToString() method, a `call` `V.ToString()` instruction is emitted; if it does not, a `box` instruction and a `callvirt` `Object.ToString()` instruction are emitted.</span></span> <span data-ttu-id="5d800-1071">Проблема управления версиями может возникнуть в первом случае, если переопределение позже удаляется, и в последнем случае, если переопределение добавляется позже.</span><span class="sxs-lookup"><span data-stu-id="5d800-1071">A versioning problem can arise in the former case if the override is later removed, and in the latter case if an override is later added.</span></span>  
  
 <span data-ttu-id="5d800-1072">Префикс `constrained` также можно использовать для вызова методов интерфейса для типов значений, так как метод типа значения, реализующий метод интерфейса, можно изменить с помощью `MethodImpl`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1072">The `constrained` prefix can also be used for invocation of interface methods on value types, because the value type method implementing the interface method can be changed using a `MethodImpl`.</span></span> <span data-ttu-id="5d800-1073">Если префикс `constrained` не используется, компилятор принудительно выбирает, к какому из методов типа значения следует выполнить привязку во время компиляции.</span><span class="sxs-lookup"><span data-stu-id="5d800-1073">If the `constrained` prefix is not used, the compiler is forced to choose which of the value type's methods to bind to at compile time.</span></span> <span data-ttu-id="5d800-1074">Использование префикса `constrained` позволяет выполнить привязку MSIL к методу, реализующему метод интерфейса, во время выполнения, а не во время компиляции.</span><span class="sxs-lookup"><span data-stu-id="5d800-1074">Using the `constrained` prefix allows the MSIL to bind to the method that implements the interface method at run time, rather than at compile time.</span></span>  
  
 <span data-ttu-id="5d800-1075">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `constrained`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1075">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `constrained` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1076">ILGenerator. Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="5d800-1076">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1077">Преобразует верхнее значение в стеке вычислений в тип <see langword="native int" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-1077">Converts the value on top of the evaluation stack to <see langword="native int" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1078">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1078">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1079">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1079">Format</span></span>|<span data-ttu-id="5d800-1080">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1080">Assembly Format</span></span>|<span data-ttu-id="5d800-1081">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1081">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1082">D3</span><span class="sxs-lookup"><span data-stu-id="5d800-1082">D3</span></span>|<span data-ttu-id="5d800-1083">Кредит i</span><span class="sxs-lookup"><span data-stu-id="5d800-1083">conv.i</span></span>|<span data-ttu-id="5d800-1084">Преобразует в `native int`, отправляя `native int` в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1084">Convert to `native int`, pushing `native int` on stack.</span></span>|  
  
 <span data-ttu-id="5d800-1085">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1085">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1086">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1086">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1087">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1087">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="5d800-1088">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1088">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1089">Код операции `conv.i` преобразует `value` поверх стека в тип, указанный в коде операции, и оставляет это преобразованное значение в верхней части стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1089">The `conv.i` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1090">Целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используется `conv.i` или `conv.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1090">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="5d800-1091">Значения с плавающей запятой преобразуются в тип `F`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1091">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="5d800-1092">Преобразование чисел с плавающей запятой в целые значения Усекает число до нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1092">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="5d800-1093">При преобразовании из `float64` в `float32` точность может быть потеряна.</span><span class="sxs-lookup"><span data-stu-id="5d800-1093">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="5d800-1094">Если значение `value` слишком велико для `float32 (F)`, положительная бесконечность (если `value` является положительным) или отрицательная бесконечность (если `value` является отрицательным).</span><span class="sxs-lookup"><span data-stu-id="5d800-1094">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="5d800-1095">Если переполнение происходит при преобразовании одного целочисленного типа в другой, биты высокого порядка усекаются.</span><span class="sxs-lookup"><span data-stu-id="5d800-1095">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="5d800-1096">Если результат меньше, чем `int32`, для заполнения слота используется значение, расширенное знаком.</span><span class="sxs-lookup"><span data-stu-id="5d800-1096">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="5d800-1097">Если происходит переполнение при преобразовании типа с плавающей запятой в целое число, возвращаемое значение не определено.</span><span class="sxs-lookup"><span data-stu-id="5d800-1097">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="5d800-1098">При использовании этого поля исключения никогда не возникают.</span><span class="sxs-lookup"><span data-stu-id="5d800-1098">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="5d800-1099">Эквивалентные инструкции, которые вызовут исключение, если тип результата не может правильно представить результирующее значение, см. в разделе <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> и <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un>.</span><span class="sxs-lookup"><span data-stu-id="5d800-1099">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="5d800-1100">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.i`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1100">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1101">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1101">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1102">Преобразует верхнее значение в стеке вычислений в <see langword="int8" />, а затем расширяет его до <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-1102">Converts the value on top of the evaluation stack to <see langword="int8" />, then extends (pads) it to <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1103">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1103">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1104">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1104">Format</span></span>|<span data-ttu-id="5d800-1105">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1105">Assembly Format</span></span>|<span data-ttu-id="5d800-1106">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1106">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1107">67</span><span class="sxs-lookup"><span data-stu-id="5d800-1107">67</span></span>|<span data-ttu-id="5d800-1108">с кредитом. i1</span><span class="sxs-lookup"><span data-stu-id="5d800-1108">conv.i1</span></span>|<span data-ttu-id="5d800-1109">Преобразует в `int8`, отправляя `int32` в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1109">Convert to `int8`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="5d800-1110">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1110">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1111">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1111">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1112">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1112">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="5d800-1113">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1113">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1114">Код операции `conv.i1` преобразует `value` поверх стека в тип, указанный в коде операции, и оставляет это преобразованное значение в верхней части стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1114">The `conv.i1` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1115">Целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используется `conv.i` или `conv.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1115">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="5d800-1116">Значения с плавающей запятой преобразуются в тип `F`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1116">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="5d800-1117">Преобразование чисел с плавающей запятой в целые значения Усекает число до нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1117">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="5d800-1118">При преобразовании из `float64` в `float32` точность может быть потеряна.</span><span class="sxs-lookup"><span data-stu-id="5d800-1118">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="5d800-1119">Если значение `value` слишком велико для `float32 (F)`, положительная бесконечность (если `value` является положительным) или отрицательная бесконечность (если `value` является отрицательным).</span><span class="sxs-lookup"><span data-stu-id="5d800-1119">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="5d800-1120">Если переполнение происходит при преобразовании одного целочисленного типа в другой, биты высокого порядка усекаются.</span><span class="sxs-lookup"><span data-stu-id="5d800-1120">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="5d800-1121">Если результат меньше, чем `int32`, для заполнения слота используется значение, расширенное знаком.</span><span class="sxs-lookup"><span data-stu-id="5d800-1121">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="5d800-1122">Если происходит переполнение при преобразовании типа с плавающей запятой в целое число, возвращаемое значение не определено.</span><span class="sxs-lookup"><span data-stu-id="5d800-1122">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="5d800-1123">При использовании этого поля исключения никогда не возникают.</span><span class="sxs-lookup"><span data-stu-id="5d800-1123">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="5d800-1124">Эквивалентные инструкции, которые вызовут исключение, если тип результата не может правильно представить результирующее значение, см. в разделе <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> и <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un>.</span><span class="sxs-lookup"><span data-stu-id="5d800-1124">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="5d800-1125">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.i1`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1125">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i1` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1126">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1126">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1127">Преобразует верхнее значение в стеке вычислений в <see langword="int16" />, а затем расширяет его до <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-1127">Converts the value on top of the evaluation stack to <see langword="int16" />, then extends (pads) it to <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1128">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1128">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1129">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1129">Format</span></span>|<span data-ttu-id="5d800-1130">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1130">Assembly Format</span></span>|<span data-ttu-id="5d800-1131">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1131">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1132">68</span><span class="sxs-lookup"><span data-stu-id="5d800-1132">68</span></span>|<span data-ttu-id="5d800-1133">Кредитный I2</span><span class="sxs-lookup"><span data-stu-id="5d800-1133">conv.i2</span></span>|<span data-ttu-id="5d800-1134">Преобразует в `int16`, отправляя `int32` в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1134">Convert to `int16`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="5d800-1135">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1135">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1136">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1136">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1137">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1137">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="5d800-1138">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1138">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1139">Код операции `conv.i2` преобразует `value` поверх стека в тип, указанный в коде операции, и оставляет это преобразованное значение в верхней части стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1139">The `conv.i2` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1140">Целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используется `conv.i` или `conv.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1140">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="5d800-1141">Значения с плавающей запятой преобразуются в тип `F`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1141">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="5d800-1142">Преобразование чисел с плавающей запятой в целые значения Усекает число до нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1142">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="5d800-1143">При преобразовании из `float64` в `float32` точность может быть потеряна.</span><span class="sxs-lookup"><span data-stu-id="5d800-1143">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="5d800-1144">Если значение `value` слишком велико для `float32 (F)`, положительная бесконечность (если `value` является положительным) или отрицательная бесконечность (если `value` является отрицательным).</span><span class="sxs-lookup"><span data-stu-id="5d800-1144">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="5d800-1145">Если переполнение происходит при преобразовании одного целочисленного типа в другой, биты высокого порядка усекаются.</span><span class="sxs-lookup"><span data-stu-id="5d800-1145">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="5d800-1146">Если результат меньше, чем `int32`, для заполнения слота используется значение, расширенное знаком.</span><span class="sxs-lookup"><span data-stu-id="5d800-1146">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="5d800-1147">Если происходит переполнение при преобразовании типа с плавающей запятой в целое число, возвращаемое значение не определено.</span><span class="sxs-lookup"><span data-stu-id="5d800-1147">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="5d800-1148">При использовании этого поля исключения никогда не возникают.</span><span class="sxs-lookup"><span data-stu-id="5d800-1148">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="5d800-1149">Эквивалентные инструкции, которые вызовут исключение, если тип результата не может правильно представить результирующее значение, см. в разделе <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> и <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un>.</span><span class="sxs-lookup"><span data-stu-id="5d800-1149">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="5d800-1150">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.i2`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1150">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i2` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1151">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1151">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1152">Преобразует верхнее значение в стеке вычислений в тип <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-1152">Converts the value on top of the evaluation stack to <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1153">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1153">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1154">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1154">Format</span></span>|<span data-ttu-id="5d800-1155">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1155">Assembly Format</span></span>|<span data-ttu-id="5d800-1156">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1156">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1157">69</span><span class="sxs-lookup"><span data-stu-id="5d800-1157">69</span></span>|<span data-ttu-id="5d800-1158">с просчетом. i4</span><span class="sxs-lookup"><span data-stu-id="5d800-1158">conv.i4</span></span>|<span data-ttu-id="5d800-1159">Преобразует в `int32`, отправляя `int32` в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1159">Convert to `int32`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="5d800-1160">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1160">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1161">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1161">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1162">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1162">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="5d800-1163">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1163">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1164">Код операции `conv.i4` преобразует `value` поверх стека в тип, указанный в коде операции, и оставляет это преобразованное значение в верхней части стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1164">The `conv.i4` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1165">Целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используется `conv.i` или `conv.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1165">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="5d800-1166">Значения с плавающей запятой преобразуются в тип `F`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1166">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="5d800-1167">Преобразование чисел с плавающей запятой в целые значения Усекает число до нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1167">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="5d800-1168">При преобразовании из `float64` в `float32` точность может быть потеряна.</span><span class="sxs-lookup"><span data-stu-id="5d800-1168">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="5d800-1169">Если значение `value` слишком велико для `float32 (F)`, положительная бесконечность (если `value` является положительным) или отрицательная бесконечность (если `value` является отрицательным).</span><span class="sxs-lookup"><span data-stu-id="5d800-1169">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="5d800-1170">Если переполнение происходит при преобразовании одного целочисленного типа в другой, биты высокого порядка усекаются.</span><span class="sxs-lookup"><span data-stu-id="5d800-1170">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="5d800-1171">Если результат меньше, чем `int32`, для заполнения слота используется значение, расширенное знаком.</span><span class="sxs-lookup"><span data-stu-id="5d800-1171">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="5d800-1172">Если происходит переполнение при преобразовании типа с плавающей запятой в целое число, возвращаемое значение не определено.</span><span class="sxs-lookup"><span data-stu-id="5d800-1172">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="5d800-1173">При использовании этого поля исключения никогда не возникают.</span><span class="sxs-lookup"><span data-stu-id="5d800-1173">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="5d800-1174">Эквивалентные инструкции, которые вызовут исключение, если тип результата не может правильно представить результирующее значение, см. в разделе <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> и <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un>.</span><span class="sxs-lookup"><span data-stu-id="5d800-1174">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="5d800-1175">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.i4`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1175">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i4` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1176">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1176">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1177">Преобразует верхнее значение в стеке вычислений в тип <see langword="int64" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-1177">Converts the value on top of the evaluation stack to <see langword="int64" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1178">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1178">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1179">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1179">Format</span></span>|<span data-ttu-id="5d800-1180">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1180">Assembly Format</span></span>|<span data-ttu-id="5d800-1181">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1181">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1182">6A</span><span class="sxs-lookup"><span data-stu-id="5d800-1182">6A</span></span>|<span data-ttu-id="5d800-1183">заменяющий i8</span><span class="sxs-lookup"><span data-stu-id="5d800-1183">conv.i8</span></span>|<span data-ttu-id="5d800-1184">Преобразует в `int64`, отправляя `int64` в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1184">Convert to `int64`, pushing `int64` on stack.</span></span>|  
  
 <span data-ttu-id="5d800-1185">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1185">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1186">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1186">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1187">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1187">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="5d800-1188">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1188">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1189">Код операции `conv.i8` преобразует `value` поверх стека в тип, указанный в коде операции, и оставляет это преобразованное значение в верхней части стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1189">The `conv.i8` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1190">Целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используется `conv.i` или `conv.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1190">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="5d800-1191">Значения с плавающей запятой преобразуются в тип `F`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1191">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="5d800-1192">Преобразование чисел с плавающей запятой в целые значения Усекает число до нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1192">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="5d800-1193">При преобразовании из `float64` в `float32` точность может быть потеряна.</span><span class="sxs-lookup"><span data-stu-id="5d800-1193">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="5d800-1194">Если значение `value` слишком велико для `float32 (F)`, положительная бесконечность (если `value` является положительным) или отрицательная бесконечность (если `value` является отрицательным).</span><span class="sxs-lookup"><span data-stu-id="5d800-1194">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="5d800-1195">Если переполнение происходит при преобразовании одного целочисленного типа в другой, биты высокого порядка усекаются.</span><span class="sxs-lookup"><span data-stu-id="5d800-1195">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="5d800-1196">Если результат меньше, чем `int32`, для заполнения слота используется значение, расширенное знаком.</span><span class="sxs-lookup"><span data-stu-id="5d800-1196">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="5d800-1197">Если происходит переполнение при преобразовании типа с плавающей запятой в целое число, возвращаемое значение не определено.</span><span class="sxs-lookup"><span data-stu-id="5d800-1197">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="5d800-1198">При использовании этого поля исключения никогда не возникают.</span><span class="sxs-lookup"><span data-stu-id="5d800-1198">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="5d800-1199">Эквивалентные инструкции, которые вызовут исключение, если тип результата не может правильно представить результирующее значение, см. в разделе <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> и <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un>.</span><span class="sxs-lookup"><span data-stu-id="5d800-1199">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="5d800-1200">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.i8`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1200">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i8` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1201">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1201">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1202">Преобразует значение со знаком на вершине стека вычислений в значение <see langword="native int" /> со знаком и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1202">Converts the signed value on top of the evaluation stack to signed <see langword="native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1203">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1203">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1204">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1204">Format</span></span>|<span data-ttu-id="5d800-1205">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1205">Assembly Format</span></span>|<span data-ttu-id="5d800-1206">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1206">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1207">D4</span><span class="sxs-lookup"><span data-stu-id="5d800-1207">D4</span></span>|<span data-ttu-id="5d800-1208">ovf. i</span><span class="sxs-lookup"><span data-stu-id="5d800-1208">conv.ovf.i</span></span>|<span data-ttu-id="5d800-1209">Преобразует в `native int` (в стеке как `native int`) и создает исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1209">Convert to a `native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5d800-1210">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1210">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1211">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1211">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1212">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1212">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5d800-1213">Если возникает переполнение, возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1213">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5d800-1214">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1214">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1215">Код операции `conv.ovf.i` преобразует `value` поверх стека в тип, указанный в коде операции, и помещает это преобразованное значение в начало стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1215">The `conv.ovf.i` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1216">Если значение слишком велико или слишком мало для представления целевым типом, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1216">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5d800-1217">Преобразования чисел с плавающей запятой в целые значения сокращают число в сторону нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1217">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5d800-1218">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используются `conv.ovf.i` или `conv.ovf.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1218">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5d800-1219"><xref:System.OverflowException> создается, если результат не может быть представлен типом результата.</span><span class="sxs-lookup"><span data-stu-id="5d800-1219"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5d800-1220">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.ovf.i`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1220">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1221">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1221">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1222">Преобразует значение без знака на вершине стека вычислений в значение <see langword="native int" /> со знаком и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1222">Converts the unsigned value on top of the evaluation stack to signed <see langword="native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1223">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1223">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1224">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1224">Format</span></span>|<span data-ttu-id="5d800-1225">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1225">Assembly Format</span></span>|<span data-ttu-id="5d800-1226">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1226">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1227">8A</span><span class="sxs-lookup"><span data-stu-id="5d800-1227">8A</span></span>|<span data-ttu-id="5d800-1228">проovf. i. un</span><span class="sxs-lookup"><span data-stu-id="5d800-1228">conv.ovf.i.un</span></span>|<span data-ttu-id="5d800-1229">Преобразует значение без знака в `native int` (в стеке как `native int`) и создает исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1229">Converts an unsigned value to a `native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5d800-1230">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1230">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1231">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1231">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1232">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1232">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5d800-1233">Если возникает переполнение, возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1233">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5d800-1234">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1234">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1235">Код операции `conv.ovf.i.un` преобразует `value` поверх стека в тип, указанный в коде операции, и помещает это преобразованное значение в начало стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1235">The `conv.ovf.i.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1236">Если значение слишком велико или слишком мало для представления целевым типом, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1236">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5d800-1237">Преобразования чисел с плавающей запятой в целые значения сокращают число в сторону нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1237">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5d800-1238">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используются `conv.ovf.i` или `conv.ovf.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1238">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5d800-1239"><xref:System.OverflowException> создается, если результат не может быть представлен типом результата.</span><span class="sxs-lookup"><span data-stu-id="5d800-1239"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5d800-1240">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.ovf.i.un`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1240">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i.un` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1241">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1241">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1242">Преобразует значение со знаком на вершине стека вычислений в значение <see langword="int8" /> со знаком, расширяет его до <see langword="int32" /> и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1242">Converts the signed value on top of the evaluation stack to signed <see langword="int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1243">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1243">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1244">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1244">Format</span></span>|<span data-ttu-id="5d800-1245">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1245">Assembly Format</span></span>|<span data-ttu-id="5d800-1246">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1246">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1247">B3</span><span class="sxs-lookup"><span data-stu-id="5d800-1247">B3</span></span>|<span data-ttu-id="5d800-1248">ovf. i1</span><span class="sxs-lookup"><span data-stu-id="5d800-1248">conv.ovf.i1</span></span>|<span data-ttu-id="5d800-1249">Преобразование в `int8` (в стеке как `int32`) и вызовет исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1249">Convert to an `int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5d800-1250">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1250">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1251">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1251">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1252">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1252">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5d800-1253">Если возникает переполнение, возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1253">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5d800-1254">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1254">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1255">Код операции `conv.ovf.i1` преобразует `value` поверх стека в тип, указанный в коде операции, и помещает это преобразованное значение в начало стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1255">The `conv.ovf.i1` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1256">Если значение слишком велико или слишком мало для представления целевым типом, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1256">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5d800-1257">Преобразования чисел с плавающей запятой в целые значения сокращают число в сторону нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1257">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5d800-1258">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используются `conv.ovf.i` или `conv.ovf.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1258">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5d800-1259"><xref:System.OverflowException> создается, если результат не может быть представлен типом результата.</span><span class="sxs-lookup"><span data-stu-id="5d800-1259"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5d800-1260">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.ovf.i1`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1260">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i1` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1261">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1261">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I1_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I1_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I1_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I1_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I1_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I1_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1262">Преобразует значение без знака на вершине стека вычислений в значение <see langword="int8" /> со знаком, расширяет его до <see langword="int32" /> и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1262">Converts the unsigned value on top of the evaluation stack to signed <see langword="int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1263">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1263">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1264">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1264">Format</span></span>|<span data-ttu-id="5d800-1265">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1265">Assembly Format</span></span>|<span data-ttu-id="5d800-1266">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1266">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1267">82</span><span class="sxs-lookup"><span data-stu-id="5d800-1267">82</span></span>|<span data-ttu-id="5d800-1268">ovf. i1. un</span><span class="sxs-lookup"><span data-stu-id="5d800-1268">conv.ovf.i1.un</span></span>|<span data-ttu-id="5d800-1269">Преобразует значение без знака в `int8` (в стеке как `int32`) и создает исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1269">Converts an unsigned value to an `int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5d800-1270">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1270">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1271">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1271">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1272">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1272">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5d800-1273">Если возникает переполнение, возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1273">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5d800-1274">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1274">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1275">Код операции `conv.ovf.i1.un` преобразует `value` поверх стека в тип, указанный в коде операции, и помещает это преобразованное значение в начало стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1275">The `conv.ovf.i1.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1276">Если значение слишком велико или слишком мало для представления целевым типом, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1276">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5d800-1277">Преобразования чисел с плавающей запятой в целые значения сокращают число в сторону нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1277">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5d800-1278">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используются `conv.ovf.i` или `conv.ovf.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1278">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5d800-1279"><xref:System.OverflowException> создается, если результат не может быть представлен типом результата.</span><span class="sxs-lookup"><span data-stu-id="5d800-1279"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5d800-1280">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.ovf.i1.un`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1280">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i1.un` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1281">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1281">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1282">Преобразует значение со знаком на вершине стека вычислений в значение <see langword="int16" /> со знаком, расширяет его до <see langword="int32" /> и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1282">Converts the signed value on top of the evaluation stack to signed <see langword="int16" /> and extending it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1283">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1283">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1284">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1284">Format</span></span>|<span data-ttu-id="5d800-1285">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1285">Assembly Format</span></span>|<span data-ttu-id="5d800-1286">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1286">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1287">B5</span><span class="sxs-lookup"><span data-stu-id="5d800-1287">B5</span></span>|<span data-ttu-id="5d800-1288">ovf. i2</span><span class="sxs-lookup"><span data-stu-id="5d800-1288">conv.ovf.i2</span></span>|<span data-ttu-id="5d800-1289">Преобразование в `int16` (в стеке как `int32`) и вызовет исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1289">Convert to an `int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5d800-1290">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1290">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1291">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1291">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1292">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1292">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5d800-1293">Если возникает переполнение, возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1293">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5d800-1294">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1294">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1295">Код операции `conv.ovf.i2` преобразует `value` поверх стека в тип, указанный в коде операции, и помещает это преобразованное значение в начало стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1295">The `conv.ovf.i2` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1296">Если значение слишком велико или слишком мало для представления целевым типом, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1296">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5d800-1297">Преобразования чисел с плавающей запятой в целые значения сокращают число в сторону нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1297">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5d800-1298">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используются `conv.ovf.i` или `conv.ovf.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1298">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5d800-1299"><xref:System.OverflowException> создается, если результат не может быть представлен типом результата.</span><span class="sxs-lookup"><span data-stu-id="5d800-1299"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5d800-1300">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.ovf.i2`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1300">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i2` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1301">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1301">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I2_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I2_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I2_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I2_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I2_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I2_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1302">Преобразует значение без знака на вершине стека вычислений в значение <see langword="int16" /> со знаком, расширяет его до <see langword="int32" /> и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1302">Converts the unsigned value on top of the evaluation stack to signed <see langword="int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1303">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1303">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1304">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1304">Format</span></span>|<span data-ttu-id="5d800-1305">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1305">Assembly Format</span></span>|<span data-ttu-id="5d800-1306">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1306">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1307">83</span><span class="sxs-lookup"><span data-stu-id="5d800-1307">83</span></span>|<span data-ttu-id="5d800-1308">ovf. i2. un</span><span class="sxs-lookup"><span data-stu-id="5d800-1308">conv.ovf.i2.un</span></span>|<span data-ttu-id="5d800-1309">Преобразует значение без знака в `int16` (в стеке как `int32`) и создает исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1309">Converts an unsigned value to an `int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5d800-1310">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1310">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1311">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1311">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1312">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1312">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5d800-1313">Если возникает переполнение, возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1313">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5d800-1314">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1314">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1315">Код операции `conv.ovf.i2.un` преобразует `value` поверх стека в тип, указанный в коде операции, и помещает это преобразованное значение в начало стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1315">The `conv.ovf.i2.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1316">Если значение слишком велико или слишком мало для представления целевым типом, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1316">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5d800-1317">Преобразования чисел с плавающей запятой в целые значения сокращают число в сторону нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1317">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5d800-1318">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используются `conv.ovf.i` или `conv.ovf.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1318">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5d800-1319"><xref:System.OverflowException> создается, если результат не может быть представлен типом результата.</span><span class="sxs-lookup"><span data-stu-id="5d800-1319"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5d800-1320">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.ovf.i2.un`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1320">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i2.un` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1321">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1321">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1322">Преобразует значение со знаком на вершине стека вычислений в значение <see langword="int32" /> со знаком и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1322">Converts the signed value on top of the evaluation stack to signed <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1323">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1323">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1324">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1324">Format</span></span>|<span data-ttu-id="5d800-1325">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1325">Assembly Format</span></span>|<span data-ttu-id="5d800-1326">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1326">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1327">B7</span><span class="sxs-lookup"><span data-stu-id="5d800-1327">B7</span></span>|<span data-ttu-id="5d800-1328">ovf. i4</span><span class="sxs-lookup"><span data-stu-id="5d800-1328">conv.ovf.i4</span></span>|<span data-ttu-id="5d800-1329">Преобразование в `int32` (в стеке как `int32`) и вызовет исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1329">Convert to an `int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5d800-1330">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1330">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1331">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1331">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1332">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1332">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5d800-1333">Если возникает переполнение, возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1333">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5d800-1334">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1334">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1335">Код операции `conv.ovf.i4` преобразует `value` поверх стека в тип, указанный в коде операции, и помещает это преобразованное значение в начало стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1335">The `conv.ovf.i4` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1336">Если значение слишком велико или слишком мало для представления целевым типом, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1336">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5d800-1337">Преобразования чисел с плавающей запятой в целые значения сокращают число в сторону нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1337">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5d800-1338">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используются `conv.ovf.i` или `conv.ovf.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1338">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5d800-1339"><xref:System.OverflowException> создается, если результат не может быть представлен типом результата.</span><span class="sxs-lookup"><span data-stu-id="5d800-1339"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5d800-1340">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.ovf.i4`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1340">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i4` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1341">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1341">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I4_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I4_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I4_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I4_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I4_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I4_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1342">Преобразует значение без знака на вершине стека вычислений в значение <see langword="int32" /> со знаком и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1342">Converts the unsigned value on top of the evaluation stack to signed <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1343">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1343">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1344">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1344">Format</span></span>|<span data-ttu-id="5d800-1345">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1345">Assembly Format</span></span>|<span data-ttu-id="5d800-1346">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1346">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1347">84</span><span class="sxs-lookup"><span data-stu-id="5d800-1347">84</span></span>|<span data-ttu-id="5d800-1348">ovf. i4. un</span><span class="sxs-lookup"><span data-stu-id="5d800-1348">conv.ovf.i4.un</span></span>|<span data-ttu-id="5d800-1349">Преобразует значение без знака в `int32` (в стеке как `int32`) и создает исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1349">Converts an unsigned value to an `int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5d800-1350">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1350">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1351">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1351">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1352">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1352">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5d800-1353">Если возникает переполнение, возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1353">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5d800-1354">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1354">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1355">Код операции `conv.ovf.i4.un` преобразует `value` поверх стека в тип, указанный в коде операции, и помещает это преобразованное значение в начало стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1355">The `conv.ovf.i4.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1356">Если значение слишком велико или слишком мало для представления целевым типом, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1356">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5d800-1357">Преобразования чисел с плавающей запятой в целые значения сокращают число в сторону нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1357">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5d800-1358">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используются `conv.ovf.i` или `conv.ovf.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1358">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5d800-1359"><xref:System.OverflowException> создается, если результат не может быть представлен типом результата.</span><span class="sxs-lookup"><span data-stu-id="5d800-1359"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5d800-1360">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.ovf.i4.un`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1360">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i4.un` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1361">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1361">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1362">Преобразует значение со знаком на вершине стека вычислений в значение <see langword="int64" /> со знаком и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1362">Converts the signed value on top of the evaluation stack to signed <see langword="int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1363">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1363">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1364">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1364">Format</span></span>|<span data-ttu-id="5d800-1365">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1365">Assembly Format</span></span>|<span data-ttu-id="5d800-1366">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1366">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1367">B9</span><span class="sxs-lookup"><span data-stu-id="5d800-1367">B9</span></span>|<span data-ttu-id="5d800-1368">ovf. i8</span><span class="sxs-lookup"><span data-stu-id="5d800-1368">conv.ovf.i8</span></span>|<span data-ttu-id="5d800-1369">Преобразование в `int64` (в стеке как `int64`) и вызовет исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1369">Convert to an `int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5d800-1370">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1370">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1371">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1371">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1372">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1372">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5d800-1373">Если возникает переполнение, возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1373">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5d800-1374">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1374">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1375">Код операции `conv.ovf.i8` преобразует `value` поверх стека в тип, указанный в коде операции, и помещает это преобразованное значение в начало стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1375">The `conv.ovf.i8` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1376">Если значение слишком велико или слишком мало для представления целевым типом, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1376">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5d800-1377">Преобразования чисел с плавающей запятой в целые значения сокращают число в сторону нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1377">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5d800-1378">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используются `conv.ovf.i` или `conv.ovf.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1378">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5d800-1379"><xref:System.OverflowException> создается, если результат не может быть представлен типом результата.</span><span class="sxs-lookup"><span data-stu-id="5d800-1379"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5d800-1380">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.ovf.i8`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1380">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i8` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1381">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1381">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I8_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I8_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I8_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I8_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I8_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I8_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1382">Преобразует значение без знака на вершине стека вычислений в значение <see langword="int64" /> со знаком и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1382">Converts the unsigned value on top of the evaluation stack to signed <see langword="int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1383">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1383">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1384">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1384">Format</span></span>|<span data-ttu-id="5d800-1385">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1385">Assembly Format</span></span>|<span data-ttu-id="5d800-1386">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1386">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1387">85</span><span class="sxs-lookup"><span data-stu-id="5d800-1387">85</span></span>|<span data-ttu-id="5d800-1388">ovf. i8. un</span><span class="sxs-lookup"><span data-stu-id="5d800-1388">conv.ovf.i8.un</span></span>|<span data-ttu-id="5d800-1389">Преобразует значение без знака в `int64` (в стеке как `int64`) и создает исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1389">Converts an unsigned value to an `int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5d800-1390">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1390">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1391">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1391">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1392">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1392">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5d800-1393">Если возникает переполнение, возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1393">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5d800-1394">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1394">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1395">Код операции `conv.ovf.i8.un` преобразует `value` поверх стека в тип, указанный в коде операции, и помещает это преобразованное значение в начало стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1395">The `conv.ovf.i8.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1396">Если значение слишком велико или слишком мало для представления целевым типом, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1396">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5d800-1397">Преобразования чисел с плавающей запятой в целые значения сокращают число в сторону нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1397">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5d800-1398">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используются `conv.ovf.i` или `conv.ovf.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1398">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5d800-1399"><xref:System.OverflowException> создается, если результат не может быть представлен типом результата.</span><span class="sxs-lookup"><span data-stu-id="5d800-1399"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5d800-1400">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.ovf.i8.un`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1400">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i8.un` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1401">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1401">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1402">Преобразует значение со знаком на вершине стека вычислений в <see langword="unsigned native int" /> и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1402">Converts the signed value on top of the evaluation stack to <see langword="unsigned native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1403">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1403">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1404">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1404">Format</span></span>|<span data-ttu-id="5d800-1405">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1405">Assembly Format</span></span>|<span data-ttu-id="5d800-1406">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1406">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1407">D5</span><span class="sxs-lookup"><span data-stu-id="5d800-1407">D5</span></span>|<span data-ttu-id="5d800-1408">ovf. u</span><span class="sxs-lookup"><span data-stu-id="5d800-1408">conv.ovf.u</span></span>|<span data-ttu-id="5d800-1409">Преобразование в `unsigned native int` (в стеке как `native int`) и вызовет исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1409">Convert to an `unsigned native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5d800-1410">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1410">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1411">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1411">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1412">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1412">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5d800-1413">Если возникает переполнение, возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1413">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5d800-1414">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1414">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1415">Код операции `conv.ovf.u` преобразует `value` поверх стека в тип, указанный в коде операции, и помещает это преобразованное значение в начало стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1415">The `conv.ovf.u` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1416">Если значение слишком велико или слишком мало для представления целевым типом, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1416">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5d800-1417">Преобразования чисел с плавающей запятой в целые значения сокращают число в сторону нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1417">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5d800-1418">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используются `conv.ovf.i` или `conv.ovf.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1418">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5d800-1419"><xref:System.OverflowException> создается, если результат не может быть представлен типом результата.</span><span class="sxs-lookup"><span data-stu-id="5d800-1419"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5d800-1420">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.ovf.u`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1420">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1421">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1421">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1422">Преобразует значение без знака на вершине стека вычислений в значение <see langword="unsigned native int" /> и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1422">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1423">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1423">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1424">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1424">Format</span></span>|<span data-ttu-id="5d800-1425">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1425">Assembly Format</span></span>|<span data-ttu-id="5d800-1426">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1426">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1427">8B</span><span class="sxs-lookup"><span data-stu-id="5d800-1427">8B</span></span>|<span data-ttu-id="5d800-1428">ovf. u. un</span><span class="sxs-lookup"><span data-stu-id="5d800-1428">conv.ovf.u.un</span></span>|<span data-ttu-id="5d800-1429">Преобразует значение UN без знака в `unsigned native int` (в стеке как `native int`) и создает исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1429">Converts un unsigned value to an `unsigned native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5d800-1430">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1430">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1431">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1431">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1432">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1432">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5d800-1433">Если возникает переполнение, возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1433">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5d800-1434">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1434">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1435">Код операции `conv.ovf.u.un` преобразует `value` поверх стека в тип, указанный в коде операции, и помещает это преобразованное значение в начало стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1435">The `conv.ovf.u.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1436">Если значение слишком велико или слишком мало для представления целевым типом, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1436">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5d800-1437">Преобразования чисел с плавающей запятой в целые значения сокращают число в сторону нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1437">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5d800-1438">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используются `conv.ovf.i` или `conv.ovf.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1438">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5d800-1439"><xref:System.OverflowException> создается, если результат не может быть представлен типом результата.</span><span class="sxs-lookup"><span data-stu-id="5d800-1439"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5d800-1440">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.uvf.u.un`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1440">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.uvf.u.un` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1441">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1441">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1442">Преобразует значение со знаком на вершине стека вычислений в значение <see langword="unsigned int8" />, расширяет его до <see langword="int32" /> и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1442">Converts the signed value on top of the evaluation stack to <see langword="unsigned int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1443">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1443">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1444">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1444">Format</span></span>|<span data-ttu-id="5d800-1445">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1445">Assembly Format</span></span>|<span data-ttu-id="5d800-1446">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1446">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1447">B4</span><span class="sxs-lookup"><span data-stu-id="5d800-1447">B4</span></span>|<span data-ttu-id="5d800-1448">ovf. U1</span><span class="sxs-lookup"><span data-stu-id="5d800-1448">conv.ovf.u1</span></span>|<span data-ttu-id="5d800-1449">Преобразование в `unsigned int8` (в стеке как `int32`) и вызовет исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1449">Convert to an `unsigned int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5d800-1450">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1450">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1451">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1451">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1452">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1452">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5d800-1453">Если возникает переполнение, возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1453">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5d800-1454">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1454">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1455">Код операции `conv.ovf.u1` преобразует `value` поверх стека в тип, указанный в коде операции, и помещает это преобразованное значение в начало стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1455">The `conv.ovf.u1` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1456">Если значение слишком велико или слишком мало для представления целевым типом, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1456">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5d800-1457">Преобразования чисел с плавающей запятой в целые значения сокращают число в сторону нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1457">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5d800-1458">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используются `conv.ovf.i` или `conv.ovf.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1458">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5d800-1459"><xref:System.OverflowException> создается, если результат не может быть представлен типом результата.</span><span class="sxs-lookup"><span data-stu-id="5d800-1459"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5d800-1460">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.ovf.u1`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1460">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u1` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1461">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1461">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U1_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U1_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U1_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U1_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U1_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U1_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1462">Преобразует значение без знака на вершине стека вычислений в значение <see langword="unsigned int8" />, расширяет его до <see langword="int32" /> и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1462">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1463">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1463">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1464">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1464">Format</span></span>|<span data-ttu-id="5d800-1465">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1465">Assembly Format</span></span>|<span data-ttu-id="5d800-1466">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1466">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1467">86</span><span class="sxs-lookup"><span data-stu-id="5d800-1467">86</span></span>|<span data-ttu-id="5d800-1468">ovf. U1. un</span><span class="sxs-lookup"><span data-stu-id="5d800-1468">conv.ovf.u1.un</span></span>|<span data-ttu-id="5d800-1469">Преобразует значение без знака в `unsigned int8` (в стеке как `int32`) и создает исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1469">Converts an unsigned value to an `unsigned int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5d800-1470">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1470">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1471">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1471">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1472">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1472">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5d800-1473">Если возникает переполнение, возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1473">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5d800-1474">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1474">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1475">Код операции `conv.ovf.u1.un` преобразует `value` поверх стека в тип, указанный в коде операции, и помещает это преобразованное значение в начало стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1475">The `conv.ovf.u1.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1476">Если значение слишком велико или слишком мало для представления целевым типом, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1476">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5d800-1477">Преобразования чисел с плавающей запятой в целые значения сокращают число в сторону нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1477">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5d800-1478">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используются `conv.ovf.i` или `conv.ovf.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1478">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5d800-1479"><xref:System.OverflowException> создается, если результат не может быть представлен типом результата.</span><span class="sxs-lookup"><span data-stu-id="5d800-1479"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5d800-1480">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.ovf.u1.un`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1480">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u1.un` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1481">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1481">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1482">Преобразует значение со знаком на вершине стека вычислений в значение <see langword="unsigned int16" />, расширяет его до <see langword="int32" /> и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1482">Converts the signed value on top of the evaluation stack to <see langword="unsigned int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1483">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1483">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1484">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1484">Format</span></span>|<span data-ttu-id="5d800-1485">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1485">Assembly Format</span></span>|<span data-ttu-id="5d800-1486">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1486">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1487">B6</span><span class="sxs-lookup"><span data-stu-id="5d800-1487">B6</span></span>|<span data-ttu-id="5d800-1488">ovf. U2</span><span class="sxs-lookup"><span data-stu-id="5d800-1488">conv.ovf.u2</span></span>|<span data-ttu-id="5d800-1489">Преобразование в `unsigned int16` (в стеке как `int32`) и вызовет исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1489">Convert to an `unsigned int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5d800-1490">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1490">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1491">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1491">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1492">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1492">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5d800-1493">Если возникает переполнение, возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1493">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5d800-1494">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1494">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1495">Код операции `conv.ovf.u2` преобразует `value` поверх стека в тип, указанный в коде операции, и помещает это преобразованное значение в начало стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1495">The `conv.ovf.u2` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1496">Если значение слишком велико или слишком мало для представления целевым типом, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1496">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5d800-1497">Преобразования чисел с плавающей запятой в целые значения сокращают число в сторону нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1497">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5d800-1498">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используются `conv.ovf.i` или `conv.ovf.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1498">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5d800-1499"><xref:System.OverflowException> создается, если результат не может быть представлен типом результата.</span><span class="sxs-lookup"><span data-stu-id="5d800-1499"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5d800-1500">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.ovf.u2`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1500">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u2` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1501">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1501">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U2_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U2_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U2_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U2_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U2_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U2_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1502">Преобразует значение без знака на вершине стека вычислений в значение <see langword="unsigned int16" />, расширяет его до <see langword="int32" /> и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1502">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1503">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1503">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1504">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1504">Format</span></span>|<span data-ttu-id="5d800-1505">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1505">Assembly Format</span></span>|<span data-ttu-id="5d800-1506">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1506">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1507">87</span><span class="sxs-lookup"><span data-stu-id="5d800-1507">87</span></span>|<span data-ttu-id="5d800-1508">проovf. U2. un</span><span class="sxs-lookup"><span data-stu-id="5d800-1508">conv.ovf.u2.un</span></span>|<span data-ttu-id="5d800-1509">Преобразует значение без знака в `unsigned int16` (в стеке как `int32`) и создает исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1509">Converts an unsigned value to an `unsigned int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5d800-1510">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1510">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1511">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1511">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1512">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1512">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5d800-1513">Если возникает переполнение, возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1513">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5d800-1514">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1514">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1515">Код операции `conv.ovf.u2.un` преобразует `value` поверх стека в тип, указанный в коде операции, и помещает это преобразованное значение в начало стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1515">The `conv.ovf.u2.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1516">Если значение слишком велико или слишком мало для представления целевым типом, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1516">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5d800-1517">Преобразования чисел с плавающей запятой в целые значения сокращают число в сторону нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1517">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5d800-1518">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используются `conv.ovf.i` или `conv.ovf.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1518">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5d800-1519"><xref:System.OverflowException> создается, если результат не может быть представлен типом результата.</span><span class="sxs-lookup"><span data-stu-id="5d800-1519"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5d800-1520">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.ovf.u2.un`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1520">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u2.un` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1521">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1521">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1522">Преобразует значение со знаком на вершине стека вычислений в <see langword="unsigned int32" /> и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1522">Converts the signed value on top of the evaluation stack to <see langword="unsigned int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1523">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1523">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1524">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1524">Format</span></span>|<span data-ttu-id="5d800-1525">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1525">Assembly Format</span></span>|<span data-ttu-id="5d800-1526">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1526">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1527">B8</span><span class="sxs-lookup"><span data-stu-id="5d800-1527">B8</span></span>|<span data-ttu-id="5d800-1528">ovf. U4</span><span class="sxs-lookup"><span data-stu-id="5d800-1528">conv.ovf.u4</span></span>|<span data-ttu-id="5d800-1529">Преобразование в `unsigned int32` (в стеке как `int32`) и вызовет исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1529">Convert to an `unsigned int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5d800-1530">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1530">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1531">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1531">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1532">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1532">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5d800-1533">Если возникает переполнение, возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1533">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5d800-1534">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1534">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1535">Код операции `conv.ovf.u4` преобразует `value` поверх стека в тип, указанный в коде операции, и помещает это преобразованное значение в начало стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1535">The `conv.ovf.u4` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1536">Если значение слишком велико или слишком мало для представления целевым типом, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1536">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5d800-1537">Преобразования чисел с плавающей запятой в целые значения сокращают число в сторону нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1537">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5d800-1538">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используются `conv.ovf.i` или `conv.ovf.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1538">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5d800-1539"><xref:System.OverflowException> создается, если результат не может быть представлен типом результата.</span><span class="sxs-lookup"><span data-stu-id="5d800-1539"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5d800-1540">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.ovf.u4`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1540">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u4` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1541">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1541">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U4_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U4_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U4_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U4_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U4_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U4_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1542">Преобразует значение без знака на вершине стека вычислений в значение <see langword="unsigned int32" /> и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1542">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1543">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1543">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1544">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1544">Format</span></span>|<span data-ttu-id="5d800-1545">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1545">Assembly Format</span></span>|<span data-ttu-id="5d800-1546">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1546">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1547">88</span><span class="sxs-lookup"><span data-stu-id="5d800-1547">88</span></span>|<span data-ttu-id="5d800-1548">ovf. U4. un</span><span class="sxs-lookup"><span data-stu-id="5d800-1548">conv.ovf.u4.un</span></span>|<span data-ttu-id="5d800-1549">Преобразует значение без знака в `unsigned int32` (в стеке как `int32`) и создает исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1549">Converts an unsigned value to an `unsigned int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5d800-1550">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1550">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1551">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1551">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1552">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1552">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5d800-1553">Если возникает переполнение, возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1553">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5d800-1554">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1554">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1555">Код операции `conv.ovf.u4.un` преобразует `value` поверх стека в тип, указанный в коде операции, и помещает это преобразованное значение в начало стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1555">The `conv.ovf.u4.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1556">Если значение слишком велико или слишком мало для представления целевым типом, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1556">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5d800-1557">Преобразования чисел с плавающей запятой в целые значения сокращают число в сторону нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1557">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5d800-1558">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используются `conv.ovf.i` или `conv.ovf.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1558">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5d800-1559"><xref:System.OverflowException> создается, если результат не может быть представлен типом результата.</span><span class="sxs-lookup"><span data-stu-id="5d800-1559"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5d800-1560">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.ovf.u4.un`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1560">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u4.un` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1561">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1561">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1562">Преобразует значение со знаком на вершине стека вычислений в <see langword="unsigned int64" /> и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1562">Converts the signed value on top of the evaluation stack to <see langword="unsigned int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1563">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1563">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1564">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1564">Format</span></span>|<span data-ttu-id="5d800-1565">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1565">Assembly Format</span></span>|<span data-ttu-id="5d800-1566">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1566">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1567">БИЗНЕС</span><span class="sxs-lookup"><span data-stu-id="5d800-1567">BA</span></span>|<span data-ttu-id="5d800-1568">ovf. u8</span><span class="sxs-lookup"><span data-stu-id="5d800-1568">conv.ovf.u8</span></span>|<span data-ttu-id="5d800-1569">Преобразование в `unsigned int64` (в стеке как `int64`) и вызовет исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1569">Convert to an `unsigned int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5d800-1570">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1570">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1571">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1571">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1572">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1572">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5d800-1573">Если возникает переполнение, возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1573">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5d800-1574">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1574">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1575">Код операции `conv.ovf.u8` преобразует `value` поверх стека в тип, указанный в коде операции, и помещает это преобразованное значение в начало стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1575">The `conv.ovf.u8` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1576">Если значение слишком велико или слишком мало для представления целевым типом, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1576">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5d800-1577">Преобразования чисел с плавающей запятой в целые значения сокращают число в сторону нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1577">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5d800-1578">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используются `conv.ovf.i` или `conv.ovf.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1578">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5d800-1579"><xref:System.OverflowException> создается, если результат не может быть представлен типом результата.</span><span class="sxs-lookup"><span data-stu-id="5d800-1579"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5d800-1580">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.ovf.u8`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1580">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u8` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1581">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1581">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U8_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U8_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U8_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U8_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U8_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U8_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1582">Преобразует значение без знака на вершине стека вычислений в значение <see langword="unsigned int64" /> и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1582">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1583">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1583">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1584">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1584">Format</span></span>|<span data-ttu-id="5d800-1585">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1585">Assembly Format</span></span>|<span data-ttu-id="5d800-1586">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1586">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1587">89</span><span class="sxs-lookup"><span data-stu-id="5d800-1587">89</span></span>|<span data-ttu-id="5d800-1588">ovf. u8. un</span><span class="sxs-lookup"><span data-stu-id="5d800-1588">conv.ovf.u8.un</span></span>|<span data-ttu-id="5d800-1589">Преобразует значение без знака в `unsigned int64` (в стеке как `int64`) и создает исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1589">Converts an unsigned value to an `unsigned int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="5d800-1590">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1590">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1591">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1591">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1592">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1592">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="5d800-1593">Если возникает переполнение, возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1593">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="5d800-1594">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1594">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1595">Код операции `conv.ovf.u8.un` преобразует `value` поверх стека в тип, указанный в коде операции, и помещает это преобразованное значение в начало стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1595">The `conv.ovf.u8.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1596">Если значение слишком велико или слишком мало для представления целевым типом, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1596">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5d800-1597">Преобразования чисел с плавающей запятой в целые значения сокращают число в сторону нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1597">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="5d800-1598">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используются `conv.ovf.i` или `conv.ovf.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1598">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="5d800-1599"><xref:System.OverflowException> создается, если результат не может быть представлен типом результата.</span><span class="sxs-lookup"><span data-stu-id="5d800-1599"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5d800-1600">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.ovf.u8.un`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1600">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u8.un` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1601">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1601">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_R_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_R_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1602">Преобразование целочисленного значения без знака на вершине стека вычислений в <see langword="float32" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-1602">Converts the unsigned integer value on top of the evaluation stack to <see langword="float32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1603">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1603">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1604">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1604">Format</span></span>|<span data-ttu-id="5d800-1605">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1605">Assembly Format</span></span>|<span data-ttu-id="5d800-1606">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1606">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1607">76</span><span class="sxs-lookup"><span data-stu-id="5d800-1607">76</span></span>|<span data-ttu-id="5d800-1608">Рассчет. r. un</span><span class="sxs-lookup"><span data-stu-id="5d800-1608">conv.r.un</span></span>|<span data-ttu-id="5d800-1609">Преобразует целое число без знака в число с плавающей запятой, отправляя `F` в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1609">Convert unsigned integer to floating-point, pushing `F` on stack.</span></span>|  
  
 <span data-ttu-id="5d800-1610">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1610">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1611">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1611">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1612">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1612">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="5d800-1613">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1613">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1614">Код операции `conv.r.un` преобразует `value` поверх стека в тип, указанный в коде операции, и оставляет это преобразованное значение в верхней части стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1614">The `conv.r.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1615">Целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используется `conv.i` или `conv.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1615">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="5d800-1616">Значения с плавающей запятой преобразуются в тип `F`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1616">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="5d800-1617">Преобразование чисел с плавающей запятой в целые значения Усекает число до нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1617">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="5d800-1618">При преобразовании из `float64` в `float32` точность может быть потеряна.</span><span class="sxs-lookup"><span data-stu-id="5d800-1618">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="5d800-1619">Если значение `value` слишком велико для `float32 (F)`, положительная бесконечность (если `value` является положительным) или отрицательная бесконечность (если `value` является отрицательным).</span><span class="sxs-lookup"><span data-stu-id="5d800-1619">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="5d800-1620">Если переполнение происходит при преобразовании одного целочисленного типа в другой, биты высокого порядка усекаются.</span><span class="sxs-lookup"><span data-stu-id="5d800-1620">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="5d800-1621">Если результат меньше, чем `int32`, для заполнения слота используется значение, расширенное знаком.</span><span class="sxs-lookup"><span data-stu-id="5d800-1621">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="5d800-1622">Если происходит переполнение при преобразовании типа с плавающей запятой в целое число, возвращаемый `result` не определен.</span><span class="sxs-lookup"><span data-stu-id="5d800-1622">If overflow occurs converting a floating-point type to an integer the `result` returned is unspecified.</span></span> <span data-ttu-id="5d800-1623">Операция `conv.r.un` принимает целое число из стека, интерпретирует его как неподписанное и заменяет его на число с плавающей запятой для представления целого числа: значение `float32`, если это достаточно, чтобы представить целое число без потери точности, или, в противном случае `float64`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1623">The `conv.r.un` operation takes an integer off the stack, interprets it as unsigned, and replaces it with a floating-point number to represent the integer: either a `float32`, if this is wide enough to represent the integer without loss of precision, or else a `float64`.</span></span>  
  
 <span data-ttu-id="5d800-1624">При использовании этого поля исключения никогда не возникают.</span><span class="sxs-lookup"><span data-stu-id="5d800-1624">No exceptions are ever thrown when using this field.</span></span>  
  
 <span data-ttu-id="5d800-1625">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.r.un`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1625">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.r.un` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1626">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1626">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1627">Преобразует верхнее значение в стеке вычислений в тип <see langword="float32" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-1627">Converts the value on top of the evaluation stack to <see langword="float32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1628">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1628">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1629">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1629">Format</span></span>|<span data-ttu-id="5d800-1630">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1630">Assembly Format</span></span>|<span data-ttu-id="5d800-1631">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1631">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1632">6B</span><span class="sxs-lookup"><span data-stu-id="5d800-1632">6B</span></span>|<span data-ttu-id="5d800-1633">с кредитом. R4</span><span class="sxs-lookup"><span data-stu-id="5d800-1633">conv.r4</span></span>|<span data-ttu-id="5d800-1634">Преобразует в `float32`, отправляя `F` в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1634">Convert to `float32`, pushing `F` on stack.</span></span>|  
  
 <span data-ttu-id="5d800-1635">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1635">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1636">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1636">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1637">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1637">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="5d800-1638">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1638">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1639">Код операции `conv.r4` преобразует `value` поверх стека в тип, указанный в коде операции, и оставляет это преобразованное значение в верхней части стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1639">The `conv.r4` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1640">Целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используется `conv.i` или `conv.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1640">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="5d800-1641">Значения с плавающей запятой преобразуются в тип `F`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1641">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="5d800-1642">Преобразование чисел с плавающей запятой в целые значения Усекает число до нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1642">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="5d800-1643">При преобразовании из `float64` в `float32` точность может быть потеряна.</span><span class="sxs-lookup"><span data-stu-id="5d800-1643">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="5d800-1644">Если значение `value` слишком велико для `float32 (F)`, положительная бесконечность (если `value` является положительным) или отрицательная бесконечность (если `value` является отрицательным).</span><span class="sxs-lookup"><span data-stu-id="5d800-1644">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="5d800-1645">Если переполнение происходит при преобразовании одного целочисленного типа в другой, биты высокого порядка усекаются.</span><span class="sxs-lookup"><span data-stu-id="5d800-1645">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="5d800-1646">Если результат меньше, чем `int32`, для заполнения слота используется значение, расширенное знаком.</span><span class="sxs-lookup"><span data-stu-id="5d800-1646">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="5d800-1647">Если происходит переполнение при преобразовании типа с плавающей запятой в целое число, возвращаемое значение не определено.</span><span class="sxs-lookup"><span data-stu-id="5d800-1647">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="5d800-1648">При использовании этого поля исключения никогда не возникают.</span><span class="sxs-lookup"><span data-stu-id="5d800-1648">No exceptions are ever thrown when using this field.</span></span>  
  
 <span data-ttu-id="5d800-1649">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.r4`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1649">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.r4` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1650">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1650">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1651">Преобразует верхнее значение в стеке вычислений в тип <see langword="float64" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-1651">Converts the value on top of the evaluation stack to <see langword="float64" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1652">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1652">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1653">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1653">Format</span></span>|<span data-ttu-id="5d800-1654">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1654">Assembly Format</span></span>|<span data-ttu-id="5d800-1655">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1655">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1656">6C</span><span class="sxs-lookup"><span data-stu-id="5d800-1656">6C</span></span>|<span data-ttu-id="5d800-1657">с кредитом. R8</span><span class="sxs-lookup"><span data-stu-id="5d800-1657">conv.r8</span></span>|<span data-ttu-id="5d800-1658">Преобразует в `float64`, отправляя `F` в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1658">Convert to `float64`, pushing `F` on stack.</span></span>|  
  
 <span data-ttu-id="5d800-1659">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1659">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1660">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1660">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1661">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1661">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="5d800-1662">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1662">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1663">Код операции `conv.r8` преобразует `value` поверх стека в тип, указанный в коде операции, и оставляет это преобразованное значение в верхней части стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1663">The `conv.r8` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1664">Целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используется `conv.i` или `conv.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1664">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="5d800-1665">Значения с плавающей запятой преобразуются в тип `F`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1665">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="5d800-1666">Преобразование чисел с плавающей запятой в целые значения Усекает число до нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1666">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="5d800-1667">При преобразовании из `float64` в `float32` точность может быть потеряна.</span><span class="sxs-lookup"><span data-stu-id="5d800-1667">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="5d800-1668">Если значение `value` слишком велико для `float32 (F)`, положительная бесконечность (если `value` является положительным) или отрицательная бесконечность (если `value` является отрицательным).</span><span class="sxs-lookup"><span data-stu-id="5d800-1668">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="5d800-1669">Если переполнение происходит при преобразовании одного целочисленного типа в другой, биты высокого порядка усекаются.</span><span class="sxs-lookup"><span data-stu-id="5d800-1669">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="5d800-1670">Если результат меньше, чем `int32`, для заполнения слота используется значение, расширенное знаком.</span><span class="sxs-lookup"><span data-stu-id="5d800-1670">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="5d800-1671">Если происходит переполнение при преобразовании типа с плавающей запятой в целое число, возвращаемое значение не определено.</span><span class="sxs-lookup"><span data-stu-id="5d800-1671">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="5d800-1672">При использовании этого поля исключения никогда не возникают.</span><span class="sxs-lookup"><span data-stu-id="5d800-1672">No exceptions are ever thrown when using this field.</span></span>  
  
 <span data-ttu-id="5d800-1673">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.r8`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1673">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.r8` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1674">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1674">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1675">Преобразует верхнее значение в стеке вычислений в <see langword="unsigned native int" />, а затем расширяет его до <see langword="native int" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-1675">Converts the value on top of the evaluation stack to <see langword="unsigned native int" />, and extends it to <see langword="native int" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1676">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1676">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1677">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1677">Format</span></span>|<span data-ttu-id="5d800-1678">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1678">Assembly Format</span></span>|<span data-ttu-id="5d800-1679">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1679">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1680">E0</span><span class="sxs-lookup"><span data-stu-id="5d800-1680">E0</span></span>|<span data-ttu-id="5d800-1681">Кредит u</span><span class="sxs-lookup"><span data-stu-id="5d800-1681">conv.u</span></span>|<span data-ttu-id="5d800-1682">Преобразует в `unsigned native int`, отправляя `native int` в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1682">Convert to `unsigned native int`, pushing `native int` on stack.</span></span>|  
  
 <span data-ttu-id="5d800-1683">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1683">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1684">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1684">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1685">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1685">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="5d800-1686">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1686">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1687">Код операции `conv.u` преобразует `value` поверх стека в тип, указанный в коде операции, и оставляет это преобразованное значение в верхней части стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1687">The `conv.u` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1688">Целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используется `conv.i` или `conv.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1688">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="5d800-1689">Значения с плавающей запятой преобразуются в тип `F`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1689">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="5d800-1690">Преобразование чисел с плавающей запятой в целые значения Усекает число до нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1690">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="5d800-1691">При преобразовании из `float64` в `float32` точность может быть потеряна.</span><span class="sxs-lookup"><span data-stu-id="5d800-1691">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="5d800-1692">Если значение `value` слишком велико для `float32 (F)`, положительная бесконечность (если `value` является положительным) или отрицательная бесконечность (если `value` является отрицательным).</span><span class="sxs-lookup"><span data-stu-id="5d800-1692">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="5d800-1693">Если переполнение происходит при преобразовании одного целочисленного типа в другой, биты высокого порядка усекаются.</span><span class="sxs-lookup"><span data-stu-id="5d800-1693">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="5d800-1694">Если результат меньше, чем `int32`, для заполнения слота используется значение, расширенное знаком.</span><span class="sxs-lookup"><span data-stu-id="5d800-1694">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="5d800-1695">Если происходит переполнение при преобразовании типа с плавающей запятой в целое число, возвращаемое значение не определено.</span><span class="sxs-lookup"><span data-stu-id="5d800-1695">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="5d800-1696">При использовании этого поля исключения никогда не возникают.</span><span class="sxs-lookup"><span data-stu-id="5d800-1696">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="5d800-1697">Эквивалентные инструкции, которые вызовут исключение, если тип результата не может правильно представить результирующее значение, см. в разделе <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> и <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un>.</span><span class="sxs-lookup"><span data-stu-id="5d800-1697">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="5d800-1698">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.u`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1698">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1699">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1699">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1700">Преобразует верхнее значение в стеке вычислений в <see langword="unsigned int8" />, а затем расширяет его до <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-1700">Converts the value on top of the evaluation stack to <see langword="unsigned int8" />, and extends it to <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1701">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1701">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1702">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1702">Format</span></span>|<span data-ttu-id="5d800-1703">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1703">Assembly Format</span></span>|<span data-ttu-id="5d800-1704">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1704">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1705">D2</span><span class="sxs-lookup"><span data-stu-id="5d800-1705">D2</span></span>|<span data-ttu-id="5d800-1706">с кредитом. U1</span><span class="sxs-lookup"><span data-stu-id="5d800-1706">conv.u1</span></span>|<span data-ttu-id="5d800-1707">Преобразует в `int8`, отправляя `int32` в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1707">Convert to `int8`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="5d800-1708">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1708">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1709">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1709">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1710">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1710">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="5d800-1711">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1711">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1712">Код операции `conv.u1` преобразует `value` поверх стека в тип, указанный в коде операции, и оставляет это преобразованное значение в верхней части стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1712">The `conv.u1` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1713">Целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используется `conv.i` или `conv.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1713">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="5d800-1714">Значения с плавающей запятой преобразуются в тип `F`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1714">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="5d800-1715">Преобразование чисел с плавающей запятой в целые значения Усекает число до нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1715">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="5d800-1716">При преобразовании из `float64` в `float32` точность может быть потеряна.</span><span class="sxs-lookup"><span data-stu-id="5d800-1716">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="5d800-1717">Если значение `value` слишком велико для `float32 (F)`, положительная бесконечность (если `value` является положительным) или отрицательная бесконечность (если `value` является отрицательным).</span><span class="sxs-lookup"><span data-stu-id="5d800-1717">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="5d800-1718">Если переполнение происходит при преобразовании одного целочисленного типа в другой, биты высокого порядка усекаются.</span><span class="sxs-lookup"><span data-stu-id="5d800-1718">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="5d800-1719">Если результат меньше, чем `int32`, для заполнения слота используется значение, расширенное знаком.</span><span class="sxs-lookup"><span data-stu-id="5d800-1719">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="5d800-1720">Если происходит переполнение при преобразовании типа с плавающей запятой в целое число, возвращаемое значение не определено.</span><span class="sxs-lookup"><span data-stu-id="5d800-1720">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="5d800-1721">При использовании этого поля исключения никогда не возникают.</span><span class="sxs-lookup"><span data-stu-id="5d800-1721">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="5d800-1722">Эквивалентные инструкции, которые вызовут исключение, если тип результата не может правильно представить результирующее значение, см. в разделе <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> и <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un>.</span><span class="sxs-lookup"><span data-stu-id="5d800-1722">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="5d800-1723">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.u1`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1723">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u1` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1724">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1724">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1725">Преобразует верхнее значение в стеке вычислений в <see langword="unsigned int16" />, а затем расширяет его до <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-1725">Converts the value on top of the evaluation stack to <see langword="unsigned int16" />, and extends it to <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1726">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1726">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1727">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1727">Format</span></span>|<span data-ttu-id="5d800-1728">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1728">Assembly Format</span></span>|<span data-ttu-id="5d800-1729">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1729">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1730">D1</span><span class="sxs-lookup"><span data-stu-id="5d800-1730">D1</span></span>|<span data-ttu-id="5d800-1731">Кредитный. U2</span><span class="sxs-lookup"><span data-stu-id="5d800-1731">conv.u2</span></span>|<span data-ttu-id="5d800-1732">Преобразует в `int16`, отправляя `int32` в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1732">Convert to `int16`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="5d800-1733">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1733">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1734">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1734">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1735">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1735">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="5d800-1736">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1736">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1737">Код операции `conv.u2` преобразует `value` поверх стека в тип, указанный в коде операции, и оставляет это преобразованное значение в верхней части стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1737">The `conv.u2` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1738">Целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используется `conv.i` или `conv.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1738">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="5d800-1739">Значения с плавающей запятой преобразуются в тип `F`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1739">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="5d800-1740">Преобразование чисел с плавающей запятой в целые значения Усекает число до нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1740">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="5d800-1741">При преобразовании из `float64` в `float32` точность может быть потеряна.</span><span class="sxs-lookup"><span data-stu-id="5d800-1741">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="5d800-1742">Если значение `value` слишком велико для `float32 (F)`, положительная бесконечность (если `value` является положительным) или отрицательная бесконечность (если `value` является отрицательным).</span><span class="sxs-lookup"><span data-stu-id="5d800-1742">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="5d800-1743">Если переполнение происходит при преобразовании одного целочисленного типа в другой, биты высокого порядка усекаются.</span><span class="sxs-lookup"><span data-stu-id="5d800-1743">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="5d800-1744">Если результат меньше, чем `int32`, для заполнения слота используется значение, расширенное знаком.</span><span class="sxs-lookup"><span data-stu-id="5d800-1744">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="5d800-1745">Если происходит переполнение при преобразовании типа с плавающей запятой в целое число, возвращаемое значение не определено.</span><span class="sxs-lookup"><span data-stu-id="5d800-1745">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="5d800-1746">При использовании этого поля исключения никогда не возникают.</span><span class="sxs-lookup"><span data-stu-id="5d800-1746">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="5d800-1747">Эквивалентные инструкции, которые вызовут исключение, если тип результата не может правильно представить результирующее значение, см. в разделе <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> и <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un>.</span><span class="sxs-lookup"><span data-stu-id="5d800-1747">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="5d800-1748">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.u2`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1748">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u2` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1749">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1749">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1750">Преобразует верхнее значение в стеке вычислений в <see langword="unsigned int32" />, а затем расширяет его до <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-1750">Converts the value on top of the evaluation stack to <see langword="unsigned int32" />, and extends it to <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1751">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1751">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1752">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1752">Format</span></span>|<span data-ttu-id="5d800-1753">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1753">Assembly Format</span></span>|<span data-ttu-id="5d800-1754">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1754">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1755">6D</span><span class="sxs-lookup"><span data-stu-id="5d800-1755">6D</span></span>|<span data-ttu-id="5d800-1756">U4</span><span class="sxs-lookup"><span data-stu-id="5d800-1756">conv.u4</span></span>|<span data-ttu-id="5d800-1757">Преобразует в `unsigned int32`, отправляя `int32` в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1757">Convert to `unsigned int32`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="5d800-1758">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1758">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1759">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1759">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1760">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1760">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="5d800-1761">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1761">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1762">Код операции `conv.u4` преобразует `value` поверх стека в тип, указанный в коде операции, и оставляет это преобразованное значение в верхней части стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1762">The `conv.u4` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1763">Целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используется `conv.i` или `conv.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1763">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="5d800-1764">Значения с плавающей запятой преобразуются в тип `F`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1764">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="5d800-1765">Преобразование чисел с плавающей запятой в целые значения Усекает число до нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1765">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="5d800-1766">При преобразовании из `float64` в `float32` точность может быть потеряна.</span><span class="sxs-lookup"><span data-stu-id="5d800-1766">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="5d800-1767">Если значение `value` слишком велико для `float32 (F)`, положительная бесконечность (если `value` является положительным) или отрицательная бесконечность (если `value` является отрицательным).</span><span class="sxs-lookup"><span data-stu-id="5d800-1767">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="5d800-1768">Если переполнение происходит при преобразовании одного целочисленного типа в другой, биты высокого порядка усекаются.</span><span class="sxs-lookup"><span data-stu-id="5d800-1768">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="5d800-1769">Если результат меньше, чем `int32`, для заполнения слота используется значение, расширенное знаком.</span><span class="sxs-lookup"><span data-stu-id="5d800-1769">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="5d800-1770">Если происходит переполнение при преобразовании типа с плавающей запятой в целое число, возвращаемое значение не определено.</span><span class="sxs-lookup"><span data-stu-id="5d800-1770">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="5d800-1771">При использовании этого поля исключения никогда не возникают.</span><span class="sxs-lookup"><span data-stu-id="5d800-1771">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="5d800-1772">Эквивалентные инструкции, которые вызовут исключение, если тип результата не может правильно представить результирующее значение, см. в разделе <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> и <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un>.</span><span class="sxs-lookup"><span data-stu-id="5d800-1772">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="5d800-1773">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.u4`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1773">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u4` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1774">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1774">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1775">Преобразует верхнее значение в стеке вычислений в <see langword="unsigned int64" />, а затем расширяет его до <see langword="int64" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-1775">Converts the value on top of the evaluation stack to <see langword="unsigned int64" />, and extends it to <see langword="int64" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1776">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1776">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1777">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1777">Format</span></span>|<span data-ttu-id="5d800-1778">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1778">Assembly Format</span></span>|<span data-ttu-id="5d800-1779">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1779">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1780">6E</span><span class="sxs-lookup"><span data-stu-id="5d800-1780">6E</span></span>|<span data-ttu-id="5d800-1781">U8</span><span class="sxs-lookup"><span data-stu-id="5d800-1781">conv.u8</span></span>|<span data-ttu-id="5d800-1782">Преобразует в `int64`, отправляя `int64` в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1782">Convert to `int64`, pushing `int64` on stack.</span></span>|  
  
 <span data-ttu-id="5d800-1783">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1783">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1784">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1784">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1785">`value` извлекается из стека, и выполняется попытка выполнить операцию преобразования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1785">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="5d800-1786">Если преобразование прошло успешно, полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1786">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1787">Код операции `conv.u8` преобразует `value` поверх стека в тип, указанный в коде операции, и оставляет это преобразованное значение в верхней части стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1787">The `conv.u8` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="5d800-1788">Целочисленные значения менее 4 байт расширяются до `int32`, когда они загружаются в стек вычислений (если не используется `conv.i` или `conv.u`, в этом случае результатом также будет `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1788">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="5d800-1789">Значения с плавающей запятой преобразуются в тип `F`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1789">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="5d800-1790">Преобразование чисел с плавающей запятой в целые значения Усекает число до нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1790">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="5d800-1791">При преобразовании из `float64` в `float32` точность может быть потеряна.</span><span class="sxs-lookup"><span data-stu-id="5d800-1791">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="5d800-1792">Если значение `value` слишком велико для `float32 (F)`, положительная бесконечность (если `value` является положительным) или отрицательная бесконечность (если `value` является отрицательным).</span><span class="sxs-lookup"><span data-stu-id="5d800-1792">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="5d800-1793">Если переполнение происходит при преобразовании одного целочисленного типа в другой, биты высокого порядка усекаются.</span><span class="sxs-lookup"><span data-stu-id="5d800-1793">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="5d800-1794">Если результат меньше, чем `int32`, для заполнения слота используется значение, расширенное знаком.</span><span class="sxs-lookup"><span data-stu-id="5d800-1794">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="5d800-1795">Если происходит переполнение при преобразовании типа с плавающей запятой в целое число, возвращаемое значение не определено.</span><span class="sxs-lookup"><span data-stu-id="5d800-1795">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="5d800-1796">При использовании этого поля исключения никогда не возникают.</span><span class="sxs-lookup"><span data-stu-id="5d800-1796">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="5d800-1797">Эквивалентные инструкции, которые вызовут исключение, если тип результата не может правильно представить результирующее значение, см. в разделе <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> и <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un>.</span><span class="sxs-lookup"><span data-stu-id="5d800-1797">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="5d800-1798">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `conv.u8`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1798">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u8` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1799">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1799">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cpblk">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cpblk;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cpblk" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cpblk" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cpblk As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cpblk;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cpblk : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cpblk" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1800">Копирует заданное число байт из исходного адреса в конечный.</span><span class="sxs-lookup"><span data-stu-id="5d800-1800">Copies a specified number bytes from a source address to a destination address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1801">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1801">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1802">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1802">Format</span></span>|<span data-ttu-id="5d800-1803">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1803">Assembly Format</span></span>|<span data-ttu-id="5d800-1804">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1804">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1805">FE 17</span><span class="sxs-lookup"><span data-stu-id="5d800-1805">FE 17</span></span>|<span data-ttu-id="5d800-1806">cpblk</span><span class="sxs-lookup"><span data-stu-id="5d800-1806">cpblk</span></span>|<span data-ttu-id="5d800-1807">Копирование данных из одного блока памяти в другой.</span><span class="sxs-lookup"><span data-stu-id="5d800-1807">Copy data from one memory block to another.</span></span>|  
  
 <span data-ttu-id="5d800-1808">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1808">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1809">Адрес назначения помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1809">The destination address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1810">Исходный адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1810">The source address is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-1811">Число байтов для копирования помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1811">The number of bytes to copy is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="5d800-1812">Число байтов, исходный адрес и адрес назначения извлекаются из стека; указанное число байтов копируется из исходного адреса в конечный адрес.</span><span class="sxs-lookup"><span data-stu-id="5d800-1812">The number of bytes, the source address, and the destination address are popped from the stack; the specified number of bytes are copied from the source address to the destination address.</span></span>  
  
 <span data-ttu-id="5d800-1813">Инструкция `cpblk` копирует число (тип `unsigned int32`) байтов с исходного адреса (типа `*`, `native int` или `&`) в адрес назначения (типа `*`, `native int` или `&`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1813">The `cpblk` instruction copies a number (type `unsigned int32`) of bytes from a source address (of type `*`, `native int`, or `&`) to a destination address (of type `*`, `native int`, or `&`).</span></span> <span data-ttu-id="5d800-1814">Поведение `cpblk` не указано, если исходная и Целевая области перекрываются.</span><span class="sxs-lookup"><span data-stu-id="5d800-1814">The behavior of `cpblk` is unspecified if the source and destination areas overlap.</span></span>  
  
 <span data-ttu-id="5d800-1815">`cpblk` предполагает, что исходные и целевые адреса выровнены по естественному размеру компьютера.</span><span class="sxs-lookup"><span data-stu-id="5d800-1815">`cpblk` assumes that both the source and destination addressed are aligned to the natural size of the machine.</span></span> <span data-ttu-id="5d800-1816">Инструкция `cpblk` может быть непосредственно перед инструкцией `unaligned.<prefix>`, чтобы указать, что источник или назначение не совпадают.</span><span class="sxs-lookup"><span data-stu-id="5d800-1816">The `cpblk` instruction can be immediately preceded by the `unaligned.<prefix>` instruction to indicate that either the source or the destination is unaligned.</span></span>  
  
 <span data-ttu-id="5d800-1817">Операция `cpblk` может быть изменена непосредственно перед инструкциями префикса <xref:System.Reflection.Emit.OpCodes.Volatile> или <xref:System.Reflection.Emit.OpCodes.Unaligned>.</span><span class="sxs-lookup"><span data-stu-id="5d800-1817">The operation of the `cpblk` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="5d800-1818">При обнаружении недопустимого адреса может возникнуть исключение <xref:System.NullReferenceException>.</span><span class="sxs-lookup"><span data-stu-id="5d800-1818"><xref:System.NullReferenceException> may be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="5d800-1819">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `cpblk`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1819">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cpblk` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1820">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1820">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cpobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cpobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cpobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cpobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cpobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cpobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cpobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cpobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1821">Копирует тип значения по адресу объекта (с типом <see langword="&amp;" />, <see langword="*" /> или <see langword="native int" />) и помещает его по адресу конечного объекта (с типом <see langword="&amp;" />, <see langword="*" /> или <see langword="native int" />).</span><span class="sxs-lookup"><span data-stu-id="5d800-1821">Copies the value type located at the address of an object (type <see langword="&amp;" />, <see langword="*" /> or <see langword="native int" />) to the address of the destination object (type <see langword="&amp;" />, <see langword="*" /> or <see langword="native int" />).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1822">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1822">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1823">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1823">Format</span></span>|<span data-ttu-id="5d800-1824">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1824">Assembly Format</span></span>|<span data-ttu-id="5d800-1825">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1825">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1826">70 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5d800-1826">70 < `T` ></span></span>|<span data-ttu-id="5d800-1827">кпобж `classTok`</span><span class="sxs-lookup"><span data-stu-id="5d800-1827">cpobj `classTok`</span></span>|<span data-ttu-id="5d800-1828">Копирует тип значения из исходного объекта в целевой объект.</span><span class="sxs-lookup"><span data-stu-id="5d800-1828">Copies a value type from a source object to a destination object.</span></span>|  
  
 <span data-ttu-id="5d800-1829">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1829">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1830">Ссылка на целевой объект помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1830">The destination object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1831">Ссылка на исходный объект помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1831">The source object reference is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-1832">Две ссылки на объекты извлекаются из стека; Тип значения по адресу исходного объекта копируется на адрес целевого объекта.</span><span class="sxs-lookup"><span data-stu-id="5d800-1832">The two object references are popped from the stack; the value type at the address of the source object is copied to the address of the destination object.</span></span>  
  
 <span data-ttu-id="5d800-1833">Поведение `cpobj` не указано, если исходные и целевые ссылки на объекты не являются указателями на экземпляры класса, представленного токеном класса `classTok` (a `typeref` или `typedef`) или если `classTok` не представляет тип значения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1833">The behavior of `cpobj` is unspecified if the source and destination object references are not pointers to instances of the class represented by the class token `classTok` (a `typeref` or `typedef`), or if `classTok` does not represent a value type.</span></span>  
  
 <span data-ttu-id="5d800-1834">При обнаружении недопустимого адреса может возникнуть исключение <xref:System.NullReferenceException>.</span><span class="sxs-lookup"><span data-stu-id="5d800-1834"><xref:System.NullReferenceException> may be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="5d800-1835">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `cpobj`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1835">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cpobj` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1836">ILGenerator. Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="5d800-1836">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Div">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Div;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Div" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Div" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Div As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Div;" />
      <MemberSignature Language="F#" Value=" staticval mutable Div : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Div" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1837">Делит одно значение на другое и помещает результат в стек вычислений как число с плавающей запятой (с типом <see langword="F" />) или как частное (с типом <see langword="int32" />).</span><span class="sxs-lookup"><span data-stu-id="5d800-1837">Divides two values and pushes the result as a floating-point (type <see langword="F" />) or quotient (type <see langword="int32" />) onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1838">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1838">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1839">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1839">Format</span></span>|<span data-ttu-id="5d800-1840">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1840">Assembly Format</span></span>|<span data-ttu-id="5d800-1841">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1841">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1842">5B</span><span class="sxs-lookup"><span data-stu-id="5d800-1842">5B</span></span>|<span data-ttu-id="5d800-1843">div</span><span class="sxs-lookup"><span data-stu-id="5d800-1843">div</span></span>|<span data-ttu-id="5d800-1844">Делит два значения, чтобы вернуть результат частного или с плавающей точкой.</span><span class="sxs-lookup"><span data-stu-id="5d800-1844">Divides two values to return a quotient or floating-point result.</span></span>|  
  
 <span data-ttu-id="5d800-1845">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1845">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1846">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1846">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1847">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1847">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-1848">`value2` и `value1` извлекаются из стека; `value1` делится на `value2`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1848">`value2` and `value1` are popped from the stack; `value1` is divided by `value2`.</span></span>  
  
4.  <span data-ttu-id="5d800-1849">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1849">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1850">`result` @ no__t-1 @ no__t-2 div value2 удовлетворяет следующим условиям:</span><span class="sxs-lookup"><span data-stu-id="5d800-1850">`result` = `value1` div value2 satisfies the following conditions:</span></span>  
  
 <span data-ttu-id="5d800-1851">&#124;`result` &#124; = &#124; `value1` &#124; / &#124; `value2` &#124;, и:</span><span class="sxs-lookup"><span data-stu-id="5d800-1851">&#124; `result` &#124; = &#124; `value1` &#124; / &#124; `value2` &#124;, and:</span></span>  
  
 <span data-ttu-id="5d800-1852">Sign (`result`) = +, если знак (`value1`) = Sign (`value2`) или-, if знак (`value1`) ~ = Sign (`value2`)</span><span class="sxs-lookup"><span data-stu-id="5d800-1852">sign(`result`) = +, if sign(`value1`) = sign(`value2`), or -, if sign(`value1`) ~= sign(`value2`)</span></span>  
  
 <span data-ttu-id="5d800-1853">Инструкция `div` вычислит результат и помещает его в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1853">The `div` instruction computes the result and pushes it on the stack.</span></span>  
  
 <span data-ttu-id="5d800-1854">Деление целых чисел усекается до нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-1854">Integer division truncates towards zero.</span></span>  
  
 <span data-ttu-id="5d800-1855">Деление конечного числа на ноль приводит к правильному бесконечному значению со знаком.</span><span class="sxs-lookup"><span data-stu-id="5d800-1855">Division of a finite number by zero produces the correctly signed infinite value.</span></span>  
  
 <span data-ttu-id="5d800-1856">Деление нуля на ноль или бесконечность по бесконечности приводит к получению значения NaN (нечисловое).</span><span class="sxs-lookup"><span data-stu-id="5d800-1856">Dividing zero by zero or infinity by infinity produces the NaN (Not-A-Number) value.</span></span> <span data-ttu-id="5d800-1857">Любое число, деленное на бесконечность, приведет к нулевому значению.</span><span class="sxs-lookup"><span data-stu-id="5d800-1857">Any number divided by infinity will produce a zero value.</span></span>  
  
 <span data-ttu-id="5d800-1858">Целочисленные операции создают исключение <xref:System.ArithmeticException>, если результат не может быть представлен типом результата.</span><span class="sxs-lookup"><span data-stu-id="5d800-1858">Integral operations throw <xref:System.ArithmeticException> if the result cannot be represented in the result type.</span></span> <span data-ttu-id="5d800-1859">Это может произойти, если `value1` является максимальным отрицательным значением, а `value2` равно-1.</span><span class="sxs-lookup"><span data-stu-id="5d800-1859">This can happen if `value1` is the maximum negative value, and `value2` is -1.</span></span>  
  
 <span data-ttu-id="5d800-1860">Целочисленные операции создают исключение <xref:System.DivideByZeroException>, если `value2` равно нулю.</span><span class="sxs-lookup"><span data-stu-id="5d800-1860">Integral operations throw <xref:System.DivideByZeroException> if `value2` is zero.</span></span>  
  
 <span data-ttu-id="5d800-1861">Обратите внимание, что на платформах на базе процессоров Intel при вычислении (minint div-1) создается <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="5d800-1861">Note that on Intel-based platforms an <xref:System.OverflowException> is thrown when computing (minint div -1).</span></span> <span data-ttu-id="5d800-1862">Операции с плавающей запятой никогда не создают исключение (они создают значений NaN или бесконечность).</span><span class="sxs-lookup"><span data-stu-id="5d800-1862">Floating-point operations never throw an exception (they produce NaNs or infinities instead).</span></span>  
  
 <span data-ttu-id="5d800-1863">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `div`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1863">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `div` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1864">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1864">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Div_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Div_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Div_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Div_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Div_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Div_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Div_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Div_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1865">Делит одно целочисленное значение без знака на другое и помещает результат (<see langword="int32" />) в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-1865">Divides two unsigned integer values and pushes the result (<see langword="int32" />) onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1866">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1866">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1867">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1867">Format</span></span>|<span data-ttu-id="5d800-1868">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1868">Assembly Format</span></span>|<span data-ttu-id="5d800-1869">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1869">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1870">5C</span><span class="sxs-lookup"><span data-stu-id="5d800-1870">5C</span></span>|<span data-ttu-id="5d800-1871">Div. un</span><span class="sxs-lookup"><span data-stu-id="5d800-1871">div.un</span></span>|<span data-ttu-id="5d800-1872">Делит два значения без знака, возвращая частное.</span><span class="sxs-lookup"><span data-stu-id="5d800-1872">Divides two values, unsigned, returning a quotient.</span></span>|  
  
 <span data-ttu-id="5d800-1873">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1873">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1874">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1874">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1875">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1875">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-1876">`value2` и `value1` извлекаются из стека; `value1` делится на `value2`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1876">`value2` and `value1` are popped from the stack; `value1` is divided by `value2`.</span></span>  
  
4.  <span data-ttu-id="5d800-1877">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1877">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1878">Инструкция `div.un` делит `value1` на `value2`, как целые числа без знака, и помещает `result` в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1878">The `div.un` instruction computes `value1` divided by `value2`, both taken as unsigned integers, and pushes the `result` on the stack.</span></span>  
  
 <span data-ttu-id="5d800-1879">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `div.un`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1879">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `div.un` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1880">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1880">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dup">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Dup;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Dup" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Dup" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Dup As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Dup;" />
      <MemberSignature Language="F#" Value=" staticval mutable Dup : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Dup" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1881">Копирует текущее верхнее значение в стеке вычислений и помещает копию в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-1881">Copies the current topmost value on the evaluation stack, and then pushes the copy onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1882">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1882">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1883">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1883">Format</span></span>|<span data-ttu-id="5d800-1884">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1884">Assembly Format</span></span>|<span data-ttu-id="5d800-1885">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1885">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1886">25</span><span class="sxs-lookup"><span data-stu-id="5d800-1886">25</span></span>|<span data-ttu-id="5d800-1887">DUP</span><span class="sxs-lookup"><span data-stu-id="5d800-1887">dup</span></span>|<span data-ttu-id="5d800-1888">Дублирует значение в верхней части стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1888">Duplicates the value on the top of the stack.</span></span>|  
  
 <span data-ttu-id="5d800-1889">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1889">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1890">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1890">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1891">`value` извлекается из стека для дублирования.</span><span class="sxs-lookup"><span data-stu-id="5d800-1891">`value` is popped off of the stack for duplication.</span></span>  
  
3.  <span data-ttu-id="5d800-1892">`value` помещается обратно в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1892">`value` is pushed back onto the stack.</span></span>  
  
4.  <span data-ttu-id="5d800-1893">Повторяющееся значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1893">A duplicate value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1894">Инструкция `dup` дублирует верхний элемент стека и оставляет два одинаковых значения на вершине.</span><span class="sxs-lookup"><span data-stu-id="5d800-1894">The `dup` instruction duplicates the top element of the stack, and leaves two identical values atop it.</span></span>  
  
 <span data-ttu-id="5d800-1895">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `dup`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1895">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `dup` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1896">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1896">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Endfilter">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Endfilter;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Endfilter" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Endfilter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Endfilter As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Endfilter;" />
      <MemberSignature Language="F#" Value=" staticval mutable Endfilter : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Endfilter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1897">Передает управление из предложения <see langword="filter" /> исключения обратно в обработчик исключений CLI.</span><span class="sxs-lookup"><span data-stu-id="5d800-1897">Transfers control from the <see langword="filter" /> clause of an exception back to the Common Language Infrastructure (CLI) exception handler.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1898">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1898">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1899">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1899">Format</span></span>|<span data-ttu-id="5d800-1900">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1900">Assembly Format</span></span>|<span data-ttu-id="5d800-1901">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1901">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1902">FE 11</span><span class="sxs-lookup"><span data-stu-id="5d800-1902">FE 11</span></span>|<span data-ttu-id="5d800-1903">Команда endfilter</span><span class="sxs-lookup"><span data-stu-id="5d800-1903">endfilter</span></span>|<span data-ttu-id="5d800-1904">Завершающее предложение фильтра обработки исключений SEH.</span><span class="sxs-lookup"><span data-stu-id="5d800-1904">End filter clause of SEH exception handling.</span></span>|  
  
 <span data-ttu-id="5d800-1905">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1905">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1906">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1906">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1907">`value` извлекается из стека; `endfilter` выполняется, и управление передается обработчику исключений.</span><span class="sxs-lookup"><span data-stu-id="5d800-1907">`value` is popped from the stack; `endfilter` is executed and control is transferred to the exception handler.</span></span>  
  
 <span data-ttu-id="5d800-1908">`Value` (который должен иметь тип `int32` и является одним из определенного набора значений) возвращается из предложения Filter.</span><span class="sxs-lookup"><span data-stu-id="5d800-1908">`Value` (which must be of type `int32` and is one of a specific set of values) is returned from the filter clause.</span></span> <span data-ttu-id="5d800-1909">Он должен быть одним из следующих:</span><span class="sxs-lookup"><span data-stu-id="5d800-1909">It should be one of:</span></span>  
  
-   <span data-ttu-id="5d800-1910">`exception_continue_search` (`value` = 0), чтобы продолжить поиск обработчика исключений</span><span class="sxs-lookup"><span data-stu-id="5d800-1910">`exception_continue_search` (`value` = 0) to continue searching for an exception handler</span></span>  
  
-   <span data-ttu-id="5d800-1911">`exception_execute_handler` (`value` = 1), чтобы начать второй этап обработки исключений, в котором блоки finally выполняются до тех пор, пока не будет найден обработчик, связанный с этим предложением фильтра.</span><span class="sxs-lookup"><span data-stu-id="5d800-1911">`exception_execute_handler` (`value` = 1) to start the second phase of exception handling where finally blocks are run until the handler associated with this filter clause is located.</span></span> <span data-ttu-id="5d800-1912">После обнаружения выполняется обработчик.</span><span class="sxs-lookup"><span data-stu-id="5d800-1912">Upon discovery, the handler is executed.</span></span>  
  
 <span data-ttu-id="5d800-1913">Другие целочисленные значения приведут к неопределенным результатам.</span><span class="sxs-lookup"><span data-stu-id="5d800-1913">Other integer values will produce unspecified results.</span></span>  
  
 <span data-ttu-id="5d800-1914">Точка входа фильтра, как показано в таблице исключений метода, должна быть первой инструкцией в блоке кода фильтра.</span><span class="sxs-lookup"><span data-stu-id="5d800-1914">The entry point of a filter, as shown in the method's exception table, must be the first instruction in the filter's code block.</span></span> <span data-ttu-id="5d800-1915">Инструкция `endfilter` должна быть последней инструкцией в блоке кода фильтра (следовательно, для одного блока фильтра может быть только один `endfilter`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1915">The `endfilter` instruction must be the last instruction in the filter's code block (hence there can only be one `endfilter` for any single filter block).</span></span> <span data-ttu-id="5d800-1916">После выполнения инструкции `endfilter` Управление логически передается обратно механизму обработки исключений CLI.</span><span class="sxs-lookup"><span data-stu-id="5d800-1916">After executing the `endfilter` instruction, control logically flows back to the CLI exception handling mechanism.</span></span>  
  
 <span data-ttu-id="5d800-1917">Управление не может быть передано в блок фильтра, за исключением механизма исключения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1917">Control cannot be transferred into a filter block except through the exception mechanism.</span></span> <span data-ttu-id="5d800-1918">Управление не может быть передано из блока фильтра, за исключением использования инструкции `throw` или выполнения последней инструкции `endfilter`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1918">Control cannot be transferred out of a filter block except through the use of a `throw` instruction or by executing the final `endfilter` instruction.</span></span> <span data-ttu-id="5d800-1919">Нельзя внедрить блок `try` в блок `filter`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1919">You cannot embed a `try` block within a `filter` block.</span></span> <span data-ttu-id="5d800-1920">Если в блоке `filter` возникает исключение, оно перехватывается и возвращается значение 0 (`exception_continue_search`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1920">If an exception is thrown inside the `filter` block, it is intercepted and a value of 0 (`exception_continue_search`) is returned.</span></span>  
  
 <span data-ttu-id="5d800-1921">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `endfilter`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1921">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `endfilter` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1922">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1922">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Endfinally">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Endfinally;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Endfinally" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Endfinally" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Endfinally As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Endfinally;" />
      <MemberSignature Language="F#" Value=" staticval mutable Endfinally : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Endfinally" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1923">Передает управление из предложения <see langword="fault" /> или <see langword="finally" /> блока исключения обратно обработчику исключений CLI.</span><span class="sxs-lookup"><span data-stu-id="5d800-1923">Transfers control from the <see langword="fault" /> or <see langword="finally" /> clause of an exception block back to the Common Language Infrastructure (CLI) exception handler.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1924">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1924">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1925">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1925">Format</span></span>|<span data-ttu-id="5d800-1926">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1926">Assembly Format</span></span>|<span data-ttu-id="5d800-1927">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1927">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1928">DC</span><span class="sxs-lookup"><span data-stu-id="5d800-1928">DC</span></span>|<span data-ttu-id="5d800-1929">Команда endfinally</span><span class="sxs-lookup"><span data-stu-id="5d800-1929">endfinally</span></span><br /><br /> <span data-ttu-id="5d800-1930">ендфаулт</span><span class="sxs-lookup"><span data-stu-id="5d800-1930">endfault</span></span>|<span data-ttu-id="5d800-1931">Завершает предложение `finally` или `fault` блока исключения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1931">Ends the `finally` or `fault` clause of an exception block.</span></span>|  
  
 <span data-ttu-id="5d800-1932">Для этой инструкции нет поведений перехода стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-1932">There are no stack transition behaviors for this instruction.</span></span>  
  
 <span data-ttu-id="5d800-1933">`Endfinally` и `endfault` обозначают конец предложения `finally` или `fault`, чтобы очистка стека могла продолжаться до вызова обработчика исключений.</span><span class="sxs-lookup"><span data-stu-id="5d800-1933">`Endfinally` and `endfault` signal the end of the `finally` or `fault` clause so that stack unwinding can continue until the exception handler is invoked.</span></span> <span data-ttu-id="5d800-1934">Инструкция `endfinally` или `endfault` передает управление механизму исключения CLI.</span><span class="sxs-lookup"><span data-stu-id="5d800-1934">The `endfinally` or `endfault` instruction transfers control back to the CLI exception mechanism.</span></span> <span data-ttu-id="5d800-1935">Затем механизм выполняет поиск следующего предложения `finally` в цепочке, если защищенный блок был завершен с помощью инструкции leave.</span><span class="sxs-lookup"><span data-stu-id="5d800-1935">The mechanism then searches for the next `finally` clause in the chain if the protected block was exited with a leave instruction.</span></span> <span data-ttu-id="5d800-1936">Если защищенный блок завершился с исключением, интерфейс командной строки выполнит поиск следующего `finally` или `fault` или введите обработчик исключений, выбранный во время первого прохода обработки исключений.</span><span class="sxs-lookup"><span data-stu-id="5d800-1936">If the protected block was exited with an exception, the CLI will search for the next `finally` or `fault`, or enter the exception handler chosen during the first pass of exception handling.</span></span>  
  
 <span data-ttu-id="5d800-1937">Инструкция `endfinally` может отображаться только в блоке `finally`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1937">An `endfinally` instruction might only appear lexically within a `finally` block.</span></span> <span data-ttu-id="5d800-1938">В отличие от инструкции `endfilter`, нет необходимости в конце блока с инструкцией `endfinally`, и в блоке может быть столько инструкций `endfinally`, сколько необходимо.</span><span class="sxs-lookup"><span data-stu-id="5d800-1938">Unlike the `endfilter` instruction, there is no requirement that the block end with an `endfinally` instruction, and there can be as many `endfinally` instructions within the block as required.</span></span> <span data-ttu-id="5d800-1939">Эти же ограничения применяются к инструкциям `endfault` и блоку `fault`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1939">These same restrictions apply to the `endfault` instruction and the `fault` block.</span></span>  
  
 <span data-ttu-id="5d800-1940">Элемент управления не может быть передан в блок `finally` (или `fault`), за исключением механизма исключения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1940">Control cannot be transferred into a `finally` (or `fault`) block except through the exception mechanism.</span></span> <span data-ttu-id="5d800-1941">Элемент управления не может быть передан из блока `finally` (или `fault`), за исключением использования инструкции `throw` или выполнения инструкции `endfinally` (или `endfault`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1941">Control cannot be transferred out of a `finally` (or `fault`) block except through the use of a `throw` instruction or executing the `endfinally` (or `endfault`) instruction.</span></span> <span data-ttu-id="5d800-1942">В частности, нельзя попадать в блок `finally` (или `fault`) или выполнить инструкцию <xref:System.Reflection.Emit.OpCodes.Ret> или <xref:System.Reflection.Emit.OpCodes.Leave> в блоке `finally` (или `fault`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1942">In particular, you cannot "fall out" of a `finally` (or `fault`) block or to execute a <xref:System.Reflection.Emit.OpCodes.Ret> or <xref:System.Reflection.Emit.OpCodes.Leave> instruction within a `finally` (or `fault`) block.</span></span>  
  
 <span data-ttu-id="5d800-1943">Обратите внимание, что инструкции `endfault` и `endfinally` являются псевдонимами, они соответствуют одному коду операции.</span><span class="sxs-lookup"><span data-stu-id="5d800-1943">Note that the `endfault` and `endfinally` instructions are aliases - they correspond to the same opcode.</span></span>  
  
 <span data-ttu-id="5d800-1944">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `endfinally` (`endfault`), а также метод `ILGenerator` <xref:System.Reflection.Emit.ILGenerator.EndExceptionBlock%2A>.</span><span class="sxs-lookup"><span data-stu-id="5d800-1944">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `endfinally` (`endfault`) opcode, as well as the `ILGenerator` method <xref:System.Reflection.Emit.ILGenerator.EndExceptionBlock%2A>.</span></span>  
  
-   <span data-ttu-id="5d800-1945">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1945">ILGenerator.Emit(OpCode)</span></span>  
  
-   <span data-ttu-id="5d800-1946">ILGenerator. Ендексцептионблокк ()</span><span class="sxs-lookup"><span data-stu-id="5d800-1946">ILGenerator.EndExceptionBlock()</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initblk">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Initblk;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Initblk" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Initblk" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Initblk As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Initblk;" />
      <MemberSignature Language="F#" Value=" staticval mutable Initblk : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Initblk" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1947">Инициализирует блок памяти с определенным адресом, присваивая его начальному значению с заданным размером.</span><span class="sxs-lookup"><span data-stu-id="5d800-1947">Initializes a specified block of memory at a specific address to a given size and initial value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1948">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1948">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1949">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1949">Format</span></span>|<span data-ttu-id="5d800-1950">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1950">Assembly Format</span></span>|<span data-ttu-id="5d800-1951">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1951">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1952">FE 18</span><span class="sxs-lookup"><span data-stu-id="5d800-1952">FE 18</span></span>|<span data-ttu-id="5d800-1953">initblk</span><span class="sxs-lookup"><span data-stu-id="5d800-1953">initblk</span></span>|<span data-ttu-id="5d800-1954">Установите для каждого расположения в блоке памяти заданное значение.</span><span class="sxs-lookup"><span data-stu-id="5d800-1954">Set each location in a block of memory to a given value.</span></span>|  
  
 <span data-ttu-id="5d800-1955">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1955">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1956">Начальный адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1956">A starting address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1957">Значение инициализации помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1957">An initialization value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-1958">Число байтов для инициализации помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1958">The number of bytes to initialize is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="5d800-1959">Число байтов, значение инициализации и начальный адрес извлекаются из стека, а инициализация выполняется в соответствии с их значениями.</span><span class="sxs-lookup"><span data-stu-id="5d800-1959">The number of bytes, the initialization value, and the starting address are popped from the stack, and the initialization is performed as per their values.</span></span>  
  
 <span data-ttu-id="5d800-1960">Инструкция `initblk` задает число (`unsigned int32`) байтов, начиная с указанного адреса (типа `native int`, `&` или `*`) к значению инициализации (типа `unsigned int8`).</span><span class="sxs-lookup"><span data-stu-id="5d800-1960">The `initblk` instruction sets the number (`unsigned int32`) of bytes starting at the specified address (of type `native int`, `&`, or `*`) to the initialization value (of type `unsigned int8`).</span></span> <span data-ttu-id="5d800-1961">`initblk` предполагает, что начальный адрес соответствует естественному размеру компьютера.</span><span class="sxs-lookup"><span data-stu-id="5d800-1961">`initblk` assumes that the starting address is aligned to the natural size of the machine.</span></span>  
  
 <span data-ttu-id="5d800-1962">Операция `initblk` может быть изменена непосредственно перед инструкциями префикса <xref:System.Reflection.Emit.OpCodes.Volatile> или <xref:System.Reflection.Emit.OpCodes.Unaligned>.</span><span class="sxs-lookup"><span data-stu-id="5d800-1962">The operation of the `initblk` instructions can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="5d800-1963">При обнаружении недопустимого адреса может возникнуть исключение <xref:System.NullReferenceException>.</span><span class="sxs-lookup"><span data-stu-id="5d800-1963"><xref:System.NullReferenceException> may be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="5d800-1964">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `initblk`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1964">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `initblk` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1965">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-1965">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Initobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Initobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Initobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Initobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Initobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Initobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Initobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1966">Инициализирует каждое поле типа значения с определенным адресом пустой ссылкой или значением 0 соответствующего простого типа.</span><span class="sxs-lookup"><span data-stu-id="5d800-1966">Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1967">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1967">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1968">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1968">Format</span></span>|<span data-ttu-id="5d800-1969">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1969">Assembly Format</span></span>|<span data-ttu-id="5d800-1970">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1970">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1971">FE 15 < `T` @ NO__T-1</span><span class="sxs-lookup"><span data-stu-id="5d800-1971">FE 15 < `T` ></span></span>|<span data-ttu-id="5d800-1972">`initobj` `typeTok`</span><span class="sxs-lookup"><span data-stu-id="5d800-1972">`initobj` `typeTok`</span></span>|<span data-ttu-id="5d800-1973">Инициализирует тип значения.</span><span class="sxs-lookup"><span data-stu-id="5d800-1973">Initializes a value type.</span></span>|  
  
 <span data-ttu-id="5d800-1974">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1974">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1975">Адрес типа значения для инициализации помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1975">The address of the value type to initialize is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1976">Адрес извлекается из стека; Тип значения по указанному адресу инициализируется как тип `typeTok`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1976">The address is popped from the stack; the value type at the specified address is initialized as type `typeTok`.</span></span>  
  
 <span data-ttu-id="5d800-1977">Инструкция `initobj` инициализирует каждое поле типа значения, заданное отправленным адресом (типа `native int`, `&` или `*`), на пустую ссылку или 0 соответствующего типа-примитива.</span><span class="sxs-lookup"><span data-stu-id="5d800-1977">The `initobj` instruction initializes each field of the value type specified by the pushed address (of type `native int`, `&`, or `*`) to a null reference or a 0 of the appropriate primitive type.</span></span> <span data-ttu-id="5d800-1978">После вызова этого метода экземпляр готов к вызову метода-конструктора.</span><span class="sxs-lookup"><span data-stu-id="5d800-1978">After this method is called, the instance is ready for a constructor method to be called.</span></span> <span data-ttu-id="5d800-1979">Если `typeTok` является ссылочным типом, эта инструкция имеет тот же результат, что и `ldnull`, за которым следует `stind.ref`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1979">If `typeTok` is a reference type, this instruction has the same effect as `ldnull` followed by `stind.ref`.</span></span>  
  
 <span data-ttu-id="5d800-1980">В отличие от <xref:System.Reflection.Emit.OpCodes.Newobj>, `initobj` не вызывает метод конструктора.</span><span class="sxs-lookup"><span data-stu-id="5d800-1980">Unlike <xref:System.Reflection.Emit.OpCodes.Newobj>, `initobj` does not call the constructor method.</span></span> <span data-ttu-id="5d800-1981">`Initobj` предназначен для инициализации типов значений, тогда как `newobj` используется для выделения и инициализации объектов.</span><span class="sxs-lookup"><span data-stu-id="5d800-1981">`Initobj` is intended for initializing value types, while `newobj` is used to allocate and initialize objects.</span></span>  
  
 <span data-ttu-id="5d800-1982">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `initobj`:</span><span class="sxs-lookup"><span data-stu-id="5d800-1982">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `initobj` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-1983">ILGenerator. Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="5d800-1983">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Isinst">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Isinst;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Isinst" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Isinst" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Isinst As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Isinst;" />
      <MemberSignature Language="F#" Value=" staticval mutable Isinst : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Isinst" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-1984">Проверяет, является ли ссылка на объект (с типом <see langword="O" />) экземпляром определенного класса.</span><span class="sxs-lookup"><span data-stu-id="5d800-1984">Tests whether an object reference (type <see langword="O" />) is an instance of a particular class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-1985">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1985">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-1986">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-1986">Format</span></span>|<span data-ttu-id="5d800-1987">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-1987">Assembly Format</span></span>|<span data-ttu-id="5d800-1988">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-1988">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-1989">75 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5d800-1989">75 < `T` ></span></span>|<span data-ttu-id="5d800-1990">исинст `class`</span><span class="sxs-lookup"><span data-stu-id="5d800-1990">isinst `class`</span></span>|<span data-ttu-id="5d800-1991">Проверяет, является ли ссылка на объект экземпляром `class`, возвращая либо пустую ссылку, либо экземпляр этого класса или интерфейса.</span><span class="sxs-lookup"><span data-stu-id="5d800-1991">Tests if an object reference is an instance of `class`, returning either a null reference or an instance of that class or interface.</span></span>|  
  
 <span data-ttu-id="5d800-1992">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-1992">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-1993">Ссылка на объект помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1993">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-1994">Ссылка на объект извлекается из стека и проверяется на наличие экземпляра класса, переданного `class`.</span><span class="sxs-lookup"><span data-stu-id="5d800-1994">The object reference is popped from the stack and tested to see if it is an instance of the class passed in `class`.</span></span>  
  
3.  <span data-ttu-id="5d800-1995">Результат (ссылка на объект или пустая ссылка) помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-1995">The result (either an object reference or a null reference) is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-1996">`Class` — это токен метаданных, указывающий нужный класс.</span><span class="sxs-lookup"><span data-stu-id="5d800-1996">`Class` is a metadata token indicating the desired class.</span></span> <span data-ttu-id="5d800-1997">Если класс объекта в верхней части стека реализует `class` (если `class` является интерфейсом) или является производным классом `class` (если `class` является обычным классом), то он приводится к типу `class`, а результат помещается в стек. , как будто было вызвано <xref:System.Reflection.Emit.OpCodes.Castclass>.</span><span class="sxs-lookup"><span data-stu-id="5d800-1997">If the class of the object on the top of the stack implements `class` (if `class` is an interface) or is a derived class of `class` (if `class` is a regular class) then it is cast to type `class` and the result is pushed on the stack, exactly as though <xref:System.Reflection.Emit.OpCodes.Castclass> had been called.</span></span> <span data-ttu-id="5d800-1998">В противном случае в стек помещается пустая ссылка.</span><span class="sxs-lookup"><span data-stu-id="5d800-1998">Otherwise, a null reference is pushed on the stack.</span></span> <span data-ttu-id="5d800-1999">Если ссылка на объект является пустой ссылкой, то `isinst` аналогичным образом возвращает пустую ссылку.</span><span class="sxs-lookup"><span data-stu-id="5d800-1999">If the object reference itself is a null reference, then `isinst` likewise returns a null reference.</span></span>  
  
 <span data-ttu-id="5d800-2000">Если класс не найден, возникает исключение <xref:System.TypeLoadException>.</span><span class="sxs-lookup"><span data-stu-id="5d800-2000"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="5d800-2001">Обычно это обнаруживается при преобразовании инструкций промежуточного языка MSIL в машинный код, а не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-2001">This is typically detected when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="5d800-2002">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `isinst`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2002">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `isinst` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2003">ILGenerator. Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="5d800-2003">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Jmp">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Jmp;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Jmp" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Jmp" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Jmp As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Jmp;" />
      <MemberSignature Language="F#" Value=" staticval mutable Jmp : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Jmp" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2004">Прекращает выполнение текущего метода и переходит к заданному методу.</span><span class="sxs-lookup"><span data-stu-id="5d800-2004">Exits current method and jumps to specified method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2005">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2005">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2006">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2006">Format</span></span>|<span data-ttu-id="5d800-2007">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2007">Assembly Format</span></span>|<span data-ttu-id="5d800-2008">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2008">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2009">27 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5d800-2009">27 < `T` ></span></span>|<span data-ttu-id="5d800-2010">Переход `method`</span><span class="sxs-lookup"><span data-stu-id="5d800-2010">jmp `method`</span></span>|<span data-ttu-id="5d800-2011">Завершение работы текущего метода и переход к указанному методу.</span><span class="sxs-lookup"><span data-stu-id="5d800-2011">Exit current method and jump to specified method.</span></span>|  
  
 <span data-ttu-id="5d800-2012">Для этой инструкции нет поведений перехода стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-2012">There are no stack transition behaviors for this instruction.</span></span>  
  
 <span data-ttu-id="5d800-2013">Инструкция `jmp` (переход) передает управление методу, указанному `method`, который является маркером метаданных для ссылки на метод.</span><span class="sxs-lookup"><span data-stu-id="5d800-2013">The `jmp` (jump) instruction transfers control to the method specified by `method`, which is a metadata token for a method reference.</span></span> <span data-ttu-id="5d800-2014">Текущие аргументы передаются в целевой метод.</span><span class="sxs-lookup"><span data-stu-id="5d800-2014">The current arguments are transferred to the destination method.</span></span>  
  
 <span data-ttu-id="5d800-2015">При выполнении этой инструкции стек вычислений должен быть пустым.</span><span class="sxs-lookup"><span data-stu-id="5d800-2015">The evaluation stack must be empty when this instruction is executed.</span></span> <span data-ttu-id="5d800-2016">Соглашение о вызовах, число и тип аргументов в адресе назначения должны соответствовать требованиям текущего метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-2016">The calling convention, number and type of arguments at the destination address must match that of the current method.</span></span>  
  
 <span data-ttu-id="5d800-2017">Инструкция `jmp` не может использоваться для передачи управления из блока `try`, `filter`, `catch` или `finally`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2017">The `jmp` instruction cannot be used to transferred control out of a `try`, `filter`, `catch`, or `finally` block.</span></span>  
  
 <span data-ttu-id="5d800-2018">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `jmp`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2018">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `jmp` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2019">ILGenerator. Emit (код операции, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="5d800-2019">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2020">Загружает аргумент (на который ссылается указанное значение индекса) в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2020">Loads an argument (referenced by a specified index value) onto the stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2021">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2021">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2022">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2022">Format</span></span>|<span data-ttu-id="5d800-2023">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2023">Assembly Format</span></span>|<span data-ttu-id="5d800-2024">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2024">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2025">< FE 09 `unsigned int16` @ NO__T-1</span><span class="sxs-lookup"><span data-stu-id="5d800-2025">FE 09 < `unsigned int16` ></span></span>|<span data-ttu-id="5d800-2026">лдарг `index`</span><span class="sxs-lookup"><span data-stu-id="5d800-2026">ldarg `index`</span></span>|<span data-ttu-id="5d800-2027">Загрузка аргумента с `index` в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2027">Load argument at `index` onto stack.</span></span>|  
  
 <span data-ttu-id="5d800-2028">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2028">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2029">Значение аргумента в `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2029">The argument value at `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2030">Инструкция `ldarg` помещает аргумент, индексируемый по `index`, где аргументы индексируются от 0 до назад в стеке вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2030">The `ldarg` instruction pushes the argument indexed at `index`, where arguments are indexed from 0 onwards, onto the evaluation stack.</span></span> <span data-ttu-id="5d800-2031">Инструкцию `ldarg` можно использовать для загрузки типа значения или примитивного значения в стек, скопировав его из входящего аргумента.</span><span class="sxs-lookup"><span data-stu-id="5d800-2031">The `ldarg` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="5d800-2032">Тип значения аргумента совпадает с типом аргумента, как указано в сигнатуре текущего метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-2032">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="5d800-2033">Для процедур, принимающих список аргументов переменной длины, инструкция `ldarg` может использоваться только для начальных фиксированных аргументов, а не в переменной части сигнатуры (Дополнительные сведения см. в инструкции <xref:System.Reflection.Emit.OpCodes.Arglist>).</span><span class="sxs-lookup"><span data-stu-id="5d800-2033">For procedures that take a variable-length argument list, the `ldarg` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature (see the <xref:System.Reflection.Emit.OpCodes.Arglist> instruction for more details).</span></span>  
  
 <span data-ttu-id="5d800-2034">Аргументы, которые содержат целочисленное значение меньше 4 байт, разворачиваются до типа `int32`, когда они загружаются в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2034">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="5d800-2035">Значения с плавающей запятой разворачиваются до их собственного размера (тип `F`).</span><span class="sxs-lookup"><span data-stu-id="5d800-2035">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="5d800-2036">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldarg`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2036">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2037">ILGenerator. Emit (код операции, короткий)</span><span class="sxs-lookup"><span data-stu-id="5d800-2037">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2038">Загружает аргумент с индексом 0 в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2038">Loads the argument at index 0 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2039">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2039">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2040">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2040">Format</span></span>|<span data-ttu-id="5d800-2041">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2041">Assembly Format</span></span>|<span data-ttu-id="5d800-2042">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2042">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2043">02</span><span class="sxs-lookup"><span data-stu-id="5d800-2043">02</span></span>|<span data-ttu-id="5d800-2044">лдарг. 0</span><span class="sxs-lookup"><span data-stu-id="5d800-2044">ldarg.0</span></span>|<span data-ttu-id="5d800-2045">Загрузить аргумент 0 в стек</span><span class="sxs-lookup"><span data-stu-id="5d800-2045">Load argument 0 onto stack</span></span>|  
  
 <span data-ttu-id="5d800-2046">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2046">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2047">Значение аргумента с индексом 0 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2047">The argument value at index 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2048">Инструкция `ldarg.0` является эффективной кодировкой для загрузки значения аргумента по индексу 0.</span><span class="sxs-lookup"><span data-stu-id="5d800-2048">The `ldarg.0` instruction is an efficient encoding for loading the argument value at index 0.</span></span>  
  
 <span data-ttu-id="5d800-2049">Инструкция `ldarg.0` помещает в стек вычислений аргумент с индексом 0.</span><span class="sxs-lookup"><span data-stu-id="5d800-2049">The `ldarg.0` instruction pushes the argument indexed at 0 onto the evaluation stack.</span></span> <span data-ttu-id="5d800-2050">Инструкцию `ldarg.0` можно использовать для загрузки типа значения или примитивного значения в стек, скопировав его из входящего аргумента.</span><span class="sxs-lookup"><span data-stu-id="5d800-2050">The `ldarg.0` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="5d800-2051">Тип значения аргумента совпадает с типом аргумента, как указано в сигнатуре текущего метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-2051">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="5d800-2052">Аргументы, которые содержат целочисленное значение меньше 4 байт, разворачиваются до типа `int32`, когда они загружаются в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2052">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="5d800-2053">Значения с плавающей запятой разворачиваются до их собственного размера (тип `F`).</span><span class="sxs-lookup"><span data-stu-id="5d800-2053">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="5d800-2054">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldarg.0`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2054">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.0` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2055">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2055">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2056">Загружает аргумент с индексом 1 в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2056">Loads the argument at index 1 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2057">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2057">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2058">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2058">Format</span></span>|<span data-ttu-id="5d800-2059">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2059">Assembly Format</span></span>|<span data-ttu-id="5d800-2060">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2060">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2061">03</span><span class="sxs-lookup"><span data-stu-id="5d800-2061">03</span></span>|<span data-ttu-id="5d800-2062">лдарг. 1</span><span class="sxs-lookup"><span data-stu-id="5d800-2062">ldarg.1</span></span>|<span data-ttu-id="5d800-2063">Загрузка аргумента 1 в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2063">Load argument 1 onto stack.</span></span>|  
  
 <span data-ttu-id="5d800-2064">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2064">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2065">Значение аргумента с индексом 1 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2065">The argument value at index 1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2066">Инструкция `ldarg.1` является эффективной кодировкой для загрузки значения аргумента с индексом 1.</span><span class="sxs-lookup"><span data-stu-id="5d800-2066">The `ldarg.1` instruction is an efficient encoding for loading the argument value at index 1.</span></span>  
  
 <span data-ttu-id="5d800-2067">Инструкция `ldarg.1` помещает в стек вычислений аргумент с индексом 1.</span><span class="sxs-lookup"><span data-stu-id="5d800-2067">The `ldarg.1` instruction pushes the argument indexed at 1 onto the evaluation stack.</span></span> <span data-ttu-id="5d800-2068">Инструкцию `ldarg.1` можно использовать для загрузки типа значения или примитивного значения в стек, скопировав его из входящего аргумента.</span><span class="sxs-lookup"><span data-stu-id="5d800-2068">The `ldarg.1` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="5d800-2069">Тип значения аргумента совпадает с типом аргумента, как указано в сигнатуре текущего метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-2069">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="5d800-2070">Аргументы, которые содержат целочисленное значение меньше 4 байт, разворачиваются до типа `int32`, когда они загружаются в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2070">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="5d800-2071">Значения с плавающей запятой разворачиваются до их собственного размера (тип `F`).</span><span class="sxs-lookup"><span data-stu-id="5d800-2071">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="5d800-2072">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldarg.1`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2072">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.1` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2073">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2073">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2074">Загружает аргумент с индексом 2 в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2074">Loads the argument at index 2 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2075">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2075">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2076">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2076">Format</span></span>|<span data-ttu-id="5d800-2077">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2077">Assembly Format</span></span>|<span data-ttu-id="5d800-2078">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2078">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2079">04</span><span class="sxs-lookup"><span data-stu-id="5d800-2079">04</span></span>|<span data-ttu-id="5d800-2080">лдарг. 2</span><span class="sxs-lookup"><span data-stu-id="5d800-2080">ldarg.2</span></span>|<span data-ttu-id="5d800-2081">Загрузка аргумента 2 в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2081">Load argument 2 onto stack.</span></span>|  
  
 <span data-ttu-id="5d800-2082">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2082">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2083">Значение аргумента с индексом 2 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2083">The argument value at index 2 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2084">Инструкция `ldarg.2` является эффективной кодировкой для загрузки значения аргумента по индексу 2.</span><span class="sxs-lookup"><span data-stu-id="5d800-2084">The `ldarg.2` instruction is an efficient encoding for loading the argument value at index 2.</span></span>  
  
 <span data-ttu-id="5d800-2085">Инструкция `ldarg.2` помещает аргумент с индексом 2 в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2085">The `ldarg.2` instruction pushes the argument indexed at 2 onto the evaluation stack.</span></span> <span data-ttu-id="5d800-2086">Инструкцию `ldarg.2` можно использовать для загрузки типа значения или примитивного значения в стек, скопировав его из входящего аргумента.</span><span class="sxs-lookup"><span data-stu-id="5d800-2086">The `ldarg.2` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="5d800-2087">Тип значения аргумента совпадает с типом аргумента, как указано в сигнатуре текущего метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-2087">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="5d800-2088">Аргументы, которые содержат целочисленное значение меньше 4 байт, разворачиваются до типа `int32`, когда они загружаются в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2088">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="5d800-2089">Значения с плавающей запятой разворачиваются до их собственного размера (тип `F`).</span><span class="sxs-lookup"><span data-stu-id="5d800-2089">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="5d800-2090">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldarg.2`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2090">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.2` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2091">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2091">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2092">Загружает аргумент с индексом 3 в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2092">Loads the argument at index 3 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2093">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2093">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2094">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2094">Format</span></span>|<span data-ttu-id="5d800-2095">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2095">Assembly Format</span></span>|<span data-ttu-id="5d800-2096">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2096">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2097">05</span><span class="sxs-lookup"><span data-stu-id="5d800-2097">05</span></span>|<span data-ttu-id="5d800-2098">лдарг. 3</span><span class="sxs-lookup"><span data-stu-id="5d800-2098">ldarg.3</span></span>|<span data-ttu-id="5d800-2099">Загрузка аргумента 3 в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2099">Load argument 3 onto stack.</span></span>|  
  
 <span data-ttu-id="5d800-2100">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2100">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2101">Значение аргумента с индексом 3 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2101">The argument value at index 3 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2102">Инструкция `ldarg.3` является эффективной кодировкой для загрузки значения аргумента с индексом 3.</span><span class="sxs-lookup"><span data-stu-id="5d800-2102">The `ldarg.3` instruction is an efficient encoding for loading the argument value at index 3.</span></span>  
  
 <span data-ttu-id="5d800-2103">Инструкция `ldarg.3` помещает аргумент с индексом 3 в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2103">The `ldarg.3` instruction pushes the argument indexed at 3 onto the evaluation stack.</span></span> <span data-ttu-id="5d800-2104">Инструкцию `ldarg.3` можно использовать для загрузки типа значения или примитивного значения в стек, скопировав его из входящего аргумента.</span><span class="sxs-lookup"><span data-stu-id="5d800-2104">The `ldarg.3` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="5d800-2105">Тип значения аргумента совпадает с типом аргумента, как указано в сигнатуре текущего метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-2105">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="5d800-2106">Аргументы, которые содержат целочисленное значение меньше 4 байт, разворачиваются до типа `int32`, когда они загружаются в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2106">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="5d800-2107">Значения с плавающей запятой разворачиваются до их собственного размера (тип `F`).</span><span class="sxs-lookup"><span data-stu-id="5d800-2107">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="5d800-2108">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldarg.3`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2108">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.3` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2109">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2109">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2110">Загружает аргумент (на который ссылается указанное короткое значение индекса) в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2110">Loads the argument (referenced by a specified short form index) onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2111">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2111">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2112">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2112">Format</span></span>|<span data-ttu-id="5d800-2113">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2113">Assembly Format</span></span>|<span data-ttu-id="5d800-2114">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2114">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2115">0E < `unsigned int8` @ NO__T-1</span><span class="sxs-lookup"><span data-stu-id="5d800-2115">0E < `unsigned int8` ></span></span>|<span data-ttu-id="5d800-2116">лдарг. s `index`</span><span class="sxs-lookup"><span data-stu-id="5d800-2116">ldarg.s `index`</span></span>|<span data-ttu-id="5d800-2117">Загрузка аргумента с `index` в стек, краткая форма.</span><span class="sxs-lookup"><span data-stu-id="5d800-2117">Load argument at `index` onto stack, short form.</span></span>|  
  
 <span data-ttu-id="5d800-2118">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2118">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2119">Значение аргумента в `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2119">The argument value at `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2120">Инструкция `ldarg.s` — это эффективная кодировка для загрузки аргументов, индексируемых от 4 до 255.</span><span class="sxs-lookup"><span data-stu-id="5d800-2120">The `ldarg.s` instruction is an efficient encoding for loading arguments indexed from 4 through 255.</span></span>  
  
 <span data-ttu-id="5d800-2121">Инструкция `ldarg.s` помещает аргумент, индексируемый по `index`, где аргументы индексируются от 0 до назад в стеке вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2121">The `ldarg.s` instruction pushes the argument indexed at `index`, where arguments are indexed from 0 onwards, onto the evaluation stack.</span></span> <span data-ttu-id="5d800-2122">Инструкцию `ldarg.s` можно использовать для загрузки типа значения или примитивного значения в стек, скопировав его из входящего аргумента.</span><span class="sxs-lookup"><span data-stu-id="5d800-2122">The `ldarg.s` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="5d800-2123">Тип значения аргумента совпадает с типом аргумента, как указано в сигнатуре текущего метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-2123">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="5d800-2124">Для процедур, принимающих список аргументов переменной длины, инструкция `ldarg.s` может использоваться только для начальных фиксированных аргументов, а не в переменной части сигнатуры (Дополнительные сведения см. в инструкции <xref:System.Reflection.Emit.OpCodes.Arglist>).</span><span class="sxs-lookup"><span data-stu-id="5d800-2124">For procedures that take a variable-length argument list, the `ldarg.s` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature (see the <xref:System.Reflection.Emit.OpCodes.Arglist> instruction for more details).</span></span>  
  
 <span data-ttu-id="5d800-2125">Аргументы, которые содержат целочисленное значение меньше 4 байт, разворачиваются до типа `int32`, когда они загружаются в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2125">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="5d800-2126">Значения с плавающей запятой разворачиваются до их собственного размера (тип `F`).</span><span class="sxs-lookup"><span data-stu-id="5d800-2126">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="5d800-2127">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldarg.s`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2127">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.s` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2128">ILGenerator. Emit (код операции, байт)</span><span class="sxs-lookup"><span data-stu-id="5d800-2128">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarga">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarga;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarga" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarga" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarga As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarga;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarga : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarga" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2129">Загружает адрес аргумента в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2129">Load an argument address onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2130">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2130">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2131">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2131">Format</span></span>|<span data-ttu-id="5d800-2132">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2132">Assembly Format</span></span>|<span data-ttu-id="5d800-2133">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2133">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2134">FE 0A < `unsigned int16` @ NO__T-1</span><span class="sxs-lookup"><span data-stu-id="5d800-2134">FE 0A < `unsigned int16` ></span></span>|<span data-ttu-id="5d800-2135">лдарга `index`</span><span class="sxs-lookup"><span data-stu-id="5d800-2135">ldarga `index`</span></span>|<span data-ttu-id="5d800-2136">Получение адреса аргумента, индексированного по `index`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2136">Fetch the address of argument indexed by `index`.</span></span>|  
  
 <span data-ttu-id="5d800-2137">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2137">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2138">Адрес `addr` аргумента, индексируемого `index`, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2138">The address `addr` of the argument indexed by `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2139">Инструкция `ldarga` извлекает адрес (типа `*`) аргумента, индексируемого `index`, где аргументы индексируются от 0 до.</span><span class="sxs-lookup"><span data-stu-id="5d800-2139">The `ldarga` instruction fetches the address (of type `*`) of the argument indexed by `index`, where arguments are indexed from 0 onwards.</span></span> <span data-ttu-id="5d800-2140">Адрес `addr` всегда согласуется с естественной границей на целевом компьютере.</span><span class="sxs-lookup"><span data-stu-id="5d800-2140">The address `addr` is always aligned to a natural boundary on the target machine.</span></span>  
  
 <span data-ttu-id="5d800-2141">Для процедур, принимающих список аргументов переменной длины, инструкция `ldarga` может использоваться только для начальных фиксированных аргументов, а не в переменной части сигнатуры.</span><span class="sxs-lookup"><span data-stu-id="5d800-2141">For procedures that take a variable-length argument list, the `ldarga` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="5d800-2142">`ldarga` используется для передачи параметров по ссылке.</span><span class="sxs-lookup"><span data-stu-id="5d800-2142">`ldarga` is used for by-ref parameter passing.</span></span> <span data-ttu-id="5d800-2143">В других случаях следует использовать <xref:System.Reflection.Emit.OpCodes.Ldarg> и <xref:System.Reflection.Emit.OpCodes.Starg>.</span><span class="sxs-lookup"><span data-stu-id="5d800-2143">For other cases, <xref:System.Reflection.Emit.OpCodes.Ldarg> and <xref:System.Reflection.Emit.OpCodes.Starg> should be used.</span></span>  
  
 <span data-ttu-id="5d800-2144">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldarga`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2144">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarga` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2145">ILGenerator. Emit (код операции, короткий)</span><span class="sxs-lookup"><span data-stu-id="5d800-2145">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarga_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarga_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarga_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarga_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarga_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarga_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarga_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarga_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2146">Загружает адрес аргумента (короткая форма) в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2146">Load an argument address, in short form, onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2147">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2147">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2148">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2148">Format</span></span>|<span data-ttu-id="5d800-2149">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2149">Assembly Format</span></span>|<span data-ttu-id="5d800-2150">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2150">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2151">0F < `unsigned int8` @ NO__T-1</span><span class="sxs-lookup"><span data-stu-id="5d800-2151">0F < `unsigned int8` ></span></span>|<span data-ttu-id="5d800-2152">лдарга. s `index`</span><span class="sxs-lookup"><span data-stu-id="5d800-2152">ldarga.s `index`</span></span>|<span data-ttu-id="5d800-2153">Получение адреса аргумента, индексированного по `index`, короткая форма.</span><span class="sxs-lookup"><span data-stu-id="5d800-2153">Fetch the address of argument indexed by `index`, short form.</span></span>|  
  
 <span data-ttu-id="5d800-2154">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2154">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2155">Адрес `addr` аргумента, индексируемого `index`, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2155">The address `addr` of the argument indexed by `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2156">`ldarga.s` (краткая форма `ldarga`) следует использовать для номеров аргументов от 0 до 255 и является более эффективной кодировкой.</span><span class="sxs-lookup"><span data-stu-id="5d800-2156">`ldarga.s` (the short form of `ldarga`) should be used for argument numbers 0 through 255, and is a more efficient encoding.</span></span>  
  
 <span data-ttu-id="5d800-2157">Инструкция `ldarga.s` извлекает адрес (типа @ no__t-1) аргумента, индексируемого по `index`, где аргументы индексируются от 0 до.</span><span class="sxs-lookup"><span data-stu-id="5d800-2157">The `ldarga.s` instruction fetches the address (of type`*`) of the argument indexed by `index`, where arguments are indexed from 0 onwards.</span></span> <span data-ttu-id="5d800-2158">Адрес `addr` всегда согласуется с естественной границей на целевом компьютере.</span><span class="sxs-lookup"><span data-stu-id="5d800-2158">The address `addr` is always aligned to a natural boundary on the target machine.</span></span>  
  
 <span data-ttu-id="5d800-2159">Для процедур, принимающих список аргументов переменной длины, инструкция `ldarga.s` может использоваться только для начальных фиксированных аргументов, а не в переменной части сигнатуры.</span><span class="sxs-lookup"><span data-stu-id="5d800-2159">For procedures that take a variable-length argument list, the `ldarga.s` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="5d800-2160">`ldarga.s` используется для передачи параметров по ссылке.</span><span class="sxs-lookup"><span data-stu-id="5d800-2160">`ldarga.s` is used for by-ref parameter passing.</span></span> <span data-ttu-id="5d800-2161">В других случаях следует использовать <xref:System.Reflection.Emit.OpCodes.Ldarg_S> и <xref:System.Reflection.Emit.OpCodes.Starg_S>.</span><span class="sxs-lookup"><span data-stu-id="5d800-2161">For other cases, <xref:System.Reflection.Emit.OpCodes.Ldarg_S> and <xref:System.Reflection.Emit.OpCodes.Starg_S> should be used.</span></span>  
  
 <span data-ttu-id="5d800-2162">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldarga.s`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2162">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarga.s` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2163">ILGenerator. Emit (код операции, байт)</span><span class="sxs-lookup"><span data-stu-id="5d800-2163">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2164">Помещает переданное значение с типом <see langword="int32" /> в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-2164">Pushes a supplied value of type <see langword="int32" /> onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2165">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2165">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2166">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2166">Format</span></span>|<span data-ttu-id="5d800-2167">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2167">Assembly Format</span></span>|<span data-ttu-id="5d800-2168">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2168">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2169">20 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="5d800-2169">20 < `int32` ></span></span>|<span data-ttu-id="5d800-2170">LDC. i4 `num`</span><span class="sxs-lookup"><span data-stu-id="5d800-2170">ldc.i4 `num`</span></span>|<span data-ttu-id="5d800-2171">Помещает значение `num` в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2171">Pushes the value `num` onto the stack.</span></span>|  
  
 <span data-ttu-id="5d800-2172">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2172">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2173">Значение `num` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2173">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2174">Обратите внимание, что существуют специальные короткие (и, следовательно, более эффективные) кодировки для целых чисел от-128 до 127 и особенно короткие кодировки для-1 – 8.</span><span class="sxs-lookup"><span data-stu-id="5d800-2174">Note that there are special short (and hence more efficient) encodings for the integers -128 through 127, and especially short encodings for -1 through 8.</span></span> <span data-ttu-id="5d800-2175">Все короткие кодировки помещают в стек 4-байтовые целые числа.</span><span class="sxs-lookup"><span data-stu-id="5d800-2175">All short encodings push 4 byte integers on the stack.</span></span> <span data-ttu-id="5d800-2176">Более длинные кодировки используются для 8-байтовых целых чисел, 4 и 8 байт с плавающей запятой, а также для 4 байтовых значений, которые не помещаются в короткие формы.</span><span class="sxs-lookup"><span data-stu-id="5d800-2176">Longer encodings are used for 8 byte integers and 4 and 8 byte floating-point numbers, as well as 4-byte values that do not fit in the short forms.</span></span> <span data-ttu-id="5d800-2177">Существует три способа отправки 8-байтовой целочисленной константы в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2177">There are three ways to push an 8 byte integer constant onto the stack</span></span>  
  
 1. <span data-ttu-id="5d800-2178">Используйте инструкцию <xref:System.Reflection.Emit.OpCodes.Ldc_I8> для констант, которые должны быть выражены более чем на 32 бит.</span><span class="sxs-lookup"><span data-stu-id="5d800-2178">Use the <xref:System.Reflection.Emit.OpCodes.Ldc_I8> instruction for constants that must be expressed in more than 32 bits.</span></span>  
  
 2. <span data-ttu-id="5d800-2179">Используйте инструкцию <xref:System.Reflection.Emit.OpCodes.Ldc_I4>, за которой следует <xref:System.Reflection.Emit.OpCodes.Conv_I8> для констант, требующих от 9 до 32 бит.</span><span class="sxs-lookup"><span data-stu-id="5d800-2179">Use the <xref:System.Reflection.Emit.OpCodes.Ldc_I4> instruction followed by a <xref:System.Reflection.Emit.OpCodes.Conv_I8> for constants that require 9 to 32 bits.</span></span>  
  
 3. <span data-ttu-id="5d800-2180">Используйте краткую инструкцию Form, за которой следует <xref:System.Reflection.Emit.OpCodes.Conv_I8> для констант, которые могут быть выражены в 8 или меньшем количестве битов.</span><span class="sxs-lookup"><span data-stu-id="5d800-2180">Use a short form instruction followed by a <xref:System.Reflection.Emit.OpCodes.Conv_I8> for constants that can be expressed in 8 or fewer bits.</span></span>  
  
 <span data-ttu-id="5d800-2181">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldc.i4`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2181">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2182">ILGenerator. Emit (код операции, int)</span><span class="sxs-lookup"><span data-stu-id="5d800-2182">ILGenerator.Emit(OpCode, int)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2183">Помещает целочисленное значение 0 в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-2183">Pushes the integer value of 0 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2184">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2184">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2185">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2185">Format</span></span>|<span data-ttu-id="5d800-2186">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2186">Assembly Format</span></span>|<span data-ttu-id="5d800-2187">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2187">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2188">16</span><span class="sxs-lookup"><span data-stu-id="5d800-2188">16</span></span>|<span data-ttu-id="5d800-2189">LDC. i 4.0</span><span class="sxs-lookup"><span data-stu-id="5d800-2189">ldc.i4.0</span></span>|<span data-ttu-id="5d800-2190">Помещает 0 в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2190">Pushes 0 onto the stack.</span></span>|  
  
 <span data-ttu-id="5d800-2191">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2191">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2192">Значение 0 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2192">The value 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2193">Это специальная короткая кодировка для принудительной отправки целого значения 0.</span><span class="sxs-lookup"><span data-stu-id="5d800-2193">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="5d800-2194">Все специальные короткие кодировки помещают в стек 4-байтовые целые числа.</span><span class="sxs-lookup"><span data-stu-id="5d800-2194">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="5d800-2195">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldc.i4.0`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2195">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.0` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2196">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2196">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2197">Помещает целочисленное значение 1 в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-2197">Pushes the integer value of 1 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2198">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2198">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2199">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2199">Format</span></span>|<span data-ttu-id="5d800-2200">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2200">Assembly Format</span></span>|<span data-ttu-id="5d800-2201">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2201">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2202">17</span><span class="sxs-lookup"><span data-stu-id="5d800-2202">17</span></span>|<span data-ttu-id="5d800-2203">LDC. i 4.1</span><span class="sxs-lookup"><span data-stu-id="5d800-2203">ldc.i4.1</span></span>|<span data-ttu-id="5d800-2204">Помещает 1 в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2204">Pushes 1 onto the stack.</span></span>|  
  
 <span data-ttu-id="5d800-2205">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2205">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2206">Значение 1 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2206">The value 1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2207">Это специальная короткая кодировка для принудительной отправки целого значения 1.</span><span class="sxs-lookup"><span data-stu-id="5d800-2207">This is a special short encoding for the push of the integer value 1.</span></span> <span data-ttu-id="5d800-2208">Все специальные короткие кодировки помещают в стек 4-байтовые целые числа.</span><span class="sxs-lookup"><span data-stu-id="5d800-2208">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="5d800-2209">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldc.i4.1`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2209">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.1` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2210">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2210">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2211">Помещает целочисленное значение 2 в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-2211">Pushes the integer value of 2 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2212">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2212">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2213">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2213">Format</span></span>|<span data-ttu-id="5d800-2214">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2214">Assembly Format</span></span>|<span data-ttu-id="5d800-2215">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2215">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2216">18</span><span class="sxs-lookup"><span data-stu-id="5d800-2216">18</span></span>|<span data-ttu-id="5d800-2217">LDC. i 4.2</span><span class="sxs-lookup"><span data-stu-id="5d800-2217">ldc.i4.2</span></span>|<span data-ttu-id="5d800-2218">Помещает 2 в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2218">Pushes 2 onto the stack.</span></span>|  
  
 <span data-ttu-id="5d800-2219">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2219">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2220">Значение 2 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2220">The value 2 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2221">Это специальная короткая кодировка для принудительной отправки целочисленного значения 2.</span><span class="sxs-lookup"><span data-stu-id="5d800-2221">This is a special short encoding for the push of the integer value 2.</span></span> <span data-ttu-id="5d800-2222">Все специальные короткие кодировки помещают в стек 4-байтовые целые числа.</span><span class="sxs-lookup"><span data-stu-id="5d800-2222">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="5d800-2223">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldc.i4.2`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2223">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.2` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2224">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2224">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2225">Помещает целочисленное значение 3 в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-2225">Pushes the integer value of 3 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2226">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2226">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2227">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2227">Format</span></span>|<span data-ttu-id="5d800-2228">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2228">Assembly Format</span></span>|<span data-ttu-id="5d800-2229">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2229">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2230">19</span><span class="sxs-lookup"><span data-stu-id="5d800-2230">19</span></span>|<span data-ttu-id="5d800-2231">LDC. i 4.3</span><span class="sxs-lookup"><span data-stu-id="5d800-2231">ldc.i4.3</span></span>|<span data-ttu-id="5d800-2232">Помещает 3 в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2232">Pushes 3 onto the stack.</span></span>|  
  
 <span data-ttu-id="5d800-2233">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2233">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2234">Значение 3 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2234">The value 3 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2235">Это специальная короткая кодировка для принудительной отправки целочисленного значения 3.</span><span class="sxs-lookup"><span data-stu-id="5d800-2235">This is a special short encoding for the push of the integer value 3.</span></span> <span data-ttu-id="5d800-2236">Все специальные короткие кодировки помещают в стек 4-байтовые целые числа.</span><span class="sxs-lookup"><span data-stu-id="5d800-2236">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="5d800-2237">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldc.i4.3`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2237">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.3` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2238">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2238">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2239">Помещает целочисленное значение 4 в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-2239">Pushes the integer value of 4 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2240">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2240">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2241">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2241">Format</span></span>|<span data-ttu-id="5d800-2242">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2242">Assembly Format</span></span>|<span data-ttu-id="5d800-2243">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2243">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2244">SR1A</span><span class="sxs-lookup"><span data-stu-id="5d800-2244">1A</span></span>|<span data-ttu-id="5d800-2245">LDC. i 4.4</span><span class="sxs-lookup"><span data-stu-id="5d800-2245">ldc.i4.4</span></span>|<span data-ttu-id="5d800-2246">Передает 4 в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2246">Pushes 4 onto the stack.</span></span>|  
  
 <span data-ttu-id="5d800-2247">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2247">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2248">Значение 4 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2248">The value 4 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2249">Это специальная короткая кодировка для принудительной отправки целочисленного значения 4.</span><span class="sxs-lookup"><span data-stu-id="5d800-2249">This is a special short encoding for the push of the integer value 4.</span></span> <span data-ttu-id="5d800-2250">Все специальные короткие кодировки помещают в стек 4-байтовые целые числа.</span><span class="sxs-lookup"><span data-stu-id="5d800-2250">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="5d800-2251">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldc.i4.4`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2251">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.4` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2252">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2252">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_5">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_5;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_5" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_5" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_5 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_5;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_5 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_5" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2253">Помещает целочисленное значение 5 в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-2253">Pushes the integer value of 5 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2254">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2254">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2255">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2255">Format</span></span>|<span data-ttu-id="5d800-2256">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2256">Assembly Format</span></span>|<span data-ttu-id="5d800-2257">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2257">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2258">1B</span><span class="sxs-lookup"><span data-stu-id="5d800-2258">1B</span></span>|<span data-ttu-id="5d800-2259">LDC. i 4.5</span><span class="sxs-lookup"><span data-stu-id="5d800-2259">ldc.i4.5</span></span>|<span data-ttu-id="5d800-2260">Передает 5 в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2260">Pushes 5 onto the stack.</span></span>|  
  
 <span data-ttu-id="5d800-2261">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2261">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2262">Значение 5 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2262">The value 5 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2263">Это специальная короткая кодировка для принудительной отправки целого значения 5.</span><span class="sxs-lookup"><span data-stu-id="5d800-2263">This is a special short encoding for the push of the integer value 5.</span></span> <span data-ttu-id="5d800-2264">Все специальные короткие кодировки помещают в стек 4-байтовые целые числа.</span><span class="sxs-lookup"><span data-stu-id="5d800-2264">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="5d800-2265">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldc.i4.5`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2265">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.5` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2266">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2266">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_6">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_6;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_6" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_6 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_6;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_6 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_6" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2267">Помещает целочисленное значение 6 в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-2267">Pushes the integer value of 6 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2268">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2268">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2269">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2269">Format</span></span>|<span data-ttu-id="5d800-2270">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2270">Assembly Format</span></span>|<span data-ttu-id="5d800-2271">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2271">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2272">1C</span><span class="sxs-lookup"><span data-stu-id="5d800-2272">1C</span></span>|<span data-ttu-id="5d800-2273">LDC. i 4.6</span><span class="sxs-lookup"><span data-stu-id="5d800-2273">ldc.i4.6</span></span>|<span data-ttu-id="5d800-2274">Помещает 6 в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2274">Pushes 6 onto the stack.</span></span>|  
  
 <span data-ttu-id="5d800-2275">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2275">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2276">Значение 6 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2276">The value 6 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2277">Это специальная короткая кодировка для принудительной отправки целого значения 6.</span><span class="sxs-lookup"><span data-stu-id="5d800-2277">This is a special short encoding for the push of the integer value 6.</span></span> <span data-ttu-id="5d800-2278">Все специальные короткие кодировки помещают в стек 4-байтовые целые числа.</span><span class="sxs-lookup"><span data-stu-id="5d800-2278">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="5d800-2279">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldc.i4.6`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2279">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.6` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2280">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2280">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_7">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_7;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_7" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_7" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_7 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_7;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_7 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_7" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2281">Помещает целочисленное значение 7 в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-2281">Pushes the integer value of 7 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2282">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2282">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2283">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2283">Format</span></span>|<span data-ttu-id="5d800-2284">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2284">Assembly Format</span></span>|<span data-ttu-id="5d800-2285">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2285">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2286">1D</span><span class="sxs-lookup"><span data-stu-id="5d800-2286">1D</span></span>|<span data-ttu-id="5d800-2287">LDC. i 4.7</span><span class="sxs-lookup"><span data-stu-id="5d800-2287">ldc.i4.7</span></span>|<span data-ttu-id="5d800-2288">Помещает 7 в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2288">Pushes 7 onto the stack.</span></span>|  
  
 <span data-ttu-id="5d800-2289">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2289">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2290">Значение 7 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2290">The value 7 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2291">Это специальная короткая кодировка для принудительной отправки целочисленного значения 7.</span><span class="sxs-lookup"><span data-stu-id="5d800-2291">This is a special short encoding for the push of the integer value 7.</span></span> <span data-ttu-id="5d800-2292">Все специальные короткие кодировки помещают в стек 4-байтовые целые числа.</span><span class="sxs-lookup"><span data-stu-id="5d800-2292">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="5d800-2293">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldc.i4.7`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2293">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.7` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2294">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2294">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2295">Помещает целочисленное значение 8 в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-2295">Pushes the integer value of 8 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2296">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2296">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2297">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2297">Format</span></span>|<span data-ttu-id="5d800-2298">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2298">Assembly Format</span></span>|<span data-ttu-id="5d800-2299">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2299">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2300">1E</span><span class="sxs-lookup"><span data-stu-id="5d800-2300">1E</span></span>|<span data-ttu-id="5d800-2301">LDC. i 4.8</span><span class="sxs-lookup"><span data-stu-id="5d800-2301">ldc.i4.8</span></span>|<span data-ttu-id="5d800-2302">Отправляет 8 в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2302">Pushes 8 onto the stack.</span></span>|  
  
 <span data-ttu-id="5d800-2303">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2303">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2304">Значение 8 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2304">The value 8 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2305">Это специальная короткая кодировка для принудительной отправки целочисленного значения 8.</span><span class="sxs-lookup"><span data-stu-id="5d800-2305">This is a special short encoding for the push of the integer value 8.</span></span> <span data-ttu-id="5d800-2306">Все специальные короткие кодировки помещают в стек 4-байтовые целые числа.</span><span class="sxs-lookup"><span data-stu-id="5d800-2306">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="5d800-2307">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldc.i4.8`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2307">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.8` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2308">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2308">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_M1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_M1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_M1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_M1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_M1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_M1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_M1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2309">Помещает целочисленное значение –1 в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-2309">Pushes the integer value of -1 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2310">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2310">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2311">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2311">Format</span></span>|<span data-ttu-id="5d800-2312">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2312">Assembly Format</span></span>|<span data-ttu-id="5d800-2313">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2313">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2314">15</span><span class="sxs-lookup"><span data-stu-id="5d800-2314">15</span></span>|<span data-ttu-id="5d800-2315">LDC. i4. M1</span><span class="sxs-lookup"><span data-stu-id="5d800-2315">ldc.i4.m1</span></span>|<span data-ttu-id="5d800-2316">Передает значение 1 в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2316">Pushes -1 onto the stack.</span></span>|  
  
 <span data-ttu-id="5d800-2317">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2317">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2318">Значение-1 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2318">The value -1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2319">Это специальная короткая кодировка для принудительной отправки целого значения-1.</span><span class="sxs-lookup"><span data-stu-id="5d800-2319">This is a special short encoding for the push of the integer value -1.</span></span> <span data-ttu-id="5d800-2320">Все специальные короткие кодировки помещают в стек 4-байтовые целые числа.</span><span class="sxs-lookup"><span data-stu-id="5d800-2320">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="5d800-2321">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldc.i4.m1`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2321">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.m1` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2322">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2322">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2323">Помещает переданное значение с типом <see langword="int8" /> в стек вычислений как <see langword="int32" /> (короткая форма).</span><span class="sxs-lookup"><span data-stu-id="5d800-2323">Pushes the supplied <see langword="int8" /> value onto the evaluation stack as an <see langword="int32" />, short form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2324">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2324">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2325">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2325">Format</span></span>|<span data-ttu-id="5d800-2326">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2326">Assembly Format</span></span>|<span data-ttu-id="5d800-2327">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2327">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2328">1F < `int8` ></span><span class="sxs-lookup"><span data-stu-id="5d800-2328">1F < `int8` ></span></span>|<span data-ttu-id="5d800-2329">LDC. i4. s `num`</span><span class="sxs-lookup"><span data-stu-id="5d800-2329">ldc.i4.s `num`</span></span>|<span data-ttu-id="5d800-2330">Помещает `num` в стек как `int32`, короткая форма.</span><span class="sxs-lookup"><span data-stu-id="5d800-2330">Pushes `num` onto the stack as `int32`, short form.</span></span>|  
  
 <span data-ttu-id="5d800-2331">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2331">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2332">Значение `num` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2332">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2333">`ldc.i4.s` является более эффективной кодировкой для отправки целых чисел с-128 по 127 в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2333">`ldc.i4.s` is a more efficient encoding for pushing the integers from -128 to 127 onto the evaluation stack.</span></span>  
  
<span data-ttu-id="5d800-2334">Следующие перегрузки метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> могут использовать код операции `ldc.i4.s`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2334">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldc.i4.s` opcode:</span></span>
  
- <xref:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)?displayProperty=nameWithType>
- <xref:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)?displayProperty=nameWithType>
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2335">Помещает переданное значение с типом <see langword="int64" /> в стек вычислений как <see langword="int64" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-2335">Pushes a supplied value of type <see langword="int64" /> onto the evaluation stack as an <see langword="int64" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2336">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2336">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2337">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2337">Format</span></span>|<span data-ttu-id="5d800-2338">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2338">Assembly Format</span></span>|<span data-ttu-id="5d800-2339">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2339">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2340">21 < `int64` ></span><span class="sxs-lookup"><span data-stu-id="5d800-2340">21 < `int64` ></span></span>|<span data-ttu-id="5d800-2341">LDC. i8 `num`</span><span class="sxs-lookup"><span data-stu-id="5d800-2341">ldc.i8 `num`</span></span>|<span data-ttu-id="5d800-2342">Помещает `num` в стек как `int64`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2342">Pushes `num` onto the stack as `int64`.</span></span>|  
  
 <span data-ttu-id="5d800-2343">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2343">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2344">Значение `num` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2344">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2345">Эта кодировка помещает значение `int64` в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2345">This encoding pushes an `int64` value onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2346">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldc.i8`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2346">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i8` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2347">ILGenerator. Emit (код операции, длинный)</span><span class="sxs-lookup"><span data-stu-id="5d800-2347">ILGenerator.Emit(OpCode, long)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2348">Помещает переданное значение с типом <see langword="float32" /> в стек вычислений как <see langword="F" /> (число с плавающей запятой).</span><span class="sxs-lookup"><span data-stu-id="5d800-2348">Pushes a supplied value of type <see langword="float32" /> onto the evaluation stack as type <see langword="F" /> (float).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2349">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2349">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2350">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2350">Format</span></span>|<span data-ttu-id="5d800-2351">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2351">Assembly Format</span></span>|<span data-ttu-id="5d800-2352">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2352">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2353">22 < `float32` ></span><span class="sxs-lookup"><span data-stu-id="5d800-2353">22 < `float32` ></span></span>|<span data-ttu-id="5d800-2354">LDC. R4 `num`</span><span class="sxs-lookup"><span data-stu-id="5d800-2354">ldc.r4 `num`</span></span>|<span data-ttu-id="5d800-2355">Помещает `num` в стек как `F`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2355">Pushes `num` onto the stack as `F`.</span></span>|  
  
 <span data-ttu-id="5d800-2356">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2356">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2357">Значение `num` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2357">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2358">Эта кодировка помещает значение `float32` в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2358">This encoding pushes a `float32` value onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2359">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldc.r4`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2359">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.r4` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2360">ILGenerator. Emit (код операции, одиночный)</span><span class="sxs-lookup"><span data-stu-id="5d800-2360">ILGenerator.Emit(OpCode, single)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2361">Помещает переданное значение с типом <see langword="float64" /> в стек вычислений как <see langword="F" /> (число с плавающей запятой).</span><span class="sxs-lookup"><span data-stu-id="5d800-2361">Pushes a supplied value of type <see langword="float64" /> onto the evaluation stack as type <see langword="F" /> (float).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2362">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2362">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2363">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2363">Format</span></span>|<span data-ttu-id="5d800-2364">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2364">Assembly Format</span></span>|<span data-ttu-id="5d800-2365">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2365">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2366">23 < `float64` ></span><span class="sxs-lookup"><span data-stu-id="5d800-2366">23 < `float64` ></span></span>|<span data-ttu-id="5d800-2367">LDC. R8 `num`</span><span class="sxs-lookup"><span data-stu-id="5d800-2367">ldc.r8 `num`</span></span>|<span data-ttu-id="5d800-2368">Помещает `num` в стек как `F`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2368">Pushes `num` onto the stack as `F`.</span></span>|  
  
 <span data-ttu-id="5d800-2369">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2369">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2370">Значение `num` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2370">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2371">Эта кодировка помещает значение `float64` в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2371">This encoding pushes a `float64` value onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2372">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldc.r8`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2372">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.r8` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2373">ILGenerator. Emit (код операции, Double)</span><span class="sxs-lookup"><span data-stu-id="5d800-2373">ILGenerator.Emit(OpCode, double)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2374">Загружает элемент с заданным индексом массива на вершину стека вычислений в качестве типа, указанного в инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-2374">Loads the element at a specified array index onto the top of the evaluation stack as the type specified in the instruction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2375">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2375">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2376">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2376">Format</span></span>|<span data-ttu-id="5d800-2377">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2377">Assembly Format</span></span>|<span data-ttu-id="5d800-2378">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2378">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2379">A3 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5d800-2379">A3 < `T` ></span></span>|<span data-ttu-id="5d800-2380">лделем `typeTok`</span><span class="sxs-lookup"><span data-stu-id="5d800-2380">ldelem `typeTok`</span></span>|<span data-ttu-id="5d800-2381">Загружает элемент с `index` на вершину стека как тип `typeTok`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2381">Loads the element at `index` onto the top of the stack as type `typeTok`.</span></span>|  
  
 <span data-ttu-id="5d800-2382">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2382">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2383">Ссылка на объект `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2383">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-2384">Значение индекса `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2384">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-2385">`index` и `array` извлекаются из стека; выполняется поиск значения, хранящегося в позиции `index` в `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2385">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="5d800-2386">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2386">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2387">Инструкция `ldelem` загружает значение элемента с индексом `index` (тип `native int`) в одномерный массив с отсчетом от нуля `array` и помещает его в верхнюю часть стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-2387">The `ldelem` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="5d800-2388">Массивы являются объектами, поэтому они представлены значением типа `O`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2388">Arrays are objects, and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="5d800-2389">Тип возвращаемого значения задается токеном `typeTok` в инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-2389">The type of the return value is specified by the token `typeTok` in the instruction.</span></span>  
  
 <span data-ttu-id="5d800-2390"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="5d800-2390"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5d800-2391"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательный или больше, чем верхняя граница `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2391"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the upper bound of `array`.</span></span>  
  
 <span data-ttu-id="5d800-2392">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldelem`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2392">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2393">ILGenerator. Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="5d800-2393">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2394">Загружает элемент массива с заданным индексом, имеющий тип <see langword="native int" />, на вершину стека вычислений как <see langword="native int" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-2394">Loads the element with type <see langword="native int" /> at a specified array index onto the top of the evaluation stack as a <see langword="native int" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2395">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2395">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2396">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2396">Format</span></span>|<span data-ttu-id="5d800-2397">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2397">Assembly Format</span></span>|<span data-ttu-id="5d800-2398">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2398">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2399">97</span><span class="sxs-lookup"><span data-stu-id="5d800-2399">97</span></span>|<span data-ttu-id="5d800-2400">лделем. i</span><span class="sxs-lookup"><span data-stu-id="5d800-2400">ldelem.i</span></span>|<span data-ttu-id="5d800-2401">Загружает элемент с типом `native int` в `index` на вершину стека как `native int`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2401">Loads the element with type `native int` at `index` onto the top of the stack as a `native int`.</span></span>|  
  
 <span data-ttu-id="5d800-2402">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2402">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2403">Ссылка на объект `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2403">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-2404">Значение индекса `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2404">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-2405">`index` и `array` извлекаются из стека; выполняется поиск значения, хранящегося в позиции `index` в `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2405">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="5d800-2406">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2406">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2407">Инструкция `ldelem.i` загружает значение элемента с индексом `index` (тип `native int`) в одномерный массив с отсчетом от нуля `array` и помещает его в верхнюю часть стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-2407">The `ldelem.i` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="5d800-2408">Массивы являются объектами и поэтому представлены значением типа `O`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2408">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="5d800-2409">Возвращаемое значение для `ldelem.i` равно `native int`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2409">The return value for `ldelem.i` is `native int`.</span></span>  
  
 <span data-ttu-id="5d800-2410">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32` (не `native int`) при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2410">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5d800-2411"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="5d800-2411"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5d800-2412"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="5d800-2412"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5d800-2413"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательный или больше, чем граница `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2413"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5d800-2414">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldelem.i`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2414">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2415">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2415">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2416">Загружает элемент типа <see langword="int8" /> с заданным индексом массива на вершину стека вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-2416">Loads the element with type <see langword="int8" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2417">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2417">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2418">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2418">Format</span></span>|<span data-ttu-id="5d800-2419">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2419">Assembly Format</span></span>|<span data-ttu-id="5d800-2420">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2420">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2421">90</span><span class="sxs-lookup"><span data-stu-id="5d800-2421">90</span></span>|<span data-ttu-id="5d800-2422">лделем. i1</span><span class="sxs-lookup"><span data-stu-id="5d800-2422">ldelem.i1</span></span>|<span data-ttu-id="5d800-2423">Загружает элемент с типом `int8` в `index` на вершину стека как `int32`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2423">Loads the element with type `int8` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="5d800-2424">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2424">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2425">Ссылка на объект `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2425">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-2426">Значение индекса `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2426">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-2427">`index` и `array` извлекаются из стека; выполняется поиск значения, хранящегося в позиции `index` в `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2427">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="5d800-2428">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2428">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2429">Инструкция `ldelem.i1` загружает значение элемента с индексом `index` (тип `native int`) в одномерный массив с отсчетом от нуля `array` и помещает его в верхнюю часть стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-2429">The `ldelem.i1` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="5d800-2430">Массивы являются объектами и поэтому представлены значением типа `O`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2430">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="5d800-2431">Возвращаемое значение для `ldelem.i1` равно `int8`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2431">The return value for `ldelem.i1` is `int8`.</span></span>  
  
 <span data-ttu-id="5d800-2432">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32` (не `native int`) при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2432">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5d800-2433"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="5d800-2433"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5d800-2434"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="5d800-2434"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5d800-2435"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательный или больше, чем граница `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2435"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5d800-2436">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldelem.i1`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2436">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i1` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2437">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2437">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2438">Загружает элемент типа <see langword="int16" /> с заданным индексом массива на вершину стека вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-2438">Loads the element with type <see langword="int16" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2439">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2439">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2440">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2440">Format</span></span>|<span data-ttu-id="5d800-2441">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2441">Assembly Format</span></span>|<span data-ttu-id="5d800-2442">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2442">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2443">92</span><span class="sxs-lookup"><span data-stu-id="5d800-2443">92</span></span>|<span data-ttu-id="5d800-2444">лделем. i2</span><span class="sxs-lookup"><span data-stu-id="5d800-2444">ldelem.i2</span></span>|<span data-ttu-id="5d800-2445">Загружает элемент с типом `int16` в `index` на вершину стека как `int32`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2445">Loads the element with type `int16` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="5d800-2446">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2446">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2447">Ссылка на объект `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2447">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-2448">Значение индекса `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2448">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-2449">`index` и `array` извлекаются из стека; выполняется поиск значения, хранящегося в позиции `index` в `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2449">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="5d800-2450">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2450">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2451">Инструкция `ldelem.i2` загружает значение элемента с индексом `index` (тип `native int`) в одномерный массив с отсчетом от нуля `array` и помещает его в верхнюю часть стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-2451">The `ldelem.i2` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="5d800-2452">Массивы являются объектами и поэтому представлены значением типа `O`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2452">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="5d800-2453">Возвращаемое значение для `ldelem.i2` равно `int16`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2453">The return value for `ldelem.i2` is `int16`.</span></span>  
  
 <span data-ttu-id="5d800-2454">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32` (не `native int`) при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2454">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5d800-2455"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="5d800-2455"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5d800-2456"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="5d800-2456"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5d800-2457"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательный или больше, чем граница `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2457"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5d800-2458">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldelem.i2`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2458">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i2` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2459">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2459">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2460">Загружает элемент типа <see langword="int32" /> с заданным индексом массива на вершину стека вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-2460">Loads the element with type <see langword="int32" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2461">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2461">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2462">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2462">Format</span></span>|<span data-ttu-id="5d800-2463">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2463">Assembly Format</span></span>|<span data-ttu-id="5d800-2464">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2464">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2465">94</span><span class="sxs-lookup"><span data-stu-id="5d800-2465">94</span></span>|<span data-ttu-id="5d800-2466">лделем. i4</span><span class="sxs-lookup"><span data-stu-id="5d800-2466">ldelem.i4</span></span>|<span data-ttu-id="5d800-2467">Загружает элемент с типом `int32` в `index` на вершину стека как `int32`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2467">Loads the element with type `int32` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="5d800-2468">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2468">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2469">Ссылка на объект `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2469">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-2470">Значение индекса `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2470">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-2471">`index` и `array` извлекаются из стека; выполняется поиск значения, хранящегося в позиции `index` в `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2471">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="5d800-2472">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2472">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2473">Инструкция `ldelem.i4` загружает значение элемента с индексом `index` (тип `native int`) в одномерный массив с отсчетом от нуля `array` и помещает его в верхнюю часть стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-2473">The `ldelem.i4` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="5d800-2474">Массивы являются объектами и поэтому представлены значением типа `O`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2474">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="5d800-2475">Возвращаемое значение для `ldelem.i4` равно `int32`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2475">The return value for `ldelem.i4` is `int32`.</span></span>  
  
 <span data-ttu-id="5d800-2476">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32` (не `native int`) при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2476">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5d800-2477"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="5d800-2477"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5d800-2478"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="5d800-2478"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5d800-2479"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательный или больше, чем граница `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2479"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5d800-2480">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldelem.i4`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2480">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i4` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2481">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2481">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2482">Загружает элемент типа <see langword="int64" /> с заданным индексом массива на вершину стека вычислений как <see langword="int64" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-2482">Loads the element with type <see langword="int64" /> at a specified array index onto the top of the evaluation stack as an <see langword="int64" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2483">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2483">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2484">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2484">Format</span></span>|<span data-ttu-id="5d800-2485">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2485">Assembly Format</span></span>|<span data-ttu-id="5d800-2486">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2486">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2487">96</span><span class="sxs-lookup"><span data-stu-id="5d800-2487">96</span></span>|<span data-ttu-id="5d800-2488">лделем. i8</span><span class="sxs-lookup"><span data-stu-id="5d800-2488">ldelem.i8</span></span>|<span data-ttu-id="5d800-2489">Загружает элемент с типом `int64` в `index` на вершину стека как `int64`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2489">Loads the element with type `int64` at `index` onto the top of the stack as an `int64`.</span></span>|  
  
 <span data-ttu-id="5d800-2490">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2490">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2491">Ссылка на объект `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2491">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-2492">Значение индекса `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2492">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-2493">`index` и `array` извлекаются из стека; выполняется поиск значения, хранящегося в позиции `index` в `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2493">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="5d800-2494">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2494">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2495">Инструкция `ldelem.i8` загружает значение элемента с индексом `index` (тип `native int`) в одномерный массив с отсчетом от нуля `array` и помещает его в верхнюю часть стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-2495">The `ldelem.i8` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="5d800-2496">Массивы являются объектами и поэтому представлены значением типа `O`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2496">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="5d800-2497">Возвращаемое значение для `ldelem.i8` равно `int64`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2497">The return value for `ldelem.i8` is `int64`.</span></span>  
  
 <span data-ttu-id="5d800-2498">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32` (не `native int`) при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2498">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5d800-2499"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="5d800-2499"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5d800-2500"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="5d800-2500"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5d800-2501"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательный или больше, чем граница `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2501"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5d800-2502">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldelem.i8`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2502">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i8` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2503">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2503">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2504">Загружает элемент массива с заданным индексом, имеющий тип <see langword="float32" />, на вершину стека вычислений как <see langword="F" /> (число с плавающей запятой).</span><span class="sxs-lookup"><span data-stu-id="5d800-2504">Loads the element with type <see langword="float32" /> at a specified array index onto the top of the evaluation stack as type <see langword="F" /> (float).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2505">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2505">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2506">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2506">Format</span></span>|<span data-ttu-id="5d800-2507">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2507">Assembly Format</span></span>|<span data-ttu-id="5d800-2508">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2508">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2509">98</span><span class="sxs-lookup"><span data-stu-id="5d800-2509">98</span></span>|<span data-ttu-id="5d800-2510">лделем. R4</span><span class="sxs-lookup"><span data-stu-id="5d800-2510">ldelem.r4</span></span>|<span data-ttu-id="5d800-2511">Загружает элемент с типом `float32` в `index` на вершину стека как тип `F`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2511">Loads the element with type `float32` at `index` onto the top of the stack as a type `F`.</span></span>|  
  
 <span data-ttu-id="5d800-2512">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2512">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2513">Ссылка на объект `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2513">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-2514">Значение индекса `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2514">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-2515">`index` и `array` извлекаются из стека; выполняется поиск значения, хранящегося в позиции `index` в `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2515">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="5d800-2516">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2516">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2517">Инструкция `ldelem.r4` загружает значение элемента с индексом `index` (тип `native int`) в одномерный массив с отсчетом от нуля `array` и помещает его в верхнюю часть стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-2517">The `ldelem.r4` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="5d800-2518">Массивы являются объектами и поэтому представлены значением типа `O`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2518">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="5d800-2519">Возвращаемое значение для `ldelem.r4` равно `float32`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2519">The return value for `ldelem.r4` is `float32`.</span></span>  
  
 <span data-ttu-id="5d800-2520">Значения с плавающей запятой преобразуются в тип `F` при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2520">Floating-point values are converted to type `F` when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5d800-2521"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="5d800-2521"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5d800-2522"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="5d800-2522"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5d800-2523"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательный или больше, чем граница `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2523"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5d800-2524">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldelem.r4`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2524">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.r4` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2525">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2525">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2526">Загружает элемент массива с заданным индексом, имеющий тип <see langword="float64" />, на вершину стека вычислений как <see langword="F" /> (число с плавающей запятой).</span><span class="sxs-lookup"><span data-stu-id="5d800-2526">Loads the element with type <see langword="float64" /> at a specified array index onto the top of the evaluation stack as type <see langword="F" /> (float).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2527">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2527">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2528">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2528">Format</span></span>|<span data-ttu-id="5d800-2529">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2529">Assembly Format</span></span>|<span data-ttu-id="5d800-2530">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2530">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2531">99</span><span class="sxs-lookup"><span data-stu-id="5d800-2531">99</span></span>|<span data-ttu-id="5d800-2532">лделем. R8</span><span class="sxs-lookup"><span data-stu-id="5d800-2532">ldelem.r8</span></span>|<span data-ttu-id="5d800-2533">Загружает элемент с типом `float64` в `index` в начало стека как тип `F`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2533">Loads the element with type `float64` at `index` onto the top of the stack as type `F`.</span></span>|  
  
 <span data-ttu-id="5d800-2534">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2534">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2535">Ссылка на объект `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2535">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-2536">Значение индекса `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2536">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-2537">`index` и `array` извлекаются из стека; выполняется поиск значения, хранящегося в позиции `index` в `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2537">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="5d800-2538">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2538">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2539">Инструкция `ldelem.r8` загружает значение элемента с индексом `index` (тип `native int`) в одномерный массив с отсчетом от нуля `array` и помещает его в верхнюю часть стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-2539">The `ldelem.r8` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="5d800-2540">Массивы являются объектами и поэтому представлены значением типа `O`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2540">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="5d800-2541">Возвращаемое значение для `ldelem.r8` равно `float64`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2541">The return value for `ldelem.r8` is `float64`.</span></span>  
  
 <span data-ttu-id="5d800-2542">Значения с плавающей запятой преобразуются в тип `F` при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2542">Floating-point values are converted to type `F` when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5d800-2543"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="5d800-2543"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5d800-2544"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="5d800-2544"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5d800-2545"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательный или больше, чем граница `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2545"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5d800-2546">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldelem.r8`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2546">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.r8` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2547">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2547">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2548">Загружает элемент массива с заданным индексом, содержащий ссылку на объект, на вершину стека вычислений как <see langword="O" /> (ссылка на объект).</span><span class="sxs-lookup"><span data-stu-id="5d800-2548">Loads the element containing an object reference at a specified array index onto the top of the evaluation stack as type <see langword="O" /> (object reference).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2549">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2549">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2550">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2550">Format</span></span>|<span data-ttu-id="5d800-2551">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2551">Assembly Format</span></span>|<span data-ttu-id="5d800-2552">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2552">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2553">9A</span><span class="sxs-lookup"><span data-stu-id="5d800-2553">9A</span></span>|<span data-ttu-id="5d800-2554">лделем. ref</span><span class="sxs-lookup"><span data-stu-id="5d800-2554">ldelem.ref</span></span>|<span data-ttu-id="5d800-2555">Загружает элемент со ссылкой на объект в `index` на вершину стека как тип `O`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2555">Loads the element with an object reference at `index` onto the top of the stack as type `O`.</span></span>|  
  
 <span data-ttu-id="5d800-2556">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2556">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2557">Ссылка на объект `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2557">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-2558">Значение индекса `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2558">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-2559">`index` и `array` извлекаются из стека; выполняется поиск значения, хранящегося в позиции `index` в `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2559">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="5d800-2560">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2560">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2561">Инструкция `ldelem.ref` загружает значение элемента с индексом `index` (тип `native int`) в одномерный массив с отсчетом от нуля `array` и помещает его в верхнюю часть стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-2561">The `ldelem.ref` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="5d800-2562">Массивы являются объектами и поэтому представлены значением типа `O`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2562">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="5d800-2563">Возвращаемое значение для `ldelem.ref` имеет тип `O` (ссылка на объект).</span><span class="sxs-lookup"><span data-stu-id="5d800-2563">The return value for `ldelem.ref` is type `O` (object reference).</span></span>  
  
 <span data-ttu-id="5d800-2564"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="5d800-2564"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5d800-2565"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="5d800-2565"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5d800-2566"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательный или больше, чем граница `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2566"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5d800-2567">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldelem.ref`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2567">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.ref` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2568">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2568">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2569">Загружает элемент типа <see langword="unsigned int8" /> с заданным индексом массива на вершину стека вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-2569">Loads the element with type <see langword="unsigned int8" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2570">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2570">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2571">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2571">Format</span></span>|<span data-ttu-id="5d800-2572">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2572">Assembly Format</span></span>|<span data-ttu-id="5d800-2573">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2573">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2574">91</span><span class="sxs-lookup"><span data-stu-id="5d800-2574">91</span></span>|<span data-ttu-id="5d800-2575">лделем. U1</span><span class="sxs-lookup"><span data-stu-id="5d800-2575">ldelem.u1</span></span>|<span data-ttu-id="5d800-2576">Загружает элемент с типом `unsigned int8` в `index` на вершину стека как `int32`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2576">Loads the element with type `unsigned int8` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="5d800-2577">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2577">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2578">Ссылка на объект `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2578">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-2579">Значение индекса `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2579">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-2580">`index` и `array` извлекаются из стека; выполняется поиск значения, хранящегося в позиции `index` в `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2580">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="5d800-2581">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2581">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2582">Инструкция `ldelem.u1` загружает значение элемента с индексом `index` (тип `native int`) в одномерный массив с отсчетом от нуля `array` и помещает его в верхнюю часть стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-2582">The `ldelem.u1` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="5d800-2583">Массивы являются объектами и поэтому представлены значением типа `O`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2583">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="5d800-2584">Возвращаемое значение для `ldelem.u1` равно `int8`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2584">The return value for `ldelem.u1` is `int8`.</span></span>  
  
 <span data-ttu-id="5d800-2585">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32` (не `native int`) при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2585">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5d800-2586"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="5d800-2586"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5d800-2587"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="5d800-2587"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5d800-2588"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательный или больше, чем граница `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2588"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5d800-2589">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldelem.u1`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2589">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.u1` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2590">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2590">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2591">Загружает элемент типа <see langword="unsigned int16" /> с заданным индексом массива на вершину стека вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-2591">Loads the element with type <see langword="unsigned int16" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2592">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2592">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2593">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2593">Format</span></span>|<span data-ttu-id="5d800-2594">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2594">Assembly Format</span></span>|<span data-ttu-id="5d800-2595">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2595">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2596">93</span><span class="sxs-lookup"><span data-stu-id="5d800-2596">93</span></span>|<span data-ttu-id="5d800-2597">лделем. U2</span><span class="sxs-lookup"><span data-stu-id="5d800-2597">ldelem.u2</span></span>|<span data-ttu-id="5d800-2598">Загружает элемент с типом `unsigned int16` по индексу на вершину стека как `int32`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2598">Loads the element with type `unsigned int16` at index onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="5d800-2599">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2599">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2600">Ссылка на объект `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2600">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-2601">Значение индекса `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2601">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-2602">`index` и `array` извлекаются из стека; выполняется поиск значения, хранящегося в позиции `index` в `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2602">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="5d800-2603">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2603">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2604">Инструкция `ldelem.u2` загружает значение элемента с индексом `index` (тип `native int`) в одномерный массив с отсчетом от нуля `array` и помещает его в верхнюю часть стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-2604">The `ldelem.u2` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="5d800-2605">Массивы являются объектами и поэтому представлены значением типа `O`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2605">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="5d800-2606">Возвращаемое значение для `ldelem.u2` равно `int16`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2606">The return value for `ldelem.u2` is `int16`.</span></span>  
  
 <span data-ttu-id="5d800-2607">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32` (не `native int`) при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2607">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5d800-2608"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="5d800-2608"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5d800-2609"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="5d800-2609"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5d800-2610"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательный или больше, чем граница `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2610"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5d800-2611">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldelem.u2`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2611">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.u2` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2612">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2612">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2613">Загружает элемент типа <see langword="unsigned int32" /> с заданным индексом массива на вершину стека вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-2613">Loads the element with type <see langword="unsigned int32" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2614">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2614">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2615">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2615">Format</span></span>|<span data-ttu-id="5d800-2616">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2616">Assembly Format</span></span>|<span data-ttu-id="5d800-2617">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2617">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2618">95</span><span class="sxs-lookup"><span data-stu-id="5d800-2618">95</span></span>|<span data-ttu-id="5d800-2619">лделем. U4</span><span class="sxs-lookup"><span data-stu-id="5d800-2619">ldelem.u4</span></span>|<span data-ttu-id="5d800-2620">Загружает элемент с типом `unsigned int32` по индексу на вершину стека как `int32`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2620">Loads the element with type `unsigned int32` at index onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="5d800-2621">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2621">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2622">Ссылка на объект `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2622">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-2623">Значение индекса `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2623">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-2624">`index` и `array` извлекаются из стека; выполняется поиск значения, хранящегося в позиции `index` в `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2624">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="5d800-2625">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2625">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2626">Инструкция `ldelem.u4` загружает значение элемента с индексом `index` (тип `native int`) в одномерный массив с отсчетом от нуля `array` и помещает его в верхнюю часть стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-2626">The `ldelem.u4` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="5d800-2627">Массивы являются объектами и поэтому представлены значением типа `O`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2627">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="5d800-2628">Возвращаемое значение для `ldelem.u4` равно `int32`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2628">The return value for `ldelem.u4` is `int32`.</span></span>  
  
 <span data-ttu-id="5d800-2629">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32` (не `native int`) при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2629">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5d800-2630"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="5d800-2630"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5d800-2631"><xref:System.ArrayTypeMismatchException> создается, если массив не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="5d800-2631"><xref:System.ArrayTypeMismatchException> is thrown if array does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5d800-2632"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательный или больше, чем граница `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2632"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5d800-2633">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldelem.u4`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2633">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.u4` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2634">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2634">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelema">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelema;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelema" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelema" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelema As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelema;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelema : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelema" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2635">Загружает адрес элемента массива с заданным индексом на вершину стека вычислений как <see langword="&amp;" /> (управляемый указатель).</span><span class="sxs-lookup"><span data-stu-id="5d800-2635">Loads the address of the array element at a specified array index onto the top of the evaluation stack as type <see langword="&amp;" /> (managed pointer).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2636">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2636">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2637">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2637">Format</span></span>|<span data-ttu-id="5d800-2638">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2638">Assembly Format</span></span>|<span data-ttu-id="5d800-2639">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2639">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2640">8F < `T` ></span><span class="sxs-lookup"><span data-stu-id="5d800-2640">8F < `T` ></span></span>|<span data-ttu-id="5d800-2641">@no__t ldelema-0</span><span class="sxs-lookup"><span data-stu-id="5d800-2641">ldelema `class`</span></span>|<span data-ttu-id="5d800-2642">Загружает адрес элемента массива с `index` на вершину стека вычислений как тип `&` (управляемый указатель).</span><span class="sxs-lookup"><span data-stu-id="5d800-2642">Loads the address of the array element at `index` onto the top of the evaluation stack as type `&` (managed pointer).</span></span>|  
  
 <span data-ttu-id="5d800-2643">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2643">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2644">Ссылка на объект `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2644">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-2645">Значение индекса `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2645">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-2646">`index` и `array` извлекаются из стека; выполняется поиск адреса, хранящегося в позиции `index` в `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2646">`index` and `array` are popped from the stack; the address stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="5d800-2647">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2647">The address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2648">@No__t-0 используется для получения адреса объекта по определенному индексу в массиве объектов (типа `class`).</span><span class="sxs-lookup"><span data-stu-id="5d800-2648">The `ldelema` is used to retrieve the address of an object at a particular index in an array of objects (of type `class`).</span></span> <span data-ttu-id="5d800-2649">Инструкция `ldelema` загружает адрес значения по индексу `index` (тип `native int`) в одномерном массиве с отсчетом от нуля `array` и помещает его в верхнюю часть стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-2649">The `ldelema` instruction loads the address of the value at index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="5d800-2650">Массивы являются объектами и поэтому представлены значением типа `O`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2650">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="5d800-2651">Значение должно иметь тип `class`, переданный с инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-2651">The value must be of type `class` passed with the instruction.</span></span>  
  
 <span data-ttu-id="5d800-2652">Возвращаемое значение для `ldelema` является управляемым указателем (тип `&`).</span><span class="sxs-lookup"><span data-stu-id="5d800-2652">The return value for `ldelema` is a managed pointer (type `&`).</span></span>  
  
 <span data-ttu-id="5d800-2653">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32` (не `native int`) при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2653">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5d800-2654"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="5d800-2654"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5d800-2655"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="5d800-2655"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5d800-2656"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательный или больше, чем граница `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2656"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5d800-2657">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldelema`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2657">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelema` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2658">ILGenerator. Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="5d800-2658">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2659">Выполняет поиск значения поля в объекте, ссылка на который находится в стеке вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2659">Finds the value of a field in the object whose reference is currently on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2660">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2660">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2661">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2661">Format</span></span>|<span data-ttu-id="5d800-2662">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2662">Assembly Format</span></span>|<span data-ttu-id="5d800-2663">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2663">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2664">7B < `T` ></span><span class="sxs-lookup"><span data-stu-id="5d800-2664">7B < `T` ></span></span>|<span data-ttu-id="5d800-2665">ldfld `field`</span><span class="sxs-lookup"><span data-stu-id="5d800-2665">ldfld `field`</span></span>|<span data-ttu-id="5d800-2666">Помещает значение поля в указанном объекте в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2666">Pushes the value of a field in a specified object onto the stack.</span></span>|  
  
 <span data-ttu-id="5d800-2667">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2667">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2668">Ссылка на объект (или указатель) помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2668">An object reference (or pointer) is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-2669">Ссылка на объект (или указатель) извлекается из стека; Найдено значение указанного поля в объекте.</span><span class="sxs-lookup"><span data-stu-id="5d800-2669">The object reference (or pointer) is popped from the stack; the value of the specified field in the object is found.</span></span>  
  
3.  <span data-ttu-id="5d800-2670">Значение, хранящееся в поле, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2670">The value stored in the field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2671">Инструкция `ldfld` помещает значение поля, расположенного в объекте, в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2671">The `ldfld` instruction pushes the value of a field located in an object onto the stack.</span></span> <span data-ttu-id="5d800-2672">Объект должен находиться в стеке как ссылка на объект (тип `O`), управляемый указатель (тип `&`), неуправляемый указатель (тип `native int`), временный указатель (тип `*`) или экземпляр типа значения.</span><span class="sxs-lookup"><span data-stu-id="5d800-2672">The object must be on the stack as an object reference (type `O`), a managed pointer (type `&`), an unmanaged pointer (type `native int`), a transient pointer (type `*`), or an instance of a value type.</span></span> <span data-ttu-id="5d800-2673">Использование неуправляемого указателя в проверяемом коде не допускается.</span><span class="sxs-lookup"><span data-stu-id="5d800-2673">The use of an unmanaged pointer is not permitted in verifiable code.</span></span> <span data-ttu-id="5d800-2674">Поле объекта задается маркером метаданных, который должен ссылаться на элемент поля.</span><span class="sxs-lookup"><span data-stu-id="5d800-2674">The object's field is specified by a metadata token that must refer to a field member.</span></span> <span data-ttu-id="5d800-2675">Тип возвращаемого значения совпадает с типом, связанным с полем.</span><span class="sxs-lookup"><span data-stu-id="5d800-2675">The return type is the same as the one associated with the field.</span></span> <span data-ttu-id="5d800-2676">Поле может быть либо полем экземпляра (в этом случае объект не должен быть пустой ссылкой), либо статическим полем.</span><span class="sxs-lookup"><span data-stu-id="5d800-2676">The field may be either an instance field (in which case the object must not be a null reference) or a static field.</span></span>  
  
 <span data-ttu-id="5d800-2677">Оператору `ldfld` может предшествовать один или оба префикса <xref:System.Reflection.Emit.OpCodes.Unaligned> и <xref:System.Reflection.Emit.OpCodes.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="5d800-2677">The `ldfld` instruction can be preceded by either or both of the <xref:System.Reflection.Emit.OpCodes.Unaligned> and <xref:System.Reflection.Emit.OpCodes.Volatile> prefixes.</span></span>  
  
 <span data-ttu-id="5d800-2678"><xref:System.NullReferenceException> создается, если объект имеет значение null, а поле не является статическим.</span><span class="sxs-lookup"><span data-stu-id="5d800-2678"><xref:System.NullReferenceException> is thrown if the object is null and the field is not static.</span></span>  
  
 <span data-ttu-id="5d800-2679"><xref:System.MissingFieldException> создается, если указанное поле не найдено в метаданных.</span><span class="sxs-lookup"><span data-stu-id="5d800-2679"><xref:System.MissingFieldException> is thrown if the specified field is not found in the metadata.</span></span> <span data-ttu-id="5d800-2680">Обычно это проверяется при преобразовании инструкций промежуточного языка MSIL в машинный код, а не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-2680">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.</span></span>  
  
 <span data-ttu-id="5d800-2681">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldfld`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2681">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldfld` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2682">ILGenerator. Emit (код операции, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="5d800-2682">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldflda">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldflda;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldflda" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldflda" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldflda As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldflda;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldflda : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldflda" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2683">Ищет адрес поля в объекте, ссылка на который находится в стеке вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2683">Finds the address of a field in the object whose reference is currently on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2684">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2684">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2685">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2685">Format</span></span>|<span data-ttu-id="5d800-2686">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2686">Assembly Format</span></span>|<span data-ttu-id="5d800-2687">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2687">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2688">7C < `T` ></span><span class="sxs-lookup"><span data-stu-id="5d800-2688">7C < `T` ></span></span>|<span data-ttu-id="5d800-2689">лдфлда `field`</span><span class="sxs-lookup"><span data-stu-id="5d800-2689">ldflda `field`</span></span>|<span data-ttu-id="5d800-2690">Помещает адрес `field` в указанный объект в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2690">Pushes the address of `field` in a specified object onto the stack.</span></span>|  
  
 <span data-ttu-id="5d800-2691">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2691">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2692">Ссылка на объект (или указатель) помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2692">An object reference (or pointer) is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-2693">Ссылка на объект (или указатель) извлекается из стека; найден адрес указанного поля в объекте.</span><span class="sxs-lookup"><span data-stu-id="5d800-2693">The object reference (or pointer) is popped from the stack; the address of the specified field in the object is found.</span></span>  
  
3.  <span data-ttu-id="5d800-2694">Адрес указанного поля помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2694">The address of the specified field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2695">Инструкция `ldflda` помещает адрес поля, расположенного в объекте, в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2695">The `ldflda` instruction pushes the address of a field located in an object onto the stack.</span></span> <span data-ttu-id="5d800-2696">Объект должен находиться в стеке как ссылка на объект (тип `O`), управляемый указатель (тип `&`), неуправляемый указатель (тип `native int`), временный указатель (тип `*`) или экземпляр типа значения.</span><span class="sxs-lookup"><span data-stu-id="5d800-2696">The object must be on the stack as an object reference (type `O`), a managed pointer (type `&`), an unmanaged pointer (type `native int`), a transient pointer (type `*`), or an instance of a value type.</span></span> <span data-ttu-id="5d800-2697">Использование неуправляемого указателя в проверяемом коде не допускается.</span><span class="sxs-lookup"><span data-stu-id="5d800-2697">The use of an unmanaged pointer is not permitted in verifiable code.</span></span> <span data-ttu-id="5d800-2698">Поле объекта задается маркером метаданных, который должен ссылаться на элемент поля.</span><span class="sxs-lookup"><span data-stu-id="5d800-2698">The object's field is specified by a metadata token that must refer to a field member.</span></span>  
  
 <span data-ttu-id="5d800-2699">Значение, возвращаемое `ldflda`, является управляемым указателем (тип `&`), если только объект не передается в стек как неуправляемый указатель, в этом случае возвращаемый адрес также является неуправляемым указателем (тип `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-2699">The value returned by `ldflda` is a managed pointer (type `&`) unless the object is pushed onto the stack as an unmanaged pointer, in which case the return address is also an unmanaged pointer (type `native int`).</span></span>  
  
 <span data-ttu-id="5d800-2700">Оператору `ldflda` может предшествовать один или оба префикса <xref:System.Reflection.Emit.OpCodes.Unaligned> и <xref:System.Reflection.Emit.OpCodes.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="5d800-2700">The `ldflda` instruction can be preceded by either or both of the <xref:System.Reflection.Emit.OpCodes.Unaligned> and <xref:System.Reflection.Emit.OpCodes.Volatile> prefixes.</span></span>  
  
 <span data-ttu-id="5d800-2701"><xref:System.InvalidOperationException> создается, если объект не находится в домене приложения, из которого осуществляется доступ.</span><span class="sxs-lookup"><span data-stu-id="5d800-2701"><xref:System.InvalidOperationException> is thrown if the object is not within the application domain from which it is being accessed.</span></span> <span data-ttu-id="5d800-2702">Не удается загрузить адрес поля, не находящегося внутри доступного домена приложения.</span><span class="sxs-lookup"><span data-stu-id="5d800-2702">The address of a field that is not inside the accessing application domain cannot be loaded.</span></span>  
  
 <span data-ttu-id="5d800-2703"><xref:System.NullReferenceException> создается, если объект имеет значение null, а поле не является статическим.</span><span class="sxs-lookup"><span data-stu-id="5d800-2703"><xref:System.NullReferenceException> is thrown if the object is null and the field is not static.</span></span>  
  
 <span data-ttu-id="5d800-2704"><xref:System.MissingFieldException> создается, если указанное поле не найдено в метаданных.</span><span class="sxs-lookup"><span data-stu-id="5d800-2704"><xref:System.MissingFieldException> is thrown if the specified field is not found in the metadata.</span></span> <span data-ttu-id="5d800-2705">Обычно это проверяется при преобразовании инструкций промежуточного языка MSIL в машинный код, а не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-2705">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.</span></span>  
  
 <span data-ttu-id="5d800-2706">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldflda`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2706">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldflda` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2707">ILGenerator. Emit (код операции, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="5d800-2707">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldftn">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldftn;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldftn" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldftn" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldftn As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldftn;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldftn : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldftn" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2708">Помещает в стек вычислений неуправляемый указатель (с типом <see langword="native int" />) на машинный код, реализующий заданный метод.</span><span class="sxs-lookup"><span data-stu-id="5d800-2708">Pushes an unmanaged pointer (type <see langword="native int" />) to the native code implementing a specific method onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2709">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2709">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2710">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2710">Format</span></span>|<span data-ttu-id="5d800-2711">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2711">Assembly Format</span></span>|<span data-ttu-id="5d800-2712">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2712">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2713">FE 06 < `T` @ NO__T-1</span><span class="sxs-lookup"><span data-stu-id="5d800-2713">FE 06 < `T` ></span></span>|<span data-ttu-id="5d800-2714">ldftn `method`</span><span class="sxs-lookup"><span data-stu-id="5d800-2714">ldftn `method`</span></span>|<span data-ttu-id="5d800-2715">Помещает указатель на метод, на который ссылается `method` в стеке.</span><span class="sxs-lookup"><span data-stu-id="5d800-2715">Pushes a pointer to a method referenced by `method` on the stack.</span></span>|  
  
 <span data-ttu-id="5d800-2716">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2716">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2717">Неуправляемый указатель на конкретный метод помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2717">The unmanaged pointer to a specific method is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2718">Конкретный метод (`method`) можно вызывать с помощью инструкции <xref:System.Reflection.Emit.OpCodes.Calli>, если она ссылается на управляемый метод (или на заглушку, переход от управляемого кода к неуправляемому).</span><span class="sxs-lookup"><span data-stu-id="5d800-2718">The specific method (`method`) can be called using the <xref:System.Reflection.Emit.OpCodes.Calli> instruction if it references a managed method (or a stub that transitions from managed to unmanaged code).</span></span>  
  
 <span data-ttu-id="5d800-2719">Возвращаемое значение указывает на машинный код, используя соглашение о вызовах CLR.</span><span class="sxs-lookup"><span data-stu-id="5d800-2719">The value returned points to native code using the CLR calling convention.</span></span> <span data-ttu-id="5d800-2720">Этот указатель метода не должен передаваться в неуправляемый машинный код в качестве подпрограммы обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="5d800-2720">This method pointer should not be passed to unmanaged native code as a callback routine.</span></span>  
  
 <span data-ttu-id="5d800-2721">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldftn`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2721">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldftn` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2722">ILGenerator. Emit (код операции, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="5d800-2722">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2723">Выполняет косвенную загрузку значения с типом <see langword="native int" /> в стек вычислений как <see langword="native int" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-2723">Loads a value of type <see langword="native int" /> as a <see langword="native int" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2724">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2724">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2725">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2725">Format</span></span>|<span data-ttu-id="5d800-2726">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2726">Assembly Format</span></span>|<span data-ttu-id="5d800-2727">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2727">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2728">4D</span><span class="sxs-lookup"><span data-stu-id="5d800-2728">4D</span></span>|<span data-ttu-id="5d800-2729">ldind. i</span><span class="sxs-lookup"><span data-stu-id="5d800-2729">ldind.i</span></span>|<span data-ttu-id="5d800-2730">Загружает значение `native int` по адресу `addr` в стек как `native int`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2730">Loads the `native int` value at address `addr` onto the stack as a `native int`.</span></span>|  
  
 <span data-ttu-id="5d800-2731">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2731">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2732">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2732">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-2733">Адрес извлекается из стека; извлекается значение, расположенное по адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-2733">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="5d800-2734">Полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2734">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2735">Инструкция `ldind.i` выполняет косвенную загрузку значения `native int` из указанного адреса (типа `native int`, `&` или \*) в стек как `native int`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2735">The `ldind.i` instruction indirectly loads a `native int` value from the specified address (of type `native int`, `&`, or \*) onto the stack as a `native int`.</span></span>  
  
 <span data-ttu-id="5d800-2736">Все инструкции `ldind` являются ярлыками для инструкции <xref:System.Reflection.Emit.OpCodes.Ldobj>, указывающей соответствующий встроенный класс значения.</span><span class="sxs-lookup"><span data-stu-id="5d800-2736">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="5d800-2737">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32` (не `native int`) при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2737">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="5d800-2738">Значения с плавающей запятой преобразуются в тип `F` при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2738">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5d800-2739">Правильно сформированный язык MSIL гарантирует, что инструкции `ldind` будут использоваться способом, согласованным с типом указателя.</span><span class="sxs-lookup"><span data-stu-id="5d800-2739">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="5d800-2740">Адрес, изначально Отправленный в стек, должен быть согласован с естественным размером объектов на компьютере или <xref:System.NullReferenceException> (см. инструкции по префиксу <xref:System.Reflection.Emit.OpCodes.Unaligned> для предупредительных мер).</span><span class="sxs-lookup"><span data-stu-id="5d800-2740">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="5d800-2741">Результаты всех инструкций MSIL, которые возвращают адреса (например, <xref:System.Reflection.Emit.OpCodes.Ldloca> и <xref:System.Reflection.Emit.OpCodes.Ldarga>), безопасно согласованы.</span><span class="sxs-lookup"><span data-stu-id="5d800-2741">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="5d800-2742">Для типов больших значений, превышающих 1 байт, порядок байтов зависит от целевого ЦП.</span><span class="sxs-lookup"><span data-stu-id="5d800-2742">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="5d800-2743">Код, зависящий от порядка байтов, может выполняться не на всех платформах.</span><span class="sxs-lookup"><span data-stu-id="5d800-2743">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="5d800-2744"><xref:System.NullReferenceException> может возникать, если обнаружен недопустимый адрес.</span><span class="sxs-lookup"><span data-stu-id="5d800-2744"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="5d800-2745">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldind.i`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2745">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2746">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2746">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2747">Выполняет косвенную загрузку значения с типом <see langword="int8" /> в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-2747">Loads a value of type <see langword="int8" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2748">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2748">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2749">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2749">Format</span></span>|<span data-ttu-id="5d800-2750">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2750">Assembly Format</span></span>|<span data-ttu-id="5d800-2751">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2751">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2752">46</span><span class="sxs-lookup"><span data-stu-id="5d800-2752">46</span></span>|<span data-ttu-id="5d800-2753">ldind. i1</span><span class="sxs-lookup"><span data-stu-id="5d800-2753">ldind.i1</span></span>|<span data-ttu-id="5d800-2754">Загружает значение `int8` по адресу `addr` в стек как `int32`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2754">Loads the `int8` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="5d800-2755">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2755">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2756">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2756">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-2757">Адрес извлекается из стека; извлекается значение, расположенное по адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-2757">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="5d800-2758">Полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2758">The fetched value is pushed onto the stack.</span></span> 
  
 <span data-ttu-id="5d800-2759">Инструкция `ldind.i1` выполняет косвенную загрузку значения `int8` из указанного адреса (типа `native int`, `&` или \*) в стек как `int32`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2759">The `ldind.i1` instruction indirectly loads an `int8` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="5d800-2760">Все инструкции `ldind` являются ярлыками для инструкции <xref:System.Reflection.Emit.OpCodes.Ldobj>, указывающей соответствующий встроенный класс значения.</span><span class="sxs-lookup"><span data-stu-id="5d800-2760">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="5d800-2761">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32` (не `native int`) при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2761">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="5d800-2762">Значения с плавающей запятой преобразуются в тип `F` при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2762">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5d800-2763">Правильно сформированный язык MSIL гарантирует, что инструкции `ldind` будут использоваться способом, согласованным с типом указателя.</span><span class="sxs-lookup"><span data-stu-id="5d800-2763">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="5d800-2764">Адрес, изначально Отправленный в стек, должен быть согласован с естественным размером объектов на компьютере или <xref:System.NullReferenceException> (см. инструкции по префиксу <xref:System.Reflection.Emit.OpCodes.Unaligned> для предупредительных мер).</span><span class="sxs-lookup"><span data-stu-id="5d800-2764">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="5d800-2765">Результаты всех инструкций MSIL, которые возвращают адреса (например, <xref:System.Reflection.Emit.OpCodes.Ldloca> и <xref:System.Reflection.Emit.OpCodes.Ldarga>), безопасно согласованы.</span><span class="sxs-lookup"><span data-stu-id="5d800-2765">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="5d800-2766">Для типов больших значений, превышающих 1 байт, порядок байтов зависит от целевого ЦП.</span><span class="sxs-lookup"><span data-stu-id="5d800-2766">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="5d800-2767">Код, зависящий от порядка байтов, может выполняться не на всех платформах.</span><span class="sxs-lookup"><span data-stu-id="5d800-2767">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="5d800-2768"><xref:System.NullReferenceException> может возникать, если обнаружен недопустимый адрес.</span><span class="sxs-lookup"><span data-stu-id="5d800-2768"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="5d800-2769">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldind.i1`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2769">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i1` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2770">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2770">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2771">Выполняет косвенную загрузку значения с типом <see langword="int16" /> в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-2771">Loads a value of type <see langword="int16" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2772">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2772">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2773">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2773">Format</span></span>|<span data-ttu-id="5d800-2774">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2774">Assembly Format</span></span>|<span data-ttu-id="5d800-2775">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2775">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2776">48</span><span class="sxs-lookup"><span data-stu-id="5d800-2776">48</span></span>|<span data-ttu-id="5d800-2777">ldind. i2</span><span class="sxs-lookup"><span data-stu-id="5d800-2777">ldind.i2</span></span>|<span data-ttu-id="5d800-2778">Загружает значение `int16` по адресу `addr` в стек как `int32`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2778">Loads the `int16` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="5d800-2779">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2779">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2780">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2780">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-2781">Адрес извлекается из стека; извлекается значение, расположенное по адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-2781">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="5d800-2782">Полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2782">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2783">Инструкция `ldind.i2` выполняет косвенную загрузку значения `int16` из указанного адреса (типа `native int`, `&` или \*) в стек как `int32`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2783">The `ldind.i2` instruction indirectly loads an `int16` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="5d800-2784">Все инструкции `ldind` являются ярлыками для инструкции <xref:System.Reflection.Emit.OpCodes.Ldobj>, указывающей соответствующий встроенный класс значения.</span><span class="sxs-lookup"><span data-stu-id="5d800-2784">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="5d800-2785">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32` (не `native int`) при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2785">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="5d800-2786">Значения с плавающей запятой преобразуются в тип `F` при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2786">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5d800-2787">Правильно сформированный язык MSIL гарантирует, что инструкции `ldind` будут использоваться способом, согласованным с типом указателя.</span><span class="sxs-lookup"><span data-stu-id="5d800-2787">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="5d800-2788">Адрес, изначально Отправленный в стек, должен быть согласован с естественным размером объектов на компьютере или <xref:System.NullReferenceException> (см. инструкции по префиксу <xref:System.Reflection.Emit.OpCodes.Unaligned> для предупредительных мер).</span><span class="sxs-lookup"><span data-stu-id="5d800-2788">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="5d800-2789">Результаты всех инструкций MSIL, которые возвращают адреса (например, <xref:System.Reflection.Emit.OpCodes.Ldloca> и <xref:System.Reflection.Emit.OpCodes.Ldarga>), безопасно согласованы.</span><span class="sxs-lookup"><span data-stu-id="5d800-2789">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="5d800-2790">Для типов больших значений, превышающих 1 байт, порядок байтов зависит от целевого ЦП.</span><span class="sxs-lookup"><span data-stu-id="5d800-2790">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="5d800-2791">Код, зависящий от порядка байтов, может выполняться не на всех платформах.</span><span class="sxs-lookup"><span data-stu-id="5d800-2791">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="5d800-2792"><xref:System.NullReferenceException> может возникать, если обнаружен недопустимый адрес.</span><span class="sxs-lookup"><span data-stu-id="5d800-2792"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="5d800-2793">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldind.i2`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2793">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i2` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2794">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2794">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2795">Выполняет косвенную загрузку значения с типом <see langword="int32" /> в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-2795">Loads a value of type <see langword="int32" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2796">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2796">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2797">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2797">Format</span></span>|<span data-ttu-id="5d800-2798">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2798">Assembly Format</span></span>|<span data-ttu-id="5d800-2799">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2799">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2800">4A</span><span class="sxs-lookup"><span data-stu-id="5d800-2800">4A</span></span>|<span data-ttu-id="5d800-2801">ldind. i4</span><span class="sxs-lookup"><span data-stu-id="5d800-2801">ldind.i4</span></span>|<span data-ttu-id="5d800-2802">Загружает значение `int32` по адресу `addr` в стек как `int32`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2802">Loads the `int32` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="5d800-2803">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2803">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2804">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2804">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-2805">Адрес извлекается из стека; извлекается значение, расположенное по адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-2805">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="5d800-2806">Полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2806">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2807">Инструкция `ldind.i4` выполняет косвенную загрузку значения `int32` из указанного адреса (типа `native int`, `&` или \*) в стек как `int32`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2807">The `ldind.i4` instruction indirectly loads an `int32` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="5d800-2808">Все инструкции `ldind` являются ярлыками для инструкции <xref:System.Reflection.Emit.OpCodes.Ldobj>, указывающей соответствующий встроенный класс значения.</span><span class="sxs-lookup"><span data-stu-id="5d800-2808">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="5d800-2809">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32` (не `native int`) при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2809">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="5d800-2810">Значения с плавающей запятой преобразуются в тип `F` при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2810">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5d800-2811">Правильно сформированный язык MSIL гарантирует, что инструкции `ldind` будут использоваться способом, согласованным с типом указателя.</span><span class="sxs-lookup"><span data-stu-id="5d800-2811">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="5d800-2812">Адрес, изначально Отправленный в стек, должен быть согласован с естественным размером объектов на компьютере или <xref:System.NullReferenceException> (см. инструкции по префиксу <xref:System.Reflection.Emit.OpCodes.Unaligned> для предупредительных мер).</span><span class="sxs-lookup"><span data-stu-id="5d800-2812">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="5d800-2813">Результаты всех инструкций MSIL, которые возвращают адреса (например, <xref:System.Reflection.Emit.OpCodes.Ldloca> и <xref:System.Reflection.Emit.OpCodes.Ldarga>), безопасно согласованы.</span><span class="sxs-lookup"><span data-stu-id="5d800-2813">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="5d800-2814">Для типов больших значений, превышающих 1 байт, порядок байтов зависит от целевого ЦП.</span><span class="sxs-lookup"><span data-stu-id="5d800-2814">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="5d800-2815">Код, зависящий от порядка байтов, может выполняться не на всех платформах.</span><span class="sxs-lookup"><span data-stu-id="5d800-2815">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="5d800-2816"><xref:System.NullReferenceException> может возникать, если обнаружен недопустимый адрес.</span><span class="sxs-lookup"><span data-stu-id="5d800-2816"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="5d800-2817">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldind.i4`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2817">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i4` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2818">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2818">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2819">Выполняет косвенную загрузку значения с типом <see langword="int64" /> в стек вычислений как <see langword="int64" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-2819">Loads a value of type <see langword="int64" /> as an <see langword="int64" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2820">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2820">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2821">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2821">Format</span></span>|<span data-ttu-id="5d800-2822">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2822">Assembly Format</span></span>|<span data-ttu-id="5d800-2823">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2823">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2824">4C</span><span class="sxs-lookup"><span data-stu-id="5d800-2824">4C</span></span>|<span data-ttu-id="5d800-2825">ldind. i8</span><span class="sxs-lookup"><span data-stu-id="5d800-2825">ldind.i8</span></span>|<span data-ttu-id="5d800-2826">Загружает значение `int64` по адресу `addr` в стек как `int64`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2826">Loads the `int64` value at address `addr` onto the stack as an `int64`.</span></span>|  
  
 <span data-ttu-id="5d800-2827">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2827">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2828">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2828">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-2829">Адрес извлекается из стека; извлекается значение, расположенное по адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-2829">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="5d800-2830">Полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2830">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2831">Инструкция `ldind.i8` выполняет косвенную загрузку значения `int64` из указанного адреса (типа `native int`, `&` или \*) в стек как `int64`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2831">The `ldind.i8` instruction indirectly loads an `int64` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int64`.</span></span>  
  
 <span data-ttu-id="5d800-2832">Все инструкции `ldind` являются ярлыками для инструкции <xref:System.Reflection.Emit.OpCodes.Ldobj>, указывающей соответствующий встроенный класс значения.</span><span class="sxs-lookup"><span data-stu-id="5d800-2832">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="5d800-2833">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32` (не `native int`) при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2833">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="5d800-2834">Значения с плавающей запятой преобразуются в тип `F` при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2834">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5d800-2835">Правильно сформированный язык MSIL гарантирует, что инструкции `ldind` будут использоваться способом, согласованным с типом указателя.</span><span class="sxs-lookup"><span data-stu-id="5d800-2835">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="5d800-2836">Адрес, изначально Отправленный в стек, должен быть согласован с естественным размером объектов на компьютере или <xref:System.NullReferenceException> (см. инструкции по префиксу <xref:System.Reflection.Emit.OpCodes.Unaligned> для предупредительных мер).</span><span class="sxs-lookup"><span data-stu-id="5d800-2836">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="5d800-2837">Результаты всех инструкций MSIL, которые возвращают адреса (например, <xref:System.Reflection.Emit.OpCodes.Ldloca> и <xref:System.Reflection.Emit.OpCodes.Ldarga>), безопасно согласованы.</span><span class="sxs-lookup"><span data-stu-id="5d800-2837">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="5d800-2838">Для типов больших значений, превышающих 1 байт, порядок байтов зависит от целевого ЦП.</span><span class="sxs-lookup"><span data-stu-id="5d800-2838">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="5d800-2839">Код, зависящий от порядка байтов, может выполняться не на всех платформах.</span><span class="sxs-lookup"><span data-stu-id="5d800-2839">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="5d800-2840"><xref:System.NullReferenceException> может возникать, если обнаружен недопустимый адрес.</span><span class="sxs-lookup"><span data-stu-id="5d800-2840"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="5d800-2841">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldind.i8`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2841">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i8` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2842">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2842">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2843">Выполняет косвенную загрузку значения с типом <see langword="float32" /> в стек вычислений как <see langword="F" /> (число с плавающей запятой).</span><span class="sxs-lookup"><span data-stu-id="5d800-2843">Loads a value of type <see langword="float32" /> as a type <see langword="F" /> (float) onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2844">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2844">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2845">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2845">Format</span></span>|<span data-ttu-id="5d800-2846">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2846">Assembly Format</span></span>|<span data-ttu-id="5d800-2847">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2847">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2848">4E</span><span class="sxs-lookup"><span data-stu-id="5d800-2848">4E</span></span>|<span data-ttu-id="5d800-2849">ldind. R4</span><span class="sxs-lookup"><span data-stu-id="5d800-2849">ldind.r4</span></span>|<span data-ttu-id="5d800-2850">Загружает значение `float32` по адресу `addr` в стек как тип `F`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2850">Loads the `float32` value at address `addr` onto the stack as a type `F`.</span></span>|  
  
 <span data-ttu-id="5d800-2851">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2851">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2852">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2852">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-2853">Адрес извлекается из стека; извлекается значение, расположенное по адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-2853">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="5d800-2854">Полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2854">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2855">Инструкция `ldind.r4` выполняет косвенную загрузку значения `float32` из указанного адреса (типа `native int`, `&` или \*) в стек как тип `F`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2855">The `ldind.r4` instruction indirectly loads a `float32` value from the specified address (of type `native int`, `&`, or \*) onto the stack as a type `F`.</span></span>  
  
 <span data-ttu-id="5d800-2856">Все инструкции `ldind` являются ярлыками для инструкции <xref:System.Reflection.Emit.OpCodes.Ldobj>, указывающей соответствующий встроенный класс значения.</span><span class="sxs-lookup"><span data-stu-id="5d800-2856">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="5d800-2857">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32` (не `native int`) при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2857">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="5d800-2858">Значения с плавающей запятой преобразуются в тип `F` при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2858">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5d800-2859">Правильно сформированный язык MSIL гарантирует, что инструкции `ldind` будут использоваться способом, согласованным с типом указателя.</span><span class="sxs-lookup"><span data-stu-id="5d800-2859">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="5d800-2860">Адрес, изначально Отправленный в стек, должен быть согласован с естественным размером объектов на компьютере или <xref:System.NullReferenceException> (см. инструкции по префиксу <xref:System.Reflection.Emit.OpCodes.Unaligned> для предупредительных мер).</span><span class="sxs-lookup"><span data-stu-id="5d800-2860">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="5d800-2861">Результаты всех инструкций MSIL, которые возвращают адреса (например, <xref:System.Reflection.Emit.OpCodes.Ldloca> и <xref:System.Reflection.Emit.OpCodes.Ldarga>), безопасно согласованы.</span><span class="sxs-lookup"><span data-stu-id="5d800-2861">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="5d800-2862">Для типов больших значений, превышающих 1 байт, порядок байтов зависит от целевого ЦП.</span><span class="sxs-lookup"><span data-stu-id="5d800-2862">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="5d800-2863">Код, зависящий от порядка байтов, может выполняться не на всех платформах.</span><span class="sxs-lookup"><span data-stu-id="5d800-2863">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="5d800-2864"><xref:System.NullReferenceException> может возникать, если обнаружен недопустимый адрес.</span><span class="sxs-lookup"><span data-stu-id="5d800-2864"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="5d800-2865">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldind.r4`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2865">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.r4` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2866">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2866">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2867">Выполняет косвенную загрузку значения с типом <see langword="float64" /> в стек вычислений как <see langword="F" /> (число с плавающей запятой).</span><span class="sxs-lookup"><span data-stu-id="5d800-2867">Loads a value of type <see langword="float64" /> as a type <see langword="F" /> (float) onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2868">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2868">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2869">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2869">Format</span></span>|<span data-ttu-id="5d800-2870">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2870">Assembly Format</span></span>|<span data-ttu-id="5d800-2871">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2871">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2872">4F</span><span class="sxs-lookup"><span data-stu-id="5d800-2872">4F</span></span>|<span data-ttu-id="5d800-2873">ldind. R8</span><span class="sxs-lookup"><span data-stu-id="5d800-2873">ldind.r8</span></span>|<span data-ttu-id="5d800-2874">Загружает значение `float64` по адресу `addr` в стек как тип `F`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2874">Loads the `float64` value at address `addr` onto the stack as a type `F`.</span></span>|  
  
 <span data-ttu-id="5d800-2875">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2875">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2876">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2876">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-2877">Адрес извлекается из стека; извлекается значение, расположенное по адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-2877">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="5d800-2878">Полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2878">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2879">Инструкция `ldind.r8` выполняет косвенную загрузку значения `float64` из указанного адреса (типа `native int`, `&` или \*) в стек как `float64`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2879">The `ldind.r8` instruction indirectly loads a `float64` value from the specified address (of type `native int`, `&`, or \*) onto the stack as a `float64`.</span></span>  
  
 <span data-ttu-id="5d800-2880">Все инструкции `ldind` являются ярлыками для инструкции <xref:System.Reflection.Emit.OpCodes.Ldobj>, указывающей соответствующий встроенный класс значения.</span><span class="sxs-lookup"><span data-stu-id="5d800-2880">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="5d800-2881">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32` (не `native int`) при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2881">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="5d800-2882">Значения с плавающей запятой преобразуются в тип `F` при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2882">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5d800-2883">Правильно сформированный язык MSIL гарантирует, что инструкции `ldind` будут использоваться способом, согласованным с типом указателя.</span><span class="sxs-lookup"><span data-stu-id="5d800-2883">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="5d800-2884">Адрес, изначально Отправленный в стек, должен быть согласован с естественным размером объектов на компьютере или <xref:System.NullReferenceException> (см. инструкции по префиксу <xref:System.Reflection.Emit.OpCodes.Unaligned> для предупредительных мер).</span><span class="sxs-lookup"><span data-stu-id="5d800-2884">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="5d800-2885">Результаты всех инструкций MSIL, которые возвращают адреса (например, <xref:System.Reflection.Emit.OpCodes.Ldloca> и <xref:System.Reflection.Emit.OpCodes.Ldarga>), безопасно согласованы.</span><span class="sxs-lookup"><span data-stu-id="5d800-2885">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="5d800-2886">Для типов больших значений, превышающих 1 байт, порядок байтов зависит от целевого ЦП.</span><span class="sxs-lookup"><span data-stu-id="5d800-2886">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="5d800-2887">Код, зависящий от порядка байтов, может выполняться не на всех платформах.</span><span class="sxs-lookup"><span data-stu-id="5d800-2887">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="5d800-2888"><xref:System.NullReferenceException> может возникать, если обнаружен недопустимый адрес.</span><span class="sxs-lookup"><span data-stu-id="5d800-2888"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="5d800-2889">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldind.r8`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2889">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.r8` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2890">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2890">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2891">Выполняет косвенную загрузку в стек вычислений ссылки на объект как <see langword="O" /> (ссылка на объект).</span><span class="sxs-lookup"><span data-stu-id="5d800-2891">Loads an object reference as a type <see langword="O" /> (object reference) onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2892">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2892">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2893">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2893">Format</span></span>|<span data-ttu-id="5d800-2894">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2894">Assembly Format</span></span>|<span data-ttu-id="5d800-2895">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2895">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2896">50</span><span class="sxs-lookup"><span data-stu-id="5d800-2896">50</span></span>|<span data-ttu-id="5d800-2897">ldind. ref</span><span class="sxs-lookup"><span data-stu-id="5d800-2897">ldind.ref</span></span>|<span data-ttu-id="5d800-2898">Загружает ссылку на объект по адресу `addr` в стек как тип `O`</span><span class="sxs-lookup"><span data-stu-id="5d800-2898">Loads the object reference at address `addr` onto the stack as a type `O`</span></span>|  
  
 <span data-ttu-id="5d800-2899">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2899">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2900">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2900">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-2901">Адрес извлекается из стека; Ссылка на объект, расположенная по адресу, выбирается.</span><span class="sxs-lookup"><span data-stu-id="5d800-2901">The address is popped from the stack; the object reference located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="5d800-2902">Извлеченная ссылка помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2902">The fetched reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2903">Инструкция `ldind.ref` выполняет косвенную загрузку ссылки на объект с указанным адресом (типа `native int`, `&` или \*) в стек как тип `O`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2903">The `ldind.ref` instruction indirectly loads the object reference the specified address (of type `native int`, `&`, or \*) onto the stack as type `O`.</span></span>  
  
 <span data-ttu-id="5d800-2904">Все инструкции `ldind` являются ярлыками для инструкции <xref:System.Reflection.Emit.OpCodes.Ldobj>, указывающей соответствующий встроенный класс значения.</span><span class="sxs-lookup"><span data-stu-id="5d800-2904">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="5d800-2905">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32` (не `native int`) при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2905">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="5d800-2906">Значения с плавающей запятой преобразуются в тип `F` при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2906">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5d800-2907">Правильно сформированный язык MSIL гарантирует, что инструкции `ldind` будут использоваться способом, согласованным с типом указателя.</span><span class="sxs-lookup"><span data-stu-id="5d800-2907">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="5d800-2908">Адрес, изначально Отправленный в стек, должен быть согласован с естественным размером объектов на компьютере или <xref:System.NullReferenceException> (см. инструкции по префиксу <xref:System.Reflection.Emit.OpCodes.Unaligned> для предупредительных мер).</span><span class="sxs-lookup"><span data-stu-id="5d800-2908">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="5d800-2909">Результаты всех инструкций MSIL, которые возвращают адреса (например, <xref:System.Reflection.Emit.OpCodes.Ldloca> и <xref:System.Reflection.Emit.OpCodes.Ldarga>), безопасно согласованы.</span><span class="sxs-lookup"><span data-stu-id="5d800-2909">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="5d800-2910">Для типов больших значений, превышающих 1 байт, порядок байтов зависит от целевого ЦП.</span><span class="sxs-lookup"><span data-stu-id="5d800-2910">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="5d800-2911">Код, зависящий от порядка байтов, может выполняться не на всех платформах.</span><span class="sxs-lookup"><span data-stu-id="5d800-2911">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="5d800-2912"><xref:System.NullReferenceException> может возникать, если обнаружен недопустимый адрес.</span><span class="sxs-lookup"><span data-stu-id="5d800-2912"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="5d800-2913">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldind.ref`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2913">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.ref` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2914">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2914">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2915">Выполняет косвенную загрузку значения с типом <see langword="unsigned int8" /> в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-2915">Loads a value of type <see langword="unsigned int8" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2916">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2916">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2917">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2917">Format</span></span>|<span data-ttu-id="5d800-2918">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2918">Assembly Format</span></span>|<span data-ttu-id="5d800-2919">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2919">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2920">47</span><span class="sxs-lookup"><span data-stu-id="5d800-2920">47</span></span>|<span data-ttu-id="5d800-2921">ldind. U1</span><span class="sxs-lookup"><span data-stu-id="5d800-2921">ldind.u1</span></span>|<span data-ttu-id="5d800-2922">Загружает значение `unsigned int8` по адресу `addr` в стек как `int32`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2922">Loads the `unsigned int8` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="5d800-2923">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2923">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2924">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2924">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-2925">Адрес извлекается из стека; извлекается значение, расположенное по адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-2925">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="5d800-2926">Полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2926">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2927">Инструкция `ldind.u1` выполняет косвенную загрузку значения `unsigned int8` из указанного адреса (типа @ no__t-2, `&` или \*) в стек как `int32`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2927">The `ldind.u1` instruction indirectly loads an `unsigned int8` value from the specified address (of type`native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="5d800-2928">Все инструкции `ldind` являются ярлыками для инструкции <xref:System.Reflection.Emit.OpCodes.Ldobj>, указывающей соответствующий встроенный класс значения.</span><span class="sxs-lookup"><span data-stu-id="5d800-2928">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="5d800-2929">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32` (не `native int`) при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2929">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="5d800-2930">Значения с плавающей запятой преобразуются в тип `F` при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2930">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5d800-2931">Правильно сформированный язык MSIL гарантирует, что инструкции `ldind` будут использоваться способом, согласованным с типом указателя.</span><span class="sxs-lookup"><span data-stu-id="5d800-2931">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="5d800-2932">Адрес, изначально Отправленный в стек, должен быть согласован с естественным размером объектов на компьютере или <xref:System.NullReferenceException> (см. инструкции по префиксу <xref:System.Reflection.Emit.OpCodes.Unaligned> для предупредительных мер).</span><span class="sxs-lookup"><span data-stu-id="5d800-2932">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="5d800-2933">Результаты всех инструкций MSIL, которые возвращают адреса (например, <xref:System.Reflection.Emit.OpCodes.Ldloca> и <xref:System.Reflection.Emit.OpCodes.Ldarga>), безопасно согласованы.</span><span class="sxs-lookup"><span data-stu-id="5d800-2933">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="5d800-2934">Для типов больших значений, превышающих 1 байт, порядок байтов зависит от целевого ЦП.</span><span class="sxs-lookup"><span data-stu-id="5d800-2934">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="5d800-2935">Код, зависящий от порядка байтов, может выполняться не на всех платформах.</span><span class="sxs-lookup"><span data-stu-id="5d800-2935">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="5d800-2936"><xref:System.NullReferenceException> может возникать, если обнаружен недопустимый адрес.</span><span class="sxs-lookup"><span data-stu-id="5d800-2936"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="5d800-2937">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldind.u1`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2937">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.u1` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2938">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2938">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2939">Выполняет косвенную загрузку значения с типом <see langword="unsigned int16" /> в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-2939">Loads a value of type <see langword="unsigned int16" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2940">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2940">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2941">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2941">Format</span></span>|<span data-ttu-id="5d800-2942">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2942">Assembly Format</span></span>|<span data-ttu-id="5d800-2943">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2943">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2944">49</span><span class="sxs-lookup"><span data-stu-id="5d800-2944">49</span></span>|<span data-ttu-id="5d800-2945">ldind. U2</span><span class="sxs-lookup"><span data-stu-id="5d800-2945">ldind.u2</span></span>|<span data-ttu-id="5d800-2946">Загружает значение `unsigned int16` по адресу `addr` в стек как `int32`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2946">Loads the `unsigned int16` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="5d800-2947">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2947">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2948">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2948">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-2949">Адрес извлекается из стека; извлекается значение, расположенное по адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-2949">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="5d800-2950">Полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2950">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2951">Инструкция `ldind.u2` выполняет косвенную загрузку значения `unsigned int16` из указанного адреса (типа `native int`, `&` или \*) в стек как `int32`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2951">The `ldind.u2` instruction indirectly loads an `unsigned int16` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="5d800-2952">Все инструкции `ldind` являются ярлыками для инструкции <xref:System.Reflection.Emit.OpCodes.Ldobj>, указывающей соответствующий встроенный класс значения.</span><span class="sxs-lookup"><span data-stu-id="5d800-2952">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="5d800-2953">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32` (не `native int`) при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2953">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="5d800-2954">Значения с плавающей запятой преобразуются в тип `F` при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2954">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5d800-2955">Правильно сформированный язык MSIL гарантирует, что инструкции `ldind` будут использоваться способом, согласованным с типом указателя.</span><span class="sxs-lookup"><span data-stu-id="5d800-2955">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="5d800-2956">Адрес, изначально Отправленный в стек, должен быть согласован с естественным размером объектов на компьютере или <xref:System.NullReferenceException> (см. инструкции по префиксу <xref:System.Reflection.Emit.OpCodes.Unaligned> для предупредительных мер).</span><span class="sxs-lookup"><span data-stu-id="5d800-2956">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="5d800-2957">Результаты всех инструкций MSIL, которые возвращают адреса (например, <xref:System.Reflection.Emit.OpCodes.Ldloca> и <xref:System.Reflection.Emit.OpCodes.Ldarga>), безопасно согласованы.</span><span class="sxs-lookup"><span data-stu-id="5d800-2957">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="5d800-2958">Для типов больших значений, превышающих 1 байт, порядок байтов зависит от целевого ЦП.</span><span class="sxs-lookup"><span data-stu-id="5d800-2958">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="5d800-2959">Код, зависящий от порядка байтов, может выполняться не на всех платформах.</span><span class="sxs-lookup"><span data-stu-id="5d800-2959">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="5d800-2960"><xref:System.NullReferenceException> может возникать, если обнаружен недопустимый адрес.</span><span class="sxs-lookup"><span data-stu-id="5d800-2960"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="5d800-2961">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldind.u2`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2961">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.u2` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2962">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2962">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2963">Выполняет косвенную загрузку значения с типом <see langword="unsigned int32" /> в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-2963">Loads a value of type <see langword="unsigned int32" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2964">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2964">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2965">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2965">Format</span></span>|<span data-ttu-id="5d800-2966">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2966">Assembly Format</span></span>|<span data-ttu-id="5d800-2967">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2967">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2968">4B</span><span class="sxs-lookup"><span data-stu-id="5d800-2968">4B</span></span>|<span data-ttu-id="5d800-2969">ldind. U4</span><span class="sxs-lookup"><span data-stu-id="5d800-2969">ldind.u4</span></span>|<span data-ttu-id="5d800-2970">Загружает значение `unsigned int32` по адресу `addr` в стек как `int32`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2970">Loads the `unsigned int32` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="5d800-2971">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2971">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2972">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2972">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-2973">Адрес извлекается из стека; извлекается значение, расположенное по адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-2973">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="5d800-2974">Полученное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2974">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2975">Инструкция `ldind.u4` выполняет косвенную загрузку значения `unsigned int32` из указанного адреса (типа `native int`, `&` или \*) в стек как `int32`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2975">The `ldind.u4` instruction indirectly loads an `unsigned int32` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="5d800-2976">Все инструкции `ldind` являются ярлыками для инструкции <xref:System.Reflection.Emit.OpCodes.Ldobj>, указывающей соответствующий встроенный класс значения.</span><span class="sxs-lookup"><span data-stu-id="5d800-2976">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="5d800-2977">Обратите внимание, что целочисленные значения менее 4 байт расширяются до `int32` (не `native int`) при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2977">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="5d800-2978">Значения с плавающей запятой преобразуются в тип `F` при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-2978">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="5d800-2979">Правильно сформированный язык MSIL гарантирует, что инструкции `ldind` будут использоваться способом, согласованным с типом указателя.</span><span class="sxs-lookup"><span data-stu-id="5d800-2979">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="5d800-2980">Адрес, изначально Отправленный в стек, должен быть согласован с естественным размером объектов на компьютере или <xref:System.NullReferenceException> (см. инструкции по префиксу <xref:System.Reflection.Emit.OpCodes.Unaligned> для предупредительных мер).</span><span class="sxs-lookup"><span data-stu-id="5d800-2980">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="5d800-2981">Результаты всех инструкций MSIL, которые возвращают адреса (например, <xref:System.Reflection.Emit.OpCodes.Ldloca> и <xref:System.Reflection.Emit.OpCodes.Ldarga>), безопасно согласованы.</span><span class="sxs-lookup"><span data-stu-id="5d800-2981">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="5d800-2982">Для типов больших значений, превышающих 1 байт, порядок байтов зависит от целевого ЦП.</span><span class="sxs-lookup"><span data-stu-id="5d800-2982">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="5d800-2983">Код, зависящий от порядка байтов, может выполняться не на всех платформах.</span><span class="sxs-lookup"><span data-stu-id="5d800-2983">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="5d800-2984"><xref:System.NullReferenceException> может возникать, если обнаружен недопустимый адрес.</span><span class="sxs-lookup"><span data-stu-id="5d800-2984"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="5d800-2985">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldind.u4`:</span><span class="sxs-lookup"><span data-stu-id="5d800-2985">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.u4` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-2986">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-2986">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldlen">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldlen;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldlen" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldlen" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldlen As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldlen;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldlen : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldlen" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-2987">Помещает в стек вычислений сведения о числе элементов одномерного массива с индексацией от нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-2987">Pushes the number of elements of a zero-based, one-dimensional array onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-2988">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-2988">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-2989">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-2989">Format</span></span>|<span data-ttu-id="5d800-2990">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-2990">Assembly Format</span></span>|<span data-ttu-id="5d800-2991">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-2991">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-2992">8E</span><span class="sxs-lookup"><span data-stu-id="5d800-2992">8E</span></span>|<span data-ttu-id="5d800-2993">лдлен</span><span class="sxs-lookup"><span data-stu-id="5d800-2993">ldlen</span></span>|<span data-ttu-id="5d800-2994">Помещает длину (типа `natural unsigned int`) массива в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2994">Pushes the length (of type `natural unsigned int`) of an array on the stack.</span></span>|  
  
 <span data-ttu-id="5d800-2995">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-2995">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-2996">Ссылка на объект массива помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2996">An object reference to an array is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-2997">Ссылка на массив извлекается из стека, а длина вычислена.</span><span class="sxs-lookup"><span data-stu-id="5d800-2997">The array reference is popped from the stack and the length is computed.</span></span>  
  
3.  <span data-ttu-id="5d800-2998">Длина помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-2998">The length is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-2999">Массивы являются объектами и поэтому представлены значением типа `O`.</span><span class="sxs-lookup"><span data-stu-id="5d800-2999">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="5d800-3000">Длина возвращается как `natural unsigned int`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3000">The length is returned as a `natural unsigned int`.</span></span>  
  
 <span data-ttu-id="5d800-3001">Если ссылка на массив является пустой ссылкой, возникает исключение <xref:System.NullReferenceException>.</span><span class="sxs-lookup"><span data-stu-id="5d800-3001"><xref:System.NullReferenceException> is thrown if the array reference is a null reference.</span></span>  
  
 <span data-ttu-id="5d800-3002">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldlen`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3002">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldlen` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3003">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3003">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3004">Загружает в стек вычислений локальную переменную с указанным индексом.</span><span class="sxs-lookup"><span data-stu-id="5d800-3004">Loads the local variable at a specific index onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3005">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3005">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3006">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3006">Format</span></span>|<span data-ttu-id="5d800-3007">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3007">Assembly Format</span></span>|<span data-ttu-id="5d800-3008">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3008">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3009">FE 0C < `unsigned int16` @ NO__T-1</span><span class="sxs-lookup"><span data-stu-id="5d800-3009">FE 0C < `unsigned int16` ></span></span>|<span data-ttu-id="5d800-3010">требовалась ldloc `index`</span><span class="sxs-lookup"><span data-stu-id="5d800-3010">ldloc `index`</span></span>|<span data-ttu-id="5d800-3011">Загружает локальную переменную с индексом `index` в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3011">Loads the local variable at index `index` onto stack.</span></span>|  
  
 <span data-ttu-id="5d800-3012">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3012">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3013">Значение локальной переменной по указанному индексу помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3013">The local variable value at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3014">Инструкция `ldloc` отправляет содержимое номера локальной переменной по переданному индексу в стек вычислений, где локальные переменные нумеруются 0 – назад.</span><span class="sxs-lookup"><span data-stu-id="5d800-3014">The `ldloc` instruction pushes the contents of the local variable number at the passed index onto the evaluation stack, where the local variables are numbered 0 onwards.</span></span> <span data-ttu-id="5d800-3015">Локальные переменные инициализируются значением 0 перед вводом метода только в том случае, если флаг инициализации метода имеет значение true.</span><span class="sxs-lookup"><span data-stu-id="5d800-3015">Local variables are initialized to 0 before entering the method only if the initialize flag on the method is true.</span></span> <span data-ttu-id="5d800-3016">Возможны локальные переменные 65 535 (2 ^ 16-1) (0 – 65534).</span><span class="sxs-lookup"><span data-stu-id="5d800-3016">There are 65,535 (2^16-1) local variables possible (0-65,534).</span></span> <span data-ttu-id="5d800-3017">Индекс 65 535 является недопустимым, так как вероятные реализации будут использовать 2-байтовое целое число для записи как индекса локального объекта, так и общего числа локальных переменных для данного метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-3017">Index 65,535 is not valid since likely implementations will use a 2-byte integer to track both a local's index, along with the total number of locals for a given method.</span></span> <span data-ttu-id="5d800-3018">Если индекс 65535 был сделан допустимым, для записи числа локальных переменных в таком методе потребуется более широкое целое число.</span><span class="sxs-lookup"><span data-stu-id="5d800-3018">If an index of 65535 had been made valid, it would require a wider integer to track the number of locals in such a method.</span></span>  
  
 <span data-ttu-id="5d800-3019">Инструкции `ldloc.0`, `ldloc.1`, `ldloc.2` и `ldloc.3` обеспечивают эффективную кодировку для доступа к первым четырем локальным переменным.</span><span class="sxs-lookup"><span data-stu-id="5d800-3019">The `ldloc.0`, `ldloc.1`, `ldloc.2`, and `ldloc.3` instructions provide an efficient encoding for accessing the first four local variables.</span></span>  
  
 <span data-ttu-id="5d800-3020">Тип значения совпадает с типом локальной переменной, которая указана в заголовке метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-3020">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="5d800-3021">См. раздел I. локальные переменные размером менее 4 байт развернуты до типа `int32` при загрузке в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3021">See Partition I. Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="5d800-3022">Значения с плавающей запятой разворачиваются до их собственного размера (тип `F`).</span><span class="sxs-lookup"><span data-stu-id="5d800-3022">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="5d800-3023">Следующие перегрузки метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> могут использовать код операции `ldloc`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3023">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldloc` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3024">ILGenerator. Emit (код операции, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="5d800-3024">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="5d800-3025">ILGenerator. Emit (код операции, короткий)</span><span class="sxs-lookup"><span data-stu-id="5d800-3025">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3026">Загружает в стек вычислений локальную переменную с индексом 0.</span><span class="sxs-lookup"><span data-stu-id="5d800-3026">Loads the local variable at index 0 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3027">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3027">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3028">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3028">Format</span></span>|<span data-ttu-id="5d800-3029">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3029">Assembly Format</span></span>|<span data-ttu-id="5d800-3030">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3030">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3031">06</span><span class="sxs-lookup"><span data-stu-id="5d800-3031">06</span></span>|<span data-ttu-id="5d800-3032">требовалась ldloc. 0</span><span class="sxs-lookup"><span data-stu-id="5d800-3032">ldloc.0</span></span>|<span data-ttu-id="5d800-3033">Загружает в стек вычислений локальную переменную с индексом 0.</span><span class="sxs-lookup"><span data-stu-id="5d800-3033">Loads the local variable at index 0 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="5d800-3034">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3034">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3035">Значение локальной переменной в индексе 0 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3035">The local variable value at the index 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3036">`ldloc.0` является особенно эффективной кодировкой для <xref:System.Reflection.Emit.OpCodes.Ldloc>, что позволяет получить доступ к локальной переменной по индексу 0.</span><span class="sxs-lookup"><span data-stu-id="5d800-3036">`ldloc.0` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 0.</span></span>  
  
 <span data-ttu-id="5d800-3037">Тип значения совпадает с типом локальной переменной, которая указана в заголовке метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-3037">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="5d800-3038">Локальные переменные, размер которых меньше 4 байт, разворачиваются до типа `int32`, когда они загружаются в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3038">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="5d800-3039">Значения с плавающей запятой разворачиваются до их собственного размера (тип `F`).</span><span class="sxs-lookup"><span data-stu-id="5d800-3039">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="5d800-3040">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldloc.0`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3040">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.0` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3041">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3041">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3042">Загружает в стек вычислений локальную переменную с индексом 1.</span><span class="sxs-lookup"><span data-stu-id="5d800-3042">Loads the local variable at index 1 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3043">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3043">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3044">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3044">Format</span></span>|<span data-ttu-id="5d800-3045">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3045">Assembly Format</span></span>|<span data-ttu-id="5d800-3046">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3046">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3047">07</span><span class="sxs-lookup"><span data-stu-id="5d800-3047">07</span></span>|<span data-ttu-id="5d800-3048">требовалась ldloc. 1</span><span class="sxs-lookup"><span data-stu-id="5d800-3048">ldloc.1</span></span>|<span data-ttu-id="5d800-3049">Загружает в стек вычислений локальную переменную с индексом 1.</span><span class="sxs-lookup"><span data-stu-id="5d800-3049">Loads the local variable at index 1 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="5d800-3050">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3050">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3051">Значение локальной переменной в индексе 1 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3051">The local variable value at the index 1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3052">`ldloc.1` является особенно эффективной кодировкой для <xref:System.Reflection.Emit.OpCodes.Ldloc>, что позволяет получить доступ к локальной переменной по индексу 1.</span><span class="sxs-lookup"><span data-stu-id="5d800-3052">`ldloc.1` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 1.</span></span>  
  
 <span data-ttu-id="5d800-3053">Тип значения совпадает с типом локальной переменной, которая указана в заголовке метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-3053">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="5d800-3054">Локальные переменные, размер которых меньше 4 байт, разворачиваются до типа `int32`, когда они загружаются в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3054">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="5d800-3055">Значения с плавающей запятой разворачиваются до их собственного размера (тип `F`).</span><span class="sxs-lookup"><span data-stu-id="5d800-3055">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="5d800-3056">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldloc.1`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3056">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.1` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3057">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3057">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3058">Загружает в стек вычислений локальную переменную с индексом 2.</span><span class="sxs-lookup"><span data-stu-id="5d800-3058">Loads the local variable at index 2 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3059">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3059">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3060">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3060">Format</span></span>|<span data-ttu-id="5d800-3061">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3061">Assembly Format</span></span>|<span data-ttu-id="5d800-3062">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3062">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3063">08</span><span class="sxs-lookup"><span data-stu-id="5d800-3063">08</span></span>|<span data-ttu-id="5d800-3064">требовалась ldloc. 2</span><span class="sxs-lookup"><span data-stu-id="5d800-3064">ldloc.2</span></span>|<span data-ttu-id="5d800-3065">Загружает в стек вычислений локальную переменную с индексом 2.</span><span class="sxs-lookup"><span data-stu-id="5d800-3065">Loads the local variable at index 2 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="5d800-3066">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3066">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3067">Значение локальной переменной в индексе 2 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3067">The local variable value at the index 2 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3068">`ldloc.2` является особенно эффективной кодировкой для <xref:System.Reflection.Emit.OpCodes.Ldloc>, что позволяет получить доступ к локальной переменной по индексу 2.</span><span class="sxs-lookup"><span data-stu-id="5d800-3068">`ldloc.2` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 2.</span></span>  
  
 <span data-ttu-id="5d800-3069">Тип значения совпадает с типом локальной переменной, которая указана в заголовке метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-3069">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="5d800-3070">Локальные переменные, размер которых меньше 4 байт, разворачиваются до типа `int32`, когда они загружаются в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3070">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="5d800-3071">Значения с плавающей запятой разворачиваются до их собственного размера (тип `F`).</span><span class="sxs-lookup"><span data-stu-id="5d800-3071">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="5d800-3072">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldloc.2`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3072">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.2` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3073">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3073">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3074">Загружает в стек вычислений локальную переменную с индексом 3.</span><span class="sxs-lookup"><span data-stu-id="5d800-3074">Loads the local variable at index 3 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3075">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3075">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3076">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3076">Format</span></span>|<span data-ttu-id="5d800-3077">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3077">Assembly Format</span></span>|<span data-ttu-id="5d800-3078">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3078">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3079">09</span><span class="sxs-lookup"><span data-stu-id="5d800-3079">09</span></span>|<span data-ttu-id="5d800-3080">требовалась ldloc. 3</span><span class="sxs-lookup"><span data-stu-id="5d800-3080">ldloc.3</span></span>|<span data-ttu-id="5d800-3081">Загружает в стек вычислений локальную переменную с индексом 3.</span><span class="sxs-lookup"><span data-stu-id="5d800-3081">Loads the local variable at index 3 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="5d800-3082">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3082">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3083">Значение локальной переменной в индексе 3 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3083">The local variable value at the index 3 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3084">`ldloc.3` является особенно эффективной кодировкой для <xref:System.Reflection.Emit.OpCodes.Ldloc>, что позволяет получить доступ к локальной переменной по индексу 3.</span><span class="sxs-lookup"><span data-stu-id="5d800-3084">`ldloc.3` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 3.</span></span>  
  
 <span data-ttu-id="5d800-3085">Тип значения совпадает с типом локальной переменной, которая указана в заголовке метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-3085">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="5d800-3086">Локальные переменные, размер которых меньше 4 байт, разворачиваются до типа `int32`, когда они загружаются в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3086">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="5d800-3087">Значения с плавающей запятой разворачиваются до их собственного размера (тип `F`).</span><span class="sxs-lookup"><span data-stu-id="5d800-3087">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="5d800-3088">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldloc.3`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3088">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.3` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3089">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3089">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3090">Загружает в стек вычислений локальную переменную с указанным индексом (короткая форма).</span><span class="sxs-lookup"><span data-stu-id="5d800-3090">Loads the local variable at a specific index onto the evaluation stack, short form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3091">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3091">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3092">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3092">Format</span></span>|<span data-ttu-id="5d800-3093">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3093">Assembly Format</span></span>|<span data-ttu-id="5d800-3094">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3094">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3095">11 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="5d800-3095">11 < `unsigned int8` ></span></span>|<span data-ttu-id="5d800-3096">требовалась ldloc. s `index`</span><span class="sxs-lookup"><span data-stu-id="5d800-3096">ldloc.s `index`</span></span>|<span data-ttu-id="5d800-3097">Загружает локальную переменную с индексом `index` в стек, короткую форму.</span><span class="sxs-lookup"><span data-stu-id="5d800-3097">Loads the local variable at index `index` onto stack, short form.</span></span>|  
  
 <span data-ttu-id="5d800-3098">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3098">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3099">Значение локальной переменной по указанному индексу помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3099">The local variable value at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3100">Инструкция `ldloc.s` отправляет содержимое номера локальной переменной по переданному индексу в стек вычислений, где локальные переменные нумеруются 0 – назад.</span><span class="sxs-lookup"><span data-stu-id="5d800-3100">The `ldloc.s` instruction pushes the contents of the local variable number at the passed index onto the evaluation stack, where the local variables are numbered 0 onwards.</span></span> <span data-ttu-id="5d800-3101">Локальные переменные инициализируются значением 0 перед входом в метод, если флаг инициализации метода имеет значение true.</span><span class="sxs-lookup"><span data-stu-id="5d800-3101">Local variables are initialized to 0 before entering the method if the initialize flag on the method is true.</span></span> <span data-ttu-id="5d800-3102">В краткой форме имеется 256 (2 ^ 8) локальных переменных (0-255), что является более эффективной кодировкой, чем `ldloc`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3102">There are 256 (2^8) local variables possible (0-255) in the short form, which is a more efficient encoding than `ldloc`.</span></span>  
  
 <span data-ttu-id="5d800-3103">Тип значения совпадает с типом локальной переменной, которая указана в заголовке метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-3103">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="5d800-3104">См. раздел I. локальные переменные размером менее 4 байт развернуты до типа `int32` при загрузке в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3104">See Partition I. Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="5d800-3105">Значения с плавающей запятой разворачиваются до их собственного размера (тип `F`).</span><span class="sxs-lookup"><span data-stu-id="5d800-3105">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="5d800-3106">Следующие перегрузки метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> могут использовать код операции `ldloc.s`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3106">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldloc.s` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3107">ILGenerator. Emit (код операции, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="5d800-3107">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="5d800-3108">ILGenerator. Emit (код операции, байт)</span><span class="sxs-lookup"><span data-stu-id="5d800-3108">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloca">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloca;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloca" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloca" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloca As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloca;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloca : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloca" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3109">Загружает в стек вычислений адрес локальной переменной с указанным индексом.</span><span class="sxs-lookup"><span data-stu-id="5d800-3109">Loads the address of the local variable at a specific index onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3110">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3110">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3111">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3111">Format</span></span>|<span data-ttu-id="5d800-3112">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3112">Assembly Format</span></span>|<span data-ttu-id="5d800-3113">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3113">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3114">< FE OD `unsigned int16` @ NO__T-1</span><span class="sxs-lookup"><span data-stu-id="5d800-3114">FE OD < `unsigned int16` ></span></span>|<span data-ttu-id="5d800-3115">лдлока `index`</span><span class="sxs-lookup"><span data-stu-id="5d800-3115">ldloca `index`</span></span>|<span data-ttu-id="5d800-3116">Загружает адрес локальной переменной с `index` в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-3116">Loads the address of the local variable at `index` onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="5d800-3117">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3117">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3118">Адрес, хранящийся в локальной переменной по указанному индексу, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3118">The address stored in the local variable at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3119">Инструкция `ldloca` помещает в стек адрес локальной переменной с переданным индексом, где локальные переменные нумеруются 0 – назад.</span><span class="sxs-lookup"><span data-stu-id="5d800-3119">The `ldloca` instruction pushes the address of the local variable number at the passed index onto the stack, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="5d800-3120">Значение, помещаемое в стек, уже правильно согласовано для использования с такими инструкциями, как <xref:System.Reflection.Emit.OpCodes.Ldind_I> и <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span><span class="sxs-lookup"><span data-stu-id="5d800-3120">The value pushed on the stack is already aligned correctly for use with instructions like <xref:System.Reflection.Emit.OpCodes.Ldind_I> and <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span></span> <span data-ttu-id="5d800-3121">Результатом является временный указатель (тип `*`).</span><span class="sxs-lookup"><span data-stu-id="5d800-3121">The result is a transient pointer (type `*`).</span></span>  
  
 <span data-ttu-id="5d800-3122">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldloca`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3122">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloca` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3123">ILGenerator. Emit (код операции, короткий)</span><span class="sxs-lookup"><span data-stu-id="5d800-3123">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloca_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloca_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloca_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloca_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloca_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloca_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloca_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloca_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3124">Загружает в стек вычислений адрес локальной переменной с указанным индексом (короткая форма).</span><span class="sxs-lookup"><span data-stu-id="5d800-3124">Loads the address of the local variable at a specific index onto the evaluation stack, short form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3125">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3125">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3126">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3126">Format</span></span>|<span data-ttu-id="5d800-3127">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3127">Assembly Format</span></span>|<span data-ttu-id="5d800-3128">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3128">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3129">12 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="5d800-3129">12 < `unsigned int8` ></span></span>|<span data-ttu-id="5d800-3130">лдлока. s `index`</span><span class="sxs-lookup"><span data-stu-id="5d800-3130">ldloca.s `index`</span></span>|<span data-ttu-id="5d800-3131">Загружает адрес локальной переменной с `index` в стек вычислений, короткая форма.</span><span class="sxs-lookup"><span data-stu-id="5d800-3131">Loads the address of the local variable at `index` onto the evaluation stack, short form.</span></span>|  
  
 <span data-ttu-id="5d800-3132">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3132">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3133">Адрес, хранящийся в локальной переменной по указанному индексу, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3133">The address stored in the local variable at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3134">Инструкция `ldloca.s` помещает в стек адрес локальной переменной с переданным индексом, где локальные переменные нумеруются 0 – назад.</span><span class="sxs-lookup"><span data-stu-id="5d800-3134">The `ldloca.s` instruction pushes the address of the local variable number at the passed index onto the stack, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="5d800-3135">Значение, помещаемое в стек, уже правильно согласовано для использования с такими инструкциями, как <xref:System.Reflection.Emit.OpCodes.Ldind_I> и <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span><span class="sxs-lookup"><span data-stu-id="5d800-3135">The value pushed on the stack is already aligned correctly for use with instructions like <xref:System.Reflection.Emit.OpCodes.Ldind_I> and <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span></span> <span data-ttu-id="5d800-3136">Результатом является временный указатель (тип `*`).</span><span class="sxs-lookup"><span data-stu-id="5d800-3136">The result is a transient pointer (type `*`).</span></span>  
  
 <span data-ttu-id="5d800-3137">Инструкция `ldloca.s` обеспечивает эффективную кодировку для использования с локальными переменными от 0 до 255.</span><span class="sxs-lookup"><span data-stu-id="5d800-3137">The `ldloca.s` instruction provides an efficient encoding for use with the local variables 0 through 255.</span></span>  
  
 <span data-ttu-id="5d800-3138">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldloca.s`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3138">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloca.s` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3139">ILGenerator. Emit (код операции, байт)</span><span class="sxs-lookup"><span data-stu-id="5d800-3139">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldnull">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldnull;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldnull" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldnull" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldnull As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldnull;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldnull : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldnull" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3140">Помещает в стек вычислений пустую ссылку (тип <see langword="O" />).</span><span class="sxs-lookup"><span data-stu-id="5d800-3140">Pushes a null reference (type <see langword="O" />) onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3141">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3141">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3142">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3142">Format</span></span>|<span data-ttu-id="5d800-3143">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3143">Assembly Format</span></span>|<span data-ttu-id="5d800-3144">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3144">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3145">14</span><span class="sxs-lookup"><span data-stu-id="5d800-3145">14</span></span>|<span data-ttu-id="5d800-3146">требовался ldnull</span><span class="sxs-lookup"><span data-stu-id="5d800-3146">ldnull</span></span>|<span data-ttu-id="5d800-3147">Отправка пустой ссылки на стек</span><span class="sxs-lookup"><span data-stu-id="5d800-3147">push a null reference onto the stack</span></span>|  
  
 <span data-ttu-id="5d800-3148">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3148">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3149">Ссылка на пустой объект помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3149">A null object reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3150">`ldnull` отправляет в стек пустую ссылку (тип `O`).</span><span class="sxs-lookup"><span data-stu-id="5d800-3150">`ldnull` pushes a null reference (type `O`) on the stack.</span></span> <span data-ttu-id="5d800-3151">Используется для инициализации расположений перед заполнением данными или в случае, когда они становятся нерекомендуемыми.</span><span class="sxs-lookup"><span data-stu-id="5d800-3151">This is used to initialize locations before they are populated with data, or when they become deprecated.</span></span>  
  
 <span data-ttu-id="5d800-3152">`ldnull` предоставляет пустую ссылку, которая не зависит от размера.</span><span class="sxs-lookup"><span data-stu-id="5d800-3152">`ldnull` provides a null reference that is size-independent.</span></span>  
  
 <span data-ttu-id="5d800-3153">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldnull`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3153">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldnull` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3154">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3154">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3155">Копирует объект с типом значения, размещенный по указанному адресу, на вершину стека вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-3155">Copies the value type object pointed to by an address to the top of the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3156">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3156">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3157">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3157">Format</span></span>|<span data-ttu-id="5d800-3158">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3158">Assembly Format</span></span>|<span data-ttu-id="5d800-3159">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3159">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3160">71 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5d800-3160">71 < `T` ></span></span>|<span data-ttu-id="5d800-3161">ldobj `class`</span><span class="sxs-lookup"><span data-stu-id="5d800-3161">ldobj `class`</span></span>|<span data-ttu-id="5d800-3162">Скопируйте экземпляр типа значения `class` в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3162">Copy instance of value type `class` to the stack.</span></span>|  
  
 <span data-ttu-id="5d800-3163">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3163">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3164">Адрес объекта типа значения помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3164">The address of a value type object is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-3165">Адрес извлекается из стека, и происходит поиск экземпляра по определенному адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-3165">The address is popped from the stack and the instance at that particular address is looked up.</span></span>  
  
3.  <span data-ttu-id="5d800-3166">Значение объекта, хранящегося в этом адресе, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3166">The value of the object stored at that address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3167">Инструкция `ldobj` используется для передачи типа значения в качестве параметра.</span><span class="sxs-lookup"><span data-stu-id="5d800-3167">The `ldobj` instruction is used to pass a value type as a parameter.</span></span>  
  
 <span data-ttu-id="5d800-3168">Инструкция `ldobj` копирует значение, на которое указывает `addrOfValObj` (типа `&`, `*` или `native int`), в верхнюю часть стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-3168">The `ldobj` instruction copies the value pointed to by `addrOfValObj` (of type `&`, `*`, or `native int`) to the top of the stack.</span></span> <span data-ttu-id="5d800-3169">Количество копируемых байтов зависит от размера класса (как указано в параметре `class`).</span><span class="sxs-lookup"><span data-stu-id="5d800-3169">The number of bytes copied depends on the size of the class (as specified by the `class` parameter).</span></span> <span data-ttu-id="5d800-3170">Параметр `class` является маркером метаданных, представляющим тип значения.</span><span class="sxs-lookup"><span data-stu-id="5d800-3170">The `class` parameter is a metadata token representing the value type.</span></span>  
  
 <span data-ttu-id="5d800-3171">Операция `ldobj` может быть изменена непосредственно перед инструкциями префикса <xref:System.Reflection.Emit.OpCodes.Volatile> или <xref:System.Reflection.Emit.OpCodes.Unaligned>.</span><span class="sxs-lookup"><span data-stu-id="5d800-3171">The operation of the `ldobj` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="5d800-3172">Если класс не найден, возникает исключение <xref:System.TypeLoadException>.</span><span class="sxs-lookup"><span data-stu-id="5d800-3172"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="5d800-3173">Обычно это обнаруживается при преобразовании инструкции MSIL в машинный код, а не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-3173">This is typically detected when the Microsoft Intermediate Language (MSIL) instruction is converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="5d800-3174">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldobj`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3174">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldobj` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3175">ILGenerator. Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="5d800-3175">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldsfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldsfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldsfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldsfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldsfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldsfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldsfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldsfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3176">Помещает в стек вычислений значение статического поля.</span><span class="sxs-lookup"><span data-stu-id="5d800-3176">Pushes the value of a static field onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3177">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3177">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3178">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3178">Format</span></span>|<span data-ttu-id="5d800-3179">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3179">Assembly Format</span></span>|<span data-ttu-id="5d800-3180">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3180">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3181">7E < `T` ></span><span class="sxs-lookup"><span data-stu-id="5d800-3181">7E < `T` ></span></span>|<span data-ttu-id="5d800-3182">ldsfld `field`</span><span class="sxs-lookup"><span data-stu-id="5d800-3182">ldsfld `field`</span></span>|<span data-ttu-id="5d800-3183">Помещает значение `field` в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3183">Push the value of `field` on the stack.</span></span>|  
  
 <span data-ttu-id="5d800-3184">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3184">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3185">Значение конкретного поля помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3185">The value of the specific field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3186">Инструкция `ldsfld` помещает значение статического (общего для всех экземпляров класса) поля в стеке.</span><span class="sxs-lookup"><span data-stu-id="5d800-3186">The `ldsfld` instruction pushes the value of a static (shared among all instances of a class) field on the stack.</span></span> <span data-ttu-id="5d800-3187">Тип возвращаемого значения связан с переданным маркером метаданных `field`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3187">The return type is that associated with the passed metadata token `field`.</span></span>  
  
 <span data-ttu-id="5d800-3188">Инструкция `ldsfld` может иметь префикс <xref:System.Reflection.Emit.OpCodes.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="5d800-3188">The `ldsfld` instruction can have a <xref:System.Reflection.Emit.OpCodes.Volatile> prefix.</span></span>  
  
 <span data-ttu-id="5d800-3189">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldsfld`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3189">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldsfld` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3190">ILGenerator. Emit (код операции, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="5d800-3190">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldsflda">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldsflda;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldsflda" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldsflda" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldsflda As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldsflda;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldsflda : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldsflda" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3191">Помещает в стек вычислений адрес статического поля.</span><span class="sxs-lookup"><span data-stu-id="5d800-3191">Pushes the address of a static field onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3192">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3192">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3193">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3193">Format</span></span>|<span data-ttu-id="5d800-3194">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3194">Assembly Format</span></span>|<span data-ttu-id="5d800-3195">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3195">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3196">7F < `T` ></span><span class="sxs-lookup"><span data-stu-id="5d800-3196">7F < `T` ></span></span>|<span data-ttu-id="5d800-3197">требовался ldsflda `field`</span><span class="sxs-lookup"><span data-stu-id="5d800-3197">ldsflda `field`</span></span>|<span data-ttu-id="5d800-3198">Отправка адреса `field` в стеке</span><span class="sxs-lookup"><span data-stu-id="5d800-3198">Push the address of `field` on the stack</span></span>|  
  
 <span data-ttu-id="5d800-3199">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3199">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3200">Адрес определенного поля помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3200">The address of a specific field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3201">Инструкция `ldsflda` помещает адрес статического поля (общего для всех экземпляров класса) в стеке.</span><span class="sxs-lookup"><span data-stu-id="5d800-3201">The `ldsflda` instruction pushes the address of a static (shared among all instances of a class) field on the stack.</span></span> <span data-ttu-id="5d800-3202">Адрес может быть представлен временным указателем (тип `*`), если маркер метаданных `field` ссылается на тип, управляемый памятью.</span><span class="sxs-lookup"><span data-stu-id="5d800-3202">The address may be represented as a transient pointer (type `*`) if the metadata token `field` refers to a type whose memory is managed.</span></span> <span data-ttu-id="5d800-3203">В противном случае он соответствует неуправляемому указателю (тип `native int`).</span><span class="sxs-lookup"><span data-stu-id="5d800-3203">Otherwise, it corresponds to an unmanaged pointer (type `native int`).</span></span> <span data-ttu-id="5d800-3204">Обратите внимание, что `field` может быть статическим глобальным с назначенным относительным виртуальным адресом (смещение поля от базового адреса, в котором его содержащий PE-файл загружается в память), где память является неуправляемой.</span><span class="sxs-lookup"><span data-stu-id="5d800-3204">Note that `field` may be a static global with an assigned relative virtual address (the offset of the field from the base address at which its containing PE file is loaded into memory) where the memory is unmanaged.</span></span>  
  
 <span data-ttu-id="5d800-3205">Инструкция `ldsflda` может иметь префикс <xref:System.Reflection.Emit.OpCodes.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="5d800-3205">The `ldsflda` instruction can have a <xref:System.Reflection.Emit.OpCodes.Volatile> prefix.</span></span>  
  
 <span data-ttu-id="5d800-3206">Если поле не найдено в метаданных, возникает исключение <xref:System.MissingFieldException>.</span><span class="sxs-lookup"><span data-stu-id="5d800-3206"><xref:System.MissingFieldException> is thrown if field is not found in the metadata.</span></span> <span data-ttu-id="5d800-3207">Обычно это проверяется при преобразовании инструкций промежуточного языка MSIL в машинный код, а не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-3207">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at runtime.</span></span>  
  
 <span data-ttu-id="5d800-3208">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldsflda`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3208">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldsflda` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3209">ILGenerator. Emit (код операции, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="5d800-3209">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldstr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldstr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldstr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldstr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldstr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldstr;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldstr : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldstr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3210">Помещает в стек ссылку на новый объект, представляющий строковой литерал, хранящийся в метаданных.</span><span class="sxs-lookup"><span data-stu-id="5d800-3210">Pushes a new object reference to a string literal stored in the metadata.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3211">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3211">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3212">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3212">Format</span></span>|<span data-ttu-id="5d800-3213">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3213">Assembly Format</span></span>|<span data-ttu-id="5d800-3214">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3214">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3215">72 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5d800-3215">72 < `T` ></span></span>|<span data-ttu-id="5d800-3216">лдстр `mdToken`</span><span class="sxs-lookup"><span data-stu-id="5d800-3216">ldstr `mdToken`</span></span>|<span data-ttu-id="5d800-3217">Отправляет строковый объект для токена строки метаданных `mdToken`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3217">Pushes a string object for the metadata string token `mdToken`.</span></span>|  
  
 <span data-ttu-id="5d800-3218">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3218">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3219">Ссылка на объект String помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3219">An object reference to a string is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3220">Инструкция `ldstr` помещает ссылку на объект (тип `O`) в новый строковый объект, представляющий конкретный строковый литерал, хранящийся в метаданных.</span><span class="sxs-lookup"><span data-stu-id="5d800-3220">The `ldstr` instruction pushes an object reference (type `O`) to a new string object representing the specific string literal stored in the metadata.</span></span> <span data-ttu-id="5d800-3221">Инструкция `ldstr` выделяет необходимый объем памяти и выполняет любое преобразование формата, необходимое для преобразования строкового литерала из формы, используемой в файле, в формат строки, необходимый во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-3221">The `ldstr` instruction allocates the requisite amount of memory and performs any format conversion required to convert the string literal from the form used in the file to the string format required at runtime.</span></span>  
  
 <span data-ttu-id="5d800-3222">Common Language Infrastructure (CLI) гарантирует, что результат двух инструкций `ldstr`, ссылающихся на два токена метаданных с одинаковой последовательностью символов, возвращает один и тот же строковый объект (процесс, известный как "интернирование строк").</span><span class="sxs-lookup"><span data-stu-id="5d800-3222">The Common Language Infrastructure (CLI) guarantees that the result of two `ldstr` instructions referring to two metadata tokens that have the same sequence of characters return precisely the same string object (a process known as "string interning").</span></span>  
  
 <span data-ttu-id="5d800-3223">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldstr`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3223">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldstr` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3224">ILGenerator. Emit (код операции, строка)</span><span class="sxs-lookup"><span data-stu-id="5d800-3224">ILGenerator.Emit(OpCode, string)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldtoken">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldtoken;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldtoken" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldtoken" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldtoken As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldtoken;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldtoken : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldtoken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3225">Преобразует токен метаданных в его представление времени выполнения, а затем помещает в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-3225">Converts a metadata token to its runtime representation, pushing it onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3226">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3226">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3227">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3227">Format</span></span>|<span data-ttu-id="5d800-3228">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3228">Assembly Format</span></span>|<span data-ttu-id="5d800-3229">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3229">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3230">< D0 `T` @ NO__T-1</span><span class="sxs-lookup"><span data-stu-id="5d800-3230">D0 < `T` ></span></span>|<span data-ttu-id="5d800-3231">коды операций Ldtoken `token`</span><span class="sxs-lookup"><span data-stu-id="5d800-3231">ldtoken `token`</span></span>|<span data-ttu-id="5d800-3232">Преобразует маркер метаданных в представление среды выполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-3232">Converts a metadata token to its runtime representation.</span></span>|  
  
 <span data-ttu-id="5d800-3233">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3233">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3234">Переданный токен преобразуется в `RuntimeHandle` и помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3234">The passed token is converted to a `RuntimeHandle` and pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3235">Инструкция `ldtoken` помещает `RuntimeHandle` для указанного маркера метаданных.</span><span class="sxs-lookup"><span data-stu-id="5d800-3235">The `ldtoken` instruction pushes a `RuntimeHandle` for the specified metadata token.</span></span> <span data-ttu-id="5d800-3236">@No__t-0 может быть `fieldref/fielddef`, a `methodref/methoddef` или `typeref/typedef`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3236">A `RuntimeHandle` can be a `fieldref/fielddef`, a `methodref/methoddef`, or a `typeref/typedef`.</span></span>  
  
 <span data-ttu-id="5d800-3237">Значение, помещаемое в стек, можно использовать в вызовах методов `Reflection` в библиотеке системных классов.</span><span class="sxs-lookup"><span data-stu-id="5d800-3237">The value pushed on the stack can be used in calls to `Reflection` methods in the system class library.</span></span>  
  
 <span data-ttu-id="5d800-3238">Сведения о дескрипторах среды выполнения см. в следующих классах: <xref:System.RuntimeFieldHandle>, <xref:System.RuntimeTypeHandle> и <xref:System.RuntimeMethodHandle>.</span><span class="sxs-lookup"><span data-stu-id="5d800-3238">For information on runtime handles, see the following classes: <xref:System.RuntimeFieldHandle>, <xref:System.RuntimeTypeHandle>, and <xref:System.RuntimeMethodHandle>.</span></span>  
  
 <span data-ttu-id="5d800-3239">Следующие перегрузки метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> могут использовать код операции `ldtoken`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3239">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldtoken` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3240">ILGenerator. Emit (код операции, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="5d800-3240">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
-   <span data-ttu-id="5d800-3241">ILGenerator. Emit (код операции, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="5d800-3241">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
-   <span data-ttu-id="5d800-3242">ILGenerator. Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="5d800-3242">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldvirtftn">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldvirtftn;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldvirtftn" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldvirtftn" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldvirtftn As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldvirtftn;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldvirtftn : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldvirtftn" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3243">Помещает в стек вычислений неуправляемый указатель (с типом <see langword="native int" />) на машинный код, реализующий виртуальный метод, связанный с заданным объектом.</span><span class="sxs-lookup"><span data-stu-id="5d800-3243">Pushes an unmanaged pointer (type <see langword="native int" />) to the native code implementing a particular virtual method associated with a specified object onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3244">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3244">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3245">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3245">Format</span></span>|<span data-ttu-id="5d800-3246">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3246">Assembly Format</span></span>|<span data-ttu-id="5d800-3247">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3247">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3248">FE 07 < `T` @ NO__T-1</span><span class="sxs-lookup"><span data-stu-id="5d800-3248">FE 07 < `T` ></span></span>|<span data-ttu-id="5d800-3249">ldvirtftn `method`</span><span class="sxs-lookup"><span data-stu-id="5d800-3249">ldvirtftn `method`</span></span>|<span data-ttu-id="5d800-3250">Помещает указатель на виртуальный метод объекта `method` в стеке.</span><span class="sxs-lookup"><span data-stu-id="5d800-3250">Pushes the pointer to an object's virtual method `method` on the stack.</span></span>|  
  
 <span data-ttu-id="5d800-3251">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3251">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3252">Ссылка на объект помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3252">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-3253">Ссылка на объект извлекается из стека, а адрес точки входа в метод (как указано маркером метаданных `method`) ищется.</span><span class="sxs-lookup"><span data-stu-id="5d800-3253">The object reference is popped from the stack and the address of the entry point to the method (as specified by the metadata token `method`) is looked up.</span></span>  
  
3.  <span data-ttu-id="5d800-3254">Указатель на `method` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3254">The pointer to `method` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3255">Результирующий неуправляемый указатель, помещаемый в стек с помощью инструкции `ldvirtftn`, можно вызвать с помощью инструкции <xref:System.Reflection.Emit.OpCodes.Calli>, если она ссылается на управляемый метод (или на заглушку, переход от управляемого кода к неуправляемому).</span><span class="sxs-lookup"><span data-stu-id="5d800-3255">The resulting unmanaged pointer pushed onto the stack by the `ldvirtftn` instruction can be called using the <xref:System.Reflection.Emit.OpCodes.Calli> instruction if it references a managed method (or a stub that transitions from managed to unmanaged code).</span></span>  
  
 <span data-ttu-id="5d800-3256">Неуправляемый указатель указывает на машинный код, используя соглашение о вызовах CLR.</span><span class="sxs-lookup"><span data-stu-id="5d800-3256">The unmanaged pointer points to native code using the CLR calling convention.</span></span> <span data-ttu-id="5d800-3257">Этот указатель метода не должен передаваться в неуправляемый машинный код в качестве подпрограммы обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="5d800-3257">This method pointer should not be passed to unmanaged native code as a callback routine.</span></span>  
  
 <span data-ttu-id="5d800-3258">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ldvirtftn`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3258">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldvirtftn` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3259">ILGenerator. Emit (код операции, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="5d800-3259">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Leave">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Leave;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Leave" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Leave" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Leave As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Leave;" />
      <MemberSignature Language="F#" Value=" staticval mutable Leave : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Leave" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3260">Выполняет выход из защищенной области кода с безусловной передачей управления указанной конечной инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-3260">Exits a protected region of code, unconditionally transferring control to a specific target instruction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3261">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3261">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3262">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3262">Format</span></span>|<span data-ttu-id="5d800-3263">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3263">Assembly Format</span></span>|<span data-ttu-id="5d800-3264">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3264">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3265">ДД < `int32` @ NO__T-1</span><span class="sxs-lookup"><span data-stu-id="5d800-3265">DD < `int32` ></span></span>|<span data-ttu-id="5d800-3266">Оставьте `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-3266">leave `target`</span></span>|<span data-ttu-id="5d800-3267">Выходит из защищенной области кода.</span><span class="sxs-lookup"><span data-stu-id="5d800-3267">Exits a protected region of code.</span></span>|  
  
 <span data-ttu-id="5d800-3268">Для этой инструкции не задано поведение перехода стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-3268">There is no stack transition behavior specified for this instruction.</span></span>  
  
 <span data-ttu-id="5d800-3269">Инструкция `leave` выполняет безусловную передачу управления в определенную целевую инструкцию, представленную в виде смещения со знаком длиной 4 байта от начала инструкции, следующей за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-3269">The `leave` instruction unconditionally transfers control to the specific target instruction, represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5d800-3270">Инструкция `leave` аналогична инструкции `br`, но ее можно использовать для выхода из блока `try`, `filter` или `catch`, в то время как обычные инструкции ветвления можно использовать только в таком блоке для передачи управления внутри него.</span><span class="sxs-lookup"><span data-stu-id="5d800-3270">The `leave` instruction is similar to the `br` instruction, but it can be used to exit a `try`, `filter`, or `catch` block whereas the ordinary branch instructions can only be used in such a block to transfer control within it.</span></span> <span data-ttu-id="5d800-3271">Инструкция `leave` очищает стек вычислений и обеспечивает выполнение соответствующих блоков `finally`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3271">The `leave` instruction empties the evaluation stack and ensures that the appropriate surrounding `finally` blocks are executed.</span></span>  
  
 <span data-ttu-id="5d800-3272">Нельзя использовать инструкцию `leave` для выхода из блока `finally`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3272">You cannot use a `leave` instruction to exit a `finally` block.</span></span> <span data-ttu-id="5d800-3273">Чтобы упростить создание кода для обработчиков исключений, оно допустимо в блоке catch, чтобы использовать инструкцию `leave` для перемещения управления в любую инструкцию в связанном блоке `try`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3273">To ease code generation for exception handlers it is valid from within a catch block to use a `leave` instruction to transfer control to any instruction within the associated `try` block.</span></span>  
  
 <span data-ttu-id="5d800-3274">Если инструкция имеет один или несколько префиксных кодов, управление может быть передано только первому из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="5d800-3274">If an instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="5d800-3275">Следующие перегрузки метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> могут использовать код операции `leave`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3275">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `leave` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3276">ILGenerator. Emit (код операции, метка)</span><span class="sxs-lookup"><span data-stu-id="5d800-3276">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Leave_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Leave_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Leave_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Leave_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Leave_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Leave_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Leave_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Leave_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3277">Выполняет выход из защищенной области кода с безусловной передачей управления указанной конечной инструкции (короткая форма).</span><span class="sxs-lookup"><span data-stu-id="5d800-3277">Exits a protected region of code, unconditionally transferring control to a target instruction (short form).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3278">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3278">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3279">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3279">Format</span></span>|<span data-ttu-id="5d800-3280">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3280">Assembly Format</span></span>|<span data-ttu-id="5d800-3281">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3281">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3282">DE < `int8` @ NO__T-1</span><span class="sxs-lookup"><span data-stu-id="5d800-3282">DE < `int8` ></span></span>|<span data-ttu-id="5d800-3283">Оставьте. s `target`</span><span class="sxs-lookup"><span data-stu-id="5d800-3283">leave.s `target`</span></span>|<span data-ttu-id="5d800-3284">Выйдите из защищенной области кода, короткой формы.</span><span class="sxs-lookup"><span data-stu-id="5d800-3284">Exit a protected region of code, short form.</span></span>|  
  
 <span data-ttu-id="5d800-3285">Для этой инструкции не задано поведение перехода стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-3285">There is no stack transition behavior specified for this instruction.</span></span>  
  
 <span data-ttu-id="5d800-3286">Инструкция `leave.s` выполняет безусловную передачу управления в переданную целевую инструкцию, представленную как смещение со знаком длиной 1 байт от начала инструкции, следующей за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-3286">The `leave.s` instruction unconditionally transfers control to the passed target instruction, represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="5d800-3287">Инструкция `leave.s` аналогична инструкции `br`, но ее можно использовать для выхода из блока `try`, `filter` или `catch`, в то время как обычные инструкции ветвления можно использовать только в таком блоке для передачи управления внутри него.</span><span class="sxs-lookup"><span data-stu-id="5d800-3287">The `leave.s` instruction is similar to the `br` instruction, but it can be used to exit a `try`, `filter`, or `catch` block whereas the ordinary branch instructions can only be used in such a block to transfer control within it.</span></span> <span data-ttu-id="5d800-3288">Инструкция `leave.s` очищает стек вычислений и обеспечивает выполнение соответствующих блоков `finally`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3288">The `leave.s` instruction empties the evaluation stack and ensures that the appropriate surrounding `finally` blocks are executed.</span></span>  
  
 <span data-ttu-id="5d800-3289">Нельзя использовать инструкцию `leave.s` для выхода из блока `finally`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3289">You cannot use a `leave.s` instruction to exit a `finally` block.</span></span> <span data-ttu-id="5d800-3290">Чтобы упростить создание кода для обработчиков исключений, оно допустимо в блоке catch, чтобы использовать инструкцию `leave.s` для перемещения управления в любую инструкцию в связанном блоке `try`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3290">To ease code generation for exception handlers it is valid from within a catch block to use a `leave.s` instruction to transfer control to any instruction within the associated `try` block.</span></span>  
  
 <span data-ttu-id="5d800-3291">Если инструкция имеет один или несколько префиксных кодов, управление может быть передано только первому из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="5d800-3291">If an instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="5d800-3292">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `leave.s`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3292">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `leave.s` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3293">ILGenerator. Emit (код операции, метка)</span><span class="sxs-lookup"><span data-stu-id="5d800-3293">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Localloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Localloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Localloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Localloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Localloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Localloc;" />
      <MemberSignature Language="F#" Value=" staticval mutable Localloc : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Localloc" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3294">Выделяет определенное количество байтов из пула локальной динамической памяти и помещает в стек вычислений адрес (временный указатель с типом <see langword="*" />) первого выделенного байта.</span><span class="sxs-lookup"><span data-stu-id="5d800-3294">Allocates a certain number of bytes from the local dynamic memory pool and pushes the address (a transient pointer, type <see langword="*" />) of the first allocated byte onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3295">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3295">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3296">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3296">Format</span></span>|<span data-ttu-id="5d800-3297">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3297">Assembly Format</span></span>|<span data-ttu-id="5d800-3298">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3298">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3299">FE 0F</span><span class="sxs-lookup"><span data-stu-id="5d800-3299">FE 0F</span></span>|<span data-ttu-id="5d800-3300">localloc</span><span class="sxs-lookup"><span data-stu-id="5d800-3300">localloc</span></span>|<span data-ttu-id="5d800-3301">Выделение пространства из локальной кучи.</span><span class="sxs-lookup"><span data-stu-id="5d800-3301">Allocate space from the local heap.</span></span>|  
  
 <span data-ttu-id="5d800-3302">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3302">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3303">Число байтов, которое необходимо выделить, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3303">The number of bytes to be allocated is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-3304">Число байтов извлекается из стека; объем памяти, соответствующий размеру, выделяется из локальной кучи.</span><span class="sxs-lookup"><span data-stu-id="5d800-3304">The number of bytes is popped from the stack; an amount of memory corresponding to the size is allocated from the local heap.</span></span>  
  
3.  <span data-ttu-id="5d800-3305">Указатель на первый байт выделенной памяти помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3305">A pointer to the first byte of the allocated memory is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3306">Инструкция `localloc` выделяет `size` (тип `natural unsigned int`) байт из локального пула динамической памяти и возвращает адрес (временный указатель, тип `*`) первого выделенного байта.</span><span class="sxs-lookup"><span data-stu-id="5d800-3306">The `localloc` instruction allocates `size` (type `natural unsigned int`) bytes from the local dynamic memory pool and returns the address (a transient pointer, type `*`) of the first allocated byte.</span></span> <span data-ttu-id="5d800-3307">Возвращаемый блок памяти инициализируется значением 0 только в том случае, если флаг инициализации метода имеет значение `true`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3307">The block of memory returned is initialized to 0 only if the initialize flag on the method is `true`.</span></span> <span data-ttu-id="5d800-3308">Когда текущий метод выполняет <xref:System.Reflection.Emit.OpCodes.Ret>, пул локальной памяти становится доступным для повторного использования.</span><span class="sxs-lookup"><span data-stu-id="5d800-3308">When the current method executes a <xref:System.Reflection.Emit.OpCodes.Ret>, the local memory pool is made available for reuse.</span></span>  
  
 <span data-ttu-id="5d800-3309">Полученный адрес будет согласован таким образом, чтобы любой тип примитива мог храниться в нем с помощью инструкций `stind` (например, <xref:System.Reflection.Emit.OpCodes.Stind_I4>) и загружался с помощью инструкций `ldind` (например, <xref:System.Reflection.Emit.OpCodes.Ldind_I4>).</span><span class="sxs-lookup"><span data-stu-id="5d800-3309">The resulting address is aligned so that any primitive data type can be stored there using the `stind` instructions (such as <xref:System.Reflection.Emit.OpCodes.Stind_I4>) and loaded using the `ldind` instructions (such as <xref:System.Reflection.Emit.OpCodes.Ldind_I4>).</span></span>  
  
 <span data-ttu-id="5d800-3310">Инструкция `localloc` не может находиться в блоке `filter`, `catch`, `finally` или `fault`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3310">The `localloc` instruction cannot occur within a `filter`, `catch`, `finally`, or `fault` block.</span></span>  
  
 <span data-ttu-id="5d800-3311"><xref:System.StackOverflowException> возникает, если недостаточно памяти для обслуживания запроса.</span><span class="sxs-lookup"><span data-stu-id="5d800-3311"><xref:System.StackOverflowException> is thrown if there is insufficient memory to service the request.</span></span>  
  
 <span data-ttu-id="5d800-3312">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `localloc`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3312">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `localloc` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3313">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3313">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mkrefany">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mkrefany;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mkrefany" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mkrefany" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mkrefany As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mkrefany;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mkrefany : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mkrefany" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3314">Помещает в стек вычислений ссылку на экземпляр определенного типа.</span><span class="sxs-lookup"><span data-stu-id="5d800-3314">Pushes a typed reference to an instance of a specific type onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3315">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3315">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3316">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3316">Format</span></span>|<span data-ttu-id="5d800-3317">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3317">Assembly Format</span></span>|<span data-ttu-id="5d800-3318">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3318">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3319">C6 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5d800-3319">C6 < `T` ></span></span>|<span data-ttu-id="5d800-3320">Mkrefany `class`</span><span class="sxs-lookup"><span data-stu-id="5d800-3320">mkrefany `class`</span></span>|<span data-ttu-id="5d800-3321">Помещает в стек типизированную ссылку типа `class`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3321">Pushes a typed reference of type `class` onto the stack.</span></span>|  
  
 <span data-ttu-id="5d800-3322">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3322">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3323">Указатель на фрагмент данных помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3323">A pointer to piece of data is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-3324">Указатель извлекается и преобразуется в типизированную ссылку типа `class`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3324">The pointer is popped and converted to a typed reference of type `class`.</span></span>  
  
3.  <span data-ttu-id="5d800-3325">Типизированная ссылка помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3325">The typed reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3326">Инструкция `mkrefany` поддерживает передачу ссылок с динамическим типом.</span><span class="sxs-lookup"><span data-stu-id="5d800-3326">The `mkrefany` instruction supports the passing of dynamically typed references.</span></span> <span data-ttu-id="5d800-3327">Указатель должен иметь тип `&`, `*` или `native int`, а также содержать допустимый адрес фрагмента данных.</span><span class="sxs-lookup"><span data-stu-id="5d800-3327">The pointer must be of type `&`, `*`, or `native int`, and hold the valid address of a piece of data.</span></span> <span data-ttu-id="5d800-3328">`Class` — это маркер класса, описывающий тип данных, на которые ссылается указатель.</span><span class="sxs-lookup"><span data-stu-id="5d800-3328">`Class` is the class token describing the type of the data referenced by the pointer.</span></span> <span data-ttu-id="5d800-3329">`Mkrefany` отправляет типизированную ссылку на стек, предоставляя непрозрачный дескриптор указателя и тип `class`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3329">`Mkrefany` pushes a typed reference on the stack, providing an opaque descriptor of the pointer and the type `class`.</span></span>  
  
 <span data-ttu-id="5d800-3330">Единственной допустимой операцией, разрешенной для типизированной ссылки, является передача ее в метод, которому в качестве параметра требуется типизированная ссылка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3330">The only valid operation permitted upon a typed reference is to pass it to a method that requires a typed reference as a parameter.</span></span> <span data-ttu-id="5d800-3331">Затем вызываемый объект может использовать инструкции <xref:System.Reflection.Emit.OpCodes.Refanytype> и <xref:System.Reflection.Emit.OpCodes.Refanyval> для получения типа (класса) и адреса соответственно.</span><span class="sxs-lookup"><span data-stu-id="5d800-3331">The callee can then use the <xref:System.Reflection.Emit.OpCodes.Refanytype> and <xref:System.Reflection.Emit.OpCodes.Refanyval> instructions to retrieve the type (class) and the address respectively.</span></span>  
  
 <span data-ttu-id="5d800-3332"><xref:System.TypeLoadException> возникает, если не удается найти `class`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3332"><xref:System.TypeLoadException> is thrown if `class` cannot be found.</span></span> <span data-ttu-id="5d800-3333">Обычно это обнаруживается при преобразовании инструкций промежуточного языка MSIL в машинный код, а не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-3333">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="5d800-3334">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `mkrefany`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3334">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mkrefany` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3335">ILGenerator. Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="5d800-3335">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mul : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mul" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3336">Умножает два значения и помещает результат в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-3336">Multiplies two values and pushes the result on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3337">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3337">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3338">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3338">Format</span></span>|<span data-ttu-id="5d800-3339">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3339">Assembly Format</span></span>|<span data-ttu-id="5d800-3340">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3340">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3341">5A</span><span class="sxs-lookup"><span data-stu-id="5d800-3341">5A</span></span>|<span data-ttu-id="5d800-3342">mul</span><span class="sxs-lookup"><span data-stu-id="5d800-3342">mul</span></span>|<span data-ttu-id="5d800-3343">Умножает два значения в стеке.</span><span class="sxs-lookup"><span data-stu-id="5d800-3343">Multiplies two values on the stack.</span></span>|  
  
 <span data-ttu-id="5d800-3344">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3344">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3345">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3345">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-3346">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3346">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-3347">`value2` и `value1` извлекаются из стека; `value1` умножается на `value2`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3347">`value2` and `value1` are popped from the stack; `value1` is multiplied by `value2`.</span></span>  
  
4.  <span data-ttu-id="5d800-3348">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3348">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3349">Инструкция `mul` умножает `value1` на `value2` и помещает результат в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3349">The `mul` instruction multiplies `value1` by `value2` and pushes the result on the stack.</span></span> <span data-ttu-id="5d800-3350">Целочисленные операции автоматически усекаются верхние биты в переполнении.</span><span class="sxs-lookup"><span data-stu-id="5d800-3350">Integer operations silently truncate the upper bits on overflow.</span></span>  
  
 <span data-ttu-id="5d800-3351">Для выполнения операции умножения целого числа на обработку переполнения см. <xref:System.Reflection.Emit.OpCodes.Mul_Ovf>.</span><span class="sxs-lookup"><span data-stu-id="5d800-3351">See <xref:System.Reflection.Emit.OpCodes.Mul_Ovf> for an integer-specific multiply operation with overflow handling.</span></span>  
  
 <span data-ttu-id="5d800-3352">Для типов с плавающей запятой 0 \* Infinity = NaN.</span><span class="sxs-lookup"><span data-stu-id="5d800-3352">For floating-point types, 0 \* infinity = NaN.</span></span>  
  
 <span data-ttu-id="5d800-3353">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `mul`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3353">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mul` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3354">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3354">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul_Ovf;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mul_Ovf : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mul_Ovf" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3355">Умножает два целочисленных значения, выполняет проверку переполнения и помещает результат в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-3355">Multiplies two integer values, performs an overflow check, and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3356">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3356">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3357">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3357">Format</span></span>|<span data-ttu-id="5d800-3358">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3358">Assembly Format</span></span>|<span data-ttu-id="5d800-3359">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3359">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3360">D8</span><span class="sxs-lookup"><span data-stu-id="5d800-3360">D8</span></span>|<span data-ttu-id="5d800-3361">mul. ovf</span><span class="sxs-lookup"><span data-stu-id="5d800-3361">mul.ovf</span></span>|<span data-ttu-id="5d800-3362">Умножает два целочисленных значения в стеке с помощью проверки переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-3362">Multiplies two integer values on the stack with an overflow check.</span></span>|  
  
 <span data-ttu-id="5d800-3363">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3363">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3364">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3364">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-3365">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3365">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-3366">`value2` и `value1` извлекаются из стека; `value1` умножается на `value2` с помощью проверки переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-3366">`value2` and `value1` are popped from the stack; `value1` is multiplied by `value2`, with an overflow check.</span></span>  
  
4.  <span data-ttu-id="5d800-3367">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3367">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3368">Инструкция `mul.ovf` умножает целое число `value1` на целое число `value2` и помещает результат в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3368">The `mul.ovf` instruction multiplies integer `value1` by integer `value2` and pushes the result on the stack.</span></span> <span data-ttu-id="5d800-3369">Если результат не умещается в типе результата, выдается исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-3369">An exception is thrown if the result will not fit in the result type.</span></span>  
  
 <span data-ttu-id="5d800-3370"><xref:System.OverflowException> создается, если результат не может быть представлен типом результата.</span><span class="sxs-lookup"><span data-stu-id="5d800-3370"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5d800-3371">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `mul.ovf`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3371">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mul.ovf` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3372">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3372">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul_Ovf_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mul_Ovf_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mul_Ovf_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3373">Умножает два целочисленных значения без знака, выполняет проверку переполнения и помещает результат в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-3373">Multiplies two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3374">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3374">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3375">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3375">Format</span></span>|<span data-ttu-id="5d800-3376">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3376">Assembly Format</span></span>|<span data-ttu-id="5d800-3377">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3377">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3378">D9</span><span class="sxs-lookup"><span data-stu-id="5d800-3378">D9</span></span>|<span data-ttu-id="5d800-3379">mul. ovf. un</span><span class="sxs-lookup"><span data-stu-id="5d800-3379">mul.ovf.un</span></span>|<span data-ttu-id="5d800-3380">Умножает два значения без знака в стеке с помощью проверки переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-3380">Multiplies two unsigned values on the stack with an overflow check.</span></span>|  
  
 <span data-ttu-id="5d800-3381">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3381">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3382">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3382">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-3383">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3383">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-3384">`value2` и `value1` извлекаются из стека; `value1` умножается на `value2` с помощью проверки переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-3384">`value2` and `value1` are popped from the stack; `value1` is multiplied by `value2`, with an overflow check.</span></span>  
  
4.  <span data-ttu-id="5d800-3385">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3385">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3386">Инструкция `mul.ovf.un` умножает целое число без знака `value1` на целое число без знака `value2` и передает результат в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3386">The `mul.ovf.un` instruction multiplies unsigned integer `value1` by unsigned integer `value2` and pushes the result on the stack.</span></span> <span data-ttu-id="5d800-3387">Если результат не умещается в типе результата, выдается исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-3387">An exception is thrown if the result will not fit in the result type.</span></span>  
  
 <span data-ttu-id="5d800-3388"><xref:System.OverflowException> создается, если результат не может быть представлен типом результата.</span><span class="sxs-lookup"><span data-stu-id="5d800-3388"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5d800-3389">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `mul.ovf.un`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3389">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mul.ovf.un` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3390">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3390">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Neg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Neg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Neg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Neg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Neg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Neg;" />
      <MemberSignature Language="F#" Value=" staticval mutable Neg : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Neg" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3391">Отвергает значение и помещает результат в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-3391">Negates a value and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3392">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3392">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3393">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3393">Format</span></span>|<span data-ttu-id="5d800-3394">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3394">Assembly Format</span></span>|<span data-ttu-id="5d800-3395">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3395">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3396">65</span><span class="sxs-lookup"><span data-stu-id="5d800-3396">65</span></span>|<span data-ttu-id="5d800-3397">расход</span><span class="sxs-lookup"><span data-stu-id="5d800-3397">neg</span></span>|<span data-ttu-id="5d800-3398">Инвертирует значение, находящегося на вершине стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-3398">Negates the value currently on top of the stack.</span></span>|  
  
 <span data-ttu-id="5d800-3399">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3399">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3400">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3400">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-3401">Значение извлекается из стека и инвертируется.</span><span class="sxs-lookup"><span data-stu-id="5d800-3401">A value is popped from the stack and negated.</span></span>  
  
3.  <span data-ttu-id="5d800-3402">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3402">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3403">Инструкция `neg` инвертирует значение и помещает результат поверх стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-3403">The `neg` instruction negates value and pushes the result on top of the stack.</span></span> <span data-ttu-id="5d800-3404">Тип возвращаемого значения совпадает с типом операнда.</span><span class="sxs-lookup"><span data-stu-id="5d800-3404">The return type is the same as the operand type.</span></span>  
  
 <span data-ttu-id="5d800-3405">Отрицание целочисленных значений — это нестандартное отрицание числа единиц.</span><span class="sxs-lookup"><span data-stu-id="5d800-3405">Negation of integral values is standard two's complement negation.</span></span> <span data-ttu-id="5d800-3406">В частности, при инвертировании самого отрицательного числа (которое не имеет положительного аналога) выдается наибольшее отрицательное число.</span><span class="sxs-lookup"><span data-stu-id="5d800-3406">In particular, negating the most negative number (which does not have a positive counterpart) yields the most negative number.</span></span> <span data-ttu-id="5d800-3407">Чтобы обнаружить это переполнение, используйте инструкцию <xref:System.Reflection.Emit.OpCodes.Sub_Ovf> (то есть вычтите из 0).</span><span class="sxs-lookup"><span data-stu-id="5d800-3407">To detect this overflow use the <xref:System.Reflection.Emit.OpCodes.Sub_Ovf> instruction instead (that is, subtract from 0).</span></span>  
  
 <span data-ttu-id="5d800-3408">Отрицание числа с плавающей запятой не может быть переполнено и отрицание NaN возвращает NaN.</span><span class="sxs-lookup"><span data-stu-id="5d800-3408">Negating a floating-point number cannot overflow, and negating NaN returns NaN.</span></span>  
  
 <span data-ttu-id="5d800-3409">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `neg`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3409">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `neg` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3410">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3410">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Newarr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Newarr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Newarr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Newarr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Newarr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Newarr;" />
      <MemberSignature Language="F#" Value=" staticval mutable Newarr : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Newarr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3411">Помещает в стек вычислений ссылку на объект — новый одномерный массив с индексацией от нуля, состоящий из элементов заданного типа.</span><span class="sxs-lookup"><span data-stu-id="5d800-3411">Pushes an object reference to a new zero-based, one-dimensional array whose elements are of a specific type onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3412">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3412">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3413">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3413">Format</span></span>|<span data-ttu-id="5d800-3414">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3414">Assembly Format</span></span>|<span data-ttu-id="5d800-3415">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3415">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3416">8D < `T` ></span><span class="sxs-lookup"><span data-stu-id="5d800-3416">8D < `T` ></span></span>|<span data-ttu-id="5d800-3417">неварр `etype`</span><span class="sxs-lookup"><span data-stu-id="5d800-3417">newarr `etype`</span></span>|<span data-ttu-id="5d800-3418">Создает новый массив с элементами типа `etype`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3418">Creates a new array with elements of type `etype`.</span></span>|  
  
 <span data-ttu-id="5d800-3419">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3419">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3420">Число элементов в массиве помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3420">The number of elements in the array is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-3421">Число элементов извлекается из стека и создается массив.</span><span class="sxs-lookup"><span data-stu-id="5d800-3421">The number of elements is popped from the stack and the array is created.</span></span>  
  
3.  <span data-ttu-id="5d800-3422">Ссылка на новый массив помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3422">An object reference to the new array is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3423">Инструкция `newarr` помещает ссылку на объект (тип `O`) в новый одномерный массив, начинающийся с нуля, элементы которого имеют тип `etype` (маркер метаданных, описывающий тип).</span><span class="sxs-lookup"><span data-stu-id="5d800-3423">The `newarr` instruction pushes an object reference (type `O`) to a new zero-based, one-dimensional array whose elements are of type `etype` (a metadata token describing the type).</span></span> <span data-ttu-id="5d800-3424">Число элементов в новом массиве должно быть задано как `native int`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3424">The number of elements in the new array should be specified as a `native int`.</span></span> <span data-ttu-id="5d800-3425">Допустимые индексы массива находятся в диапазоне от нуля до максимального числа элементов минус один.</span><span class="sxs-lookup"><span data-stu-id="5d800-3425">Valid array indexes range from zero to the maximum number of elements minus one.</span></span>  
  
 <span data-ttu-id="5d800-3426">Элементы массива могут быть любого типа, включая типы значений.</span><span class="sxs-lookup"><span data-stu-id="5d800-3426">The elements of an array can be any type, including value types.</span></span>  
  
 <span data-ttu-id="5d800-3427">Одномерные массивы чисел с индексацией от нуля создаются с помощью маркера метаданных, ссылающегося на соответствующий тип значения (<xref:System.Int32> и т. д.).</span><span class="sxs-lookup"><span data-stu-id="5d800-3427">Zero-based, one-dimensional arrays of numbers are created using a metadata token referencing the appropriate value type (<xref:System.Int32>, and so on).</span></span> <span data-ttu-id="5d800-3428">Элементы массива инициализируются значением 0 соответствующего типа.</span><span class="sxs-lookup"><span data-stu-id="5d800-3428">Elements of the array are initialized to 0 of the appropriate type.</span></span>  
  
 <span data-ttu-id="5d800-3429">Одномерные массивы с ненулевыми значениями и многомерные массивы создаются с помощью <xref:System.Reflection.Emit.OpCodes.Newobj>, а не `newarr`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3429">Nonzero-based one-dimensional arrays and multidimensional arrays are created using <xref:System.Reflection.Emit.OpCodes.Newobj> rather than `newarr`.</span></span> <span data-ttu-id="5d800-3430">Чаще всего они создаются с помощью методов класса <xref:System.Array> в .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="5d800-3430">More commonly, they are created using the methods of the <xref:System.Array> class in the .NET Framework.</span></span>  
  
 <span data-ttu-id="5d800-3431"><xref:System.OutOfMemoryException> возникает, если недостаточно памяти для удовлетворения запроса.</span><span class="sxs-lookup"><span data-stu-id="5d800-3431"><xref:System.OutOfMemoryException> is thrown if there is insufficient memory to satisfy the request.</span></span>  
  
 <span data-ttu-id="5d800-3432"><xref:System.OverflowException> возникает, если `numElems` меньше 0.</span><span class="sxs-lookup"><span data-stu-id="5d800-3432"><xref:System.OverflowException> is thrown if `numElems` is less than 0.</span></span>  
  
 <span data-ttu-id="5d800-3433">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `newarr`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3433">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `newarr` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3434">ILGenerator. Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="5d800-3434">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Newobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Newobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Newobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Newobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Newobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Newobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Newobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Newobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3435">Создает новый объект или новый экземпляр типа значения и помещает ссылку на объект (тип <see langword="O" />) в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-3435">Creates a new object or a new instance of a value type, pushing an object reference (type <see langword="O" />) onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3436">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3436">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3437">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3437">Format</span></span>|<span data-ttu-id="5d800-3438">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3438">Assembly Format</span></span>|<span data-ttu-id="5d800-3439">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3439">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3440">73 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5d800-3440">73 < `T` ></span></span>|<span data-ttu-id="5d800-3441">newobj `ctor`</span><span class="sxs-lookup"><span data-stu-id="5d800-3441">newobj `ctor`</span></span>|<span data-ttu-id="5d800-3442">Выделяет неинициализированный объект или тип значения и вызывает метод конструктора `ctor`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3442">Allocates an uninitialized object or value type and calls the constructor method `ctor`.</span></span>|  
  
 <span data-ttu-id="5d800-3443">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3443">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3444">Аргументы @no__t от-0 до `argn` помещаются в стек последовательно.</span><span class="sxs-lookup"><span data-stu-id="5d800-3444">Arguments `arg1` through `argn` are pushed on the stack in sequence.</span></span>  
  
2.  <span data-ttu-id="5d800-3445">Аргументы @no__t от-0 до `arg1` извлекаются из стека и передаются в `ctor` для создания объекта.</span><span class="sxs-lookup"><span data-stu-id="5d800-3445">Arguments `argn` through `arg1` are popped from the stack and passed to `ctor` for object creation.</span></span>  
  
3.  <span data-ttu-id="5d800-3446">Ссылка на новый объект помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3446">A reference to the new object is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3447">Инструкция `newobj` создает новый объект или новый экземпляр типа значения.</span><span class="sxs-lookup"><span data-stu-id="5d800-3447">The `newobj` instruction creates a new object or a new instance of a value type.</span></span> <span data-ttu-id="5d800-3448">`Ctor` является маркером метаданных (`methodref` или `methoddef`, который должен быть помечен как конструктор), который указывает имя, класс и сигнатуру вызываемого конструктора.</span><span class="sxs-lookup"><span data-stu-id="5d800-3448">`Ctor` is a metadata token (a `methodref` or `methoddef` that must be marked as a constructor) that indicates the name, class and signature of the constructor to call.</span></span>  
  
 <span data-ttu-id="5d800-3449">Инструкция `newobj` выделяет новый экземпляр класса, связанный с `ctor`, и инициализирует все поля в новом экземпляре значением 0 (соответствующего типа) или пустыми ссылками, если это уместно.</span><span class="sxs-lookup"><span data-stu-id="5d800-3449">The `newobj` instruction allocates a new instance of the class associated with `ctor` and initializes all the fields in the new instance to 0 (of the proper type) or null references as appropriate.</span></span> <span data-ttu-id="5d800-3450">Затем он вызывает конструктор `ctor` с заданными аргументами вместе с созданным экземпляром.</span><span class="sxs-lookup"><span data-stu-id="5d800-3450">It then calls the constructor `ctor` with the given arguments along with the newly created instance.</span></span> <span data-ttu-id="5d800-3451">После вызова конструктора в стек помещается ссылка на инициализированный объект (тип `O`).</span><span class="sxs-lookup"><span data-stu-id="5d800-3451">After the constructor has been called, the now initialized object reference (type `O`) is pushed on the stack.</span></span>  
  
 <span data-ttu-id="5d800-3452">С точки зрения конструктора неинициализированный объект является аргументом 0, а остальные аргументы, передаваемые в newobj, следуют по порядку.</span><span class="sxs-lookup"><span data-stu-id="5d800-3452">From the constructor's point of view, the uninitialized object is argument 0 and the other arguments passed to newobj follow in order.</span></span>  
  
 <span data-ttu-id="5d800-3453">Все одномерные массивы, начинающиеся с нуля, создаются с помощью <xref:System.Reflection.Emit.OpCodes.Newarr>, а не `newobj`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3453">All zero-based, one-dimensional arrays are created using <xref:System.Reflection.Emit.OpCodes.Newarr>, not `newobj`.</span></span> <span data-ttu-id="5d800-3454">С другой стороны, все остальные массивы (более одного измерения или одномерные, но не основанные на нуле) создаются с помощью `newobj`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3454">On the other hand, all other arrays (more than one dimension, or one-dimensional but not zero-based) are created using `newobj`.</span></span>  
  
 <span data-ttu-id="5d800-3455">Типы значений обычно не создаются с помощью `newobj`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3455">Value types are not usually created using `newobj`.</span></span> <span data-ttu-id="5d800-3456">Обычно они выделяются как аргументы или локальные переменные с помощью `newarr` (для одномерных массивов с индексацией от нуля) или как поля объектов.</span><span class="sxs-lookup"><span data-stu-id="5d800-3456">They are usually allocated either as arguments or local variables, using `newarr` (for zero-based, one-dimensional arrays), or as fields of objects.</span></span> <span data-ttu-id="5d800-3457">После выделения они инициализируются с помощью <xref:System.Reflection.Emit.OpCodes.Initobj>.</span><span class="sxs-lookup"><span data-stu-id="5d800-3457">Once allocated, they are initialized using <xref:System.Reflection.Emit.OpCodes.Initobj>.</span></span> <span data-ttu-id="5d800-3458">Однако инструкцию `newobj` можно использовать для создания нового экземпляра типа значения в стеке, который затем может передаваться в качестве аргумента, храниться в локальной системе и т. д.</span><span class="sxs-lookup"><span data-stu-id="5d800-3458">However, the `newobj` instruction can be used to create a new instance of a value type on the stack, that can then be passed as an argument, stored in a local, and so on.</span></span>  
  
 <span data-ttu-id="5d800-3459"><xref:System.OutOfMemoryException> возникает, если недостаточно памяти для удовлетворения запроса.</span><span class="sxs-lookup"><span data-stu-id="5d800-3459"><xref:System.OutOfMemoryException> is thrown if there is insufficient memory to satisfy the request.</span></span>  
  
 <span data-ttu-id="5d800-3460"><xref:System.MissingMethodException> возникает, если не удалось найти метод конструктора `ctor` с указанным именем, классом и сигнатурой.</span><span class="sxs-lookup"><span data-stu-id="5d800-3460"><xref:System.MissingMethodException> is thrown if a constructor method `ctor` with the indicated name, class and signature could not be found.</span></span> <span data-ttu-id="5d800-3461">Обычно это обнаруживается при преобразовании инструкций промежуточного языка MSIL в машинный код, а не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-3461">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="5d800-3462">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `newobj`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3462">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `newobj` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3463">ILGenerator. Emit (код операции, ConstructorInfo)</span><span class="sxs-lookup"><span data-stu-id="5d800-3463">ILGenerator.Emit(OpCode, ConstructorInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Nop">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Nop;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Nop" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Nop" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Nop As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Nop;" />
      <MemberSignature Language="F#" Value=" staticval mutable Nop : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Nop" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3464">Заполняет пространство, если коды операции содержат исправления.</span><span class="sxs-lookup"><span data-stu-id="5d800-3464">Fills space if opcodes are patched.</span></span> <span data-ttu-id="5d800-3465">Никаких значимых операций не выполняется, хотя может быть пройден цикл обработки.</span><span class="sxs-lookup"><span data-stu-id="5d800-3465">No meaningful operation is performed although a processing cycle can be consumed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3466">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3466">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3467">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3467">Format</span></span>|<span data-ttu-id="5d800-3468">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3468">Assembly Format</span></span>|<span data-ttu-id="5d800-3469">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3469">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3470">00</span><span class="sxs-lookup"><span data-stu-id="5d800-3470">00</span></span>|<span data-ttu-id="5d800-3471">NOP</span><span class="sxs-lookup"><span data-stu-id="5d800-3471">nop</span></span>|<span data-ttu-id="5d800-3472">Выполняет операцию без поведения.</span><span class="sxs-lookup"><span data-stu-id="5d800-3472">Performs an operation without behavior.</span></span>|  
  
 <span data-ttu-id="5d800-3473">Для этой инструкции не определено поведение перехода стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-3473">There is no stack transitional behavior defined for this instruction.</span></span>  
  
 <span data-ttu-id="5d800-3474">Операция `nop` не выполняет никаких действий.</span><span class="sxs-lookup"><span data-stu-id="5d800-3474">The `nop` operation does nothing.</span></span> <span data-ttu-id="5d800-3475">Он предназначен для заполнения пространства, если исправлены коды операций.</span><span class="sxs-lookup"><span data-stu-id="5d800-3475">It is intended to fill in space if opcodes are patched.</span></span>  
  
 <span data-ttu-id="5d800-3476">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `nop`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3476">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `nop` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3477">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3477">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Not;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Not" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Not" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Not As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Not;" />
      <MemberSignature Language="F#" Value=" staticval mutable Not : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Not" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3478">Вычисляет побитовое дополнение целочисленного значения, находящегося на вершине стека, и помещает результат в стек с тем же типом.</span><span class="sxs-lookup"><span data-stu-id="5d800-3478">Computes the bitwise complement of the integer value on top of the stack and pushes the result onto the evaluation stack as the same type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3479">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3479">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3480">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3480">Format</span></span>|<span data-ttu-id="5d800-3481">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3481">Assembly Format</span></span>|<span data-ttu-id="5d800-3482">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3482">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3483">66</span><span class="sxs-lookup"><span data-stu-id="5d800-3483">66</span></span>|<span data-ttu-id="5d800-3484">not</span><span class="sxs-lookup"><span data-stu-id="5d800-3484">not</span></span>|<span data-ttu-id="5d800-3485">Вычисление побитового дополнения значения.</span><span class="sxs-lookup"><span data-stu-id="5d800-3485">Computes the bitwise complement of a value.</span></span>|  
  
 <span data-ttu-id="5d800-3486">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3486">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3487">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3487">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-3488">`value` извлекается из стека и вычисленное побитовое дополнение.</span><span class="sxs-lookup"><span data-stu-id="5d800-3488">`value` is popped from the stack and its bitwise complement computed.</span></span>  
  
3.  <span data-ttu-id="5d800-3489">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3489">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3490">Инструкция `not` делит побитовое дополнение целочисленного значения и помещает результат в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3490">The `not` instruction computes the bitwise complement of an integer value and pushes the result onto the stack.</span></span> <span data-ttu-id="5d800-3491">Тип возвращаемого значения совпадает с типом операнда.</span><span class="sxs-lookup"><span data-stu-id="5d800-3491">The return type is the same as the operand type.</span></span>  
  
 <span data-ttu-id="5d800-3492">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `not`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3492">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `not` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3493">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3493">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Or;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Or" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Or" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Or As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Or;" />
      <MemberSignature Language="F#" Value=" staticval mutable Or : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Or" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3494">Вычисляет побитовое дополнение двух целочисленных значений, находящихся на вершине стека, и помещает результат в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3494">Compute the bitwise complement of the two integer values on top of the stack and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3495">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3495">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3496">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3496">Format</span></span>|<span data-ttu-id="5d800-3497">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3497">Assembly Format</span></span>|<span data-ttu-id="5d800-3498">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3498">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3499">60</span><span class="sxs-lookup"><span data-stu-id="5d800-3499">60</span></span>|<span data-ttu-id="5d800-3500">или</span><span class="sxs-lookup"><span data-stu-id="5d800-3500">or</span></span>|<span data-ttu-id="5d800-3501">Выполняет побитовое или для двух целочисленных значений, возвращает целое число.</span><span class="sxs-lookup"><span data-stu-id="5d800-3501">Computes the bitwise OR of two integer values, returns an integer.</span></span>|  
  
 <span data-ttu-id="5d800-3502">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3502">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3503">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3503">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-3504">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3504">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-3505">`value2` и `value1` извлекаются из стека и их побитовые или вычисленные.</span><span class="sxs-lookup"><span data-stu-id="5d800-3505">`value2` and `value1` are popped from the stack and their bitwise OR computed.</span></span>  
  
4.  <span data-ttu-id="5d800-3506">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3506">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3507">Инструкция `or` рассчитывает побитовое или двух значений в стеке, помещая результат в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3507">The `or` instruction computes the bitwise OR of two values atop the stack, pushing the result onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3508">`Or` является операцией, относящейся к целому числу.</span><span class="sxs-lookup"><span data-stu-id="5d800-3508">`Or` is an integer-specific operation.</span></span>  
  
 <span data-ttu-id="5d800-3509">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `or`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3509">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `or` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3510">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3510">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Pop;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Pop" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Pop As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Pop;" />
      <MemberSignature Language="F#" Value=" staticval mutable Pop : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Pop" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3511">Удаляет значение, находящееся на вершине стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-3511">Removes the value currently on top of the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3512">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3512">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3513">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3513">Format</span></span>|<span data-ttu-id="5d800-3514">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3514">Assembly Format</span></span>|<span data-ttu-id="5d800-3515">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3515">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3516">26</span><span class="sxs-lookup"><span data-stu-id="5d800-3516">26</span></span>|<span data-ttu-id="5d800-3517">pop</span><span class="sxs-lookup"><span data-stu-id="5d800-3517">pop</span></span>|<span data-ttu-id="5d800-3518">Извлекает верхнее значение из стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-3518">Pops the top value from the stack.</span></span>|  
  
 <span data-ttu-id="5d800-3519">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3519">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3520">Верхнее значение извлекается из стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-3520">The top value is popped from the stack.</span></span>  
  
 <span data-ttu-id="5d800-3521">Инструкция `pop` удаляет верхний элемент из стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-3521">The `pop` instruction removes the top element from the stack.</span></span>  
  
 <span data-ttu-id="5d800-3522">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `pop`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3522">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `pop` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3523">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3523">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3524">Эта инструкция зарезервирована.</span><span class="sxs-lookup"><span data-stu-id="5d800-3524">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3525">Эта инструкция зарезервирована.</span><span class="sxs-lookup"><span data-stu-id="5d800-3525">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3526">Эта инструкция зарезервирована.</span><span class="sxs-lookup"><span data-stu-id="5d800-3526">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3527">Эта инструкция зарезервирована.</span><span class="sxs-lookup"><span data-stu-id="5d800-3527">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix5">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix5;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix5" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix5" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix5 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix5;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix5 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix5" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3528">Эта инструкция зарезервирована.</span><span class="sxs-lookup"><span data-stu-id="5d800-3528">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix6">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix6;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix6" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix6 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix6;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix6 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix6" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3529">Эта инструкция зарезервирована.</span><span class="sxs-lookup"><span data-stu-id="5d800-3529">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix7">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix7;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix7" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix7" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix7 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix7;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix7 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix7" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3530">Эта инструкция зарезервирована.</span><span class="sxs-lookup"><span data-stu-id="5d800-3530">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefixref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefixref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefixref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefixref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefixref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefixref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefixref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefixref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3531">Эта инструкция зарезервирована.</span><span class="sxs-lookup"><span data-stu-id="5d800-3531">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Readonly">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Readonly;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Readonly" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Readonly" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Readonly As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Readonly;" />
      <MemberSignature Language="F#" Value=" staticval mutable Readonly : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Readonly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3532">Указывает, что последующая операция, связанная с адресом массива, не выполняет никаких проверок во время выполнения и возвращает управляемый указатель, изменение которого запрещено.</span><span class="sxs-lookup"><span data-stu-id="5d800-3532">Specifies that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer whose mutability is restricted.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3533">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3533">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3534">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3534">Format</span></span>|<span data-ttu-id="5d800-3535">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3535">Assembly Format</span></span>|<span data-ttu-id="5d800-3536">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3536">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3537">FE 1E</span><span class="sxs-lookup"><span data-stu-id="5d800-3537">FE 1E</span></span>|<span data-ttu-id="5d800-3538">доступно.</span><span class="sxs-lookup"><span data-stu-id="5d800-3538">readonly.</span></span>|<span data-ttu-id="5d800-3539">Укажите, что последующие операции с адресом массива не выполняют проверку типа во время выполнения и возвращают управляемый указатель с ограниченными возможностями.</span><span class="sxs-lookup"><span data-stu-id="5d800-3539">Specify that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer with restricted mutability.</span></span>|  
  
 <span data-ttu-id="5d800-3540">Этот префикс может использоваться только непосредственно перед инструкцией `ldelema` и вызовами специального метода `Address` для массивов.</span><span class="sxs-lookup"><span data-stu-id="5d800-3540">This prefix can only appear immediately preceding the `ldelema` instruction and calls to the special `Address` method on arrays.</span></span> <span data-ttu-id="5d800-3541">Его воздействие на последующую операцию — двойная:</span><span class="sxs-lookup"><span data-stu-id="5d800-3541">Its effect on the subsequent operation is twofold:</span></span>  
  
1.  <span data-ttu-id="5d800-3542">Во время выполнения операция проверки типа не выполняется.</span><span class="sxs-lookup"><span data-stu-id="5d800-3542">At run time, no type check operation is performed.</span></span> <span data-ttu-id="5d800-3543">Обратите внимание, что обычно неявная проверка типа для инструкций `ldelema` и `stelem` при использовании массивов ссылочного типа.</span><span class="sxs-lookup"><span data-stu-id="5d800-3543">Note that there is normally an implicit type check for the `ldelema` and `stelem` instructions when used on reference type arrays.</span></span> <span data-ttu-id="5d800-3544">Для классов значений никогда не выполняется проверка типа во время выполнения, поэтому `readonly` является отсутствием операции в этом случае.</span><span class="sxs-lookup"><span data-stu-id="5d800-3544">There is never a run-time type check for value classes, so `readonly` is a no-op in that case.</span></span>  
  
2.  <span data-ttu-id="5d800-3545">Средство проверки обрабатывает результат операции адреса в качестве управляемого указателя с ограниченными возможностями.</span><span class="sxs-lookup"><span data-stu-id="5d800-3545">The verifier treats the result of the address-of operation as a managed pointer with restricted mutability.</span></span>  
  
 <span data-ttu-id="5d800-3546">Говорят, что указатель имеет ограниченную возможность, так как определяющий тип определяет, можно ли изменить значение.</span><span class="sxs-lookup"><span data-stu-id="5d800-3546">The pointer is said to have restricted mutability because the defining type controls whether the value can be mutated.</span></span> <span data-ttu-id="5d800-3547">Для классов значений, которые не предоставляют открытых полей или методов, которые обновляют значение на месте, указатель доступен только для чтения (следовательно, имя префикса).</span><span class="sxs-lookup"><span data-stu-id="5d800-3547">For value classes that expose no public fields or methods that update the value in place, the pointer is read-only (hence the name of the prefix).</span></span> <span data-ttu-id="5d800-3548">В частности, классы, представляющие простые типы (например, System. Int32), не предоставляют мутатора и, таким образом, доступны только для чтения.</span><span class="sxs-lookup"><span data-stu-id="5d800-3548">In particular, the classes representing primitive types (for example, System.Int32) do not expose mutators and thus are read-only.</span></span>  
  
 <span data-ttu-id="5d800-3549">Управляемый указатель, ограниченный таким образом, может использоваться только следующими способами:</span><span class="sxs-lookup"><span data-stu-id="5d800-3549">A managed pointer restricted in this fashion can be used only in the following ways:</span></span>  
  
-   <span data-ttu-id="5d800-3550">В качестве параметра `object` для инструкций `ldfld`, `ldflda`, `stfld`, `call` или @ no__t-5.</span><span class="sxs-lookup"><span data-stu-id="5d800-3550">As the `object` parameter for the `ldfld`, `ldflda`, `stfld`, `call`, or`constrained callvirt` instructions.</span></span>  
  
-   <span data-ttu-id="5d800-3551">В качестве параметра `pointer` для инструкции `ldobj` или для одной из инструкций `ldind`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3551">As the `pointer` parameter to the `ldobj` instruction or to one of the `ldind` instructions.</span></span>  
  
-   <span data-ttu-id="5d800-3552">В качестве параметра `source` для инструкции `cpobj`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3552">As the `source` parameter to the `cpobj` instruction.</span></span>  
  
 <span data-ttu-id="5d800-3553">Все другие операции запрещены, включая `stobj`, `initobj` или `mkrefany`, или любые инструкции `stind`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3553">All other operations disallowed, including the `stobj`, `initobj`, or `mkrefany` operations, or any of the `stind` instructions.</span></span>  
  
 <span data-ttu-id="5d800-3554">Назначение префикса `readonly` заключается в том, чтобы избежать проверки типа при извлечении элемента из массива в универсальном коде.</span><span class="sxs-lookup"><span data-stu-id="5d800-3554">The purpose of the `readonly` prefix is to avoid a type check when fetching an element from an array in generic code.</span></span> <span data-ttu-id="5d800-3555">Например, выражение `arr[i].m()`, где тип элемента массива `arr` является универсальным типом, который был ограничен интерфейсом с методом `m`, может компилироваться следующим кодом MSIL.</span><span class="sxs-lookup"><span data-stu-id="5d800-3555">For example, the expression `arr[i].m()`, where the element type of the array `arr` is a generic type that has been constrained to have an interface with method `m`, might compile to the following MSIL.</span></span>  
  
```  
ldloc arr  
ldloc i  
readonly.  
ldelema !0    // Loads the pointer to the object.  
…             // Load the arguments to the call.  
constrained. !0  
callvirt m  
```  
  
 <span data-ttu-id="5d800-3556">Без префикса `readonly` Инструкция `ldelema` будет выполнять проверку типа, если! 0 является ссылочным типом.</span><span class="sxs-lookup"><span data-stu-id="5d800-3556">Without the `readonly` prefix, the `ldelema` instruction would perform a type check in the case where !0 was a reference type.</span></span> <span data-ttu-id="5d800-3557">Этот тип не только неэффективен, но и семантически неверен.</span><span class="sxs-lookup"><span data-stu-id="5d800-3557">Not only is this type check inefficient, but it is semantically incorrect.</span></span> <span data-ttu-id="5d800-3558">Проверка типа `ldelema` является точным совпадением, что является слишком строгим.</span><span class="sxs-lookup"><span data-stu-id="5d800-3558">The type check for `ldelema` is an exact match, which is too strong.</span></span> <span data-ttu-id="5d800-3559">Если массив удерживал подклассы типа! 0, приведенный выше код не сможет проверить тип.</span><span class="sxs-lookup"><span data-stu-id="5d800-3559">If the array held subclasses of type !0, the code above would fail the type check.</span></span>  
  
 <span data-ttu-id="5d800-3560">Адрес элемента массива извлекается вместо самого элемента, чтобы иметь дескриптор для `arr[i]`, который работает как для типов значений, так и для ссылочных типов и поэтому может быть передан в инструкцию `constrained callvirt`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3560">The address of the array element is fetched, instead of the element itself, in order to have a handle for `arr[i]` that works for both value types and reference types, and thus can be passed to the `constrained callvirt` instruction.</span></span>  
  
 <span data-ttu-id="5d800-3561">Как правило, пропуск проверки во время выполнения может быть незащищенным, если массив удерживает элементы ссылочного типа.</span><span class="sxs-lookup"><span data-stu-id="5d800-3561">In general it would be unsafe to skip the run-time check if the array held elements of a reference type.</span></span> <span data-ttu-id="5d800-3562">Чтобы быть в безопасности, необходимо убедиться, что с помощью этого указателя изменения в массиве не выполняются.</span><span class="sxs-lookup"><span data-stu-id="5d800-3562">To be safe, it is necessary to ensure that no modifications to the array are made through this pointer.</span></span> <span data-ttu-id="5d800-3563">Это гарантируется правилами проверки.</span><span class="sxs-lookup"><span data-stu-id="5d800-3563">The verifier rules ensure this.</span></span> <span data-ttu-id="5d800-3564">Ограниченный управляемый указатель может передаваться как объект для вызовов метода экземпляра, поэтому он не должен строго говорить только для чтения для типов значений, но для типов значений не существует проблем безопасности типов.</span><span class="sxs-lookup"><span data-stu-id="5d800-3564">The restricted managed pointer can be passed as the object of instance method calls, so it is not strictly speaking read-only for value types, but there is no type safety problem for value types.</span></span>  
  
 <span data-ttu-id="5d800-3565">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `readonly`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3565">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `readonly` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3566">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3566">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refanytype">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Refanytype;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Refanytype" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Refanytype" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Refanytype As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Refanytype;" />
      <MemberSignature Language="F#" Value=" staticval mutable Refanytype : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Refanytype" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3567">Извлекает токен типа, внедренный в ссылку с определенным типом.</span><span class="sxs-lookup"><span data-stu-id="5d800-3567">Retrieves the type token embedded in a typed reference.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3568">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3568">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3569">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3569">Format</span></span>|<span data-ttu-id="5d800-3570">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3570">Assembly Format</span></span>|<span data-ttu-id="5d800-3571">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3571">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3572">FE 1D</span><span class="sxs-lookup"><span data-stu-id="5d800-3572">FE 1D</span></span>|<span data-ttu-id="5d800-3573">рефанитипе</span><span class="sxs-lookup"><span data-stu-id="5d800-3573">refanytype</span></span>|<span data-ttu-id="5d800-3574">Помещает токен типа, хранящийся в типизированной ссылке.</span><span class="sxs-lookup"><span data-stu-id="5d800-3574">Pushes the type token stored in a typed reference.</span></span>|  
  
 <span data-ttu-id="5d800-3575">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3575">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3576">Ссылка на тип значения помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3576">A value type reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-3577">Типизированная ссылка извлекается из стека и полученного маркера соответствующего типа.</span><span class="sxs-lookup"><span data-stu-id="5d800-3577">The typed reference is popped from the stack and its corresponding type token retrieved.</span></span>  
  
3.  <span data-ttu-id="5d800-3578">Токен типа помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3578">The type token is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3579">Типизированная ссылка содержит токен типа и адрес экземпляра объекта.</span><span class="sxs-lookup"><span data-stu-id="5d800-3579">A typed reference contains a type token and an address to an object instance.</span></span>  
  
 <span data-ttu-id="5d800-3580">Инструкция `refanytype` извлекает лексему типа, внедренную в типизированную ссылку.</span><span class="sxs-lookup"><span data-stu-id="5d800-3580">The `refanytype` instruction retrieves the type token embedded in the typed reference.</span></span> <span data-ttu-id="5d800-3581">Сведения о создании типизированных ссылок см. в инструкции <xref:System.Reflection.Emit.OpCodes.Mkrefany>.</span><span class="sxs-lookup"><span data-stu-id="5d800-3581">See the <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction for information on creating typed references.</span></span>  
  
 <span data-ttu-id="5d800-3582">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `refanytype`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3582">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `refanytype` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3583">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3583">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refanyval">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Refanyval;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Refanyval" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Refanyval" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Refanyval As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Refanyval;" />
      <MemberSignature Language="F#" Value=" staticval mutable Refanyval : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Refanyval" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3584">Извлекает адрес (тип <see langword="&amp;" />), внедренный в ссылку с определенным типом.</span><span class="sxs-lookup"><span data-stu-id="5d800-3584">Retrieves the address (type <see langword="&amp;" />) embedded in a typed reference.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3585">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3585">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3586">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3586">Format</span></span>|<span data-ttu-id="5d800-3587">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3587">Assembly Format</span></span>|<span data-ttu-id="5d800-3588">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3588">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3589">C2 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5d800-3589">C2 < `T` ></span></span>|<span data-ttu-id="5d800-3590">рефанивал `type`</span><span class="sxs-lookup"><span data-stu-id="5d800-3590">refanyval `type`</span></span>|<span data-ttu-id="5d800-3591">Отправляет адрес, хранящийся в типизированной ссылке.</span><span class="sxs-lookup"><span data-stu-id="5d800-3591">Pushes the address stored in a typed reference.</span></span>|  
  
 <span data-ttu-id="5d800-3592">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3592">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3593">Ссылка на тип значения помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3593">A value type reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-3594">Типизированная ссылка извлекается из стека, и извлекается соответствующий адрес.</span><span class="sxs-lookup"><span data-stu-id="5d800-3594">The typed reference is popped from the stack and the corresponding address retrieved.</span></span>  
  
3.  <span data-ttu-id="5d800-3595">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3595">The address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3596">Типизированная ссылка содержит токен типа и адрес экземпляра объекта.</span><span class="sxs-lookup"><span data-stu-id="5d800-3596">A typed reference contains a type token and an address to an object instance.</span></span>  
  
 <span data-ttu-id="5d800-3597">Инструкция `refanyval` извлекает адрес, внедренный в ссылку с определенным типом.</span><span class="sxs-lookup"><span data-stu-id="5d800-3597">The `refanyval` instruction retrieves the address embedded in the a typed reference.</span></span> <span data-ttu-id="5d800-3598">Тип, внедренный в ссылочную ссылку, предоставленный в стеке, должен соответствовать типу, заданному `type` (маркер метаданных: `typedef` или `typeref`).</span><span class="sxs-lookup"><span data-stu-id="5d800-3598">The type embedded in the typed reference supplied on the stack must match the type specified by `type` (a metadata token, either a `typedef` or a `typeref`).</span></span> <span data-ttu-id="5d800-3599">См. инструкции по <xref:System.Reflection.Emit.OpCodes.Mkrefany> для связанного содержимого.</span><span class="sxs-lookup"><span data-stu-id="5d800-3599">See the <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction for related content.</span></span>  
  
 <span data-ttu-id="5d800-3600"><xref:System.InvalidCastException> возникает, если `type` не совпадает с типом, хранящимся в ссылке на тип (в данном случае `type` является классом, переданным в инструкцию <xref:System.Reflection.Emit.OpCodes.Mkrefany>, которая создала произнесенную типизированную ссылку).</span><span class="sxs-lookup"><span data-stu-id="5d800-3600"><xref:System.InvalidCastException> is thrown if `type` is not identical to the type stored in the type reference (in this case, `type` is the class supplied to the <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction that constructed said typed reference).</span></span>  
  
 <span data-ttu-id="5d800-3601"><xref:System.TypeLoadException> возникает, если не удается найти `type`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3601"><xref:System.TypeLoadException> is thrown if `type` cannot be found.</span></span>  
  
 <span data-ttu-id="5d800-3602">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `refanyval`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3602">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `refanyval` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3603">ILGenerator. Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="5d800-3603">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rem;" />
      <MemberSignature Language="F#" Value=" staticval mutable Rem : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Rem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3604">Делит одно значение на другое и помещает остаток в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-3604">Divides two values and pushes the remainder onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3605">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3605">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3606">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3606">Format</span></span>|<span data-ttu-id="5d800-3607">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3607">Assembly Format</span></span>|<span data-ttu-id="5d800-3608">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3608">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3609">5D</span><span class="sxs-lookup"><span data-stu-id="5d800-3609">5D</span></span>|<span data-ttu-id="5d800-3610">оставшие</span><span class="sxs-lookup"><span data-stu-id="5d800-3610">rem</span></span>|<span data-ttu-id="5d800-3611">Помещает остаток деления `value1` на `value2` в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3611">Pushes the remainder of dividing `value1` by `value2` onto the stack.</span></span>|  
  
  
 <span data-ttu-id="5d800-3612">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3612">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3613">@No__t-0 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3613">A `value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-3614">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3614">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-3615">`value2` и `value1` извлекаются из стека, а оставшаяся часть `value1` `div` `value2`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3615">`value2` and `value1` are popped from the stack and the remainder of `value1` `div` `value2` computed.</span></span>  
  
4.  <span data-ttu-id="5d800-3616">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3616">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3617">`result` @ no__t-1 @ no__t-2 `rem` `value2` соответствует следующим условиям.</span><span class="sxs-lookup"><span data-stu-id="5d800-3617">`result` = `value1` `rem` `value2` satisfies the following conditions:</span></span>  
  
 <span data-ttu-id="5d800-3618">`result` @ no__t-1 @ no__t-2 @ no__t-3 @ no__t-4 `×` (`value1` `div` `value2`) и:</span><span class="sxs-lookup"><span data-stu-id="5d800-3618">`result` = `value1` - `value2` `×` (`value1` `div` `value2`), and:</span></span>  
  
 <span data-ttu-id="5d800-3619">0 = &#124; `result` &#124; < &#124; `value2` &#124;, знак (`result`) = sign (`value1`), где `div` — это инструкция деления, которая усекается в сторону нуля.</span><span class="sxs-lookup"><span data-stu-id="5d800-3619">0 = &#124; `result` &#124; < &#124; `value2` &#124;, sign(`result`) = sign(`value1`), where `div` is the division instruction that truncates towards zero.</span></span>  
  
 <span data-ttu-id="5d800-3620">Если `value2` равно нулю или `value1` — бесконечность, результатом будет NaN.</span><span class="sxs-lookup"><span data-stu-id="5d800-3620">If `value2` is zero or `value1` is infinity the result is NaN.</span></span> <span data-ttu-id="5d800-3621">Если `value2` — бесконечность, результатом будет `value1` (с отрицанием для `-infinity`).</span><span class="sxs-lookup"><span data-stu-id="5d800-3621">If `value2` is infinity, the result is `value1` (negated for `-infinity`).</span></span>  
  
 <span data-ttu-id="5d800-3622">Целочисленные операции создают исключение <xref:System.DivideByZeroException>, если `value2` равно нулю.</span><span class="sxs-lookup"><span data-stu-id="5d800-3622">Integral operations throw <xref:System.DivideByZeroException> if `value2` is zero.</span></span>  
  
 <span data-ttu-id="5d800-3623">Обратите внимание, что на платформах на базе процессоров Intel при вычислениях выдается <xref:System.OverflowException> (minint `rem` -1).</span><span class="sxs-lookup"><span data-stu-id="5d800-3623">Note that on the Intel-based platforms an <xref:System.OverflowException> is thrown when computing (minint `rem` -1).</span></span>  
  
 <span data-ttu-id="5d800-3624">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `rem`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3624">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `rem` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3625">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3625">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rem_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rem_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rem_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rem_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rem_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rem_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Rem_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Rem_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3626">Делит одно значение без знака на другое значение без знака и помещает остаток в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-3626">Divides two unsigned values and pushes the remainder onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3627">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3627">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3628">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3628">Format</span></span>|<span data-ttu-id="5d800-3629">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3629">Assembly Format</span></span>|<span data-ttu-id="5d800-3630">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3630">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3631">5E</span><span class="sxs-lookup"><span data-stu-id="5d800-3631">5E</span></span>|<span data-ttu-id="5d800-3632">REM. un</span><span class="sxs-lookup"><span data-stu-id="5d800-3632">rem.un</span></span>|<span data-ttu-id="5d800-3633">Помещает оставшуюся часть деления без знака `value1` на `value2` в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3633">Pushes the remainder of dividing unsigned `value1` by unsigned `value2` onto the stack.</span></span>|  
  
 <span data-ttu-id="5d800-3634">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3634">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3635">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3635">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-3636">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3636">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-3637">`value2` и `value1` извлекаются из стека, а оставшаяся часть `value1` `div` `value2`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3637">`value2` and `value1` are popped from the stack and the remainder of `value1` `div` `value2` computed.</span></span>  
  
4.  <span data-ttu-id="5d800-3638">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3638">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3639">`result` @ no__t-1 @ no__t-2 `rem.un` `value2` соответствует следующим условиям.</span><span class="sxs-lookup"><span data-stu-id="5d800-3639">`result` = `value1` `rem.un` `value2` satisfies the following conditions:</span></span>  
  
 <span data-ttu-id="5d800-3640">`result` @ no__t-1 @ no__t-2 @ no__t-3 @ no__t-4 x (`value1` `div.un` `value2`) и:</span><span class="sxs-lookup"><span data-stu-id="5d800-3640">`result` = `value1` - `value2` x(`value1` `div.un` `value2`), and:</span></span>  
  
 <span data-ttu-id="5d800-3641">0 = `result` @ no__t-1 @ no__t-2, где `div.un` — это неподписанная инструкция деления.</span><span class="sxs-lookup"><span data-stu-id="5d800-3641">0 = `result` < `value2`, where `div.un` is the unsigned division instruction.</span></span>  
  
 <span data-ttu-id="5d800-3642">Инструкция `rem.un` выполняет вычисление `result` и помещает его в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3642">The `rem.un` instruction computes `result` and pushes it on the stack.</span></span> <span data-ttu-id="5d800-3643">`Rem.un` обрабатывает свои аргументы как целые числа без знака, а <xref:System.Reflection.Emit.OpCodes.Rem> обрабатывает их как целые числа со знаком.</span><span class="sxs-lookup"><span data-stu-id="5d800-3643">`Rem.un` treats its arguments as unsigned integers, while <xref:System.Reflection.Emit.OpCodes.Rem> treats them as signed integers.</span></span>  
  
 <span data-ttu-id="5d800-3644">значение `Rem.un` не указано для чисел с плавающей запятой.</span><span class="sxs-lookup"><span data-stu-id="5d800-3644">`Rem.un` is unspecified for floating-point numbers.</span></span>  
  
 <span data-ttu-id="5d800-3645">Целочисленные операции создают исключение <xref:System.DivideByZeroException>, если `value2` равно нулю.</span><span class="sxs-lookup"><span data-stu-id="5d800-3645">Integral operations throw <xref:System.DivideByZeroException> if `value2` is zero.</span></span>  
  
 <span data-ttu-id="5d800-3646">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `rem.un`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3646">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `rem.un` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3647">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3647">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ret">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ret;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ret" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ret" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ret As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ret;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ret : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ret" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3648">Выполняет возврат из текущего метода, помещая возвращаемое значение (если имеется) из стека вычислений вызываемого метода в стек вычислений вызывающего метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-3648">Returns from the current method, pushing a return value (if present) from the callee's evaluation stack onto the caller's evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3649">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3649">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3650">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3650">Format</span></span>|<span data-ttu-id="5d800-3651">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3651">Assembly Format</span></span>|<span data-ttu-id="5d800-3652">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3652">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3653">2A</span><span class="sxs-lookup"><span data-stu-id="5d800-3653">2A</span></span>|<span data-ttu-id="5d800-3654">обратно</span><span class="sxs-lookup"><span data-stu-id="5d800-3654">ret</span></span>|<span data-ttu-id="5d800-3655">Возвращает из метода, возможно, возвращающего значение.</span><span class="sxs-lookup"><span data-stu-id="5d800-3655">Returns from method, possibly returning a value.</span></span>|  
  
 <span data-ttu-id="5d800-3656">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3656">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3657">Возвращаемое значение извлекается из стека вычислений вызываемого метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-3657">The return value is popped from the callee evaluation stack.</span></span>  
  
2.  <span data-ttu-id="5d800-3658">Возвращаемое значение, полученное на шаге 1, помещается в стек вычислений вызывающего объекта.</span><span class="sxs-lookup"><span data-stu-id="5d800-3658">The return value obtained in step 1 is pushed onto the caller evaluation stack.</span></span>  
  
 <span data-ttu-id="5d800-3659">Если возвращаемое значение отсутствует в стеке вычисления вызываемого метода, значение не возвращается (ни одно поведение перехода стека для вызываемого или вызывающего метода не используется).</span><span class="sxs-lookup"><span data-stu-id="5d800-3659">If the return value is not present on the callee evaluation stack, no value is returned (no stack transition behaviors for either the callee or caller method).</span></span>  
  
 <span data-ttu-id="5d800-3660">Тип возвращаемого значения (если таковой имеется) текущего метода определяет тип значения, которое будет выбрано из верхней части стека и скопировано в стек метода, который вызвал текущий метод.</span><span class="sxs-lookup"><span data-stu-id="5d800-3660">The type of the return value, if any, of the current method determines the type of value to be fetched from the top of the stack and copied onto the stack of the method that called the current method.</span></span> <span data-ttu-id="5d800-3661">Стек вычислений для текущего метода должен быть пустым, за исключением возвращаемого значения.</span><span class="sxs-lookup"><span data-stu-id="5d800-3661">The evaluation stack for the current method must be empty except for the value to be returned.</span></span>  
  
 <span data-ttu-id="5d800-3662">Инструкция `ret` не может использоваться для перемещения управления из блока @ no__t-1, `filter`, `catch` или `finally`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3662">The `ret` instruction cannot be used to transfer control out of a`try`, `filter`, `catch`, or `finally` block.</span></span> <span data-ttu-id="5d800-3663">В `try` или `catch` используйте инструкцию <xref:System.Reflection.Emit.OpCodes.Leave> с назначением инструкции `ret`, которая находится за пределами всех охватывающих блоков исключений.</span><span class="sxs-lookup"><span data-stu-id="5d800-3663">From within a `try` or `catch`, use the <xref:System.Reflection.Emit.OpCodes.Leave> instruction with a destination of a `ret` instruction that is outside all enclosing exception blocks.</span></span> <span data-ttu-id="5d800-3664">Поскольку блоки `filter` и `finally` логически являются частью обработки исключений, а не метода, в котором внедрен их код, правильно сформированные инструкции языка MSIL не выполняют возврат метода из `filter` или `finally`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3664">Because the `filter` and `finally` blocks are logically part of exception handling and not the method in which their code is embedded, correctly generated Microsoft Intermediate Language (MSIL) instructions do not perform a method return from within a `filter` or `finally`.</span></span>  
  
 <span data-ttu-id="5d800-3665">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `ret`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3665">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ret` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3666">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3666">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rethrow">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rethrow;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rethrow" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rethrow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rethrow As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rethrow;" />
      <MemberSignature Language="F#" Value=" staticval mutable Rethrow : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Rethrow" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3667">Возвращает текущее исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-3667">Rethrows the current exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3668">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3668">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3669">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3669">Format</span></span>|<span data-ttu-id="5d800-3670">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3670">Assembly Format</span></span>|<span data-ttu-id="5d800-3671">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3671">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3672">FE 1A</span><span class="sxs-lookup"><span data-stu-id="5d800-3672">FE 1A</span></span>|<span data-ttu-id="5d800-3673">Rethrow</span><span class="sxs-lookup"><span data-stu-id="5d800-3673">rethrow</span></span>|<span data-ttu-id="5d800-3674">Повторная генерация текущего исключения</span><span class="sxs-lookup"><span data-stu-id="5d800-3674">Rethrows the current exception</span></span>|  
  
 <span data-ttu-id="5d800-3675">Для этой инструкции не определено поведение перехода стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-3675">No stack transition behavior is defined for this instruction.</span></span>  
  
 <span data-ttu-id="5d800-3676">Инструкция `rethrow` разрешена только в теле обработчика `catch`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3676">The `rethrow` instruction is only permitted within the body of a `catch` handler.</span></span> <span data-ttu-id="5d800-3677">Он создает то же исключение, которое было перехвачено этим обработчиком.</span><span class="sxs-lookup"><span data-stu-id="5d800-3677">It throws the same exception that was caught by this handler.</span></span>  
  
 <span data-ttu-id="5d800-3678">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `rethrow`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3678">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `rethrow` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3679">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3679">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shl">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shl;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shl" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shl" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shl As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shl;" />
      <MemberSignature Language="F#" Value=" staticval mutable Shl : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Shl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3680">Смещает целочисленное значение влево (с заполнением нулями) на заданное число бит и помещает результат в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-3680">Shifts an integer value to the left (in zeroes) by a specified number of bits, pushing the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3681">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3681">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3682">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3682">Format</span></span>|<span data-ttu-id="5d800-3683">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3683">Assembly Format</span></span>|<span data-ttu-id="5d800-3684">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3684">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3685">62</span><span class="sxs-lookup"><span data-stu-id="5d800-3685">62</span></span>|<span data-ttu-id="5d800-3686">шл</span><span class="sxs-lookup"><span data-stu-id="5d800-3686">shl</span></span>|<span data-ttu-id="5d800-3687">Сдвигает целое число влево (сдвиг в нули).</span><span class="sxs-lookup"><span data-stu-id="5d800-3687">Shifts an integer to the left (shifting in zeros).</span></span>|  
  
 <span data-ttu-id="5d800-3688">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3688">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3689">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3689">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-3690">Количество битов для сдвига помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3690">The amount of bits to be shifted is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-3691">Число битов, которые необходимо сдвинуть, и значение, извлекаемое из стека; значение смещается влево на указанное число битов.</span><span class="sxs-lookup"><span data-stu-id="5d800-3691">The number of bits to be shifted and the value are popped from the stack; the value is shifted left by the specified number of bits.</span></span>  
  
4.  <span data-ttu-id="5d800-3692">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3692">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3693">Инструкция `shl` Сдвигает значение (Type `int32`, `int64` или `native int`) влево на указанное число битов.</span><span class="sxs-lookup"><span data-stu-id="5d800-3693">The `shl` instruction shifts the value (type `int32`, `int64` or `native int`) left by the specified number of bits.</span></span> <span data-ttu-id="5d800-3694">Число битов является значением типа `int32` или `native int`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3694">The number of bits is a value of type `int32` or `native int`.</span></span> <span data-ttu-id="5d800-3695">Возвращаемое значение не указано, если число битов, которые необходимо сдвинуть, больше или равно ширине (в битах) указанного значения.</span><span class="sxs-lookup"><span data-stu-id="5d800-3695">The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.</span></span>  
  
 <span data-ttu-id="5d800-3696">`Shl` вставляет нулевой бит в нижнюю точку при каждой смене.</span><span class="sxs-lookup"><span data-stu-id="5d800-3696">`Shl` inserts a zero bit in the lowest position on each shift.</span></span>  
  
 <span data-ttu-id="5d800-3697">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `shl`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3697">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `shl` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3698">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3698">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shr;" />
      <MemberSignature Language="F#" Value=" staticval mutable Shr : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Shr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3699">Смещает целочисленное значение вправо (с знаковым битом) на заданное число бит и помещает результат в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-3699">Shifts an integer value (in sign) to the right by a specified number of bits, pushing the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3700">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3700">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3701">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3701">Format</span></span>|<span data-ttu-id="5d800-3702">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3702">Assembly Format</span></span>|<span data-ttu-id="5d800-3703">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3703">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3704">63</span><span class="sxs-lookup"><span data-stu-id="5d800-3704">63</span></span>|<span data-ttu-id="5d800-3705">SHR</span><span class="sxs-lookup"><span data-stu-id="5d800-3705">shr</span></span>|<span data-ttu-id="5d800-3706">Сдвигает целое число вправо (сдвиг в знак).</span><span class="sxs-lookup"><span data-stu-id="5d800-3706">Shifts an integer to the right (shifting in sign).</span></span>|  
  
 <span data-ttu-id="5d800-3707">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3707">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3708">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3708">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-3709">Количество битов для сдвига помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3709">The amount of bits to be shifted is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-3710">Число битов, которые необходимо сдвинуть, и значение, извлекаемое из стека; значение смещается вправо на указанное число битов.</span><span class="sxs-lookup"><span data-stu-id="5d800-3710">The number of bits to be shifted and the value are popped from the stack; the value is shifted right by the specified number of bits.</span></span>  
  
4.  <span data-ttu-id="5d800-3711">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3711">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3712">Инструкция `shr.un` Сдвигает значение (Type `int32`, `int64` или `native int`) вправо на указанное число битов.</span><span class="sxs-lookup"><span data-stu-id="5d800-3712">The `shr.un` instruction shifts the value (type `int32`, `int64` or `native int`) right by the specified number of bits.</span></span> <span data-ttu-id="5d800-3713">Число битов является значением типа `int32` или `native int`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3713">The number of bits is a value of type `int32` or `native int`.</span></span> <span data-ttu-id="5d800-3714">Возвращаемое значение не указано, если число битов, которые необходимо сдвинуть, больше или равно ширине (в битах) указанного значения.</span><span class="sxs-lookup"><span data-stu-id="5d800-3714">The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.</span></span>  
  
 <span data-ttu-id="5d800-3715">`Shr` реплицирует бит высокого порядка при каждой смене, сохраняя знак исходного значения в `result`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3715">`Shr` replicates the high order bit on each shift, preserving the sign of the original value in the `result`.</span></span>  
  
 <span data-ttu-id="5d800-3716">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `shr`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3716">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `shr` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3717">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3717">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shr_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shr_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shr_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shr_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shr_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shr_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Shr_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Shr_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3718">Смещает целочисленное значение без знака вправо (с заполнением нулями) на заданное число бит и помещает результат в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-3718">Shifts an unsigned integer value (in zeroes) to the right by a specified number of bits, pushing the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3719">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3719">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3720">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3720">Format</span></span>|<span data-ttu-id="5d800-3721">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3721">Assembly Format</span></span>|<span data-ttu-id="5d800-3722">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3722">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3723">64</span><span class="sxs-lookup"><span data-stu-id="5d800-3723">64</span></span>|<span data-ttu-id="5d800-3724">SHR. un</span><span class="sxs-lookup"><span data-stu-id="5d800-3724">shr.un</span></span>|<span data-ttu-id="5d800-3725">Сдвигает целое число вправо (с сдвигом в нули).</span><span class="sxs-lookup"><span data-stu-id="5d800-3725">Shifts an integer to the right (shifting in zeroes).</span></span>|  
  
 <span data-ttu-id="5d800-3726">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3726">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3727">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3727">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-3728">Количество битов для сдвига помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3728">The amount of bits to be shifted is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-3729">Число битов, которые необходимо сдвинуть, и значение, извлекаемое из стека; значение смещается вправо на указанное число битов.</span><span class="sxs-lookup"><span data-stu-id="5d800-3729">The number of bits to be shifted and the value are popped from the stack; the value is shifted right by the specified number of bits.</span></span>  
  
4.  <span data-ttu-id="5d800-3730">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3730">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3731">Инструкция `shr.un` Сдвигает значение (Type `int32`, `int64` или `native int`) вправо на указанное число битов.</span><span class="sxs-lookup"><span data-stu-id="5d800-3731">The `shr.un` instruction shifts the value (type `int32`, `int64` or `native int`) right by the specified number of bits.</span></span> <span data-ttu-id="5d800-3732">Число битов является значением типа `int32`, `int64` или `native int`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3732">The number of bits is a value of type `int32`, `int64` or `native int`.</span></span> <span data-ttu-id="5d800-3733">Возвращаемое значение не указано, если число битов, которые необходимо сдвинуть, больше или равно ширине (в битах) указанного значения.</span><span class="sxs-lookup"><span data-stu-id="5d800-3733">The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.</span></span>  
  
 <span data-ttu-id="5d800-3734">`Shr.un` вставляет нулевой бит в самую верхнюю точку при каждой смене.</span><span class="sxs-lookup"><span data-stu-id="5d800-3734">`Shr.un` inserts a zero bit in the highest position on each shift.</span></span>  
  
 <span data-ttu-id="5d800-3735">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `shr.un`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3735">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `shr.un` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3736">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3736">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sizeof">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sizeof;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sizeof" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sizeof" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sizeof As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sizeof;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sizeof : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sizeof" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3737">Помещает в стек вычислений сведения о размере (в байтах) заданного типа значения.</span><span class="sxs-lookup"><span data-stu-id="5d800-3737">Pushes the size, in bytes, of a supplied value type onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3738">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3738">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3739">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3739">Format</span></span>|<span data-ttu-id="5d800-3740">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3740">Assembly Format</span></span>|<span data-ttu-id="5d800-3741">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3741">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3742">FE 1C < `T` @ NO__T-1</span><span class="sxs-lookup"><span data-stu-id="5d800-3742">FE 1C < `T` ></span></span>|<span data-ttu-id="5d800-3743">sizeof `valType`</span><span class="sxs-lookup"><span data-stu-id="5d800-3743">sizeof `valType`</span></span>|<span data-ttu-id="5d800-3744">Отправка размера (в байтах) типа значения в качестве `unsigned int32`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3744">Push the size, in bytes, of a value type as an `unsigned int32`.</span></span>|  
  
 <span data-ttu-id="5d800-3745">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3745">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3746">Размер (в байтах) заданного типа значения (`valType`) помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3746">The size (in bytes) of the supplied value type (`valType`) is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3747">`valType` должен быть токеном метаданных (`typeref` или `typedef`), который указывает тип значения, ссылочный тип или параметр универсального типа.</span><span class="sxs-lookup"><span data-stu-id="5d800-3747">`valType` must be a metadata token (a `typeref` or `typedef`) that specifies a value type, reference type, or generic type parameter.</span></span>  
  
 <span data-ttu-id="5d800-3748">Для ссылочного типа возвращаемый размер — это размер ссылочного значения соответствующего типа (4 байта в 32-разрядных системах), а не размер данных, хранящихся в объектах, на которые ссылается ссылочное значение.</span><span class="sxs-lookup"><span data-stu-id="5d800-3748">For a reference type, the size returned is the size of a reference value of the corresponding type (4 bytes on 32-bit systems), not the size of the data stored in objects referred to by the reference value.</span></span> <span data-ttu-id="5d800-3749">Параметр универсального типа может использоваться только в теле типа или метода, который его определяет.</span><span class="sxs-lookup"><span data-stu-id="5d800-3749">A generic type parameter can be used only in the body of the type or method that defines it.</span></span> <span data-ttu-id="5d800-3750">При создании экземпляра этого типа или метода параметр универсального типа заменяется типом значения или ссылочным типом.</span><span class="sxs-lookup"><span data-stu-id="5d800-3750">When that type or method is instantiated, the generic type parameter is replaced by a value type or reference type.</span></span>  
  
 <span data-ttu-id="5d800-3751">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `sizeof`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3751">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sizeof` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3752">ILGenerator. Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="5d800-3752">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Starg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Starg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Starg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Starg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Starg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Starg;" />
      <MemberSignature Language="F#" Value=" staticval mutable Starg : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Starg" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3753">Сохраняет значение, находящееся на вершине стека вычислений, в ячейке аргумента с заданным индексом.</span><span class="sxs-lookup"><span data-stu-id="5d800-3753">Stores the value on top of the evaluation stack in the argument slot at a specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3754">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3754">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3755">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3755">Format</span></span>|<span data-ttu-id="5d800-3756">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3756">Assembly Format</span></span>|<span data-ttu-id="5d800-3757">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3757">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3758">FE 0B < `unsigned int16` @ NO__T-1</span><span class="sxs-lookup"><span data-stu-id="5d800-3758">FE 0B < `unsigned int16` ></span></span>|<span data-ttu-id="5d800-3759">СТАРГ `num`</span><span class="sxs-lookup"><span data-stu-id="5d800-3759">starg `num`</span></span>|<span data-ttu-id="5d800-3760">Извлекает верхнее значение из стека и сохраняет его в ячейке аргумента `num`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3760">Pops the top value from the stack and stores it in argument slot `num`.</span></span>|  
  
 <span data-ttu-id="5d800-3761">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3761">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3762">Значение, находящегося на вершине стека, извлекается и помещается в ячейку аргумента `num`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3762">The value currently on top of the stack is popped and placed in argument slot `num`.</span></span>  
  
 <span data-ttu-id="5d800-3763">Инструкция `starg` извлекает значение из стека и помещает его в ячейку аргумента `num`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3763">The `starg` instruction pops a value from the stack and places it in argument slot `num`.</span></span> <span data-ttu-id="5d800-3764">Тип значения должен соответствовать типу аргумента, как указано в сигнатуре текущего метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-3764">The type of the value must match the type of the argument, as specified in the current method's signature.</span></span>  
  
 <span data-ttu-id="5d800-3765">Для процедур, принимающих переменный список аргументов, инструкция `starg` может использоваться только для начальных фиксированных аргументов, а не в переменной части сигнатуры.</span><span class="sxs-lookup"><span data-stu-id="5d800-3765">For procedures that take a variable argument list, the `starg` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="5d800-3766">Выполнение хранилища в аргументах, содержащих целочисленное значение менее 4 байт, усекает значение при перемещении из стека в аргумент.</span><span class="sxs-lookup"><span data-stu-id="5d800-3766">Performing a store into arguments that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the argument.</span></span> <span data-ttu-id="5d800-3767">Значения с плавающей запятой округляются от их собственного размера (тип `F`) до размера, связанного с аргументом.</span><span class="sxs-lookup"><span data-stu-id="5d800-3767">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="5d800-3768">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `starg`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3768">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `starg` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3769">ILGenerator. Emit (код операции, короткий)</span><span class="sxs-lookup"><span data-stu-id="5d800-3769">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Starg_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Starg_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Starg_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Starg_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Starg_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Starg_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Starg_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Starg_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3770">Сохраняет значение, находящееся на вершине стека вычислений, в ячейке аргумента с заданным индексом (короткая форма).</span><span class="sxs-lookup"><span data-stu-id="5d800-3770">Stores the value on top of the evaluation stack in the argument slot at a specified index, short form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3771">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3771">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3772">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3772">Format</span></span>|<span data-ttu-id="5d800-3773">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3773">Assembly Format</span></span>|<span data-ttu-id="5d800-3774">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3774">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3775">10 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="5d800-3775">10 < `unsigned int8` ></span></span>|<span data-ttu-id="5d800-3776">СТАРГ. s `num`</span><span class="sxs-lookup"><span data-stu-id="5d800-3776">starg.s `num`</span></span>|<span data-ttu-id="5d800-3777">Извлекает верхнее значение из стека и сохраняет его в ячейке аргумента `num` (краткая форма).</span><span class="sxs-lookup"><span data-stu-id="5d800-3777">Pops the top value from the stack and stores it in argument slot `num`, short form.</span></span>|  
  
 <span data-ttu-id="5d800-3778">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3778">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3779">Значение, находящегося на вершине стека, извлекается и помещается в ячейку аргумента `num`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3779">The value currently on top of the stack is popped and placed in argument slot `num`.</span></span>  
  
 <span data-ttu-id="5d800-3780">Инструкция `starg.s` извлекает значение из стека и помещает его в ячейку аргумента `num`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3780">The `starg.s` instruction pops a value from the stack and places it in argument slot `num`.</span></span> <span data-ttu-id="5d800-3781">Тип значения должен соответствовать типу аргумента, как указано в сигнатуре текущего метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-3781">The type of the value must match the type of the argument, as specified in the current method's signature.</span></span>  
  
 <span data-ttu-id="5d800-3782">Инструкция `starg.s` обеспечивает эффективную кодировку для использования с первыми аргументами 256.</span><span class="sxs-lookup"><span data-stu-id="5d800-3782">The `starg.s` instruction provides an efficient encoding for use with the first 256 arguments.</span></span>  
  
 <span data-ttu-id="5d800-3783">Для процедур, принимающих переменный список аргументов, инструкция `starg.s` может использоваться только для начальных фиксированных аргументов, а не в переменной части сигнатуры.</span><span class="sxs-lookup"><span data-stu-id="5d800-3783">For procedures that take a variable argument list, the `starg.s` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="5d800-3784">Выполнение хранилища в аргументах, содержащих целочисленное значение менее 4 байт, усекает значение при перемещении из стека в аргумент.</span><span class="sxs-lookup"><span data-stu-id="5d800-3784">Performing a store into arguments that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the argument.</span></span> <span data-ttu-id="5d800-3785">Значения с плавающей запятой округляются от их собственного размера (тип `F`) до размера, связанного с аргументом.</span><span class="sxs-lookup"><span data-stu-id="5d800-3785">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="5d800-3786">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `starg.s`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3786">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `starg.s` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3787">ILGenerator. Emit (код операции, байт)</span><span class="sxs-lookup"><span data-stu-id="5d800-3787">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3788">Заменяет элемент массива с заданным индексом на значение в стеке вычислений, тип которого указан в инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-3788">Replaces the array element at a given index with the value on the evaluation stack, whose type is specified in the instruction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3789">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3789">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3790">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3790">Format</span></span>|<span data-ttu-id="5d800-3791">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3791">Assembly Format</span></span>|<span data-ttu-id="5d800-3792">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3792">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3793">A4 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5d800-3793">A4 < `T` ></span></span>|<span data-ttu-id="5d800-3794">стелем `typeTok`</span><span class="sxs-lookup"><span data-stu-id="5d800-3794">stelem `typeTok`</span></span>|<span data-ttu-id="5d800-3795">Заменяет элемент массива с заданным индексом на значение типа `typeTok` в стеке.</span><span class="sxs-lookup"><span data-stu-id="5d800-3795">Replaces the array element at the supplied index with a value of type `typeTok` on the stack.</span></span>|  
  
 <span data-ttu-id="5d800-3796">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3796">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3797">Ссылка на объект Array, `array`, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3797">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-3798">Значение индекса, `index`, в элемент в `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3798">An index value, `index`, to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-3799">Значение типа, указанное в инструкции, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3799">A value of the type specified in the instruction is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="5d800-3800">Значение, индекс и ссылка на массив извлекаются из стека; значение помещается в элемент массива по заданному индексу.</span><span class="sxs-lookup"><span data-stu-id="5d800-3800">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="5d800-3801">Инструкция `stelem` заменяет значение элемента в указанном индексе, начинающемся с нуля, в одномерном массиве `array` со значением.</span><span class="sxs-lookup"><span data-stu-id="5d800-3801">The `stelem` instruction replaces the value of the element at the supplied zero-based index in the one-dimensional array `array` with the value.</span></span> <span data-ttu-id="5d800-3802">Значение имеет тип, заданный токеном `typeTok` в инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-3802">The value has the type specified by the token `typeTok` in the instruction.</span></span>  
  
 <span data-ttu-id="5d800-3803">Массивы являются объектами, поэтому они представлены значением типа `O`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3803">Arrays are objects, and hence represented by a value of type `O`.</span></span> <span data-ttu-id="5d800-3804">Индекс имеет тип `native int`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3804">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="5d800-3805"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="5d800-3805"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5d800-3806"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательный или больше, чем граница `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3806"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5d800-3807"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="5d800-3807"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5d800-3808">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `stelem`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3808">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3809">ILGenerator. Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="5d800-3809">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3810">Заменяет элемент массива с заданным индексом на значение <see langword="native int" />, находящееся в стеке вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-3810">Replaces the array element at a given index with the <see langword="native int" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3811">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3811">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3812">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3812">Format</span></span>|<span data-ttu-id="5d800-3813">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3813">Assembly Format</span></span>|<span data-ttu-id="5d800-3814">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3814">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3815">9Б</span><span class="sxs-lookup"><span data-stu-id="5d800-3815">9B</span></span>|<span data-ttu-id="5d800-3816">стелем. i</span><span class="sxs-lookup"><span data-stu-id="5d800-3816">stelem.i</span></span>|<span data-ttu-id="5d800-3817">Заменяет элемент массива с заданным индексом на значение `native int` в стеке.</span><span class="sxs-lookup"><span data-stu-id="5d800-3817">Replaces an array element at the supplied index with the `native int` value on the stack.</span></span>|  
  
 <span data-ttu-id="5d800-3818">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3818">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3819">Ссылка на объект Array, `array`, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3819">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-3820">Допустимый индекс элемента в `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3820">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-3821">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3821">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="5d800-3822">Значение, индекс и ссылка на массив извлекаются из стека; значение помещается в элемент массива по заданному индексу.</span><span class="sxs-lookup"><span data-stu-id="5d800-3822">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="5d800-3823">Инструкция `stelem.i` заменяет значение элемента `index` в одномерным массиве `array` на значение `native int`, помещаемое в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3823">The `stelem.i` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `native int` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3824">Массивы являются объектами и поэтому представлены значением типа `O`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3824">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="5d800-3825">Индекс имеет тип `native int`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3825">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="5d800-3826"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="5d800-3826"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5d800-3827"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательный или больше, чем граница `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3827"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5d800-3828"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="5d800-3828"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5d800-3829">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `stelem.i`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3829">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3830">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3830">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3831">Заменяет элемент массива с заданным индексом на значение <see langword="int8" />, находящееся в стеке вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-3831">Replaces the array element at a given index with the <see langword="int8" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3832">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3832">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3833">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3833">Format</span></span>|<span data-ttu-id="5d800-3834">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3834">Assembly Format</span></span>|<span data-ttu-id="5d800-3835">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3835">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3836">9C</span><span class="sxs-lookup"><span data-stu-id="5d800-3836">9C</span></span>|<span data-ttu-id="5d800-3837">стелем. i1</span><span class="sxs-lookup"><span data-stu-id="5d800-3837">stelem.i1</span></span>|<span data-ttu-id="5d800-3838">Заменяет элемент массива с заданным индексом на значение `int8` в стеке.</span><span class="sxs-lookup"><span data-stu-id="5d800-3838">Replaces an array element at the supplied index with the `int8` value on the stack.</span></span>|  
  
 <span data-ttu-id="5d800-3839">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3839">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3840">Ссылка на объект Array, `array`, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3840">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-3841">Допустимый индекс элемента в `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3841">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-3842">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3842">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="5d800-3843">Значение, индекс и ссылка на массив извлекаются из стека; значение помещается в элемент массива по заданному индексу.</span><span class="sxs-lookup"><span data-stu-id="5d800-3843">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="5d800-3844">Инструкция `stelem.i1` заменяет значение элемента `index` в одномерным массиве `array` на значение `int8`, помещаемое в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3844">The `stelem.i1` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int8` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3845">Массивы являются объектами и поэтому представлены значением типа `O`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3845">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="5d800-3846">Индекс имеет тип `native int`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3846">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="5d800-3847"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="5d800-3847"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5d800-3848"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательный или больше, чем граница `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3848"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5d800-3849"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="5d800-3849"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5d800-3850">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `stelem.i1`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3850">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i1` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3851">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3851">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3852">Заменяет элемент массива с заданным индексом на значение <see langword="int16" />, находящееся в стеке вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-3852">Replaces the array element at a given index with the <see langword="int16" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3853">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3853">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3854">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3854">Format</span></span>|<span data-ttu-id="5d800-3855">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3855">Assembly Format</span></span>|<span data-ttu-id="5d800-3856">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3856">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3857">9D</span><span class="sxs-lookup"><span data-stu-id="5d800-3857">9D</span></span>|<span data-ttu-id="5d800-3858">стелем. i2</span><span class="sxs-lookup"><span data-stu-id="5d800-3858">stelem.i2</span></span>|<span data-ttu-id="5d800-3859">Заменяет элемент массива с заданным индексом на значение `int16` в стеке.</span><span class="sxs-lookup"><span data-stu-id="5d800-3859">Replaces an array element at the supplied index with the `int16` value on the stack.</span></span>|  
  
 <span data-ttu-id="5d800-3860">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3860">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3861">Ссылка на объект Array, `array`, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3861">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-3862">Допустимый индекс элемента в `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3862">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-3863">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3863">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="5d800-3864">Значение, индекс и ссылка на массив извлекаются из стека; значение помещается в элемент массива по заданному индексу.</span><span class="sxs-lookup"><span data-stu-id="5d800-3864">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="5d800-3865">Инструкция `stelem.i2` заменяет значение элемента `index` в одномерным массиве `array` на значение `int16`, помещаемое в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3865">The `stelem.i2` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int16` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3866">Массивы являются объектами и поэтому представлены значением типа `O`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3866">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="5d800-3867">Индекс имеет тип `native int`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3867">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="5d800-3868"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="5d800-3868"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5d800-3869"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательный или больше, чем граница `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3869"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5d800-3870"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="5d800-3870"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5d800-3871">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `stelem.i2`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3871">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i2` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3872">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3872">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3873">Заменяет элемент массива с заданным индексом на значение <see langword="int32" />, находящееся в стеке вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-3873">Replaces the array element at a given index with the <see langword="int32" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3874">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3874">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3875">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3875">Format</span></span>|<span data-ttu-id="5d800-3876">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3876">Assembly Format</span></span>|<span data-ttu-id="5d800-3877">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3877">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3878">9E</span><span class="sxs-lookup"><span data-stu-id="5d800-3878">9E</span></span>|<span data-ttu-id="5d800-3879">стелем. i4</span><span class="sxs-lookup"><span data-stu-id="5d800-3879">stelem.i4</span></span>|<span data-ttu-id="5d800-3880">Заменяет элемент массива с заданным индексом на значение `int32` в стеке.</span><span class="sxs-lookup"><span data-stu-id="5d800-3880">Replaces an array element at the supplied index with the `int32` value on the stack.</span></span>|  
  
 <span data-ttu-id="5d800-3881">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3881">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3882">Ссылка на объект Array, `array`, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3882">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-3883">Допустимый индекс элемента в `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3883">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-3884">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3884">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="5d800-3885">Значение, индекс и ссылка на массив извлекаются из стека; значение помещается в элемент массива по заданному индексу.</span><span class="sxs-lookup"><span data-stu-id="5d800-3885">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="5d800-3886">Инструкция `stelem.i4` заменяет значение элемента `index` в одномерным массиве `array` на значение `int32`, помещаемое в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3886">The `stelem.i4` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int32` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3887">Массивы являются объектами и поэтому представлены значением типа `O`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3887">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="5d800-3888">Индекс имеет тип `native int`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3888">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="5d800-3889"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="5d800-3889"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5d800-3890"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательный или больше, чем граница `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3890"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5d800-3891"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="5d800-3891"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5d800-3892">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `stelem.i4`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3892">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i4` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3893">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3893">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3894">Заменяет элемент массива с заданным индексом на значение <see langword="int64" />, находящееся в стеке вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-3894">Replaces the array element at a given index with the <see langword="int64" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3895">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3895">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3896">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3896">Format</span></span>|<span data-ttu-id="5d800-3897">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3897">Assembly Format</span></span>|<span data-ttu-id="5d800-3898">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3898">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3899">9F</span><span class="sxs-lookup"><span data-stu-id="5d800-3899">9F</span></span>|<span data-ttu-id="5d800-3900">стелем. i8</span><span class="sxs-lookup"><span data-stu-id="5d800-3900">stelem.i8</span></span>|<span data-ttu-id="5d800-3901">Заменяет элемент массива с заданным индексом на значение `int64` в стеке.</span><span class="sxs-lookup"><span data-stu-id="5d800-3901">Replaces an array element at the supplied index with the `int64` value on the stack.</span></span>|  
  
 <span data-ttu-id="5d800-3902">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3902">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3903">Ссылка на объект Array, `array`, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3903">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-3904">Допустимый индекс элемента в `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3904">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-3905">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3905">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="5d800-3906">Значение, индекс и ссылка на массив извлекаются из стека; значение помещается в элемент массива по заданному индексу.</span><span class="sxs-lookup"><span data-stu-id="5d800-3906">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="5d800-3907">Инструкция `stelem.i8` заменяет значение элемента `index` в одномерным массиве `array` на значение `int64`, помещаемое в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3907">The `stelem.i8` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int64` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3908">Массивы являются объектами и поэтому представлены значением типа `O`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3908">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="5d800-3909">Индекс имеет тип `native int`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3909">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="5d800-3910"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="5d800-3910"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5d800-3911"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательный или больше, чем граница `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3911"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5d800-3912"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="5d800-3912"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5d800-3913">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `stelem.i8`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3913">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i8` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3914">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3914">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3915">Заменяет элемент массива с заданным индексом на значение <see langword="float32" />, находящееся в стеке вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-3915">Replaces the array element at a given index with the <see langword="float32" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3916">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3916">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3917">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3917">Format</span></span>|<span data-ttu-id="5d800-3918">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3918">Assembly Format</span></span>|<span data-ttu-id="5d800-3919">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3919">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3920">A0</span><span class="sxs-lookup"><span data-stu-id="5d800-3920">A0</span></span>|<span data-ttu-id="5d800-3921">стелем. R4</span><span class="sxs-lookup"><span data-stu-id="5d800-3921">stelem.r4</span></span>|<span data-ttu-id="5d800-3922">Заменяет элемент массива с заданным индексом на значение `float32` в стеке.</span><span class="sxs-lookup"><span data-stu-id="5d800-3922">Replaces an array element at the supplied index with the `float32` value on the stack.</span></span>|  
  
 <span data-ttu-id="5d800-3923">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3923">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3924">Ссылка на объект Array, `array`, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3924">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-3925">Допустимый индекс элемента в `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3925">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-3926">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3926">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="5d800-3927">Значение, индекс и ссылка на массив извлекаются из стека; значение помещается в элемент массива по заданному индексу.</span><span class="sxs-lookup"><span data-stu-id="5d800-3927">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="5d800-3928">Инструкция `stelem.r4` заменяет значение элемента `index` в одномерным массиве `array` на значение `float32`, помещаемое в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3928">The `stelem.r4` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `float32` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3929">Массивы являются объектами и поэтому представлены значением типа `O`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3929">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="5d800-3930">Индекс имеет тип `native int`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3930">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="5d800-3931"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="5d800-3931"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5d800-3932"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательный или больше, чем граница `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3932"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5d800-3933"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="5d800-3933"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5d800-3934">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `stelem.r4`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3934">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.r4` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3935">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3935">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3936">Заменяет элемент массива с заданным индексом на значение <see langword="float64" />, находящееся в стеке вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-3936">Replaces the array element at a given index with the <see langword="float64" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3937">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3937">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3938">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3938">Format</span></span>|<span data-ttu-id="5d800-3939">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3939">Assembly Format</span></span>|<span data-ttu-id="5d800-3940">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3940">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3941">A1</span><span class="sxs-lookup"><span data-stu-id="5d800-3941">A1</span></span>|<span data-ttu-id="5d800-3942">стелем. R8</span><span class="sxs-lookup"><span data-stu-id="5d800-3942">stelem.r8</span></span>|<span data-ttu-id="5d800-3943">Заменяет элемент массива с заданным индексом на значение `float64` в стеке.</span><span class="sxs-lookup"><span data-stu-id="5d800-3943">Replaces an array element at the supplied index with the `float64` value on the stack.</span></span>|  
  
 <span data-ttu-id="5d800-3944">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3944">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3945">Ссылка на объект Array, `array`, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3945">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-3946">Допустимый индекс элемента в `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3946">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-3947">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3947">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="5d800-3948">Значение, индекс и ссылка на массив извлекаются из стека; значение помещается в элемент массива по заданному индексу.</span><span class="sxs-lookup"><span data-stu-id="5d800-3948">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="5d800-3949">Инструкция `stelem.r8` заменяет значение элемента `index` в одномерным массиве `array` на значение `float64`, помещаемое в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3949">The `stelem.r8` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `float64` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3950">Массивы являются объектами и поэтому представлены значением типа `O`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3950">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="5d800-3951">Индекс имеет тип `native int`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3951">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="5d800-3952"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="5d800-3952"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5d800-3953"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательный или больше, чем граница `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3953"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5d800-3954"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="5d800-3954"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5d800-3955">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `stelem.r8`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3955">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.r8` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3956">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3956">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3957">Заменяет элемент массива с заданным индексом на значение object ref (тип <see langword="O" />), находящееся в стеке вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-3957">Replaces the array element at a given index with the object ref value (type <see langword="O" />) on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3958">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3958">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3959">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3959">Format</span></span>|<span data-ttu-id="5d800-3960">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3960">Assembly Format</span></span>|<span data-ttu-id="5d800-3961">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3961">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3962">A2</span><span class="sxs-lookup"><span data-stu-id="5d800-3962">A2</span></span>|<span data-ttu-id="5d800-3963">стелем. ref</span><span class="sxs-lookup"><span data-stu-id="5d800-3963">stelem.ref</span></span>|<span data-ttu-id="5d800-3964">Заменяет элемент массива с заданным индексом на значение `ref` (тип `O`) в стеке.</span><span class="sxs-lookup"><span data-stu-id="5d800-3964">Replaces an array element at the supplied index with the `ref` value (type `O`) on the stack.</span></span>|  
  
 <span data-ttu-id="5d800-3965">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3965">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3966">Ссылка на объект Array, `array`, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3966">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-3967">Допустимый индекс элемента в `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3967">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-3968">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3968">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="5d800-3969">Значение, индекс и ссылка на массив извлекаются из стека; значение помещается в элемент массива по заданному индексу.</span><span class="sxs-lookup"><span data-stu-id="5d800-3969">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="5d800-3970">Инструкция `stelem.ref` заменяет значение элемента по указанному индексу в одномерном массиве `array` на значение `ref` (тип `O`), помещаемое в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3970">The `stelem.ref` instruction replaces the value of the element at the supplied index in the one-dimensional array `array` with the `ref` (type `O`) value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-3971">Массивы являются объектами и поэтому представлены значением типа `O`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3971">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="5d800-3972">Индекс имеет тип `native int`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3972">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="5d800-3973">Обратите внимание, что `stelem.ref` неявно приводит заданное значение к типу элемента `array` перед присваиванием значения элементу массива.</span><span class="sxs-lookup"><span data-stu-id="5d800-3973">Note that `stelem.ref` implicitly casts the supplied value to the element type of `array` before assigning the value to the array element.</span></span> <span data-ttu-id="5d800-3974">Это приведение может завершиться ошибкой даже для проверенного кода.</span><span class="sxs-lookup"><span data-stu-id="5d800-3974">This cast can fail, even for verified code.</span></span> <span data-ttu-id="5d800-3975">Поэтому инструкция `stelem.ref` может вызвать <xref:System.InvalidCastException>.</span><span class="sxs-lookup"><span data-stu-id="5d800-3975">Thus the `stelem.ref` instruction can throw <xref:System.InvalidCastException>.</span></span> <span data-ttu-id="5d800-3976">Для одномерных массивов без индексации от нуля и для многомерных массивов класс <xref:System.Array> предоставляет метод <xref:System.Array.SetValue%2A>.</span><span class="sxs-lookup"><span data-stu-id="5d800-3976">For one-dimensional arrays that aren't zero-based and for multidimensional arrays, the <xref:System.Array> class provides a <xref:System.Array.SetValue%2A> method.</span></span>  
  
 <span data-ttu-id="5d800-3977"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="5d800-3977"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="5d800-3978"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательный или больше, чем граница `array`.</span><span class="sxs-lookup"><span data-stu-id="5d800-3978"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="5d800-3979"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="5d800-3979"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="5d800-3980">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `stelem.ref`:</span><span class="sxs-lookup"><span data-stu-id="5d800-3980">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.ref` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-3981">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-3981">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-3982">Заменяет значение в поле объекта, по ссылке на объект или указателю, на новое значение.</span><span class="sxs-lookup"><span data-stu-id="5d800-3982">Replaces the value stored in the field of an object reference or pointer with a new value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-3983">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-3983">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-3984">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-3984">Format</span></span>|<span data-ttu-id="5d800-3985">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-3985">Assembly Format</span></span>|<span data-ttu-id="5d800-3986">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-3986">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-3987">7D < `T` ></span><span class="sxs-lookup"><span data-stu-id="5d800-3987">7D < `T` ></span></span>|<span data-ttu-id="5d800-3988">stfld `field`</span><span class="sxs-lookup"><span data-stu-id="5d800-3988">stfld `field`</span></span>|<span data-ttu-id="5d800-3989">Заменяет значение `field` объекта на новое значение.</span><span class="sxs-lookup"><span data-stu-id="5d800-3989">Replaces the value of `field` of the object with a new value.</span></span>|  
  
 <span data-ttu-id="5d800-3990">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-3990">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-3991">Ссылка на объект или указатель помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3991">An object reference or pointer is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-3992">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-3992">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-3993">Значение и ссылка на объект (указатель) извлекаются из стека; значение `field` в объекте заменяется на заданное значение.</span><span class="sxs-lookup"><span data-stu-id="5d800-3993">The value and the object reference/pointer are popped from the stack; the value of `field` in the object is replaced with the supplied value.</span></span>  
  
 <span data-ttu-id="5d800-3994">Инструкция `stfld` заменяет значение поля объекта (тип `O`) или через указатель (тип `native int`, `&` или `*`) с заданным значением.</span><span class="sxs-lookup"><span data-stu-id="5d800-3994">The `stfld` instruction replaces the value of a field of an object (type `O`) or via a pointer (type `native int`, `&`, or `*`) with a given value.</span></span> <span data-ttu-id="5d800-3995">`Field` — это маркер метаданных, который ссылается на ссылку на поле.</span><span class="sxs-lookup"><span data-stu-id="5d800-3995">`Field` is a metadata token that refers to a field member reference.</span></span> <span data-ttu-id="5d800-3996">Инструкция `stfld` может иметь префикс либо для <xref:System.Reflection.Emit.OpCodes.Unaligned>, и для <xref:System.Reflection.Emit.OpCodes.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="5d800-3996">The `stfld` instruction can have a prefix of either or both of <xref:System.Reflection.Emit.OpCodes.Unaligned> and <xref:System.Reflection.Emit.OpCodes.Volatile>.</span></span>  
  
 <span data-ttu-id="5d800-3997"><xref:System.NullReferenceException> создается, если ссылка на объект или указатель является пустой ссылкой, а поле не является статическим.</span><span class="sxs-lookup"><span data-stu-id="5d800-3997"><xref:System.NullReferenceException> is thrown if the object reference or pointer is a null reference and the field isn't static.</span></span>  
  
 <span data-ttu-id="5d800-3998"><xref:System.MissingFieldException> возникает, если `field` не найден в метаданных.</span><span class="sxs-lookup"><span data-stu-id="5d800-3998"><xref:System.MissingFieldException> is thrown if `field` is not found in the metadata.</span></span> <span data-ttu-id="5d800-3999">Обычно это проверяется при преобразовании инструкции MSIL в машинный код, а не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-3999">This is typically checked when the Microsoft Intermediate Language (MSIL) instruction is converted to native code, not at runtime.</span></span>  
  
 <span data-ttu-id="5d800-4000">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `stfld`:</span><span class="sxs-lookup"><span data-stu-id="5d800-4000">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stfld` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-4001">ILGenerator. Emit (код операции, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="5d800-4001">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-4002">Сохраняет значение с типом <see langword="native int" /> по указанному адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-4002">Stores a value of type <see langword="native int" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-4003">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-4003">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-4004">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-4004">Format</span></span>|<span data-ttu-id="5d800-4005">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-4005">Assembly Format</span></span>|<span data-ttu-id="5d800-4006">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-4006">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-4007">DF</span><span class="sxs-lookup"><span data-stu-id="5d800-4007">DF</span></span>|<span data-ttu-id="5d800-4008">stind. i</span><span class="sxs-lookup"><span data-stu-id="5d800-4008">stind.i</span></span>|<span data-ttu-id="5d800-4009">Сохраняет значение `native int` по указанному адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-4009">Stores a `native int` value at a given address.</span></span>|  
  
 <span data-ttu-id="5d800-4010">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-4010">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-4011">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4011">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-4012">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4012">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-4013">Значение и адрес извлекаются из стека; значение хранится по адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-4013">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="5d800-4014">Инструкция `stind.i` сохраняет значение `native int` по указанному адресу (тип `native int`, `*` или `&`).</span><span class="sxs-lookup"><span data-stu-id="5d800-4014">The `stind.i` instruction stores a `native int` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="5d800-4015">Для операции с типом "безопасно" требуется, чтобы инструкция `stind.i` соответствовала типу указателя.</span><span class="sxs-lookup"><span data-stu-id="5d800-4015">Type safe operation requires that the `stind.i` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="5d800-4016">Операция `stind.i` может быть изменена непосредственно перед инструкциями префикса <xref:System.Reflection.Emit.OpCodes.Volatile> или <xref:System.Reflection.Emit.OpCodes.Unaligned>.</span><span class="sxs-lookup"><span data-stu-id="5d800-4016">The operation of the `stind.i` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="5d800-4017"><xref:System.NullReferenceException> возникает, если `addr` не согласуется естественным образом с типом аргумента, подразумеваемым суффиксом инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-4017"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="5d800-4018">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `stind.i`:</span><span class="sxs-lookup"><span data-stu-id="5d800-4018">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-4019">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-4019">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-4020">Сохраняет значение с типом <see langword="int8" /> по указанному адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-4020">Stores a value of type <see langword="int8" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-4021">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-4021">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-4022">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-4022">Format</span></span>|<span data-ttu-id="5d800-4023">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-4023">Assembly Format</span></span>|<span data-ttu-id="5d800-4024">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-4024">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-4025">52</span><span class="sxs-lookup"><span data-stu-id="5d800-4025">52</span></span>|<span data-ttu-id="5d800-4026">stind. i1</span><span class="sxs-lookup"><span data-stu-id="5d800-4026">stind.i1</span></span>|<span data-ttu-id="5d800-4027">Сохраняет значение `int8` по заданному адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-4027">Stores an `int8` value at a given address.</span></span>|  
  
 <span data-ttu-id="5d800-4028">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-4028">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-4029">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4029">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-4030">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4030">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-4031">Значение и адрес извлекаются из стека; значение хранится по адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-4031">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="5d800-4032">Инструкция `stind.i1` сохраняет значение `int8` по указанному адресу (тип `native int`, `*` или `&`).</span><span class="sxs-lookup"><span data-stu-id="5d800-4032">The `stind.i1` instruction stores an `int8` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="5d800-4033">Для операции с типом "безопасно" требуется, чтобы инструкция `stind.i1` соответствовала типу указателя.</span><span class="sxs-lookup"><span data-stu-id="5d800-4033">Type safe operation requires that the `stind.i1` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="5d800-4034">Операция `stind.i1` может быть изменена непосредственно перед инструкциями префикса <xref:System.Reflection.Emit.OpCodes.Volatile> или <xref:System.Reflection.Emit.OpCodes.Unaligned>.</span><span class="sxs-lookup"><span data-stu-id="5d800-4034">The operation of the `stind.i1` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="5d800-4035"><xref:System.NullReferenceException> возникает, если `addr` не согласуется естественным образом с типом аргумента, подразумеваемым суффиксом инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-4035"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="5d800-4036">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `stind.i1`:</span><span class="sxs-lookup"><span data-stu-id="5d800-4036">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i1` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-4037">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-4037">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-4038">Сохраняет значение с типом <see langword="int16" /> по указанному адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-4038">Stores a value of type <see langword="int16" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-4039">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-4039">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-4040">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-4040">Format</span></span>|<span data-ttu-id="5d800-4041">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-4041">Assembly Format</span></span>|<span data-ttu-id="5d800-4042">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-4042">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-4043">53</span><span class="sxs-lookup"><span data-stu-id="5d800-4043">53</span></span>|<span data-ttu-id="5d800-4044">stind. i2</span><span class="sxs-lookup"><span data-stu-id="5d800-4044">stind.i2</span></span>|<span data-ttu-id="5d800-4045">Сохраняет значение `int16` по заданному адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-4045">Stores an `int16` value at a given address.</span></span>|  
  
 <span data-ttu-id="5d800-4046">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-4046">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-4047">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4047">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-4048">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4048">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-4049">Значение и адрес извлекаются из стека; значение хранится по адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-4049">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="5d800-4050">Инструкция `stind.i2` сохраняет значение `int16` по указанному адресу (тип `native int`, `*` или `&`).</span><span class="sxs-lookup"><span data-stu-id="5d800-4050">The `stind.i2` instruction stores an `int16` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="5d800-4051">Для операции с типом "безопасно" требуется, чтобы инструкция `stind.2i` соответствовала типу указателя.</span><span class="sxs-lookup"><span data-stu-id="5d800-4051">Type safe operation requires that the `stind.2i` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="5d800-4052">Операция `stind.i2` может быть изменена непосредственно перед инструкциями префикса <xref:System.Reflection.Emit.OpCodes.Volatile> или <xref:System.Reflection.Emit.OpCodes.Unaligned>.</span><span class="sxs-lookup"><span data-stu-id="5d800-4052">The operation of the `stind.i2` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="5d800-4053"><xref:System.NullReferenceException> возникает, если `addr` не согласуется естественным образом с типом аргумента, подразумеваемым суффиксом инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-4053"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="5d800-4054">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `stind.i2`:</span><span class="sxs-lookup"><span data-stu-id="5d800-4054">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i2` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-4055">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-4055">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-4056">Сохраняет значение с типом <see langword="int32" /> по указанному адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-4056">Stores a value of type <see langword="int32" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-4057">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-4057">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-4058">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-4058">Format</span></span>|<span data-ttu-id="5d800-4059">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-4059">Assembly Format</span></span>|<span data-ttu-id="5d800-4060">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-4060">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-4061">54</span><span class="sxs-lookup"><span data-stu-id="5d800-4061">54</span></span>|<span data-ttu-id="5d800-4062">stind. i4</span><span class="sxs-lookup"><span data-stu-id="5d800-4062">stind.i4</span></span>|<span data-ttu-id="5d800-4063">Сохраняет значение `int32` по заданному адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-4063">Stores an `int32` value at a given address.</span></span>|  
  
 <span data-ttu-id="5d800-4064">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-4064">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-4065">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4065">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-4066">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4066">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-4067">Значение и адрес извлекаются из стека; значение хранится по адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-4067">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="5d800-4068">Инструкция `stind.i4` сохраняет значение `int32` по указанному адресу (тип `native int`, `*` или `&`).</span><span class="sxs-lookup"><span data-stu-id="5d800-4068">The `stind.i4` instruction stores an `int32` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="5d800-4069">Для операции с типом "безопасно" требуется, чтобы инструкция `stind.i4` соответствовала типу указателя.</span><span class="sxs-lookup"><span data-stu-id="5d800-4069">Type safe operation requires that the `stind.i4` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="5d800-4070">Операция `stind.i4` может быть изменена непосредственно перед инструкциями префикса <xref:System.Reflection.Emit.OpCodes.Volatile> или <xref:System.Reflection.Emit.OpCodes.Unaligned>.</span><span class="sxs-lookup"><span data-stu-id="5d800-4070">The operation of the `stind.i4` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="5d800-4071"><xref:System.NullReferenceException> возникает, если `addr` не согласуется естественным образом с типом аргумента, подразумеваемым суффиксом инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-4071"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="5d800-4072">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `stind.i4`:</span><span class="sxs-lookup"><span data-stu-id="5d800-4072">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i4` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-4073">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-4073">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-4074">Сохраняет значение с типом <see langword="int64" /> по указанному адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-4074">Stores a value of type <see langword="int64" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-4075">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-4075">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-4076">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-4076">Format</span></span>|<span data-ttu-id="5d800-4077">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-4077">Assembly Format</span></span>|<span data-ttu-id="5d800-4078">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-4078">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-4079">55</span><span class="sxs-lookup"><span data-stu-id="5d800-4079">55</span></span>|<span data-ttu-id="5d800-4080">stind. i8</span><span class="sxs-lookup"><span data-stu-id="5d800-4080">stind.i8</span></span>|<span data-ttu-id="5d800-4081">Сохраняет значение `int64` по заданному адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-4081">Stores an `int64` value at a given address.</span></span>|  
  
 <span data-ttu-id="5d800-4082">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-4082">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-4083">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4083">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-4084">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4084">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-4085">Значение и адрес извлекаются из стека; значение хранится по адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-4085">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="5d800-4086">Инструкция `stind.i8` сохраняет значение `int64` по указанному адресу (тип `native int`, `*` или `&`).</span><span class="sxs-lookup"><span data-stu-id="5d800-4086">The `stind.i8` instruction stores an `int64` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="5d800-4087">Для операции с типом "безопасно" требуется, чтобы инструкция `stind.i8` соответствовала типу указателя.</span><span class="sxs-lookup"><span data-stu-id="5d800-4087">Type safe operation requires that the `stind.i8` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="5d800-4088">Операция `stind.i` может быть изменена непосредственно перед инструкциями префикса <xref:System.Reflection.Emit.OpCodes.Volatile> или <xref:System.Reflection.Emit.OpCodes.Unaligned>.</span><span class="sxs-lookup"><span data-stu-id="5d800-4088">The operation of the `stind.i` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="5d800-4089"><xref:System.NullReferenceException> возникает, если `addr` не согласуется естественным образом с типом аргумента, подразумеваемым суффиксом инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-4089"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="5d800-4090">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `stind.i8`:</span><span class="sxs-lookup"><span data-stu-id="5d800-4090">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i8` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-4091">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-4091">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-4092">Сохраняет значение с типом <see langword="float32" /> по указанному адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-4092">Stores a value of type <see langword="float32" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-4093">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-4093">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-4094">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-4094">Format</span></span>|<span data-ttu-id="5d800-4095">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-4095">Assembly Format</span></span>|<span data-ttu-id="5d800-4096">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-4096">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-4097">56</span><span class="sxs-lookup"><span data-stu-id="5d800-4097">56</span></span>|<span data-ttu-id="5d800-4098">stind. R4</span><span class="sxs-lookup"><span data-stu-id="5d800-4098">stind.r4</span></span>|<span data-ttu-id="5d800-4099">Сохраняет значение `float32` по указанному адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-4099">Stores a `float32` value at a given address.</span></span>|  
  
 <span data-ttu-id="5d800-4100">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-4100">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-4101">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4101">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-4102">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4102">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-4103">Значение и адрес извлекаются из стека; значение хранится по адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-4103">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="5d800-4104">Инструкция `stind.r4` сохраняет значение `float32` по указанному адресу (тип `native int`, `*` или `&`).</span><span class="sxs-lookup"><span data-stu-id="5d800-4104">The `stind.r4` instruction stores a `float32` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="5d800-4105">Для операции с типом "безопасно" требуется, чтобы инструкция `stind.r4` соответствовала типу указателя.</span><span class="sxs-lookup"><span data-stu-id="5d800-4105">Type safe operation requires that the `stind.r4` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="5d800-4106">Операция `stind.r4` может быть изменена непосредственно перед инструкциями префикса <xref:System.Reflection.Emit.OpCodes.Volatile> или <xref:System.Reflection.Emit.OpCodes.Unaligned>.</span><span class="sxs-lookup"><span data-stu-id="5d800-4106">The operation of the `stind.r4` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="5d800-4107"><xref:System.NullReferenceException> возникает, если `addr` не согласуется естественным образом с типом аргумента, подразумеваемым суффиксом инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-4107"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="5d800-4108">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `stind.r4`:</span><span class="sxs-lookup"><span data-stu-id="5d800-4108">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.r4` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-4109">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-4109">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-4110">Сохраняет значение с типом <see langword="float64" /> по указанному адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-4110">Stores a value of type <see langword="float64" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-4111">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-4111">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-4112">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-4112">Format</span></span>|<span data-ttu-id="5d800-4113">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-4113">Assembly Format</span></span>|<span data-ttu-id="5d800-4114">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-4114">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-4115">57</span><span class="sxs-lookup"><span data-stu-id="5d800-4115">57</span></span>|<span data-ttu-id="5d800-4116">stind. R8</span><span class="sxs-lookup"><span data-stu-id="5d800-4116">stind.r8</span></span>|<span data-ttu-id="5d800-4117">Сохраняет значение `float64` по указанному адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-4117">Stores a `float64` value at a given address.</span></span>|  
  
 <span data-ttu-id="5d800-4118">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-4118">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-4119">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4119">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-4120">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4120">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-4121">Значение и адрес извлекаются из стека; значение хранится по адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-4121">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="5d800-4122">Инструкция `stind.r8` сохраняет значение `float64` по указанному адресу (тип `native int`, `*` или `&`).</span><span class="sxs-lookup"><span data-stu-id="5d800-4122">The `stind.r8` instruction stores a `float64` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="5d800-4123">Для операции с типом "безопасно" требуется, чтобы инструкция `stind.r8` соответствовала типу указателя.</span><span class="sxs-lookup"><span data-stu-id="5d800-4123">Type safe operation requires that the `stind.r8` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="5d800-4124">Операция `stind.r8` может быть изменена непосредственно перед инструкциями префикса <xref:System.Reflection.Emit.OpCodes.Volatile> или <xref:System.Reflection.Emit.OpCodes.Unaligned>.</span><span class="sxs-lookup"><span data-stu-id="5d800-4124">The operation of the `stind.r8` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="5d800-4125"><xref:System.NullReferenceException> возникает, если `addr` не согласуется естественным образом с типом аргумента, подразумеваемым суффиксом инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-4125"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="5d800-4126">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `stind.r8`:</span><span class="sxs-lookup"><span data-stu-id="5d800-4126">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.r8` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-4127">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-4127">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-4128">Сохраняет значение ссылки на объект по указанному адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-4128">Stores a object reference value at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-4129">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-4129">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-4130">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-4130">Format</span></span>|<span data-ttu-id="5d800-4131">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-4131">Assembly Format</span></span>|<span data-ttu-id="5d800-4132">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-4132">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-4133">51</span><span class="sxs-lookup"><span data-stu-id="5d800-4133">51</span></span>|<span data-ttu-id="5d800-4134">stind. ref</span><span class="sxs-lookup"><span data-stu-id="5d800-4134">stind.ref</span></span>|<span data-ttu-id="5d800-4135">Сохраняет ссылку на объект (тип `O`) по указанному адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-4135">Stores an object reference (type `O`) value at a given address.</span></span>|  
  
 <span data-ttu-id="5d800-4136">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-4136">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-4137">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4137">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-4138">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4138">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-4139">Значение и адрес извлекаются из стека; значение хранится по адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-4139">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="5d800-4140">Инструкция `stind.ref` сохраняет значение ссылки на объект по указанному адресу (тип `native int`, `*` или `&`).</span><span class="sxs-lookup"><span data-stu-id="5d800-4140">The `stind.ref` instruction stores an object reference value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="5d800-4141">Для операции с типом "безопасно" требуется, чтобы инструкция `stind.ref` соответствовала типу указателя.</span><span class="sxs-lookup"><span data-stu-id="5d800-4141">Type safe operation requires that the `stind.ref` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="5d800-4142">Операция `stind.ref` может быть изменена непосредственно перед инструкциями префикса <xref:System.Reflection.Emit.OpCodes.Volatile> или <xref:System.Reflection.Emit.OpCodes.Unaligned>.</span><span class="sxs-lookup"><span data-stu-id="5d800-4142">The operation of the `stind.ref` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="5d800-4143"><xref:System.NullReferenceException> возникает, если `addr` не согласуется естественным образом с типом аргумента, подразумеваемым суффиксом инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-4143"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="5d800-4144">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `stind.ref`:</span><span class="sxs-lookup"><span data-stu-id="5d800-4144">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.ref` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-4145">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-4145">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-4146">Извлекает верхнее значение в стеке вычислений и сохраняет его в списке локальных переменных с заданным индексом.</span><span class="sxs-lookup"><span data-stu-id="5d800-4146">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at a specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-4147">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-4147">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-4148">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-4148">Format</span></span>|<span data-ttu-id="5d800-4149">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-4149">Assembly Format</span></span>|<span data-ttu-id="5d800-4150">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-4150">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-4151">FE 0E < `unsigned int16` @ NO__T-1</span><span class="sxs-lookup"><span data-stu-id="5d800-4151">FE 0E < `unsigned int16` ></span></span>|<span data-ttu-id="5d800-4152">требовалась stloc `index`</span><span class="sxs-lookup"><span data-stu-id="5d800-4152">stloc `index`</span></span>|<span data-ttu-id="5d800-4153">Извлекает значение из стека и сохраняет его в локальной переменной `index`.</span><span class="sxs-lookup"><span data-stu-id="5d800-4153">Pops a value from the stack and stores it in local variable `index`.</span></span>|  
  
 <span data-ttu-id="5d800-4154">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-4154">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-4155">Значение извлекается из стека и помещается в локальную переменную `index`.</span><span class="sxs-lookup"><span data-stu-id="5d800-4155">A value is popped off of the stack and placed in local variable `index`.</span></span>  
  
 <span data-ttu-id="5d800-4156">Инструкция `stloc` выводит верхнее значение из стека вычислений и перемещает его в локальную переменную с номером `index`, где локальные переменные нумеруются 0 – назад.</span><span class="sxs-lookup"><span data-stu-id="5d800-4156">The `stloc` instruction pops the top value off the evaluation stack and moves it into local variable number `index`, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="5d800-4157">Тип значения должен соответствовать типу локальной переменной, как указано в локальной сигнатуре текущего метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-4157">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="5d800-4158">При хранении в локальных переменных, содержащих целочисленное значение менее 4 байт, происходит усечение значения при перемещении из стека в локальную переменную.</span><span class="sxs-lookup"><span data-stu-id="5d800-4158">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="5d800-4159">Значения с плавающей запятой округляются от их собственного размера (тип `F`) до размера, связанного с аргументом.</span><span class="sxs-lookup"><span data-stu-id="5d800-4159">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="5d800-4160">Для правильных инструкций промежуточного языка MSIL требуется, чтобы `index` был допустимым локальным индексом.</span><span class="sxs-lookup"><span data-stu-id="5d800-4160">Correct Microsoft Intermediate Language (MSIL) instructions require that `index` be a valid local index.</span></span> <span data-ttu-id="5d800-4161">Для инструкции `stloc` `index` должно находиться в диапазоне от 0 до 65534 включительно (в частности, 65535 является недопустимым).</span><span class="sxs-lookup"><span data-stu-id="5d800-4161">For the `stloc` instruction, `index` must lie in the range 0 to 65534 inclusive (specifically, 65535 is not valid).</span></span> <span data-ttu-id="5d800-4162">Исключение 65535 является практичным: вероятные реализации будут использовать 2-байтовое целое число для трассировки как индекса локальной версии, так и общего числа локальных переменных для данного метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-4162">The reason for excluding 65535 is pragmatic: likely implementations will use a 2-byte integer to track both a local's index, as well as the total number of locals for a given method.</span></span> <span data-ttu-id="5d800-4163">Если индекс 65535 был сделан допустимым, для записи числа локальных переменных в таком методе потребуется более широкое целое число.</span><span class="sxs-lookup"><span data-stu-id="5d800-4163">If an index of 65535 had been made valid, it would require a wider integer to track the number of locals in such a method.</span></span>  
  
 <span data-ttu-id="5d800-4164">Следующие перегрузки метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> могут использовать код операции `stloc`:</span><span class="sxs-lookup"><span data-stu-id="5d800-4164">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `stloc` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-4165">ILGenerator. Emit (код операции, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="5d800-4165">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="5d800-4166">ILGenerator. Emit (код операции, короткий)</span><span class="sxs-lookup"><span data-stu-id="5d800-4166">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-4167">Извлекает верхнее значение в стеке вычислений и сохраняет его в списке локальных переменных с индексом 0.</span><span class="sxs-lookup"><span data-stu-id="5d800-4167">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 0.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-4168">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-4168">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-4169">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-4169">Format</span></span>|<span data-ttu-id="5d800-4170">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-4170">Assembly Format</span></span>|<span data-ttu-id="5d800-4171">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-4171">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-4172">0A</span><span class="sxs-lookup"><span data-stu-id="5d800-4172">0A</span></span>|<span data-ttu-id="5d800-4173">требовалась stloc. 0</span><span class="sxs-lookup"><span data-stu-id="5d800-4173">stloc.0</span></span>|<span data-ttu-id="5d800-4174">Извлекает значение из стека в локальную переменную 0.</span><span class="sxs-lookup"><span data-stu-id="5d800-4174">Pops a value from the stack into local variable 0.</span></span>|  
  
 <span data-ttu-id="5d800-4175">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-4175">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-4176">Значение извлекается из стека и помещается в локальную переменную с индексом 0.</span><span class="sxs-lookup"><span data-stu-id="5d800-4176">A value is popped off of the stack and placed in the local variable indexed by 0.</span></span>  
  
 <span data-ttu-id="5d800-4177">Инструкция `stloc.0` извлекает верхнее значение из стека вычислений и перемещает его в локальную переменную с индексом 0.</span><span class="sxs-lookup"><span data-stu-id="5d800-4177">The `stloc.0` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 0.</span></span> <span data-ttu-id="5d800-4178">Тип значения должен соответствовать типу локальной переменной, как указано в локальной сигнатуре текущего метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-4178">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="5d800-4179">`stloc.0` является особенно эффективным кодированием для хранения значений в локальной переменной 0.</span><span class="sxs-lookup"><span data-stu-id="5d800-4179">`stloc.0` is an especially efficient encoding for storing values in local variable 0.</span></span>  
  
 <span data-ttu-id="5d800-4180">При хранении в локальных переменных, содержащих целочисленное значение менее 4 байт, происходит усечение значения при перемещении из стека в локальную переменную.</span><span class="sxs-lookup"><span data-stu-id="5d800-4180">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="5d800-4181">Значения с плавающей запятой округляются от их собственного размера (тип `F`) до размера, связанного с аргументом.</span><span class="sxs-lookup"><span data-stu-id="5d800-4181">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="5d800-4182">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `stloc.0`:</span><span class="sxs-lookup"><span data-stu-id="5d800-4182">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.0` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-4183">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-4183">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-4184">Извлекает верхнее значение из стека вычислений и сохраняет его в списке локальных переменных с индексом 1.</span><span class="sxs-lookup"><span data-stu-id="5d800-4184">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 1.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-4185">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-4185">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-4186">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-4186">Format</span></span>|<span data-ttu-id="5d800-4187">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-4187">Assembly Format</span></span>|<span data-ttu-id="5d800-4188">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-4188">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-4189">0B</span><span class="sxs-lookup"><span data-stu-id="5d800-4189">0B</span></span>|<span data-ttu-id="5d800-4190">требовалась stloc. 1</span><span class="sxs-lookup"><span data-stu-id="5d800-4190">stloc.1</span></span>|<span data-ttu-id="5d800-4191">Извлекает значение из стека в локальную переменную 1.</span><span class="sxs-lookup"><span data-stu-id="5d800-4191">Pops a value from the stack into local variable 1.</span></span>|  
  
 <span data-ttu-id="5d800-4192">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-4192">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-4193">Значение извлекается из стека и помещается в локальную переменную с индексом 1.</span><span class="sxs-lookup"><span data-stu-id="5d800-4193">A value is popped off of the stack and placed in the local variable indexed by 1.</span></span>  
  
 <span data-ttu-id="5d800-4194">Инструкция `stloc.1` извлекает верхнее значение из стека вычислений и перемещает его в локальную переменную с индексом 1.</span><span class="sxs-lookup"><span data-stu-id="5d800-4194">The `stloc.1` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 1.</span></span> <span data-ttu-id="5d800-4195">Тип значения должен соответствовать типу локальной переменной, как указано в локальной сигнатуре текущего метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-4195">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="5d800-4196">`stloc.1` является особенно эффективным кодированием для хранения значений в локальной переменной 1.</span><span class="sxs-lookup"><span data-stu-id="5d800-4196">`stloc.1` is an especially efficient encoding for storing values in local variable 1.</span></span>  
  
 <span data-ttu-id="5d800-4197">При хранении в локальных переменных, содержащих целочисленное значение менее 4 байт, происходит усечение значения при перемещении из стека в локальную переменную.</span><span class="sxs-lookup"><span data-stu-id="5d800-4197">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="5d800-4198">Значения с плавающей запятой округляются от их собственного размера (тип `F`) до размера, связанного с аргументом.</span><span class="sxs-lookup"><span data-stu-id="5d800-4198">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="5d800-4199">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `stloc.1`:</span><span class="sxs-lookup"><span data-stu-id="5d800-4199">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.1` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-4200">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-4200">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-4201">Извлекает верхнее значение из стека вычислений и сохраняет его в списке локальных переменных с индексом 2.</span><span class="sxs-lookup"><span data-stu-id="5d800-4201">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 2.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-4202">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-4202">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-4203">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-4203">Format</span></span>|<span data-ttu-id="5d800-4204">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-4204">Assembly Format</span></span>|<span data-ttu-id="5d800-4205">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-4205">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-4206">0C</span><span class="sxs-lookup"><span data-stu-id="5d800-4206">0C</span></span>|<span data-ttu-id="5d800-4207">требовалась stloc. 2</span><span class="sxs-lookup"><span data-stu-id="5d800-4207">stloc.2</span></span>|<span data-ttu-id="5d800-4208">Извлекает значение из стека в локальную переменную 2</span><span class="sxs-lookup"><span data-stu-id="5d800-4208">Pops a value from the stack into local variable 2</span></span>|  
  
 <span data-ttu-id="5d800-4209">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-4209">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-4210">Значение извлекается из стека и помещается в локальную переменную с индексом 2.</span><span class="sxs-lookup"><span data-stu-id="5d800-4210">A value is popped off of the stack and placed in the local variable indexed by 2.</span></span>  
  
 <span data-ttu-id="5d800-4211">Инструкция `stloc.2` извлекает верхнее значение из стека вычислений и перемещает его в локальную переменную с индексом 2.</span><span class="sxs-lookup"><span data-stu-id="5d800-4211">The `stloc.2` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 2.</span></span> <span data-ttu-id="5d800-4212">Тип значения должен соответствовать типу локальной переменной, как указано в локальной сигнатуре текущего метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-4212">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="5d800-4213">`stloc.2` является особенно эффективным кодированием для хранения значений в локальной переменной 2.</span><span class="sxs-lookup"><span data-stu-id="5d800-4213">`stloc.2` is an especially efficient encoding for storing values in local variable 2.</span></span>  
  
 <span data-ttu-id="5d800-4214">При хранении в локальных переменных, содержащих целочисленное значение менее 4 байт, происходит усечение значения при перемещении из стека в локальную переменную.</span><span class="sxs-lookup"><span data-stu-id="5d800-4214">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="5d800-4215">Значения с плавающей запятой округляются от их собственного размера (тип `F`) до размера, связанного с аргументом.</span><span class="sxs-lookup"><span data-stu-id="5d800-4215">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="5d800-4216">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `stloc.2`:</span><span class="sxs-lookup"><span data-stu-id="5d800-4216">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.2` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-4217">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-4217">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-4218">Извлекает верхнее значение из стека вычислений и сохраняет его в списке локальных переменных с индексом 3.</span><span class="sxs-lookup"><span data-stu-id="5d800-4218">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 3.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-4219">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-4219">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-4220">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-4220">Format</span></span>|<span data-ttu-id="5d800-4221">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-4221">Assembly Format</span></span>|<span data-ttu-id="5d800-4222">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-4222">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-4223">0D</span><span class="sxs-lookup"><span data-stu-id="5d800-4223">0D</span></span>|<span data-ttu-id="5d800-4224">требовалась stloc. 3</span><span class="sxs-lookup"><span data-stu-id="5d800-4224">stloc.3</span></span>|<span data-ttu-id="5d800-4225">Извлекает значение из стека в локальную переменную 3</span><span class="sxs-lookup"><span data-stu-id="5d800-4225">Pops a value from the stack into local variable 3</span></span>|  
  
 <span data-ttu-id="5d800-4226">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-4226">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-4227">Значение извлекается из стека и помещается в локальную переменную с индексом 3.</span><span class="sxs-lookup"><span data-stu-id="5d800-4227">A value is popped off of the stack and placed in the local variable indexed by 3.</span></span>  
  
 <span data-ttu-id="5d800-4228">Инструкция `stloc.3` извлекает верхнее значение из стека вычислений и перемещает его в локальную переменную с индексом 3.</span><span class="sxs-lookup"><span data-stu-id="5d800-4228">The `stloc.3` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 3.</span></span> <span data-ttu-id="5d800-4229">Тип значения должен соответствовать типу локальной переменной, как указано в локальной сигнатуре текущего метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-4229">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="5d800-4230">`stloc.3` является особенно эффективным кодированием для хранения значений в локальной переменной 3.</span><span class="sxs-lookup"><span data-stu-id="5d800-4230">`stloc.3` is an especially efficient encoding for storing values in local variable 3.</span></span>  
  
 <span data-ttu-id="5d800-4231">При хранении в локальных переменных, содержащих целочисленное значение менее 4 байт, происходит усечение значения при перемещении из стека в локальную переменную.</span><span class="sxs-lookup"><span data-stu-id="5d800-4231">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="5d800-4232">Значения с плавающей запятой округляются от их собственного размера (тип `F`) до размера, связанного с аргументом.</span><span class="sxs-lookup"><span data-stu-id="5d800-4232">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="5d800-4233">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `stloc.3`:</span><span class="sxs-lookup"><span data-stu-id="5d800-4233">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.3` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-4234">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-4234">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-4235">Извлекает верхнее значение в стеке вычислений и сохраняет его в списке локальных переменных с индексом <paramref name="index" /> (короткая форма).</span><span class="sxs-lookup"><span data-stu-id="5d800-4235">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at <paramref name="index" /> (short form).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-4236">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-4236">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-4237">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-4237">Format</span></span>|<span data-ttu-id="5d800-4238">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-4238">Assembly Format</span></span>|<span data-ttu-id="5d800-4239">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-4239">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-4240">13 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="5d800-4240">13 < `unsigned int8` ></span></span>|<span data-ttu-id="5d800-4241">требовалась stloc. s `index`</span><span class="sxs-lookup"><span data-stu-id="5d800-4241">stloc.s `index`</span></span>|<span data-ttu-id="5d800-4242">Извлекает значение из стека и сохраняет его в локальной переменной `index` (краткая форма).</span><span class="sxs-lookup"><span data-stu-id="5d800-4242">Pops a value from the stack and stores it in local variable `index`, short form.</span></span>|  
  
 <span data-ttu-id="5d800-4243">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-4243">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-4244">Значение извлекается из стека и помещается в локальную переменную `index`.</span><span class="sxs-lookup"><span data-stu-id="5d800-4244">A value is popped off of the stack and placed in local variable `index`.</span></span>  
  
 <span data-ttu-id="5d800-4245">Инструкция `stloc.s` выводит верхнее значение из стека вычислений и перемещает его в локальную переменную с номером `index`, где локальные переменные нумеруются 0 – назад.</span><span class="sxs-lookup"><span data-stu-id="5d800-4245">The `stloc.s` instruction pops the top value off the evaluation stack and moves it into local variable number `index`, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="5d800-4246">Тип значения должен соответствовать типу локальной переменной, как указано в локальной сигнатуре текущего метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-4246">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="5d800-4247">Инструкция `stloc.s` обеспечивает эффективную кодировку для локальных переменных от 0 до 255.</span><span class="sxs-lookup"><span data-stu-id="5d800-4247">The `stloc.s` instruction provides an efficient encoding for local variables 0 through 255.</span></span>  
  
 <span data-ttu-id="5d800-4248">При хранении в локальных переменных, содержащих целочисленное значение менее 4 байт, происходит усечение значения при перемещении из стека в локальную переменную.</span><span class="sxs-lookup"><span data-stu-id="5d800-4248">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="5d800-4249">Значения с плавающей запятой округляются от их собственного размера (тип `F`) до размера, связанного с аргументом.</span><span class="sxs-lookup"><span data-stu-id="5d800-4249">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="5d800-4250">Следующие перегрузки метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> могут использовать код операции `stloc.s`:</span><span class="sxs-lookup"><span data-stu-id="5d800-4250">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `stloc.s` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-4251">ILGenerator. Emit (код операции, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="5d800-4251">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="5d800-4252">ILGenerator. Emit (код операции, байт)</span><span class="sxs-lookup"><span data-stu-id="5d800-4252">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-4253">Копирует значение с заданным типом из стека вычислений в указанный адрес памяти.</span><span class="sxs-lookup"><span data-stu-id="5d800-4253">Copies a value of a specified type from the evaluation stack into a supplied memory address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-4254">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-4254">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-4255">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-4255">Format</span></span>|<span data-ttu-id="5d800-4256">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-4256">Assembly Format</span></span>|<span data-ttu-id="5d800-4257">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-4257">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-4258">81 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5d800-4258">81 < `T` ></span></span>|<span data-ttu-id="5d800-4259">stobj `class`</span><span class="sxs-lookup"><span data-stu-id="5d800-4259">stobj `class`</span></span>|<span data-ttu-id="5d800-4260">Сохраняет значение типа `class` из стека в память.</span><span class="sxs-lookup"><span data-stu-id="5d800-4260">Stores a value of type `class` from the stack into memory.</span></span>|  
  
 <span data-ttu-id="5d800-4261">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-4261">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-4262">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4262">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-4263">Объект типа значения типа `class` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4263">A value type object of type `class` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-4264">Объект и адрес извлекаются из стека; Объект типа значения хранится по адресу.</span><span class="sxs-lookup"><span data-stu-id="5d800-4264">The object and the address are popped from the stack; the value type object is stored at the address.</span></span>  
  
 <span data-ttu-id="5d800-4265">Инструкция `stobj` копирует объект типа значения в адрес, указанный в адресе (указатель типа `native int`, `*` или `&`).</span><span class="sxs-lookup"><span data-stu-id="5d800-4265">The `stobj` instruction copies the value type object into the address specified by the address (a pointer of type `native int`, `*`, or `&`).</span></span> <span data-ttu-id="5d800-4266">Число копируемых байтов зависит от размера класса, представленного `class`, маркера метаданных, представляющего тип значения.</span><span class="sxs-lookup"><span data-stu-id="5d800-4266">The number of bytes copied depends on the size of the class represented by `class`, a metadata token representing a value type.</span></span>  
  
 <span data-ttu-id="5d800-4267">Операция `stobj` может быть изменена непосредственно перед инструкциями префикса <xref:System.Reflection.Emit.OpCodes.Volatile> или <xref:System.Reflection.Emit.OpCodes.Unaligned>.</span><span class="sxs-lookup"><span data-stu-id="5d800-4267">The operation of the `stobj` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="5d800-4268">Если класс не найден, возникает исключение <xref:System.TypeLoadException>.</span><span class="sxs-lookup"><span data-stu-id="5d800-4268"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="5d800-4269">Обычно это обнаруживается при преобразовании инструкций промежуточного языка MSIL в машинный код, а не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-4269">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at run time.</span></span>  
  
 <span data-ttu-id="5d800-4270">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `stobj`:</span><span class="sxs-lookup"><span data-stu-id="5d800-4270">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stobj` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-4271">ILGenerator. Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="5d800-4271">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stsfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stsfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stsfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stsfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stsfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stsfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stsfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stsfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-4272">Заменяет значение статического поля на значение из стека вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-4272">Replaces the value of a static field with a value from the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-4273">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-4273">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-4274">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-4274">Format</span></span>|<span data-ttu-id="5d800-4275">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-4275">Assembly Format</span></span>|<span data-ttu-id="5d800-4276">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-4276">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-4277">80 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5d800-4277">80 < `T` ></span></span>|<span data-ttu-id="5d800-4278">stsfld `field`</span><span class="sxs-lookup"><span data-stu-id="5d800-4278">stsfld `field`</span></span>|<span data-ttu-id="5d800-4279">Заменяет значение в `field` на заданное значение.</span><span class="sxs-lookup"><span data-stu-id="5d800-4279">Replaces the value in `field` with a supplied value.</span></span>|  
  
 <span data-ttu-id="5d800-4280">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-4280">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-4281">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4281">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-4282">Значение извлекается из стека и сохраняется в `field`.</span><span class="sxs-lookup"><span data-stu-id="5d800-4282">A value is popped from the stack and stored in `field`.</span></span>  
  
 <span data-ttu-id="5d800-4283">Инструкция `stsfld` заменяет значение статического поля значением из стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-4283">The `stsfld` instruction replaces the value of a static field with a value from the stack.</span></span> <span data-ttu-id="5d800-4284">`field` является маркером метаданных, который должен ссылаться на член статического поля.</span><span class="sxs-lookup"><span data-stu-id="5d800-4284">`field` is a metadata token that must refer to a static field member.</span></span>  
  
 <span data-ttu-id="5d800-4285">Инструкция `stsfld` может иметь префикс <xref:System.Reflection.Emit.OpCodes.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="5d800-4285">The `stsfld` instruction may be prefixed by <xref:System.Reflection.Emit.OpCodes.Volatile>.</span></span>  
  
 <span data-ttu-id="5d800-4286">Если поле не найдено в метаданных, возникает исключение <xref:System.MissingFieldException>.</span><span class="sxs-lookup"><span data-stu-id="5d800-4286"><xref:System.MissingFieldException> is thrown if field is not found in the metadata.</span></span> <span data-ttu-id="5d800-4287">Обычно это проверяется при преобразовании инструкций промежуточного языка MSIL в машинный код, а не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-4287">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.</span></span>  
  
 <span data-ttu-id="5d800-4288">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `stsfld`:</span><span class="sxs-lookup"><span data-stu-id="5d800-4288">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stsfld` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-4289">ILGenerator. Emit (код операции, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="5d800-4289">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sub : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sub" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-4290">Вычитает одно значение из другого и помещает результат в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-4290">Subtracts one value from another and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-4291">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-4291">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-4292">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-4292">Format</span></span>|<span data-ttu-id="5d800-4293">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-4293">Assembly Format</span></span>|<span data-ttu-id="5d800-4294">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-4294">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-4295">59</span><span class="sxs-lookup"><span data-stu-id="5d800-4295">59</span></span>|<span data-ttu-id="5d800-4296">sub</span><span class="sxs-lookup"><span data-stu-id="5d800-4296">sub</span></span>|<span data-ttu-id="5d800-4297">Вычитает одно значение из другого, возвращая новое числовое значение.</span><span class="sxs-lookup"><span data-stu-id="5d800-4297">Subtracts one value from another, returning a new numeric value.</span></span>|  
  
 <span data-ttu-id="5d800-4298">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-4298">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-4299">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4299">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-4300">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4300">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-4301">`value2` и `value1` извлекаются из стека; `value2` вычитается из `value1`.</span><span class="sxs-lookup"><span data-stu-id="5d800-4301">`value2` and `value1` are popped from the stack; `value2` is subtracted from `value1`.</span></span>  
  
4.  <span data-ttu-id="5d800-4302">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4302">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-4303">Переполнение не обнаружено для целочисленных операций (для правильной обработки переполнения см. <xref:System.Reflection.Emit.OpCodes.Sub_Ovf>).</span><span class="sxs-lookup"><span data-stu-id="5d800-4303">Overflow is not detected for integer operations (for proper overflow handling, see <xref:System.Reflection.Emit.OpCodes.Sub_Ovf>).</span></span>  
  
 <span data-ttu-id="5d800-4304">Вычитание целых чисел заключается в переносе, а не в насыщенность.</span><span class="sxs-lookup"><span data-stu-id="5d800-4304">Integer subtraction wraps, rather than saturates.</span></span> <span data-ttu-id="5d800-4305">Например, если предположить 8-разрядные целые числа, где `value1` имеет значение 0, а `value2` — 1, то "упакованный" результат будет 255.</span><span class="sxs-lookup"><span data-stu-id="5d800-4305">For example: assuming 8-bit integers, where `value1` is set to 0 and `value2` is set to 1, the "wrapped" result will be 255.</span></span>  
  
 <span data-ttu-id="5d800-4306">Переполнение с плавающей точкой возвращает `+inf` (`PositiveInfinity`) или `-inf` (`NegativeInfinity`).</span><span class="sxs-lookup"><span data-stu-id="5d800-4306">Floating-point overflow returns `+inf` (`PositiveInfinity`) or `-inf` (`NegativeInfinity`).</span></span>  
  
 <span data-ttu-id="5d800-4307">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `sub`:</span><span class="sxs-lookup"><span data-stu-id="5d800-4307">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sub` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-4308">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-4308">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub_Ovf;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sub_Ovf : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sub_Ovf" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-4309">Вычитает одно целочисленное значение из другого, выполняет проверку переполнения и помещает результат в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-4309">Subtracts one integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-4310">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-4310">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-4311">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-4311">Format</span></span>|<span data-ttu-id="5d800-4312">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-4312">Assembly Format</span></span>|<span data-ttu-id="5d800-4313">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-4313">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-4314">DA</span><span class="sxs-lookup"><span data-stu-id="5d800-4314">DA</span></span>|<span data-ttu-id="5d800-4315">подovf</span><span class="sxs-lookup"><span data-stu-id="5d800-4315">sub.ovf</span></span>|<span data-ttu-id="5d800-4316">Вычитает одно целочисленное значение из другого с помощью проверки переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-4316">Subtracts one integer value from another with an overflow check.</span></span>|  
  
 <span data-ttu-id="5d800-4317">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-4317">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-4318">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4318">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-4319">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4319">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-4320">`value2` и `value1` извлекаются из стека; `value2` вычитается из `value1` с помощью проверки переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-4320">`value2` and `value1` are popped from the stack; `value2` is subtracted from `value1` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="5d800-4321">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4321">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-4322"><xref:System.OverflowException> создается, если результат не может быть представлен типом результата.</span><span class="sxs-lookup"><span data-stu-id="5d800-4322"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5d800-4323">Эта операция выполняется над целыми числами со знаком. для значений с плавающей запятой используйте <xref:System.Reflection.Emit.OpCodes.Sub>.</span><span class="sxs-lookup"><span data-stu-id="5d800-4323">This operation is performed on signed integers; for floating-point values, use <xref:System.Reflection.Emit.OpCodes.Sub>.</span></span>  
  
 <span data-ttu-id="5d800-4324">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `sub.ovf`:</span><span class="sxs-lookup"><span data-stu-id="5d800-4324">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sub.ovf` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-4325">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-4325">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub_Ovf_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sub_Ovf_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sub_Ovf_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-4326">Вычитает одно целочисленное значение без знака из другого, выполняет проверку переполнения и помещает результат в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-4326">Subtracts one unsigned integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-4327">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-4327">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-4328">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-4328">Format</span></span>|<span data-ttu-id="5d800-4329">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-4329">Assembly Format</span></span>|<span data-ttu-id="5d800-4330">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-4330">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-4331">DB</span><span class="sxs-lookup"><span data-stu-id="5d800-4331">DB</span></span>|<span data-ttu-id="5d800-4332">ovf. un</span><span class="sxs-lookup"><span data-stu-id="5d800-4332">sub.ovf.un</span></span>|<span data-ttu-id="5d800-4333">Вычитает одно целочисленное значение без знака из другого с помощью проверки переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-4333">Subtracts one unsigned integer value from another with an overflow check.</span></span>|  
  
 <span data-ttu-id="5d800-4334">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-4334">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-4335">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4335">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-4336">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4336">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-4337">`value2` и `value1` извлекаются из стека; `value2` вычитается из `value1` с помощью проверки переполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-4337">`value2` and `value1` are popped from the stack; `value2` is subtracted from `value1` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="5d800-4338">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4338">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-4339"><xref:System.OverflowException> создается, если результат не может быть представлен типом результата.</span><span class="sxs-lookup"><span data-stu-id="5d800-4339"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="5d800-4340">Эта операция выполняется над целыми числами со знаком. для значений с плавающей запятой используйте <xref:System.Reflection.Emit.OpCodes.Sub>.</span><span class="sxs-lookup"><span data-stu-id="5d800-4340">This operation is performed on signed integers; for floating-point values, use <xref:System.Reflection.Emit.OpCodes.Sub>.</span></span>  
  
 <span data-ttu-id="5d800-4341">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `sub.ovf.un`:</span><span class="sxs-lookup"><span data-stu-id="5d800-4341">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sub.ovf.un` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-4342">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-4342">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Switch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Switch" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Switch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Switch As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Switch;" />
      <MemberSignature Language="F#" Value=" staticval mutable Switch : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Switch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-4343">Реализует таблицу переходов.</span><span class="sxs-lookup"><span data-stu-id="5d800-4343">Implements a jump table.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-4344">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-4344">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-4345">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-4345">Format</span></span>|<span data-ttu-id="5d800-4346">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-4346">Assembly Format</span></span>|<span data-ttu-id="5d800-4347">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-4347">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-4348">45 < `unsigned int32` > < `int32` >... < `int32` ></span><span class="sxs-lookup"><span data-stu-id="5d800-4348">45 < `unsigned int32` > < `int32` >... < `int32` ></span></span>|<span data-ttu-id="5d800-4349">Switch (`N`, `t1`, `t2`... `tN`)</span><span class="sxs-lookup"><span data-stu-id="5d800-4349">switch (`N`, `t1`, `t2`... `tN`)</span></span>|<span data-ttu-id="5d800-4350">Переходит к одному из значений `N`.</span><span class="sxs-lookup"><span data-stu-id="5d800-4350">Jumps to one of `N` values.</span></span>|  
  
 <span data-ttu-id="5d800-4351">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-4351">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-4352">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4352">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-4353">Значение извлекается из стека, и выполнение передается в инструкцию со смещением, индексированным по значению, где значение меньше `N`.</span><span class="sxs-lookup"><span data-stu-id="5d800-4353">The value is popped off the stack and execution is transferred to the instruction at the offset indexed by the value, where the value is less than `N`.</span></span>  
  
 <span data-ttu-id="5d800-4354">Инструкция `switch` реализует таблицу переходов.</span><span class="sxs-lookup"><span data-stu-id="5d800-4354">The `switch` instruction implements a jump table.</span></span> <span data-ttu-id="5d800-4355">Инструкция имеет следующий формат: `unsigned int32`, представляющее количество целевых объектов `N`, за которыми следуют значения `N` Int32, указывающие цели перехода.</span><span class="sxs-lookup"><span data-stu-id="5d800-4355">The format of the instruction is an `unsigned int32` representing the number of targets `N`, followed by `N` int32 values specifying jump targets.</span></span> <span data-ttu-id="5d800-4356">Эти целевые объекты представлены в виде смещений (положительных или отрицательных) от начала инструкции, следующей за инструкцией `switch`.</span><span class="sxs-lookup"><span data-stu-id="5d800-4356">These targets are represented as offsets (positive or negative) from the beginning of the instruction following this `switch` instruction.</span></span>  
  
 <span data-ttu-id="5d800-4357">Инструкция `switch` извлекает значение из стека и сравнивает его как целое число без знака с `N`.</span><span class="sxs-lookup"><span data-stu-id="5d800-4357">The `switch` instruction pops a value off the stack and compares it, as an unsigned integer, to `N`.</span></span> <span data-ttu-id="5d800-4358">Если значение меньше `N`, выполнение передается в целевой индекс по значению, где конечные объекты нумеруются от 0 (например, значение 0 принимает первый целевой объект, значение 1 принимает второй целевой объект и т. д.).</span><span class="sxs-lookup"><span data-stu-id="5d800-4358">If value is less than `N`, execution is transferred to the target indexed by value, where targets are numbered from 0 (for example, a value of 0 takes the first target, a value of 1 takes the second target, and so on).</span></span> <span data-ttu-id="5d800-4359">Если значение больше или равно `N`, выполнение продолжится в следующей инструкции (с переходом).</span><span class="sxs-lookup"><span data-stu-id="5d800-4359">If the value is greater than or equal to `N`, execution continues at the next instruction (fall through).</span></span>  
  
 <span data-ttu-id="5d800-4360">Если целевая инструкция имеет один или несколько префиксных кодов, управление может быть передано только первому из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="5d800-4360">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="5d800-4361">Управление передачей в блоки `try`, `catch`, `filter` и `finally` не может быть выполнено этой инструкцией.</span><span class="sxs-lookup"><span data-stu-id="5d800-4361">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span> <span data-ttu-id="5d800-4362">(Такие передачи сильно ограничены и должны использовать инструкцию Leave).</span><span class="sxs-lookup"><span data-stu-id="5d800-4362">(Such transfers are severely restricted and must use the leave instruction instead).</span></span>  
  
 <span data-ttu-id="5d800-4363">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `switch`.</span><span class="sxs-lookup"><span data-stu-id="5d800-4363">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `switch` opcode.</span></span> <span data-ttu-id="5d800-4364">Аргумент `Label[]` является массивом меток, представляющих 32-разрядные смещения.</span><span class="sxs-lookup"><span data-stu-id="5d800-4364">The `Label[]` argument is an array of Labels representing 32-bit offsets.</span></span>  
  
-   <span data-ttu-id="5d800-4365">ILGenerator. Emit (код операции, метка [])</span><span class="sxs-lookup"><span data-stu-id="5d800-4365">ILGenerator.Emit(OpCode, Label[])</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5d800-4366">В следующем образце кода показано использование кода операции `Switch` для создания таблицы переходов с помощью массива <xref:System.Reflection.Emit.Label>.</span><span class="sxs-lookup"><span data-stu-id="5d800-4366">The following code sample illustrates the use of the `Switch` opcode to generate a jump table using an array of <xref:System.Reflection.Emit.Label>.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tailcall">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Tailcall;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Tailcall" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Tailcall" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Tailcall As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Tailcall;" />
      <MemberSignature Language="F#" Value=" staticval mutable Tailcall : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Tailcall" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-4367">Выполняет инструкцию вызова метода (префиксом которой является), предварительно удаляя кадр стека текущего метода.</span><span class="sxs-lookup"><span data-stu-id="5d800-4367">Performs a postfixed method call instruction such that the current method's stack frame is removed before the actual call instruction is executed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-4368">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-4368">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-4369">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-4369">Format</span></span>|<span data-ttu-id="5d800-4370">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-4370">Assembly Format</span></span>|<span data-ttu-id="5d800-4371">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-4371">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-4372">FE 14</span><span class="sxs-lookup"><span data-stu-id="5d800-4372">FE 14</span></span>|<span data-ttu-id="5d800-4373">односторонне.</span><span class="sxs-lookup"><span data-stu-id="5d800-4373">tail.</span></span>|<span data-ttu-id="5d800-4374">Последующий вызов завершает текущие методы</span><span class="sxs-lookup"><span data-stu-id="5d800-4374">Subsequent call terminates current methods</span></span>|  
  
 <span data-ttu-id="5d800-4375">Для этой инструкции не определено поведение перехода стека.</span><span class="sxs-lookup"><span data-stu-id="5d800-4375">There is no stack transition behavior defined for this instruction.</span></span>  
  
 <span data-ttu-id="5d800-4376">Инструкция префикса `tail` должна находиться непосредственно перед инструкцией <xref:System.Reflection.Emit.OpCodes.Call>, <xref:System.Reflection.Emit.OpCodes.Calli> или <xref:System.Reflection.Emit.OpCodes.Callvirt>.</span><span class="sxs-lookup"><span data-stu-id="5d800-4376">The `tail` prefix instruction must immediately precede a <xref:System.Reflection.Emit.OpCodes.Call>, <xref:System.Reflection.Emit.OpCodes.Calli>, or <xref:System.Reflection.Emit.OpCodes.Callvirt> instruction.</span></span> <span data-ttu-id="5d800-4377">Указывает, что кадр стека текущего метода должен быть удален перед выполнением инструкции вызова.</span><span class="sxs-lookup"><span data-stu-id="5d800-4377">It indicates that the current method's stack frame should be removed before the call instruction is executed.</span></span> <span data-ttu-id="5d800-4378">Также подразумевается, что значение, возвращаемое из следующего вызова, является также значением, возвращаемым текущим методом, и поэтому вызов может быть преобразован в переход между методами.</span><span class="sxs-lookup"><span data-stu-id="5d800-4378">It also implies that the value returned from the following call is also the value returned by the current method, and the call can therefore be converted into a cross-method jump.</span></span>  
  
 <span data-ttu-id="5d800-4379">Стек должен быть пустым, за исключением аргументов, передаваемых следующим вызовом.</span><span class="sxs-lookup"><span data-stu-id="5d800-4379">The stack must be empty except for the arguments being transferred by the following call.</span></span> <span data-ttu-id="5d800-4380">Инструкция, следующая за инструкцией Call, должна быть Ret. Таким образом, единственной допустимой последовательностью кода является `tail. call` (или `calli` или `callvirt`).</span><span class="sxs-lookup"><span data-stu-id="5d800-4380">The instruction following the call instruction must be a ret. Thus the only valid code sequence is `tail. call` (or `calli` or `callvirt`).</span></span> <span data-ttu-id="5d800-4381">Правильные инструкции промежуточного языка MSIL не должны выполнять переход к инструкции `call`, но они могут выполнять переход к последующей <xref:System.Reflection.Emit.OpCodes.Ret>.</span><span class="sxs-lookup"><span data-stu-id="5d800-4381">Correct Microsoft Intermediate Language (MSIL) instructions must not branch to the `call` instruction, but they may branch to the subsequent <xref:System.Reflection.Emit.OpCodes.Ret>.</span></span>  
  
 <span data-ttu-id="5d800-4382">Текущий кадр не может быть отклонен, если управление передается из ненадежного кода в доверенный код, так как это может подвергнуть риску безопасность идентификации кода.</span><span class="sxs-lookup"><span data-stu-id="5d800-4382">The current frame cannot be discarded when control is transferred from untrusted code to trusted code, since this would jeopardize code identity security.</span></span> <span data-ttu-id="5d800-4383">Таким образом, .NET Framework проверки безопасности могут вызвать игнорирование `tail`, при этом будет использоваться стандартная инструкция <xref:System.Reflection.Emit.OpCodes.Call>.</span><span class="sxs-lookup"><span data-stu-id="5d800-4383">The .NET Framework security checks can therefore cause the `tail` to be ignored, leaving a standard <xref:System.Reflection.Emit.OpCodes.Call> instruction.</span></span> <span data-ttu-id="5d800-4384">Аналогично, чтобы выйти из синхронизированной области после возврата вызова, префикс `tail` игнорируется при использовании для выхода из метода, помеченного как синхронизированный.</span><span class="sxs-lookup"><span data-stu-id="5d800-4384">Similarly, in order to allow the exit of a synchronized region to occur after the call returns, the `tail` prefix is ignored when used to exit a method that is marked synchronized.</span></span>  
  
 <span data-ttu-id="5d800-4385">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `tail`:</span><span class="sxs-lookup"><span data-stu-id="5d800-4385">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `tail` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-4386">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-4386">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TakesSingleByteArgument">
      <MemberSignature Language="C#" Value="public static bool TakesSingleByteArgument (System.Reflection.Emit.OpCode inst);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TakesSingleByteArgument(valuetype System.Reflection.Emit.OpCode inst) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.OpCodes.TakesSingleByteArgument(System.Reflection.Emit.OpCode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TakesSingleByteArgument (inst As OpCode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TakesSingleByteArgument(System::Reflection::Emit::OpCode inst);" />
      <MemberSignature Language="F#" Value="static member TakesSingleByteArgument : System.Reflection.Emit.OpCode -&gt; bool" Usage="System.Reflection.Emit.OpCodes.TakesSingleByteArgument inst" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inst" Type="System.Reflection.Emit.OpCode" />
      </Parameters>
      <Docs>
        <param name="inst"><span data-ttu-id="5d800-4387">Экземпляр объекта Opcode.</span><span class="sxs-lookup"><span data-stu-id="5d800-4387">An instance of an Opcode object.</span></span></param>
        <summary><span data-ttu-id="5d800-4388">Возвращает true или false, в зависимости от того, принимает ли заданный код операции однобайтовый аргумент.</span><span class="sxs-lookup"><span data-stu-id="5d800-4388">Returns true or false if the supplied opcode takes a single byte argument.</span></span></summary>
        <returns><span data-ttu-id="5d800-4389"><see langword="true" /> или <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-4389"><see langword="true" /> or <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-4390">Этот метод можно использовать для определения того, какие коды MSIL являются "короткими формами", для использования в оптимизированном коде.</span><span class="sxs-lookup"><span data-stu-id="5d800-4390">This method can be used to find which MSIL opcodes are "short form", for use in optimized code.</span></span>  
  
 <span data-ttu-id="5d800-4391">`TakesSingleByteArgument` возвращает значение `true`, если экземпляр <xref:System.Reflection.Emit.OpCode> принимает один байтовый аргумент в следующих случаях:</span><span class="sxs-lookup"><span data-stu-id="5d800-4391">`TakesSingleByteArgument` returns `true` if the <xref:System.Reflection.Emit.OpCode> instance takes a single byte argument in the following cases:</span></span>  
  
-   <span data-ttu-id="5d800-4392">Код операции выполняет инструкцию ветвления с адресом в байтовой кодировке (например, <xref:System.Reflection.Emit.OpCodes.Br_S> и <xref:System.Reflection.Emit.OpCodes.Bgt_S>).</span><span class="sxs-lookup"><span data-stu-id="5d800-4392">The opcode performs a branch instruction to a byte-sized address (for example, <xref:System.Reflection.Emit.OpCodes.Br_S> and <xref:System.Reflection.Emit.OpCodes.Bgt_S>).</span></span>  
  
-   <span data-ttu-id="5d800-4393">Код операции помещает значение байта в стек (например, <xref:System.Reflection.Emit.OpCodes.Ldc_I4_S>).</span><span class="sxs-lookup"><span data-stu-id="5d800-4393">The opcode pushes a byte value onto the stack (for example, <xref:System.Reflection.Emit.OpCodes.Ldc_I4_S>).</span></span>  
  
-   <span data-ttu-id="5d800-4394">Код операции ссылается на переменную или аргумент с помощью короткой формы размером байта (например, <xref:System.Reflection.Emit.OpCodes.Ldloc_S> и <xref:System.Reflection.Emit.OpCodes.Stloc_S>).</span><span class="sxs-lookup"><span data-stu-id="5d800-4394">The opcode references a variable or argument via the byte-sized "short form" (for example, <xref:System.Reflection.Emit.OpCodes.Ldloc_S> and <xref:System.Reflection.Emit.OpCodes.Stloc_S>).</span></span>  
  
 <span data-ttu-id="5d800-4395">В противном случае она возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="5d800-4395">Otherwise, it returns `false`.</span></span>  
  
 <span data-ttu-id="5d800-4396">В приведенном ниже примере показано использование `TakesSingleByteArgument` в соответствии с классом `OpCodes` и тестированием, чтобы определить, принимает ли каждое поле `OpCode` однобайтовый аргумент.</span><span class="sxs-lookup"><span data-stu-id="5d800-4396">The example below demonstrates the use of `TakesSingleByteArgument` by reflecting on to the `OpCodes` class and testing to see whether each `OpCode` field takes a single-byte argument.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Throw;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Throw" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Throw" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Throw As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Throw;" />
      <MemberSignature Language="F#" Value=" staticval mutable Throw : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Throw" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-4397">Создает объект исключения, находящийся в стеке вычислений.</span><span class="sxs-lookup"><span data-stu-id="5d800-4397">Throws the exception object currently on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-4398">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-4398">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-4399">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-4399">Format</span></span>|<span data-ttu-id="5d800-4400">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-4400">Assembly Format</span></span>|<span data-ttu-id="5d800-4401">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-4401">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-4402">7А</span><span class="sxs-lookup"><span data-stu-id="5d800-4402">7A</span></span>|<span data-ttu-id="5d800-4403">throw</span><span class="sxs-lookup"><span data-stu-id="5d800-4403">throw</span></span>|<span data-ttu-id="5d800-4404">Создает исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-4404">Throws an exception.</span></span>|  
  
 <span data-ttu-id="5d800-4405">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-4405">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-4406">Ссылка на объект (исключение) помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4406">An object reference (to an exception) is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-4407">Ссылка на объект извлекается из стека и вызывается исключение.</span><span class="sxs-lookup"><span data-stu-id="5d800-4407">The object reference is popped from the stack and the exception thrown.</span></span>  
  
 <span data-ttu-id="5d800-4408">Инструкция `throw` создает объект исключения (тип `O`) в данный момент в стеке.</span><span class="sxs-lookup"><span data-stu-id="5d800-4408">The `throw` instruction throws the exception object (type `O`) currently on the stack.</span></span>  
  
 <span data-ttu-id="5d800-4409"><xref:System.NullReferenceException> создается, если ссылка на объект является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="5d800-4409"><xref:System.NullReferenceException> is thrown if the object reference is a null reference.</span></span>  
  
 <span data-ttu-id="5d800-4410">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `throw`:</span><span class="sxs-lookup"><span data-stu-id="5d800-4410">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `throw` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-4411">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-4411">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unaligned">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unaligned;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unaligned" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unaligned" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unaligned As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unaligned;" />
      <MemberSignature Language="F#" Value=" staticval mutable Unaligned : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Unaligned" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-4412">Указывает, что адрес на вершине стека, возможно, не выровнен по естественному размеру следующей непосредственно за ним инструкции <see langword="ldind" />, <see langword="stind" />, <see langword="ldfld" />, <see langword="stfld" />, <see langword="ldobj" />, <see langword="stobj" />, <see langword="initblk" /> или <see langword="cpblk" />.</span><span class="sxs-lookup"><span data-stu-id="5d800-4412">Indicates that an address currently atop the evaluation stack might not be aligned to the natural size of the immediately following <see langword="ldind" />, <see langword="stind" />, <see langword="ldfld" />, <see langword="stfld" />, <see langword="ldobj" />, <see langword="stobj" />, <see langword="initblk" />, or <see langword="cpblk" /> instruction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-4413">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-4413">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-4414">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-4414">Format</span></span>|<span data-ttu-id="5d800-4415">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-4415">Assembly Format</span></span>|<span data-ttu-id="5d800-4416">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-4416">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-4417">< FE 12 `unsigned int8` @ NO__T-1</span><span class="sxs-lookup"><span data-stu-id="5d800-4417">FE 12 < `unsigned int8` ></span></span>|<span data-ttu-id="5d800-4418">невыровненным.</span><span class="sxs-lookup"><span data-stu-id="5d800-4418">unaligned.</span></span> `alignment`|<span data-ttu-id="5d800-4419">Указывает, что последующая инструкция указателя может быть несогласованной.</span><span class="sxs-lookup"><span data-stu-id="5d800-4419">Indicates that the subsequent pointer instruction may be unaligned.</span></span>|  
  
 <span data-ttu-id="5d800-4420">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-4420">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-4421">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4421">An address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-4422">`Unaligned` указывает, что адрес (неуправляемый указатель, `native int`) в стеке может не соответствовать естественному размеру сразу после `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk` или `cpblk`.</span><span class="sxs-lookup"><span data-stu-id="5d800-4422">`Unaligned` specifies that the address (an unmanaged pointer, `native int`) on the stack might not be aligned to the natural size of the immediately following `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, or `cpblk` instruction.</span></span> <span data-ttu-id="5d800-4423">То есть для инструкции <xref:System.Reflection.Emit.OpCodes.Ldind_I4> выравнивание адреса может не доставлять 4 байта.</span><span class="sxs-lookup"><span data-stu-id="5d800-4423">That is, for a <xref:System.Reflection.Emit.OpCodes.Ldind_I4> instruction the alignment of the address may not be to a 4-byte boundary.</span></span> <span data-ttu-id="5d800-4424">Для `initblk` и `cpblk` выравнивание по умолчанию зависит от архитектуры (4-байтный на 32-разрядных ЦП, 8-байт на 64-разрядных ЦП).</span><span class="sxs-lookup"><span data-stu-id="5d800-4424">For `initblk` and `cpblk` the default alignment is architecture dependent (4-byte on 32-bit CPUs, 8-byte on 64-bit CPUs).</span></span> <span data-ttu-id="5d800-4425">Генераторы кода, которые не ограничивают свои выходные данные размером 32-разрядного слова, должны использовать `unaligned`, если во время компиляции неизвестно 8-байтное выравнивание.</span><span class="sxs-lookup"><span data-stu-id="5d800-4425">Code generators that do not restrict their output to a 32-bit word size must use `unaligned` if the alignment is not known at compile time to be 8-byte.</span></span>  
  
 <span data-ttu-id="5d800-4426">Значение выравнивания должно быть равно 1, 2 или 4 и означает, что созданный код должен предположить, что адрес имеет тип Byte, двухбайтовые или четыре байта соответственно.</span><span class="sxs-lookup"><span data-stu-id="5d800-4426">The value of alignment must be 1, 2, or 4 and means that the generated code should assume that the address is byte, double-byte, or quad-byte aligned, respectively.</span></span> <span data-ttu-id="5d800-4427">Обратите внимание, что временные указатели (тип `*`) всегда согласовываются.</span><span class="sxs-lookup"><span data-stu-id="5d800-4427">Note that transient pointers (type `*`) are always aligned.</span></span>  
  
 <span data-ttu-id="5d800-4428">Хотя выравнивание для инструкции `cpblk` логически потребовало два числа (одно для источника и одно для назначения), не существует заметного влияния на производительность, если указано только меньшее число.</span><span class="sxs-lookup"><span data-stu-id="5d800-4428">While the alignment for a `cpblk` instruction would logically require two numbers (one for the source and one for the destination), there is no noticeable impact on performance if only the lower number is specified.</span></span>  
  
 <span data-ttu-id="5d800-4429">Префиксы `unaligned` и `volatile` можно объединять в любом порядке.</span><span class="sxs-lookup"><span data-stu-id="5d800-4429">The `unaligned` and `volatile` prefixes can be combined in either order.</span></span> <span data-ttu-id="5d800-4430">Они должны находиться непосредственно перед инструкциями `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, @no__t – 6 или `cpblk`.</span><span class="sxs-lookup"><span data-stu-id="5d800-4430">They must immediately precede a `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, or `cpblk` instruction.</span></span> <span data-ttu-id="5d800-4431">Только префикс <xref:System.Reflection.Emit.OpCodes.Volatile> разрешен для инструкций <xref:System.Reflection.Emit.OpCodes.Ldsfld> и <xref:System.Reflection.Emit.OpCodes.Stsfld>.</span><span class="sxs-lookup"><span data-stu-id="5d800-4431">Only the <xref:System.Reflection.Emit.OpCodes.Volatile> prefix is allowed for the <xref:System.Reflection.Emit.OpCodes.Ldsfld> and <xref:System.Reflection.Emit.OpCodes.Stsfld> instructions.</span></span>  
  
 <span data-ttu-id="5d800-4432">Следующие перегрузки метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> могут использовать код операции `unaligned`:</span><span class="sxs-lookup"><span data-stu-id="5d800-4432">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `unaligned` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-4433">ILGenerator. Emit (код операции, метка)</span><span class="sxs-lookup"><span data-stu-id="5d800-4433">ILGenerator.Emit(OpCode, Label)</span></span>  
  
-   <span data-ttu-id="5d800-4434">ILGenerator. Emit (код операции, байт)</span><span class="sxs-lookup"><span data-stu-id="5d800-4434">ILGenerator.Emit(Opcode, Byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unbox">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unbox;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unbox" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unbox" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unbox As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unbox;" />
      <MemberSignature Language="F#" Value=" staticval mutable Unbox : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Unbox" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-4435">Преобразует тип значения из упакованной формы в распакованную.</span><span class="sxs-lookup"><span data-stu-id="5d800-4435">Converts the boxed representation of a value type to its unboxed form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-4436">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-4436">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-4437">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-4437">Format</span></span>|<span data-ttu-id="5d800-4438">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-4438">Assembly Format</span></span>|<span data-ttu-id="5d800-4439">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-4439">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-4440">79 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5d800-4440">79 < `T` ></span></span>|<span data-ttu-id="5d800-4441">Распаковка `valType`</span><span class="sxs-lookup"><span data-stu-id="5d800-4441">unbox `valType`</span></span>|<span data-ttu-id="5d800-4442">Извлекает данные типа значения из `obj`, его упакованного представления.</span><span class="sxs-lookup"><span data-stu-id="5d800-4442">Extracts the value type data from `obj`, its boxed representation.</span></span>|  
  
 <span data-ttu-id="5d800-4443">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-4443">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-4444">Ссылка на объект помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4444">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-4445">Ссылка на объект извлекается из стека и распаковывается в указатель типа значения.</span><span class="sxs-lookup"><span data-stu-id="5d800-4445">The object reference is popped from the stack and unboxed to a value type pointer.</span></span>  
  
3.  <span data-ttu-id="5d800-4446">Указатель типа значения помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4446">The value type pointer is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-4447">Тип значения имеет два отдельных представления в Common Language Infrastructure (CLI):</span><span class="sxs-lookup"><span data-stu-id="5d800-4447">A value type has two separate representations within the Common Language Infrastructure (CLI):</span></span>  
  
-   <span data-ttu-id="5d800-4448">Необработанная форма, используемая при внедрении типа значения в другой объект.</span><span class="sxs-lookup"><span data-stu-id="5d800-4448">A 'raw' form used when a value type is embedded within another object.</span></span>  
  
-   <span data-ttu-id="5d800-4449">"Упакованная" форма, в которой данные в типе значения упаковываются (упаковываются) в объект, поэтому он может существовать как независимая сущность.</span><span class="sxs-lookup"><span data-stu-id="5d800-4449">A 'boxed' form, where the data in the value type is wrapped (boxed) into an object so it can exist as an independent entity.</span></span>  
  
 <span data-ttu-id="5d800-4450">Инструкция `unbox` преобразует ссылку на объект (тип `O`), упакованное представление типа значения в указатель типа значения (управляемый указатель, тип `&`), его неупакованную форму.</span><span class="sxs-lookup"><span data-stu-id="5d800-4450">The `unbox` instruction converts the object reference (type `O`), the boxed representation of a value type, to a value type pointer (a managed pointer, type `&`), its unboxed form.</span></span> <span data-ttu-id="5d800-4451">Указанный тип значения (`valType`) является маркером метаданных, указывающим тип значения, содержащегося в упакованном объекте.</span><span class="sxs-lookup"><span data-stu-id="5d800-4451">The supplied value type (`valType`) is a metadata token indicating the type of value type contained within the boxed object.</span></span>  
  
 <span data-ttu-id="5d800-4452">В отличие от <xref:System.Reflection.Emit.OpCodes.Box>, которое требуется для создания копии типа значения для использования в объекте, `unbox` не требуется копировать тип значения из объекта.</span><span class="sxs-lookup"><span data-stu-id="5d800-4452">Unlike <xref:System.Reflection.Emit.OpCodes.Box>, which is required to make a copy of a value type for use in the object, `unbox` is not required to copy the value type from the object.</span></span> <span data-ttu-id="5d800-4453">Обычно он просто выполняет вычисление адреса типа значения, уже присутствующего внутри упакованного объекта.</span><span class="sxs-lookup"><span data-stu-id="5d800-4453">Typically it simply computes the address of the value type that is already present inside of the boxed object.</span></span>  
  
 <span data-ttu-id="5d800-4454"><xref:System.InvalidCastException> создается, если объект не упакован как `valType`.</span><span class="sxs-lookup"><span data-stu-id="5d800-4454"><xref:System.InvalidCastException> is thrown if the object is not boxed as `valType`.</span></span>  
  
 <span data-ttu-id="5d800-4455"><xref:System.NullReferenceException> создается, если ссылка на объект является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="5d800-4455"><xref:System.NullReferenceException> is thrown if the object reference is a null reference.</span></span>  
  
 <span data-ttu-id="5d800-4456"><xref:System.TypeLoadException> возникает, если не удается найти тип значения `valType`.</span><span class="sxs-lookup"><span data-stu-id="5d800-4456"><xref:System.TypeLoadException> is thrown if the value type `valType` cannot be found.</span></span> <span data-ttu-id="5d800-4457">Обычно это обнаруживается при преобразовании инструкций промежуточного языка MSIL в машинный код, а не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="5d800-4457">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="5d800-4458">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `unbox`:</span><span class="sxs-lookup"><span data-stu-id="5d800-4458">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `unbox` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-4459">ILGenerator. Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="5d800-4459">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unbox_Any">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unbox_Any;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unbox_Any" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unbox_Any" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unbox_Any As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unbox_Any;" />
      <MemberSignature Language="F#" Value=" staticval mutable Unbox_Any : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Unbox_Any" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-4460">Преобразует тип, указанный в инструкции, из упакованной формы в распакованную.</span><span class="sxs-lookup"><span data-stu-id="5d800-4460">Converts the boxed representation of a type specified in the instruction to its unboxed form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-4461">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-4461">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-4462">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-4462">Format</span></span>|<span data-ttu-id="5d800-4463">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-4463">Assembly Format</span></span>|<span data-ttu-id="5d800-4464">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-4464">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-4465">A5 < `T` ></span><span class="sxs-lookup"><span data-stu-id="5d800-4465">A5 < `T` ></span></span>|<span data-ttu-id="5d800-4466">Распаковка. любой `typeTok`</span><span class="sxs-lookup"><span data-stu-id="5d800-4466">unbox.any `typeTok`</span></span>|<span data-ttu-id="5d800-4467">Извлеките данные из `obj`, их упакованного представления.</span><span class="sxs-lookup"><span data-stu-id="5d800-4467">Extract the data from `obj`, its boxed representation.</span></span>|  
  
 <span data-ttu-id="5d800-4468">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-4468">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-4469">Ссылка на объект `obj` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4469">An object reference `obj` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-4470">Ссылка на объект извлекается из стека и распаковывается в тип, указанный в инструкции.</span><span class="sxs-lookup"><span data-stu-id="5d800-4470">The object reference is popped from the stack and unboxed to the type specified in the instruction.</span></span>  
  
3.  <span data-ttu-id="5d800-4471">Результирующая ссылка на объект или тип значения помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4471">The resulting object reference or value type is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-4472">При применении к упакованной форме типа значения инструкция `unbox.any` извлекает значение, содержащееся в `obj` (типа `O`), и, следовательно, эквивалентно `unbox`, за которым следует `ldobj`.</span><span class="sxs-lookup"><span data-stu-id="5d800-4472">When applied to the boxed form of a value type, the `unbox.any` instruction extracts the value contained within `obj` (of type `O`), and is therefore equivalent to `unbox` followed by `ldobj`.</span></span>  
  
 <span data-ttu-id="5d800-4473">При применении к ссылочному типу инструкция `unbox.any` действует так же, как `castclass` `typeTok`.</span><span class="sxs-lookup"><span data-stu-id="5d800-4473">When applied to a reference type, the `unbox.any` instruction has the same effect as `castclass` `typeTok`.</span></span>  
  
 <span data-ttu-id="5d800-4474">Если операнд `typeTok` является параметром универсального типа, то поведение среды выполнения определяется типом, указанным для этого параметра универсального типа.</span><span class="sxs-lookup"><span data-stu-id="5d800-4474">If the operand `typeTok` is a generic type parameter, then the runtime behavior is determined by the type that is specified for that generic type parameter.</span></span>  
  
 <span data-ttu-id="5d800-4475"><xref:System.InvalidCastException> возникает, если `obj` не является упакованным типом.</span><span class="sxs-lookup"><span data-stu-id="5d800-4475"><xref:System.InvalidCastException> is thrown if `obj` is not a boxed type.</span></span>  
  
 <span data-ttu-id="5d800-4476"><xref:System.NullReferenceException> возникает, если `obj` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="5d800-4476"><xref:System.NullReferenceException> is thrown if `obj` is a null reference.</span></span>  
  
 <span data-ttu-id="5d800-4477">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `unbox.any`:</span><span class="sxs-lookup"><span data-stu-id="5d800-4477">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `unbox.any` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-4478">ILGenerator. Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="5d800-4478">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Volatile">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Volatile;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Volatile" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Volatile" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Volatile As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Volatile;" />
      <MemberSignature Language="F#" Value=" staticval mutable Volatile : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Volatile" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-4479">Указывает, что адрес на вершине стека вычислений, возможно, является изменяемым и результаты чтения данной области невозможно кэшировать либо невозможно запретить множественные сохранения в эту область.</span><span class="sxs-lookup"><span data-stu-id="5d800-4479">Specifies that an address currently atop the evaluation stack might be volatile, and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-4480">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-4480">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-4481">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-4481">Format</span></span>|<span data-ttu-id="5d800-4482">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-4482">Assembly Format</span></span>|<span data-ttu-id="5d800-4483">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-4483">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-4484">FE 13</span><span class="sxs-lookup"><span data-stu-id="5d800-4484">FE 13</span></span>|<span data-ttu-id="5d800-4485">независимо.</span><span class="sxs-lookup"><span data-stu-id="5d800-4485">volatile.</span></span>|<span data-ttu-id="5d800-4486">Указывает, что последующая ссылка на указатель является временной.</span><span class="sxs-lookup"><span data-stu-id="5d800-4486">Indicates that the subsequent pointer reference is volatile.</span></span>|  
  
 <span data-ttu-id="5d800-4487">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-4487">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-4488">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4488">An address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-4489">`volatile`.</span><span class="sxs-lookup"><span data-stu-id="5d800-4489">`volatile`.</span></span> <span data-ttu-id="5d800-4490">Указывает, что адрес является временным адресом (т. е. на него может ссылаться извне на текущий поток выполнения), и результаты чтения этого расположения не могут быть кэшированы или нельзя подавлять несколько магазинов в этом расположении.</span><span class="sxs-lookup"><span data-stu-id="5d800-4490">specifies that the address is a volatile address (that is, it can be referenced externally to the current thread of execution) and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.</span></span> <span data-ttu-id="5d800-4491">Пометка доступа как `volatile` влияет только на этот единственный доступ. другие методы доступа к тому же расположению должны быть помечены отдельно.</span><span class="sxs-lookup"><span data-stu-id="5d800-4491">Marking an access as `volatile` affects only that single access; other accesses to the same location must be marked separately.</span></span> <span data-ttu-id="5d800-4492">Доступ к временным расположениям не должен выполняться атомарно.</span><span class="sxs-lookup"><span data-stu-id="5d800-4492">Access to volatile locations need not be performed atomically.</span></span>  
  
 <span data-ttu-id="5d800-4493">Префиксы <xref:System.Reflection.Emit.OpCodes.Unaligned> и `volatile` можно объединять в любом порядке.</span><span class="sxs-lookup"><span data-stu-id="5d800-4493">The <xref:System.Reflection.Emit.OpCodes.Unaligned> and `volatile` prefixes can be combined in either order.</span></span> <span data-ttu-id="5d800-4494">Они должны находиться непосредственно перед инструкциями `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, @no__t – 6 или `cpblk`.</span><span class="sxs-lookup"><span data-stu-id="5d800-4494">They must immediately precede a `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, or `cpblk` instruction.</span></span> <span data-ttu-id="5d800-4495">Только префикс `volatile` разрешен для инструкций <xref:System.Reflection.Emit.OpCodes.Ldsfld> и <xref:System.Reflection.Emit.OpCodes.Stsfld>.</span><span class="sxs-lookup"><span data-stu-id="5d800-4495">Only the `volatile` prefix is allowed for the <xref:System.Reflection.Emit.OpCodes.Ldsfld> and <xref:System.Reflection.Emit.OpCodes.Stsfld> instructions.</span></span>  
  
 <span data-ttu-id="5d800-4496">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `volatile`:</span><span class="sxs-lookup"><span data-stu-id="5d800-4496">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `volatile` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-4497">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-4497">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xor">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Xor;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Xor" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Xor" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Xor As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Xor;" />
      <MemberSignature Language="F#" Value=" staticval mutable Xor : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Xor" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d800-4498">Вычисляет побитовое исключающее ИЛИ двух верхних значений в стеке вычислений и помещает результат обратно в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4498">Computes the bitwise XOR of the top two values on the evaluation stack, pushing the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d800-4499">В следующей таблице приводится список шестнадцатеричных и форматных сборок инструкций языка MSIL, а также краткая сводка.</span><span class="sxs-lookup"><span data-stu-id="5d800-4499">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="5d800-4500">Формат</span><span class="sxs-lookup"><span data-stu-id="5d800-4500">Format</span></span>|<span data-ttu-id="5d800-4501">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="5d800-4501">Assembly Format</span></span>|<span data-ttu-id="5d800-4502">Описание</span><span class="sxs-lookup"><span data-stu-id="5d800-4502">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="5d800-4503">61</span><span class="sxs-lookup"><span data-stu-id="5d800-4503">61</span></span>|<span data-ttu-id="5d800-4504">xor</span><span class="sxs-lookup"><span data-stu-id="5d800-4504">xor</span></span>|<span data-ttu-id="5d800-4505">Выполняет побитовое ИСКЛЮЧАЮЩее или двух целочисленных значений и возвращает целое число.</span><span class="sxs-lookup"><span data-stu-id="5d800-4505">Computes the bitwise XOR of two integer values and returns an integer.</span></span>|  
  
 <span data-ttu-id="5d800-4506">Переход в стек в последовательном порядке имеет следующие особенности:</span><span class="sxs-lookup"><span data-stu-id="5d800-4506">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="5d800-4507">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4507">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="5d800-4508">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4508">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="5d800-4509">`value2` и `value1` извлекаются из стека и их побитовое исключающее XOR.</span><span class="sxs-lookup"><span data-stu-id="5d800-4509">`value2` and `value1` are popped from the stack and their bitwise XOR computed.</span></span>  
  
4.  <span data-ttu-id="5d800-4510">Побитовое ИСКЛЮЧАЮЩее или `value2` и `value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="5d800-4510">The bitwise XOR of `value2` and `value1` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="5d800-4511">Инструкция `xor` рассчитывает побитовое ИСКЛЮЧАЮЩее и два верхних значения в стеке и оставляет результат в стеке.</span><span class="sxs-lookup"><span data-stu-id="5d800-4511">The `xor` instruction computes the bitwise XOR of the top two values on the stack and leaves the result on the stack.</span></span>  
  
 <span data-ttu-id="5d800-4512">`Xor` является операцией, относящейся к целому числу.</span><span class="sxs-lookup"><span data-stu-id="5d800-4512">`Xor` is an integer-specific operation.</span></span>  
  
 <span data-ttu-id="5d800-4513">Следующая перегрузка метода <xref:System.Reflection.Emit.ILGenerator.Emit%2A> может использовать код операции `xor`:</span><span class="sxs-lookup"><span data-stu-id="5d800-4513">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `xor` opcode:</span></span>  
  
-   <span data-ttu-id="5d800-4514">ILGenerator. Emit (код операции)</span><span class="sxs-lookup"><span data-stu-id="5d800-4514">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
