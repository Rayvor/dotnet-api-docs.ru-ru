<Type Name="ErrorEventArgs" FullName="System.IO.ErrorEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2f4ab79baca43d16e34785e4289c2a10cfa4109a" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70449070" /></Metadata><TypeSignature Language="C#" Value="public class ErrorEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ErrorEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.IO.ErrorEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class ErrorEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ErrorEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type ErrorEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет данные для события <see cref="E:System.IO.FileSystemWatcher.Error" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.ErrorEventArgs>содержит объект <xref:System.Exception> , <xref:System.IO.FileSystemWatcher.Error?displayProperty=nameWithType> вызвавший событие. Этот класс предоставляет <xref:System.IO.ErrorEventArgs.GetException%2A> метод для получения исключения.  
  
   
  
## Examples  
 В следующем примере создается новый экземпляр <xref:System.IO.ErrorEventArgs> и инициализируется <xref:System.Exception>с помощью. Затем в примере вызывается метод <xref:System.IO.ErrorEventArgs.GetException%2A> для <xref:System.Exception> получения и вывода сообщения об ошибке. С этим кодом не связана ни одна форма.  
  
 [!code-cpp[Classic ErrorEventArgs Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ErrorEventArgs Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ErrorEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ErrorEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic ErrorEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ErrorEventArgs Example/VB/source.vb#1)]  
  
 В следующем примере показано, как создать FileSystemWatcher для отслеживания изменений в файле (создание, удаление, переименование, изменение), происходящих на диске. В примере также показано, как правильно получать уведомления об ошибках.  
  
 [!code-csharp[FileSystemWatcher#1](~/samples/snippets/csharp/VS_Snippets_CLR/FileSystemWatcher/cs/filesystemwatcher.cs#1)]
 [!code-vb[FileSystemWatcher#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FileSystemWatcher/VB/FileSystemWatcher.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.ErrorEventHandler" />
    <altmember cref="T:System.IO.FileSystemWatcher" />
    <altmember cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ErrorEventArgs (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.ErrorEventArgs.#ctor(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ErrorEventArgs(Exception ^ exception);" />
      <MemberSignature Language="F#" Value="new System.IO.ErrorEventArgs : Exception -&gt; System.IO.ErrorEventArgs" Usage="new System.IO.ErrorEventArgs exception" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">Компонент <see cref="T:System.Exception" />, представляющий возникшую ошибку.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.ErrorEventArgs" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере создается новый экземпляр <xref:System.IO.ErrorEventArgs> и инициализируется <xref:System.Exception>с помощью. Затем в примере вызывается метод <xref:System.IO.ErrorEventArgs.GetException%2A> для <xref:System.Exception> получения и вывода сообщения об ошибке. С этим кодом не связана ни одна форма.  
  
 [!code-cpp[Classic ErrorEventArgs.ErrorEventArgs Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ErrorEventArgs.ErrorEventArgs Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ErrorEventArgs.ErrorEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ErrorEventArgs.ErrorEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic ErrorEventArgs.ErrorEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ErrorEventArgs.ErrorEventArgs Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetException">
      <MemberSignature Language="C#" Value="public virtual Exception GetException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Exception GetException() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.ErrorEventArgs.GetException" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetException () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Exception ^ GetException();" />
      <MemberSignature Language="F#" Value="abstract member GetException : unit -&gt; Exception&#xA;override this.GetException : unit -&gt; Exception" Usage="errorEventArgs.GetException " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Получает компонент <see cref="T:System.Exception" />, представляющий возникшую ошибку.</summary>
        <returns>Компонент <see cref="T:System.Exception" />, представляющий возникшую ошибку.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере создается новый экземпляр <xref:System.IO.ErrorEventArgs> и инициализируется <xref:System.Exception>с помощью. Затем в примере вызывается метод <xref:System.IO.ErrorEventArgs.GetException%2A> для <xref:System.Exception> получения и вывода сообщения об ошибке. С этим кодом не связана ни одна форма.  
  
 [!code-cpp[Classic ErrorEventArgs.ErrorEventArgs Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ErrorEventArgs.ErrorEventArgs Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ErrorEventArgs.ErrorEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ErrorEventArgs.ErrorEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic ErrorEventArgs.ErrorEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ErrorEventArgs.ErrorEventArgs Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
