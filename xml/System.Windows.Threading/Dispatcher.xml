<Type Name="Dispatcher" FullName="System.Windows.Threading.Dispatcher">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b59956e2fc95a3f161b2f47961286704ce56662a" /><Meta Name="ms.sourcegitcommit" Value="a22d0855bbf24d893f43605f8b7e3a44bd9551a5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70358665" /></Metadata><TypeSignature Language="C#" Value="public sealed class Dispatcher" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Dispatcher extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.Dispatcher" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Dispatcher" />
  <TypeSignature Language="C++ CLI" Value="public ref class Dispatcher sealed" />
  <TypeSignature Language="F#" Value="type Dispatcher = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет службы для управления очередью рабочих элементов для потока.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.Dispatcher> Поддерживает приоритетную очередь рабочих элементов для конкретного потока.  
  
 Когда объект <xref:System.Windows.Threading.Dispatcher> создается в потоке, он становится единственным <xref:System.Windows.Threading.Dispatcher> , который может быть связан с <xref:System.Windows.Threading.Dispatcher> потоком, даже если работа завершается.  
  
 Если попытаться получить <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> для текущего потока, <xref:System.Windows.Threading.Dispatcher> а не связать с потоком, будет создан объект <xref:System.Windows.Threading.Dispatcher> . А <xref:System.Windows.Threading.Dispatcher> также создается при <xref:System.Windows.Threading.DispatcherObject>создании. При создании <xref:System.Windows.Threading.Dispatcher> в фоновом потоке обязательно завершите работу диспетчера перед выходом из потока.  
  
 <xref:System.Windows.Threading.Dispatcher> Если работа выключена, ее невозможно перезапустить.  
  
 В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]доступк <xref:System.Windows.Threading.Dispatcher> может получить только тот объект, который связан с. <xref:System.Windows.Threading.DispatcherObject>  Например, фоновый поток не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, связанного с объектом <xref:System.Windows.Threading.Dispatcher> [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] в потоке.  <xref:System.Windows.Controls.ContentControl.Content%2A> Чтобы фоновый поток мог получить доступ к свойству <xref:System.Windows.Controls.Button>, фоновый поток должен <xref:System.Windows.Threading.Dispatcher> делегировать работу связанному с [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] ним потоку.  Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> <xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным.  Операция добавляется в очередь <xref:System.Windows.Threading.Dispatcher> в указанной. <xref:System.Windows.Threading.DispatcherPriority>  
  
 Если <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> метод вызывается для <xref:System.Windows.Threading.Dispatcher> объекта, который завершил работу, свойство Status возвращаемого <xref:System.Windows.Threading.DispatcherOperation> значения устанавливается в <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>значение.  
  
 Все методы в <xref:System.Windows.Threading.Dispatcher>, за <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>исключением, являются свободными потоками.  
  
 Объекты, производные от <xref:System.Windows.Threading.DispatcherObject> , имеют сходство потоков.  
  
 Объекты, производные от <xref:System.Windows.Freezable> , являются свободными потоками, когда они заморожены.  Дополнительные сведения см. в разделе [Общие сведения об объектах класса Freezable](~/docs/framework/wpf/advanced/freezable-objects-overview.md).  
  
   
  
## Examples  
 В следующем примере показано, как поместить операцию в <xref:System.Windows.Threading.Dispatcher>.  Полный исходный код этого примера см. в разделе [Пример однопотокового приложения с длительным выполнением вычислений](https://go.microsoft.com/fwlink/?LinkID=160038).  
  
 Во-первых, создается делегат, который не принимает аргументы.  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> Затем вызывается метод.  Этот вызов <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> принимает два параметра: приоритет, который имеет <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>значение, и обратный вызов, который передается через экземпляр делегата `NextPrimeDelegate`.  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038">Пример приложения с одним потоком с длительным выполнением вычислений</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Выполняет делегат асинхронно, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту.  Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса.  Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса.  Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>  <xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным.  Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority>  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>является асинхронным; Следовательно, управление немедленно возвращается вызывающему объекту после его вызова.  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A><xref:System.Windows.Threading.DispatcherOperation> возвращает объект, который может использоваться для взаимодействия с делегатом, когда делегат находится в очереди событий.  
  
 Объект, возвращаемый <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> функцией, может использоваться несколькими способами для взаимодействия с указанным делегатом, например: <xref:System.Windows.Threading.DispatcherOperation>  
  
-   <xref:System.Windows.Threading.DispatcherPriority> Изменение объекта делегата, так как он ожидает выполнения в очереди событий.  
  
-   Удаление делегата из очереди событий.  
  
-   Ожидание возврата делегата.  
  
-   Получение значения, возвращаемого делегатом после его выполнения.  
  
 Если несколько <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> вызовов выполняются в одной и той <xref:System.Windows.Threading.DispatcherPriority>же последовательности, они будут выполняться в том порядке, в котором были выполнены вызовы.  
  
 Если <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> метод вызывается для <xref:System.Windows.Threading.Dispatcher> объекта, который завершил работу, свойство Status возвращаемого <xref:System.Windows.Threading.DispatcherOperation> значения устанавливается в <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>значение.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">Делегат метода с параметрами, указанными в <paramref name="args" />, который помещен в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
        <param name="args">Массив объектов, передаваемых в качестве аргументов указанному методу. Может иметь значение <see langword="null" />.</param>
        <summary>Выполняет указанный делегат асинхронно с указанными аргументами в потоке, в котором был создан объект <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <returns>Объект, возвращаемый сразу после вызова <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди событий.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект, возвращаемый <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> функцией, может использоваться несколькими способами для взаимодействия с указанным делегатом, например: <xref:System.Windows.Threading.DispatcherOperation>  
  
-   <xref:System.Windows.Threading.DispatcherPriority> Изменение объекта делегата, так как он ожидает выполнения в очереди событий.  
  
-   Удаление делегата из очереди событий.  
  
-   Ожидание возврата делегата.  
  
-   Получение значения, возвращаемого делегатом после его выполнения.  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>является асинхронным; Следовательно, управление немедленно возвращается вызывающему объекту после его вызова.  
  
 В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту. Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса. Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса. Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> <xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным. Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority>  
  
 Если <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> метод вызывается для <xref:System.Windows.Threading.Dispatcher> объекта, который завершил работу, свойство Status возвращаемого <xref:System.Windows.Threading.DispatcherOperation> значения устанавливается в <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>значение.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</param>
        <param name="method">Делегат метода без аргументов, помещенный в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
        <summary>Выполняет указанный делегат асинхронно, с заданным приоритетом, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <returns>Объект, возвращаемый сразу после вызова <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди событий.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если несколько <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> вызовов выполняются в одной и той <xref:System.Windows.Threading.DispatcherPriority>же последовательности, они будут выполняться в том порядке, в котором были выполнены вызовы.  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A><xref:System.Windows.Threading.DispatcherOperation> возвращает объект, который может использоваться для взаимодействия с делегатом, когда делегат находится в очереди событий.  
  
 Объект, возвращаемый <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> функцией, может использоваться несколькими способами для взаимодействия с указанным делегатом, например: <xref:System.Windows.Threading.DispatcherOperation>  
  
-   <xref:System.Windows.Threading.DispatcherPriority> Изменение объекта делегата, так как он ожидает выполнения в очереди событий.  
  
-   Удаление делегата из очереди событий.  
  
-   Ожидание возврата делегата.  
  
-   Получение значения, возвращаемого делегатом после его выполнения.  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>является асинхронным; Следовательно, управление немедленно возвращается вызывающему объекту после его вызова.  
  
 В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту.  Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса.  Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса.  Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>  <xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным.  Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority>  
  
 Если <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> метод вызывается для <xref:System.Windows.Threading.Dispatcher> объекта, который завершил работу, свойство Status возвращаемого <xref:System.Windows.Threading.DispatcherOperation> значения устанавливается в <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>значение.  
  
   
  
## Examples  
 В следующем примере показано, как поместить операцию в <xref:System.Windows.Threading.Dispatcher>.  Полный исходный код этого примера см. в разделе [Пример однопотокового приложения с длительным выполнением вычислений](https://go.microsoft.com/fwlink/?LinkID=160038).  
  
 Во-первых, создается делегат, который не принимает аргументы.  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> Затем вызывается метод.  Поскольку каждый <xref:System.Windows.Threading.DispatcherObject> <xref:System.Windows.Threading.Dispatcher> из них имеет свойство, которое возвращает, что он связан с, <xref:System.Windows.Threading.Dispatcher> нужно получить, выполнив <xref:System.Windows.Controls.Button> запрос <xref:System.Windows.Threading.DispatcherObject>к, в данном случае с `startStopButton`именем.   Вызов <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> принимает два параметра: приоритет, который имеет <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>значение, и обратный вызов, который передается через экземпляр делегата `NextPrimeDelegate`.  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="method" /> — <see langword="null" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" /> не является допустимым <see cref="T:System.Windows.Threading.DispatcherPriority" />.</exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038">Пример приложения с одним потоком с длительным выполнением вычислений</related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">Делегат метода с параметрами, указанными в <paramref name="args" />, который помещен в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
        <param name="priority">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</param>
        <param name="args">Массив объектов, передаваемых в качестве аргументов указанному методу. Может иметь значение <see langword="null" />.</param>
        <summary>Выполняет указанный делегат асинхронно, с заданными приоритетом и аргументами, в потоке, в котором был создан объект <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <returns>Объект, возвращаемый сразу после вызова <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди событий.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект, возвращаемый <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> функцией, может использоваться несколькими способами для взаимодействия с указанным делегатом, например: <xref:System.Windows.Threading.DispatcherOperation>  
  
-   <xref:System.Windows.Threading.DispatcherPriority> Изменение объекта делегата, так как он ожидает выполнения в очереди событий.  
  
-   Удаление делегата из очереди событий.  
  
-   Ожидание возврата делегата.  
  
-   Получение значения, возвращаемого делегатом после его выполнения.  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>является асинхронным; Следовательно, управление немедленно возвращается вызывающему объекту после его вызова.  
  
 В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту. Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса. Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса. Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> <xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным. Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority>  
  
 Если <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> метод вызывается для <xref:System.Windows.Threading.Dispatcher> объекта, который завершил работу, свойство Status возвращаемого <xref:System.Windows.Threading.DispatcherOperation> значения устанавливается в <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>значение.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</param>
        <param name="method">Делегат метода с одним аргументом, помещенный в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
        <param name="arg">Объект, передаваемый в качестве аргумента указанному методу.</param>
        <summary>Выполняет указанный делегат асинхронно, с заданными приоритетом и аргументом, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <returns>Объект, возвращаемый сразу после вызова <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди событий.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Arg`может быть `null` , если аргументы не требуются.  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A><xref:System.Windows.Threading.DispatcherOperation> возвращает объект, который может использоваться для взаимодействия с делегатом, когда делегат находится в очереди событий.  
  
 Объект, возвращаемый <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> функцией, может использоваться несколькими способами для взаимодействия с указанным делегатом, например: <xref:System.Windows.Threading.DispatcherOperation>  
  
-   <xref:System.Windows.Threading.DispatcherPriority> Изменение объекта делегата, так как он ожидает выполнения в очереди событий.  
  
-   Удаление делегата из очереди событий.  
  
-   Ожидание возврата делегата.  
  
-   Получение значения, возвращаемого делегатом после его выполнения.  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>является асинхронным; Следовательно, управление немедленно возвращается вызывающему объекту после его вызова.  
  
 В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту.  Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса.  Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса.  Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>  <xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным.  Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority>  
  
 Если несколько <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> вызовов выполняются в одной и той <xref:System.Windows.Threading.DispatcherPriority>же последовательности, они будут выполняться в том порядке, в котором были выполнены вызовы.  
  
 Если <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> метод вызывается для <xref:System.Windows.Threading.Dispatcher> объекта, который завершил работу, свойство Status возвращаемого <xref:System.Windows.Threading.DispatcherOperation> значения устанавливается в <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>значение.  
  
   
  
## Examples  
 В следующем примере показано, как поместить операцию в <xref:System.Windows.Threading.Dispatcher>.  
  
 Во-первых, создается делегат, принимающий один аргумент, в данном случае строка.  
  
 [!code-csharp[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdelegates)]
 [!code-vb[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdelegates)]  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> Затем вызывается метод.  Поскольку каждый <xref:System.Windows.Threading.DispatcherObject> <xref:System.Windows.Threading.Dispatcher> из них имеет свойство, которое возвращает, что он связан с, <xref:System.Windows.Threading.Dispatcher> нужно получить, выполнив <xref:System.Windows.Controls.Grid> запрос <xref:System.Windows.Threading.DispatcherObject>к, в данном случае с `tomorrowsWeather`именем. Вызов <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> принимает три параметра: приоритет, который имеет <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>значение; обратный вызов, который передается через экземпляр делегата `OneArgDelegate`, и строку с именем `weather`, которая является аргументом для обратного вызова.  
  
 [!code-csharp[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdispatcheronearge)]
 [!code-vb[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdispatcheronearge)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="method" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" /> не является допустимым <see cref="T:System.Windows.Threading.DispatcherPriority" />.</exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038">Пример приложения с одним потоком с длительным выполнением вычислений</related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</param>
        <param name="method">Делегат метода с несколькими аргументами, помещенный в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
        <param name="arg">Объект, передаваемый в качестве аргумента указанному методу.</param>
        <param name="args">Массив объектов, передаваемых в качестве аргументов указанному методу.</param>
        <summary>Выполняет указанный делегат асинхронно, с заданными приоритетом и массивом аргументов, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <returns>Объект, возвращаемый сразу после вызова <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди <see cref="T:System.Windows.Threading.Dispatcher" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Параметр `arg` может иметь `null` значение, если аргументы не требуются.  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A><xref:System.Windows.Threading.DispatcherOperation> возвращает объект, который может использоваться для взаимодействия с делегатом, когда делегат находится в очереди событий.  
  
 Объект, возвращаемый <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> функцией, может использоваться несколькими способами для взаимодействия с указанным делегатом, например: <xref:System.Windows.Threading.DispatcherOperation>  
  
-   <xref:System.Windows.Threading.DispatcherPriority> Изменение объекта делегата, так как он ожидает выполнения в очереди событий.  
  
-   Удаление делегата из очереди событий.  
  
-   Ожидание возврата делегата.  
  
-   Получение значения, возвращаемого делегатом после его выполнения.  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>является асинхронным; Следовательно, управление немедленно возвращается вызывающему объекту после его вызова.  
  
 В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту.  Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса.  Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса.  Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>  <xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным.  Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority>  
  
 Если несколько <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> вызовов выполняются в одной и той <xref:System.Windows.Threading.DispatcherPriority>же последовательности, они будут выполняться в том порядке, в котором были выполнены вызовы.  
  
 Если <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> метод вызывается для <xref:System.Windows.Threading.Dispatcher> объекта, который завершил работу, свойство Status возвращаемого <xref:System.Windows.Threading.DispatcherOperation> значения устанавливается в <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>значение.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="method" /> — <see langword="null" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><see cref="T:System.Windows.Threading.DispatcherPriority" /> не является допустимым приоритетом.</exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038">Пример приложения с одним потоком с длительным выполнением вычислений</related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvokeShutdown">
      <MemberSignature Language="C#" Value="public void BeginInvokeShutdown (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginInvokeShutdown(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInvokeShutdown (priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginInvokeShutdown(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.BeginInvokeShutdown : System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.BeginInvokeShutdown priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority">Приоритет, с которым начинается остановка диспетчера.</param>
        <summary>Инициализирует асинхронную остановку <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A>запрашивает неограниченные разрешения пользовательского интерфейса.  
  
 Когда начинается завершение работы <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> , вызывается событие и <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> устанавливается в `true`значение. <xref:System.Windows.Threading.Dispatcher>  
  
 <xref:System.Windows.Threading.Dispatcher> Не завершает работу полностью до очистки очереди событий.  
  
 Когда диспетчер завершает работу, <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> возникает событие, <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> и свойству присваивается значение `true`.  
  
 После начала процесса завершения работы все ожидающие рабочие элементы в очереди будут прерваны.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">для выключения диспетчера.  Связанные перечисления:<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public bool CheckAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckAccess () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckAccess();" />
      <MemberSignature Language="F#" Value="member this.CheckAccess : unit -&gt; bool" Usage="dispatcher.CheckAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Определяет, связан ли вызывающий поток с данным <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <returns>Значение <see langword="true" />, если вызывающий поток связан с данным <see cref="T:System.Windows.Threading.Dispatcher" />; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Доступ к <xref:System.Windows.Threading.Dispatcher> объекту может <xref:System.Windows.Threading.DispatcherObject> получить только то, что создается для.  Используйте <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> для доступа к объекту из другого потока.  
  
 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>может вызываться из любого потока.  
  
 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> Разница между <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> и возвращает логическое значение, указывающее, имеет <xref:System.Windows.Threading.Dispatcher> ли вызывающий поток доступ к и создает исключение. <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>  
  
   
  
## Examples  
 В следующем примере используется <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> для определения того, имеет ли поток доступ <xref:System.Windows.Controls.Button>к.  Метод, <xref:System.Windows.Threading.Dispatcher> связанный с, <xref:System.Windows.Controls.Button> вызывается для проверки доступа к потоку. <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>  Если вызывающий поток <xref:System.Windows.Threading.Dispatcher>имеет доступ к <xref:System.Windows.Controls.Button> , компонент обновляется путем <xref:System.Windows.Controls.Button>доступа к членам. в противном случае делегат, который принимает в <xref:System.Windows.Controls.Button> качестве аргумента, помещается в <xref:System.Windows.Threading.Dispatcher>.  Будет делегировать работу по <xref:System.Windows.Controls.Button>обновлению. <xref:System.Windows.Threading.Dispatcher>  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccesscheckaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccesscheckaccess)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      </Docs>
    </Member>
    <Member MemberName="CurrentDispatcher">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher CurrentDispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Threading.Dispatcher CurrentDispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentDispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Threading::Dispatcher ^ CurrentDispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDispatcher : System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает <see cref="T:System.Windows.Threading.Dispatcher" /> для выполняющегося в данный момент потока и создает новый объект <see cref="T:System.Windows.Threading.Dispatcher" />, если с потоком еще не связан диспетчер.</summary>
        <value>Диспетчер, связанный с текущим потоком.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если объект <xref:System.Windows.Threading.Dispatcher> не связан с текущим потоком, будет создан новый <xref:System.Windows.Threading.Dispatcher> объект.  С методом <xref:System.Windows.Threading.Dispatcher.FromThread%2A> это не так.  <xref:System.Windows.Threading.Dispatcher.FromThread%2A>Возвращает `null` значение, если отсутствует диспетчер, связанный с указанным потоком.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableProcessing">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.DisableProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Function DisableProcessing () As DispatcherProcessingDisabled" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherProcessingDisabled DisableProcessing();" />
      <MemberSignature Language="F#" Value="member this.DisableProcessing : unit -&gt; System.Windows.Threading.DispatcherProcessingDisabled" Usage="dispatcher.DisableProcessing " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherProcessingDisabled</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Отменяет обработку очереди <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <returns>Структура, используемая для повторного включения диспетчера.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Отключение обработки диспетчера является расширенным методом, который предназначен для устранения вероятности несвязанного повторного входа.  
  
 Ниже приведены последствия отключения обработки.  
  
-   Блокировки CLR не будут внутренним образом передавать сообщения.  
  
-   <xref:System.Windows.Threading.DispatcherFrame>Отправка объектов запрещена.  
  
-   Обработка сообщений запрещена.  
  
 Структура, возвращаемая при вызове, <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> может быть использована для повторного включения обработки диспетчера. <xref:System.Windows.Threading.DispatcherProcessingDisabled>  Вызов <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> метода<xref:System.Windows.Threading.DispatcherProcessingDisabled> в структуре повторно включает обработку.  
  
 <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>может вызываться только в потоке, <xref:System.Windows.Threading.Dispatcher> с которым связан объект.  
  
   
  
## Examples  
 В следующем примере показано, как отключить обработку диспетчера и повторно включить обработку диспетчера.  <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>вызывается в операторе **using** .  <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>Возвращает структуру, используемую в качестве объекта, который должен быть удален при завершении блока **using.** <xref:System.Windows.Threading.DispatcherProcessingDisabled>  При <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> вызове <xref:System.Windows.Threading.DispatcherProcessingDisabled> в структуре обработка диспетчера включается повторно.  
  
 [!code-csharp[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdisableprocessing)]
 [!code-vb[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdisableprocessing)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitAllFrames">
      <MemberSignature Language="C#" Value="public static void ExitAllFrames ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExitAllFrames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExitAllFrames ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExitAllFrames();" />
      <MemberSignature Language="F#" Value="static member ExitAllFrames : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ExitAllFrames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Запрашивает выход для всех фреймов, включая вложенные.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">для вызова этого метода. Связанные перечисления:<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
        <altmember cref="T:System.Windows.Threading.DispatcherFrame" />
      </Docs>
    </Member>
    <Member MemberName="FromThread">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher FromThread (System.Threading.Thread thread);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Threading.Dispatcher FromThread(class System.Threading.Thread thread) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::Dispatcher ^ FromThread(System::Threading::Thread ^ thread);" />
      <MemberSignature Language="F#" Value="static member FromThread : System.Threading.Thread -&gt; System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.FromThread thread" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thread" Type="System.Threading.Thread" />
      </Parameters>
      <Docs>
        <param name="thread">Поток, из которого нужно получить <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
        <summary>Возвращает <see cref="T:System.Windows.Threading.Dispatcher" /> для заданного потока.</summary>
        <returns>Диспетчер для <paramref name="thread" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если диспетчер недоступен для указанного потока, `null` будет возвращен.  
  
 <xref:System.Windows.Threading.Dispatcher.FromThread%2A>не создает объект <xref:System.Windows.Threading.Dispatcher> в потоке, у которого нет <xref:System.Windows.Threading.Dispatcher>.   Новый <xref:System.Windows.Threading.Dispatcher> объект создается в потоке, который еще не <xref:System.Windows.Threading.Dispatcher> имеет при <xref:System.Windows.Threading.Dispatcher> попытке <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> получить объект с помощью свойства.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownFinished">
      <MemberSignature Language="C#" Value="public bool HasShutdownFinished { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownFinished" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownFinished As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownFinished { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownFinished : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Определяет, завершил ли объект <see cref="T:System.Windows.Threading.Dispatcher" /> процесс остановки.</summary>
        <value><see langword="true" />, если диспетчер завершил процесс остановки; в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда начинается завершение работы <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> , вызывается событие и <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> устанавливается в `true`значение. <xref:System.Windows.Threading.Dispatcher>  
  
 <xref:System.Windows.Threading.Dispatcher> Не завершает работу полностью до тех пор, пока очередь событий не выматывает.  
  
 Когда диспетчер завершает работу, <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> возникает событие, <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> и свойству присваивается значение `true`.  
  
 После начала процесса завершения работы все ожидающие рабочие элементы в очереди будут прерваны.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownStarted">
      <MemberSignature Language="C#" Value="public bool HasShutdownStarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownStarted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownStarted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownStarted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownStarted : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Определяет, находится ли объект <see cref="T:System.Windows.Threading.Dispatcher" /> в процессе остановки.</summary>
        <value><see langword="true" />, если <see cref="T:System.Windows.Threading.Dispatcher" /> начал процесс остановки; в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда начинается завершение работы <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> , вызывается событие и <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> устанавливается в `true`значение. <xref:System.Windows.Threading.Dispatcher>  
  
 <xref:System.Windows.Threading.Dispatcher> Не завершает работу полностью до очистки очереди событий.  
  
 Когда диспетчер завершает работу, <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> возникает событие, <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> и свойству присваивается значение `true`.  
  
 После начала процесса завершения работы все ожидающие рабочие элементы в очереди будут прерваны.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hooks">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherHooks Hooks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.DispatcherHooks Hooks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Hooks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hooks As DispatcherHooks" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::DispatcherHooks ^ Hooks { System::Windows::Threading::DispatcherHooks ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Hooks : System.Windows.Threading.DispatcherHooks" Usage="System.Windows.Threading.Dispatcher.Hooks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherHooks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает коллекцию ловушек, предоставляющих дополнительную информацию о <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <value>Ловушки, связанные с данным <see cref="T:System.Windows.Threading.Dispatcher" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Класс предоставляет дополнительные сведения <xref:System.Windows.Threading.Dispatcher>о событии <xref:System.Windows.Threading.Dispatcher> , например, когда компонент является неактивным или когда операция была прервана. <xref:System.Windows.Threading.DispatcherHooks>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">для получения этого свойства.  Связанные перечисления:<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Выполняет заданный делегат синхронно, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту.  Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса.  Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса.  Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>  <xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным.  Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority>  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронной операцией; Поэтому Управление не вернется к вызывающему объекту до тех пор, пока не будет возвращен обратный вызов.  
  
   
  
## Examples  
 В следующем примере делегат помещается в <xref:System.Windows.Threading.Dispatcher> объект <xref:System.Windows.Threading.DispatcherPriority.Normal> при <xref:System.Windows.Threading.Dispatcher.Invoke%2A>помощи.  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action -&gt; unit" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback">Делегат, вызываемый с помощью диспетчера.</param>
        <summary>Выполняет заданный объект <see cref="T:System.Action" /> синхронно в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action, priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback">Делегат, вызываемый с помощью диспетчера.</param>
        <param name="priority">Приоритет, определяющий очередность вызова указанного метода обратного вызова по отношению к другим ожидающим операциям в объекте <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
        <summary>Выполняет указанный объект <see cref="T:System.Action" /> синхронно с заданным приоритетом в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">Делегат метода с параметрами, указанными в <paramref name="args" />, который помещен в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
        <param name="args">Массив объектов, передаваемых в качестве аргументов указанному методу. Может иметь значение <see langword="null" />.</param>
        <summary>Выполняет указанный делегат синхронно с заданными аргументами в потоке, с которым связан объект <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <returns>Значение, возвращаемое вызываемым делегатом, или <see langword="null" />, если делегат не возвращает никакого значения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту. Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса. Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса. Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> <xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным. Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority>  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронной операцией; Поэтому Управление не вернется к вызывающему объекту до тех пор, пока не будет возвращен обратный вызов.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</param>
        <param name="method">Делегат метода без аргументов, помещенный в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
        <summary>Выполняет указанный делегат синхронно, с заданным приоритетом, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <returns>Значение, возвращаемое вызываемым делегатом, или <see langword="null" />, если делегат не возвращает никакого значения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту.  Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса.  Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса.  Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>  <xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным.  Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority>  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронной операцией; Поэтому Управление не вернется к вызывающему объекту до тех пор, пока не будет возвращен обратный вызов.  
  
   
  
## Examples  
 В следующем примере делегат помещается в <xref:System.Windows.Threading.Dispatcher> объект <xref:System.Windows.Threading.DispatcherPriority.Normal> при <xref:System.Windows.Threading.Dispatcher.Invoke%2A>помощи.  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="priority" /> равно <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" /> не является допустимым приоритетом.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="method" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback">Делегат, вызываемый с помощью диспетчера.</param>
        <param name="priority">Приоритет, определяющий очередность вызова указанного метода обратного вызова по отношению к другим ожидающим операциям в объекте <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
        <param name="cancellationToken">Объект, указывающий, следует ли отменить действие.</param>
        <summary>Выполняет указанный объект <see cref="T:System.Action" /> синхронно с заданным приоритетом в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">Делегат метода с параметрами, указанными в <paramref name="args" />, который помещен в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
        <param name="timeout">Максимальное время ожидания завершения операции.</param>
        <param name="args">Массив объектов, передаваемых в качестве аргументов указанному методу. Может иметь значение <see langword="null" />.</param>
        <summary>Выполняет указанный делегат в течение заданного промежутка времени, синхронно, с заданными приоритетом и аргументами, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <returns>Значение, возвращаемое вызываемым делегатом, или <see langword="null" />, если делегат не возвращает никакого значения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту. Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса. Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса. Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> <xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным. Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority>  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронной операцией; Поэтому Управление не вернется к вызывающему объекту до тех пор, пока не будет возвращен обратный вызов.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">Делегат метода с параметрами, указанными в <paramref name="args" />, который помещен в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
        <param name="priority">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</param>
        <param name="args">Массив объектов, передаваемых в качестве аргументов указанному методу. Может иметь значение <see langword="null" />.</param>
        <summary>Выполняет указанный делегат синхронно, с заданными приоритетом и аргументами, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <returns>Значение, возвращаемое вызываемым делегатом, или <see langword="null" />, если делегат не возвращает никакого значения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту. Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса. Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса. Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> <xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным. Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority>  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронной операцией; Поэтому Управление не вернется к вызывающему объекту до тех пор, пока не будет возвращен обратный вызов.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</param>
        <param name="method">Делегат метода с одним аргументом, помещенный в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
        <param name="arg">Объект, передаваемый в качестве аргумента указанному методу.</param>
        <summary>Выполняет указанный делегат синхронно, с заданными приоритетом и аргументом, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <returns>Значение, возвращаемое вызываемым делегатом, или <see langword="null" />, если делегат не возвращает никакого значения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Arg`может быть `null` , если аргумент не требуется  
  
 В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту.  Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса.  Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса.  Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>  <xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным.  Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority>  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронной операцией; Поэтому Управление не вернется к вызывающему объекту до тех пор, пока не будет возвращен обратный вызов.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="priority" /> равно <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" /> не является допустимым приоритетом.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="method" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</param>
        <param name="timeout">Максимальное время ожидания завершения операции.</param>
        <param name="method">Делегат метода без аргументов, помещенный в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
        <summary>Выполняет указанный делегат асинхронно, с заданными приоритетом и значением таймаута, в потоке, в котором был создан объект <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <returns>Значение, возвращаемое вызываемым делегатом, или <see langword="null" />, если делегат не возвращает никакого значения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту.  Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса.  Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса.  Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>  <xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным.  Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority>  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронной операцией; Поэтому Управление не вернется к вызывающему объекту до тех пор, пока не будет возвращен обратный вызов.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="3" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback">Делегат, вызываемый с помощью диспетчера.</param>
        <param name="priority">Приоритет, определяющий очередность вызова указанного метода обратного вызова по отношению к другим ожидающим операциям в объекте <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
        <param name="cancellationToken">Объект, указывающий, следует ли отменить действие.</param>
        <param name="timeout">Минимальное время ожидания запуска операции.</param>
        <summary>Выполняет указанный объект <see cref="T:System.Action" /> синхронно с заданным приоритетом в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">Делегат метода с параметрами, указанными в <paramref name="args" />, который помещен в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
        <param name="timeout">Максимальное время ожидания завершения операции.</param>
        <param name="priority">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</param>
        <param name="args">Массив объектов, передаваемых в качестве аргументов указанному методу. Может иметь значение <see langword="null" />.</param>
        <summary>Выполняет указанный делегат в течение заданного промежутка времени, синхронно, с заданными приоритетом и аргументами, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <returns>Значение, возвращаемое вызываемым делегатом, или <see langword="null" />, если делегат не возвращает никакого значения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту. Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса. Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса. Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> <xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным. Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority>  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронной операцией; Поэтому Управление не вернется к вызывающему объекту до тех пор, пока не будет возвращен обратный вызов.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</param>
        <param name="method">Делегат метода с несколькими аргументами, помещенный в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
        <param name="arg">Объект, передаваемый в качестве аргумента указанному методу.</param>
        <param name="args">Массив объектов, передаваемых в качестве аргументов указанному методу.</param>
        <summary>Выполняет указанный делегат синхронно, с заданными приоритетом и аргументами, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <returns>Значение, возвращаемое вызываемым делегатом, или <see langword="null" />, если делегат не возвращает никакого значения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Arg`может быть `null` , если аргумент не требуется  
  
 В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту.  Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса.  Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса.  Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>  <xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным.  Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority>  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронной операцией; Поэтому Управление не вернется к вызывающему объекту до тех пор, пока не будет возвращен обратный вызов.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="priority" /> равно <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" /> не является допустимым приоритетом.</exception>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="method" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</param>
        <param name="timeout">Максимальное время ожидания завершения операции.</param>
        <param name="method">Делегат метода с несколькими аргументами, помещенный в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
        <param name="arg">Объект, передаваемый в качестве аргумента указанному методу. Это может быть значение <see langword="null" />, если аргументы не требуются.</param>
        <summary>Выполняет указанный делегат синхронно, с заданными приоритетом и аргументом, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <returns>Значение, возвращаемое вызываемым делегатом, или <see langword="null" />, если делегат не возвращает никакого значения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Arg`может быть `null` , если аргумент не требуется  
  
 В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту.  Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса.  Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса.  Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>  <xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным.  Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority>  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронной операцией; Поэтому Управление не вернется к вызывающему объекту до тех пор, пока не будет возвращен обратный вызов.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="priority" /> равно <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" /> не является допустимым приоритетом.</exception>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="method" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</param>
        <param name="timeout">Максимальное время ожидания завершения операции.</param>
        <param name="method">Делегат метода с несколькими аргументами, помещенный в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
        <param name="arg">Объект, передаваемый в качестве аргумента указанному методу.</param>
        <param name="args">Массив объектов, передаваемых в качестве аргументов указанному методу.</param>
        <summary>Выполняет указанный делегат синхронно, с заданными приоритетом и аргументами, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <returns>Значение, возвращаемое вызываемым делегатом, или <see langword="null" />, если делегат не возвращает никакого значения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Arg`может быть `null` , если аргумент не требуется.  
  
 В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту.  Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса.  Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса.  Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>  <xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным.  Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority>  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронной операцией; Поэтому Управление не вернется к вызывающему объекту до тех пор, пока не будет возвращен обратный вызов.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="priority" /> равно <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" /> не является допустимым <see cref="T:System.Windows.Threading.DispatcherPriority" />.</exception>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="method" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; -&gt; 'Result" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Тип возвращаемого значения указанного делегата.</typeparam>
        <param name="callback">Делегат, вызываемый с помощью диспетчера.</param>
        <summary>Выполняет заданный объект <see cref="T:System.Func`1" /> синхронно в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение, возвращаемое `callback`методом.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Тип возвращаемого значения указанного делегата.</typeparam>
        <param name="callback">Делегат, вызываемый с помощью диспетчера.</param>
        <param name="priority">Приоритет, определяющий очередность вызова указанного метода обратного вызова по отношению к другим ожидающим операциям в объекте <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
        <summary>Выполняет указанный объект <see cref="T:System.Func`1" /> синхронно с заданным приоритетом в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение, возвращаемое `callback`методом.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Тип возвращаемого значения указанного делегата.</typeparam>
        <param name="callback">Делегат, вызываемый с помощью диспетчера.</param>
        <param name="priority">Приоритет, определяющий очередность вызова указанного метода обратного вызова по отношению к другим ожидающим операциям в объекте <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
        <param name="cancellationToken">Объект, указывающий, следует ли отменить операцию.</param>
        <summary>Выполняет указанный объект <see cref="T:System.Func`1" /> синхронно с заданным приоритетом в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение, возвращаемое `callback`методом.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="3" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Тип возвращаемого значения указанного делегата.</typeparam>
        <param name="callback">Делегат, вызываемый с помощью диспетчера.</param>
        <param name="priority">Приоритет, определяющий очередность вызова указанного метода обратного вызова по отношению к другим ожидающим операциям в объекте <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
        <param name="cancellationToken">Объект, указывающий, следует ли отменить операцию.</param>
        <param name="timeout">Минимальное время ожидания запуска операции.</param>
        <summary>Выполняет указанный объект <see cref="T:System.Func`1" /> синхронно с заданным приоритетом в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение, возвращаемое `callback`методом.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Выполняет заданный делегат асинхронно в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback">Делегат, вызываемый с помощью диспетчера.</param>
        <summary>Выполняет заданный объект <see cref="T:System.Action" /> асинхронно в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <returns>Объект, возвращаемый сразу после вызова <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди событий.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action, priority As DispatcherPriority) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback">Делегат, вызываемый с помощью диспетчера.</param>
        <param name="priority">Приоритет, определяющий очередность вызова указанного метода обратного вызова по отношению к другим ожидающим операциям в объекте <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
        <summary>Выполняет указанный объект <see cref="T:System.Action" /> асинхронно с заданным приоритетом в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <returns>Объект, возвращаемый сразу после вызова <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди событий.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback">Делегат, вызываемый с помощью диспетчера.</param>
        <param name="priority">Приоритет, определяющий очередность вызова указанного метода обратного вызова по отношению к другим ожидающим операциям в объекте <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
        <param name="cancellationToken">Объект, указывающий, следует ли отменить действие.</param>
        <summary>Выполняет указанный объект <see cref="T:System.Action" /> асинхронно с заданным приоритетом в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <returns>Объект, возвращаемый сразу после вызова <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди событий.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult)) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Тип возвращаемого значения указанного делегата.</typeparam>
        <param name="callback">Делегат, вызываемый с помощью диспетчера.</param>
        <summary>Выполняет заданный объект <see cref="T:System.Func`1" /> асинхронно в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <returns>Объект, возвращаемый сразу после вызова <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди событий.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Тип возвращаемого значения указанного делегата.</typeparam>
        <param name="callback">Делегат, вызываемый с помощью диспетчера.</param>
        <param name="priority">Приоритет, определяющий очередность вызова указанного метода обратного вызова по отношению к другим ожидающим операциям в объекте <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
        <summary>Выполняет указанный объект <see cref="T:System.Func`1" /> асинхронно с заданным приоритетом в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <returns>Объект, возвращаемый сразу после вызова <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди событий.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Тип возвращаемого значения указанного делегата.</typeparam>
        <param name="callback">Делегат, вызываемый с помощью диспетчера.</param>
        <param name="priority">Приоритет, определяющий очередность вызова указанного метода обратного вызова по отношению к другим ожидающим операциям в объекте <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
        <param name="cancellationToken">Объект, указывающий, следует ли отменить операцию.</param>
        <summary>Выполняет указанный объект <see cref="T:System.Func`1" /> асинхронно с заданным приоритетом в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <returns>Объект, возвращаемый сразу после вызова <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди событий.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeShutdown">
      <MemberSignature Language="C#" Value="public void InvokeShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeShutdown();" />
      <MemberSignature Language="F#" Value="member this.InvokeShutdown : unit -&gt; unit" Usage="dispatcher.InvokeShutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Инициирует синхронный процесс остановки <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A>запрашивает неограниченные разрешения пользовательского интерфейса.  
  
 Когда начинается завершение работы <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> , вызывается событие и <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> устанавливается в `true`значение. <xref:System.Windows.Threading.Dispatcher>  
  
 <xref:System.Windows.Threading.Dispatcher> Не завершает работу полностью до очистки очереди событий.  
  
 Когда диспетчер завершает работу, <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> возникает событие, <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> и свойству присваивается значение `true`.  
  
 После начала процесса завершения работы все ожидающие рабочие элементы в очереди будут прерваны.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">для выключения диспетчера.  Связанные перечисления:<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
      </Docs>
    </Member>
    <Member MemberName="PushFrame">
      <MemberSignature Language="C#" Value="public static void PushFrame (System.Windows.Threading.DispatcherFrame frame);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PushFrame(class System.Windows.Threading.DispatcherFrame frame) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PushFrame (frame As DispatcherFrame)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PushFrame(System::Windows::Threading::DispatcherFrame ^ frame);" />
      <MemberSignature Language="F#" Value="static member PushFrame : System.Windows.Threading.DispatcherFrame -&gt; unit" Usage="System.Windows.Threading.Dispatcher.PushFrame frame" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frame" Type="System.Windows.Threading.DispatcherFrame" />
      </Parameters>
      <Docs>
        <param name="frame">Фрейм для обработки диспетчером.</param>
        <summary>Входит в цикл выполнения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherFrame> Представляет цикл, который обрабатывает ожидающие рабочие элементы.  
  
 Диспетчер обрабатывает очередь рабочих элементов в цикле.  Цикл называется кадром.  Исходный цикл обычно инициируется приложением путем вызова <xref:System.Windows.Threading.Dispatcher.Run%2A>.  
  
 <xref:System.Windows.Threading.Dispatcher.PushFrame%2A>входит в цикл, представленный параметром `frame`.  При каждой итерации цикла <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherFrame> компонент <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> проверяет свойство класса, чтобы определить, следует ли продолжить цикл или его следует прекратить.  
  
 <xref:System.Windows.Threading.DispatcherFrame>позволяет задать <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> <xref:System.Windows.Threading.Dispatcher>свойство явным образом и учитывать свойство в. <xref:System.Windows.Threading.DispatcherFrame.Continue%2A>  Это означает, что <xref:System.Windows.Threading.Dispatcher> когда начинается завершение работы, кадры, использующие реализацию по <xref:System.Windows.Threading.DispatcherFrame> умолчанию, будут завершаться, что позволяет выйти из всех вложенных фреймов.  
  
   
  
## Examples  
 В следующем примере показано, <xref:System.Windows.Threading.DispatcherFrame> как использовать для достижения аналогичных результатов [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> в методе.  
  
 [!code-csharp[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdispatcherframedoevents)]
 [!code-vb[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdispatcherframedoevents)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="frame" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> равно <see langword="true" />  
  
- или - 
 <paramref name="frame" /> выполняется с другим <see cref="T:System.Windows.Threading.Dispatcher" />.  
  
- или - 
Диспетчер отключен.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">для принудительной отправки кадра выполнения.  Связанные перечисления:<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Run" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run();" />
      <MemberSignature Language="F#" Value="static member Run : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.Run " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Помещает главный фрейм выполнения в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.Dispatcher> Обрабатывает очередь событий в цикле.  Цикл называется кадром.  Исходный цикл обычно инициируется приложением путем вызова <xref:System.Windows.Threading.Dispatcher.Run%2A>.  
  
 Основной кадр выполнения продолжит работу до <xref:System.Windows.Threading.Dispatcher> завершения работы.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownFinished">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownFinished;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownFinished" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ShutdownFinished As EventHandler " FrameworkAlternate="netcore-3.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownFinished;" />
      <MemberSignature Language="F#" Value="member this.ShutdownFinished : EventHandler " Usage="member this.ShutdownFinished : System.EventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownFinished As EventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит после остановки <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда запускается процесс <xref:System.Windows.Threading.Dispatcher> завершения работы <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> , событие вызывается и <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> устанавливается в `true`значение.  
  
 <xref:System.Windows.Threading.Dispatcher> Не завершает работу полностью до тех пор, пока очередь событий не выматывает.  
  
 Когда диспетчер завершает работу, <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> возникает событие, <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> и свойству присваивается значение `true`.  
  
 После начала процесса завершения работы все ожидающие рабочие элементы в очереди будут прерваны.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="ShutdownStarted">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ShutdownStarted As EventHandler " FrameworkAlternate="netcore-3.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownStarted;" />
      <MemberSignature Language="F#" Value="member this.ShutdownStarted : EventHandler " Usage="member this.ShutdownStarted : System.EventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownStarted As EventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит, когда начинается процесс остановки <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда запускается процесс <xref:System.Windows.Threading.Dispatcher> завершения работы <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> , событие вызывается и <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> устанавливается в `true`значение.  
  
 <xref:System.Windows.Threading.Dispatcher> Не завершает работу полностью до тех пор, пока очередь событий не выматывает.  
  
 Когда диспетчер завершает работу, <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> возникает событие, <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> и свойству присваивается значение `true`.  
  
 После начала процесса завершения работы все ожидающие рабочие элементы в очереди будут прерваны.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="Thread">
      <MemberSignature Language="C#" Value="public System.Threading.Thread Thread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Thread Thread" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Thread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Thread As Thread" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Thread ^ Thread { System::Threading::Thread ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Thread : System.Threading.Thread" Usage="System.Windows.Threading.Dispatcher.Thread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает поток, с которым связан данный <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <value>Поток.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledException" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledException As DispatcherUnhandledExceptionEventHandler " FrameworkAlternate="netcore-3.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionEventHandler ^ UnhandledException;" />
      <MemberSignature Language="F#" Value="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " Usage="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event UnhandledException As DispatcherUnhandledExceptionEventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит, когда выбрасывается и никаким кодом не перехватывается исключение потока при выполнении делегата с помощью <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> или <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие возникает, когда исключение, порожденное во время выполнения делегата посредством <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> , не перехвачено.  
  
 Обработчик может пометить исключение как обработанное, что предотвратит вызов внутреннего обработчика исключений.  
  
 Обработчики событий для этого события должны быть написаны с осторожностью, чтобы не создавать вторичные исключения и перехватывать все, что произошло. Рекомендуется избегать выделения памяти или выполнения операций, интенсивно использующих ресурсы, в обработчике.  
  
 Событие предоставляет средства, которые не <xref:System.Windows.Threading.Dispatcher.UnhandledException> вызывают событие. <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>  <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> <xref:System.Windows.Threading.Dispatcher.UnhandledException> `false`Событие создается первым, а если для имеет значение, событие не будет вызвано. <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UnhandledExceptionFilter">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledExceptionFilter As DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionFilterEventHandler ^ UnhandledExceptionFilter;" />
      <MemberSignature Language="F#" Value="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " Usage="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит, когда выбрасывается и никаким кодом не перехватывается исключение потока при выполнении делегата с помощью <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> или <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> на стадии фильтра.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие возникает на этапе фильтрации для исключения, которое вызывается во время выполнения делегата посредством <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> , и не перехватывается.  
  
 В данный момент стек вызовов не развернут (первый-экземпляр исключения).  
  
 Обработчики событий для этого события должны быть написаны с осторожностью, чтобы не создавать вторичные исключения и перехватывать все, что произошло.  Рекомендуется избегать выделения памяти или выполнения операций, интенсивно использующих ресурсы, в обработчике.  
  
 Событие предоставляет средства, которые не <xref:System.Windows.Threading.Dispatcher.UnhandledException> вызывают событие. <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>  <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> <xref:System.Windows.Threading.Dispatcher.UnhandledException> `false`Событие создается первым, а если для имеет значение, событие не будет вызвано. <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">для добавления или удаления обработчика для этого события.  Связанные перечисления:<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="ValidatePriority">
      <MemberSignature Language="C#" Value="public static void ValidatePriority (System.Windows.Threading.DispatcherPriority priority, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidatePriority(valuetype System.Windows.Threading.DispatcherPriority priority, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidatePriority (priority As DispatcherPriority, parameterName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ValidatePriority(System::Windows::Threading::DispatcherPriority priority, System::String ^ parameterName);" />
      <MemberSignature Language="F#" Value="static member ValidatePriority : System.Windows.Threading.DispatcherPriority * string -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ValidatePriority (priority, parameterName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="priority">Проверяемый приоритет.</param>
        <param name="parameterName">Строка, которая будет возвращена исключением, которое будет сгенерировано, если приоритет окажется недействительным.</param>
        <summary>Определяет, является ли <see cref="T:System.Windows.Threading.DispatcherPriority" /> допустимым приоритетом.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" /> не является допустимым <see cref="T:System.Windows.Threading.DispatcherPriority" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyAccess">
      <MemberSignature Language="C#" Value="public void VerifyAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyAccess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyAccess();" />
      <MemberSignature Language="F#" Value="member this.VerifyAccess : unit -&gt; unit" Usage="dispatcher.VerifyAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Определяет, имеет ли вызывающий поток доступ к этому <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Только поток, на <xref:System.Windows.Threading.Dispatcher> котором создается объект, может <xref:System.Windows.Threading.Dispatcher>получить доступ к.  
  
 Этот метод является открытым; Таким образом, любой поток может проверить, имеет ли он доступ к <xref:System.Windows.Threading.Dispatcher>.  
  
 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> Разница между <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> и возвращает логическое значение, если <xref:System.Windows.Threading.Dispatcher> вызывающий поток не имеет доступа к и создает исключение. <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>  
  
   
  
## Examples  
 В следующем примере используется <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> для определения того, имеет ли поток доступ к потоку, <xref:System.Windows.Controls.Button> на котором был создан объект.  Метод принимает объект в качестве аргумента, который приводится к <xref:System.Windows.Controls.Button>типу.  Метод для <xref:System.Windows.Threading.Dispatcher> метода<xref:System.Windows.Controls.Button> вызывается для проверки доступа к потоку. <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A>  
  
 Если вызывающий поток имеет доступ <xref:System.Windows.Threading.Dispatcher>к <xref:System.Windows.Controls.Button> , компонент обновляется путем простого <xref:System.Windows.Controls.Button>доступа к членам.  
  
 Если вызывающий поток не имеет доступа, <xref:System.InvalidOperationException> создается исключение.  В этом примере перехватывается исключение и отправляется делегат, который принимает в <xref:System.Windows.Controls.Button> качестве аргумента в объект. <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Controls.Button>  При <xref:System.Windows.Threading.Dispatcher> этом будет выполняться <xref:System.Windows.Controls.Button>обновление.  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccessverifyaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccessverifyaccess)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Вызывающий поток не имеет доступа к этому <see cref="T:System.Windows.Threading.Dispatcher" />.</exception>
        <altmember cref="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Yield">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Создает объект типа awaitable, который асинхронно направляет элемент управления обратно текущему диспетчеру и предоставляет диспетчеру возможность обработки других событий.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield();" />
      <MemberSignature Language="F#" Value="static member Yield : unit -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Создает объект типа awaitable, который асинхронно направляет элемент управления обратно текущему диспетчеру и предоставляет диспетчеру возможность обработки других событий.</summary>
        <returns>Объект типа awaitable, который асинхронно направляет элемент управления обратно текущему диспетчеру и предоставляет диспетчеру возможность обработки других событий.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод позволяет временно выпустить элемент управления выполнением для текущего Dispatcher, чтобы он мог выполнять другие действия, такие как обработка других событий. `await`Используйте или`Await` в Visual Basic оператор для возвращаемого значения, чтобы вернуть управление текущему диспетчеру. Используйте этот метод, если вы хотите дать приложению возможность обрабатывать события, когда приложение выполняет большой объем работы в потоке пользовательского интерфейса. Например, этот метод можно использовать в долгосрочном цикле, который обновляет элемент управления.  
  
 Этот метод эквивалентен вызову <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> метода и <xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>передаче.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield (priority As DispatcherPriority) As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="static member Yield : System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="priority">Приоритет, с которым следует планировать продолжение.</param>
        <summary>Создает объект типа awaitable, который асинхронно направляет элемент управления обратно текущему диспетчеру и предоставляет диспетчеру возможность обработки других событий.  Работа, происходящая, когда элемент управления возвращается к коду, ожидающему результата этого метода, запланирован с указанным приоритетом.</summary>
        <returns>Объект типа awaitable, который асинхронно направляет элемент управления обратно текущему диспетчеру и предоставляет диспетчеру возможность обработки других событий.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод позволяет временно выпустить элемент управления выполнением для текущего Dispatcher, чтобы он мог выполнять другие действия, такие как обработка других событий. `await`Используйте или`Await` в Visual Basic оператор для возвращаемого значения, чтобы вернуть управление текущему диспетчеру. Используйте этот метод, если вы хотите дать приложению возможность обрабатывать события, когда приложение выполняет большой объем работы в потоке пользовательского интерфейса. Например, этот метод можно использовать в долгосрочном цикле, который обновляет элемент управления.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
