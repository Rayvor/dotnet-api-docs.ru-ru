<Type Name="Dispatcher" FullName="System.Windows.Threading.Dispatcher">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ab9a64e8091e1a2ec87eca8cf5d6ecdc6e07ca7c" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70664156" /></Metadata><TypeSignature Language="C#" Value="public sealed class Dispatcher" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Dispatcher extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.Dispatcher" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Dispatcher" />
  <TypeSignature Language="C++ CLI" Value="public ref class Dispatcher sealed" />
  <TypeSignature Language="F#" Value="type Dispatcher = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="eb9f4-101">Предоставляет службы для управления очередью рабочих элементов для потока.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-101">Provides services for managing the queue of work items for a thread.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-102"><xref:System.Windows.Threading.Dispatcher> Поддерживает приоритетную очередь рабочих элементов для конкретного потока.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-102">The <xref:System.Windows.Threading.Dispatcher> maintains a prioritized queue of work items for a specific thread.</span></span>  
  
 <span data-ttu-id="eb9f4-103">Когда объект <xref:System.Windows.Threading.Dispatcher> создается в потоке, он становится единственным <xref:System.Windows.Threading.Dispatcher> , который может быть связан с <xref:System.Windows.Threading.Dispatcher> потоком, даже если работа завершается.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-103">When a <xref:System.Windows.Threading.Dispatcher> is created on a thread, it becomes the only <xref:System.Windows.Threading.Dispatcher> that can be associated with the thread, even if the <xref:System.Windows.Threading.Dispatcher> is shut down.</span></span>  
  
 <span data-ttu-id="eb9f4-104">Если попытаться получить <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> для текущего потока, <xref:System.Windows.Threading.Dispatcher> а не связать с потоком, будет создан объект <xref:System.Windows.Threading.Dispatcher> .</span><span class="sxs-lookup"><span data-stu-id="eb9f4-104">If you attempt to get the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> for the current thread and a <xref:System.Windows.Threading.Dispatcher> is not associated with the thread, a <xref:System.Windows.Threading.Dispatcher> will be created.</span></span> <span data-ttu-id="eb9f4-105">А <xref:System.Windows.Threading.Dispatcher> также создается при <xref:System.Windows.Threading.DispatcherObject>создании.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-105">A <xref:System.Windows.Threading.Dispatcher> is also created when you create a <xref:System.Windows.Threading.DispatcherObject>.</span></span> <span data-ttu-id="eb9f4-106">При создании <xref:System.Windows.Threading.Dispatcher> в фоновом потоке обязательно завершите работу диспетчера перед выходом из потока.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-106">If you create a <xref:System.Windows.Threading.Dispatcher> on a background thread, be sure to shut down the dispatcher before exiting the thread.</span></span>  
  
 <span data-ttu-id="eb9f4-107"><xref:System.Windows.Threading.Dispatcher> Если работа выключена, ее невозможно перезапустить.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-107">If a <xref:System.Windows.Threading.Dispatcher> is shut down, it cannot be restarted.</span></span>  
  
 <span data-ttu-id="eb9f4-108">В  [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] доступ к <xref:System.Windows.Threading.Dispatcher> может получить только тот объект, который связан с. <xref:System.Windows.Threading.DispatcherObject></span><span class="sxs-lookup"><span data-stu-id="eb9f4-108">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], a <xref:System.Windows.Threading.DispatcherObject> can only be accessed by the <xref:System.Windows.Threading.Dispatcher> it is associated with.</span></span>  <span data-ttu-id="eb9f4-109">Например, фоновый поток не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, связанного с объектом <xref:System.Windows.Threading.Dispatcher> [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] в потоке.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-109">For example, a background thread cannot update the contents of a <xref:System.Windows.Controls.Button> that is associated with the <xref:System.Windows.Threading.Dispatcher> on the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="eb9f4-110"><xref:System.Windows.Controls.ContentControl.Content%2A> Чтобы фоновый поток мог получить доступ к свойству <xref:System.Windows.Controls.Button>, фоновый поток должен <xref:System.Windows.Threading.Dispatcher> делегировать работу связанному с [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] ним потоку.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-110">In order for the background thread to access the <xref:System.Windows.Controls.ContentControl.Content%2A> property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="eb9f4-111">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></span><span class="sxs-lookup"><span data-stu-id="eb9f4-111">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="eb9f4-112"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-112"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="eb9f4-113">Операция добавляется в очередь <xref:System.Windows.Threading.Dispatcher> в указанной. <xref:System.Windows.Threading.DispatcherPriority></span><span class="sxs-lookup"><span data-stu-id="eb9f4-113">The operation is added to the queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="eb9f4-114">Если <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> метод вызывается для <xref:System.Windows.Threading.Dispatcher> объекта, который завершил работу, свойство Status возвращаемого <xref:System.Windows.Threading.DispatcherOperation> значения устанавливается в <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>значение.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-114">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 <span data-ttu-id="eb9f4-115">Все методы в <xref:System.Windows.Threading.Dispatcher>, за <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>исключением, являются свободными потоками.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-115">All of the methods on <xref:System.Windows.Threading.Dispatcher>, with the exception of <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>, are free-threaded.</span></span>  
  
 <span data-ttu-id="eb9f4-116">Объекты, производные от <xref:System.Windows.Threading.DispatcherObject> , имеют сходство потоков.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-116">Objects that derive from <xref:System.Windows.Threading.DispatcherObject> have thread affinity.</span></span>  
  
 <span data-ttu-id="eb9f4-117">Объекты, производные от <xref:System.Windows.Freezable> , являются свободными потоками, когда они заморожены.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-117">Objects that derive from <xref:System.Windows.Freezable> are free-threaded when they are frozen.</span></span>  <span data-ttu-id="eb9f4-118">Дополнительные сведения см. в разделе [Общие сведения об объектах класса Freezable](~/docs/framework/wpf/advanced/freezable-objects-overview.md).</span><span class="sxs-lookup"><span data-stu-id="eb9f4-118">For more information, see [Freezable Objects Overview](~/docs/framework/wpf/advanced/freezable-objects-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb9f4-119">В следующем примере показано, как поместить операцию в <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-119">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="eb9f4-120">Полный исходный код этого примера см. в разделе [Пример однопотокового приложения с длительным выполнением вычислений](https://go.microsoft.com/fwlink/?LinkID=160038).</span><span class="sxs-lookup"><span data-stu-id="eb9f4-120">For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](https://go.microsoft.com/fwlink/?LinkID=160038).</span></span>  
  
 <span data-ttu-id="eb9f4-121">Во-первых, создается делегат, который не принимает аргументы.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-121">First, a delegate is created that accepts no arguments.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <span data-ttu-id="eb9f4-122"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> Затем вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-122">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.</span></span>  <span data-ttu-id="eb9f4-123">Этот вызов <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> принимает два параметра: приоритет, который имеет <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>значение, и обратный вызов, который передается через экземпляр делегата `NextPrimeDelegate`.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-123">This call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="eb9f4-124">Пример приложения с одним потоком с длительным выполнением вычислений</span><span class="sxs-lookup"><span data-stu-id="eb9f4-124">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="eb9f4-125">Выполняет делегат асинхронно, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-125">Executes a delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-126">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-126">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="eb9f4-127">Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-127">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="eb9f4-128">Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-128">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="eb9f4-129">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></span><span class="sxs-lookup"><span data-stu-id="eb9f4-129">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="eb9f4-130"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-130"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="eb9f4-131">Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority></span><span class="sxs-lookup"><span data-stu-id="eb9f4-131">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="eb9f4-132"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>является асинхронным; Следовательно, управление немедленно возвращается вызывающему объекту после его вызова.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-132"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="eb9f4-133"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A><xref:System.Windows.Threading.DispatcherOperation> возвращает объект, который может использоваться для взаимодействия с делегатом, когда делегат находится в очереди событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-133"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="eb9f4-134">Объект, возвращаемый <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> функцией, может использоваться несколькими способами для взаимодействия с указанным делегатом, например: <xref:System.Windows.Threading.DispatcherOperation></span><span class="sxs-lookup"><span data-stu-id="eb9f4-134">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="eb9f4-135"><xref:System.Windows.Threading.DispatcherPriority> Изменение объекта делегата, так как он ожидает выполнения в очереди событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-135">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="eb9f4-136">Удаление делегата из очереди событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-136">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="eb9f4-137">Ожидание возврата делегата.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-137">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="eb9f4-138">Получение значения, возвращаемого делегатом после его выполнения.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-138">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="eb9f4-139">Если несколько <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> вызовов выполняются в одной и той <xref:System.Windows.Threading.DispatcherPriority>же последовательности, они будут выполняться в том порядке, в котором были выполнены вызовы.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-139">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="eb9f4-140">Если <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> метод вызывается для <xref:System.Windows.Threading.Dispatcher> объекта, который завершил работу, свойство Status возвращаемого <xref:System.Windows.Threading.DispatcherOperation> значения устанавливается в <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>значение.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-140">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="eb9f4-141">Делегат метода с параметрами, указанными в <paramref name="args" />, который помещен в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-141">The delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="args"><span data-ttu-id="eb9f4-142">Массив объектов, передаваемых в качестве аргументов указанному методу.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-142">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="eb9f4-143">Может иметь значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-143">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="eb9f4-144">Выполняет указанный делегат асинхронно с указанными аргументами в потоке, в котором был создан объект <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-144">Executes the specified delegate asynchronously with the specified arguments on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span></span></summary>
        <returns><span data-ttu-id="eb9f4-145">Объект, возвращаемый сразу после вызова <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-145">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-146">Объект, возвращаемый <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> функцией, может использоваться несколькими способами для взаимодействия с указанным делегатом, например: <xref:System.Windows.Threading.DispatcherOperation></span><span class="sxs-lookup"><span data-stu-id="eb9f4-146">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="eb9f4-147"><xref:System.Windows.Threading.DispatcherPriority> Изменение объекта делегата, так как он ожидает выполнения в очереди событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-147">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="eb9f4-148">Удаление делегата из очереди событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-148">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="eb9f4-149">Ожидание возврата делегата.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-149">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="eb9f4-150">Получение значения, возвращаемого делегатом после его выполнения.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-150">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="eb9f4-151"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>является асинхронным; Следовательно, управление немедленно возвращается вызывающему объекту после его вызова.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-151"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="eb9f4-152">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-152">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="eb9f4-153">Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-153">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="eb9f4-154">Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-154">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="eb9f4-155">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></span><span class="sxs-lookup"><span data-stu-id="eb9f4-155">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="eb9f4-156"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-156"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="eb9f4-157">Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority></span><span class="sxs-lookup"><span data-stu-id="eb9f4-157">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="eb9f4-158">Если <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> метод вызывается для <xref:System.Windows.Threading.Dispatcher> объекта, который завершил работу, свойство Status возвращаемого <xref:System.Windows.Threading.DispatcherOperation> значения устанавливается в <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>значение.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-158">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="eb9f4-159">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-159">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="eb9f4-160">Делегат метода без аргументов, помещенный в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-160">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="eb9f4-161">Выполняет указанный делегат асинхронно, с заданным приоритетом, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-161">Executes the specified delegate asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="eb9f4-162">Объект, возвращаемый сразу после вызова <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-162">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-163">Если несколько <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> вызовов выполняются в одной и той <xref:System.Windows.Threading.DispatcherPriority>же последовательности, они будут выполняться в том порядке, в котором были выполнены вызовы.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-163">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="eb9f4-164"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A><xref:System.Windows.Threading.DispatcherOperation> возвращает объект, который может использоваться для взаимодействия с делегатом, когда делегат находится в очереди событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-164"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="eb9f4-165">Объект, возвращаемый <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> функцией, может использоваться несколькими способами для взаимодействия с указанным делегатом, например: <xref:System.Windows.Threading.DispatcherOperation></span><span class="sxs-lookup"><span data-stu-id="eb9f4-165">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="eb9f4-166"><xref:System.Windows.Threading.DispatcherPriority> Изменение объекта делегата, так как он ожидает выполнения в очереди событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-166">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="eb9f4-167">Удаление делегата из очереди событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-167">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="eb9f4-168">Ожидание возврата делегата.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-168">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="eb9f4-169">Получение значения, возвращаемого делегатом после его выполнения.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-169">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="eb9f4-170"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>является асинхронным; Следовательно, управление немедленно возвращается вызывающему объекту после его вызова.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-170"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="eb9f4-171">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-171">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="eb9f4-172">Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-172">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="eb9f4-173">Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-173">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="eb9f4-174">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></span><span class="sxs-lookup"><span data-stu-id="eb9f4-174">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="eb9f4-175"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-175"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="eb9f4-176">Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority></span><span class="sxs-lookup"><span data-stu-id="eb9f4-176">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="eb9f4-177">Если <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> метод вызывается для <xref:System.Windows.Threading.Dispatcher> объекта, который завершил работу, свойство Status возвращаемого <xref:System.Windows.Threading.DispatcherOperation> значения устанавливается в <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>значение.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-177">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb9f4-178">В следующем примере показано, как поместить операцию в <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-178">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="eb9f4-179">Полный исходный код этого примера см. в разделе [Пример однопотокового приложения с длительным выполнением вычислений](https://go.microsoft.com/fwlink/?LinkID=160038).</span><span class="sxs-lookup"><span data-stu-id="eb9f4-179">For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](https://go.microsoft.com/fwlink/?LinkID=160038).</span></span>  
  
 <span data-ttu-id="eb9f4-180">Во-первых, создается делегат, который не принимает аргументы.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-180">First, a delegate is created that accepts no arguments.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <span data-ttu-id="eb9f4-181"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> Затем вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-181">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.</span></span>  <span data-ttu-id="eb9f4-182">Поскольку каждый <xref:System.Windows.Threading.DispatcherObject> <xref:System.Windows.Threading.Dispatcher> из них имеет свойство, которое возвращает, что он связан с, <xref:System.Windows.Threading.Dispatcher> нужно получить, выполнив <xref:System.Windows.Controls.Button> запрос <xref:System.Windows.Threading.DispatcherObject>к, в данном случае с `startStopButton`именем.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-182">Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Button> named `startStopButton`.</span></span>   <span data-ttu-id="eb9f4-183">Вызов <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> принимает два параметра: приоритет, который имеет <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>значение, и обратный вызов, который передается через экземпляр делегата `NextPrimeDelegate`.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-183">The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eb9f4-184">Свойство <paramref name="method" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-184"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="eb9f4-185"><paramref name="priority" /> не является допустимым <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-185"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="eb9f4-186">Пример приложения с одним потоком с длительным выполнением вычислений</span><span class="sxs-lookup"><span data-stu-id="eb9f4-186">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="eb9f4-187">Делегат метода с параметрами, указанными в <paramref name="args" />, который помещен в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-187">The delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="priority"><span data-ttu-id="eb9f4-188">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-188">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="args"><span data-ttu-id="eb9f4-189">Массив объектов, передаваемых в качестве аргументов указанному методу.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-189">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="eb9f4-190">Может иметь значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-190">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="eb9f4-191">Выполняет указанный делегат асинхронно, с заданными приоритетом и аргументами, в потоке, в котором был создан объект <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-191">Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span></span></summary>
        <returns><span data-ttu-id="eb9f4-192">Объект, возвращаемый сразу после вызова <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-192">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-193">Объект, возвращаемый <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> функцией, может использоваться несколькими способами для взаимодействия с указанным делегатом, например: <xref:System.Windows.Threading.DispatcherOperation></span><span class="sxs-lookup"><span data-stu-id="eb9f4-193">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="eb9f4-194"><xref:System.Windows.Threading.DispatcherPriority> Изменение объекта делегата, так как он ожидает выполнения в очереди событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-194">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="eb9f4-195">Удаление делегата из очереди событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-195">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="eb9f4-196">Ожидание возврата делегата.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-196">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="eb9f4-197">Получение значения, возвращаемого делегатом после его выполнения.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-197">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="eb9f4-198"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>является асинхронным; Следовательно, управление немедленно возвращается вызывающему объекту после его вызова.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-198"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="eb9f4-199">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-199">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="eb9f4-200">Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-200">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="eb9f4-201">Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-201">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="eb9f4-202">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></span><span class="sxs-lookup"><span data-stu-id="eb9f4-202">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="eb9f4-203"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-203"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="eb9f4-204">Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority></span><span class="sxs-lookup"><span data-stu-id="eb9f4-204">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="eb9f4-205">Если <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> метод вызывается для <xref:System.Windows.Threading.Dispatcher> объекта, который завершил работу, свойство Status возвращаемого <xref:System.Windows.Threading.DispatcherOperation> значения устанавливается в <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>значение.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-205">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="eb9f4-206">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-206">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="eb9f4-207">Делегат метода с одним аргументом, помещенный в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-207">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="eb9f4-208">Объект, передаваемый в качестве аргумента указанному методу.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-208">The object to pass as an argument to the specified method.</span></span></param>
        <summary><span data-ttu-id="eb9f4-209">Выполняет указанный делегат асинхронно, с заданными приоритетом и аргументом, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-209">Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="eb9f4-210">Объект, возвращаемый сразу после вызова <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-210">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-211">`Arg`может быть `null` , если аргументы не требуются.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-211">`Arg` can be `null` if no arguments are needed.</span></span>  
  
 <span data-ttu-id="eb9f4-212"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A><xref:System.Windows.Threading.DispatcherOperation> возвращает объект, который может использоваться для взаимодействия с делегатом, когда делегат находится в очереди событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-212"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="eb9f4-213">Объект, возвращаемый <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> функцией, может использоваться несколькими способами для взаимодействия с указанным делегатом, например: <xref:System.Windows.Threading.DispatcherOperation></span><span class="sxs-lookup"><span data-stu-id="eb9f4-213">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="eb9f4-214"><xref:System.Windows.Threading.DispatcherPriority> Изменение объекта делегата, так как он ожидает выполнения в очереди событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-214">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="eb9f4-215">Удаление делегата из очереди событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-215">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="eb9f4-216">Ожидание возврата делегата.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-216">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="eb9f4-217">Получение значения, возвращаемого делегатом после его выполнения.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-217">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="eb9f4-218"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>является асинхронным; Следовательно, управление немедленно возвращается вызывающему объекту после его вызова.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-218"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="eb9f4-219">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-219">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="eb9f4-220">Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-220">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="eb9f4-221">Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-221">In order for the background thread to access the content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="eb9f4-222">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></span><span class="sxs-lookup"><span data-stu-id="eb9f4-222">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="eb9f4-223"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-223"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="eb9f4-224">Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority></span><span class="sxs-lookup"><span data-stu-id="eb9f4-224">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="eb9f4-225">Если несколько <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> вызовов выполняются в одной и той <xref:System.Windows.Threading.DispatcherPriority>же последовательности, они будут выполняться в том порядке, в котором были выполнены вызовы.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-225">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="eb9f4-226">Если <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> метод вызывается для <xref:System.Windows.Threading.Dispatcher> объекта, который завершил работу, свойство Status возвращаемого <xref:System.Windows.Threading.DispatcherOperation> значения устанавливается в <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>значение.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-226">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb9f4-227">В следующем примере показано, как поместить операцию в <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-227">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="eb9f4-228">Во-первых, создается делегат, принимающий один аргумент, в данном случае строка.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-228">First, a delegate is created that accepts one argument, in this case a string.</span></span>  
  
 [!code-csharp[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdelegates)]
 [!code-vb[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdelegates)]  
  
 <span data-ttu-id="eb9f4-229"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> Затем вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-229">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> is called.</span></span>  <span data-ttu-id="eb9f4-230">Поскольку каждый <xref:System.Windows.Threading.DispatcherObject> <xref:System.Windows.Threading.Dispatcher> из них имеет свойство, которое возвращает, что он связан с, <xref:System.Windows.Threading.Dispatcher> нужно получить, выполнив <xref:System.Windows.Controls.Grid> запрос <xref:System.Windows.Threading.DispatcherObject>к, в данном случае с `tomorrowsWeather`именем.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-230">Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Grid> named `tomorrowsWeather`.</span></span> <span data-ttu-id="eb9f4-231">Вызов <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> принимает три параметра: приоритет, который имеет <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>значение; обратный вызов, который передается через экземпляр делегата `OneArgDelegate`, и строку с именем `weather`, которая является аргументом для обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-231">The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> takes three parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>; the callback, which is passed in through an instance of the delegate `OneArgDelegate`; and a string named `weather`, which is the argument for the callback.</span></span>  
  
 [!code-csharp[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdispatcheronearge)]
 [!code-vb[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdispatcheronearge)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eb9f4-232">Свойство <paramref name="method" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-232"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="eb9f4-233"><paramref name="priority" /> не является допустимым <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-233"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="eb9f4-234">Пример приложения с одним потоком с длительным выполнением вычислений</span><span class="sxs-lookup"><span data-stu-id="eb9f4-234">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="eb9f4-235">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-235">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="eb9f4-236">Делегат метода с несколькими аргументами, помещенный в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-236">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="eb9f4-237">Объект, передаваемый в качестве аргумента указанному методу.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-237">The object to pass as an argument to the specified method.</span></span></param>
        <param name="args"><span data-ttu-id="eb9f4-238">Массив объектов, передаваемых в качестве аргументов указанному методу.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-238">An array of objects to pass as arguments to the specified method.</span></span></param>
        <summary><span data-ttu-id="eb9f4-239">Выполняет указанный делегат асинхронно, с заданными приоритетом и массивом аргументов, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-239">Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="eb9f4-240">Объект, возвращаемый сразу после вызова <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-240">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-241">Параметр `arg` может иметь `null` значение, если аргументы не требуются.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-241">The `arg` parameter can be `null` if no arguments are needed.</span></span>  
  
 <span data-ttu-id="eb9f4-242"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A><xref:System.Windows.Threading.DispatcherOperation> возвращает объект, который может использоваться для взаимодействия с делегатом, когда делегат находится в очереди событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-242"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="eb9f4-243">Объект, возвращаемый <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> функцией, может использоваться несколькими способами для взаимодействия с указанным делегатом, например: <xref:System.Windows.Threading.DispatcherOperation></span><span class="sxs-lookup"><span data-stu-id="eb9f4-243">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="eb9f4-244"><xref:System.Windows.Threading.DispatcherPriority> Изменение объекта делегата, так как он ожидает выполнения в очереди событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-244">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="eb9f4-245">Удаление делегата из очереди событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-245">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="eb9f4-246">Ожидание возврата делегата.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-246">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="eb9f4-247">Получение значения, возвращаемого делегатом после его выполнения.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-247">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="eb9f4-248"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>является асинхронным; Следовательно, управление немедленно возвращается вызывающему объекту после его вызова.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-248"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="eb9f4-249">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-249">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="eb9f4-250">Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-250">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="eb9f4-251">Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-251">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="eb9f4-252">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></span><span class="sxs-lookup"><span data-stu-id="eb9f4-252">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="eb9f4-253"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-253"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="eb9f4-254">Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority></span><span class="sxs-lookup"><span data-stu-id="eb9f4-254">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="eb9f4-255">Если несколько <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> вызовов выполняются в одной и той <xref:System.Windows.Threading.DispatcherPriority>же последовательности, они будут выполняться в том порядке, в котором были выполнены вызовы.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-255">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="eb9f4-256">Если <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> метод вызывается для <xref:System.Windows.Threading.Dispatcher> объекта, который завершил работу, свойство Status возвращаемого <xref:System.Windows.Threading.DispatcherOperation> значения устанавливается в <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>значение.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-256">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eb9f4-257">Свойство <paramref name="method" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-257"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="eb9f4-258"><see cref="T:System.Windows.Threading.DispatcherPriority" /> не является допустимым приоритетом.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-258"><see cref="T:System.Windows.Threading.DispatcherPriority" /> is not a valid priority.</span></span></exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="eb9f4-259">Пример приложения с одним потоком с длительным выполнением вычислений</span><span class="sxs-lookup"><span data-stu-id="eb9f4-259">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvokeShutdown">
      <MemberSignature Language="C#" Value="public void BeginInvokeShutdown (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginInvokeShutdown(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInvokeShutdown (priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginInvokeShutdown(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.BeginInvokeShutdown : System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.BeginInvokeShutdown priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="eb9f4-260">Приоритет, с которым начинается остановка диспетчера.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-260">The priority at which to begin shutting down the dispatcher.</span></span></param>
        <summary><span data-ttu-id="eb9f4-261">Инициализирует асинхронную остановку <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-261">Initiates shutdown of the <see cref="T:System.Windows.Threading.Dispatcher" /> asynchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-262"><xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A>запрашивает неограниченные разрешения пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-262"><xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> demands unrestricted UI Permissions.</span></span>  
  
 <span data-ttu-id="eb9f4-263">Когда начинается завершение работы <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> , вызывается событие и <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> устанавливается в `true`значение. <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="eb9f4-263">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="eb9f4-264"><xref:System.Windows.Threading.Dispatcher> Не завершает работу полностью до очистки очереди событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-264">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="eb9f4-265">Когда диспетчер завершает работу, <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> возникает событие, <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> и свойству присваивается значение `true`.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-265">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="eb9f4-266">После начала процесса завершения работы все ожидающие рабочие элементы в очереди будут прерваны.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-266">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="eb9f4-267">для выключения диспетчера.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-267">for shutting down the dispatcher.</span></span>  <span data-ttu-id="eb9f4-268">Связанные перечисления:<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="eb9f4-268">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public bool CheckAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckAccess () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckAccess();" />
      <MemberSignature Language="F#" Value="member this.CheckAccess : unit -&gt; bool" Usage="dispatcher.CheckAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="eb9f4-269">Определяет, связан ли вызывающий поток с данным <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-269">Determines whether the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <returns><span data-ttu-id="eb9f4-270">Значение <see langword="true" />, если вызывающий поток связан с данным <see cref="T:System.Windows.Threading.Dispatcher" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-270"><see langword="true" /> if the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-271">Доступ к <xref:System.Windows.Threading.Dispatcher> объекту может <xref:System.Windows.Threading.DispatcherObject> получить только то, что создается для.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-271">Only the <xref:System.Windows.Threading.Dispatcher> that a <xref:System.Windows.Threading.DispatcherObject> is created on may access the object.</span></span>  <span data-ttu-id="eb9f4-272">Используйте <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>  для доступа к объекту из другого потока.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-272">Use <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> to access the object from a different thread.</span></span>  
  
 <span data-ttu-id="eb9f4-273"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>может вызываться из любого потока.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-273"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> can be called from any thread.</span></span>  
  
 <span data-ttu-id="eb9f4-274"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> Разница между <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> и возвращает логическое значение, указывающее, имеет <xref:System.Windows.Threading.Dispatcher> ли вызывающий поток доступ к и создает исключение. <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A></span><span class="sxs-lookup"><span data-stu-id="eb9f4-274">The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean indicating whether the calling thread has access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb9f4-275">В следующем примере используется <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> для определения того, имеет ли поток доступ <xref:System.Windows.Controls.Button>к.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-275">The following example uses <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> to determine whether a thread has access to a <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="eb9f4-276">Метод, <xref:System.Windows.Threading.Dispatcher> связанный с, <xref:System.Windows.Controls.Button> вызывается для проверки доступа к потоку. <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A></span><span class="sxs-lookup"><span data-stu-id="eb9f4-276">The <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> associated with the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  <span data-ttu-id="eb9f4-277">Если вызывающий поток <xref:System.Windows.Threading.Dispatcher>имеет доступ к <xref:System.Windows.Controls.Button> , компонент обновляется путем <xref:System.Windows.Controls.Button>доступа к членам. в противном случае делегат, который принимает в <xref:System.Windows.Controls.Button> качестве аргумента, помещается в <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-277">If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by accessing the members of the <xref:System.Windows.Controls.Button>; otherwise, a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, is placed onto the <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="eb9f4-278">Будет делегировать работу по <xref:System.Windows.Controls.Button>обновлению. <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="eb9f4-278">The <xref:System.Windows.Threading.Dispatcher> will delegate the work of updating the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccesscheckaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccesscheckaccess)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      </Docs>
    </Member>
    <Member MemberName="CurrentDispatcher">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher CurrentDispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Threading.Dispatcher CurrentDispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentDispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Threading::Dispatcher ^ CurrentDispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDispatcher : System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="eb9f4-279">Возвращает <see cref="T:System.Windows.Threading.Dispatcher" /> для выполняющегося в данный момент потока и создает новый объект <see cref="T:System.Windows.Threading.Dispatcher" />, если с потоком еще не связан диспетчер.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-279">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the thread currently executing and creates a new <see cref="T:System.Windows.Threading.Dispatcher" /> if one is not already associated with the thread.</span></span></summary>
        <value><span data-ttu-id="eb9f4-280">Диспетчер, связанный с текущим потоком.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-280">The dispatcher associated with the current thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-281">Если объект <xref:System.Windows.Threading.Dispatcher> не связан с текущим потоком, будет создан новый <xref:System.Windows.Threading.Dispatcher> объект.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-281">If a <xref:System.Windows.Threading.Dispatcher> is not associated with the current thread, a new <xref:System.Windows.Threading.Dispatcher> will be created.</span></span>  <span data-ttu-id="eb9f4-282">С методом <xref:System.Windows.Threading.Dispatcher.FromThread%2A> это не так.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-282">This is not the case with the <xref:System.Windows.Threading.Dispatcher.FromThread%2A> method.</span></span>  <span data-ttu-id="eb9f4-283"><xref:System.Windows.Threading.Dispatcher.FromThread%2A>Возвращает `null` значение, если отсутствует диспетчер, связанный с указанным потоком.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-283"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> will return `null` if there is not a dispatcher associated with the specified thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableProcessing">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.DisableProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Function DisableProcessing () As DispatcherProcessingDisabled" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherProcessingDisabled DisableProcessing();" />
      <MemberSignature Language="F#" Value="member this.DisableProcessing : unit -&gt; System.Windows.Threading.DispatcherProcessingDisabled" Usage="dispatcher.DisableProcessing " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherProcessingDisabled</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="eb9f4-284">Отменяет обработку очереди <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-284">Disables processing of the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span></span></summary>
        <returns><span data-ttu-id="eb9f4-285">Структура, используемая для повторного включения диспетчера.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-285">A structure used to re-enable dispatcher processing.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-286">Отключение обработки диспетчера является расширенным методом, который предназначен для устранения вероятности несвязанного повторного входа.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-286">Disabling dispatcher processing is an advanced method that is intended to eliminate the chance of unrelated reentrancy.</span></span>  
  
 <span data-ttu-id="eb9f4-287">Ниже приведены последствия отключения обработки.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-287">The effects of disabling processing are as follows:</span></span>  
  
-   <span data-ttu-id="eb9f4-288">Блокировки CLR не будут внутренним образом передавать сообщения.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-288">CLR locks will not pump messages internally.</span></span>  
  
-   <span data-ttu-id="eb9f4-289"><xref:System.Windows.Threading.DispatcherFrame>Отправка объектов запрещена.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-289"><xref:System.Windows.Threading.DispatcherFrame> objects are not allowed to be pushed.</span></span>  
  
-   <span data-ttu-id="eb9f4-290">Обработка сообщений запрещена.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-290">Message processing is not permitted.</span></span>  
  
 <span data-ttu-id="eb9f4-291">Структура, возвращаемая при вызове, <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> может быть использована для повторного включения обработки диспетчера. <xref:System.Windows.Threading.DispatcherProcessingDisabled></span><span class="sxs-lookup"><span data-stu-id="eb9f4-291">The <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns when it is called can be used to re-enable dispatcher processing.</span></span>  <span data-ttu-id="eb9f4-292">Вызов <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> метода <xref:System.Windows.Threading.DispatcherProcessingDisabled>  в структуре повторно включает обработку.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-292">Calling <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure re-enables processing.</span></span>  
  
 <span data-ttu-id="eb9f4-293"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>может вызываться только в потоке, <xref:System.Windows.Threading.Dispatcher> с которым связан объект.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-293"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> can only be called on the thread the <xref:System.Windows.Threading.Dispatcher> is associated with.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb9f4-294">В следующем примере показано, как отключить обработку диспетчера и повторно включить обработку диспетчера.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-294">The following example shows how to disable dispatcher processing and re-enable dispatcher processing.</span></span>  <span data-ttu-id="eb9f4-295"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>вызывается в операторе **using** .</span><span class="sxs-lookup"><span data-stu-id="eb9f4-295"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> is called in a **using** statement.</span></span>  <span data-ttu-id="eb9f4-296"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>Возвращает структуру, используемую в качестве объекта, который должен быть удален при завершении блока **using.** <xref:System.Windows.Threading.DispatcherProcessingDisabled></span><span class="sxs-lookup"><span data-stu-id="eb9f4-296"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns a <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that is used as the object to be disposed when the **using** block finishes.</span></span>  <span data-ttu-id="eb9f4-297">При <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> вызове <xref:System.Windows.Threading.DispatcherProcessingDisabled> в структуре обработка диспетчера включается повторно.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-297">When <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> is called on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure, dispatcher processing is re-enabled.</span></span>  
  
 [!code-csharp[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdisableprocessing)]
 [!code-vb[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdisableprocessing)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitAllFrames">
      <MemberSignature Language="C#" Value="public static void ExitAllFrames ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExitAllFrames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExitAllFrames ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExitAllFrames();" />
      <MemberSignature Language="F#" Value="static member ExitAllFrames : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ExitAllFrames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="eb9f4-298">Запрашивает выход для всех фреймов, включая вложенные.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-298">Requests that all frames exit, including nested frames.</span></span></summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="eb9f4-299">для вызова этого метода.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-299">for calling this method.</span></span> <span data-ttu-id="eb9f4-300">Связанные перечисления:<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="eb9f4-300">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
        <altmember cref="T:System.Windows.Threading.DispatcherFrame" />
      </Docs>
    </Member>
    <Member MemberName="FromThread">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher FromThread (System.Threading.Thread thread);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Threading.Dispatcher FromThread(class System.Threading.Thread thread) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::Dispatcher ^ FromThread(System::Threading::Thread ^ thread);" />
      <MemberSignature Language="F#" Value="static member FromThread : System.Threading.Thread -&gt; System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.FromThread thread" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thread" Type="System.Threading.Thread" />
      </Parameters>
      <Docs>
        <param name="thread"><span data-ttu-id="eb9f4-301">Поток, из которого нужно получить <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-301">The thread to obtain the <see cref="T:System.Windows.Threading.Dispatcher" /> from.</span></span></param>
        <summary><span data-ttu-id="eb9f4-302">Возвращает <see cref="T:System.Windows.Threading.Dispatcher" /> для заданного потока.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-302">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the specified thread.</span></span></summary>
        <returns><span data-ttu-id="eb9f4-303">Диспетчер для <paramref name="thread" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-303">The dispatcher for <paramref name="thread" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-304">Если диспетчер недоступен для указанного потока, `null` будет возвращен.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-304">If a dispatcher is not available for the specified thread, `null` will be returned.</span></span>  
  
 <span data-ttu-id="eb9f4-305"><xref:System.Windows.Threading.Dispatcher.FromThread%2A>не создает объект <xref:System.Windows.Threading.Dispatcher> в потоке, у которого нет <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-305"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> does not create a <xref:System.Windows.Threading.Dispatcher> on a thread that does not have a <xref:System.Windows.Threading.Dispatcher>.</span></span>   <span data-ttu-id="eb9f4-306">Новый <xref:System.Windows.Threading.Dispatcher> объект создается в потоке, который еще не <xref:System.Windows.Threading.Dispatcher> имеет при <xref:System.Windows.Threading.Dispatcher> попытке <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> получить объект с помощью свойства.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-306">A new <xref:System.Windows.Threading.Dispatcher> is created on a thread that does not already have a <xref:System.Windows.Threading.Dispatcher> when attempting to get the <xref:System.Windows.Threading.Dispatcher> by using the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownFinished">
      <MemberSignature Language="C#" Value="public bool HasShutdownFinished { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownFinished" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownFinished As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownFinished { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownFinished : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="eb9f4-307">Определяет, завершил ли объект <see cref="T:System.Windows.Threading.Dispatcher" /> процесс остановки.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-307">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> has finished shutting down.</span></span></summary>
        <value><span data-ttu-id="eb9f4-308"><see langword="true" />, если диспетчер завершил процесс остановки; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-308"><see langword="true" /> if the dispatcher has finished shutting down; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-309">Когда начинается завершение работы <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> , вызывается событие и <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> устанавливается в `true`значение. <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="eb9f4-309">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="eb9f4-310"><xref:System.Windows.Threading.Dispatcher> Не завершает работу полностью до тех пор, пока очередь событий не выматывает.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-310">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="eb9f4-311">Когда диспетчер завершает работу, <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> возникает событие, <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> и свойству присваивается значение `true`.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-311">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="eb9f4-312">После начала процесса завершения работы все ожидающие рабочие элементы в очереди будут прерваны.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-312">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownStarted">
      <MemberSignature Language="C#" Value="public bool HasShutdownStarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownStarted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownStarted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownStarted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownStarted : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="eb9f4-313">Определяет, находится ли объект <see cref="T:System.Windows.Threading.Dispatcher" /> в процессе остановки.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-313">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> is shutting down.</span></span></summary>
        <value><span data-ttu-id="eb9f4-314"><see langword="true" />, если <see cref="T:System.Windows.Threading.Dispatcher" /> начал процесс остановки; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-314"><see langword="true" /> if the <see cref="T:System.Windows.Threading.Dispatcher" /> has started shutting down; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-315">Когда начинается завершение работы <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> , вызывается событие и <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> устанавливается в `true`значение. <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="eb9f4-315">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="eb9f4-316"><xref:System.Windows.Threading.Dispatcher> Не завершает работу полностью до очистки очереди событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-316">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="eb9f4-317">Когда диспетчер завершает работу, <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> возникает событие, <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> и свойству присваивается значение `true`.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-317">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="eb9f4-318">После начала процесса завершения работы все ожидающие рабочие элементы в очереди будут прерваны.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-318">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hooks">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherHooks Hooks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.DispatcherHooks Hooks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Hooks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hooks As DispatcherHooks" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::DispatcherHooks ^ Hooks { System::Windows::Threading::DispatcherHooks ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Hooks : System.Windows.Threading.DispatcherHooks" Usage="System.Windows.Threading.Dispatcher.Hooks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherHooks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="eb9f4-319">Возвращает коллекцию ловушек, предоставляющих дополнительную информацию о <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-319">Gets the collection of hooks that provide additional event information about the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <value><span data-ttu-id="eb9f4-320">Ловушки, связанные с данным <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-320">The hooks associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-321">Класс предоставляет дополнительные сведения <xref:System.Windows.Threading.Dispatcher>о событии <xref:System.Windows.Threading.Dispatcher> , например, когда компонент является неактивным или когда операция была прервана. <xref:System.Windows.Threading.DispatcherHooks></span><span class="sxs-lookup"><span data-stu-id="eb9f4-321">The <xref:System.Windows.Threading.DispatcherHooks> class provides additional event information about the <xref:System.Windows.Threading.Dispatcher>, such as when the <xref:System.Windows.Threading.Dispatcher> is inactive or when an operation has competed.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="eb9f4-322">для получения этого свойства.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-322">for getting this property.</span></span>  <span data-ttu-id="eb9f4-323">Связанные перечисления:<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="eb9f4-323">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="eb9f4-324">Выполняет заданный делегат синхронно, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-324">Executes the specified delegate synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-325">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-325">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="eb9f4-326">Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-326">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="eb9f4-327">Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-327">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="eb9f4-328">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></span><span class="sxs-lookup"><span data-stu-id="eb9f4-328">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="eb9f4-329"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-329"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="eb9f4-330">Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority></span><span class="sxs-lookup"><span data-stu-id="eb9f4-330">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="eb9f4-331"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронной операцией; Поэтому Управление не вернется к вызывающему объекту до тех пор, пока не будет возвращен обратный вызов.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-331"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb9f4-332">В следующем примере делегат помещается в <xref:System.Windows.Threading.Dispatcher> объект <xref:System.Windows.Threading.DispatcherPriority.Normal> при <xref:System.Windows.Threading.Dispatcher.Invoke%2A>помощи.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-332">The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority.Normal> using <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span></span>  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action -&gt; unit" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="eb9f4-333">Делегат, вызываемый с помощью диспетчера.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-333">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="eb9f4-334">Выполняет заданный объект <see cref="T:System.Action" /> синхронно в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-334">Executes the specified <see cref="T:System.Action" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action, priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="eb9f4-335">Делегат, вызываемый с помощью диспетчера.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-335">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="eb9f4-336">Приоритет, определяющий очередность вызова указанного метода обратного вызова по отношению к другим ожидающим операциям в объекте <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-336">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="eb9f4-337">Выполняет указанный объект <see cref="T:System.Action" /> синхронно с заданным приоритетом в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-337">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="eb9f4-338">Делегат метода с параметрами, указанными в <paramref name="args" />, который помещен в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-338">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="args"><span data-ttu-id="eb9f4-339">Массив объектов, передаваемых в качестве аргументов указанному методу.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-339">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="eb9f4-340">Может иметь значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-340">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="eb9f4-341">Выполняет указанный делегат синхронно с заданными аргументами в потоке, с которым связан объект <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-341">Executes the specified delegate with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="eb9f4-342">Значение, возвращаемое вызываемым делегатом, или <see langword="null" />, если делегат не возвращает никакого значения.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-342">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-343">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-343">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="eb9f4-344">Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-344">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="eb9f4-345">Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-345">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="eb9f4-346">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></span><span class="sxs-lookup"><span data-stu-id="eb9f4-346">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="eb9f4-347"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-347"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="eb9f4-348">Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority></span><span class="sxs-lookup"><span data-stu-id="eb9f4-348">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="eb9f4-349"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронной операцией; Поэтому Управление не вернется к вызывающему объекту до тех пор, пока не будет возвращен обратный вызов.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-349"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="eb9f4-350">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-350">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="eb9f4-351">Делегат метода без аргументов, помещенный в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-351">A delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="eb9f4-352">Выполняет указанный делегат синхронно, с заданным приоритетом, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-352">Executes the specified delegate synchronously at the specified priority on the thread on which the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="eb9f4-353">Значение, возвращаемое вызываемым делегатом, или <see langword="null" />, если делегат не возвращает никакого значения.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-353">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-354">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-354">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="eb9f4-355">Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-355">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="eb9f4-356">Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-356">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="eb9f4-357">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></span><span class="sxs-lookup"><span data-stu-id="eb9f4-357">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="eb9f4-358"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-358"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="eb9f4-359">Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority></span><span class="sxs-lookup"><span data-stu-id="eb9f4-359">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="eb9f4-360"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронной операцией; Поэтому Управление не вернется к вызывающему объекту до тех пор, пока не будет возвращен обратный вызов.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-360"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb9f4-361">В следующем примере делегат помещается в <xref:System.Windows.Threading.Dispatcher> объект <xref:System.Windows.Threading.DispatcherPriority.Normal> при <xref:System.Windows.Threading.Dispatcher.Invoke%2A>помощи.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-361">The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority.Normal> using <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span></span>  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="eb9f4-362"><paramref name="priority" /> равно <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-362"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="eb9f4-363"><paramref name="priority" /> не является допустимым приоритетом.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-363"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eb9f4-364">Свойство <paramref name="method" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-364"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="eb9f4-365">Делегат, вызываемый с помощью диспетчера.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-365">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="eb9f4-366">Приоритет, определяющий очередность вызова указанного метода обратного вызова по отношению к другим ожидающим операциям в объекте <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-366">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="eb9f4-367">Объект, указывающий, следует ли отменить действие.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-367">An object that indicates whether to cancel the action.</span></span></param>
        <summary><span data-ttu-id="eb9f4-368">Выполняет указанный объект <see cref="T:System.Action" /> синхронно с заданным приоритетом в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-368">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="eb9f4-369">Делегат метода с параметрами, указанными в <paramref name="args" />, который помещен в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-369">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="timeout"><span data-ttu-id="eb9f4-370">Максимальное время ожидания завершения операции.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-370">The maximum amount of time to wait for the operation to complete.</span></span></param>
        <param name="args"><span data-ttu-id="eb9f4-371">Массив объектов, передаваемых в качестве аргументов указанному методу.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-371">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="eb9f4-372">Может иметь значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-372">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="eb9f4-373">Выполняет указанный делегат в течение заданного промежутка времени, синхронно, с заданными приоритетом и аргументами, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-373">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="eb9f4-374">Значение, возвращаемое вызываемым делегатом, или <see langword="null" />, если делегат не возвращает никакого значения.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-374">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-375">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-375">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="eb9f4-376">Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-376">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="eb9f4-377">Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-377">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="eb9f4-378">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></span><span class="sxs-lookup"><span data-stu-id="eb9f4-378">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="eb9f4-379"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-379"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="eb9f4-380">Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority></span><span class="sxs-lookup"><span data-stu-id="eb9f4-380">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="eb9f4-381"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронной операцией; Поэтому Управление не вернется к вызывающему объекту до тех пор, пока не будет возвращен обратный вызов.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-381"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="eb9f4-382">Делегат метода с параметрами, указанными в <paramref name="args" />, который помещен в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-382">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="priority"><span data-ttu-id="eb9f4-383">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-383">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="args"><span data-ttu-id="eb9f4-384">Массив объектов, передаваемых в качестве аргументов указанному методу.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-384">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="eb9f4-385">Может иметь значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-385">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="eb9f4-386">Выполняет указанный делегат синхронно, с заданными приоритетом и аргументами, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-386">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="eb9f4-387">Значение, возвращаемое вызываемым делегатом, или <see langword="null" />, если делегат не возвращает никакого значения.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-387">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-388">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-388">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="eb9f4-389">Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-389">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="eb9f4-390">Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-390">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="eb9f4-391">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></span><span class="sxs-lookup"><span data-stu-id="eb9f4-391">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="eb9f4-392"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-392"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="eb9f4-393">Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority></span><span class="sxs-lookup"><span data-stu-id="eb9f4-393">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="eb9f4-394"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронной операцией; Поэтому Управление не вернется к вызывающему объекту до тех пор, пока не будет возвращен обратный вызов.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-394"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="eb9f4-395">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-395">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="eb9f4-396">Делегат метода с одним аргументом, помещенный в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-396">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="eb9f4-397">Объект, передаваемый в качестве аргумента указанному методу.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-397">An object to pass as an argument to the given method.</span></span></param>
        <summary><span data-ttu-id="eb9f4-398">Выполняет указанный делегат синхронно, с заданными приоритетом и аргументом, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-398">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="eb9f4-399">Значение, возвращаемое вызываемым делегатом, или <see langword="null" />, если делегат не возвращает никакого значения.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-399">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-400">`Arg`может быть `null` , если аргумент не требуется</span><span class="sxs-lookup"><span data-stu-id="eb9f4-400">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="eb9f4-401">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-401">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="eb9f4-402">Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-402">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="eb9f4-403">Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-403">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="eb9f4-404">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></span><span class="sxs-lookup"><span data-stu-id="eb9f4-404">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="eb9f4-405"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-405"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="eb9f4-406">Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority></span><span class="sxs-lookup"><span data-stu-id="eb9f4-406">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="eb9f4-407"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронной операцией; Поэтому Управление не вернется к вызывающему объекту до тех пор, пока не будет возвращен обратный вызов.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-407"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="eb9f4-408"><paramref name="priority" /> равно <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-408"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="eb9f4-409"><paramref name="priority" /> не является допустимым приоритетом.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-409"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eb9f4-410">Свойство <paramref name="method" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-410"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="eb9f4-411">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-411">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="eb9f4-412">Максимальное время ожидания завершения операции.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-412">The maximum time to wait for the operation to finish.</span></span></param>
        <param name="method"><span data-ttu-id="eb9f4-413">Делегат метода без аргументов, помещенный в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-413">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="eb9f4-414">Выполняет указанный делегат асинхронно, с заданными приоритетом и значением таймаута, в потоке, в котором был создан объект <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-414">Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> was created.</span></span></summary>
        <returns><span data-ttu-id="eb9f4-415">Значение, возвращаемое вызываемым делегатом, или <see langword="null" />, если делегат не возвращает никакого значения.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-415">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-416">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-416">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="eb9f4-417">Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-417">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="eb9f4-418">Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-418">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="eb9f4-419">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></span><span class="sxs-lookup"><span data-stu-id="eb9f4-419">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="eb9f4-420"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-420"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="eb9f4-421">Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority></span><span class="sxs-lookup"><span data-stu-id="eb9f4-421">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="eb9f4-422"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронной операцией; Поэтому Управление не вернется к вызывающему объекту до тех пор, пока не будет возвращен обратный вызов.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-422"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="3" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="eb9f4-423">Делегат, вызываемый с помощью диспетчера.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-423">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="eb9f4-424">Приоритет, определяющий очередность вызова указанного метода обратного вызова по отношению к другим ожидающим операциям в объекте <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-424">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="eb9f4-425">Объект, указывающий, следует ли отменить действие.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-425">An object that indicates whether to cancel the action.</span></span></param>
        <param name="timeout"><span data-ttu-id="eb9f4-426">Минимальное время ожидания запуска операции.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-426">The minimum amount of time to wait for the operation to start.</span></span></param>
        <summary><span data-ttu-id="eb9f4-427">Выполняет указанный объект <see cref="T:System.Action" /> синхронно с заданным приоритетом в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-427">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="eb9f4-428">Делегат метода с параметрами, указанными в <paramref name="args" />, который помещен в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-428">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="timeout"><span data-ttu-id="eb9f4-429">Максимальное время ожидания завершения операции.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-429">The maximum amount of time to wait for the operation to complete.</span></span></param>
        <param name="priority"><span data-ttu-id="eb9f4-430">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-430">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="args"><span data-ttu-id="eb9f4-431">Массив объектов, передаваемых в качестве аргументов указанному методу.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-431">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="eb9f4-432">Может иметь значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-432">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="eb9f4-433">Выполняет указанный делегат в течение заданного промежутка времени, синхронно, с заданными приоритетом и аргументами, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-433">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="eb9f4-434">Значение, возвращаемое вызываемым делегатом, или <see langword="null" />, если делегат не возвращает никакого значения.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-434">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-435">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-435">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="eb9f4-436">Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-436">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="eb9f4-437">Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-437">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="eb9f4-438">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></span><span class="sxs-lookup"><span data-stu-id="eb9f4-438">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="eb9f4-439"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-439"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="eb9f4-440">Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority></span><span class="sxs-lookup"><span data-stu-id="eb9f4-440">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="eb9f4-441"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронной операцией; Поэтому Управление не вернется к вызывающему объекту до тех пор, пока не будет возвращен обратный вызов.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-441"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="eb9f4-442">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-442">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="eb9f4-443">Делегат метода с несколькими аргументами, помещенный в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-443">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="eb9f4-444">Объект, передаваемый в качестве аргумента указанному методу.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-444">An object to pass as an argument to the given method.</span></span></param>
        <param name="args"><span data-ttu-id="eb9f4-445">Массив объектов, передаваемых в качестве аргументов указанному методу.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-445">An array of objects to pass as arguments to the given method.</span></span></param>
        <summary><span data-ttu-id="eb9f4-446">Выполняет указанный делегат синхронно, с заданными приоритетом и аргументами, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-446">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="eb9f4-447">Значение, возвращаемое вызываемым делегатом, или <see langword="null" />, если делегат не возвращает никакого значения.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-447">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-448">`Arg`может быть `null` , если аргумент не требуется</span><span class="sxs-lookup"><span data-stu-id="eb9f4-448">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="eb9f4-449">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-449">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="eb9f4-450">Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-450">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="eb9f4-451">Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-451">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="eb9f4-452">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></span><span class="sxs-lookup"><span data-stu-id="eb9f4-452">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="eb9f4-453"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-453"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="eb9f4-454">Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority></span><span class="sxs-lookup"><span data-stu-id="eb9f4-454">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="eb9f4-455"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронной операцией; Поэтому Управление не вернется к вызывающему объекту до тех пор, пока не будет возвращен обратный вызов.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-455"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="eb9f4-456"><paramref name="priority" /> равно <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-456"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="eb9f4-457"><paramref name="priority" /> не является допустимым приоритетом.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-457"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eb9f4-458">Свойство <paramref name="method" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-458"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="eb9f4-459">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-459">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="eb9f4-460">Максимальное время ожидания завершения операции.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-460">The maximum time to wait for the operation to finish.</span></span></param>
        <param name="method"><span data-ttu-id="eb9f4-461">Делегат метода с несколькими аргументами, помещенный в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-461">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="eb9f4-462">Объект, передаваемый в качестве аргумента указанному методу.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-462">An object to pass as an argument to the given method.</span></span> <span data-ttu-id="eb9f4-463">Это может быть значение <see langword="null" />, если аргументы не требуются.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-463">This can be <see langword="null" /> if no arguments are needed.</span></span></param>
        <summary><span data-ttu-id="eb9f4-464">Выполняет указанный делегат синхронно, с заданными приоритетом и аргументом, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-464">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="eb9f4-465">Значение, возвращаемое вызываемым делегатом, или <see langword="null" />, если делегат не возвращает никакого значения.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-465">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-466">`Arg`может быть `null` , если аргумент не требуется</span><span class="sxs-lookup"><span data-stu-id="eb9f4-466">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="eb9f4-467">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-467">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="eb9f4-468">Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-468">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="eb9f4-469">Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-469">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="eb9f4-470">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></span><span class="sxs-lookup"><span data-stu-id="eb9f4-470">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="eb9f4-471"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-471"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="eb9f4-472">Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority></span><span class="sxs-lookup"><span data-stu-id="eb9f4-472">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="eb9f4-473"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронной операцией; Поэтому Управление не вернется к вызывающему объекту до тех пор, пока не будет возвращен обратный вызов.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-473"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="eb9f4-474"><paramref name="priority" /> равно <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-474"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="eb9f4-475"><paramref name="priority" /> не является допустимым приоритетом.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-475"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eb9f4-476">Свойство <paramref name="method" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-476"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="eb9f4-477">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-477">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="eb9f4-478">Максимальное время ожидания завершения операции.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-478">The maximum time to wait for the operation to finish.</span></span></param>
        <param name="method"><span data-ttu-id="eb9f4-479">Делегат метода с несколькими аргументами, помещенный в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-479">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="eb9f4-480">Объект, передаваемый в качестве аргумента указанному методу.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-480">An object to pass as an argument to the specified method.</span></span></param>
        <param name="args"><span data-ttu-id="eb9f4-481">Массив объектов, передаваемых в качестве аргументов указанному методу.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-481">An array of objects to pass as arguments to the specified method.</span></span></param>
        <summary><span data-ttu-id="eb9f4-482">Выполняет указанный делегат синхронно, с заданными приоритетом и аргументами, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-482">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="eb9f4-483">Значение, возвращаемое вызываемым делегатом, или <see langword="null" />, если делегат не возвращает никакого значения.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-483">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-484">`Arg`может быть `null` , если аргумент не требуется.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-484">`Arg` can be `null` if an argument is not needed.</span></span>  
  
 <span data-ttu-id="eb9f4-485">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]только поток, создавший объект <xref:System.Windows.Threading.DispatcherObject> , может обращаться к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-485">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="eb9f4-486">Например, фоновый поток, который отключается из основного потока пользовательского интерфейса, не может обновить содержимое <xref:System.Windows.Controls.Button> объекта, созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-486">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="eb9f4-487">Чтобы фоновый поток мог получить доступ к свойству Content объекта <xref:System.Windows.Controls.Button>, фоновый поток должен делегировать работу, <xref:System.Windows.Threading.Dispatcher> связанную с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-487">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="eb9f4-488">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или. <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></span><span class="sxs-lookup"><span data-stu-id="eb9f4-488">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="eb9f4-489"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронным <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-489"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="eb9f4-490">Операция добавляется в очередь событий объекта <xref:System.Windows.Threading.Dispatcher> в указанном. <xref:System.Windows.Threading.DispatcherPriority></span><span class="sxs-lookup"><span data-stu-id="eb9f4-490">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="eb9f4-491"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>является синхронной операцией; Поэтому Управление не вернется к вызывающему объекту до тех пор, пока не будет возвращен обратный вызов.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-491"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="eb9f4-492"><paramref name="priority" /> равно <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-492"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="eb9f4-493"><paramref name="priority" /> не является допустимым <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-493"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eb9f4-494">Свойство <paramref name="method" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-494"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; -&gt; 'Result" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="eb9f4-495">Тип возвращаемого значения указанного делегата.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-495">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="eb9f4-496">Делегат, вызываемый с помощью диспетчера.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-496">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="eb9f4-497">Выполняет заданный объект <see cref="T:System.Func`1" /> синхронно в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-497">Executes the specified <see cref="T:System.Func`1" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-498">Значение, возвращаемое `callback`методом.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-498">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="eb9f4-499">Тип возвращаемого значения указанного делегата.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-499">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="eb9f4-500">Делегат, вызываемый с помощью диспетчера.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-500">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="eb9f4-501">Приоритет, определяющий очередность вызова указанного метода обратного вызова по отношению к другим ожидающим операциям в объекте <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-501">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="eb9f4-502">Выполняет указанный объект <see cref="T:System.Func`1" /> синхронно с заданным приоритетом в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-502">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-503">Значение, возвращаемое `callback`методом.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-503">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="eb9f4-504">Тип возвращаемого значения указанного делегата.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-504">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="eb9f4-505">Делегат, вызываемый с помощью диспетчера.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-505">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="eb9f4-506">Приоритет, определяющий очередность вызова указанного метода обратного вызова по отношению к другим ожидающим операциям в объекте <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-506">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="eb9f4-507">Объект, указывающий, следует ли отменить операцию.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-507">An object that indicates whether to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="eb9f4-508">Выполняет указанный объект <see cref="T:System.Func`1" /> синхронно с заданным приоритетом в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-508">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-509">Значение, возвращаемое `callback`методом.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-509">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="3" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="eb9f4-510">Тип возвращаемого значения указанного делегата.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-510">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="eb9f4-511">Делегат, вызываемый с помощью диспетчера.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-511">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="eb9f4-512">Приоритет, определяющий очередность вызова указанного метода обратного вызова по отношению к другим ожидающим операциям в объекте <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-512">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="eb9f4-513">Объект, указывающий, следует ли отменить операцию.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-513">An object that indicates whether to cancel the operation.</span></span></param>
        <param name="timeout"><span data-ttu-id="eb9f4-514">Минимальное время ожидания запуска операции.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-514">The minimum amount of time to wait for the operation to start.</span></span></param>
        <summary><span data-ttu-id="eb9f4-515">Выполняет указанный объект <see cref="T:System.Func`1" /> синхронно с заданным приоритетом в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-515">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-516">Значение, возвращаемое `callback`методом.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-516">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="eb9f4-517">Выполняет заданный делегат асинхронно в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-517">Executes the specified delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="eb9f4-518">Делегат, вызываемый с помощью диспетчера.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-518">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="eb9f4-519">Выполняет заданный объект <see cref="T:System.Action" /> асинхронно в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-519">Executes the specified <see cref="T:System.Action" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="eb9f4-520">Объект, возвращаемый сразу после вызова <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-520">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action, priority As DispatcherPriority) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="eb9f4-521">Делегат, вызываемый с помощью диспетчера.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-521">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="eb9f4-522">Приоритет, определяющий очередность вызова указанного метода обратного вызова по отношению к другим ожидающим операциям в объекте <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-522">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="eb9f4-523">Выполняет указанный объект <see cref="T:System.Action" /> асинхронно с заданным приоритетом в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-523">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="eb9f4-524">Объект, возвращаемый сразу после вызова <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-524">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="eb9f4-525">Делегат, вызываемый с помощью диспетчера.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-525">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="eb9f4-526">Приоритет, определяющий очередность вызова указанного метода обратного вызова по отношению к другим ожидающим операциям в объекте <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-526">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="eb9f4-527">Объект, указывающий, следует ли отменить действие.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-527">An object that indicates whether to cancel the action.</span></span></param>
        <summary><span data-ttu-id="eb9f4-528">Выполняет указанный объект <see cref="T:System.Action" /> асинхронно с заданным приоритетом в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-528">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="eb9f4-529">Объект, возвращаемый сразу после вызова <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-529">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult)) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="eb9f4-530">Тип возвращаемого значения указанного делегата.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-530">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="eb9f4-531">Делегат, вызываемый с помощью диспетчера.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-531">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="eb9f4-532">Выполняет заданный объект <see cref="T:System.Func`1" /> асинхронно в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-532">Executes the specified <see cref="T:System.Func`1" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="eb9f4-533">Объект, возвращаемый сразу после вызова <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-533">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="eb9f4-534">Тип возвращаемого значения указанного делегата.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-534">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="eb9f4-535">Делегат, вызываемый с помощью диспетчера.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-535">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="eb9f4-536">Приоритет, определяющий очередность вызова указанного метода обратного вызова по отношению к другим ожидающим операциям в объекте <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-536">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="eb9f4-537">Выполняет указанный объект <see cref="T:System.Func`1" /> асинхронно с заданным приоритетом в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-537">Executes the specified <see cref="T:System.Func`1" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="eb9f4-538">Объект, возвращаемый сразу после вызова <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-538">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="eb9f4-539">Тип возвращаемого значения указанного делегата.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-539">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="eb9f4-540">Делегат, вызываемый с помощью диспетчера.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-540">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="eb9f4-541">Приоритет, определяющий очередность вызова указанного метода обратного вызова по отношению к другим ожидающим операциям в объекте <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-541">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="eb9f4-542">Объект, указывающий, следует ли отменить операцию.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-542">An object that indicates whether to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="eb9f4-543">Выполняет указанный объект <see cref="T:System.Func`1" /> асинхронно с заданным приоритетом в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-543">Executes the specified <see cref="T:System.Func`1" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="eb9f4-544">Объект, возвращаемый сразу после вызова <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-544">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeShutdown">
      <MemberSignature Language="C#" Value="public void InvokeShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeShutdown();" />
      <MemberSignature Language="F#" Value="member this.InvokeShutdown : unit -&gt; unit" Usage="dispatcher.InvokeShutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="eb9f4-545">Инициирует синхронный процесс остановки <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-545">Initiates the shutdown process of the <see cref="T:System.Windows.Threading.Dispatcher" /> synchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-546"><xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A>запрашивает неограниченные разрешения пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-546"><xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> demands unrestricted UI Permissions.</span></span>  
  
 <span data-ttu-id="eb9f4-547">Когда начинается завершение работы <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> , вызывается событие и <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> устанавливается в `true`значение. <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="eb9f4-547">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="eb9f4-548"><xref:System.Windows.Threading.Dispatcher> Не завершает работу полностью до очистки очереди событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-548">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="eb9f4-549">Когда диспетчер завершает работу, <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> возникает событие, <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> и свойству присваивается значение `true`.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-549">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="eb9f4-550">После начала процесса завершения работы все ожидающие рабочие элементы в очереди будут прерваны.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-550">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="eb9f4-551">для выключения диспетчера.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-551">for shutting down the dispatcher.</span></span>  <span data-ttu-id="eb9f4-552">Связанные перечисления:<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="eb9f4-552">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="PushFrame">
      <MemberSignature Language="C#" Value="public static void PushFrame (System.Windows.Threading.DispatcherFrame frame);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PushFrame(class System.Windows.Threading.DispatcherFrame frame) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PushFrame (frame As DispatcherFrame)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PushFrame(System::Windows::Threading::DispatcherFrame ^ frame);" />
      <MemberSignature Language="F#" Value="static member PushFrame : System.Windows.Threading.DispatcherFrame -&gt; unit" Usage="System.Windows.Threading.Dispatcher.PushFrame frame" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frame" Type="System.Windows.Threading.DispatcherFrame" />
      </Parameters>
      <Docs>
        <param name="frame"><span data-ttu-id="eb9f4-553">Фрейм для обработки диспетчером.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-553">The frame for the dispatcher to process.</span></span></param>
        <summary><span data-ttu-id="eb9f4-554">Входит в цикл выполнения.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-554">Enters an execute loop.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-555"><xref:System.Windows.Threading.DispatcherFrame> Представляет цикл, который обрабатывает ожидающие рабочие элементы.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-555">A <xref:System.Windows.Threading.DispatcherFrame> represents a loop that processes pending work items.</span></span>  
  
 <span data-ttu-id="eb9f4-556">Диспетчер обрабатывает очередь рабочих элементов в цикле.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-556">The Dispatcher processes the work item queue in a loop.</span></span>  <span data-ttu-id="eb9f4-557">Цикл называется кадром.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-557">The loop is referred to as a frame.</span></span>  <span data-ttu-id="eb9f4-558">Исходный цикл обычно инициируется приложением путем вызова <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-558">The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span></span>  
  
 <span data-ttu-id="eb9f4-559"><xref:System.Windows.Threading.Dispatcher.PushFrame%2A>входит в цикл, представленный параметром `frame`.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-559"><xref:System.Windows.Threading.Dispatcher.PushFrame%2A> enters a loop represented by the parameter `frame`.</span></span>  <span data-ttu-id="eb9f4-560">При каждой итерации цикла <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherFrame> компонент <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> проверяет свойство класса, чтобы определить, следует ли продолжить цикл или его следует прекратить.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-560">At each iteration of the loop, the <xref:System.Windows.Threading.Dispatcher> will check the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property on the <xref:System.Windows.Threading.DispatcherFrame> class to determine whether the loop should continue or if it should stop.</span></span>  
  
 <span data-ttu-id="eb9f4-561"><xref:System.Windows.Threading.DispatcherFrame>позволяет задать <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> <xref:System.Windows.Threading.Dispatcher>свойство явным образом и учитывать свойство в. <xref:System.Windows.Threading.DispatcherFrame.Continue%2A></span><span class="sxs-lookup"><span data-stu-id="eb9f4-561"><xref:System.Windows.Threading.DispatcherFrame> allows for the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property to be set explicitly and it respects the <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> property on the <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="eb9f4-562">Это означает, что <xref:System.Windows.Threading.Dispatcher> когда начинается завершение работы, кадры, использующие реализацию по <xref:System.Windows.Threading.DispatcherFrame> умолчанию, будут завершаться, что позволяет выйти из всех вложенных фреймов.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-562">This means when the <xref:System.Windows.Threading.Dispatcher> starts to shut down, frames that use the default <xref:System.Windows.Threading.DispatcherFrame> implementation will exit, which enables all nested frames to exit.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb9f4-563">В следующем примере показано, <xref:System.Windows.Threading.DispatcherFrame> как использовать для достижения аналогичных результатов [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> в методе.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-563">The following example shows how to use a <xref:System.Windows.Threading.DispatcherFrame> to achieve similar results as the [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> method.</span></span>  
  
 [!code-csharp[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdispatcherframedoevents)]
 [!code-vb[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdispatcherframedoevents)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eb9f4-564">Свойство <paramref name="frame" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-564"><paramref name="frame" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="eb9f4-565"><see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> равно <see langword="true" /></span><span class="sxs-lookup"><span data-stu-id="eb9f4-565"><see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> is <see langword="true" /></span></span>  
  
<span data-ttu-id="eb9f4-566">- или -</span><span class="sxs-lookup"><span data-stu-id="eb9f4-566">-or-</span></span> 
 <span data-ttu-id="eb9f4-567"><paramref name="frame" /> выполняется с другим <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-567"><paramref name="frame" /> is running on a different <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span>  
  
<span data-ttu-id="eb9f4-568">-или-</span><span class="sxs-lookup"><span data-stu-id="eb9f4-568">-or-</span></span> 
<span data-ttu-id="eb9f4-569">Диспетчер отключен.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-569">Dispatcher processing has been disabled.</span></span></exception>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="eb9f4-570">для принудительной отправки кадра выполнения.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-570">for pushing an execution frame.</span></span>  <span data-ttu-id="eb9f4-571">Связанные перечисления:<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="eb9f4-571">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Run" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run();" />
      <MemberSignature Language="F#" Value="static member Run : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.Run " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="eb9f4-572">Помещает главный фрейм выполнения в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-572">Pushes the main execution frame on the event queue of the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-573"><xref:System.Windows.Threading.Dispatcher> Обрабатывает очередь событий в цикле.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-573">The <xref:System.Windows.Threading.Dispatcher> processes the event queue in a loop.</span></span>  <span data-ttu-id="eb9f4-574">Цикл называется кадром.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-574">The loop is referred to as a frame.</span></span>  <span data-ttu-id="eb9f4-575">Исходный цикл обычно инициируется приложением путем вызова <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-575">The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span></span>  
  
 <span data-ttu-id="eb9f4-576">Основной кадр выполнения продолжит работу до <xref:System.Windows.Threading.Dispatcher> завершения работы.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-576">The main execution frame will continue until the <xref:System.Windows.Threading.Dispatcher> is shutdown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownFinished">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownFinished;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownFinished" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownFinished As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownFinished;" />
      <MemberSignature Language="F#" Value="member this.ShutdownFinished : EventHandler " Usage="member this.ShutdownFinished : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="eb9f4-577">Происходит после остановки <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-577">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> finishes shutting down.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-578">Когда запускается процесс <xref:System.Windows.Threading.Dispatcher> завершения работы <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> , событие вызывается и <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> устанавливается в `true`значение.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-578">When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="eb9f4-579"><xref:System.Windows.Threading.Dispatcher> Не завершает работу полностью до тех пор, пока очередь событий не выматывает.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-579">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="eb9f4-580">Когда диспетчер завершает работу, <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> возникает событие, <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> и свойству присваивается значение `true`.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-580">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="eb9f4-581">После начала процесса завершения работы все ожидающие рабочие элементы в очереди будут прерваны.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-581">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="ShutdownStarted">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownStarted As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownStarted;" />
      <MemberSignature Language="F#" Value="member this.ShutdownStarted : EventHandler " Usage="member this.ShutdownStarted : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="eb9f4-582">Происходит, когда начинается процесс остановки <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-582">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> begins to shut down.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-583">Когда запускается процесс <xref:System.Windows.Threading.Dispatcher> завершения работы <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> , событие вызывается и <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> устанавливается в `true`значение.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-583">When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="eb9f4-584"><xref:System.Windows.Threading.Dispatcher> Не завершает работу полностью до тех пор, пока очередь событий не выматывает.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-584">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="eb9f4-585">Когда диспетчер завершает работу, <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> возникает событие, <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> и свойству присваивается значение `true`.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-585">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="eb9f4-586">После начала процесса завершения работы все ожидающие рабочие элементы в очереди будут прерваны.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-586">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="Thread">
      <MemberSignature Language="C#" Value="public System.Threading.Thread Thread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Thread Thread" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Thread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Thread As Thread" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Thread ^ Thread { System::Threading::Thread ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Thread : System.Threading.Thread" Usage="System.Windows.Threading.Dispatcher.Thread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="eb9f4-587">Возвращает поток, с которым связан данный <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-587">Gets the thread this <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <value><span data-ttu-id="eb9f4-588">Поток.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-588">The thread.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledException" />
      <MemberSignature Language="VB.NET" Value="Public Event UnhandledException As DispatcherUnhandledExceptionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionEventHandler ^ UnhandledException;" />
      <MemberSignature Language="F#" Value="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " Usage="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="eb9f4-589">Происходит, когда выбрасывается и никаким кодом не перехватывается исключение потока при выполнении делегата с помощью <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> или <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-589">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-590">Это событие возникает, когда исключение, порожденное во время выполнения делегата посредством <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> , не перехвачено.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-590">This event is raised when an exception that was thrown during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is uncaught.</span></span>  
  
 <span data-ttu-id="eb9f4-591">Обработчик может пометить исключение как обработанное, что предотвратит вызов внутреннего обработчика исключений.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-591">A handler can mark the exception as handled, which will prevent the internal exception handler from being called.</span></span>  
  
 <span data-ttu-id="eb9f4-592">Обработчики событий для этого события должны быть написаны с осторожностью, чтобы не создавать вторичные исключения и перехватывать все, что произошло.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-592">Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</span></span> <span data-ttu-id="eb9f4-593">Рекомендуется избегать выделения памяти или выполнения операций, интенсивно использующих ресурсы, в обработчике.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-593">It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</span></span>  
  
 <span data-ttu-id="eb9f4-594">Событие предоставляет средства, которые не <xref:System.Windows.Threading.Dispatcher.UnhandledException> вызывают событие. <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter></span><span class="sxs-lookup"><span data-stu-id="eb9f4-594">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="eb9f4-595"><xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> <xref:System.Windows.Threading.Dispatcher.UnhandledException> `false`Событие создается первым, а если для имеет значение, событие не будет вызвано. <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter></span><span class="sxs-lookup"><span data-stu-id="eb9f4-595">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UnhandledExceptionFilter">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledExceptionFilter As DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionFilterEventHandler ^ UnhandledExceptionFilter;" />
      <MemberSignature Language="F#" Value="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " Usage="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="eb9f4-596">Происходит, когда выбрасывается и никаким кодом не перехватывается исключение потока при выполнении делегата с помощью <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> или <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> на стадии фильтра.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-596">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> when in the filter stage.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-597">Это событие возникает на этапе фильтрации для исключения, которое вызывается во время выполнения делегата посредством <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> , и не перехватывается.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-597">This event is raised during the filter stage for an exception that is raised during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> and is uncaught.</span></span>  
  
 <span data-ttu-id="eb9f4-598">В данный момент стек вызовов не развернут (первый-экземпляр исключения).</span><span class="sxs-lookup"><span data-stu-id="eb9f4-598">The call stack is not unwound at this point (first-chance exception).</span></span>  
  
 <span data-ttu-id="eb9f4-599">Обработчики событий для этого события должны быть написаны с осторожностью, чтобы не создавать вторичные исключения и перехватывать все, что произошло.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-599">Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</span></span>  <span data-ttu-id="eb9f4-600">Рекомендуется избегать выделения памяти или выполнения операций, интенсивно использующих ресурсы, в обработчике.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-600">It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</span></span>  
  
 <span data-ttu-id="eb9f4-601">Событие предоставляет средства, которые не <xref:System.Windows.Threading.Dispatcher.UnhandledException> вызывают событие. <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter></span><span class="sxs-lookup"><span data-stu-id="eb9f4-601">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="eb9f4-602"><xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> <xref:System.Windows.Threading.Dispatcher.UnhandledException> `false`Событие создается первым, а если для имеет значение, событие не будет вызвано. <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter></span><span class="sxs-lookup"><span data-stu-id="eb9f4-602">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="eb9f4-603">для добавления или удаления обработчика для этого события.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-603">for adding or removing a handler for this event.</span></span>  <span data-ttu-id="eb9f4-604">Связанные перечисления:<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="eb9f4-604">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="ValidatePriority">
      <MemberSignature Language="C#" Value="public static void ValidatePriority (System.Windows.Threading.DispatcherPriority priority, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidatePriority(valuetype System.Windows.Threading.DispatcherPriority priority, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidatePriority (priority As DispatcherPriority, parameterName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ValidatePriority(System::Windows::Threading::DispatcherPriority priority, System::String ^ parameterName);" />
      <MemberSignature Language="F#" Value="static member ValidatePriority : System.Windows.Threading.DispatcherPriority * string -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ValidatePriority (priority, parameterName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="eb9f4-605">Проверяемый приоритет.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-605">The priority to check.</span></span></param>
        <param name="parameterName"><span data-ttu-id="eb9f4-606">Строка, которая будет возвращена исключением, которое будет сгенерировано, если приоритет окажется недействительным.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-606">A string that will be returned by the exception that occurs if the priority is invalid.</span></span></param>
        <summary><span data-ttu-id="eb9f4-607">Определяет, является ли <see cref="T:System.Windows.Threading.DispatcherPriority" /> допустимым приоритетом.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-607">Determines whether the specified <see cref="T:System.Windows.Threading.DispatcherPriority" /> is a valid priority.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="eb9f4-608"><paramref name="priority" /> не является допустимым <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-608"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyAccess">
      <MemberSignature Language="C#" Value="public void VerifyAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyAccess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyAccess();" />
      <MemberSignature Language="F#" Value="member this.VerifyAccess : unit -&gt; unit" Usage="dispatcher.VerifyAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="eb9f4-609">Определяет, имеет ли вызывающий поток доступ к этому <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-609">Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-610">Только поток, на <xref:System.Windows.Threading.Dispatcher> котором создается объект, может <xref:System.Windows.Threading.Dispatcher>получить доступ к.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-610">Only the thread the <xref:System.Windows.Threading.Dispatcher> is created on may access the <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="eb9f4-611">Этот метод является открытым; Таким образом, любой поток может проверить, имеет ли он доступ к <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-611">This method is public; therefore, any thread can check to see whether it has access to the <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="eb9f4-612"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> Разница между <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> и возвращает логическое значение, если <xref:System.Windows.Threading.Dispatcher> вызывающий поток не имеет доступа к и создает исключение. <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A></span><span class="sxs-lookup"><span data-stu-id="eb9f4-612">The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean if the calling thread does not have access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb9f4-613">В следующем примере используется <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> для определения того, имеет ли поток доступ к потоку, <xref:System.Windows.Controls.Button> на котором был создан объект.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-613">The following example uses <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.</span></span>  <span data-ttu-id="eb9f4-614">Метод принимает объект в качестве аргумента, который приводится к <xref:System.Windows.Controls.Button>типу.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-614">The method takes an object as an argument, which is cast to a <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="eb9f4-615">Метод для <xref:System.Windows.Threading.Dispatcher> метода <xref:System.Windows.Controls.Button>  вызывается для проверки доступа к потоку. <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A></span><span class="sxs-lookup"><span data-stu-id="eb9f4-615">The <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  
  
 <span data-ttu-id="eb9f4-616">Если вызывающий поток имеет доступ <xref:System.Windows.Threading.Dispatcher>к <xref:System.Windows.Controls.Button> , компонент обновляется путем простого <xref:System.Windows.Controls.Button>доступа к членам.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-616">If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by just accessing the members of the <xref:System.Windows.Controls.Button>.</span></span>  
  
 <span data-ttu-id="eb9f4-617">Если вызывающий поток не имеет доступа, <xref:System.InvalidOperationException> создается исключение.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-617">If the calling thread does not have access, an <xref:System.InvalidOperationException> is thrown.</span></span>  <span data-ttu-id="eb9f4-618">В этом примере перехватывается исключение и отправляется делегат, который принимает в <xref:System.Windows.Controls.Button> качестве аргумента в объект. <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Controls.Button></span><span class="sxs-lookup"><span data-stu-id="eb9f4-618">This example catches the exception and pushes a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, onto the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="eb9f4-619">При <xref:System.Windows.Threading.Dispatcher> этом будет выполняться <xref:System.Windows.Controls.Button>обновление.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-619">This <xref:System.Windows.Threading.Dispatcher> will do the work of updating the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccessverifyaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccessverifyaccess)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="eb9f4-620">Вызывающий поток не имеет доступа к этому <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-620">The calling thread does not have access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></exception>
        <altmember cref="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Yield">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="eb9f4-621">Создает объект типа awaitable, который асинхронно направляет элемент управления обратно текущему диспетчеру и предоставляет диспетчеру возможность обработки других событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-621">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield();" />
      <MemberSignature Language="F#" Value="static member Yield : unit -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="eb9f4-622">Создает объект типа awaitable, который асинхронно направляет элемент управления обратно текущему диспетчеру и предоставляет диспетчеру возможность обработки других событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-622">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></summary>
        <returns><span data-ttu-id="eb9f4-623">Объект типа awaitable, который асинхронно направляет элемент управления обратно текущему диспетчеру и предоставляет диспетчеру возможность обработки других событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-623">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-624">Этот метод позволяет временно выпустить элемент управления выполнением для текущего Dispatcher, чтобы он мог выполнять другие действия, такие как обработка других событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-624">This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</span></span> <span data-ttu-id="eb9f4-625">`await`Используйте или `Await`  в Visual Basic оператор для возвращаемого значения, чтобы вернуть управление текущему диспетчеру.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-625">Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher.</span></span> <span data-ttu-id="eb9f4-626">Используйте этот метод, если вы хотите дать приложению возможность обрабатывать события, когда приложение выполняет большой объем работы в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-626">Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</span></span> <span data-ttu-id="eb9f4-627">Например, этот метод можно использовать в долгосрочном цикле, который обновляет элемент управления.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-627">For example, you can use this method in a long-running loop that updates a control.</span></span>  
  
 <span data-ttu-id="eb9f4-628">Этот метод эквивалентен вызову <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> метода и <xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>передаче.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-628">This method is equivalent to calling the <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> method and passing in <xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield (priority As DispatcherPriority) As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="static member Yield : System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="eb9f4-629">Приоритет, с которым следует планировать продолжение.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-629">The priority at which to schedule the continuation.</span></span></param>
        <summary><span data-ttu-id="eb9f4-630">Создает объект типа awaitable, который асинхронно направляет элемент управления обратно текущему диспетчеру и предоставляет диспетчеру возможность обработки других событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-630">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span>  <span data-ttu-id="eb9f4-631">Работа, происходящая, когда элемент управления возвращается к коду, ожидающему результата этого метода, запланирован с указанным приоритетом.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-631">The work that occurs when control returns to the code awaiting the result of this method is scheduled with the specified priority.</span></span></summary>
        <returns><span data-ttu-id="eb9f4-632">Объект типа awaitable, который асинхронно направляет элемент управления обратно текущему диспетчеру и предоставляет диспетчеру возможность обработки других событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-632">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9f4-633">Этот метод позволяет временно выпустить элемент управления выполнением для текущего Dispatcher, чтобы он мог выполнять другие действия, такие как обработка других событий.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-633">This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</span></span> <span data-ttu-id="eb9f4-634">`await`Используйте или `Await`  в Visual Basic оператор для возвращаемого значения, чтобы вернуть управление текущему диспетчеру.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-634">Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher.</span></span> <span data-ttu-id="eb9f4-635">Используйте этот метод, если вы хотите дать приложению возможность обрабатывать события, когда приложение выполняет большой объем работы в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-635">Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</span></span> <span data-ttu-id="eb9f4-636">Например, этот метод можно использовать в долгосрочном цикле, который обновляет элемент управления.</span><span class="sxs-lookup"><span data-stu-id="eb9f4-636">For example, you can use this method in a long-running loop that updates a control.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
