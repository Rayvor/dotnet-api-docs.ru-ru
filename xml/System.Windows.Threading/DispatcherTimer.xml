<Type Name="DispatcherTimer" FullName="System.Windows.Threading.DispatcherTimer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4b2e50f88278a4455d96bba6b8bcca36042f334c" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70461710" /></Metadata><TypeSignature Language="C#" Value="public class DispatcherTimer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DispatcherTimer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.DispatcherTimer" />
  <TypeSignature Language="VB.NET" Value="Public Class DispatcherTimer" />
  <TypeSignature Language="C++ CLI" Value="public ref class DispatcherTimer" />
  <TypeSignature Language="F#" Value="type DispatcherTimer = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Таймер, интегрированный в очередь <see cref="T:System.Windows.Threading.Dispatcher" />, обрабатываемый с заданным интервалом времени и заданным приоритетом.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вычисляется повторно в верхней части каждого <xref:System.Windows.Threading.Dispatcher> цикла. <xref:System.Windows.Threading.DispatcherTimer>  
  
 Таймеры не гарантированно выполняются в точности при наступлении интервала времени, но они гарантированно не будут выполняться до наступления интервала времени.  Это связано с <xref:System.Windows.Threading.DispatcherTimer> тем, что операции помещаются в очередь, <xref:System.Windows.Threading.Dispatcher> как и другие операции.  <xref:System.Windows.Threading.DispatcherTimer> Когда операция выполняется, зависит от других заданий в очереди и их приоритетов.  
  
 Если в [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] приложении используется, стоит отметить, что объект <xref:System.Timers.Timer?displayProperty=nameWithType> выполняется в потоке, отличном от потока  [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] . <xref:System.Timers.Timer?displayProperty=nameWithType>  Чтобы получить доступ к [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] объектам в потоке, необходимо опубликовать операцию в <xref:System.Windows.Threading.Dispatcher> [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] потоке с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>. Причины использования <xref:System.Windows.Threading.DispatcherTimer> , в отличие <xref:System.Windows.Threading.Dispatcher> <xref:System.Timers.Timer?displayProperty=nameWithType> от, — <xref:System.Windows.Threading.DispatcherTimer> выполняются в том же потоке, что и, и <xref:System.Windows.Threading.DispatcherPriority> могут быть установлены в <xref:System.Windows.Threading.DispatcherTimer>.  
  
 Объект <xref:System.Windows.Threading.DispatcherTimer> будет поддерживать активность объекта всякий раз, когда методы объекта привязаны к таймеру.  
  
## Examples  
 В следующем примере создается объект <xref:System.Windows.Threading.DispatcherTimer> , который обновляет содержимое <xref:System.Windows.Controls.Label> объекта и <xref:System.Windows.Input.CommandManager>вызывает <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> метод для.  
  
 Создается объект с  `dispatcherTimer` именем. <xref:System.Windows.Threading.DispatcherTimer>  Обработчик `dispatcherTimer_Tick` событий добавляется <xref:System.Windows.Threading.DispatcherTimer.Tick> к событию `dispatcherTimer`.  Значение задается равным 1 секунде <xref:System.Windows.Duration.TimeSpan%2A> с помощью объекта и запускается таймер. <xref:System.Windows.Threading.DispatcherTimer.Interval%2A>  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 Обработчик событий обновляет объект <xref:System.Windows.Controls.Label> , отображающий текущую секунду, <xref:System.Windows.Input.CommandManager>и вызывает метод <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> в. <xref:System.Windows.Threading.DispatcherTimer.Tick>  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimer)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimer)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherTimer>выполняется в <xref:System.Windows.Threading.Dispatcher> текущем потоке с <xref:System.Windows.Threading.DispatcherPriority.Background> приоритетом.  Чтобы указать другой <xref:System.Windows.Threading.Dispatcher>, используйте следующий конструктор: <xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="new System.Windows.Threading.DispatcherTimer : System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherTimer" Usage="new System.Windows.Threading.DispatcherTimer priority" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority">Приоритет, с которым следует вызывать таймер.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Threading.DispatcherTimer" />, обрабатывающий события таймера с заданным приоритетом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherTimer>выполняется в <xref:System.Windows.Threading.Dispatcher> текущем потоке.  Чтобы указать другой <xref:System.Windows.Threading.Dispatcher>, используйте следующий конструктор: <xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer (System.Windows.Threading.DispatcherPriority priority, System.Windows.Threading.Dispatcher dispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Windows.Threading.Dispatcher dispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer(System::Windows::Threading::DispatcherPriority priority, System::Windows::Threading::Dispatcher ^ dispatcher);" />
      <MemberSignature Language="F#" Value="new System.Windows.Threading.DispatcherTimer : System.Windows.Threading.DispatcherPriority * System.Windows.Threading.Dispatcher -&gt; System.Windows.Threading.DispatcherTimer" Usage="new System.Windows.Threading.DispatcherTimer (priority, dispatcher)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="dispatcher" Type="System.Windows.Threading.Dispatcher" />
      </Parameters>
      <Docs>
        <param name="priority">Приоритет, с которым следует вызывать таймер.</param>
        <param name="dispatcher">Диспетчер, с которым связан таймер.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Threading.DispatcherTimer" />, который выполняется с заданным приоритетом заданным объектом <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="dispatcher" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer (TimeSpan interval, System.Windows.Threading.DispatcherPriority priority, EventHandler callback, System.Windows.Threading.Dispatcher dispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.TimeSpan interval, valuetype System.Windows.Threading.DispatcherPriority priority, class System.EventHandler callback, class System.Windows.Threading.Dispatcher dispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer(TimeSpan interval, System::Windows::Threading::DispatcherPriority priority, EventHandler ^ callback, System::Windows::Threading::Dispatcher ^ dispatcher);" />
      <MemberSignature Language="F#" Value="new System.Windows.Threading.DispatcherTimer : TimeSpan * System.Windows.Threading.DispatcherPriority * EventHandler * System.Windows.Threading.Dispatcher -&gt; System.Windows.Threading.DispatcherTimer" Usage="new System.Windows.Threading.DispatcherTimer (interval, priority, callback, dispatcher)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="interval" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="callback" Type="System.EventHandler" />
        <Parameter Name="dispatcher" Type="System.Windows.Threading.Dispatcher" />
      </Parameters>
      <Docs>
        <param name="interval">Период времени между тактами.</param>
        <param name="priority">Приоритет, с которым следует вызывать таймер.</param>
        <param name="callback">Обработчик для событий <see cref="E:System.Windows.Threading.DispatcherTimer.Tick" />.</param>
        <param name="dispatcher">Диспетчер, с которым связан таймер.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Threading.DispatcherTimer" />, устанавливая для него заданные интервал, приоритет, обработчик событий и объект <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="callback" /> имеет значение <see langword="null" />.

-или-

          <paramref name="dispatcher" /> — <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="interval" /> имеет значение меньше 0 или больше <see cref="F:System.Int32.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispatcher">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.Dispatcher Dispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.Dispatcher Dispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.Dispatcher" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Dispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::Dispatcher ^ Dispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Dispatcher : System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.DispatcherTimer.Dispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает объект <see cref="T:System.Windows.Threading.Dispatcher" />, связанный с этим объектом <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
        <value>Диспетчер.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство определяется при создании <xref:System.Windows.Threading.DispatcherTimer> объекта. <xref:System.Windows.Threading.DispatcherTimer.Dispatcher%2A>  Свойство устанавливается в значение Current <xref:System.Windows.Threading.Dispatcher> во время создания, если не указано иное  <xref:System.Windows.Threading.Dispatcher> . <xref:System.Windows.Threading.Dispatcher>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public TimeSpan Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Interval" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Interval { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : TimeSpan with get, set" Usage="System.Windows.Threading.DispatcherTimer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает период времени между тактами таймера.</summary>
        <value>Период времени между тактами. Значение по умолчанию — 00:00:00.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Таймеры не гарантированно выполняются в точности при наступлении интервала времени, но они гарантированно не будут выполняться до наступления интервала времени.  Это связано с <xref:System.Windows.Threading.DispatcherTimer> тем, что операции помещаются в очередь, <xref:System.Windows.Threading.Dispatcher> как и другие операции.  <xref:System.Windows.Threading.DispatcherTimer> Когда операция выполняется, зависит от других заданий в очереди и их приоритетов.  
  
## Examples  
 В следующем примере создается объект <xref:System.Windows.Threading.DispatcherTimer>.  Создается новый <xref:System.Windows.Threading.DispatcherTimer> объект с `dispatcherTimer` именем.  Обработчик `dispatcherTimer_Tick` событий добавляется <xref:System.Windows.Threading.DispatcherTimer.Tick> к событию.  Значение задается равным 1 секунде <xref:System.TimeSpan> с помощью объекта. <xref:System.Windows.Threading.DispatcherTimer.Interval%2A>  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="interval" /> меньше 0 или больше <see cref="F:System.Int32.MaxValue" /> миллисекунд.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.Threading.DispatcherTimer.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее, работает ли таймер.</summary>
        <value>Значение <see langword="true" />, если таймер запущен; в противном случае — значение <see langword="false" />.  Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>чтобы `true` событие вызывалось, <xref:System.Windows.Threading.DispatcherTimer.Tick> необходимо задать значение.  
  
 Вызов <xref:System.Windows.Threading.DispatcherTimer.Start%2A> наборов <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> для . `true`  
  
 Вызов <xref:System.Windows.Threading.DispatcherTimer.Stop%2A> наборов <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> для . `false`  
  
## Examples  
 В следующем примере создается объект <xref:System.Windows.Threading.DispatcherTimer>.  Создается новый <xref:System.Windows.Threading.DispatcherTimer> объект с `dispatcherTimer` именем.  Обработчик `dispatcherTimer_Tick` событий добавляется <xref:System.Windows.Threading.DispatcherTimer.Tick> к событию.  Значение задается равным 1 секунде <xref:System.TimeSpan> с помощью объекта. <xref:System.Windows.Threading.DispatcherTimer.Interval%2A>  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="dispatcherTimer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Запускает <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если задано значение <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> время запуска таймера, таймер останавливается. `false`  
  
 <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> При остановке `true`  таймера запускается таймер.  
  
 <xref:System.Windows.Threading.DispatcherTimer.Start%2A>Задает <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> для `true`значение.  
  
 <xref:System.Windows.Threading.DispatcherTimer.Start%2A>сбрасывает таймер <xref:System.Windows.Threading.DispatcherTimer.Interval%2A>.  
  
   
  
## Examples  
 В следующем примере создается объект <xref:System.Windows.Threading.DispatcherTimer>.  Создается новый <xref:System.Windows.Threading.DispatcherTimer> объект с `dispatcherTimer` именем.  Обработчик `dispatcherTimer_Tick` событий добавляется <xref:System.Windows.Threading.DispatcherTimer.Tick> к событию.  Значение задается равным 1 секунде <xref:System.Windows.Duration.TimeSpan%2A> с помощью объекта. <xref:System.Windows.Threading.DispatcherTimer.Interval%2A>  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="dispatcherTimer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Останавливает <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если задано значение <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> время запуска таймера, таймер останавливается. `false`  
  
 <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> При остановке `true`  таймера запускается таймер.  
  
 Вызов <xref:System.Windows.Threading.DispatcherTimer.Stop%2A> наборов <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> для . `false`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.Threading.DispatcherTimer.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает определенные пользователем данные объекта.</summary>
        <value>Определенные пользователем данные.  Значение по умолчанию — <see langword="null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tick">
      <MemberSignature Language="C#" Value="public event EventHandler Tick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Tick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.DispatcherTimer.Tick" />
      <MemberSignature Language="VB.NET" Value="Public Event Tick As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Tick;" />
      <MemberSignature Language="F#" Value="member this.Tick : EventHandler " Usage="member this.Tick : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит по истечении интервала таймера.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере создается <xref:System.Windows.Threading.DispatcherTimer.Tick> обработчик событий.  Обработчик событий обновляет объект <xref:System.Windows.Controls.Label> , отображающий текущую секунду, и вызывает метод <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> в <xref:System.Windows.Input.CommandManager>.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimer)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimer)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
