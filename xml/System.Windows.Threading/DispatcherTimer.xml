<Type Name="DispatcherTimer" FullName="System.Windows.Threading.DispatcherTimer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5b2e9142d1e4a5983ae3917cb04574575dd2236d" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73348055" /></Metadata><TypeSignature Language="C#" Value="public class DispatcherTimer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DispatcherTimer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.DispatcherTimer" />
  <TypeSignature Language="VB.NET" Value="Public Class DispatcherTimer" />
  <TypeSignature Language="C++ CLI" Value="public ref class DispatcherTimer" />
  <TypeSignature Language="F#" Value="type DispatcherTimer = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Таймер, интегрированный в очередь <see cref="T:System.Windows.Threading.Dispatcher" />, обрабатываемый с заданным интервалом времени и заданным приоритетом.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherTimer> вычисляется повторно в начале каждого цикла <xref:System.Windows.Threading.Dispatcher>.  
  
 Таймеры не гарантированно выполняются в точности при наступлении интервала времени, но они гарантированно не будут выполняться до наступления интервала времени.  Это связано с тем, что <xref:System.Windows.Threading.DispatcherTimer> операции помещаются в очередь <xref:System.Windows.Threading.Dispatcher>, например в другие операции.  При выполнении операции <xref:System.Windows.Threading.DispatcherTimer> зависит от других заданий в очереди и их приоритетов.  
  
 Если <xref:System.Timers.Timer?displayProperty=nameWithType> используется в [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] приложении, стоит отметить, что <xref:System.Timers.Timer?displayProperty=nameWithType> выполняется в потоке, отличном от потока [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  Чтобы получить доступ к объектам в потоке [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)], необходимо опубликовать операцию на <xref:System.Windows.Threading.Dispatcher> [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]ого потока с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>. Причины использования <xref:System.Windows.Threading.DispatcherTimer>, в отличие от <xref:System.Timers.Timer?displayProperty=nameWithType>, заключается в том, что <xref:System.Windows.Threading.DispatcherTimer> выполняется в том же потоке, что и <xref:System.Windows.Threading.Dispatcher>, а <xref:System.Windows.Threading.DispatcherPriority> может быть установлен в <xref:System.Windows.Threading.DispatcherTimer>.  
  
 <xref:System.Windows.Threading.DispatcherTimer> сохранит объект в рабочем состоянии каждый раз, когда методы объекта привязаны к таймеру.  
  
## Examples  
 В следующем примере создается <xref:System.Windows.Threading.DispatcherTimer>, который обновляет содержимое <xref:System.Windows.Controls.Label> и вызывает метод <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> для <xref:System.Windows.Input.CommandManager>.  
  
 Создается объект <xref:System.Windows.Threading.DispatcherTimer> с именем `dispatcherTimer`.  Обработчик событий `dispatcherTimer_Tick` добавляется в <xref:System.Windows.Threading.DispatcherTimer.Tick> событие `dispatcherTimer`.  Для <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> задается значение 1 секунда с помощью объекта <xref:System.Windows.Duration.TimeSpan%2A> и запускается таймер.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 Обработчик событий <xref:System.Windows.Threading.DispatcherTimer.Tick> обновляет <xref:System.Windows.Controls.Label>, отображающий текущую секунду, и вызывает <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> на <xref:System.Windows.Input.CommandManager>.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimer)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimer)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherTimer> выполняется на <xref:System.Windows.Threading.Dispatcher> текущего потока с приоритетом <xref:System.Windows.Threading.DispatcherPriority.Background>.  Чтобы указать другой <xref:System.Windows.Threading.Dispatcher>, используйте следующий конструктор: <xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="new System.Windows.Threading.DispatcherTimer : System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherTimer" Usage="new System.Windows.Threading.DispatcherTimer priority" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority">Приоритет, с которым следует вызывать таймер.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Threading.DispatcherTimer" />, обрабатывающий события таймера с заданным приоритетом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherTimer> выполняется на <xref:System.Windows.Threading.Dispatcher> текущего потока.  Чтобы указать другой <xref:System.Windows.Threading.Dispatcher>, используйте следующий конструктор: <xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer (System.Windows.Threading.DispatcherPriority priority, System.Windows.Threading.Dispatcher dispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Windows.Threading.Dispatcher dispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer(System::Windows::Threading::DispatcherPriority priority, System::Windows::Threading::Dispatcher ^ dispatcher);" />
      <MemberSignature Language="F#" Value="new System.Windows.Threading.DispatcherTimer : System.Windows.Threading.DispatcherPriority * System.Windows.Threading.Dispatcher -&gt; System.Windows.Threading.DispatcherTimer" Usage="new System.Windows.Threading.DispatcherTimer (priority, dispatcher)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="dispatcher" Type="System.Windows.Threading.Dispatcher" />
      </Parameters>
      <Docs>
        <param name="priority">Приоритет, с которым следует вызывать таймер.</param>
        <param name="dispatcher">Диспетчер, с которым связан таймер.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Threading.DispatcherTimer" />, который выполняется с заданным приоритетом заданным объектом <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="dispatcher" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer (TimeSpan interval, System.Windows.Threading.DispatcherPriority priority, EventHandler callback, System.Windows.Threading.Dispatcher dispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.TimeSpan interval, valuetype System.Windows.Threading.DispatcherPriority priority, class System.EventHandler callback, class System.Windows.Threading.Dispatcher dispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer(TimeSpan interval, System::Windows::Threading::DispatcherPriority priority, EventHandler ^ callback, System::Windows::Threading::Dispatcher ^ dispatcher);" />
      <MemberSignature Language="F#" Value="new System.Windows.Threading.DispatcherTimer : TimeSpan * System.Windows.Threading.DispatcherPriority * EventHandler * System.Windows.Threading.Dispatcher -&gt; System.Windows.Threading.DispatcherTimer" Usage="new System.Windows.Threading.DispatcherTimer (interval, priority, callback, dispatcher)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="interval" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="callback" Type="System.EventHandler" />
        <Parameter Name="dispatcher" Type="System.Windows.Threading.Dispatcher" />
      </Parameters>
      <Docs>
        <param name="interval">Период времени между тактами.</param>
        <param name="priority">Приоритет, с которым следует вызывать таймер.</param>
        <param name="callback">Обработчик для событий <see cref="E:System.Windows.Threading.DispatcherTimer.Tick" />.</param>
        <param name="dispatcher">Диспетчер, с которым связан таймер.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Threading.DispatcherTimer" />, устанавливая для него заданные интервал, приоритет, обработчик событий и объект <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="callback" /> — <see langword="null" />.

- или -

          <paramref name="dispatcher" /> — <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="interval" /> имеет значение меньше 0 или больше <see cref="F:System.Int32.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispatcher">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.Dispatcher Dispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.Dispatcher Dispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.Dispatcher" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Dispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::Dispatcher ^ Dispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Dispatcher : System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.DispatcherTimer.Dispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает объект <see cref="T:System.Windows.Threading.Dispatcher" />, связанный с этим объектом <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
        <value>Диспетчер.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.Windows.Threading.DispatcherTimer.Dispatcher%2A> определяется при создании объекта <xref:System.Windows.Threading.DispatcherTimer>.  Для свойства <xref:System.Windows.Threading.Dispatcher> устанавливается текущее <xref:System.Windows.Threading.Dispatcher> во время создания, если не указано другое <xref:System.Windows.Threading.Dispatcher>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public TimeSpan Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Interval" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Interval { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : TimeSpan with get, set" Usage="System.Windows.Threading.DispatcherTimer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает период времени между тактами таймера.</summary>
        <value>Период времени между тактами. Значение по умолчанию — 00:00:00.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Таймеры не гарантированно выполняются в точности при наступлении интервала времени, но они гарантированно не будут выполняться до наступления интервала времени.  Это связано с тем, что <xref:System.Windows.Threading.DispatcherTimer> операции помещаются в очередь <xref:System.Windows.Threading.Dispatcher>, например в другие операции.  При выполнении операции <xref:System.Windows.Threading.DispatcherTimer> зависит от других заданий в очереди и их приоритетов.  
  
## Examples  
 В следующем примере создается <xref:System.Windows.Threading.DispatcherTimer>.  Создается новый объект <xref:System.Windows.Threading.DispatcherTimer> с именем `dispatcherTimer`.  Обработчик событий `dispatcherTimer_Tick` добавляется в событие <xref:System.Windows.Threading.DispatcherTimer.Tick>.  Для <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> устанавливается значение 1 секунда с помощью объекта <xref:System.TimeSpan>.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="interval" /> меньше 0 или больше <see cref="F:System.Int32.MaxValue" /> миллисекунд.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.Threading.DispatcherTimer.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее, работает ли таймер.</summary>
        <value>Значение <see langword="true" />, если таймер запущен; в противном случае — значение <see langword="false" />.  Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 для создания события <xref:System.Windows.Threading.DispatcherTimer.Tick> <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> должно быть задано значение `true`.  
  
 Вызов <xref:System.Windows.Threading.DispatcherTimer.Start%2A> задает <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> для `true`.  
  
 Вызов <xref:System.Windows.Threading.DispatcherTimer.Stop%2A> задает <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> для `false`.  
  
## Examples  
 В следующем примере создается <xref:System.Windows.Threading.DispatcherTimer>.  Создается новый объект <xref:System.Windows.Threading.DispatcherTimer> с именем `dispatcherTimer`.  Обработчик событий `dispatcherTimer_Tick` добавляется в событие <xref:System.Windows.Threading.DispatcherTimer.Tick>.  Для <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> устанавливается значение 1 секунда с помощью объекта <xref:System.TimeSpan>.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="dispatcherTimer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Запускает <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если задать для <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> значение `false`, то при запуске таймера Таймер будет остановлен.  
  
 При остановке таймера задается <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> `true`.  
  
 <xref:System.Windows.Threading.DispatcherTimer.Start%2A> задает <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> для `true`.  
  
 <xref:System.Windows.Threading.DispatcherTimer.Start%2A> сбрасывает <xref:System.Windows.Threading.DispatcherTimer.Interval%2A>таймера.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Windows.Threading.DispatcherTimer>.  Создается новый объект <xref:System.Windows.Threading.DispatcherTimer> с именем `dispatcherTimer`.  Обработчик событий `dispatcherTimer_Tick` добавляется в событие <xref:System.Windows.Threading.DispatcherTimer.Tick>.  Для <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> устанавливается значение 1 секунда с помощью объекта <xref:System.Windows.Duration.TimeSpan%2A>.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="dispatcherTimer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Останавливает <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если задать для <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> значение `false`, то при запуске таймера Таймер будет остановлен.  
  
 При остановке таймера задается <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> `true`.  
  
 Вызов <xref:System.Windows.Threading.DispatcherTimer.Stop%2A> задает <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> для `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.Threading.DispatcherTimer.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает определенные пользователем данные объекта.</summary>
        <value>Определенные пользователем данные.  Значение по умолчанию — <see langword="null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tick">
      <MemberSignature Language="C#" Value="public event EventHandler Tick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Tick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.DispatcherTimer.Tick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Tick As EventHandler " FrameworkAlternate="netcore-3.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Tick;" />
      <MemberSignature Language="F#" Value="member this.Tick : EventHandler " Usage="member this.Tick : System.EventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event Tick As EventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит по истечении интервала таймера.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере создается обработчик событий <xref:System.Windows.Threading.DispatcherTimer.Tick>.  Обработчик событий обновляет <xref:System.Windows.Controls.Label>, отображающий текущую секунду, и вызывает <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> на <xref:System.Windows.Input.CommandManager>.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimer)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimer)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
