<Type Name="UnobservedTaskExceptionEventArgs" FullName="System.Threading.Tasks.UnobservedTaskExceptionEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4524f0f00e6aa08d661ab04f554f9a4a9e1c82d6" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75158932" /></Metadata><TypeSignature Language="C#" Value="public class UnobservedTaskExceptionEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UnobservedTaskExceptionEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.UnobservedTaskExceptionEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class UnobservedTaskExceptionEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class UnobservedTaskExceptionEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type UnobservedTaskExceptionEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="95860-101">Предоставляет данные для события, создаваемого, если происходит непредвиденное исключение задачи с ошибкой <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="95860-101">Provides data for the event that is raised when a faulted <see cref="T:System.Threading.Tasks.Task" />'s exception goes unobserved.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="95860-102">Свойство Exception используется для проверки исключения, не помечая его как наблюдаемое, в то время как метод <xref:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.SetObserved%2A> используется для пометки исключения как наблюдаемого.</span><span class="sxs-lookup"><span data-stu-id="95860-102">The Exception property is used to examine the exception without marking it as observed, whereas the <xref:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.SetObserved%2A> method is used to mark the exception as observed.</span></span> <span data-ttu-id="95860-103">Пометка исключения как наблюдаемого предотвращает срабатывание политики эскалации исключений, которая по умолчанию прерывает процесс.</span><span class="sxs-lookup"><span data-stu-id="95860-103">Marking the exception as observed prevents it from triggering exception escalation policy which, by default, terminates the process.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md"><span data-ttu-id="95860-104">Асинхронное программирование на основе задач</span><span class="sxs-lookup"><span data-stu-id="95860-104">Task-based Asynchronous Programming</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnobservedTaskExceptionEventArgs (AggregateException exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.AggregateException exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.#ctor(System.AggregateException)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (exception As AggregateException)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnobservedTaskExceptionEventArgs(AggregateException ^ exception);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.UnobservedTaskExceptionEventArgs : AggregateException -&gt; System.Threading.Tasks.UnobservedTaskExceptionEventArgs" Usage="new System.Threading.Tasks.UnobservedTaskExceptionEventArgs exception" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.AggregateException" />
      </Parameters>
      <Docs>
        <param name="exception"><span data-ttu-id="95860-105">Непредвиденное исключение.</span><span class="sxs-lookup"><span data-stu-id="95860-105">The Exception that has gone unobserved.</span></span></param>
        <summary><span data-ttu-id="95860-106">Инициализирует новый экземпляр класса <see cref="T:System.Threading.Tasks.UnobservedTaskExceptionEventArgs" /> с непредвиденным исключением.</span><span class="sxs-lookup"><span data-stu-id="95860-106">Initializes a new instance of the <see cref="T:System.Threading.Tasks.UnobservedTaskExceptionEventArgs" /> class with the unobserved exception.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md"><span data-ttu-id="95860-107">Асинхронное программирование на основе задач</span><span class="sxs-lookup"><span data-stu-id="95860-107">Task-based Asynchronous Programming</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public AggregateException Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AggregateException Exception" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As AggregateException" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property AggregateException ^ Exception { AggregateException ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : AggregateException" Usage="System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AggregateException</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="95860-108">Непредвиденное исключение.</span><span class="sxs-lookup"><span data-stu-id="95860-108">The Exception that went unobserved.</span></span></summary>
        <value><span data-ttu-id="95860-109">Непредвиденное исключение.</span><span class="sxs-lookup"><span data-stu-id="95860-109">The Exception that went unobserved.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md"><span data-ttu-id="95860-110">Асинхронное программирование на основе задач</span><span class="sxs-lookup"><span data-stu-id="95860-110">Task-based Asynchronous Programming</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Observed">
      <MemberSignature Language="C#" Value="public bool Observed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Observed" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Observed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Observed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Observed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Observed : bool" Usage="System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Observed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="95860-111">Получает значение, указывающее, отмечено ли данное исключение как observed.</span><span class="sxs-lookup"><span data-stu-id="95860-111">Gets whether this exception has been marked as "observed."</span></span></summary>
        <value><span data-ttu-id="95860-112">Значение true, если исключение помечено как observed, в противном случае — значение false.</span><span class="sxs-lookup"><span data-stu-id="95860-112">true if this exception has been marked as "observed"; otherwise false.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md"><span data-ttu-id="95860-113">Асинхронное программирование на основе задач</span><span class="sxs-lookup"><span data-stu-id="95860-113">Task-based Asynchronous Programming</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetObserved">
      <MemberSignature Language="C#" Value="public void SetObserved ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetObserved() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.SetObserved" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetObserved ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetObserved();" />
      <MemberSignature Language="F#" Value="member this.SetObserved : unit -&gt; unit" Usage="unobservedTaskExceptionEventArgs.SetObserved " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="95860-114">Присваивает свойству <see cref="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception" /> значение observed, не давая ему запускать политику роста исключений, которая по умолчанию прерывает процесс.</span><span class="sxs-lookup"><span data-stu-id="95860-114">Marks the <see cref="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception" /> as "observed," thus preventing it from triggering exception escalation policy which, by default, terminates the process.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md"><span data-ttu-id="95860-115">Асинхронное программирование на основе задач</span><span class="sxs-lookup"><span data-stu-id="95860-115">Task-based Asynchronous Programming</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
