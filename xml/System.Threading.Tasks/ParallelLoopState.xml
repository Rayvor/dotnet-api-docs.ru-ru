<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ff2f2535885d0110dfb688ef430d745c05b838fe" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70628486" /></Metadata><TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <TypeSignature Language="F#" Value="type ParallelLoopState = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Позволяет итерациям параллельных циклов взаимодействовать с другими итерациями. Экземпляр этого класса предоставляется каждому циклу классом <see cref="T:System.Threading.Tasks.Parallel" />; невозможно создавать экземпляры в коде.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обратите внимание, что экземпляр этого класса создать нельзя. Компилятор автоматически создает его в качестве аргумента в вызове <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> метода или. <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Иллюстрация приведена в примере.  
  
 Конструкции, такие как `for` и  `foreach` (in C#) и `For` (в Visual Basic), выполняются последовательно от наименьшего индекса до самого высокого или от первого объекта в наборе до последнего. `For Each` Напротив, <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> методы и <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> не имеют. Поскольку отдельные итерации цикла выполняются параллельно, они могут начинаться и заканчиваться в любом порядке. <xref:System.Threading.Tasks.ParallelLoopState> Класс позволяет отдельным итерациям параллельных циклов взаимодействовать друг с другом. <xref:System.Threading.Tasks.ParallelLoopState> Класс позволяет выполнять следующие задачи:  
  
-   Выход из текущей итерации и предотвращение запуска дополнительных итераций путем вызова <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метода. Это не влияет на итерации, которые уже начали выполнение.  
  
-   Запретите исполнение всех итераций с индексом, превышающим текущий индекс, путем вызова <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метода. Это не влияет на итерации, которые уже начали выполнение.  
  
-   Определите, произошло ли исключение в любой итерации цикла, извлекая значение <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> свойства.  
  
-   Определите, вызвал <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> ли какая либо итерация цикла метод, извлекая значение <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> свойства. Это свойство можно использовать для возврата из итераций цикла, который был запущен до вызова <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метода, но по-прежнему выполняется.  
  
-   Определите, вызвала <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> ли какая либо итерация цикла метод или <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> , или исключение, выполнив извлечение значения <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> свойства.  
  
-   Выход из длительной итерации, индекс которой больше, чем индекс итерации, в которой была вызвана Break, путем получения значения <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> свойства.  
  
   
  
## Examples  
 В следующем примере выполняется параллельное выполнение до 100 итераций цикла. Каждая итерация приостанавливается на случайный интервал от 1 до 1 000 миллисекунд. Генерируемое случайным образом значение определяет, на какой итерации <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> цикла вызывается метод. Как видно из выходных данных в примере, нет итераций, индекс которых больше <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> значения свойства Start после вызова <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метода.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 Поскольку итерации цикла по-прежнему могут выполняться при <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> вызове метода, каждая итерация <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> вызывает свойство, чтобы проверить, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> вызвала ли метод другую итерацию. Если значение свойства равно `true`, итерация проверяет значение <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> свойства и, если оно больше, чем значение индекса текущей итерации, возвращает немедленно.  
  
 ]]></format>
    </remarks>
    <threadsafe><see cref="T:System.Threading.Tasks.ParallelLoopState" /> Экземпляр предназначен для использования только в теле цикла, к которому был предоставлен экземпляр.  Не рекомендуется использовать предоставленный <see cref="T:System.Threading.Tasks.ParallelLoopState" /> экземпляр после завершения связанного цикла, а также не может явно передавать его другим потокам и иметь доступ к ним в любое время.  Для каждого <see cref="T:System.Threading.Tasks.ParallelLoopState" /> потока, участвующего в цикле, будет предоставлен другой экземпляр.</threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Параллелизм данных (библиотека параллельных задач)</related>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberSignature Language="F#" Value="member this.Break : unit -&gt; unit" Usage="parallelLoopState.Break " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Сообщает, что цикл <see cref="T:System.Threading.Tasks.Parallel" /> должен прекратить выполнение итераций после текущей в первый удобный для системы момент.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>Указывает, что не следует выполнять итерации после текущей итерации. Он фактически отменяет все дополнительные итерации цикла. Однако он не останавливает все итерации, которые уже начали выполнение. Например, если <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> вызывается из сотой итерации параллельного цикла, выполняющего итерацию от 0 до 1 000, все итерации меньше 100 должны выполняться, но итерации с 101 по 1000, которые еще не запущены, не выполняются.  
  
 Для длительных итераций, которые могут уже выполняться, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> устанавливает свойство в индекс текущей итерации, если текущий индекс меньше текущего значения <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>. Чтобы остановить итерации, индекс которых больше наименьшей итерации перерыва от конкурирующих выполнений, необходимо выполнить следующие действия.  
  
1.  Проверьте, имеет <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> `true`ли свойство значение.  
  
2.  Выход из итерации, если его индекс больше <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> значения свойства.  
  
 Иллюстрация приведена в примере.  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>обычно используется в алгоритмах на основе поиска, где в источнике данных имеется упорядочение.  
  
   
  
## Examples  
 В следующем примере выполняется параллельное выполнение до 100 итераций цикла. Каждая итерация приостанавливается на случайный интервал от 1 до 1 000 миллисекунд. Генерируемое случайным образом значение определяет, на какой итерации <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> цикла вызывается метод. Как видно из выходных данных в примере, нет итераций, индекс которых больше <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> значения свойства Start после вызова <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метода.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 Поскольку итерации цикла по-прежнему могут выполняться при <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> вызове метода, каждая итерация <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> вызывает свойство, чтобы проверить, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> вызвала ли метод другую итерацию. Если значение свойства равно `true`, итерация проверяет значение <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> свойства и, если оно больше, чем значение индекса текущей итерации, возвращает немедленно.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Был ранее вызван метод <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />. <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> и <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> не могут использоваться в сочетании итерациями одного и того же цикла.</exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Параллелизм данных (библиотека параллельных задач)</related>
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExceptional : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, создалось ли в какой-либо итерации цикла исключение, не обработанное данной итерацией.</summary>
        <value><see langword="true" />При появлении необработанного исключения; в противном случае —. <see langword="false" /></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Параллелизм данных (библиотека параллельных задач)</related>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStopped : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, вызывала ли какая-либо итерация цикла метод <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />.</summary>
        <value><see langword="true" />значение, если любая итерация остановила цикл, вызвав <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> метод; в противном случае —. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для длительных итераций цикла можно получить значение <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> свойства, чтобы определить, выполняются ли какие-либо итерации цикла, который начал выполнение до вызова <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метода. Затем можно использовать значение <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> свойства, чтобы определить, должны ли они немедленно возвращаться или выполняться обычным образом.  
  
   
  
## Examples  
 В следующем примере выполняется параллельное выполнение до 10 000 итераций цикла. Каждая итерация приостанавливается на случайный интервал от 1 до 1 000 миллисекунд. Генерируемое случайным образом значение определяет, на какой итерации <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> цикла вызывается метод. Поскольку итерации цикла по-прежнему могут выполняться при <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> вызове метода, лямбда-выражение <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> вызывает метод, чтобы проверить, вызвала ли <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метод другая итерация. Если он возвращает `true`, итерация возвращается немедленно.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Параллелизм данных (библиотека параллельных задач)</related>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.LowestBreakIteration : Nullable&lt;int64&gt;" Usage="System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает нижнюю итерацию цикла, из которой был вызван метод <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />.</summary>
        <value>Получает первую итерацию, из которой был вызван метод <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />. В случае цикла <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> значение основано на внутренне создаваемом индексе.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Несколько итераций параллельного цикла могут вызывать <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод. Если это так, это значение является наименьшим индексом итерации, вызываемой <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. Если не вызывается <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>итерация цикла, это свойство возвращает `null`значение. Обратите внимание, что значения свойства не затрагиваются вызовами <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метода.  
  
 В долгосрочных итерациях, в которых все итерации после итерации, вызывающей <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод, не требуют выполнения <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> , свойство используется для завершения итераций, которые начали выполнение <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> до вызова метода. Чтобы остановить итерации, индекс которых больше наименьшей итерации перерыва от конкурирующих выполнений, необходимо выполнить следующие действия.  
  
1.  Проверьте, имеет <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> `true`ли свойство значение.  
  
2.  Выход из итерации, если его индекс больше <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> значения свойства.  
  
 Иллюстрация приведена в примере.  
  
   
  
## Examples  
 В следующем примере выполняется параллельное выполнение до 100 итераций цикла. Каждая итерация приостанавливается на случайный интервал от 1 до 1 000 миллисекунд. Генерируемое случайным образом значение определяет, на какой итерации <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> цикла вызывается метод. Это предотвращает выполнение итераций, индекс которых больше <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> значения свойства, начиная с вызова <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метода, но не влияет на итерации, которые уже начали выполняться. Чтобы предотвратить их завершение, каждая итерация вызывает <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> метод, чтобы проверить, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> вызвал ли другой перебор метод. Если да, то итерация проверяет значение <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> свойства и, если оно больше, чем значение индекса текущей итерации, возвращает немедленно.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 Обратите внимание, что <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> , поскольку значение выходит за рамки параллельного цикла, необходимо назначить его переменной, видимой за пределами цикла, если необходимо сохранить его значение.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Параллелизм данных (библиотека параллельных задач)</related>
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShouldExitCurrentIteration : bool" Usage="System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, следует ли текущей итерации цикла выйти на основе запросов от этой или других итераций.</summary>
        <value>Значение <see langword="true" />, если текущая итерация должна завершать работу; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> Для `true`  свойства задано любое из следующих условий:  
  
-   Итерация цикла вызывает <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> или <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.  
  
-   Итерация цикла создает исключение.  
  
-   Цикл отменен.  
  
 Если это свойство имеет `true`значение <xref:System.Threading.Tasks.Parallel> , класс будет заранее пытаться запретить выполнение дополнительных итераций цикла. Однако возможны случаи, когда не удается предотвратить запуск дополнительных итераций.  
  
 Это также может быть так, что долго выполняющаяся итерация уже начала выполнение. В таких случаях итерации могут явно проверить <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> свойство и прекратить выполнение, если свойство возвращает `true`значение.  
  
   
  
## Examples  
 В следующем примере выполняется параллельное выполнение до 100 итераций цикла. Каждая итерация приостанавливается на случайный интервал от 1 до 1 000 миллисекунд. Генерируемое случайным образом значение определяет, на какой итерации <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> цикла вызывается метод. Это предотвращает выполнение итераций, индекс которых больше <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> значения свойства, начиная с вызова <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метода, но не влияет на итерации, которые уже начали выполняться. Чтобы предотвратить их завершение, каждая итерация вызывает <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> метод, чтобы проверить, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> вызвал ли другой перебор метод. Если да, то итерация проверяет значение <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> свойства и, если оно больше, чем значение индекса текущей итерации, возвращает немедленно.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Параллелизм данных (библиотека параллельных задач)</related>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="parallelLoopState.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Сообщает, что цикл <see cref="T:System.Threading.Tasks.Parallel" /> должен прекратить выполнение в первый удобный для системы момент.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Вызов метода означает, что все итерации цикла, которые еще не запущены, не должны выполняться. Он фактически отменяет все дополнительные итерации цикла. Однако он не останавливает все итерации, которые уже начали выполнение.  
  
 Вызов метода приводит к тому, что `true` свойство возвращается для любой итерации цикла, который еще выполняется. <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>  <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Это особенно полезно для длительных итераций, которые могут проверять <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> свойство и завершать работу раньше, если его значение равно. `true`  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>обычно используется в алгоритмах на основе поиска, где после обнаружения результата никаких других итераций выполнять не нужно.  
  
   
  
## Examples  
 В следующем примере выполняется параллельное выполнение до 10 000 итераций цикла. Каждая итерация приостанавливается на случайный интервал от 1 до 1 000 миллисекунд. Генерируемое случайным образом значение определяет, на какой итерации <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> цикла вызывается метод. Как видно из выходных данных в примере, итерации не выполняются после вызова <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метода.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 Поскольку итерации цикла по-прежнему могут выполняться при <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> вызове метода, каждая итерация <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> вызывает метод, чтобы проверить, <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> вызвала ли метод другую итерацию. Если он возвращает `true`, итерация возвращается немедленно.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Метод <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> был вызван ранее. <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> и <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> не могут использоваться в сочетании итерациями одного и того же цикла.</exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Параллелизм данных (библиотека параллельных задач)</related>
      </Docs>
    </Member>
  </Members>
</Type>
