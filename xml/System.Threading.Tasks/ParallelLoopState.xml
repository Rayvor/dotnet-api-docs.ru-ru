<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ad7da69e12c183a7640178f05ddcc28afb430476" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75117545" /></Metadata><TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <TypeSignature Language="F#" Value="type ParallelLoopState = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Позволяет итерациям параллельных циклов взаимодействовать с другими итерациями. Экземпляр этого класса предоставляется каждому циклу классом <see cref="T:System.Threading.Tasks.Parallel" />; невозможно создавать экземпляры в коде.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обратите внимание, что экземпляр этого класса создать нельзя. Компилятор автоматически создает его в качестве аргумента при вызове метода <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> или <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>. Иллюстрация приведена в примере.  
  
 Такие конструкции, как `for` и `foreach` (in C#), `For` и `For Each` (в Visual Basic) выполняются последовательно от самого низкого индекса до самого высокого или от первого объекта в наборе до последнего. Напротив, методы <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> и <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> не имеют. Поскольку отдельные итерации цикла выполняются параллельно, они могут начинаться и заканчиваться в любом порядке. Класс <xref:System.Threading.Tasks.ParallelLoopState> позволяет отдельным итерациям параллельных циклов взаимодействовать друг с другом. Класс <xref:System.Threading.Tasks.ParallelLoopState> позволяет:  
  
-   Выйдите из текущей итерации и запретите запуск дополнительных итераций, вызвав метод <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>. Это не влияет на итерации, которые уже начали выполнение.  
  
-   Запретите исполнение всех итераций с индексом, превышающим текущий индекс, путем вызова метода <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. Это не влияет на итерации, которые уже начали выполнение.  
  
-   Определите, произошло ли исключение в любой итерации цикла, извлекая значение свойства <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A>.  
  
-   Определите, вызвал ли какая либо итерация цикла метод <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>, извлекая значение свойства <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>. Это свойство можно использовать для возврата из итераций цикла, который был запущен до вызова метода <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>, но по-прежнему выполняется.  
  
-   Определите, вызвал ли какой либо итерации цикла метод <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> или <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> или вызвал исключение, извлекая значение свойства <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>.  
  
-   Выход из длительной итерации, индекс которой больше, чем индекс итерации, в которой была вызвана Break, путем получения значения свойства <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>.  
  
   
  
## Examples  
 В следующем примере выполняется параллельное выполнение до 100 итераций цикла. Каждая итерация приостанавливается на случайный интервал от 1 до 1 000 миллисекунд. Генерируемое случайным образом значение определяет, на какой итерации цикла вызывается метод <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. Как видно из выходных данных в примере, нет итераций, индекс которых больше значения свойства <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Start после вызова метода <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 Поскольку итерации цикла по-прежнему могут выполняться при вызове метода <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, каждая итерация вызывает свойство <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>, чтобы проверить, вызвала ли другая итерация метод <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. Если значение свойства равно `true`, итерация проверяет значение свойства <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> и, если оно больше, чем значение индекса текущей итерации, возвращает немедленно.  
  
 ]]></format>
    </remarks>
    <threadsafe>Экземпляр <see cref="T:System.Threading.Tasks.ParallelLoopState" /> предназначен для использования только в теле цикла, к которому был предоставлен экземпляр.  Не рекомендуется использовать предоставленный экземпляр <see cref="T:System.Threading.Tasks.ParallelLoopState" /> после завершения связанного цикла, а также не может явно передавать его другим потокам и иметь доступ к ним в любое время.  Для каждого потока, участвующего в цикле, будет предоставлен другой экземпляр <see cref="T:System.Threading.Tasks.ParallelLoopState" />.</threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Параллелизм данных (библиотека параллельных задач)</related>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberSignature Language="F#" Value="member this.Break : unit -&gt; unit" Usage="parallelLoopState.Break " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Сообщает, что цикл <see cref="T:System.Threading.Tasks.Parallel" /> должен прекратить выполнение итераций после текущей в первый удобный для системы момент.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> указывает, что не следует выполнять итерации после текущей итерации. Он фактически отменяет все дополнительные итерации цикла. Однако он не останавливает все итерации, которые уже начали выполнение. Например, если <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> вызывается из сотой итерации параллельного цикла, выполняющего итерацию от 0 до 1 000, все итерации меньше 100 должны выполняться, но итерации с 101 до 1000, которые еще не запущены, не выполняются.  
  
 Для длительных итераций, которые могут уже выполняться, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> задает для свойства <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> значение индекса текущей итерации, если текущий индекс меньше текущего значения <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>. Чтобы остановить итерации, индекс которых больше наименьшей итерации перерыва от конкурирующих выполнений, необходимо выполнить следующие действия.  
  
1.  Проверьте, `true`ли свойство <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>.  
  
2.  Выйти из итерации, если ее индекс больше значения свойства <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>.  
  
 Иллюстрация приведена в примере.  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> обычно используется в алгоритмах на основе поиска, где в источнике данных имеется упорядочение.  
  
   
  
## Examples  
 В следующем примере выполняется параллельное выполнение до 100 итераций цикла. Каждая итерация приостанавливается на случайный интервал от 1 до 1 000 миллисекунд. Генерируемое случайным образом значение определяет, на какой итерации цикла вызывается метод <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. Как видно из выходных данных в примере, нет итераций, индекс которых больше значения свойства <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Start после вызова метода <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 Поскольку итерации цикла по-прежнему могут выполняться при вызове метода <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, каждая итерация вызывает свойство <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>, чтобы проверить, вызвала ли другая итерация метод <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. Если значение свойства равно `true`, итерация проверяет значение свойства <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> и, если оно больше, чем значение индекса текущей итерации, возвращает немедленно.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Был ранее вызван метод <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />. <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> и <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> не могут использоваться в сочетании итерациями одного и того же цикла.</exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Параллелизм данных (библиотека параллельных задач)</related>
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExceptional : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, возникло ли в какой-либо итерации цикла исключение, не обработанное данной итерацией.</summary>
        <value><see langword="true" /> при появлении необработанного исключения; в противном случае <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Параллелизм данных (библиотека параллельных задач)</related>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStopped : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, вызывала ли какая-либо итерация цикла метод <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />.</summary>
        <value><see langword="true" />, если какая либо итерация остановила цикл, вызвав метод <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />; в противном случае <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для длительных итераций цикла можно получить значение свойства <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>, чтобы определить, выполняются ли какие-либо итерации цикла, который начал выполнение до вызова метода <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>. Затем можно использовать значение свойства <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>, чтобы определить, должны ли они немедленно возвращаться или выполняться в обычном режиме.  
  
   
  
## Examples  
 В следующем примере выполняется параллельное выполнение до 10 000 итераций цикла. Каждая итерация приостанавливается на случайный интервал от 1 до 1 000 миллисекунд. Генерируемое случайным образом значение определяет, на какой итерации цикла вызывается метод <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>. Поскольку итерации цикла по-прежнему могут выполняться при вызове метода <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>, лямбда-выражение вызывает метод <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>, чтобы проверить, вызвала ли другая итерация метод <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>. Если он возвращает `true`, итерация немедленно возвращается.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Параллелизм данных (библиотека параллельных задач)</related>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.LowestBreakIteration : Nullable&lt;int64&gt;" Usage="System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает нижнюю итерацию цикла, из которой был вызван метод <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />.</summary>
        <value>Получает первую итерацию, из которой был вызван метод <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />. В случае цикла <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> значение основано на внутренне создаваемом индексе.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Несколько итераций параллельного цикла могут вызывать метод <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. Если это так, это значение является наименьшим индексом итерации, которая вызвала <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. Если ни одна итерация цикла не вызвала <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, это свойство возвращает `null`. Обратите внимание, что значения свойства не затрагиваются вызовами метода <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.  
  
 В долгосрочных итерациях, в которых все итерации после итерации, вызывающей метод <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, не требуют выполнения, свойство <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> используется для завершения итераций, которые начали выполнение до вызова метода <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. Чтобы остановить итерации, индекс которых больше наименьшей итерации перерыва от конкурирующих выполнений, необходимо выполнить следующие действия.  
  
1.  Проверьте, `true`ли свойство <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>.  
  
2.  Выйти из итерации, если ее индекс больше значения свойства <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>.  
  
 Иллюстрация приведена в примере.  
  
   
  
## Examples  
 В следующем примере выполняется параллельное выполнение до 100 итераций цикла. Каждая итерация приостанавливается на случайный интервал от 1 до 1 000 миллисекунд. Генерируемое случайным образом значение определяет, на какой итерации цикла вызывается метод <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. Это предотвращает выполнение итераций, индекс которых превышает значение свойства <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>, начиная с вызова метода <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, но не влияет на итерации, которые уже начали выполняться. Чтобы предотвратить их завершение, каждая итерация вызывает метод <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>, чтобы проверить, вызвала ли другая итерация метод <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. Если да, то итерация проверяет значение свойства <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> и, если оно больше, чем значение индекса текущей итерации, возвращает немедленно.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 Обратите внимание, что, поскольку значение <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> выходит за рамки параллельного цикла, необходимо назначить его переменной, видимой за пределами цикла, если необходимо сохранить его значение.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Параллелизм данных (библиотека параллельных задач)</related>
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShouldExitCurrentIteration : bool" Usage="System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, следует ли текущей итерации цикла завершить работу на основе запросов от этой или других итераций.</summary>
        <value>Значение <see langword="true" />, если текущая итерация должна завершать работу; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> имеет значение `true` при любом из следующих условий:  
  
-   Итерация цикла вызывает <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> или <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.  
  
-   Итерация цикла создает исключение.  
  
-   Цикл отменен.  
  
 Если это свойство имеет значение `true`, класс <xref:System.Threading.Tasks.Parallel> будет заранее пытаться запретить выполнение дополнительных итераций цикла. Однако возможны случаи, когда не удается предотвратить запуск дополнительных итераций.  
  
 Это также может быть так, что долго выполняющаяся итерация уже начала выполнение. В таких случаях итерации могут явно проверить свойство <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> и прекратить выполнение, если свойство возвращает `true`.  
  
   
  
## Examples  
 В следующем примере выполняется параллельное выполнение до 100 итераций цикла. Каждая итерация приостанавливается на случайный интервал от 1 до 1 000 миллисекунд. Генерируемое случайным образом значение определяет, на какой итерации цикла вызывается метод <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. Это предотвращает выполнение итераций, индекс которых превышает значение свойства <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>, начиная с вызова метода <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, но не влияет на итерации, которые уже начали выполняться. Чтобы предотвратить их завершение, каждая итерация вызывает метод <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>, чтобы проверить, вызвала ли другая итерация метод <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. Если да, то итерация проверяет значение свойства <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> и, если оно больше, чем значение индекса текущей итерации, возвращает немедленно.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Параллелизм данных (библиотека параллельных задач)</related>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="parallelLoopState.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Сообщает, что цикл <see cref="T:System.Threading.Tasks.Parallel" /> должен прекратить выполнение в первый удобный для системы момент.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызов метода <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> указывает, что все итерации цикла, которые еще не запущены, не должны выполняться. Он фактически отменяет все дополнительные итерации цикла. Однако он не останавливает все итерации, которые уже начали выполнение.  
  
 Вызов метода <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> приводит к тому, что свойство <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> возвращает `true` для любой итерации цикла, который еще выполняется. Это особенно полезно для длительных итераций, которые могут проверять свойство <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> и завершать работу раньше, если его значение равно `true`.  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> обычно используется в алгоритмах на основе поиска, где после обнаружения результата никакие другие итерации выполнять не нужно.  
  
   
  
## Examples  
 В следующем примере выполняется параллельное выполнение до 10 000 итераций цикла. Каждая итерация приостанавливается на случайный интервал от 1 до 1 000 миллисекунд. Генерируемое случайным образом значение определяет, на какой итерации цикла вызывается метод <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>. Как видно из выходных данных в примере, после вызова метода <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> итерации не выполняются.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 Поскольку итерации цикла по-прежнему могут выполняться при вызове метода <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>, каждая итерация вызывает метод <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>, чтобы проверить, вызвала ли другая итерация метод <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>. Если он возвращает `true`, итерация немедленно возвращается.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Метод <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> был вызван ранее. <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> и <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> не могут использоваться в сочетании итерациями одного и того же цикла.</exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Параллелизм данных (библиотека параллельных задач)</related>
      </Docs>
    </Member>
  </Members>
</Type>
