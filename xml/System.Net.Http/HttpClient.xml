<Type Name="HttpClient" FullName="System.Net.Http.HttpClient">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cea21f1dd3f18bd707c8a0d07edb1ff2ba09fc3d" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73390872" /></Metadata><TypeSignature Language="C#" Value="public class HttpClient : System.Net.Http.HttpMessageInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HttpClient extends System.Net.Http.HttpMessageInvoker" />
  <TypeSignature Language="DocId" Value="T:System.Net.Http.HttpClient" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpClient&#xA;Inherits HttpMessageInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpClient : System::Net::Http::HttpMessageInvoker" />
  <TypeSignature Language="F#" Value="type HttpClient = class&#xA;    inherit HttpMessageInvoker" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Http</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.Http.HttpMessageInvoker</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="03102-101">Предоставляет базовый класс для отправки HTTP-запросов и получения HTTP-ответов от ресурса с заданным URI.</span><span class="sxs-lookup"><span data-stu-id="03102-101">Provides a base class for sending HTTP requests and receiving HTTP responses from a resource identified by a URI.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-102">Экземпляр класса <xref:System.Net.Http.HttpClient> выступает в качестве сеанса для отправки HTTP-запросов.</span><span class="sxs-lookup"><span data-stu-id="03102-102">The <xref:System.Net.Http.HttpClient> class instance acts as a session to send HTTP requests.</span></span> <span data-ttu-id="03102-103"><xref:System.Net.Http.HttpClient> экземпляр — это коллекция параметров, применяемых ко всем запросам, выполняемым этим экземпляром.</span><span class="sxs-lookup"><span data-stu-id="03102-103">An <xref:System.Net.Http.HttpClient> instance is a collection of settings applied to all requests executed by that instance.</span></span> <span data-ttu-id="03102-104">Кроме того, каждый экземпляр <xref:System.Net.Http.HttpClient> использует собственный пул соединений, изолируя его запросы от запросов, выполняемых другими экземплярами <xref:System.Net.Http.HttpClient>.</span><span class="sxs-lookup"><span data-stu-id="03102-104">In addition, every <xref:System.Net.Http.HttpClient> instance uses its own connection pool, isolating its requests from requests executed by other <xref:System.Net.Http.HttpClient> instances.</span></span>  
  
 <span data-ttu-id="03102-105"><xref:System.Net.Http.HttpClient> также выступает в качестве базового класса для более конкретных HTTP-клиентов.</span><span class="sxs-lookup"><span data-stu-id="03102-105">The <xref:System.Net.Http.HttpClient> also acts as a base class for more specific HTTP clients.</span></span> <span data-ttu-id="03102-106">Примером может быть Фацебукхттпклиент, предоставляющий дополнительные методы, характерные для веб-службы Facebook (например, метод «друзья»).</span><span class="sxs-lookup"><span data-stu-id="03102-106">An example would be a FacebookHttpClient providing additional methods specific to a Facebook web service (a GetFriends method, for instance).</span></span> <span data-ttu-id="03102-107">Производные классы не должны переопределять виртуальные методы класса.</span><span class="sxs-lookup"><span data-stu-id="03102-107">Derived classes should not override the virtual methods on the class.</span></span> <span data-ttu-id="03102-108">Вместо этого используйте перегрузку конструктора, которая принимает <xref:System.Net.Http.HttpMessageHandler> для настройки обработки, выполняемой до или после запроса.</span><span class="sxs-lookup"><span data-stu-id="03102-108">Instead, use a constructor overload that accepts <xref:System.Net.Http.HttpMessageHandler> to configure any pre- or post-request processing instead.</span></span>
  
 <span data-ttu-id="03102-109">По умолчанию в .NET Framework и Mono <xref:System.Net.HttpWebRequest> используется для отправки запросов на сервер.</span><span class="sxs-lookup"><span data-stu-id="03102-109">By default on .NET Framework and Mono, <xref:System.Net.HttpWebRequest> is used to send requests to the server.</span></span> <span data-ttu-id="03102-110">Это поведение можно изменить, указав другой канал в одной из перегрузок конструктора, принимающих экземпляр <xref:System.Net.Http.HttpMessageHandler> в качестве параметра.</span><span class="sxs-lookup"><span data-stu-id="03102-110">This behavior can be modified by specifying a different channel in one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> instance as parameter.</span></span> <span data-ttu-id="03102-111">Если требуются такие функции, как проверка подлинности или кэширование, <xref:System.Net.Http.WebRequestHandler> можно использовать для настройки параметров, и экземпляр можно передать в конструктор.</span><span class="sxs-lookup"><span data-stu-id="03102-111">If features like authentication or caching are required, <xref:System.Net.Http.WebRequestHandler> can be used to configure settings and the instance can be passed to the constructor.</span></span> <span data-ttu-id="03102-112">Возвращаемый обработчик может быть передан в одну из перегрузок конструктора, принимающих параметр <xref:System.Net.Http.HttpMessageHandler>.</span><span class="sxs-lookup"><span data-stu-id="03102-112">The returned handler can be passed to one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> parameter.</span></span>  
  
 <span data-ttu-id="03102-113">Если приложение, использующее <xref:System.Net.Http.HttpClient> и связанные классы в пространстве имен <xref:System.Net.Http>, планирует загружать большие объемы данных (50 МБ или более), приложение должно выполнять потоковую передачу этих файлов и не использовать буферизацию по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="03102-113">If an app using <xref:System.Net.Http.HttpClient> and related classes in the <xref:System.Net.Http> namespace intends to download large amounts of data (50 megabytes or more), then the app should stream those downloads and not use the default buffering.</span></span> <span data-ttu-id="03102-114">Если используется буферизация по умолчанию, использование памяти клиента будет очень большим, что может привести к значительному снижению производительности.</span><span class="sxs-lookup"><span data-stu-id="03102-114">If the default buffering is used the client memory usage will get very large, potentially resulting in substantially reduced performance.</span></span>  
  
 <span data-ttu-id="03102-115">Следующие методы являются потокобезопасными:</span><span class="sxs-lookup"><span data-stu-id="03102-115">The following methods are thread safe:</span></span>  
  
1.  <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A>  
  
2.  <xref:System.Net.Http.HttpClient.DeleteAsync%2A>  
  
3.  <xref:System.Net.Http.HttpClient.GetAsync%2A>  
  
4.  <xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A>  
  
5.  <xref:System.Net.Http.HttpClient.GetStreamAsync%2A>  
  
6.  <xref:System.Net.Http.HttpClient.GetStringAsync%2A>  
  
7.  <xref:System.Net.Http.HttpClient.PostAsync%2A>  
  
8.  <xref:System.Net.Http.HttpClient.PutAsync%2A>  
  
9. <xref:System.Net.Http.HttpClient.SendAsync%2A>  
  
 <span data-ttu-id="03102-116"><xref:System.Net.Http.HttpClient> предназначено для однократного создания и повторного использования в течение всего жизненного цикла приложения.</span><span class="sxs-lookup"><span data-stu-id="03102-116"><xref:System.Net.Http.HttpClient> is intended to be instantiated once and re-used throughout the life of an application.</span></span> <span data-ttu-id="03102-117">При создании экземпляра класса HttpClient для каждого запроса будет исчерпано количество сокетов, доступных при высоких нагрузках.</span><span class="sxs-lookup"><span data-stu-id="03102-117">Instantiating an HttpClient class for every request will exhaust the number of sockets available under heavy loads.</span></span> <span data-ttu-id="03102-118">Это приведет к ошибкам SocketException.</span><span class="sxs-lookup"><span data-stu-id="03102-118">This will result in SocketException errors.</span></span> <span data-ttu-id="03102-119">Ниже приведен пример, использующий HttpClient правильно.</span><span class="sxs-lookup"><span data-stu-id="03102-119">Below is an example using HttpClient correctly.</span></span>  
  
```csharp
public class GoodController : ApiController
{
    private static readonly HttpClient HttpClient;

    static GoodController()
    {
        HttpClient = new HttpClient();
    }
}
```

```vb
  Public Class GoodController
    Inherits ApiController  
   
    Private Shared ReadOnly HttpClient As HttpClient  
  
    Shared Sub New()  
        HttpClient = New HttpClient()
    End Sub
End Class
```

<span data-ttu-id="03102-120"><xref:System.Net.Http.HttpClient> представляет собой высокоуровневый интерфейс API, который упаковывает функциональные возможности нижнего уровня, доступные на каждой платформе, где она выполняется.</span><span class="sxs-lookup"><span data-stu-id="03102-120">The <xref:System.Net.Http.HttpClient> is a high-level API that wraps the lower-level functionality available on each platform where it runs.</span></span>

<span data-ttu-id="03102-121">На каждой платформе <xref:System.Net.Http.HttpClient> пытается использовать оптимальный доступный транспорт:</span><span class="sxs-lookup"><span data-stu-id="03102-121">On each platform, <xref:System.Net.Http.HttpClient> tries to use the best available transport:</span></span>

| <span data-ttu-id="03102-122">**Узел/Среда выполнения**</span><span class="sxs-lookup"><span data-stu-id="03102-122">**Host/Runtime**</span></span>            | <span data-ttu-id="03102-123">**Фонов**</span><span class="sxs-lookup"><span data-stu-id="03102-123">**Backend**</span></span>                                                                               |
| --------------------------- | ----------------------------------------------------------------------------------------- |
| <span data-ttu-id="03102-124">Windows/. NET Framework</span><span class="sxs-lookup"><span data-stu-id="03102-124">Windows/.NET Framework</span></span>      | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="03102-125">Windows/Mono</span><span class="sxs-lookup"><span data-stu-id="03102-125">Windows/Mono</span></span>                | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="03102-126">Windows/UWP</span><span class="sxs-lookup"><span data-stu-id="03102-126">Windows/UWP</span></span>                 | <span data-ttu-id="03102-127">Машинный <xref:System.Net.Http.WinHttpHandler> Windows (поддерживается HTTP 2,0)</span><span class="sxs-lookup"><span data-stu-id="03102-127">Windows native <xref:System.Net.Http.WinHttpHandler> (HTTP 2.0 capable)</span></span>                   |
| <span data-ttu-id="03102-128">Windows/. NET Core 1.0 — 2.0</span><span class="sxs-lookup"><span data-stu-id="03102-128">Windows/.NET Core 1.0-2.0</span></span>   | <span data-ttu-id="03102-129">Машинный <xref:System.Net.Http.WinHttpHandler> Windows (поддерживается HTTP 2,0)</span><span class="sxs-lookup"><span data-stu-id="03102-129">Windows native <xref:System.Net.Http.WinHttpHandler> (HTTP 2.0 capable)</span></span>                   |
| <span data-ttu-id="03102-130">Android или Xamarin</span><span class="sxs-lookup"><span data-stu-id="03102-130">Android/Xamarin</span></span>             | <span data-ttu-id="03102-131">Выбирается во время сборки.</span><span class="sxs-lookup"><span data-stu-id="03102-131">Selected at build-time.</span></span> <span data-ttu-id="03102-132">Можно использовать <xref:System.Net.HttpWebRequest> или настроить для использования собственного [`HttpURLConnection`](https://developer.xamarin.com/api/type/Java.Net.HttpURLConnection/) Android</span><span class="sxs-lookup"><span data-stu-id="03102-132">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Android's native [`HttpURLConnection`](https://developer.xamarin.com/api/type/Java.Net.HttpURLConnection/)</span></span> |
| <span data-ttu-id="03102-133">iOS, tvOS, watchOS/Xamarin</span><span class="sxs-lookup"><span data-stu-id="03102-133">iOS, tvOS, watchOS/Xamarin</span></span>  | <span data-ttu-id="03102-134">Выбирается во время сборки.</span><span class="sxs-lookup"><span data-stu-id="03102-134">Selected at build-time.</span></span> <span data-ttu-id="03102-135">Можно использовать <xref:System.Net.HttpWebRequest> или настроить для использования [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) Apple (с поддержкой HTTP 2,0).</span><span class="sxs-lookup"><span data-stu-id="03102-135">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Apple's [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP 2.0 capable)</span></span> |
| <span data-ttu-id="03102-136">macOS/Xamarin</span><span class="sxs-lookup"><span data-stu-id="03102-136">macOS/Xamarin</span></span>               | <span data-ttu-id="03102-137">Выбирается во время сборки.</span><span class="sxs-lookup"><span data-stu-id="03102-137">Selected at build-time.</span></span> <span data-ttu-id="03102-138">Можно использовать <xref:System.Net.HttpWebRequest> или настроить для использования [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) Apple (с поддержкой HTTP 2,0).</span><span class="sxs-lookup"><span data-stu-id="03102-138">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Apple's [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP 2.0 capable)</span></span> |
| <span data-ttu-id="03102-139">macOS/Mono</span><span class="sxs-lookup"><span data-stu-id="03102-139">macOS/Mono</span></span>                  | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="03102-140">macOS/. NET Core 1.0 — 2.0</span><span class="sxs-lookup"><span data-stu-id="03102-140">macOS/.NET Core 1.0-2.0</span></span>     | <span data-ttu-id="03102-141">HTTP-транспорт на основе `libcurl`(поддерживается HTTP 2,0)</span><span class="sxs-lookup"><span data-stu-id="03102-141">`libcurl`-based HTTP transport (HTTP 2.0 capable)</span></span>                                         |
| <span data-ttu-id="03102-142">Linux/Mono</span><span class="sxs-lookup"><span data-stu-id="03102-142">Linux/Mono</span></span>                  | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="03102-143">Linux/. NET Core 1.0 — 2.0</span><span class="sxs-lookup"><span data-stu-id="03102-143">Linux/.NET Core 1.0-2.0</span></span>     | <span data-ttu-id="03102-144">HTTP-транспорт на основе `libcurl`(поддерживается HTTP 2,0)</span><span class="sxs-lookup"><span data-stu-id="03102-144">`libcurl`-based HTTP transport (HTTP 2.0 capable)</span></span>                                         |
| <span data-ttu-id="03102-145">.NET Core 2,1 и более поздние версии</span><span class="sxs-lookup"><span data-stu-id="03102-145">.NET Core 2.1 and later</span></span>     | <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType>                    |

<span data-ttu-id="03102-146">Пользователи также могут настроить конкретный транспорт для <xref:System.Net.Http.HttpClient>, вызвав конструктор <xref:System.Net.Http.HttpClient.%23ctor*>, который принимает <xref:System.Net.Http.HttpMessageHandler>.</span><span class="sxs-lookup"><span data-stu-id="03102-146">Users can also configure a specific transport for <xref:System.Net.Http.HttpClient> by invoking the <xref:System.Net.Http.HttpClient.%23ctor*> constructor that takes an <xref:System.Net.Http.HttpMessageHandler>.</span></span>

### <a name="httpclient-and-net-core"></a><span data-ttu-id="03102-147">HttpClient и .NET Core</span><span class="sxs-lookup"><span data-stu-id="03102-147">HttpClient and .NET Core</span></span>

<span data-ttu-id="03102-148">Начиная с .NET Core 2,1 класс <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType>, а не `HttpClientHandler` предоставляет реализацию, используемую сетевыми классами HTTP более высокого уровня, такими как `HttpClient`.</span><span class="sxs-lookup"><span data-stu-id="03102-148">Starting with .NET Core 2.1, the <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> class instead of `HttpClientHandler` provides the implementation used by higher-level HTTP networking classes such as `HttpClient`.</span></span> <span data-ttu-id="03102-149">Использование <xref:System.Net.Http.SocketsHttpHandler> предлагает ряд преимуществ.</span><span class="sxs-lookup"><span data-stu-id="03102-149">The use of <xref:System.Net.Http.SocketsHttpHandler> offers a number of advantages:</span></span>

- <span data-ttu-id="03102-150">Значительное улучшение производительности по сравнению с предыдущей реализацией.</span><span class="sxs-lookup"><span data-stu-id="03102-150">A significant performance improvement when compared with the previous implementation.</span></span>

- <span data-ttu-id="03102-151">Исключение зависимостей платформы, которое упрощает развертывание и обслуживание.</span><span class="sxs-lookup"><span data-stu-id="03102-151">The elimination of platform dependencies, which simplifies deployment and servicing.</span></span> <span data-ttu-id="03102-152">Например, `libcurl` больше не является зависимостью от .NET Core для macOS и .NET Core для Linux.</span><span class="sxs-lookup"><span data-stu-id="03102-152">For example, `libcurl` is no longer a dependency on .NET Core for macOS and .NET Core for Linux.</span></span>

- <span data-ttu-id="03102-153">Согласованное поведение на всех платформах .NET.</span><span class="sxs-lookup"><span data-stu-id="03102-153">Consistent behavior across all .NET platforms.</span></span>

<span data-ttu-id="03102-154">Если это изменение нежелательно, можно настроить приложение так, чтобы оно использовало более старую <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType>, а не несколько способов.</span><span class="sxs-lookup"><span data-stu-id="03102-154">If this change is undesirable, you can configure your application to use the older <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType> instead in a number of ways:</span></span>

- <span data-ttu-id="03102-155">Вызвав метод <xref:System.AppContext.SetSwitch%2A?displayProperty=nameWithType> следующим образом:</span><span class="sxs-lookup"><span data-stu-id="03102-155">By calling the <xref:System.AppContext.SetSwitch%2A?displayProperty=nameWithType> method as follows:</span></span>

   ```csharp
   AppContext.SetSwitch("System.Net.Http.UseSocketsHttpHandler", false);
   ```

   ```vb
   AppContext.SetSwitch("System.Net.Http.UseSocketsHttpHandler", False)
   ``` 
- <span data-ttu-id="03102-156">Определив параметр `System.Net.Http.UseSocketsHttpHandler` в файле конфигурации *. netcore. runtimeconfig. JSON* :</span><span class="sxs-lookup"><span data-stu-id="03102-156">By defining the `System.Net.Http.UseSocketsHttpHandler` switch in the *.netcore.runtimeconfig.json* configuration file:</span></span>

  ```json
  "runtimeOptions": {
    "configProperties": {
        "System.Net.Http.UseSocketsHttpHandler": false
    }
  }
  ```
  
- <span data-ttu-id="03102-157">Определив переменную среды с именем `DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER` и задав для нее значение `false` или 0.</span><span class="sxs-lookup"><span data-stu-id="03102-157">By defining an environment variable named `DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER` and setting it to either `false` or 0.</span></span>

## Examples  
 [!code-csharp[System.Net.Http.HttpClient#1](~/samples/snippets/csharp/VS_Snippets_Misc/system.net.http.httpclient/cs/source.cs#1)]  
 [!code-vb[System.Net.Http.HttpClient#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/system.net.http.httpclient/vb/source.vb#1)]

 <span data-ttu-id="03102-158">В предыдущем примере кода используется точка входа `async Task Main()`.</span><span class="sxs-lookup"><span data-stu-id="03102-158">The preceding code example uses an `async Task Main()` entry point.</span></span> <span data-ttu-id="03102-159">Для этого компонента C# требуется 7,1 или более поздняя версия.</span><span class="sxs-lookup"><span data-stu-id="03102-159">That feature requires C# 7.1 or later.</span></span>
 
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=245696"><span data-ttu-id="03102-160">Connecting to a web service (Соединение с веб-службой)</span><span class="sxs-lookup"><span data-stu-id="03102-160">Connecting to a web service</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=245697"><span data-ttu-id="03102-161">Краткое руководство. подключение с помощью HttpClient</span><span class="sxs-lookup"><span data-stu-id="03102-161">Quickstart: Connecting using HttpClient</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=245699"><span data-ttu-id="03102-162">How to use HttpClient handlers (Как использовать обработчики HttpClient)</span><span class="sxs-lookup"><span data-stu-id="03102-162">How to use HttpClient handlers</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=245698"><span data-ttu-id="03102-163">How to secure HttpClient connections (Как защитить подключения HttpClient)</span><span class="sxs-lookup"><span data-stu-id="03102-163">How to secure HttpClient connections</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=242550"><span data-ttu-id="03102-164">Пример HttpClient</span><span class="sxs-lookup"><span data-stu-id="03102-164">HttpClient Sample</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="03102-165">Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.HttpClient" />.</span><span class="sxs-lookup"><span data-stu-id="03102-165">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-166"><xref:System.Net.Http.HttpClient> предназначено для однократного создания и повторного использования в течение всего жизненного цикла приложения.</span><span class="sxs-lookup"><span data-stu-id="03102-166"><xref:System.Net.Http.HttpClient> is intended to be instantiated once and re-used throughout the life of an application.</span></span> <span data-ttu-id="03102-167">При создании экземпляра класса HttpClient для каждого запроса будет исчерпано количество сокетов, доступных при высоких нагрузках.</span><span class="sxs-lookup"><span data-stu-id="03102-167">Instantiating an HttpClient class for every request will exhaust the number of sockets available under heavy loads.</span></span> <span data-ttu-id="03102-168">Это приведет к ошибкам SocketException.</span><span class="sxs-lookup"><span data-stu-id="03102-168">This will result in SocketException errors.</span></span> <span data-ttu-id="03102-169">Ниже приведен пример, использующий HttpClient правильно.</span><span class="sxs-lookup"><span data-stu-id="03102-169">Below is an example using HttpClient correctly.</span></span>  
  
```csharp  
public class GoodController : ApiController  
{  
    private static readonly HttpClient HttpClient;  
  
    static GoodController()  
    {  
        HttpClient = new HttpClient();  
    }  
}  
```

```vb
  Public Class GoodController
    Inherits ApiController  
   
    Private Shared ReadOnly HttpClient As HttpClient
  
    Shared Sub New()  
        HttpClient = New HttpClient()
    End Sub
End Class
```

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="03102-170">Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.HttpClient" />, используя <see cref="T:System.Net.Http.HttpClientHandler" />, который удаляется при удалении этого экземпляра.</span><span class="sxs-lookup"><span data-stu-id="03102-170">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class using a <see cref="T:System.Net.Http.HttpClientHandler" /> that is disposed when this instance is disposed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[    
## Remarks  
<span data-ttu-id="03102-171">Использование этого конструктора эквивалентно вызову конструктора [`HttpClient(new HttpClientHandler(), true)`](xref:System.Net.Http.HttpClient.%23ctor(System.Net.Http.HttpMessageHandler,System.Boolean)) .</span><span class="sxs-lookup"><span data-stu-id="03102-171">Using this constructor is equivalent to calling the [`HttpClient(new HttpClientHandler(), true)`](xref:System.Net.Http.HttpClient.%23ctor(System.Net.Http.HttpMessageHandler,System.Boolean)) constructor.</span></span>
]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient (System.Net.Http.HttpMessageHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Http.HttpMessageHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As HttpMessageHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient(System::Net::Http::HttpMessageHandler ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Net.Http.HttpClient : System.Net.Http.HttpMessageHandler -&gt; System.Net.Http.HttpClient" Usage="new System.Net.Http.HttpClient handler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Net.Http.HttpMessageHandler" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="03102-172">Стек обработчика HTTP-данных, используемый для отправки запросов.</span><span class="sxs-lookup"><span data-stu-id="03102-172">The HTTP handler stack to use for sending requests.</span></span></param>
        <summary><span data-ttu-id="03102-173">Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.HttpClient" /> с указанным обработчиком.</span><span class="sxs-lookup"><span data-stu-id="03102-173">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class with the specified handler.</span></span> <span data-ttu-id="03102-174">Обработчик удаляется при удалении этого экземпляра.</span><span class="sxs-lookup"><span data-stu-id="03102-174">The handler is disposed when this instance is disposed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[    
## Remarks  
<span data-ttu-id="03102-175">Использование этого конструктора эквивалентно вызову конструктора [`HttpClient(handler, true)`](xref:System.Net.Http.HttpClient.%23ctor(System.Net.Http.HttpMessageHandler,System.Boolean)) .</span><span class="sxs-lookup"><span data-stu-id="03102-175">Using this constructor is equivalent to calling the [`HttpClient(handler, true)`](xref:System.Net.Http.HttpClient.%23ctor(System.Net.Http.HttpMessageHandler,System.Boolean)) constructor.</span></span>

<span data-ttu-id="03102-176">Указанный `handler` будет удален путем вызова метода [HttpClient. Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose).</span><span class="sxs-lookup"><span data-stu-id="03102-176">The specified `handler` will be disposed of by calling [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose).</span></span>  
]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-177">Значение параметра <paramref name="handler" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-177">The <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient (System.Net.Http.HttpMessageHandler handler, bool disposeHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Http.HttpMessageHandler handler, bool disposeHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As HttpMessageHandler, disposeHandler As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient(System::Net::Http::HttpMessageHandler ^ handler, bool disposeHandler);" />
      <MemberSignature Language="F#" Value="new System.Net.Http.HttpClient : System.Net.Http.HttpMessageHandler * bool -&gt; System.Net.Http.HttpClient" Usage="new System.Net.Http.HttpClient (handler, disposeHandler)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Net.Http.HttpMessageHandler" />
        <Parameter Name="disposeHandler" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="03102-178">Компонент <see cref="T:System.Net.Http.HttpMessageHandler" />, отвечающий за обработку сообщений ответов HTTP.</span><span class="sxs-lookup"><span data-stu-id="03102-178">The <see cref="T:System.Net.Http.HttpMessageHandler" /> responsible for processing the HTTP response messages.</span></span></param>
        <param name="disposeHandler"><span data-ttu-id="03102-179">Значение <see langword="true" />, если внутренний обработчик должен быть удален с помощью [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose). Значение <see langword="false" />, если планируется повторно использовать внутренний обработчик.</span><span class="sxs-lookup"><span data-stu-id="03102-179"><see langword="true" /> if the inner handler should be disposed of by [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose); <see langword="false" /> if you intend to reuse the inner handler.</span></span></param>
        <summary><span data-ttu-id="03102-180">Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.HttpClient" /> с предоставленным обработчиком и указывает, должен ли этот обработчик удаляться при удалении этого экземпляра.</span><span class="sxs-lookup"><span data-stu-id="03102-180">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class with the provided handler, and specifies whether that handler should be disposed when this instance is disposed.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-181">Значение параметра <paramref name="handler" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-181">The <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BaseAddress">
      <MemberSignature Language="C#" Value="public Uri BaseAddress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri BaseAddress" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.BaseAddress" />
      <MemberSignature Language="VB.NET" Value="Public Property BaseAddress As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ BaseAddress { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BaseAddress : Uri with get, set" Usage="System.Net.Http.HttpClient.BaseAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03102-182">Возвращает или задает базовый адрес универсального кода ресурса (URI) интернет-ресурса, используемого при отправке запросов.</span><span class="sxs-lookup"><span data-stu-id="03102-182">Gets or sets the base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.</span></span></summary>
        <value><span data-ttu-id="03102-183">Базовый адрес универсального кода ресурса (URI) интернет-ресурса, используемого при отправке запросов.</span><span class="sxs-lookup"><span data-stu-id="03102-183">The base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-184">При отправке <xref:System.Net.Http.HttpRequestMessage> с относительным URI Универсальный код ресурса (URI) сообщения добавляется в свойство <xref:System.Net.Http.HttpClient.BaseAddress%2A>, чтобы создать абсолютный URI.</span><span class="sxs-lookup"><span data-stu-id="03102-184">When sending a <xref:System.Net.Http.HttpRequestMessage> with a relative Uri, the message Uri will be added to the <xref:System.Net.Http.HttpClient.BaseAddress%2A> property to create an absolute Uri.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelPendingRequests">
      <MemberSignature Language="C#" Value="public void CancelPendingRequests ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelPendingRequests() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.CancelPendingRequests" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelPendingRequests ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelPendingRequests();" />
      <MemberSignature Language="F#" Value="member this.CancelPendingRequests : unit -&gt; unit" Usage="httpClient.CancelPendingRequests " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="03102-185">Отмена всех ожидающих запросов на этом экземпляре.</span><span class="sxs-lookup"><span data-stu-id="03102-185">Cancel all pending requests on this instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-186">После вызова этого метода экземпляр <xref:System.Net.Http.HttpClient> по-прежнему может использоваться для выполнения дополнительных запросов.</span><span class="sxs-lookup"><span data-stu-id="03102-186">After calling this method, the <xref:System.Net.Http.HttpClient> instance can still be used to execute additional requests.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultProxy">
      <MemberSignature Language="C#" Value="public static System.Net.IWebProxy DefaultProxy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Net.IWebProxy DefaultProxy" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.DefaultProxy" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultProxy As IWebProxy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Net::IWebProxy ^ DefaultProxy { System::Net::IWebProxy ^ get(); void set(System::Net::IWebProxy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultProxy : System.Net.IWebProxy with get, set" Usage="System.Net.Http.HttpClient.DefaultProxy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IWebProxy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03102-187">Возвращает или устанавливает глобальный прокси-сервер HTTP.</span><span class="sxs-lookup"><span data-stu-id="03102-187">Gets or sets the global Http proxy.</span></span></summary>
        <value><span data-ttu-id="03102-188">Прокси-сервер, используемый каждым вызовом, который создает <see cref="T:System.Net.HttpWebRequest" />.</span><span class="sxs-lookup"><span data-stu-id="03102-188">A proxy used by every call that instantiates a <see cref="T:System.Net.HttpWebRequest" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks
<span data-ttu-id="03102-189">Это статическое свойство определяет прокси-сервер по умолчанию, используемый всеми экземплярами <xref:System.Net.Http.HttpClient> , если прокси-сервер не задан явным образом в <xref:System.Net.Http.HttpClientHandler>, прошедших через его конструктор.</span><span class="sxs-lookup"><span data-stu-id="03102-189">This static property determines the default proxy that all <xref:System.Net.Http.HttpClient> instances use if no proxy is set explicitly in the <xref:System.Net.Http.HttpClientHandler> passed through its constructor.</span></span> 

<span data-ttu-id="03102-190">Экземпляр по умолчанию, возвращаемый этим свойством, инициализирует следующий набор правил в зависимости от платформы:</span><span class="sxs-lookup"><span data-stu-id="03102-190">The default instance returned by this property will initialize following a different set of rules depending on your platform:</span></span>
* <span data-ttu-id="03102-191">**Для Windows:** Считывает конфигурацию прокси-сервера из переменных среды или, если они не определены, из параметров прокси пользователя.</span><span class="sxs-lookup"><span data-stu-id="03102-191">**For Windows:** Reads proxy configuration from environment variables or, if those are not defined, from the user's proxy settings.</span></span>

* <span data-ttu-id="03102-192">**Для macOS:** Считывает конфигурацию прокси-сервера из переменных среды или, если они не определены, из параметров прокси-сервера системы.</span><span class="sxs-lookup"><span data-stu-id="03102-192">**For macOS:** Reads proxy configuration from environment variables or, if those are not defined, from the system's proxy settings.</span></span>

* <span data-ttu-id="03102-193">**Для Linux:** Считывает конфигурацию прокси-сервера из переменных среды или, если они не определены, это свойство инициализирует ненастроенный экземпляр, который обходит все адреса.</span><span class="sxs-lookup"><span data-stu-id="03102-193">**For Linux:** Reads proxy configuration from environment variables or, in case those are not defined, this property initializes a non-configured instance that bypasses all addresses.</span></span>

<span data-ttu-id="03102-194">Переменные среды, используемые для инициализации `DefaultProxy` в платформах на платформе Windows и UNIX:</span><span class="sxs-lookup"><span data-stu-id="03102-194">The environment variables used for `DefaultProxy` initialization on Windows and Unix-based platforms are:</span></span>
* <span data-ttu-id="03102-195">HTTP_PROXY: имя узла или IP-адрес прокси-сервера, используемого для HTTP-запросов.</span><span class="sxs-lookup"><span data-stu-id="03102-195">HTTP_PROXY: the hostname or IP address of the proxy server used on HTTP requests.</span></span>
* <span data-ttu-id="03102-196">HTTPS_PROXY: имя узла или IP-адрес прокси-сервера, используемого в запросах HTTPS.</span><span class="sxs-lookup"><span data-stu-id="03102-196">HTTPS_PROXY: the hostname or IP address of the proxy server used on HTTPS requests.</span></span>
* <span data-ttu-id="03102-197">ALL_PROXY: имя узла или IP-адрес прокси-сервера, используемого для запросов HTTP и (или) HTTPS в случае, если HTTP_PROXY и/или HTTPS_PROXY не определены.</span><span class="sxs-lookup"><span data-stu-id="03102-197">ALL_PROXY: the hostname or IP address of the proxy server used on HTTP and/or HTTPS requests in case HTTP_PROXY and/or HTTPS_PROXY are not defined.</span></span>
* <span data-ttu-id="03102-198">NO_PROXY: список имен узлов с разделителями-запятыми, которые следует исключить из прокси-сервера.</span><span class="sxs-lookup"><span data-stu-id="03102-198">NO_PROXY: a comma-separated list of hostnames that should be excluded from proxying.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-199">Передаваемое значение не может быть <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-199">The value passed cannot be <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultRequestHeaders">
      <MemberSignature Language="C#" Value="public System.Net.Http.Headers.HttpRequestHeaders DefaultRequestHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Http.Headers.HttpRequestHeaders DefaultRequestHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.DefaultRequestHeaders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultRequestHeaders As HttpRequestHeaders" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Http::Headers::HttpRequestHeaders ^ DefaultRequestHeaders { System::Net::Http::Headers::HttpRequestHeaders ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultRequestHeaders : System.Net.Http.Headers.HttpRequestHeaders" Usage="System.Net.Http.HttpClient.DefaultRequestHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.Headers.HttpRequestHeaders</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03102-200">Возвращает заголовки, которые должны отправляться с каждым запросом.</span><span class="sxs-lookup"><span data-stu-id="03102-200">Gets the headers which should be sent with each request.</span></span></summary>
        <value><span data-ttu-id="03102-201">Заголовки, которые должны отправляться с каждым запросом.</span><span class="sxs-lookup"><span data-stu-id="03102-201">The headers which should be sent with each request.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-202">Заголовки, заданные для этого свойства, не нужно задавать в сообщениях запроса.</span><span class="sxs-lookup"><span data-stu-id="03102-202">Headers set on this property don't need to be set on request messages again.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultRequestVersion">
      <MemberSignature Language="C#" Value="public Version DefaultRequestVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Version DefaultRequestVersion" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.DefaultRequestVersion" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultRequestVersion As Version" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Version ^ DefaultRequestVersion { Version ^ get(); void set(Version ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultRequestVersion : Version with get, set" Usage="System.Net.Http.HttpClient.DefaultRequestVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03102-203">Возвращает или задает версию HTTP по умолчанию, используемую в последующих запросах, выполняемых этим экземпляром <see cref="T:System.Net.Http.HttpClient" />.</span><span class="sxs-lookup"><span data-stu-id="03102-203">Gets or sets the default HTTP version used on subsequent requests made by this <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></summary>
        <value><span data-ttu-id="03102-204">Версия по умолчанию, используемая для любых запросов, выполняемых с данным экземпляром <see cref="T:System.Net.Http.HttpClient" />.</span><span class="sxs-lookup"><span data-stu-id="03102-204">The default version to use for any requests made with this <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="03102-205">по умолчанию `DefaultRequestVersion` <xref:System.Net.HttpVersion.Version11?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="03102-205">`DefaultRequestVersion` is <xref:System.Net.HttpVersion.Version11?displayProperty=nameWithType> by default.</span></span>

<span data-ttu-id="03102-206">Свойство `DefaultRequestVersion` указывает версию HTTP по умолчанию, используемую для запросов, отправляемых с помощью этого экземпляра <xref:System.Net.Http.HttpClient>, при формировании <xref:System.Net.Http.HttpRequestMessage> для отправки, в частности с вызовами методов, таких как <xref:System.Net.Http.HttpClient.DeleteAsync%2A>, <xref:System.Net.Http.HttpClient.GetAsync%2A>, <xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A>, <xref:System.Net.Http.HttpClient.GetStreamAsync%2A>, <xref:System.Net.Http.HttpClient.GetStringAsync%2A>, <xref:System.Net.Http.HttpClient.PatchAsync%2A>, <xref:System.Net.Http.HttpClient.PostAsync%2A>и <xref:System.Net.Http.HttpClient.PutAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="03102-206">The `DefaultRequestVersion` property specifies the default HTTP version to use for requests sent using this <xref:System.Net.Http.HttpClient> instance when it constructs the <xref:System.Net.Http.HttpRequestMessage> to send, specifically with calls to methods such as <xref:System.Net.Http.HttpClient.DeleteAsync%2A>, <xref:System.Net.Http.HttpClient.GetAsync%2A>, <xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A>, <xref:System.Net.Http.HttpClient.GetStreamAsync%2A>, <xref:System.Net.Http.HttpClient.GetStringAsync%2A>, <xref:System.Net.Http.HttpClient.PatchAsync%2A>, <xref:System.Net.Http.HttpClient.PostAsync%2A>, and <xref:System.Net.Http.HttpClient.PutAsync%2A>.</span></span>

<span data-ttu-id="03102-207">Свойство `DefaultRequestVersion` не применяется к методу <xref:System.Net.Http.HttpClient.SendAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="03102-207">The `DefaultRequestVersion` property doesn't apply to the <xref:System.Net.Http.HttpClient.SendAsync%2A> method.</span></span> <span data-ttu-id="03102-208">Параметр <xref:System.Net.Http.HttpRequestMessage>, передаваемый в качестве аргумента методу <xref:System.Net.Http.HttpClient.SendAsync%2A>, имеет собственное свойство `Version`, которое управляет версией HTTP, используемой для запроса.</span><span class="sxs-lookup"><span data-stu-id="03102-208">The <xref:System.Net.Http.HttpRequestMessage> parameter passed as the argument to the <xref:System.Net.Http.HttpClient.SendAsync%2A> method has its own `Version` property that controls the HTTP version used for the request.</span></span>

<span data-ttu-id="03102-209">Свойство `DefaultRequestVersion` можно изменить, пока экземпляр <xref:System.Net.Http.HttpClient> не запустил никаких запросов.</span><span class="sxs-lookup"><span data-stu-id="03102-209">The `DefaultRequestVersion` property can be changed as long as the <xref:System.Net.Http.HttpClient> instance has not started any request.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-210">В операции над множеством <see langword="DefaultRequestVersion" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-210">In a set operation, <see langword="DefaultRequestVersion" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="03102-211">Экземпляр <see cref="T:System.Net.Http.HttpClient" /> уже запустил один или несколько запросов.</span><span class="sxs-lookup"><span data-stu-id="03102-211">The <see cref="T:System.Net.Http.HttpClient" /> instance has already started one or more requests.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="03102-212">Экземпляр <see cref="T:System.Net.Http.HttpClient" /> уже удален.</span><span class="sxs-lookup"><span data-stu-id="03102-212">The <see cref="T:System.Net.Http.HttpClient" /> instance has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="03102-213">Отправка запроса DELETE согласно указанному универсальному коду ресурса (URI) в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-213">Send a DELETE request to the specified Uri as an asynchronous operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As String) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="03102-214">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="03102-214">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="03102-215">Отправка запроса DELETE согласно указанному универсальному коду ресурса (URI) в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-215">Send a DELETE request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-216">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-216">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-217">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-217">This operation will not block.</span></span> <span data-ttu-id="03102-218">Возвращенный объект <xref:System.Threading.Tasks.Task%601> будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="03102-218">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-219">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-219">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="03102-220">Экземпляр <see cref="T:System.Net.Http.HttpClient" /> уже отправил сообщение с запросом.</span><span class="sxs-lookup"><span data-stu-id="03102-220">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="03102-221">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="03102-221">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As Uri) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="03102-222">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="03102-222">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="03102-223">Отправка запроса DELETE согласно указанному универсальному коду ресурса (URI) в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-223">Send a DELETE request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-224">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-224">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-225">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-225">This operation will not block.</span></span> <span data-ttu-id="03102-226">Возвращенный объект <xref:System.Threading.Tasks.Task%601> будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="03102-226">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-227">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-227">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="03102-228">Экземпляр <see cref="T:System.Net.Http.HttpClient" /> уже отправил сообщение с запросом.</span><span class="sxs-lookup"><span data-stu-id="03102-228">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="03102-229">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="03102-229">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (string requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="03102-230">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="03102-230">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="03102-231">Токен отмены, который может использоваться другими объектами или потоками для получения уведомления об отмене.</span><span class="sxs-lookup"><span data-stu-id="03102-231">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="03102-232">Отправка запроса DELETE к указанному URI с токеном отмены в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-232">Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-233">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-233">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-234">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-234">This operation will not block.</span></span> <span data-ttu-id="03102-235">Возвращенный объект <xref:System.Threading.Tasks.Task%601> будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="03102-235">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-236">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-236">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="03102-237">Экземпляр <see cref="T:System.Net.Http.HttpClient" /> уже отправил сообщение с запросом.</span><span class="sxs-lookup"><span data-stu-id="03102-237">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="03102-238">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="03102-238">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="03102-239">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="03102-239">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="03102-240">Токен отмены, который может использоваться другими объектами или потоками для получения уведомления об отмене.</span><span class="sxs-lookup"><span data-stu-id="03102-240">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="03102-241">Отправка запроса DELETE к указанному URI с токеном отмены в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-241">Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-242">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-242">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-243">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-243">This operation will not block.</span></span> <span data-ttu-id="03102-244">Возвращенный объект <xref:System.Threading.Tasks.Task%601> будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="03102-244">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-245">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-245">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="03102-246">Экземпляр <see cref="T:System.Net.Http.HttpClient" /> уже отправил сообщение с запросом.</span><span class="sxs-lookup"><span data-stu-id="03102-246">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="03102-247">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="03102-247">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="httpClient.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="03102-248">Значение <see langword="true" /> для освобождения управляемых и неуправляемых ресурсов; значение <see langword="false" /> для освобождения только неуправляемых ресурсов.</span><span class="sxs-lookup"><span data-stu-id="03102-248"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to releases only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="03102-249">Освобождает неуправляемые ресурсы, используемые объектом <see cref="T:System.Net.Http.HttpClient" />, и опционально удаляет управляемые ресурсы.</span><span class="sxs-lookup"><span data-stu-id="03102-249">Releases the unmanaged resources used by the <see cref="T:System.Net.Http.HttpClient" /> and optionally disposes of the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-250">Этот метод вызывается с помощью открытого метода `Dispose()` и метода <xref:System.Object.Finalize%2A>.</span><span class="sxs-lookup"><span data-stu-id="03102-250">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="03102-251">`Dispose()` вызывает защищенный метод `Dispose(Boolean)` с параметром `disposing`, для которого задано значение `true`.</span><span class="sxs-lookup"><span data-stu-id="03102-251">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="03102-252"><xref:System.Object.Finalize%2A> вызывает `Dispose` с `disposing`, установленным в `false`.</span><span class="sxs-lookup"><span data-stu-id="03102-252"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="03102-253">Если параметр `disposing` имеет значение `true`, то данный метод освобождает все ресурсы, занятые любыми управляемыми объектами, на которые ссылается этот объект <xref:System.Net.Http.HttpClient>.</span><span class="sxs-lookup"><span data-stu-id="03102-253">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Http.HttpClient> references.</span></span> <span data-ttu-id="03102-254">Этот метод вызывает метод `Dispose()` каждого объекта, на который есть ссылка.</span><span class="sxs-lookup"><span data-stu-id="03102-254">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 <span data-ttu-id="03102-255">При вызове этого метода вызывается метод <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A> для прерывания всех ожидающих запросов.</span><span class="sxs-lookup"><span data-stu-id="03102-255">When this method is called, the <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A> method is called to abort all pending requests.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="03102-256">Отправка запроса GET согласно указанному универсальному коду ресурса (URI) в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-256">Send a GET request to the specified Uri as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-257">Операция не будет заблокирована.</span><span class="sxs-lookup"><span data-stu-id="03102-257">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="03102-258">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="03102-258">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="03102-259">Отправка запроса GET согласно указанному универсальному коду ресурса (URI) в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-259">Send a GET request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-260">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-260">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-261">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-261">This operation will not block.</span></span> <span data-ttu-id="03102-262">Возвращенный объект <xref:System.Threading.Tasks.Task%601> будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="03102-262">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-263">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-263">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="03102-264">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="03102-264">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="03102-265">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="03102-265">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="03102-266">Отправка запроса GET согласно указанному универсальному коду ресурса (URI) в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-266">Send a GET request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-267">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-267">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-268">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-268">This operation will not block.</span></span> <span data-ttu-id="03102-269">Возвращенный объект <xref:System.Threading.Tasks.Task%601> будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="03102-269">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-270">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-270">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="03102-271">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="03102-271">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Net.Http.HttpCompletionOption completionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string * System.Net.Http.HttpCompletionOption -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="03102-272">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="03102-272">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="03102-273">Значение параметра завершения операции HTTP, указывающее, когда следует считать операцию завершенной.</span><span class="sxs-lookup"><span data-stu-id="03102-273">An HTTP completion option value that indicates when the operation should be considered completed.</span></span></param>
        <summary><span data-ttu-id="03102-274">Отправка запроса GET указанному универсальному коду ресурса (URI) с параметром "выполнение HTTP" в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-274">Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-275">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-275">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-276">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-276">This operation will not block.</span></span> <span data-ttu-id="03102-277">Возвращаемый объект <xref:System.Threading.Tasks.Task%601> будет завершен на основе параметра `completionOption` после считывания части или всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="03102-277">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-278">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-278">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="03102-279">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="03102-279">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="03102-280">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="03102-280">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="03102-281">Токен отмены, который может использоваться другими объектами или потоками для получения уведомления об отмене.</span><span class="sxs-lookup"><span data-stu-id="03102-281">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="03102-282">Отправка запроса DELETE указанному универсальному коду ресурса (URI) с токеном отмены в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-282">Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-283">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-283">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-284">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-284">This operation will not block.</span></span> <span data-ttu-id="03102-285">Возвращенный объект <xref:System.Threading.Tasks.Task%601> будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="03102-285">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-286">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-286">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="03102-287">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="03102-287">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Net.Http.HttpCompletionOption completionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri * System.Net.Http.HttpCompletionOption -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="03102-288">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="03102-288">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="03102-289">Значение параметра завершения операции HTTP, указывающее, когда следует считать операцию завершенной.</span><span class="sxs-lookup"><span data-stu-id="03102-289">An HTTP completion option value that indicates when the operation should be considered completed.</span></span></param>
        <summary><span data-ttu-id="03102-290">Отправка запроса GET указанному универсальному коду ресурса (URI) с параметром "выполнение HTTP" в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-290">Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-291">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-291">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-292">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-292">This operation will not block.</span></span> <span data-ttu-id="03102-293">Возвращаемый объект <xref:System.Threading.Tasks.Task%601> будет завершен на основе параметра `completionOption` после считывания части или всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="03102-293">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-294">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-294">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="03102-295">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="03102-295">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="03102-296">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="03102-296">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="03102-297">Токен отмены, который может использоваться другими объектами или потоками для получения уведомления об отмене.</span><span class="sxs-lookup"><span data-stu-id="03102-297">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="03102-298">Отправка запроса DELETE указанному универсальному коду ресурса (URI) с токеном отмены в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-298">Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-299">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-299">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-300">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-300">This operation will not block.</span></span> <span data-ttu-id="03102-301">Возвращенный объект <xref:System.Threading.Tasks.Task%601> будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="03102-301">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-302">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-302">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="03102-303">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="03102-303">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="03102-304">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="03102-304">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="03102-305">Значение параметра завершения операции HTTP, указывающее, когда следует считать операцию завершенной.</span><span class="sxs-lookup"><span data-stu-id="03102-305">An HTTP  completion option value that indicates when the operation should be considered completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="03102-306">Токен отмены, который может использоваться другими объектами или потоками для получения уведомления об отмене.</span><span class="sxs-lookup"><span data-stu-id="03102-306">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="03102-307">Отправка запроса GET к указанному универсальному коду ресурса (URI) с параметром "выполнение HTTP" и токеном отмены в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-307">Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-308">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-308">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-309">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-309">This operation will not block.</span></span> <span data-ttu-id="03102-310">Возвращаемый объект <xref:System.Threading.Tasks.Task%601> будет завершен на основе параметра `completionOption` после считывания части или всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="03102-310">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-311">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-311">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="03102-312">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="03102-312">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="03102-313">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="03102-313">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="03102-314">Значение параметра завершения операции HTTP, указывающее, когда следует считать операцию завершенной.</span><span class="sxs-lookup"><span data-stu-id="03102-314">An HTTP  completion option value that indicates when the operation should be considered completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="03102-315">Токен отмены, который может использоваться другими объектами или потоками для получения уведомления об отмене.</span><span class="sxs-lookup"><span data-stu-id="03102-315">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="03102-316">Отправка запроса GET к указанному универсальному коду ресурса (URI) с параметром "выполнение HTTP" и токеном отмены в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-316">Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-317">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-317">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-318">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-318">This operation will not block.</span></span> <span data-ttu-id="03102-319">Возвращаемый объект <xref:System.Threading.Tasks.Task%601> будет завершен на основе параметра `completionOption` после считывания части или всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="03102-319">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-320">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-320">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="03102-321">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="03102-321">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteArrayAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="03102-322">Отправка запроса GET согласно указанному универсальному коду ресурса (URI) и возврат текста ответа в виде массива байтов в асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-322">Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-323">Операция не будет заблокирована.</span><span class="sxs-lookup"><span data-stu-id="03102-323">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As String) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetByteArrayAsync : string -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="httpClient.GetByteArrayAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="03102-324">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="03102-324">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="03102-325">Отправляет запрос GET согласно указанному универсальному коду ресурса (URI) и возвращает текст ответа в виде массива байтов в асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-325">Sends a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-326">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-326">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-327">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-327">This operation will not block.</span></span> <span data-ttu-id="03102-328">Возвращенный объект <xref:System.Threading.Tasks.Task%601> будет завершен после считывания всего текста ответа.</span><span class="sxs-lookup"><span data-stu-id="03102-328">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-329">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-329">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="03102-330">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="03102-330">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As Uri) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetByteArrayAsync : Uri -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="httpClient.GetByteArrayAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="03102-331">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="03102-331">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="03102-332">Отправка запроса GET согласно указанному универсальному коду ресурса (URI) и возврат текста ответа в виде массива байтов в асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-332">Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-333">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-333">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-334">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-334">This operation will not block.</span></span> <span data-ttu-id="03102-335">Возвращенный объект <xref:System.Threading.Tasks.Task%601> будет завершен после считывания всего текста ответа.</span><span class="sxs-lookup"><span data-stu-id="03102-335">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-336">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-336">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="03102-337">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="03102-337">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetStreamAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="03102-338">Отправка запроса GET согласно указанному универсальному коду ресурса (URI) и возврат текста ответа в виде потока в асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-338">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-339">Операция не будет заблокирована.</span><span class="sxs-lookup"><span data-stu-id="03102-339">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As String) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStreamAsync : string -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpClient.GetStreamAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="03102-340">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="03102-340">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="03102-341">Отправка запроса GET согласно указанному универсальному коду ресурса (URI) и возврат текста ответа в виде потока в асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-341">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-342">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-342">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-343">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-343">This operation will not block.</span></span> <span data-ttu-id="03102-344">Возвращенный объект <xref:System.Threading.Tasks.Task%601> будет завершен после считывания заголовков ответа.</span><span class="sxs-lookup"><span data-stu-id="03102-344">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the response headers are read.</span></span> <span data-ttu-id="03102-345">Этот метод не считывает и не замещает текст ответа.</span><span class="sxs-lookup"><span data-stu-id="03102-345">This method does not read nor buffer the response body.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-346">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-346">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="03102-347">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="03102-347">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As Uri) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStreamAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpClient.GetStreamAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="03102-348">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="03102-348">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="03102-349">Отправка запроса GET согласно указанному универсальному коду ресурса (URI) и возврат текста ответа в виде потока в асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-349">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-350">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-350">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-351">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-351">This operation will not block.</span></span> <span data-ttu-id="03102-352">Возвращенный объект <xref:System.Threading.Tasks.Task%601> будет завершен после считывания заголовков ответа.</span><span class="sxs-lookup"><span data-stu-id="03102-352">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the response headers are read.</span></span> <span data-ttu-id="03102-353">Этот метод не считывает и не замещает текст ответа.</span><span class="sxs-lookup"><span data-stu-id="03102-353">This method does not read nor buffer the response body.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-354">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-354">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="03102-355">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="03102-355">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetStringAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="03102-356">Отправка запроса GET согласно указанному универсальному коду ресурса (URI) и возврат текста ответа в виде строки в асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-356">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-357">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-357">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As String) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStringAsync : string -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="httpClient.GetStringAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="03102-358">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="03102-358">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="03102-359">Отправка запроса GET согласно указанному универсальному коду ресурса (URI) и возврат текста ответа в виде строки в асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-359">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-360">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-360">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-361">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-361">This operation will not block.</span></span> <span data-ttu-id="03102-362">Возвращенный объект <xref:System.Threading.Tasks.Task%601> будет завершен после считывания всего текста ответа.</span><span class="sxs-lookup"><span data-stu-id="03102-362">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-363">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-363">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="03102-364">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="03102-364">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As Uri) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStringAsync : Uri -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="httpClient.GetStringAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="03102-365">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="03102-365">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="03102-366">Отправка запроса GET согласно указанному универсальному коду ресурса (URI) и возврат текста ответа в виде строки в асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-366">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-367">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-367">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-368">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-368">This operation will not block.</span></span> <span data-ttu-id="03102-369">Возвращенный объект <xref:System.Threading.Tasks.Task%601> будет завершен после считывания всего текста ответа.</span><span class="sxs-lookup"><span data-stu-id="03102-369">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-370">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-370">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="03102-371">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="03102-371">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MaxResponseContentBufferSize">
      <MemberSignature Language="C#" Value="public long MaxResponseContentBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxResponseContentBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.MaxResponseContentBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxResponseContentBufferSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxResponseContentBufferSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxResponseContentBufferSize : int64 with get, set" Usage="System.Net.Http.HttpClient.MaxResponseContentBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03102-372">Возвращает или задает максимальное число байтов в буфере при чтении содержимого отклика.</span><span class="sxs-lookup"><span data-stu-id="03102-372">Gets or sets the maximum number of bytes to buffer when reading the response content.</span></span></summary>
        <value><span data-ttu-id="03102-373">Максимальное число байтов в буфере при чтении содержимого отклика.</span><span class="sxs-lookup"><span data-stu-id="03102-373">The maximum number of bytes to buffer when reading the response content.</span></span> <span data-ttu-id="03102-374">Значением по умолчанию для этого свойства является 2 гигабайта.</span><span class="sxs-lookup"><span data-stu-id="03102-374">The default value for this property is 2 gigabytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-375">Приложение может задать для свойства <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> меньшее значение, чтобы ограничить размер ответа в буфер при чтении ответа.</span><span class="sxs-lookup"><span data-stu-id="03102-375">An app can set the <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property to a lower value to limit the size of the response to buffer when reading the response.</span></span> <span data-ttu-id="03102-376">Если размер содержимого ответа больше, чем свойство <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A>, возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="03102-376">If the size of the response content is greater than the  <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property, an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="03102-377">Указанный размер меньше или равен нулю.</span><span class="sxs-lookup"><span data-stu-id="03102-377">The size specified is less than or equal to zero.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="03102-378">Операция для текущего экземпляра уже запущена.</span><span class="sxs-lookup"><span data-stu-id="03102-378">An operation has already been started on the current instance.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="03102-379">Текущий экземпляр удален.</span><span class="sxs-lookup"><span data-stu-id="03102-379">The current instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (string requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : string * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="03102-380">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="03102-380">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="03102-381">Содержимое HTTP-запроса, отправляемое на сервер.</span><span class="sxs-lookup"><span data-stu-id="03102-381">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="03102-382">Асинхронно отправляет запрос PATCH к универсальному коду ресурса (URI), заданному в виде строки.</span><span class="sxs-lookup"><span data-stu-id="03102-382">Sends a PATCH request to a Uri designated as a string as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-383">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-383">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-384">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-384">This operation will not block.</span></span> <span data-ttu-id="03102-385">Возвращенный объект <xref:System.Threading.Tasks.Task%601> будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="03102-385">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (Uri requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : Uri * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="03102-386">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="03102-386">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="03102-387">Содержимое HTTP-запроса, отправляемое на сервер.</span><span class="sxs-lookup"><span data-stu-id="03102-387">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="03102-388">Отправляет запрос PATCH в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-388">Sends a PATCH request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-389">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-389">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-390">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-390">This operation will not block.</span></span> <span data-ttu-id="03102-391">Возвращенный объект <xref:System.Threading.Tasks.Task%601> будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="03102-391">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : string * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="03102-392">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="03102-392">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="03102-393">Содержимое HTTP-запроса, отправляемое на сервер.</span><span class="sxs-lookup"><span data-stu-id="03102-393">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="03102-394">Токен отмены, который может использоваться другими объектами или потоками для получения уведомления об отмене.</span><span class="sxs-lookup"><span data-stu-id="03102-394">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="03102-395">Асинхронно отправляет запрос PATCH с токеном отмены к универсальному коду ресурса (URI), представленному строкой.</span><span class="sxs-lookup"><span data-stu-id="03102-395">Sends a PATCH request with a cancellation token to a Uri represented as a string as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-396">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-396">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-397">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-397">This operation will not block.</span></span> <span data-ttu-id="03102-398">Возвращенный объект <xref:System.Threading.Tasks.Task%601> будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="03102-398">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : Uri * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="03102-399">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="03102-399">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="03102-400">Содержимое HTTP-запроса, отправляемое на сервер.</span><span class="sxs-lookup"><span data-stu-id="03102-400">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="03102-401">Токен отмены, который может использоваться другими объектами или потоками для получения уведомления об отмене.</span><span class="sxs-lookup"><span data-stu-id="03102-401">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="03102-402">Отправляет запрос PATCH с токеном отмены в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-402">Sends a PATCH request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-403">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-403">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-404">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-404">This operation will not block.</span></span> <span data-ttu-id="03102-405">Возвращенный объект <xref:System.Threading.Tasks.Task%601> будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="03102-405">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PostAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="03102-406">Отправка запроса POST по указанному универсальному коду ресурса (URI) в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-406">Send a POST request to the specified Uri as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-407">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-407">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (string requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : string * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="03102-408">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="03102-408">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="03102-409">Содержимое HTTP-запроса, отправляемое на сервер.</span><span class="sxs-lookup"><span data-stu-id="03102-409">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="03102-410">Отправка запроса POST по указанному универсальному коду ресурса (URI) в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-410">Send a POST request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-411">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-411">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-412">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-412">This operation will not block.</span></span> <span data-ttu-id="03102-413">Возвращенный объект <xref:System.Threading.Tasks.Task%601> будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="03102-413">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-414">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-414">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="03102-415">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="03102-415">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (Uri requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : Uri * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="03102-416">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="03102-416">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="03102-417">Содержимое HTTP-запроса, отправляемое на сервер.</span><span class="sxs-lookup"><span data-stu-id="03102-417">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="03102-418">Отправка запроса POST по указанному универсальному коду ресурса (URI) в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-418">Send a POST request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-419">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-419">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-420">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-420">This operation will not block.</span></span> <span data-ttu-id="03102-421">Возвращенный объект <xref:System.Threading.Tasks.Task%601> будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="03102-421">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-422">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-422">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="03102-423">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="03102-423">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : string * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="03102-424">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="03102-424">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="03102-425">Содержимое HTTP-запроса, отправляемое на сервер.</span><span class="sxs-lookup"><span data-stu-id="03102-425">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="03102-426">Токен отмены, который может использоваться другими объектами или потоками для получения уведомления об отмене.</span><span class="sxs-lookup"><span data-stu-id="03102-426">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="03102-427">Отправка запроса POST с токеном отмены в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-427">Send a POST request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-428">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-428">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-429">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-429">This operation will not block.</span></span> <span data-ttu-id="03102-430">Возвращенный объект <xref:System.Threading.Tasks.Task%601> будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="03102-430">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-431">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-431">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="03102-432">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="03102-432">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : Uri * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="03102-433">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="03102-433">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="03102-434">Содержимое HTTP-запроса, отправляемое на сервер.</span><span class="sxs-lookup"><span data-stu-id="03102-434">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="03102-435">Токен отмены, который может использоваться другими объектами или потоками для получения уведомления об отмене.</span><span class="sxs-lookup"><span data-stu-id="03102-435">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="03102-436">Отправка запроса POST с токеном отмены в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-436">Send a POST request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-437">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-437">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-438">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-438">This operation will not block.</span></span> <span data-ttu-id="03102-439">Возвращенный объект <xref:System.Threading.Tasks.Task%601> будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="03102-439">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-440">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-440">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="03102-441">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="03102-441">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="PutAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="03102-442">Отправка запроса PUT по указанному универсальному коду ресурса (URI) в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-442">Send a PUT request to the specified Uri as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-443">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-443">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (string requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : string * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="03102-444">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="03102-444">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="03102-445">Содержимое HTTP-запроса, отправляемое на сервер.</span><span class="sxs-lookup"><span data-stu-id="03102-445">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="03102-446">Отправка запроса PUT по указанному универсальному коду ресурса (URI) в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-446">Send a PUT request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-447">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-447">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-448">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-448">This operation will not block.</span></span> <span data-ttu-id="03102-449">Возвращенный объект <xref:System.Threading.Tasks.Task%601> будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="03102-449">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-450">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-450">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="03102-451">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="03102-451">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (Uri requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : Uri * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="03102-452">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="03102-452">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="03102-453">Содержимое HTTP-запроса, отправляемое на сервер.</span><span class="sxs-lookup"><span data-stu-id="03102-453">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="03102-454">Отправка запроса PUT по указанному универсальному коду ресурса (URI) в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-454">Send a PUT request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-455">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-455">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-456">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-456">This operation will not block.</span></span> <span data-ttu-id="03102-457">Возвращенный объект <xref:System.Threading.Tasks.Task%601> будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="03102-457">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-458">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-458">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="03102-459">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="03102-459">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : string * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="03102-460">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="03102-460">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="03102-461">Содержимое HTTP-запроса, отправляемое на сервер.</span><span class="sxs-lookup"><span data-stu-id="03102-461">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="03102-462">Токен отмены, который может использоваться другими объектами или потоками для получения уведомления об отмене.</span><span class="sxs-lookup"><span data-stu-id="03102-462">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="03102-463">Отправка запроса PUT с токеном отмены в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-463">Send a PUT request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-464">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-464">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-465">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-465">This operation will not block.</span></span> <span data-ttu-id="03102-466">Возвращенный объект <xref:System.Threading.Tasks.Task%601> будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="03102-466">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-467">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-467">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="03102-468">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="03102-468">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : Uri * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="03102-469">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="03102-469">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="03102-470">Содержимое HTTP-запроса, отправляемое на сервер.</span><span class="sxs-lookup"><span data-stu-id="03102-470">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="03102-471">Токен отмены, который может использоваться другими объектами или потоками для получения уведомления об отмене.</span><span class="sxs-lookup"><span data-stu-id="03102-471">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="03102-472">Отправка запроса PUT с токеном отмены в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-472">Send a PUT request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-473">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-473">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-474">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-474">This operation will not block.</span></span> <span data-ttu-id="03102-475">Возвращенный объект <xref:System.Threading.Tasks.Task%601> будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="03102-475">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-476">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-476">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="03102-477">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="03102-477">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="03102-478">Отправка HTTP-запроса в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-478">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-479">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-479">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (request As HttpRequestMessage) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="03102-480">Сообщение HTTP-запроса для отправки.</span><span class="sxs-lookup"><span data-stu-id="03102-480">The HTTP request message to send.</span></span></param>
        <summary><span data-ttu-id="03102-481">Отправка HTTP-запроса в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-481">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-482">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-482">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-483">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-483">This operation will not block.</span></span> <span data-ttu-id="03102-484">Возвращенный объект <xref:System.Threading.Tasks.Task%601> будет завершен после считывания всего ответа, включая содержимое.</span><span class="sxs-lookup"><span data-stu-id="03102-484">The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-485">Значение параметра <paramref name="request" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-485">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="03102-486">Экземпляр <see cref="T:System.Net.Http.HttpClient" /> уже отправил сообщение с запросом.</span><span class="sxs-lookup"><span data-stu-id="03102-486">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="03102-487">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="03102-487">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (request As HttpRequestMessage, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Net.Http.HttpCompletionOption -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync (request, completionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="03102-488">Сообщение HTTP-запроса для отправки.</span><span class="sxs-lookup"><span data-stu-id="03102-488">The HTTP request message to send.</span></span></param>
        <param name="completionOption"><span data-ttu-id="03102-489">Когда должна завершиться операция (как только будет доступен отклик или после считывания всего содержимого отклика).</span><span class="sxs-lookup"><span data-stu-id="03102-489">When the operation should complete (as soon as a response is available or after reading the whole response content).</span></span></param>
        <summary><span data-ttu-id="03102-490">Отправка HTTP-запроса в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-490">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-491">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-491">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-492">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-492">This operation will not block.</span></span> <span data-ttu-id="03102-493">В зависимости от значения параметра `completionOption` возвращаемый объект <xref:System.Threading.Tasks.Task%601> будет завершен, как только будет доступен ответ, или будет прочитан весь ответ, включая содержимое.</span><span class="sxs-lookup"><span data-stu-id="03102-493">Depending on the value of the `completionOption` parameter, the returned <xref:System.Threading.Tasks.Task%601> object will complete as soon as a response is available or the entire response including content is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-494">Значение параметра <paramref name="request" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-494">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="03102-495">Экземпляр <see cref="T:System.Net.Http.HttpClient" /> уже отправил сообщение с запросом.</span><span class="sxs-lookup"><span data-stu-id="03102-495">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="03102-496">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="03102-496">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync (request, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="03102-497">Сообщение HTTP-запроса для отправки.</span><span class="sxs-lookup"><span data-stu-id="03102-497">The HTTP request message to send.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="03102-498">Токен отмены для отмены операции.</span><span class="sxs-lookup"><span data-stu-id="03102-498">The cancellation token to cancel operation.</span></span></param>
        <summary><span data-ttu-id="03102-499">Отправка HTTP-запроса в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-499">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-500">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-500">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-501">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-501">This operation will not block.</span></span> <span data-ttu-id="03102-502">Возвращенный объект <xref:System.Threading.Tasks.Task%601> будет завершен после считывания всего ответа, включая содержимое.</span><span class="sxs-lookup"><span data-stu-id="03102-502">The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-503">Значение параметра <paramref name="request" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-503">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="03102-504">Экземпляр <see cref="T:System.Net.Http.HttpClient" /> уже отправил сообщение с запросом.</span><span class="sxs-lookup"><span data-stu-id="03102-504">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="03102-505">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="03102-505">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync (request, completionOption, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="03102-506">Сообщение HTTP-запроса для отправки.</span><span class="sxs-lookup"><span data-stu-id="03102-506">The HTTP request message to send.</span></span></param>
        <param name="completionOption"><span data-ttu-id="03102-507">Когда должна завершиться операция (как только будет доступен отклик или после считывания всего содержимого отклика).</span><span class="sxs-lookup"><span data-stu-id="03102-507">When the operation should complete (as soon as a response is available or after reading the whole response content).</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="03102-508">Токен отмены для отмены операции.</span><span class="sxs-lookup"><span data-stu-id="03102-508">The cancellation token to cancel operation.</span></span></param>
        <summary><span data-ttu-id="03102-509">Отправка HTTP-запроса в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="03102-509">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="03102-510">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="03102-510">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-511">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="03102-511">This operation will not block.</span></span> <span data-ttu-id="03102-512">В зависимости от значения параметра `completionOption` возвращаемый объект <xref:System.Threading.Tasks.Task%601> будет завершен, как только будет доступен ответ, или будет прочитан весь ответ, включая содержимое.</span><span class="sxs-lookup"><span data-stu-id="03102-512">Depending on the value of the `completionOption` parameter, the returned <xref:System.Threading.Tasks.Task%601> object will complete as soon as a response is available or the entire response including content is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03102-513">Значение параметра <paramref name="request" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="03102-513">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="03102-514">Экземпляр <see cref="T:System.Net.Http.HttpClient" /> уже отправил сообщение с запросом.</span><span class="sxs-lookup"><span data-stu-id="03102-514">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="03102-515">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="03102-515">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public TimeSpan Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.Timeout" />
      <MemberSignature Language="VB.NET" Value="Public Property Timeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Timeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.Timeout : TimeSpan with get, set" Usage="System.Net.Http.HttpClient.Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03102-516">Возвращает или задает время ожидания для выполнения запроса.</span><span class="sxs-lookup"><span data-stu-id="03102-516">Gets or sets the timespan to wait before the request times out.</span></span></summary>
        <value><span data-ttu-id="03102-517">Время ожидания для выполнения запроса.</span><span class="sxs-lookup"><span data-stu-id="03102-517">The timespan to wait before the request times out.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03102-518">По умолчанию установлено значение 100 000 миллисекунд (100 секунд).</span><span class="sxs-lookup"><span data-stu-id="03102-518">The default value is 100,000 milliseconds (100 seconds).</span></span>  
  
 <span data-ttu-id="03102-519">Чтобы установить бесконечное время ожидания, присвойте свойству значение <xref:System.Threading.Timeout.InfiniteTimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="03102-519">To set an infinite timeout, set the property value to <xref:System.Threading.Timeout.InfiniteTimeSpan>.</span></span>  
  
 <span data-ttu-id="03102-520">Возврат или истечение времени ожидания запроса службы доменных имен (DNS) может занять до 15 секунд. Если запрос содержит имя узла, требующее разрешения, и для параметра <xref:System.Net.Http.HttpClient.Timeout%2A> значение меньше 15 секунд, может потребоваться 15 секунд или более, прежде чем будет создано <xref:System.Net.WebException>, чтобы указать время ожидания запроса.</span><span class="sxs-lookup"><span data-stu-id="03102-520">A Domain Name System (DNS) query may take up to 15 seconds to return or time out. If your request contains a host name that requires resolution and you set <xref:System.Net.Http.HttpClient.Timeout%2A> to a value less than 15 seconds, it may take 15 seconds or more before a <xref:System.Net.WebException> is thrown to indicate a timeout on your request.</span></span>  
  
 <span data-ttu-id="03102-521">Одно и то же время ожидания будет применяться для всех запросов, использующих этот <xref:System.Net.Http.HttpClient> экземпляр.</span><span class="sxs-lookup"><span data-stu-id="03102-521">The same timeout will apply for all requests using this <xref:System.Net.Http.HttpClient> instance.</span></span>  <span data-ttu-id="03102-522">Вы также можете задать различные времена ожидания для отдельных запросов с помощью <xref:System.Threading.CancellationTokenSource> задачи.</span><span class="sxs-lookup"><span data-stu-id="03102-522">You may also set different timeouts for individual requests using a <xref:System.Threading.CancellationTokenSource> on a task.</span></span> <span data-ttu-id="03102-523">Обратите внимание, что будут применяться только более короткие из двух таймаутов.</span><span class="sxs-lookup"><span data-stu-id="03102-523">Note that only the shorter of the two timeouts will apply.</span></span>  
  
 ## <a name="example"></a><span data-ttu-id="03102-524">Пример</span><span class="sxs-lookup"><span data-stu-id="03102-524">Example</span></span>
 
 <span data-ttu-id="03102-525">В следующем примере задается свойство `Timeout`.</span><span class="sxs-lookup"><span data-stu-id="03102-525">The following example sets the `Timeout` property.</span></span>
  
```csharp
HttpClient httpClient = new HttpClient();
httpClient.Timeout = TimeSpan.FromMinutes(10);
```

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="03102-526">Указанное значение времени ожидания меньше или равно нулю и не является <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" />.</span><span class="sxs-lookup"><span data-stu-id="03102-526">The timeout specified is less than or equal to zero and is not <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="03102-527">Операция для текущего экземпляра уже запущена.</span><span class="sxs-lookup"><span data-stu-id="03102-527">An operation has already been started on the current instance.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="03102-528">Текущий экземпляр удален.</span><span class="sxs-lookup"><span data-stu-id="03102-528">The current instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
