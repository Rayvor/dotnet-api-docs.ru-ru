<Type Name="HttpClient" FullName="System.Net.Http.HttpClient">
  <Metadata><Meta Name="ms.openlocfilehash" Value="75a0243b718acdc50dae1be8466689b03be330b7" /><Meta Name="ms.sourcegitcommit" Value="43c8e74d92c78325492baf27e41b400443f0dfbf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/08/2019" /><Meta Name="ms.locfileid" Value="68858793" /></Metadata><TypeSignature Language="C#" Value="public class HttpClient : System.Net.Http.HttpMessageInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HttpClient extends System.Net.Http.HttpMessageInvoker" />
  <TypeSignature Language="DocId" Value="T:System.Net.Http.HttpClient" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpClient&#xA;Inherits HttpMessageInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpClient : System::Net::Http::HttpMessageInvoker" />
  <TypeSignature Language="F#" Value="type HttpClient = class&#xA;    inherit HttpMessageInvoker" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Http</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.Http.HttpMessageInvoker</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="0be88-101">Предоставляет базовый класс для отправки HTTP-запросов и получения HTTP-ответов от ресурса с заданным URI.</span><span class="sxs-lookup"><span data-stu-id="0be88-101">Provides a base class for sending HTTP requests and receiving HTTP responses from a resource identified by a URI.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-102">Экземпляр <xref:System.Net.Http.HttpClient> класса выступает в качестве сеанса для отправки HTTP-запросов.</span><span class="sxs-lookup"><span data-stu-id="0be88-102">The <xref:System.Net.Http.HttpClient> class instance acts as a session to send HTTP requests.</span></span> <span data-ttu-id="0be88-103"><xref:System.Net.Http.HttpClient> Экземпляр — это коллекция параметров, применяемых ко всем запросам, выполняемым этим экземпляром.</span><span class="sxs-lookup"><span data-stu-id="0be88-103">An <xref:System.Net.Http.HttpClient> instance is a collection of settings applied to all requests executed by that instance.</span></span> <span data-ttu-id="0be88-104">Кроме того, каждый <xref:System.Net.Http.HttpClient> экземпляр использует собственный пул соединений, изолируя его запросы от запросов, выполняемых другими <xref:System.Net.Http.HttpClient> экземплярами.</span><span class="sxs-lookup"><span data-stu-id="0be88-104">In addition, every <xref:System.Net.Http.HttpClient> instance uses its own connection pool, isolating its requests from requests executed by other <xref:System.Net.Http.HttpClient> instances.</span></span>  
  
 <span data-ttu-id="0be88-105"><xref:System.Net.Http.HttpClient> Также выступает в качестве базового класса для более конкретных HTTP-клиентов.</span><span class="sxs-lookup"><span data-stu-id="0be88-105">The <xref:System.Net.Http.HttpClient> also acts as a base class for more specific HTTP clients.</span></span> <span data-ttu-id="0be88-106">Примером может быть Фацебукхттпклиент, предоставляющий дополнительные методы, характерные для веб-службы Facebook (например, метод «друзья»).</span><span class="sxs-lookup"><span data-stu-id="0be88-106">An example would be a FacebookHttpClient providing additional methods specific to a Facebook web service (a GetFriends method, for instance).</span></span> <span data-ttu-id="0be88-107">Производные классы не должны переопределять виртуальные методы класса.</span><span class="sxs-lookup"><span data-stu-id="0be88-107">Derived classes should not override the virtual methods on the class.</span></span> <span data-ttu-id="0be88-108">Вместо этого используйте перегрузку конструктора, <xref:System.Net.Http.HttpMessageHandler> которая принимает на себя настройку перед обработкой до или после запроса.</span><span class="sxs-lookup"><span data-stu-id="0be88-108">Instead, use a constructor overload that accepts <xref:System.Net.Http.HttpMessageHandler> to configure any pre- or post-request processing instead.</span></span>
  
 <span data-ttu-id="0be88-109">По умолчанию в .NET Framework и Mono <xref:System.Net.HttpWebRequest> используется для отправки запросов на сервер.</span><span class="sxs-lookup"><span data-stu-id="0be88-109">By default on .NET Framework and Mono, <xref:System.Net.HttpWebRequest> is used to send requests to the server.</span></span> <span data-ttu-id="0be88-110">Это поведение можно изменить, указав другой канал в одной из перегрузок конструктора, принимающий <xref:System.Net.Http.HttpMessageHandler> экземпляр в качестве параметра.</span><span class="sxs-lookup"><span data-stu-id="0be88-110">This behavior can be modified by specifying a different channel in one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> instance as parameter.</span></span> <span data-ttu-id="0be88-111">Если требуются такие функции, как проверка подлинности или кэширование, <xref:System.Net.Http.WebRequestHandler> можно использовать для настройки параметров, и экземпляр можно передать в конструктор.</span><span class="sxs-lookup"><span data-stu-id="0be88-111">If features like authentication or caching are required, <xref:System.Net.Http.WebRequestHandler> can be used to configure settings and the instance can be passed to the constructor.</span></span> <span data-ttu-id="0be88-112">Возвращаемый обработчик может быть передан в одну из перегрузок конструктора, принимающих <xref:System.Net.Http.HttpMessageHandler> параметр.</span><span class="sxs-lookup"><span data-stu-id="0be88-112">The returned handler can be passed to one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> parameter.</span></span>  
  
 <span data-ttu-id="0be88-113">Если приложение, использующее <xref:System.Net.Http.HttpClient> и связанные классы <xref:System.Net.Http> в пространстве имен, планирует загружать большие объемы данных (50 МБ или более), приложение должно выполнять потоковую передачу этих файлов и не использовать буферизацию по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="0be88-113">If an app using <xref:System.Net.Http.HttpClient> and related classes in the <xref:System.Net.Http> namespace intends to download large amounts of data (50 megabytes or more), then the app should stream those downloads and not use the default buffering.</span></span> <span data-ttu-id="0be88-114">Если используется буферизация по умолчанию, использование памяти клиента будет очень большим, что может привести к значительному снижению производительности.</span><span class="sxs-lookup"><span data-stu-id="0be88-114">If the default buffering is used the client memory usage will get very large, potentially resulting in substantially reduced performance.</span></span>  
  
 <span data-ttu-id="0be88-115">Следующие методы являются потокобезопасными:</span><span class="sxs-lookup"><span data-stu-id="0be88-115">The following methods are thread safe:</span></span>  
  
1.  <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A>  
  
2.  <xref:System.Net.Http.HttpClient.DeleteAsync%2A>  
  
3.  <xref:System.Net.Http.HttpClient.GetAsync%2A>  
  
4.  <xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A>  
  
5.  <xref:System.Net.Http.HttpClient.GetStreamAsync%2A>  
  
6.  <xref:System.Net.Http.HttpClient.GetStringAsync%2A>  
  
7.  <xref:System.Net.Http.HttpClient.PostAsync%2A>  
  
8.  <xref:System.Net.Http.HttpClient.PutAsync%2A>  
  
9. <xref:System.Net.Http.HttpClient.SendAsync%2A>  
  
 <span data-ttu-id="0be88-116"><xref:System.Net.Http.HttpClient>предназначен для однократного создания экземпляра и повторного использования в течение всего жизненного цикла приложения.</span><span class="sxs-lookup"><span data-stu-id="0be88-116"><xref:System.Net.Http.HttpClient> is intended to be instantiated once and re-used throughout the life of an application.</span></span> <span data-ttu-id="0be88-117">При создании экземпляра класса HttpClient для каждого запроса будет исчерпано количество сокетов, доступных при высоких нагрузках.</span><span class="sxs-lookup"><span data-stu-id="0be88-117">Instantiating an HttpClient class for every request will exhaust the number of sockets available under heavy loads.</span></span> <span data-ttu-id="0be88-118">Это приведет к ошибкам SocketException.</span><span class="sxs-lookup"><span data-stu-id="0be88-118">This will result in SocketException errors.</span></span> <span data-ttu-id="0be88-119">Ниже приведен пример, использующий HttpClient правильно.</span><span class="sxs-lookup"><span data-stu-id="0be88-119">Below is an example using HttpClient correctly.</span></span>  
  
```csharp
public class GoodController : ApiController
{
    private static readonly HttpClient HttpClient;

    static GoodController()
    {
        HttpClient = new HttpClient();
    }
}
```

```vb
  Public Class GoodController
    Inherits ApiController  
   
    Private Shared ReadOnly HttpClient As HttpClient  
  
    Shared Sub New()  
        HttpClient = New HttpClient()
    End Sub
End Class
```

<span data-ttu-id="0be88-120"><xref:System.Net.Http.HttpClient> — Это интерфейс API высокого уровня, который заключает в оболочку функциональные возможности нижнего уровня, доступные на каждой платформе, где она выполняется.</span><span class="sxs-lookup"><span data-stu-id="0be88-120">The <xref:System.Net.Http.HttpClient> is a high-level API that wraps the lower-level functionality available on each platform where it runs.</span></span>

<span data-ttu-id="0be88-121">На каждой платформе <xref:System.Net.Http.HttpClient> пытается использовать оптимальный доступный транспорт:</span><span class="sxs-lookup"><span data-stu-id="0be88-121">On each platform, <xref:System.Net.Http.HttpClient> tries to use the best available transport:</span></span>

| <span data-ttu-id="0be88-122">**Узел/Среда выполнения**</span><span class="sxs-lookup"><span data-stu-id="0be88-122">**Host/Runtime**</span></span>            | <span data-ttu-id="0be88-123">**Фонов**</span><span class="sxs-lookup"><span data-stu-id="0be88-123">**Backend**</span></span>                                                                               |
| --------------------------- | ----------------------------------------------------------------------------------------- |
| <span data-ttu-id="0be88-124">Windows/. NET Framework</span><span class="sxs-lookup"><span data-stu-id="0be88-124">Windows/.NET Framework</span></span>      | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="0be88-125">Windows/Mono</span><span class="sxs-lookup"><span data-stu-id="0be88-125">Windows/Mono</span></span>                | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="0be88-126">Windows/UWP</span><span class="sxs-lookup"><span data-stu-id="0be88-126">Windows/UWP</span></span>                 | <span data-ttu-id="0be88-127">Windows Native <xref:System.Net.Http.WinHttpHandler> (поддерживается HTTP 2,0)</span><span class="sxs-lookup"><span data-stu-id="0be88-127">Windows native <xref:System.Net.Http.WinHttpHandler> (HTTP 2.0 capable)</span></span>                   |
| <span data-ttu-id="0be88-128">Windows/. NET Core 1.0 — 2.0</span><span class="sxs-lookup"><span data-stu-id="0be88-128">Windows/.NET Core 1.0-2.0</span></span>   | <span data-ttu-id="0be88-129">Windows Native <xref:System.Net.Http.WinHttpHandler> (поддерживается HTTP 2,0)</span><span class="sxs-lookup"><span data-stu-id="0be88-129">Windows native <xref:System.Net.Http.WinHttpHandler> (HTTP 2.0 capable)</span></span>                   |
| <span data-ttu-id="0be88-130">Android или Xamarin</span><span class="sxs-lookup"><span data-stu-id="0be88-130">Android/Xamarin</span></span>             | <span data-ttu-id="0be88-131">Выбирается во время сборки.</span><span class="sxs-lookup"><span data-stu-id="0be88-131">Selected at build-time.</span></span> <span data-ttu-id="0be88-132">Можно использовать <xref:System.Net.HttpWebRequest> или настроить для использования машинного кода Android[`HttpURLConnection`](https://developer.xamarin.com/api/type/Java.Net.HttpURLConnection/)</span><span class="sxs-lookup"><span data-stu-id="0be88-132">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Android's native [`HttpURLConnection`](https://developer.xamarin.com/api/type/Java.Net.HttpURLConnection/)</span></span> |
| <span data-ttu-id="0be88-133">iOS, tvOS, watchOS/Xamarin</span><span class="sxs-lookup"><span data-stu-id="0be88-133">iOS, tvOS, watchOS/Xamarin</span></span>  | <span data-ttu-id="0be88-134">Выбирается во время сборки.</span><span class="sxs-lookup"><span data-stu-id="0be88-134">Selected at build-time.</span></span> <span data-ttu-id="0be88-135">Может использовать <xref:System.Net.HttpWebRequest> или быть настроено для использования [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) Apple (с поддержкой HTTP 2,0).</span><span class="sxs-lookup"><span data-stu-id="0be88-135">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Apple's [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP 2.0 capable)</span></span> |
| <span data-ttu-id="0be88-136">macOS/Xamarin</span><span class="sxs-lookup"><span data-stu-id="0be88-136">macOS/Xamarin</span></span>               | <span data-ttu-id="0be88-137">Выбирается во время сборки.</span><span class="sxs-lookup"><span data-stu-id="0be88-137">Selected at build-time.</span></span> <span data-ttu-id="0be88-138">Может использовать <xref:System.Net.HttpWebRequest> или быть настроено для использования [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) Apple (с поддержкой HTTP 2,0).</span><span class="sxs-lookup"><span data-stu-id="0be88-138">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Apple's [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP 2.0 capable)</span></span> |
| <span data-ttu-id="0be88-139">macOS/Mono</span><span class="sxs-lookup"><span data-stu-id="0be88-139">macOS/Mono</span></span>                  | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="0be88-140">macOS/. NET Core 1.0 — 2.0</span><span class="sxs-lookup"><span data-stu-id="0be88-140">macOS/.NET Core 1.0-2.0</span></span>     | <span data-ttu-id="0be88-141">`libcurl`HTTP-транспорт на основе (с поддержкой HTTP 2,0)</span><span class="sxs-lookup"><span data-stu-id="0be88-141">`libcurl`-based HTTP transport (HTTP 2.0 capable)</span></span>                                         |
| <span data-ttu-id="0be88-142">Linux/Mono</span><span class="sxs-lookup"><span data-stu-id="0be88-142">Linux/Mono</span></span>                  | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="0be88-143">Linux/. NET Core 1.0 — 2.0</span><span class="sxs-lookup"><span data-stu-id="0be88-143">Linux/.NET Core 1.0-2.0</span></span>     | <span data-ttu-id="0be88-144">`libcurl`HTTP-транспорт на основе (с поддержкой HTTP 2,0)</span><span class="sxs-lookup"><span data-stu-id="0be88-144">`libcurl`-based HTTP transport (HTTP 2.0 capable)</span></span>                                         |
| <span data-ttu-id="0be88-145">.NET Core 2,1 и более поздние версии</span><span class="sxs-lookup"><span data-stu-id="0be88-145">.NET Core 2.1 and later</span></span>     | <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType>                    |

<span data-ttu-id="0be88-146">Пользователи также могут настроить конкретный транспорт для <xref:System.Net.Http.HttpClient> , вызвав <xref:System.Net.Http.HttpClient.%23ctor*> конструктор, который принимает <xref:System.Net.Http.HttpMessageHandler>.</span><span class="sxs-lookup"><span data-stu-id="0be88-146">Users can also configure a specific transport for <xref:System.Net.Http.HttpClient> by invoking the <xref:System.Net.Http.HttpClient.%23ctor*> constructor that takes an <xref:System.Net.Http.HttpMessageHandler>.</span></span>

### <a name="httpclient-and-net-core"></a><span data-ttu-id="0be88-147">HttpClient и .NET Core</span><span class="sxs-lookup"><span data-stu-id="0be88-147">HttpClient and .NET Core</span></span>

<span data-ttu-id="0be88-148">Начиная с .NET Core 2,1, <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> класс `HttpClientHandler` вместо предоставляет реализацию, используемую сетевыми классами HTTP более высокого уровня, такими `HttpClient`как.</span><span class="sxs-lookup"><span data-stu-id="0be88-148">Starting with .NET Core 2.1, the <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> class instead of `HttpClientHandler` provides the implementation used by higher-level HTTP networking classes such as `HttpClient`.</span></span> <span data-ttu-id="0be88-149">Использование <xref:System.Net.Http.SocketsHttpHandler> предлагает ряд преимуществ.</span><span class="sxs-lookup"><span data-stu-id="0be88-149">The use of <xref:System.Net.Http.SocketsHttpHandler> offers a number of advantages:</span></span>

- <span data-ttu-id="0be88-150">Значительное улучшение производительности по сравнению с предыдущей реализацией.</span><span class="sxs-lookup"><span data-stu-id="0be88-150">A significant performance improvement when compared with the previous implementation.</span></span>

- <span data-ttu-id="0be88-151">Исключение зависимостей платформы, которое упрощает развертывание и обслуживание.</span><span class="sxs-lookup"><span data-stu-id="0be88-151">The elimination of platform dependencies, which simplifies deployment and servicing.</span></span> <span data-ttu-id="0be88-152">Например, `libcurl` больше не зависит от .NET Core для macOS и .NET Core для Linux.</span><span class="sxs-lookup"><span data-stu-id="0be88-152">For example, `libcurl` is no longer a dependency on .NET Core for macOS and .NET Core for Linux.</span></span>

- <span data-ttu-id="0be88-153">Согласованное поведение на всех платформах .NET.</span><span class="sxs-lookup"><span data-stu-id="0be88-153">Consistent behavior across all .NET platforms.</span></span>

<span data-ttu-id="0be88-154">Если это изменение нежелательно, можно настроить приложение так, чтобы оно использовало старое <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType> , а не несколько способов.</span><span class="sxs-lookup"><span data-stu-id="0be88-154">If this change is undesirable, you can configure your application to use the older <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType> instead in a number of ways:</span></span>

- <span data-ttu-id="0be88-155">Вызвав <xref:System.AppContext.SetSwitch%2A?displayProperty=nameWithType> метод следующим образом:</span><span class="sxs-lookup"><span data-stu-id="0be88-155">By calling the <xref:System.AppContext.SetSwitch%2A?displayProperty=nameWithType> method as follows:</span></span>

   ```csharp
   AppContext.SetSwitch("System.Net.Http.UseSocketsHttpHandler", false);
   ```

   ```vb
   AppContext.SetSwitch("System.Net.Http.UseSocketsHttpHandler", False)
   ``` 
- <span data-ttu-id="0be88-156">Путем определения `System.Net.Http.UseSocketsHttpHandler` параметра в файле конфигурации *. netcore. runtimeconfig. JSON* :</span><span class="sxs-lookup"><span data-stu-id="0be88-156">By defining the `System.Net.Http.UseSocketsHttpHandler` switch in the *.netcore.runtimeconfig.json* configuration file:</span></span>

  ```json
  "runtimeOptions": {
    "configProperties": {
        "System.Net.Http.UseSocketsHttpHandler": false
    }
  }
  ```
  
- <span data-ttu-id="0be88-157">Определив переменную среды с именем `DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER` и задав `false` для нее значение или 0.</span><span class="sxs-lookup"><span data-stu-id="0be88-157">By defining an environment variable named `DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER` and setting it to either `false` or 0.</span></span>

## Examples  
 [!code-csharp[System.Net.Http.HttpClient#1](~/samples/snippets/csharp/VS_Snippets_Misc/system.net.http.httpclient/cs/source.cs#1)]  
 [!code-vb[System.Net.Http.HttpClient#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/system.net.http.httpclient/vb/source.vb#1)]

 <span data-ttu-id="0be88-158">В предыдущем примере кода используется `async Task Main()` точка входа.</span><span class="sxs-lookup"><span data-stu-id="0be88-158">The preceding code example uses an `async Task Main()` entry point.</span></span> <span data-ttu-id="0be88-159">Для этого компонента C# требуется 7,1 или более поздняя версия.</span><span class="sxs-lookup"><span data-stu-id="0be88-159">That feature requires C# 7.1 or later.</span></span>
 
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=245696"><span data-ttu-id="0be88-160">Connecting to a web service (Соединение с веб-службой)</span><span class="sxs-lookup"><span data-stu-id="0be88-160">Connecting to a web service</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=245697"><span data-ttu-id="0be88-161">Краткое руководство. Connecting using HttpClient (Подключение с помощью HttpClient)</span><span class="sxs-lookup"><span data-stu-id="0be88-161">Quickstart: Connecting using HttpClient</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=245699"><span data-ttu-id="0be88-162">How to use HttpClient handlers (Как использовать обработчики HttpClient)</span><span class="sxs-lookup"><span data-stu-id="0be88-162">How to use HttpClient handlers</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=245698"><span data-ttu-id="0be88-163">How to secure HttpClient connections (Как защитить подключения HttpClient)</span><span class="sxs-lookup"><span data-stu-id="0be88-163">How to secure HttpClient connections</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=242550"><span data-ttu-id="0be88-164">Пример HttpClient</span><span class="sxs-lookup"><span data-stu-id="0be88-164">HttpClient Sample</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0be88-165">Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.HttpClient" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-165">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-166"><xref:System.Net.Http.HttpClient>предназначен для однократного создания экземпляра и повторного использования в течение всего жизненного цикла приложения.</span><span class="sxs-lookup"><span data-stu-id="0be88-166"><xref:System.Net.Http.HttpClient> is intended to be instantiated once and re-used throughout the life of an application.</span></span> <span data-ttu-id="0be88-167">При создании экземпляра класса HttpClient для каждого запроса будет исчерпано количество сокетов, доступных при высоких нагрузках.</span><span class="sxs-lookup"><span data-stu-id="0be88-167">Instantiating an HttpClient class for every request will exhaust the number of sockets available under heavy loads.</span></span> <span data-ttu-id="0be88-168">Это приведет к ошибкам SocketException.</span><span class="sxs-lookup"><span data-stu-id="0be88-168">This will result in SocketException errors.</span></span> <span data-ttu-id="0be88-169">Ниже приведен пример, использующий HttpClient правильно.</span><span class="sxs-lookup"><span data-stu-id="0be88-169">Below is an example using HttpClient correctly.</span></span>  
  
```csharp  
public class GoodController : ApiController  
{  
    private static readonly HttpClient HttpClient;  
  
    static GoodController()  
    {  
        HttpClient = new HttpClient();  
    }  
}  
```

```vb
  Public Class GoodController
    Inherits ApiController  
   
    Private Shared ReadOnly HttpClient As HttpClient
  
    Shared Sub New()  
        HttpClient = New HttpClient()
    End Sub
End Class
```

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0be88-170">Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.HttpClient" />, используя <see cref="T:System.Net.Http.HttpClientHandler" />, который удаляется при удалении этого экземпляра.</span><span class="sxs-lookup"><span data-stu-id="0be88-170">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class using a <see cref="T:System.Net.Http.HttpClientHandler" /> that is disposed when this instance is disposed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[    
## Remarks  
<span data-ttu-id="0be88-171">Использование этого конструктора эквивалентно вызову [`HttpClient(new HttpClientHandler(), true)`](xref:System.Net.Http.HttpClient.%23ctor(System.Net.Http.HttpMessageHandler,System.Boolean)) конструктора.</span><span class="sxs-lookup"><span data-stu-id="0be88-171">Using this constructor is equivalent to calling the [`HttpClient(new HttpClientHandler(), true)`](xref:System.Net.Http.HttpClient.%23ctor(System.Net.Http.HttpMessageHandler,System.Boolean)) constructor.</span></span>
]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient (System.Net.Http.HttpMessageHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Http.HttpMessageHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As HttpMessageHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient(System::Net::Http::HttpMessageHandler ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Net.Http.HttpClient : System.Net.Http.HttpMessageHandler -&gt; System.Net.Http.HttpClient" Usage="new System.Net.Http.HttpClient handler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Net.Http.HttpMessageHandler" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="0be88-172">Стек обработчика HTTP-данных, используемый для отправки запросов.</span><span class="sxs-lookup"><span data-stu-id="0be88-172">The HTTP handler stack to use for sending requests.</span></span></param>
        <summary><span data-ttu-id="0be88-173">Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.HttpClient" /> с указанным обработчиком.</span><span class="sxs-lookup"><span data-stu-id="0be88-173">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class with the specified handler.</span></span> <span data-ttu-id="0be88-174">Обработчик удаляется при удалении этого экземпляра.</span><span class="sxs-lookup"><span data-stu-id="0be88-174">The handler is disposed when this instance is disposed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[    
## Remarks  
<span data-ttu-id="0be88-175">Использование этого конструктора эквивалентно вызову [`HttpClient(handler, true)`](xref:System.Net.Http.HttpClient.%23ctor(System.Net.Http.HttpMessageHandler,System.Boolean)) конструктора.</span><span class="sxs-lookup"><span data-stu-id="0be88-175">Using this constructor is equivalent to calling the [`HttpClient(handler, true)`](xref:System.Net.Http.HttpClient.%23ctor(System.Net.Http.HttpMessageHandler,System.Boolean)) constructor.</span></span>

<span data-ttu-id="0be88-176">Указанный `handler` объект будет удален путем вызова [HttpClient. Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose).</span><span class="sxs-lookup"><span data-stu-id="0be88-176">The specified `handler` will be disposed of by calling [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose).</span></span>  
]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-177">Значение параметра <paramref name="handler" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-177">The <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient (System.Net.Http.HttpMessageHandler handler, bool disposeHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Http.HttpMessageHandler handler, bool disposeHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As HttpMessageHandler, disposeHandler As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient(System::Net::Http::HttpMessageHandler ^ handler, bool disposeHandler);" />
      <MemberSignature Language="F#" Value="new System.Net.Http.HttpClient : System.Net.Http.HttpMessageHandler * bool -&gt; System.Net.Http.HttpClient" Usage="new System.Net.Http.HttpClient (handler, disposeHandler)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Net.Http.HttpMessageHandler" />
        <Parameter Name="disposeHandler" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="0be88-178">Компонент <see cref="T:System.Net.Http.HttpMessageHandler" />, отвечающий за обработку сообщений ответов HTTP.</span><span class="sxs-lookup"><span data-stu-id="0be88-178">The <see cref="T:System.Net.Http.HttpMessageHandler" /> responsible for processing the HTTP response messages.</span></span></param>
        <param name="disposeHandler"><span data-ttu-id="0be88-179">Значение <see langword="true" />, если внутренний обработчик должен быть удален с помощью [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose). Значение <see langword="false" />, если планируется повторно использовать внутренний обработчик.</span><span class="sxs-lookup"><span data-stu-id="0be88-179"><see langword="true" /> if the inner handler should be disposed of by [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose); <see langword="false" /> if you intend to reuse the inner handler.</span></span></param>
        <summary><span data-ttu-id="0be88-180">Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.HttpClient" /> с предоставленным обработчиком и указывает, должен ли этот обработчик удаляться при удалении этого экземпляра.</span><span class="sxs-lookup"><span data-stu-id="0be88-180">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class with the provided handler, and specifies whether that handler should be disposed when this instance is disposed.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-181">Значение параметра <paramref name="handler" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-181">The <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BaseAddress">
      <MemberSignature Language="C#" Value="public Uri BaseAddress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri BaseAddress" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.BaseAddress" />
      <MemberSignature Language="VB.NET" Value="Public Property BaseAddress As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ BaseAddress { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BaseAddress : Uri with get, set" Usage="System.Net.Http.HttpClient.BaseAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0be88-182">Возвращает или задает базовый адрес универсального кода ресурса (URI) интернет-ресурса, используемого при отправке запросов.</span><span class="sxs-lookup"><span data-stu-id="0be88-182">Gets or sets the base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.</span></span></summary>
        <value><span data-ttu-id="0be88-183">Базовый адрес универсального кода ресурса (URI) интернет-ресурса, используемого при отправке запросов.</span><span class="sxs-lookup"><span data-stu-id="0be88-183">The base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-184">При отправке <xref:System.Net.Http.HttpRequestMessage> с помощью относительного URI в <xref:System.Net.Http.HttpClient.BaseAddress%2A> свойство будет добавлен URI сообщения для создания абсолютного URI.</span><span class="sxs-lookup"><span data-stu-id="0be88-184">When sending a <xref:System.Net.Http.HttpRequestMessage> with a relative Uri, the message Uri will be added to the <xref:System.Net.Http.HttpClient.BaseAddress%2A> property to create an absolute Uri.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelPendingRequests">
      <MemberSignature Language="C#" Value="public void CancelPendingRequests ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelPendingRequests() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.CancelPendingRequests" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelPendingRequests ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelPendingRequests();" />
      <MemberSignature Language="F#" Value="member this.CancelPendingRequests : unit -&gt; unit" Usage="httpClient.CancelPendingRequests " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0be88-185">Отмена всех ожидающих запросов на этом экземпляре.</span><span class="sxs-lookup"><span data-stu-id="0be88-185">Cancel all pending requests on this instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-186">После вызова этого метода <xref:System.Net.Http.HttpClient> экземпляр можно по-прежнему использовать для выполнения дополнительных запросов.</span><span class="sxs-lookup"><span data-stu-id="0be88-186">After calling this method, the <xref:System.Net.Http.HttpClient> instance can still be used to execute additional requests.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultProxy">
      <MemberSignature Language="C#" Value="public static System.Net.IWebProxy DefaultProxy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Net.IWebProxy DefaultProxy" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.DefaultProxy" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultProxy As IWebProxy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Net::IWebProxy ^ DefaultProxy { System::Net::IWebProxy ^ get(); void set(System::Net::IWebProxy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultProxy : System.Net.IWebProxy with get, set" Usage="System.Net.Http.HttpClient.DefaultProxy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IWebProxy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0be88-187">Возвращает или устанавливает глобальный прокси-сервер HTTP.</span><span class="sxs-lookup"><span data-stu-id="0be88-187">Gets or sets the global Http proxy.</span></span></summary>
        <value><span data-ttu-id="0be88-188">Прокси-сервер, используемый каждым вызовом, который <see cref="T:System.Net.HttpWebRequest" />создает экземпляр.</span><span class="sxs-lookup"><span data-stu-id="0be88-188">A proxy used by every call that instantiates a <see cref="T:System.Net.HttpWebRequest" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks
<span data-ttu-id="0be88-189">Это статическое свойство определяет прокси-сервер по умолчанию, используемый всеми <xref:System.Net.Http.HttpClient> экземплярами, если прокси- <xref:System.Net.Http.HttpClientHandler> сервер не задан явно в переданном через него конструкторе.</span><span class="sxs-lookup"><span data-stu-id="0be88-189">This static property determines the default proxy that all <xref:System.Net.Http.HttpClient> instances use if no proxy is set explicitly in the <xref:System.Net.Http.HttpClientHandler> passed through its constructor.</span></span> 

<span data-ttu-id="0be88-190">Экземпляр по умолчанию, возвращаемый этим свойством, инициализирует следующий набор правил в зависимости от платформы:</span><span class="sxs-lookup"><span data-stu-id="0be88-190">The default instance returned by this property will initialize following a different set of rules depending on your platform:</span></span>
* <span data-ttu-id="0be88-191">**Для Windows:** Считывает конфигурацию прокси-сервера из переменных среды или, если они не определены, из параметров прокси пользователя.</span><span class="sxs-lookup"><span data-stu-id="0be88-191">**For Windows:** Reads proxy configuration from environment variables or, if those are not defined, from the user's proxy settings.</span></span>

* <span data-ttu-id="0be88-192">**Для macOS:** Считывает конфигурацию прокси-сервера из переменных среды или, если они не определены, из параметров прокси-сервера системы.</span><span class="sxs-lookup"><span data-stu-id="0be88-192">**For macOS:** Reads proxy configuration from environment variables or, if those are not defined, from the system's proxy settings.</span></span>

* <span data-ttu-id="0be88-193">**Для Linux:** Считывает конфигурацию прокси-сервера из переменных среды или, если они не определены, это свойство инициализирует ненастроенный экземпляр, который обходит все адреса.</span><span class="sxs-lookup"><span data-stu-id="0be88-193">**For Linux:** Reads proxy configuration from environment variables or, in case those are not defined, this property initializes a non-configured instance that bypasses all addresses.</span></span>

<span data-ttu-id="0be88-194">Переменные среды, используемые для `DefaultProxy` инициализации платформ на платформе Windows и UNIX:</span><span class="sxs-lookup"><span data-stu-id="0be88-194">The environment variables used for `DefaultProxy` initialization on Windows and Unix-based platforms are:</span></span>
* <span data-ttu-id="0be88-195">HTTP_PROXY: имя узла или IP-адрес прокси-сервера, используемого для HTTP-запросов.</span><span class="sxs-lookup"><span data-stu-id="0be88-195">HTTP_PROXY: the hostname or IP address of the proxy server used on HTTP requests.</span></span>
* <span data-ttu-id="0be88-196">HTTPS_PROXY: имя узла или IP-адрес прокси-сервера, используемого в запросах HTTPS.</span><span class="sxs-lookup"><span data-stu-id="0be88-196">HTTPS_PROXY: the hostname or IP address of the proxy server used on HTTPS requests.</span></span>
* <span data-ttu-id="0be88-197">ALL_PROXY: имя узла или IP-адрес прокси-сервера, используемого для запросов HTTP и (или) HTTPS в случае, если HTTP_PROXY и/или HTTPS_PROXY не определены.</span><span class="sxs-lookup"><span data-stu-id="0be88-197">ALL_PROXY: the hostname or IP address of the proxy server used on HTTP and/or HTTPS requests in case HTTP_PROXY and/or HTTPS_PROXY are not defined.</span></span>
* <span data-ttu-id="0be88-198">NO_PROXY: список имен узлов с разделителями-запятыми, которые следует исключить из прокси-сервера.</span><span class="sxs-lookup"><span data-stu-id="0be88-198">NO_PROXY: a comma-separated list of hostnames that should be excluded from proxying.</span></span>

 ]]></format>
      </remarks>
      <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-199">Передаваемое значение не может быть <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-199">The value passed cannot be <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultRequestHeaders">
      <MemberSignature Language="C#" Value="public System.Net.Http.Headers.HttpRequestHeaders DefaultRequestHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Http.Headers.HttpRequestHeaders DefaultRequestHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.DefaultRequestHeaders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultRequestHeaders As HttpRequestHeaders" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Http::Headers::HttpRequestHeaders ^ DefaultRequestHeaders { System::Net::Http::Headers::HttpRequestHeaders ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultRequestHeaders : System.Net.Http.Headers.HttpRequestHeaders" Usage="System.Net.Http.HttpClient.DefaultRequestHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.Headers.HttpRequestHeaders</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0be88-200">Возвращает заголовки, которые должны отправляться с каждым запросом.</span><span class="sxs-lookup"><span data-stu-id="0be88-200">Gets the headers which should be sent with each request.</span></span></summary>
        <value><span data-ttu-id="0be88-201">Заголовки, которые должны отправляться с каждым запросом.</span><span class="sxs-lookup"><span data-stu-id="0be88-201">The headers which should be sent with each request.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-202">Заголовки, заданные для этого свойства, не нужно задавать в сообщениях запроса.</span><span class="sxs-lookup"><span data-stu-id="0be88-202">Headers set on this property don't need to be set on request messages again.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultRequestVersion">
      <MemberSignature Language="C#" Value="public Version DefaultRequestVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Version DefaultRequestVersion" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.DefaultRequestVersion" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultRequestVersion As Version" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Version ^ DefaultRequestVersion { Version ^ get(); void set(Version ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultRequestVersion : Version with get, set" Usage="System.Net.Http.HttpClient.DefaultRequestVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0be88-203">Возвращает или задает версию HTTP по умолчанию, используемую в последующих запросах, выполняемых этим экземпляром <see cref="T:System.Net.Http.HttpClient" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-203">Gets or sets the default HTTP version used on subsequent requests made by this <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></summary>
        <value><span data-ttu-id="0be88-204">Версия по умолчанию, используемая для всех запросов, <see cref="T:System.Net.Http.HttpClient" /> выполненных с этим экземпляром.</span><span class="sxs-lookup"><span data-stu-id="0be88-204">The default version to use for any requests made with this <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="0be88-205">`DefaultRequestVersion`по <xref:System.Net.HttpVersion.Version11?displayProperty=nameWithType> умолчанию имеет значение.</span><span class="sxs-lookup"><span data-stu-id="0be88-205">`DefaultRequestVersion` is <xref:System.Net.HttpVersion.Version11?displayProperty=nameWithType> by default.</span></span>

<span data-ttu-id="0be88-206"><xref:System.Net.Http.HttpClient.GetAsync%2A> <xref:System.Net.Http.HttpClient> <xref:System.Net.Http.HttpClient.SendAsync%2A> <xref:System.Net.Http.HttpClient.GetStringAsync%2A>Свойство указывает версию HTTP по умолчанию, используемую для любых запросов, отправляемых с помощью этого экземпляра, например вызовов, или. `DefaultRequestVersion`</span><span class="sxs-lookup"><span data-stu-id="0be88-206">The `DefaultRequestVersion` property specifies the default HTTP version to use for any requests sent using this <xref:System.Net.Http.HttpClient> instance, such as calls to <xref:System.Net.Http.HttpClient.GetAsync%2A>, <xref:System.Net.Http.HttpClient.GetStringAsync%2A>, or <xref:System.Net.Http.HttpClient.SendAsync%2A>.</span></span>

<span data-ttu-id="0be88-207">Свойство может быть изменено, пока <xref:System.Net.Http.HttpClient> экземпляр не запустил запрос. `DefaultRequestVersion`</span><span class="sxs-lookup"><span data-stu-id="0be88-207">The `DefaultRequestVersion` property can be changed as long as the <xref:System.Net.Http.HttpClient> instance has not started any request.</span></span>
 ]]></format>
      </remarks>
      <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-208">В операции над множеством <see langword="DefaultRequestVersion" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-208">In a set operation, <see langword="DefaultRequestVersion" /> is <see langword="null" />.</span></span></exception>
      <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0be88-209">Экземпляр <see cref="T:System.Net.Http.HttpClient" /> уже запустил один или несколько запросов.</span><span class="sxs-lookup"><span data-stu-id="0be88-209">The <see cref="T:System.Net.Http.HttpClient" /> instance has already started one or more requests.</span></span></exception>
      <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0be88-210">Экземпляр <see cref="T:System.Net.Http.HttpClient" /> уже удален.</span><span class="sxs-lookup"><span data-stu-id="0be88-210">The <see cref="T:System.Net.Http.HttpClient" /> instance has already been disposed.</span></span></exception>
    </Docs>
    </Member>
    <MemberGroup MemberName="DeleteAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0be88-211">Отправка запроса DELETE согласно указанному универсальному коду ресурса (URI) в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-211">Send a DELETE request to the specified Uri as an asynchronous operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As String) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="0be88-212">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="0be88-212">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="0be88-213">Отправка запроса DELETE согласно указанному универсальному коду ресурса (URI) в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-213">Send a DELETE request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-214">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-214">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-215">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-215">This operation will not block.</span></span> <span data-ttu-id="0be88-216">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="0be88-216">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-217">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-217">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0be88-218">Экземпляр <see cref="T:System.Net.Http.HttpClient" /> уже отправил сообщение с запросом.</span><span class="sxs-lookup"><span data-stu-id="0be88-218">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="0be88-219">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="0be88-219">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As Uri) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="0be88-220">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="0be88-220">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="0be88-221">Отправка запроса DELETE согласно указанному универсальному коду ресурса (URI) в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-221">Send a DELETE request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-222">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-222">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-223">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-223">This operation will not block.</span></span> <span data-ttu-id="0be88-224">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="0be88-224">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-225">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-225">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0be88-226">Экземпляр <see cref="T:System.Net.Http.HttpClient" /> уже отправил сообщение с запросом.</span><span class="sxs-lookup"><span data-stu-id="0be88-226">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="0be88-227">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="0be88-227">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (string requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="0be88-228">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="0be88-228">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0be88-229">Токен отмены, который может использоваться другими объектами или потоками для получения уведомления об отмене.</span><span class="sxs-lookup"><span data-stu-id="0be88-229">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="0be88-230">Отправка запроса DELETE к указанному URI с токеном отмены в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-230">Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-231">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-231">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-232">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-232">This operation will not block.</span></span> <span data-ttu-id="0be88-233">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="0be88-233">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-234">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-234">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0be88-235">Экземпляр <see cref="T:System.Net.Http.HttpClient" /> уже отправил сообщение с запросом.</span><span class="sxs-lookup"><span data-stu-id="0be88-235">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="0be88-236">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="0be88-236">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="0be88-237">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="0be88-237">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0be88-238">Токен отмены, который может использоваться другими объектами или потоками для получения уведомления об отмене.</span><span class="sxs-lookup"><span data-stu-id="0be88-238">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="0be88-239">Отправка запроса DELETE к указанному URI с токеном отмены в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-239">Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-240">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-240">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-241">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-241">This operation will not block.</span></span> <span data-ttu-id="0be88-242">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="0be88-242">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-243">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-243">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0be88-244">Экземпляр <see cref="T:System.Net.Http.HttpClient" /> уже отправил сообщение с запросом.</span><span class="sxs-lookup"><span data-stu-id="0be88-244">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="0be88-245">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="0be88-245">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="httpClient.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="0be88-246">Значение <see langword="true" /> для освобождения управляемых и неуправляемых ресурсов; значение <see langword="false" /> для освобождения только неуправляемых ресурсов.</span><span class="sxs-lookup"><span data-stu-id="0be88-246"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to releases only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="0be88-247">Освобождает неуправляемые ресурсы, используемые объектом <see cref="T:System.Net.Http.HttpClient" />, и опционально удаляет управляемые ресурсы.</span><span class="sxs-lookup"><span data-stu-id="0be88-247">Releases the unmanaged resources used by the <see cref="T:System.Net.Http.HttpClient" /> and optionally disposes of the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-248">Этот метод вызывается открытым `Dispose()` методом <xref:System.Object.Finalize%2A> и методом.</span><span class="sxs-lookup"><span data-stu-id="0be88-248">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="0be88-249">`Dispose()`вызывает защищенный `Dispose(Boolean)` метод с параметром `disposing` , для `true`которого задано значение.</span><span class="sxs-lookup"><span data-stu-id="0be88-249">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="0be88-250"><xref:System.Object.Finalize%2A>вызывает метод `disposing` `false`с параметром, равным. `Dispose`</span><span class="sxs-lookup"><span data-stu-id="0be88-250"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="0be88-251">Если параметр `disposing` имеет значение `true`, то данный метод освобождает все ресурсы, занятые любыми управляемыми объектами, на которые ссылается этот объект <xref:System.Net.Http.HttpClient>.</span><span class="sxs-lookup"><span data-stu-id="0be88-251">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Http.HttpClient> references.</span></span> <span data-ttu-id="0be88-252">Этот метод вызывает метод `Dispose()` каждого объекта, на который есть ссылка.</span><span class="sxs-lookup"><span data-stu-id="0be88-252">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 <span data-ttu-id="0be88-253">При вызове <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A> этого метода вызывается метод для прерывания всех ожидающих запросов.</span><span class="sxs-lookup"><span data-stu-id="0be88-253">When this method is called, the <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A> method is called to abort all pending requests.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0be88-254">Отправка запроса GET согласно указанному универсальному коду ресурса (URI) в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-254">Send a GET request to the specified Uri as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-255">Операция не будет заблокирована.</span><span class="sxs-lookup"><span data-stu-id="0be88-255">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="0be88-256">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="0be88-256">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="0be88-257">Отправка запроса GET согласно указанному универсальному коду ресурса (URI) в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-257">Send a GET request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-258">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-258">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-259">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-259">This operation will not block.</span></span> <span data-ttu-id="0be88-260">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="0be88-260">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-261">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-261">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="0be88-262">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="0be88-262">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="0be88-263">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="0be88-263">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="0be88-264">Отправка запроса GET согласно указанному универсальному коду ресурса (URI) в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-264">Send a GET request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-265">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-265">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-266">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-266">This operation will not block.</span></span> <span data-ttu-id="0be88-267">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="0be88-267">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-268">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-268">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="0be88-269">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="0be88-269">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Net.Http.HttpCompletionOption completionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string * System.Net.Http.HttpCompletionOption -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="0be88-270">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="0be88-270">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="0be88-271">Значение параметра завершения операции HTTP, указывающее, когда следует считать операцию завершенной.</span><span class="sxs-lookup"><span data-stu-id="0be88-271">An HTTP completion option value that indicates when the operation should be considered completed.</span></span></param>
        <summary><span data-ttu-id="0be88-272">Отправка запроса GET указанному универсальному коду ресурса (URI) с параметром "выполнение HTTP" в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-272">Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-273">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-273">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-274">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-274">This operation will not block.</span></span> <span data-ttu-id="0be88-275">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен на основе `completionOption` параметра после считывания части или всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="0be88-275">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-276">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-276">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="0be88-277">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="0be88-277">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="0be88-278">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="0be88-278">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0be88-279">Токен отмены, который может использоваться другими объектами или потоками для получения уведомления об отмене.</span><span class="sxs-lookup"><span data-stu-id="0be88-279">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="0be88-280">Отправка запроса DELETE указанному универсальному коду ресурса (URI) с токеном отмены в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-280">Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-281">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-281">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-282">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-282">This operation will not block.</span></span> <span data-ttu-id="0be88-283">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="0be88-283">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-284">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-284">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="0be88-285">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="0be88-285">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Net.Http.HttpCompletionOption completionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri * System.Net.Http.HttpCompletionOption -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="0be88-286">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="0be88-286">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="0be88-287">Значение параметра завершения операции HTTP, указывающее, когда следует считать операцию завершенной.</span><span class="sxs-lookup"><span data-stu-id="0be88-287">An HTTP completion option value that indicates when the operation should be considered completed.</span></span></param>
        <summary><span data-ttu-id="0be88-288">Отправка запроса GET указанному универсальному коду ресурса (URI) с параметром "выполнение HTTP" в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-288">Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-289">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-289">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-290">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-290">This operation will not block.</span></span> <span data-ttu-id="0be88-291">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен на основе `completionOption` параметра после считывания части или всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="0be88-291">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-292">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-292">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="0be88-293">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="0be88-293">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="0be88-294">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="0be88-294">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0be88-295">Токен отмены, который может использоваться другими объектами или потоками для получения уведомления об отмене.</span><span class="sxs-lookup"><span data-stu-id="0be88-295">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="0be88-296">Отправка запроса DELETE указанному универсальному коду ресурса (URI) с токеном отмены в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-296">Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-297">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-297">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-298">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-298">This operation will not block.</span></span> <span data-ttu-id="0be88-299">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="0be88-299">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-300">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-300">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="0be88-301">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="0be88-301">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="0be88-302">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="0be88-302">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="0be88-303">Значение параметра завершения операции HTTP, указывающее, когда следует считать операцию завершенной.</span><span class="sxs-lookup"><span data-stu-id="0be88-303">An HTTP  completion option value that indicates when the operation should be considered completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0be88-304">Токен отмены, который может использоваться другими объектами или потоками для получения уведомления об отмене.</span><span class="sxs-lookup"><span data-stu-id="0be88-304">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="0be88-305">Отправка запроса GET к указанному универсальному коду ресурса (URI) с параметром "выполнение HTTP" и токеном отмены в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-305">Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-306">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-306">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-307">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-307">This operation will not block.</span></span> <span data-ttu-id="0be88-308">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен на основе `completionOption` параметра после считывания части или всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="0be88-308">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-309">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-309">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="0be88-310">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="0be88-310">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="0be88-311">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="0be88-311">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="0be88-312">Значение параметра завершения операции HTTP, указывающее, когда следует считать операцию завершенной.</span><span class="sxs-lookup"><span data-stu-id="0be88-312">An HTTP  completion option value that indicates when the operation should be considered completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0be88-313">Токен отмены, который может использоваться другими объектами или потоками для получения уведомления об отмене.</span><span class="sxs-lookup"><span data-stu-id="0be88-313">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="0be88-314">Отправка запроса GET к указанному универсальному коду ресурса (URI) с параметром "выполнение HTTP" и токеном отмены в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-314">Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-315">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-315">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-316">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-316">This operation will not block.</span></span> <span data-ttu-id="0be88-317">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен на основе `completionOption` параметра после считывания части или всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="0be88-317">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-318">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-318">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="0be88-319">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="0be88-319">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteArrayAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0be88-320">Отправка запроса GET согласно указанному универсальному коду ресурса (URI) и возврат текста ответа в виде массива байтов в асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-320">Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-321">Операция не будет заблокирована.</span><span class="sxs-lookup"><span data-stu-id="0be88-321">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As String) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetByteArrayAsync : string -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="httpClient.GetByteArrayAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="0be88-322">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="0be88-322">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="0be88-323">Отправляет запрос GET согласно указанному универсальному коду ресурса (URI) и возвращает текст ответа в виде массива байтов в асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-323">Sends a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-324">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-324">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-325">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-325">This operation will not block.</span></span> <span data-ttu-id="0be88-326">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен после считывания всего текста ответа.</span><span class="sxs-lookup"><span data-stu-id="0be88-326">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-327">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-327">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="0be88-328">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="0be88-328">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As Uri) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetByteArrayAsync : Uri -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="httpClient.GetByteArrayAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="0be88-329">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="0be88-329">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="0be88-330">Отправка запроса GET согласно указанному универсальному коду ресурса (URI) и возврат текста ответа в виде массива байтов в асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-330">Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-331">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-331">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-332">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-332">This operation will not block.</span></span> <span data-ttu-id="0be88-333">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен после считывания всего текста ответа.</span><span class="sxs-lookup"><span data-stu-id="0be88-333">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-334">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-334">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="0be88-335">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="0be88-335">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetStreamAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0be88-336">Отправка запроса GET согласно указанному универсальному коду ресурса (URI) и возврат текста ответа в виде потока в асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-336">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-337">Операция не будет заблокирована.</span><span class="sxs-lookup"><span data-stu-id="0be88-337">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As String) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStreamAsync : string -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpClient.GetStreamAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="0be88-338">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="0be88-338">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="0be88-339">Отправка запроса GET согласно указанному универсальному коду ресурса (URI) и возврат текста ответа в виде потока в асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-339">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-340">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-340">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-341">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-341">This operation will not block.</span></span> <span data-ttu-id="0be88-342">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен после считывания заголовков ответа.</span><span class="sxs-lookup"><span data-stu-id="0be88-342">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the response headers are read.</span></span> <span data-ttu-id="0be88-343">Этот метод не считывает и не замещает текст ответа.</span><span class="sxs-lookup"><span data-stu-id="0be88-343">This method does not read nor buffer the response body.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-344">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-344">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="0be88-345">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="0be88-345">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As Uri) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStreamAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpClient.GetStreamAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="0be88-346">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="0be88-346">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="0be88-347">Отправка запроса GET согласно указанному универсальному коду ресурса (URI) и возврат текста ответа в виде потока в асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-347">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-348">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-348">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-349">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-349">This operation will not block.</span></span> <span data-ttu-id="0be88-350">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен после считывания заголовков ответа.</span><span class="sxs-lookup"><span data-stu-id="0be88-350">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the response headers are read.</span></span> <span data-ttu-id="0be88-351">Этот метод не считывает и не замещает текст ответа.</span><span class="sxs-lookup"><span data-stu-id="0be88-351">This method does not read nor buffer the response body.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-352">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-352">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="0be88-353">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="0be88-353">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetStringAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0be88-354">Отправка запроса GET согласно указанному универсальному коду ресурса (URI) и возврат текста ответа в виде строки в асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-354">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-355">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-355">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As String) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStringAsync : string -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="httpClient.GetStringAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="0be88-356">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="0be88-356">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="0be88-357">Отправка запроса GET согласно указанному универсальному коду ресурса (URI) и возврат текста ответа в виде строки в асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-357">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-358">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-358">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-359">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-359">This operation will not block.</span></span> <span data-ttu-id="0be88-360">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен после считывания всего текста ответа.</span><span class="sxs-lookup"><span data-stu-id="0be88-360">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-361">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-361">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="0be88-362">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="0be88-362">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As Uri) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStringAsync : Uri -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="httpClient.GetStringAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="0be88-363">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="0be88-363">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="0be88-364">Отправка запроса GET согласно указанному универсальному коду ресурса (URI) и возврат текста ответа в виде строки в асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-364">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-365">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-365">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-366">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-366">This operation will not block.</span></span> <span data-ttu-id="0be88-367">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен после считывания всего текста ответа.</span><span class="sxs-lookup"><span data-stu-id="0be88-367">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-368">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-368">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="0be88-369">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="0be88-369">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MaxResponseContentBufferSize">
      <MemberSignature Language="C#" Value="public long MaxResponseContentBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxResponseContentBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.MaxResponseContentBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxResponseContentBufferSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxResponseContentBufferSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxResponseContentBufferSize : int64 with get, set" Usage="System.Net.Http.HttpClient.MaxResponseContentBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0be88-370">Возвращает или задает максимальное число байтов в буфере при чтении содержимого отклика.</span><span class="sxs-lookup"><span data-stu-id="0be88-370">Gets or sets the maximum number of bytes to buffer when reading the response content.</span></span></summary>
        <value><span data-ttu-id="0be88-371">Максимальное число байтов в буфере при чтении содержимого отклика.</span><span class="sxs-lookup"><span data-stu-id="0be88-371">The maximum number of bytes to buffer when reading the response content.</span></span> <span data-ttu-id="0be88-372">Значением по умолчанию для этого свойства является 2 гигабайта.</span><span class="sxs-lookup"><span data-stu-id="0be88-372">The default value for this property is 2 gigabytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-373">Приложение может присвоить <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> свойству меньшее значение, чтобы ограничить размер ответа в буфер при чтении ответа.</span><span class="sxs-lookup"><span data-stu-id="0be88-373">An app can set the <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property to a lower value to limit the size of the response to buffer when reading the response.</span></span> <span data-ttu-id="0be88-374">Если размер содержимого ответа больше, чем <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> свойство, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="0be88-374">If the size of the response content is greater than the  <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property, an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0be88-375">Указанный размер меньше или равен нулю.</span><span class="sxs-lookup"><span data-stu-id="0be88-375">The size specified is less than or equal to zero.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0be88-376">Операция для текущего экземпляра уже запущена.</span><span class="sxs-lookup"><span data-stu-id="0be88-376">An operation has already been started on the current instance.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0be88-377">Текущий экземпляр удален.</span><span class="sxs-lookup"><span data-stu-id="0be88-377">The current instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (string requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : string * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="0be88-378">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="0be88-378">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="0be88-379">Содержимое HTTP-запроса, отправляемое на сервер.</span><span class="sxs-lookup"><span data-stu-id="0be88-379">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="0be88-380">Асинхронно отправляет запрос PATCH к универсальному коду ресурса (URI), заданному в виде строки.</span><span class="sxs-lookup"><span data-stu-id="0be88-380">Sends a PATCH request to a Uri designated as a string as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-381">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-381">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-382">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-382">This operation will not block.</span></span> <span data-ttu-id="0be88-383">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="0be88-383">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (Uri requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : Uri * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="0be88-384">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="0be88-384">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="0be88-385">Содержимое HTTP-запроса, отправляемое на сервер.</span><span class="sxs-lookup"><span data-stu-id="0be88-385">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="0be88-386">Отправляет запрос PATCH в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-386">Sends a PATCH request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-387">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-387">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-388">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-388">This operation will not block.</span></span> <span data-ttu-id="0be88-389">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="0be88-389">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As String, content As HttpContent, cancellationToken as CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : string * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="0be88-390">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="0be88-390">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="0be88-391">Содержимое HTTP-запроса, отправляемое на сервер.</span><span class="sxs-lookup"><span data-stu-id="0be88-391">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0be88-392">Токен отмены, который может использоваться другими объектами или потоками для получения уведомления об отмене.</span><span class="sxs-lookup"><span data-stu-id="0be88-392">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="0be88-393">Асинхронно отправляет запрос PATCH с токеном отмены к универсальному коду ресурса (URI), представленному строкой.</span><span class="sxs-lookup"><span data-stu-id="0be88-393">Sends a PATCH request with a cancellation token to a Uri represented as a string as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-394">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-394">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-395">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-395">This operation will not block.</span></span> <span data-ttu-id="0be88-396">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="0be88-396">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As Uri, content As HttpContent, cancellationToken as CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : Uri * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="0be88-397">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="0be88-397">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="0be88-398">Содержимое HTTP-запроса, отправляемое на сервер.</span><span class="sxs-lookup"><span data-stu-id="0be88-398">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0be88-399">Токен отмены, который может использоваться другими объектами или потоками для получения уведомления об отмене.</span><span class="sxs-lookup"><span data-stu-id="0be88-399">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="0be88-400">Отправляет запрос PATCH с токеном отмены в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-400">Sends a PATCH request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-401">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-401">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-402">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-402">This operation will not block.</span></span> <span data-ttu-id="0be88-403">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="0be88-403">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PostAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0be88-404">Отправка запроса POST по указанному универсальному коду ресурса (URI) в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-404">Send a POST request to the specified Uri as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-405">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-405">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (string requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : string * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="0be88-406">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="0be88-406">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="0be88-407">Содержимое HTTP-запроса, отправляемое на сервер.</span><span class="sxs-lookup"><span data-stu-id="0be88-407">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="0be88-408">Отправка запроса POST по указанному универсальному коду ресурса (URI) в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-408">Send a POST request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-409">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-409">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-410">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-410">This operation will not block.</span></span> <span data-ttu-id="0be88-411">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="0be88-411">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-412">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-412">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="0be88-413">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="0be88-413">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (Uri requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : Uri * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="0be88-414">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="0be88-414">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="0be88-415">Содержимое HTTP-запроса, отправляемое на сервер.</span><span class="sxs-lookup"><span data-stu-id="0be88-415">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="0be88-416">Отправка запроса POST по указанному универсальному коду ресурса (URI) в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-416">Send a POST request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-417">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-417">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-418">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-418">This operation will not block.</span></span> <span data-ttu-id="0be88-419">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="0be88-419">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-420">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-420">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="0be88-421">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="0be88-421">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : string * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="0be88-422">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="0be88-422">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="0be88-423">Содержимое HTTP-запроса, отправляемое на сервер.</span><span class="sxs-lookup"><span data-stu-id="0be88-423">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0be88-424">Токен отмены, который может использоваться другими объектами или потоками для получения уведомления об отмене.</span><span class="sxs-lookup"><span data-stu-id="0be88-424">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="0be88-425">Отправка запроса POST с токеном отмены в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-425">Send a POST request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-426">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-426">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-427">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-427">This operation will not block.</span></span> <span data-ttu-id="0be88-428">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="0be88-428">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-429">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-429">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="0be88-430">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="0be88-430">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : Uri * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="0be88-431">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="0be88-431">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="0be88-432">Содержимое HTTP-запроса, отправляемое на сервер.</span><span class="sxs-lookup"><span data-stu-id="0be88-432">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0be88-433">Токен отмены, который может использоваться другими объектами или потоками для получения уведомления об отмене.</span><span class="sxs-lookup"><span data-stu-id="0be88-433">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="0be88-434">Отправка запроса POST с токеном отмены в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-434">Send a POST request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-435">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-435">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-436">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-436">This operation will not block.</span></span> <span data-ttu-id="0be88-437">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="0be88-437">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-438">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-438">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="0be88-439">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="0be88-439">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="PutAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0be88-440">Отправка запроса PUT по указанному универсальному коду ресурса (URI) в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-440">Send a PUT request to the specified Uri as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-441">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-441">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (string requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : string * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="0be88-442">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="0be88-442">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="0be88-443">Содержимое HTTP-запроса, отправляемое на сервер.</span><span class="sxs-lookup"><span data-stu-id="0be88-443">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="0be88-444">Отправка запроса PUT по указанному универсальному коду ресурса (URI) в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-444">Send a PUT request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-445">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-445">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-446">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-446">This operation will not block.</span></span> <span data-ttu-id="0be88-447">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="0be88-447">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-448">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-448">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="0be88-449">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="0be88-449">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (Uri requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : Uri * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="0be88-450">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="0be88-450">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="0be88-451">Содержимое HTTP-запроса, отправляемое на сервер.</span><span class="sxs-lookup"><span data-stu-id="0be88-451">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="0be88-452">Отправка запроса PUT по указанному универсальному коду ресурса (URI) в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-452">Send a PUT request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-453">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-453">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-454">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-454">This operation will not block.</span></span> <span data-ttu-id="0be88-455">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="0be88-455">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-456">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-456">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="0be88-457">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="0be88-457">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : string * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="0be88-458">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="0be88-458">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="0be88-459">Содержимое HTTP-запроса, отправляемое на сервер.</span><span class="sxs-lookup"><span data-stu-id="0be88-459">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0be88-460">Токен отмены, который может использоваться другими объектами или потоками для получения уведомления об отмене.</span><span class="sxs-lookup"><span data-stu-id="0be88-460">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="0be88-461">Отправка запроса PUT с токеном отмены в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-461">Send a PUT request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-462">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-462">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-463">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-463">This operation will not block.</span></span> <span data-ttu-id="0be88-464">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="0be88-464">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-465">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-465">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="0be88-466">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="0be88-466">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : Uri * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="0be88-467">Универсальный код ресурса (URI), по которому отправляется запрос.</span><span class="sxs-lookup"><span data-stu-id="0be88-467">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="0be88-468">Содержимое HTTP-запроса, отправляемое на сервер.</span><span class="sxs-lookup"><span data-stu-id="0be88-468">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0be88-469">Токен отмены, который может использоваться другими объектами или потоками для получения уведомления об отмене.</span><span class="sxs-lookup"><span data-stu-id="0be88-469">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="0be88-470">Отправка запроса PUT с токеном отмены в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-470">Send a PUT request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-471">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-471">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-472">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-472">This operation will not block.</span></span> <span data-ttu-id="0be88-473">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен после считывания всего ответа (включая содержимое).</span><span class="sxs-lookup"><span data-stu-id="0be88-473">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-474">Значение параметра <paramref name="requestUri" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-474">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="0be88-475">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="0be88-475">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0be88-476">Отправка HTTP-запроса в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-476">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-477">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-477">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (request As HttpRequestMessage) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="0be88-478">Сообщение HTTP-запроса для отправки.</span><span class="sxs-lookup"><span data-stu-id="0be88-478">The HTTP request message to send.</span></span></param>
        <summary><span data-ttu-id="0be88-479">Отправка HTTP-запроса в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-479">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-480">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-480">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-481">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-481">This operation will not block.</span></span> <span data-ttu-id="0be88-482">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен после считывания всего ответа, включая содержимое.</span><span class="sxs-lookup"><span data-stu-id="0be88-482">The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-483">Значение параметра <paramref name="request" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-483">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0be88-484">Экземпляр <see cref="T:System.Net.Http.HttpClient" /> уже отправил сообщение с запросом.</span><span class="sxs-lookup"><span data-stu-id="0be88-484">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="0be88-485">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="0be88-485">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (request As HttpRequestMessage, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Net.Http.HttpCompletionOption -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync (request, completionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="0be88-486">Сообщение HTTP-запроса для отправки.</span><span class="sxs-lookup"><span data-stu-id="0be88-486">The HTTP request message to send.</span></span></param>
        <param name="completionOption"><span data-ttu-id="0be88-487">Когда должна завершиться операция (как только будет доступен отклик или после считывания всего содержимого отклика).</span><span class="sxs-lookup"><span data-stu-id="0be88-487">When the operation should complete (as soon as a response is available or after reading the whole response content).</span></span></param>
        <summary><span data-ttu-id="0be88-488">Отправка HTTP-запроса в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-488">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-489">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-489">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-490">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-490">This operation will not block.</span></span> <span data-ttu-id="0be88-491">В зависимости от значения `completionOption` параметра возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен, как только будет доступен ответ, или будет прочитан весь ответ, включая содержимое.</span><span class="sxs-lookup"><span data-stu-id="0be88-491">Depending on the value of the `completionOption` parameter, the returned <xref:System.Threading.Tasks.Task%601> object will complete as soon as a response is available or the entire response including content is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-492">Значение параметра <paramref name="request" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-492">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0be88-493">Экземпляр <see cref="T:System.Net.Http.HttpClient" /> уже отправил сообщение с запросом.</span><span class="sxs-lookup"><span data-stu-id="0be88-493">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="0be88-494">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="0be88-494">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync (request, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="0be88-495">Сообщение HTTP-запроса для отправки.</span><span class="sxs-lookup"><span data-stu-id="0be88-495">The HTTP request message to send.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0be88-496">Токен отмены для отмены операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-496">The cancellation token to cancel operation.</span></span></param>
        <summary><span data-ttu-id="0be88-497">Отправка HTTP-запроса в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-497">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-498">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-498">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-499">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-499">This operation will not block.</span></span> <span data-ttu-id="0be88-500">Возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен после считывания всего ответа, включая содержимое.</span><span class="sxs-lookup"><span data-stu-id="0be88-500">The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-501">Значение параметра <paramref name="request" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-501">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0be88-502">Экземпляр <see cref="T:System.Net.Http.HttpClient" /> уже отправил сообщение с запросом.</span><span class="sxs-lookup"><span data-stu-id="0be88-502">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="0be88-503">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="0be88-503">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync (request, completionOption, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="0be88-504">Сообщение HTTP-запроса для отправки.</span><span class="sxs-lookup"><span data-stu-id="0be88-504">The HTTP request message to send.</span></span></param>
        <param name="completionOption"><span data-ttu-id="0be88-505">Когда должна завершиться операция (как только будет доступен отклик или после считывания всего содержимого отклика).</span><span class="sxs-lookup"><span data-stu-id="0be88-505">When the operation should complete (as soon as a response is available or after reading the whole response content).</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0be88-506">Токен отмены для отмены операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-506">The cancellation token to cancel operation.</span></span></param>
        <summary><span data-ttu-id="0be88-507">Отправка HTTP-запроса в качестве асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="0be88-507">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="0be88-508">Объект задачи, представляющий асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="0be88-508">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-509">Эта операция не будет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="0be88-509">This operation will not block.</span></span> <span data-ttu-id="0be88-510">В зависимости от значения `completionOption` параметра возвращаемый <xref:System.Threading.Tasks.Task%601> объект будет завершен, как только будет доступен ответ, или будет прочитан весь ответ, включая содержимое.</span><span class="sxs-lookup"><span data-stu-id="0be88-510">Depending on the value of the `completionOption` parameter, the returned <xref:System.Threading.Tasks.Task%601> object will complete as soon as a response is available or the entire response including content is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0be88-511">Значение параметра <paramref name="request" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-511">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0be88-512">Экземпляр <see cref="T:System.Net.Http.HttpClient" /> уже отправил сообщение с запросом.</span><span class="sxs-lookup"><span data-stu-id="0be88-512">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="0be88-513">Не удалось выполнить запрос из-за ключевой проблемы, например подключения к сети, ошибки DNS, проверки сертификата сервера или времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="0be88-513">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public TimeSpan Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.Timeout" />
      <MemberSignature Language="VB.NET" Value="Public Property Timeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Timeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.Timeout : TimeSpan with get, set" Usage="System.Net.Http.HttpClient.Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0be88-514">Возвращает или задает время ожидания для выполнения запроса.</span><span class="sxs-lookup"><span data-stu-id="0be88-514">Gets or sets the timespan to wait before the request times out.</span></span></summary>
        <value><span data-ttu-id="0be88-515">Время ожидания для выполнения запроса.</span><span class="sxs-lookup"><span data-stu-id="0be88-515">The timespan to wait before the request times out.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0be88-516">По умолчанию установлено значение 100 000 миллисекунд (100 секунд).</span><span class="sxs-lookup"><span data-stu-id="0be88-516">The default value is 100,000 milliseconds (100 seconds).</span></span>  
  
 <span data-ttu-id="0be88-517">Чтобы установить бесконечное время ожидания, задайте для <xref:System.Threading.Timeout.InfiniteTimeSpan>свойства значение.</span><span class="sxs-lookup"><span data-stu-id="0be88-517">To set an infinite timeout, set the property value to <xref:System.Threading.Timeout.InfiniteTimeSpan>.</span></span>  
  
 <span data-ttu-id="0be88-518">Возврат или истечение времени ожидания запроса службы доменных имен (DNS) может занять до 15 секунд. Если запрос содержит имя узла, требующее разрешения, и для него <xref:System.Net.Http.HttpClient.Timeout%2A> задано значение менее 15 секунд, то для указания времени ожидания запроса может потребоваться 15 секунд <xref:System.Net.WebException> или более.</span><span class="sxs-lookup"><span data-stu-id="0be88-518">A Domain Name System (DNS) query may take up to 15 seconds to return or time out. If your request contains a host name that requires resolution and you set <xref:System.Net.Http.HttpClient.Timeout%2A> to a value less than 15 seconds, it may take 15 seconds or more before a <xref:System.Net.WebException> is thrown to indicate a timeout on your request.</span></span>  
  
 <span data-ttu-id="0be88-519">Одно и то же время ожидания будет применяться для всех <xref:System.Net.Http.HttpClient> запросов, использующих этот экземпляр.</span><span class="sxs-lookup"><span data-stu-id="0be88-519">The same timeout will apply for all requests using this <xref:System.Net.Http.HttpClient> instance.</span></span>  <span data-ttu-id="0be88-520">Вы также можете задать различные времена ожидания для отдельных запросов, <xref:System.Threading.CancellationTokenSource> использующих для задачи.</span><span class="sxs-lookup"><span data-stu-id="0be88-520">You may also set different timeouts for individual requests using a <xref:System.Threading.CancellationTokenSource> on a task.</span></span> <span data-ttu-id="0be88-521">Обратите внимание, что будут применяться только более короткие из двух таймаутов.</span><span class="sxs-lookup"><span data-stu-id="0be88-521">Note that only the shorter of the two timeouts will apply.</span></span>  
  
 ## <a name="example"></a><span data-ttu-id="0be88-522">Пример</span><span class="sxs-lookup"><span data-stu-id="0be88-522">Example</span></span>
 
 <span data-ttu-id="0be88-523">В следующем примере задается `Timeout` свойство.</span><span class="sxs-lookup"><span data-stu-id="0be88-523">The following example sets the `Timeout` property.</span></span>
  
```csharp
HttpClient httpClient = new HttpClient();
httpClient.Timeout = TimeSpan.FromMinutes(10);
```

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0be88-524">Указанное значение времени ожидания меньше или равно нулю и не является <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" />.</span><span class="sxs-lookup"><span data-stu-id="0be88-524">The timeout specified is less than or equal to zero and is not <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0be88-525">Операция для текущего экземпляра уже запущена.</span><span class="sxs-lookup"><span data-stu-id="0be88-525">An operation has already been started on the current instance.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0be88-526">Текущий экземпляр удален.</span><span class="sxs-lookup"><span data-stu-id="0be88-526">The current instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
