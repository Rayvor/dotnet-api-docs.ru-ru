<Type Name="TextFragment" FullName="System.Speech.Synthesis.TtsEngine.TextFragment">
  <Metadata><Meta Name="ms.openlocfilehash" Value="733783388d438c269004f91902831cd498fa1234" /><Meta Name="ms.sourcegitcommit" Value="e7974886b08aa83a8fb461e8550f31a7d4331ee3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="07/23/2019" /><Meta Name="ms.locfileid" Value="68392358" /></Metadata><TypeSignature Language="C#" Value="public class TextFragment" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi beforefieldinit TextFragment extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
  <TypeSignature Language="VB.NET" Value="Public Class TextFragment" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextFragment" />
  <TypeSignature Language="F#" Value="type TextFragment = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Содержит сведения об атрибуте текста и речи для использования обработчиком синтеза речи.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Инфраструктура платформы обработки речи распаковать XML-структуру SSML входных и конструкций <xref:System.Speech.Synthesis.TtsEngine.TextFragment> объектов.  
  
 Речевое содержимое доступно <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>через свойства <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A> <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> , и <xref:System.Speech.Synthesis.TtsEngine.TextFragment> экземпляра.  
  
 Сведения об атрибутах речи, такие как выделение, тон и скорость, получаются из <xref:System.Speech.Synthesis.TtsEngine.FragmentState> объекта <xref:System.Speech.Synthesis.TtsEngine.TextFragment> <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> , возвращаемого свойством.  
  
   
  
## Examples  
 Приведенный ниже пример является частью пользовательской реализации <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>синтеза речи, наследуемой от, и <xref:System.Speech.Synthesis.TtsEngine.TextFragment>использования функций, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>и <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>.  
  
 Реализация<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Получает массив <xref:System.Speech.Synthesis.TtsEngine.TextFragment> экземпляров и создает новый <xref:System.Speech.Synthesis.TtsEngine.TextFragment> массив экземпляров `Speak` для передачи в метод базового механизма синтеза.  
  
     Конкретная осторожность используется для того <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, чтобы учитывать, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> в <xref:System.Speech.Synthesis.TtsEngine.TextFragment> исходной при создании <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> новых <xref:System.Speech.Synthesis.TtsEngine.TextFragment> экземпляров.  
  
2.  <xref:System.Speech.Synthesis.TtsEngine.TextFragment> <xref:System.Speech.Synthesis.TtsEngine.FragmentState> <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>Если значение <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> перечисления, найденное в свойстве, возвращаемом свойством каждого экземпляра, равно, то реализация  
  
    -   Преобразует Американский регион в Бритишисмс текст.  
  
    -   Если свойство в интерфейсах, предоставленных <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> для реализации, поддерживает тип события, то <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> экземпляр используется для создания события для создания счетчика хода выполнения синтезатора. <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A>  
  
3.  Затем модуль рендеринга речи вызывается с измененным <xref:System.Speech.Synthesis.TtsEngine.TextFragment> массивом.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFragment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TextFragment.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFragment();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Создает новый экземпляр класса <see langword="TextFragment" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Конструктор без параметров для <xref:System.Speech.Synthesis.TtsEngine.TextFragment>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.TtsEngine.FragmentState State { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Synthesis.TtsEngine.FragmentState State" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.State" />
      <MemberSignature Language="VB.NET" Value="Public Property State As FragmentState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Synthesis::TtsEngine::FragmentState State { System::Speech::Synthesis::TtsEngine::FragmentState get(); void set(System::Speech::Synthesis::TtsEngine::FragmentState value); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Speech.Synthesis.TtsEngine.FragmentState with get, set" Usage="System.Speech.Synthesis.TtsEngine.TextFragment.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.TtsEngine.FragmentState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает сведения об атрибутах речи для <see langword="TextFragment" />.</summary>
        <value>Экземпляр <see cref="T:System.Speech.Synthesis.TtsEngine.FragmentState" /> возвращается или используется для задания сведений об атрибутах речи для фрагмента <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию этому свойству присваивается значение `null`.  
  
 Сведения о Prosody можно <xref:System.Speech.Synthesis.TtsEngine.Prosody> получить из экземпляра, возвращенного <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Prosody%2A> <xref:System.Speech.Synthesis.TtsEngine.FragmentState> свойством экземпляра, возвращаемого <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>методом.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextLength">
      <MemberSignature Language="C#" Value="public int TextLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextLength" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength" />
      <MemberSignature Language="VB.NET" Value="Public Property TextLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TextLength { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TextLength : int with get, set" Usage="System.Speech.Synthesis.TtsEngine.TextFragment.TextLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает длину текста речи в фрагмента.</summary>
        <value>Возвращается <see langword="int" /> или может использоваться, чтобы задать длину текстовой строки (в символах), связанной с этим фрагментом текста для произнесения.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение этого свойства по умолчанию равно 0.  
  
   
  
## Examples  
 Приведенный ниже пример является частью пользовательской реализации <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>синтеза речи, наследуемой от, и <xref:System.Speech.Synthesis.TtsEngine.TextFragment>использования функций, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>и <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>.  
  
 Реализация<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Получает массив <xref:System.Speech.Synthesis.TtsEngine.TextFragment> экземпляров и создает новый <xref:System.Speech.Synthesis.TtsEngine.TextFragment> массив экземпляров `Speak` для передачи в метод базового механизма синтеза.  
  
     Конкретная осторожность используется для того <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, чтобы учитывать, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> в <xref:System.Speech.Synthesis.TtsEngine.TextFragment> исходной при создании <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> новых <xref:System.Speech.Synthesis.TtsEngine.TextFragment> экземпляров.  
  
2.  <xref:System.Speech.Synthesis.TtsEngine.TextFragment> <xref:System.Speech.Synthesis.TtsEngine.FragmentState> <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>Если значение <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> перечисления, найденное в свойстве, возвращаемом свойством каждого экземпляра, равно, то реализация  
  
    -   Преобразует Американский регион в Бритишисмс текст.  
  
    -   Если свойство в интерфейсах, предоставленных <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> для реализации, поддерживает тип события, то <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> экземпляр используется для создания события для создания счетчика хода выполнения синтезатора. <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A>  
  
3.  Затем модуль рендеринга речи вызывается с измененным <xref:System.Speech.Synthesis.TtsEngine.TextFragment> массивом.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextOffset">
      <MemberSignature Language="C#" Value="public int TextOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextOffset" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property TextOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TextOffset { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TextOffset : int with get, set" Usage="System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает начальное положение текста во фрагменте.</summary>
        <value>Возвращается <see langword="int" /> или может использоваться, чтобы задать начальную точку части (в символах), связанной с этим фрагментом текста для произнесения.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение этого свойства по умолчанию равно 0.  
  
   
  
## Examples  
 Приведенный ниже пример является частью пользовательской реализации <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>синтеза речи, наследуемой от, и <xref:System.Speech.Synthesis.TtsEngine.TextFragment>использования функций, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>и <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>.  
  
 Реализация<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Получает массив <xref:System.Speech.Synthesis.TtsEngine.TextFragment> экземпляров и создает новый <xref:System.Speech.Synthesis.TtsEngine.TextFragment> массив экземпляров `Speak` для передачи в метод базового механизма синтеза.  
  
     Конкретная осторожность используется для того <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, чтобы учитывать, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> в <xref:System.Speech.Synthesis.TtsEngine.TextFragment> исходной при создании <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> новых <xref:System.Speech.Synthesis.TtsEngine.TextFragment> экземпляров.  
  
2.  <xref:System.Speech.Synthesis.TtsEngine.TextFragment> <xref:System.Speech.Synthesis.TtsEngine.FragmentState> <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>Если значение <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> перечисления, найденное в свойстве, возвращаемом свойством каждого экземпляра, равно, то реализация  
  
    -   Преобразует Американский регион в Бритишисмс текст.  
  
    -   Если свойство в интерфейсах, предоставленных <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> для реализации, поддерживает тип события, то <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> экземпляр используется для создания события для создания счетчика хода выполнения синтезатора. <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A>  
  
3.  Затем модуль рендеринга речи вызывается с измененным <xref:System.Speech.Synthesis.TtsEngine.TextFragment> массивом.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextToSpeak">
      <MemberSignature Language="C#" Value="public string TextToSpeak { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TextToSpeak" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak" />
      <MemberSignature Language="VB.NET" Value="Public Property TextToSpeak As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TextToSpeak { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TextToSpeak : string with get, set" Usage="System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Задает или получает текст речи фрагмента.</summary>
        <value><see langword="System.String" /> возвращается или может использоваться для задания текста речи, который должен использоваться механизмом синтеза речи для создания звукового содержимого.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию этому свойству присваивается значение `System.String.Empty`.  
  
 Приложения свободно могут полностью изменить значение <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A>.  
  
 Сброс значения <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> не приведет к изменению <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A> значения и <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>.  
  
   
  
## Examples  
 Приведенный ниже пример является частью пользовательской реализации <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>синтеза речи, наследуемой от, и <xref:System.Speech.Synthesis.TtsEngine.TextFragment>использования функций, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>и <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>.  
  
 Реализация<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Получает массив <xref:System.Speech.Synthesis.TtsEngine.TextFragment> экземпляров и создает новый <xref:System.Speech.Synthesis.TtsEngine.TextFragment> массив экземпляров `Speak` для передачи в метод базового механизма синтеза.  
  
     Конкретная осторожность используется для того <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, чтобы учитывать, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> в <xref:System.Speech.Synthesis.TtsEngine.TextFragment> исходной при создании <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> новых <xref:System.Speech.Synthesis.TtsEngine.TextFragment> экземпляров.  
  
2.  <xref:System.Speech.Synthesis.TtsEngine.TextFragment> <xref:System.Speech.Synthesis.TtsEngine.FragmentState> <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>Если значение <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> перечисления, найденное в свойстве, возвращаемом свойством каждого экземпляра, равно, то реализация  
  
    -   Преобразует Американский регион в Бритишисмс текст.  
  
    -   Если свойство в интерфейсах, предоставленных <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> для реализации, поддерживает тип события, то <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> экземпляр используется для создания события для создания счетчика хода выполнения синтезатора. <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A>  
  
3.  Затем модуль рендеринга речи вызывается с измененным <xref:System.Speech.Synthesis.TtsEngine.TextFragment> массивом.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>