<Type Name="DbDataAdapter" FullName="System.Data.Common.DbDataAdapter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="51e789823e2fd3e61e071d5b8bfb6b234dc3a971" /><Meta Name="ms.sourcegitcommit" Value="a22d0855bbf24d893f43605f8b7e3a44bd9551a5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70328751" /></Metadata><TypeSignature Language="C#" Value="public abstract class DbDataAdapter : System.Data.Common.DataAdapter, ICloneable, System.Data.IDbDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DbDataAdapter extends System.Data.Common.DataAdapter implements class System.Data.IDataAdapter, class System.Data.IDbDataAdapter, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Data.Common.DbDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DbDataAdapter&#xA;Inherits DataAdapter&#xA;Implements ICloneable, IDbDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public ref class DbDataAdapter abstract : System::Data::Common::DataAdapter, ICloneable, System::Data::IDbDataAdapter" />
  <TypeSignature Language="F#" Value="type DbDataAdapter = class&#xA;    inherit DataAdapter&#xA;    interface IDbDataAdapter&#xA;    interface ICloneable&#xA;    interface IDataAdapter" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DataAdapter</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.IDataAdapter</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Data.IDbDataAdapter</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Помогает реализации интерфейса <see cref="T:System.Data.IDbDataAdapter" />. Разработчики производных классов <see cref="T:System.Data.Common.DbDataAdapter" /> реализуют набор функций, обеспечивающий строгую типизацию, но наследуют большинство функций, необходимых для полной реализации **DataAdapter**.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Класс наследует <xref:System.Data.Common.DataAdapter> от класса и реализует <xref:System.Data.IDbDataAdapter> интерфейс. <xref:System.Data.Common.DbDataAdapter> Он помогает классу реализовать **DataAdapter** , предназначенный для использования с реляционной базой данных.  
  
 Приложение не создает экземпляр <xref:System.Data.Common.DbDataAdapter> класса напрямую, но создает экземпляр класса, наследующего от него.  
  
 Классы, наследующие <xref:System.Data.Common.DbDataAdapter> , должны реализовывать унаследованные члены и, как правило, определяют дополнительные члены для добавления функций, зависящих от поставщика. Например, <xref:System.Data.Common.DbDataAdapter> класс <xref:System.Data.IDbDataAdapter.SelectCommand%2A> определяет свойство, а <xref:System.Data.Common.DbDataAdapter> <xref:System.Data.IDataAdapter.Fill%2A> класс определяет восемь перегрузок метода. В свою очередь, <xref:System.Data.OleDb.OleDbDataAdapter> класс наследует <xref:System.Data.Common.DbDataAdapter.Fill%2A> метод, а также определяет две <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> дополнительные перегрузки, принимающие объект набора записей ADO в качестве параметра.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>При наследовании от <see cref="T:System.Data.Common.DbDataAdapter" /> класса рекомендуется реализовать следующие конструкторы: 
 <list type="table"><listheader><term> Элемент 
 </term><description> Описание 
 </description></listheader><item><term> *Prv* DataAdapter () 
 </term><description> Инициализирует новый экземпляр класса " *Prv*DataAdapter".  
  
 </description></item><item><term> *Prv* DataAdapter (** команда PRV *SelectCommand*) 
 </term><description> Инициализирует новый экземпляр класса " *Prv*DataAdapter" с указанной инструкцией SQL SELECT.  
  
 </description></item><item><term> *Prv* DataAdapter (строка *селекткоммандтекст*, строка *селектконнектионстринг*) 
 </term><description> Инициализирует новый экземпляр класса " *Prv*DataAdapter" с помощью инструкции SQL SELECT и строки подключения.  
  
 </description></item><item><term> *Prv* DataAdapter (строка *селекткоммандтекст*, *Prv*Connection *селектконнектион*) 
 </term><description> Инициализирует новый экземпляр класса " *Prv*DataAdapter" с помощью инструкции SQL SELECT и объекта соединения *Prv*.  
  
 </description></item></list>  

 Чтобы обеспечить согласованность между .NET Framework поставщиками данных, следует присвоить классу наследуемого класса в форме *Prv*DataAdapter, где *Prv* — универсальный префикс, присвоенный всем классам в определенном пространстве имен поставщика данных .NET Framework. Например, "SQL" — это префикс <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> класса в пространстве имен **System. Data. SqlClient** .</para></block>
    <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
    <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see langword="DataAdapter" />.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbDataAdapter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DbDataAdapter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса **DataAdapter**.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При создании экземпляра <xref:System.Data.Common.DbDataAdapter>для следующих начальных значений задаются следующие свойства, доступные для чтения и записи.  
  
|Свойства|Исходное значение|  
|----------------|-------------------|  
|<xref:System.Data.IDbDataAdapter.SelectCommand%2A>|Новый объект <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.IDbDataAdapter.InsertCommand%2A>|Новый объект <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.IDbDataAdapter.DeleteCommand%2A>|Новый объект <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.IDbDataAdapter.UpdateCommand%2A>|Новый объект <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  
|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  
  
 Значение любого из этих свойств можно изменить с помощью отдельного вызова свойства.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbDataAdapter (System.Data.Common.DbDataAdapter adapter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Data.Common.DbDataAdapter adapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (adapter As DbDataAdapter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DbDataAdapter(System::Data::Common::DbDataAdapter ^ adapter);" />
      <MemberSignature Language="F#" Value="new System.Data.Common.DbDataAdapter : System.Data.Common.DbDataAdapter -&gt; System.Data.Common.DbDataAdapter" Usage="new System.Data.Common.DbDataAdapter adapter" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="adapter" Type="System.Data.Common.DbDataAdapter" />
      </Parameters>
      <Docs>
        <param name="adapter">Объект <see langword="DataAdapter" /> используется для создания нового <see langword="DataAdapter" />.</param>
        <summary>Инициализирует новый экземпляр класса <see langword="DataAdapter" /> из существующего объекта того же типа.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта перегрузка <xref:System.Data.Common.DbDataAdapter> конструктора разработана для использования .NET Framework поставщиком данных при реализации аналогичного конструктора для использования в реализации клона.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="AddToBatch">
      <MemberSignature Language="C#" Value="protected virtual int AddToBatch (System.Data.IDbCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 AddToBatch(class System.Data.IDbCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AddToBatch (command As IDbCommand) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int AddToBatch(System::Data::IDbCommand ^ command);" />
      <MemberSignature Language="F#" Value="abstract member AddToBatch : System.Data.IDbCommand -&gt; int&#xA;override this.AddToBatch : System.Data.IDbCommand -&gt; int" Usage="dbDataAdapter.AddToBatch command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.IDbCommand" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="command">Интерфейс <see cref="T:System.Data.IDbCommand" />, добавляемый к пакету.</param>
        <summary>Добавляет интерфейс <see cref="T:System.Data.IDbCommand" /> к текущему пакету.</summary>
        <returns>Число команд в пакете, имевшееся до добавления интерфейса <see cref="T:System.Data.IDbCommand" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В <xref:System.Data.Common.DbDataAdapter>этот метод создает исключение <xref:System.NotSupportedException>. Классы, наследующие <xref:System.Data.Common.DbDataAdapter> от переопределения этого метода, обеспечивают поддержку пакетов.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Адаптер не поддерживает пакеты.</exception>
        <block subset="none" type="overrides"><para>Этот метод защищен и предназначен для использования .NET Framework поставщиком данных.  
  
Если класс, наследующий от <see cref="T:System.Data.Common.DbDataAdapter" /> , поддерживает пакеты, этот класс переопределяет этот метод, чтобы разрешить пользователям добавлять команду в пакет.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ClearBatch">
      <MemberSignature Language="C#" Value="protected virtual void ClearBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ClearBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.ClearBatch" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ClearBatch ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ClearBatch();" />
      <MemberSignature Language="F#" Value="abstract member ClearBatch : unit -&gt; unit&#xA;override this.ClearBatch : unit -&gt; unit" Usage="dbDataAdapter.ClearBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Удаляет все объекты <see cref="T:System.Data.IDbCommand" /> из пакета.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В <xref:System.Data.Common.DbDataAdapter>этот метод создает исключение <xref:System.NotSupportedException>. Классы, наследующие <xref:System.Data.Common.DbDataAdapter> от переопределения этого метода, обеспечивают поддержку пакетов.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Адаптер не поддерживает пакеты.</exception>
        <block subset="none" type="overrides"><para>Этот метод защищен и предназначен для использования .NET Framework поставщиком данных.  
  
Если класс, наследующий от <see cref="T:System.Data.Common.DbDataAdapter" /> , поддерживает пакеты, этот класс переопределяет этот метод, чтобы разрешить пользователям удалять все команды из пакета.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatedEvent">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::RowUpdatedEventArgs ^ CreateRowUpdatedEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member CreateRowUpdatedEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatedEventArgs&#xA;override this.CreateRowUpdatedEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatedEventArgs" Usage="dbDataAdapter.CreateRowUpdatedEvent (dataRow, command, statementType, tableMapping)" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="protected abstract System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Data::Common::RowUpdatedEventArgs ^ CreateRowUpdatedEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="abstract member CreateRowUpdatedEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatedEventArgs" Usage="dbDataAdapter.CreateRowUpdatedEvent (dataRow, command, statementType, tableMapping)" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatedEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow">Объект <see cref="T:System.Data.DataRow" />, использованный для обновления источника данных.</param>
        <param name="command">Интерфейс <see cref="T:System.Data.IDbCommand" /> выполняется во время использования метода <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />.</param>
        <param name="statementType">Является ли команда оператором UPDATE, INSERT, DELETE или SELECT.</param>
        <param name="tableMapping">Объект <see cref="T:System.Data.Common.DataTableMapping" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Common.RowUpdatedEventArgs" />.</summary>
        <returns>Новый экземпляр класса <see cref="T:System.Data.Common.RowUpdatedEventArgs" />.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>При переопределении <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> в производном классе обязательно вызовите <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> метод базового класса.</para></block>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatingEvent">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::RowUpdatingEventArgs ^ CreateRowUpdatingEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member CreateRowUpdatingEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatingEventArgs&#xA;override this.CreateRowUpdatingEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatingEventArgs" Usage="dbDataAdapter.CreateRowUpdatingEvent (dataRow, command, statementType, tableMapping)" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="protected abstract System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Data::Common::RowUpdatingEventArgs ^ CreateRowUpdatingEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="abstract member CreateRowUpdatingEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatingEventArgs" Usage="dbDataAdapter.CreateRowUpdatingEvent (dataRow, command, statementType, tableMapping)" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatingEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow">Объект <see cref="T:System.Data.DataRow" />, который обновляет источник данных.</param>
        <param name="command">Интерфейс <see cref="T:System.Data.IDbCommand" /> для выполнения при применении метода <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />.</param>
        <param name="statementType">Является ли команда оператором UPDATE, INSERT, DELETE или SELECT.</param>
        <param name="tableMapping">Объект <see cref="T:System.Data.Common.DataTableMapping" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Common.RowUpdatingEventArgs" />.</summary>
        <returns>Новый экземпляр класса <see cref="T:System.Data.Common.RowUpdatingEventArgs" />.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>При переопределении <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> в производном классе обязательно вызовите <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> метод базового класса.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultSourceTableName">
      <MemberSignature Language="C#" Value="public const string DefaultSourceTableName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DefaultSourceTableName" />
      <MemberSignature Language="DocId" Value="F:System.Data.Common.DbDataAdapter.DefaultSourceTableName" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultSourceTableName As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ DefaultSourceTableName;" />
      <MemberSignature Language="F#" Value="val mutable DefaultSourceTableName : string" Usage="System.Data.Common.DbDataAdapter.DefaultSourceTableName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Имя по умолчанию, используемое объектом <see cref="T:System.Data.Common.DataAdapter" /> для сопоставлений таблиц.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 "Table" — это имя по умолчанию, <xref:System.Data.Common.DataAdapter> используемое объектом для сопоставления таблиц.  
  
 <xref:System.Data.Common.DbDataAdapter.DefaultSourceTableName>имеет значение, когда приложение добавляет сопоставление таблицы для использования с <xref:System.Data.Common.DbDataAdapter.Fill%2A>, но не <xref:System.Data.DataTable> задает имя.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.DeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ DeleteCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.DeleteCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает команду для удаления записей из набора данных.</summary>
        <value>Интерфейс <see cref="T:System.Data.IDbCommand" />, используемый во время применения метода <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> для удаления записей в источнике данных, соответствующих удаленным строкам в наборе данных.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В случае <xref:System.Data.DataSet> <xref:System.Data.IDbDataAdapter.DeleteCommand%2A> , если это свойство не задано и сведения о первичном ключе имеются в, автоматически создается. <xref:System.Data.Common.DbDataAdapter.Update%2A>  
  
   
  
## Examples  
 В следующем примере создается производный класс <xref:System.Data.OleDb.OleDbDataAdapter> и задаются некоторые его свойства.  
  
 [!code-csharp[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Обработка данных (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="dbDataAdapter.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">Значение <see langword="true" /> позволяет освободить управляемые и неуправляемые ресурсы; значение <see langword="false" /> позволяет освободить только неуправляемые ресурсы.</param>
        <summary>Освобождает неуправляемые ресурсы, используемые объектом <see cref="T:System.Data.Common.DbDataAdapter" />, а при необходимости освобождает также управляемые ресурсы.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ExecuteBatch">
      <MemberSignature Language="C#" Value="protected virtual int ExecuteBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 ExecuteBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.ExecuteBatch" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ExecuteBatch () As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int ExecuteBatch();" />
      <MemberSignature Language="F#" Value="abstract member ExecuteBatch : unit -&gt; int&#xA;override this.ExecuteBatch : unit -&gt; int" Usage="dbDataAdapter.ExecuteBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Выполняет текущий пакет.</summary>
        <returns>Возвращает значение из последней команды в пакете.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В <xref:System.Data.Common.DbDataAdapter>этот метод создает исключение <xref:System.NotSupportedException>. Классы, наследующие <xref:System.Data.Common.DbDataAdapter> от переопределения этого метода, обеспечивают поддержку пакетов.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Этот метод защищен и предназначен для использования .NET Framework поставщиком данных.  
  
Если класс, наследующий от <see cref="T:System.Data.Common.DbDataAdapter" /> , поддерживает пакеты, этот класс переопределяет этот метод, чтобы разрешить пользователям выполнять пакет. Реализация этого метода объединяет команды в адаптере в пакет, затем выполняет пакет и возвращает возвращаемое значение пакета.</para></block>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Обработка данных (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Fill">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Заполняет объект <see cref="T:System.Data.DataSet" /> или объект <see cref="T:System.Data.DataTable" />.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public override int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet -&gt; int" Usage="dbDataAdapter.Fill dataSet" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.Fill(System.Data.DataSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">Объект <see cref="T:System.Data.DataSet" /> для заполнения записями и, если необходимо, — схемой.</param>
        <summary>Добавляет или обновляет строки в объекте <see cref="T:System.Data.DataSet" />.</summary>
        <returns>Количество строк, успешно добавленных или обновленных в объекте <see cref="T:System.Data.DataSet" />. Не включает строки, на которые воздействуют операторы, не возвращающие строк.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> Метод получает данные из источника данных с помощью инструкции SELECT. <xref:System.Data.IDbConnection> Объект, связанный с командой SELECT, должен быть допустимым, но не должен быть открытым. Если объект <xref:System.Data.IDbConnection> закрыт до <xref:System.Data.Common.DbDataAdapter.Fill%2A> вызова метода, он открывается для получения данных и затем закрывается. Если соединение открыто до <xref:System.Data.Common.DbDataAdapter.Fill%2A> вызова метода, оно остается открытым.  
  
 Если при заполнении таблиц данных возникла ошибка или исключение, то строки, добавленные до возникновения ошибки, остаются в таблицах данных. Оставшаяся часть операции прервана.  
  
 Если команда не возвращает ни одной строки, никакие таблицы не добавляются в <xref:System.Data.DataSet>, а исключение не возникает.  
  
 ** <xref:System.Data.DataTable>**** Если объект встречает дублирующиеся столбцы при заполнении, он создает имена для последующих столбцов с помощью шаблона "ColumnName 1", "ColumnName 2", "ColumnName 3" и т. д. <xref:System.Data.Common.DbDataAdapter> Если входящие данные содержат безымянные столбцы, они помещаются в в <xref:System.Data.DataSet> соответствии с шаблоном «Столбец1», «Столбец2» и т. д.  
  
 Если указанный запрос возвращает несколько результатов, результирующий набор для каждого запроса, возвращающего строку, помещается в отдельную таблицу. Дополнительные результирующие наборы именуются путем добавления целочисленных значений к заданному имени таблицы (например, "Table", "table1", "Table2" и т. д.). Поскольку таблица не создается для запроса, который не возвращает строки, при обработке запроса INSERT, за которым следует запрос SELECT, таблица, созданная для запроса SELECT, будет называться "Таблица", так как это первая созданная таблица. Приложения, использующие имена столбцов и таблиц, должны гарантировать, что конфликты с этими шаблонами именования не происходят.  
  
 Если инструкция SELECT, используемая для заполнения <xref:System.Data.DataSet> , возвращает несколько результатов, например инструкции SQL Batch, если один из результатов содержит ошибку, все последующие результаты пропускаются и не добавляются <xref:System.Data.DataSet>в.  
  
 При использовании последующих <xref:System.Data.Common.DbDataAdapter.Fill%2A> вызовов для обновления содержимого <xref:System.Data.DataSet>компонента должны быть выполнены два условия.  
  
1.  Инструкция SQL должна соответствовать той, которая изначально использовалась для заполнения <xref:System.Data.DataSet>.  
  
2.  Необходимо указать сведения о **ключевом** столбце.  
  
 Если сведения о первичном ключе присутствуют, то все дублирующиеся строки согласовываются и появляются <xref:System.Data.DataTable> только один раз в <xref:System.Data.DataSet>, соответствующем. Сведения о первичном ключе можно задать <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>либо с помощью, <xref:System.Data.DataTable.PrimaryKey%2A> указав свойство объекта <xref:System.Data.DataTable>, либо задав <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> для `AddWithKey`свойства значение.  
  
 Если `SelectCommand` возвращает результаты OUTER JOIN, то `DataAdapter` не задает значение <xref:System.Data.DataTable.PrimaryKey%2A> для результирующего объекта <xref:System.Data.DataTable>. Необходимо явно определить первичный ключ, чтобы гарантировать правильное разрешение повторяющихся строк. Дополнительные сведения см. в разделе [Определение первичных ключей](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  При обработке инструкций SQL пакетной службы, возвращающих несколько результатов <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> , реализация для .NET Framework поставщика данных для OLE DB получает сведения о схеме только для первого результата. Чтобы получить сведения о схеме для нескольких результатов, <xref:System.Data.Common.DbDataAdapter.Fill%2A> используйте <xref:System.Data.MissingSchemaAction> с `AddWithKey`параметром, равным.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataTable dataTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataTable dataTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataTable ^ dataTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable -&gt; int" Usage="dbDataAdapter.Fill dataTable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="dataTable">Имя объекта <see cref="T:System.Data.DataTable" />, используемое для сопоставления таблицы.</param>
        <summary>Добавляет или обновляет строки в указанном диапазоне в объект <see cref="T:System.Data.DataSet" /> для получения соответствия строкам в источнике данных с использованием имени <see cref="T:System.Data.DataTable" />.</summary>
        <returns>Количество строк, успешно добавленных или обновленных в объекте <see cref="T:System.Data.DataSet" />. Не включает строки, на которые воздействуют операторы, не возвращающие строк.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод получает строки из источника данных с помощью инструкции SELECT, заданной связанным <xref:System.Data.IDbDataAdapter.SelectCommand%2A> свойством. <xref:System.Data.Common.DbDataAdapter.Fill%2A> Объект соединения, связанный с инструкцией SELECT, должен быть допустимым, но не должен быть открытым. Если соединение закрывается до <xref:System.Data.Common.DbDataAdapter.Fill%2A> вызова метода, оно открывается для получения данных, а затем закрывается. Если соединение открыто до <xref:System.Data.Common.DbDataAdapter.Fill%2A> вызова метода, оно остается открытым.  
  
 Затем операция добавляет строки в целевые <xref:System.Data.DataTable> объекты <xref:System.Data.DataTable> в <xref:System.Data.DataSet>, создавая объекты, если они еще не существуют. <xref:System.Data.Common.DbDataAdapter.Fill%2A> При создании <xref:System.Data.DataTable> объектов <xref:System.Data.Common.DbDataAdapter.Fill%2A> операция обычно создает только метаданные имени столбца. Однако если <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> свойство имеет `AddWithKey`значение, то также создаются соответствующие первичные ключи и ограничения.  
  
 ** <xref:System.Data.DataTable>**** Если обнаруживает дублированные столбцы при заполнении, он создает имена для последующих столбцов с использованием шаблона "ColumnName 1", "ColumnName 2", "ColumnName 3" и т. д. <xref:System.Data.Common.DbDataAdapter> Если входящие данные содержат безымянные столбцы, они помещаются в в <xref:System.Data.DataSet> соответствии с шаблоном «Столбец1», «Столбец2» и т. д. При добавлении <xref:System.Data.DataSet> нескольких результирующих наборов в каждый результирующий набор помещается в отдельную таблицу.  
  
 Перегрузка <xref:System.Data.Common.DbDataAdapter.Fill%2A> , которая принимает `DataTable` в качестве параметра, получает только первый результат. Используйте перегрузку <xref:System.Data.Common.DbDataAdapter.Fill%2A> , которая `DataSet` принимает в качестве параметра получение нескольких результатов.  
  
 Метод поддерживает сценарии, в которых <xref:System.Data.DataSet> объект содержит <xref:System.Data.DataTable> несколько объектов, имена которых отличаются только регистром. <xref:System.Data.Common.DbDataAdapter.Fill%2A> В таких ситуациях <xref:System.Data.Common.DbDataAdapter.Fill%2A> выполняет сравнение с учетом регистра для поиска соответствующей таблицы и создает новую таблицу, если точное совпадение не существует. Это поведение C# демонстрируется в следующем коде.  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
 dataset.Tables.Add("AAA");  
 adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
    adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Если <xref:System.Data.Common.DbDataAdapter.Fill%2A> вызывается <xref:System.Data.DataSet> и содержит только те <xref:System.Data.DataTable> , имя которых отличается от имени только регистром <xref:System.Data.DataTable> , то обновляется. В этом сценарии сравнение выполняется без учета регистра. Это поведение C# демонстрируется в следующем коде.  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
    adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> Метод можно использовать несколько раз для одного и того же <xref:System.Data.DataTable>. Если первичный ключ существует, входящие строки объединяются с совпадающими строками, которые уже существуют. Если первичный ключ не существует, входящие строки добавляются к <xref:System.Data.DataTable>.  
  
 Если `SelectCommand` возвращает результаты OUTER JOIN, то `DataAdapter` не задает значение <xref:System.Data.DataTable.PrimaryKey%2A> для результирующего объекта <xref:System.Data.DataTable>. Необходимо явно определить первичный ключ, чтобы гарантировать правильное разрешение повторяющихся строк. Дополнительные сведения см. в разделе [Определение первичных ключей](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  При обработке инструкций SQL пакетной службы, возвращающих несколько результатов <xref:System.Data.Common.DbDataAdapter.Fill%2A> , <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> реализация и для .NET Framework поставщик данных получает сведения о схеме только для первого результата.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Исходная таблица является недопустимой.</exception>
        <block subset="none" type="overrides"><para>Эта перегрузка <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" /> метода защищена и разработана для использования .NET Framework поставщиком данных.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataSet dataSet, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * string -&gt; int" Usage="dbDataAdapter.Fill (dataSet, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">Объект <see cref="T:System.Data.DataSet" /> для заполнения записями и, если необходимо, — схемой.</param>
        <param name="srcTable">Имя исходной таблицы, используемое для сопоставления таблицы.</param>
        <summary>Добавляет или обновляет строки в объекте <see cref="T:System.Data.DataSet" /> для получения соответствия строкам в источнике данных с помощью имен <see cref="T:System.Data.DataSet" /> и <see cref="T:System.Data.DataTable" />.</summary>
        <returns>Количество строк, успешно добавленных или обновленных в объекте <see cref="T:System.Data.DataSet" />. Не включает строки, на которые воздействуют операторы, не возвращающие строк.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> Метод получает данные из источника данных с помощью инструкции SELECT. <xref:System.Data.IDbConnection> Объект, связанный с командой SELECT, должен быть допустимым, но не должен быть открытым. Если объект <xref:System.Data.IDbConnection> закрыт до <xref:System.Data.Common.DbDataAdapter.Fill%2A> вызова метода, он открывается для получения данных, а затем закрывается. Если соединение открыто до <xref:System.Data.Common.DbDataAdapter.Fill%2A> вызова метода, оно остается открытым.  
  
 Если команда не возвращает ни одной строки, никакие таблицы не добавляются в <xref:System.Data.DataSet>, а исключение не возникает.  
  
 Если объект встречает дублирующиеся столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последующих столбцов, используя шаблон "columnName1", "columnName2", "columnname3" и т. д. <xref:System.Data.Common.DbDataAdapter> Если входящие данные содержат безымянные столбцы, они помещаются в в <xref:System.Data.DataSet> соответствии с шаблоном «Столбец1», «Столбец2» и т. д.  
  
 Если указанный запрос возвращает несколько результатов, каждый результирующий набор помещается в отдельную таблицу. Дополнительные результирующие наборы именуются путем добавления целочисленных значений к заданному имени таблицы (например, "Table", "table1", "Table2" и т. д.). Поскольку таблица не создается для запроса, который не возвращает строки, то если бы был обработан запрос INSERT, а затем запрос SELECT, то таблица, созданная для запроса SELECT, будет называться «Table», поскольку это первая созданная таблица. Приложения, использующие имена столбцов и таблиц, должны гарантировать, что конфликты с этими шаблонами именования не происходят.  
  
 Метод поддерживает сценарии, в которых <xref:System.Data.DataSet> объект содержит <xref:System.Data.DataTable> несколько объектов, имена которых отличаются только регистром. <xref:System.Data.Common.DbDataAdapter.Fill%2A> В таких ситуациях <xref:System.Data.Common.DbDataAdapter.Fill%2A> выполняет сравнение с учетом регистра для поиска соответствующей таблицы и создает новую таблицу, если точное совпадение не существует. Это поведение C# демонстрируется в следующем коде.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Если <xref:System.Data.Common.DbDataAdapter.Fill%2A> вызывается <xref:System.Data.DataSet> и содержит только те <xref:System.Data.DataTable> , имя которых отличается от имени только регистром <xref:System.Data.DataTable> , то обновляется. В этом сценарии сравнение выполняется без учета регистра. Это поведение C# демонстрируется в следующем коде.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Если при заполнении таблиц данных возникла ошибка или исключение, то строки, добавленные до возникновения ошибки, остаются в таблицах данных. Оставшаяся часть операции прервана.  
  
 Если инструкция SELECT, используемая для заполнения <xref:System.Data.DataSet> , возвращает несколько результатов, например инструкцию SQL Batch, следует учитывать следующее:  
  
-   Если один из результатов содержит ошибку, все последующие результаты пропускаются и не добавляются в <xref:System.Data.DataSet>.  
  
 При использовании последующих <xref:System.Data.Common.DbDataAdapter.Fill%2A> вызовов для обновления содержимого <xref:System.Data.DataSet>компонента должны быть выполнены два условия.  
  
1.  Инструкция SQL должна соответствовать той, которая изначально использовалась для заполнения <xref:System.Data.DataSet>.  
  
2.  Необходимо указать сведения о **ключевом** столбце. Если сведения о первичном ключе присутствуют, то все дублирующиеся строки согласовываются и появляются <xref:System.Data.DataTable> только один раз в <xref:System.Data.DataSet>, соответствующем. Сведения о первичном ключе можно задать <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>либо с помощью, <xref:System.Data.DataTable.PrimaryKey%2A> указав свойство объекта <xref:System.Data.DataTable>, либо задав <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> для `AddWithKey`свойства значение.  
  
 Если `SelectCommand` возвращает результаты OUTER JOIN, то `DataAdapter` не задает значение <xref:System.Data.DataTable.PrimaryKey%2A> для результирующего объекта <xref:System.Data.DataTable>. Необходимо явно определить первичный ключ, чтобы гарантировать правильное разрешение повторяющихся строк. Дополнительные сведения см. в разделе [Определение первичных ключей](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  При обработке инструкций SQL пакетной службы, возвращающих несколько результатов <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> , реализация для .NET Framework поставщика данных для OLE DB получает сведения о схеме только для первого результата. Чтобы получить сведения о схеме для нескольких результатов, <xref:System.Data.Common.DbDataAdapter.Fill%2A> используйте <xref:System.Data.MissingSchemaAction> с `AddWithKey`параметром, равным.  
  
   
  
## Examples  
 В следующем примере производный класс <xref:System.Data.OleDb.OleDbDataAdapter>используется для <xref:System.Data.DataSet> заполнения со строками из таблицы Categories. <xref:System.Data.OleDb.OleDbDataAdapter> В<xref:System.Data.DataSet>этом примере предполагается, что вы создали и.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Fill2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Fill2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">Исходная таблица является недопустимой.</exception>
        <block subset="none" type="overrides"><para>При переопределении <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> в производном классе обязательно вызовите <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> метод базового класса.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDataReader dataReader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable dataTable, class System.Data.IDataReader dataReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataTable ^ dataTable, System::Data::IDataReader ^ dataReader);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable * System.Data.IDataReader -&gt; int" Usage="dbDataAdapter.Fill (dataTable, dataReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="dataReader" Type="System.Data.IDataReader" Index="1" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="dataTable">Объект <see cref="T:System.Data.DataTable" /> для заполнения записями и, если необходимо, — схемой.</param>
        <param name="dataReader">Имя <see cref="T:System.Data.IDataReader" />.</param>
        <summary>Добавляет или обновляет строки в объекте <see cref="T:System.Data.DataTable" /> для получения соответствия строкам в источнике данных с помощью указанных имен <see cref="T:System.Data.DataTable" /> и <see cref="T:System.Data.IDataReader" />.</summary>
        <returns>Количество строк, успешно добавленных или обновленных в объекте <see cref="T:System.Data.DataTable" />. Не включает строки, на которые воздействуют операторы, не возвращающие строк.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable dataTable, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataTable ^ dataTable, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataTable, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTable">Объект <see cref="T:System.Data.DataTable" /> для заполнения записями и, если необходимо, — схемой.</param>
        <param name="command">Оператор SQL SELECT используется для извлечения строки из источника данных.</param>
        <param name="behavior">Одно из значений перечисления <see cref="T:System.Data.CommandBehavior" />.</param>
        <summary>Добавляет или обновляет строки в объекте <see cref="T:System.Data.DataTable" /> для получения соответствия строкам в источнике данных с помощью указанного объекта <see cref="T:System.Data.DataTable" />, интерфейса <see cref="T:System.Data.IDbCommand" /> и значения типа <see cref="T:System.Data.CommandBehavior" />.</summary>
        <returns>Количество строк, успешно добавленных или обновленных в объекте <see cref="T:System.Data.DataTable" />. Не включает строки, на которые воздействуют операторы, не возвращающие строк.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод получает строки из источника данных с помощью инструкции SELECT, заданной связанным <xref:System.Data.IDbDataAdapter.SelectCommand%2A> свойством. <xref:System.Data.Common.DbDataAdapter.Fill%2A> Объект соединения, связанный с инструкцией SELECT, должен быть допустимым, но не должен быть открытым. Если соединение закрывается до <xref:System.Data.Common.DbDataAdapter.Fill%2A> вызова метода, оно открывается для получения данных и затем закрывается. Если соединение открыто до <xref:System.Data.Common.DbDataAdapter.Fill%2A> вызова метода, оно остается открытым.  
  
 Затем операция добавляет строки в указанный целевой <xref:System.Data.DataTable> объект <xref:System.Data.DataTable> в <xref:System.Data.DataSet>, создавая объект, если он еще не существует. <xref:System.Data.Common.DbDataAdapter.Fill%2A> При создании <xref:System.Data.DataTable> объекта <xref:System.Data.Common.DbDataAdapter.Fill%2A> операция обычно создает только метаданные имени столбца. Однако если <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> свойство имеет `AddWithKey`значение, то также создаются соответствующие первичные ключи и ограничения.  
  
 ** <xref:System.Data.DataTable>**** Если объект встречает дублирующиеся столбцы при заполнении, он создает имена для последующих столбцов, используя шаблон "ColumnName 1", "ColumnName 2", "ColumnName 3" и т. д. <xref:System.Data.Common.DbDataAdapter> Если входящие данные содержат безымянные столбцы, они помещаются в в <xref:System.Data.DataSet> соответствии с шаблоном «Столбец1», «Столбец2» и т. д.  
  
 Перегрузка <xref:System.Data.Common.DbDataAdapter.Fill%2A> , которая принимает `DataTable` в качестве параметра, получает только первый результат. Используйте перегрузку <xref:System.Data.Common.DbDataAdapter.Fill%2A> , которая `DataSet` принимает в качестве параметра получение нескольких результатов.  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> Метод можно использовать несколько раз для одного и того же <xref:System.Data.DataTable>. Если первичный ключ существует, входящие строки объединяются с совпадающими строками, которые уже существуют. Если первичный ключ не существует, входящие строки добавляются к <xref:System.Data.DataTable>.  
  
 Если `SelectCommand` возвращает результаты OUTER JOIN, то `DataAdapter` не задает значение <xref:System.Data.DataTable.PrimaryKey%2A> для результирующего объекта <xref:System.Data.DataTable>. Необходимо явно определить первичный ключ, чтобы гарантировать правильное разрешение повторяющихся строк. Дополнительные сведения см. в разделе [Определение первичных ключей](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  При обработке инструкций SQL пакетной службы, возвращающих несколько результатов <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> , реализация для .NET Framework поставщика данных для OLE DB получает сведения о схеме только для первого результата. Чтобы получить сведения о схеме для нескольких результатов, <xref:System.Data.Common.DbDataAdapter.Fill%2A> используйте <xref:System.Data.MissingSchemaAction> с `AddWithKey`параметром, равным.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Эта перегрузка <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" /> метода защищена и разработана для использования .NET Framework поставщиком данных.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (int startRecord, int maxRecords, params System.Data.DataTable[] dataTables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(int32 startRecord, int32 maxRecords, class System.Data.DataTable[] dataTables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Fill (startRecord As Integer, maxRecords As Integer, ParamArray dataTables As DataTable()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(int startRecord, int maxRecords, ... cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables);" />
      <MemberSignature Language="F#" Value="override this.Fill : int * int * System.Data.DataTable[] -&gt; int" Usage="dbDataAdapter.Fill (startRecord, maxRecords, dataTables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startRecord" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="maxRecords" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="dataTables" Type="System.Data.DataTable[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-2.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startRecord">Номер записи (с нуля), с которой необходимо начать.</param>
        <param name="maxRecords">Максимальное число извлекаемых записей.</param>
        <param name="dataTables">Объект <see cref="T:System.Data.DataTable" /> для заполнения из источника данных.</param>
        <summary>Добавляет или обновляет строки в объекте <see cref="T:System.Data.DataTable" /> для получения соответствия строкам в источнике данных, начиная с указанной записи и вплоть до заданного максимального количества получаемых записей.</summary>
        <returns>Количество строк, успешно добавленных или обновленных в объекте <see cref="T:System.Data.DataTable" />. Это значение не включает строки, на которые воздействуют операторы, не возвращающие строк.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод получает строки из источника данных с помощью инструкции SELECT, заданной связанным <xref:System.Data.IDbDataAdapter.SelectCommand%2A> свойством. <xref:System.Data.Common.DataAdapter.Fill%2A> Объект соединения, связанный с инструкцией SELECT, должен быть допустимым, но не должен быть открытым. Если соединение закрывается до <xref:System.Data.Common.DataAdapter.Fill%2A> вызова метода, оно открывается для получения данных, после чего оно закрывается. Если соединение открыто до <xref:System.Data.Common.DataAdapter.Fill%2A> вызова метода, оно остается открытым.  
  
 Затем операция добавляет строки в целевые <xref:System.Data.DataTable> объекты <xref:System.Data.DataTable> в <xref:System.Data.DataSet>, создавая объекты, если они еще не существуют. <xref:System.Data.Common.DataAdapter.Fill%2A> При создании <xref:System.Data.DataTable> объектов <xref:System.Data.Common.DataAdapter.Fill%2A> операция обычно создает только метаданные имени столбца. Однако если <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> свойство имеет `AddWithKey`значение, то также создаются соответствующие первичные ключи и ограничения.  
  
 Если `SelectCommand` возвращает результаты OUTER JOIN, то `DataAdapter` не задает значение <xref:System.Data.DataTable.PrimaryKey%2A> для результирующего объекта <xref:System.Data.DataTable>. Необходимо явно определить первичный ключ, чтобы гарантировать правильное разрешение повторяющихся строк. Дополнительные сведения см. в разделе [Определение первичных ключей](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
 Если адаптер данных встречает дублирующиеся столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последующих столбцов, используя шаблон "columnName1", "columnName2", "columnname3" и т. д. Если входящие данные содержат безымянные столбцы, они помещаются в в <xref:System.Data.DataSet> соответствии с шаблоном «Столбец1», «Столбец2» и т. д. При добавлении <xref:System.Data.DataSet>нескольких результирующих наборов в каждый результирующий набор помещается в отдельную таблицу. Дополнительные результирующие наборы именуются путем добавления целочисленных значений к заданному имени таблицы (например, "Table", "table1", "Table2" и т. д.). Приложения, использующие имена столбцов и таблиц, должны гарантировать, что конфликты с этими шаблонами именования не происходят.  
  
 Если инструкция SELECT, используемая для заполнения <xref:System.Data.DataSet> , возвращает несколько результатов, например инструкции SQL Batch, если один из результатов содержит ошибку, все последующие результаты пропускаются и не добавляются <xref:System.Data.DataSet>в.  
  
 <xref:System.Data.Common.DataAdapter.Fill%2A> Метод можно использовать несколько раз для одного и того же <xref:System.Data.DataTable>. Если первичный ключ существует, входящие строки объединяются с совпадающими строками, которые уже существуют. Если первичный ключ не существует, входящие строки добавляются к <xref:System.Data.DataTable>.  
  
> [!NOTE]
>  При обработке инструкций SQL пакетной службы, возвращающих несколько результатов <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> , реализация для .NET Framework поставщика данных для OLE DB получает сведения о схеме только для первого результата. Чтобы получить сведения о схеме для нескольких результатов, <xref:System.Data.Common.DbDataAdapter.Fill%2A> используйте <xref:System.Data.MissingSchemaAction> с `AddWithKey`параметром, равным.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataSet dataSet, int32 startRecord, int32 maxRecords, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet, int startRecord, int maxRecords, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * int * int * string -&gt; int" Usage="dbDataAdapter.Fill (dataSet, startRecord, maxRecords, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">Объект <see cref="T:System.Data.DataSet" /> для заполнения записями и, если необходимо, — схемой.</param>
        <param name="startRecord">Номер записи (с нуля), с которой необходимо начать.</param>
        <param name="maxRecords">Максимальное число извлекаемых записей.</param>
        <param name="srcTable">Имя исходной таблицы, используемое для сопоставления таблицы.</param>
        <summary>Добавляет или обновляет строки в указанном диапазоне в объект <see cref="T:System.Data.DataSet" /> для получения соответствия строкам в источнике данных с использованием имен <see cref="T:System.Data.DataSet" /> и <see cref="T:System.Data.DataTable" />.</summary>
        <returns>Количество строк, успешно добавленных или обновленных в объекте <see cref="T:System.Data.DataSet" />. Не включает строки, на которые воздействуют операторы, не возвращающие строк.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `maxRecords` Значение 0 получает все записи, найденные после начальной записи. Если `maxRecords` значение больше числа оставшихся строк, возвращаются только оставшиеся строки и не выдается сообщение об ошибке.  
  
 Если соответствующая команда SELECT является инструкцией, возвращающей <xref:System.Data.Common.DbDataAdapter.Fill%2A> несколько результатов `maxRecords` , применяется только к первому результату.  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> Метод получает данные из источника данных с помощью инструкции SELECT. <xref:System.Data.IDbConnection> Объект, связанный с инструкцией SELECT, должен быть допустимым, но не должен быть открытым. Если объект <xref:System.Data.IDbConnection> закрыт до <xref:System.Data.Common.DbDataAdapter.Fill%2A> вызова метода, он открывается для получения данных и затем закрывается. Если соединение открыто до <xref:System.Data.Common.DbDataAdapter.Fill%2A> вызова метода, оно остается открытым.  
  
 Если команда не возвращает ни одной строки, в объект <xref:System.Data.DataSet>не добавляются никакие таблицы, но исключение не создается.  
  
 ** <xref:System.Data.DataTable>**** Если объект встречает дублирующиеся столбцы при заполнении, он создает имена для последующих столбцов, используя шаблон "ColumnName 1", "ColumnName 2", "ColumnName 3" и т. д. <xref:System.Data.Common.DbDataAdapter> Если входящие данные содержат безымянные столбцы, они помещаются в в <xref:System.Data.DataSet> соответствии с шаблоном «Столбец1», «Столбец2» и т. д.  
  
 Если указанный запрос возвращает несколько результатов, каждый результирующий набор помещается в отдельную таблицу. Дополнительные результирующие наборы именуются путем добавления целочисленных значений к заданному имени таблицы (например, "Table", "table1", "Table2" и т. д.). Поскольку таблица не создается для запроса, не возвращающего строк, при обработке запроса INSERT, за которым следует запрос SELECT, таблица, созданная для запроса SELECT, называется «таблица», поскольку это первая созданная таблица. Приложения, использующие имена столбцов и таблиц, должны гарантировать, что конфликты с этими шаблонами именования не происходят.  
  
 Метод поддерживает сценарии, в которых <xref:System.Data.DataSet> объект содержит <xref:System.Data.DataTable> несколько объектов, имена которых отличаются только регистром. <xref:System.Data.Common.DbDataAdapter.Fill%2A> В таких ситуациях <xref:System.Data.Common.DbDataAdapter.Fill%2A> выполняет сравнение с учетом регистра для поиска соответствующей таблицы и создает новую таблицу, если точное совпадение не существует. Это поведение C# демонстрируется в следующем коде.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Если <xref:System.Data.Common.DbDataAdapter.Fill%2A> вызывается <xref:System.Data.DataSet> и содержит только те <xref:System.Data.DataTable> , имя которых отличается от имени только регистром <xref:System.Data.DataTable> , то обновляется. В этом сценарии сравнение выполняется без учета регистра. Это поведение C# демонстрируется в следующем коде.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Если при заполнении таблиц данных возникла ошибка или исключение, то строки, добавленные до возникновения ошибки, остаются в таблицах данных. Оставшаяся часть операции прервана.  
  
 Если инструкция SELECT, используемая для заполнения <xref:System.Data.DataSet> , возвращает несколько результатов, например инструкции пакетной службы SQL, следует учитывать следующее:  
  
-   При обработке нескольких результатов в пакетной инструкции `maxRecords` SQL применяется только к первому результату. Это справедливо и для строк, содержащих разбитые на разделы результаты (.NET Framework поставщик данных только для OLE DB). Результат верхнего уровня ограничен `maxRecords`, но добавляются все дочерние строки.  
  
-   Если один из результатов содержит ошибку, все последующие результаты пропускаются и не добавляются в <xref:System.Data.DataSet>.  
  
 При использовании последующих <xref:System.Data.Common.DbDataAdapter.Fill%2A> вызовов для обновления содержимого <xref:System.Data.DataSet>компонента должны быть выполнены два условия.  
  
1.  Инструкция SQL должна соответствовать той, которая изначально использовалась для заполнения <xref:System.Data.DataSet>.  
  
2.  Необходимо указать сведения о **ключевом** столбце.  
  
 Если сведения о первичном ключе присутствуют, то все дублирующиеся строки будут выверены и <xref:System.Data.DataTable> появятся только один <xref:System.Data.DataSet>раз в, соответствующем. Сведения о первичном ключе можно задать <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>либо с помощью, <xref:System.Data.DataTable.PrimaryKey%2A> указав свойство объекта <xref:System.Data.DataTable>, либо задав <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> для `AddWithKey`свойства значение.  
  
 Если `SelectCommand` возвращает результаты OUTER JOIN, то `DataAdapter` не задает значение <xref:System.Data.DataTable.PrimaryKey%2A> для результирующего объекта <xref:System.Data.DataTable>. Необходимо явно определить первичный ключ, чтобы гарантировать правильное разрешение повторяющихся строк. Дополнительные сведения см. в разделе [Определение первичных ключей](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  При обработке инструкций SQL пакетной службы, возвращающих несколько результатов <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> , реализация для .NET Framework поставщика данных для OLE DB получает сведения о схеме только для первого результата. Чтобы получить сведения о схеме для нескольких результатов, <xref:System.Data.Common.DbDataAdapter.Fill%2A> используйте <xref:System.Data.MissingSchemaAction> с `AddWithKey`параметром, равным.  
  
> [!NOTE]
>  Не будет содержать число записей, указанное в параметре `maxRecords`. `DataSet` Однако весь результирующий набор, сформированный запросом, по-прежнему возвращается с сервера.  
  
   
  
## Examples  
 В следующем примере производный класс <xref:System.Data.OleDb.OleDbDataAdapter>используется для <xref:System.Data.DataSet> заполнения с 15 строками, начиная со строки 10, из таблицы **Categories** . <xref:System.Data.OleDb.OleDbDataAdapter> В<xref:System.Data.DataSet>этом примере предполагается, что вы создали и.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Fill3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Fill3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException"><see cref="T:System.Data.DataSet" /> не является допустимым.</exception>
        <exception cref="T:System.InvalidOperationException">Исходная таблица является недопустимой.  
  
 - или -  
  
 Подключение является недопустимым.</exception>
        <exception cref="T:System.InvalidCastException">Не удалось найти подключение.</exception>
        <exception cref="T:System.ArgumentException">Значение параметра <paramref name="startRecord" /> меньше 0.  
  
- или - 
Значение параметра <paramref name="maxRecords" /> меньше 0.</exception>
        <block subset="none" type="overrides"><para>При переопределении <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> в производном классе обязательно вызовите <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> метод базового класса.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataSet dataSet, string srcTable, System.Data.IDataReader dataReader, int startRecord, int maxRecords);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet, string srcTable, class System.Data.IDataReader dataReader, int32 startRecord, int32 maxRecords) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataSet ^ dataSet, System::String ^ srcTable, System::Data::IDataReader ^ dataReader, int startRecord, int maxRecords);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * string * System.Data.IDataReader * int * int -&gt; int" Usage="dbDataAdapter.Fill (dataSet, srcTable, dataReader, startRecord, maxRecords)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="srcTable" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="dataReader" Type="System.Data.IDataReader" Index="2" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="startRecord" Type="System.Int32" Index="3" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="maxRecords" Type="System.Int32" Index="4" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="dataSet">Объект <see cref="T:System.Data.DataSet" /> для заполнения записями и, если необходимо, — схемой.</param>
        <param name="srcTable">Имя объекта <see cref="T:System.Data.DataTable" />, используемое для сопоставления таблицы.</param>
        <param name="dataReader">Имя <see cref="T:System.Data.IDataReader" />.</param>
        <param name="startRecord">Номер записи (с нуля), с которой необходимо начать.</param>
        <param name="maxRecords">Максимальное число извлекаемых записей.</param>
        <summary>Добавляет или обновляет строки в указанном диапазоне в объект <see cref="T:System.Data.DataSet" /> для получения соответствия строкам в источнике данных с использованием имен <see cref="T:System.Data.DataSet" />, <see cref="T:System.Data.DataTable" /> и <see cref="T:System.Data.IDataReader" />.</summary>
        <returns>Количество строк, успешно добавленных или обновленных в объекте <see cref="T:System.Data.DataSet" />. Не включает строки, на которые воздействуют операторы, не возвращающие строк.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable[] dataTables, int startRecord, int maxRecords, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable[] dataTables, int32 startRecord, int32 maxRecords, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Fill (dataTables As DataTable(), startRecord As Integer, maxRecords As Integer, command As IDbCommand, behavior As CommandBehavior) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables, int startRecord, int maxRecords, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable[] * int * int * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataTables, startRecord, maxRecords, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTables" Type="System.Data.DataTable[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="startRecord" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="maxRecords" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="command" Type="System.Data.IDbCommand" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dataTables">Объект <see cref="T:System.Data.DataTable" /> для заполнения из источника данных.</param>
        <param name="startRecord">Номер записи (с нуля), с которой необходимо начать.</param>
        <param name="maxRecords">Максимальное число извлекаемых записей.</param>
        <param name="command">Интерфейс <see cref="T:System.Data.IDbCommand" />, исполняемый для заполнения объектов <see cref="T:System.Data.DataTable" />.</param>
        <param name="behavior">Одно из значений перечисления <see cref="T:System.Data.CommandBehavior" />.</param>
        <summary>Добавляет или обновляет строки в указанном диапазоне в объект <see cref="T:System.Data.DataSet" /> для получения соответствия строкам в источнике данных с использованием имен <see cref="T:System.Data.DataSet" /> и <see cref="T:System.Data.DataTable" />.</summary>
        <returns>Количество строк, успешно добавленных или обновленных в таблицах данных.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `maxRecords` Значение 0 получает все записи, найденные после начальной записи. Если `maxRecords` значение больше числа оставшихся строк, возвращаются только оставшиеся строки и не выдается сообщение об ошибке.  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> Метод получает данные из источника данных с помощью инструкции SELECT. <xref:System.Data.IDbConnection> Объект, связанный с инструкцией SELECT, должен быть допустимым, но не должен быть открытым. Если объект <xref:System.Data.IDbConnection> закрыт до <xref:System.Data.Common.DbDataAdapter.Fill%2A> вызова метода, он открывается для получения данных, а затем закрывается. Если соединение открыто до <xref:System.Data.Common.DbDataAdapter.Fill%2A> вызова метода, оно остается открытым.  
  
 Если команда не возвращает ни одной строки, в объект <xref:System.Data.DataSet>не добавляются никакие таблицы, но исключение не создается.  
  
 ** <xref:System.Data.DataTable>**** Если объект встречает дублирующиеся столбцы при заполнении, он создает имена для последующих столбцов, используя шаблон "ColumnName 1", "ColumnName 2", "ColumnName 3" и т. д. <xref:System.Data.Common.DbDataAdapter> Если входящие данные содержат безымянные столбцы, они помещаются в в <xref:System.Data.DataSet> соответствии с шаблоном «Столбец1», «Столбец2» и т. д.  
  
 Если указанный запрос возвращает несколько результатов, каждый результирующий набор помещается в отдельную таблицу. Дополнительные результирующие наборы именуются путем добавления целочисленных значений к заданному имени таблицы (например, "Table", "table1", "Table2" и т. д.). Поскольку таблица не создается для запроса, который не возвращает строки, то если бы был обработан запрос INSERT, а затем запрос SELECT, то таблица, созданная для запроса SELECT, будет называться «Table», поскольку это первая созданная таблица. Приложения, использующие имена столбцов и таблиц, должны гарантировать, что конфликты с этими шаблонами именования не происходят.  
  
 Метод поддерживает сценарии, в которых <xref:System.Data.DataSet> объект содержит <xref:System.Data.DataTable> несколько объектов, имена которых отличаются только регистром. <xref:System.Data.Common.DbDataAdapter.Fill%2A> В таких ситуациях <xref:System.Data.Common.DbDataAdapter.Fill%2A> выполняет сравнение с учетом регистра для поиска соответствующей таблицы и создает новую таблицу, если точное совпадение не существует. Это поведение C# демонстрируется в следующем коде.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Если <xref:System.Data.Common.DbDataAdapter.Fill%2A> вызывается <xref:System.Data.DataSet> и содержит только те <xref:System.Data.DataTable> , имя которых отличается от имени только регистром <xref:System.Data.DataTable> , то обновляется. В этом сценарии сравнение выполняется без учета регистра. Это поведение C# демонстрируется в следующем коде.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Если при заполнении таблиц данных возникла ошибка или исключение, то строки, добавленные до возникновения ошибки, остаются в таблицах данных. Оставшаяся часть операции прервана.  
  
 Если инструкция SELECT, используемая для заполнения <xref:System.Data.DataTable> объектов, возвращает несколько результатов, например инструкцию SQL Batch, следует учитывать следующее:  
  
-   При обработке нескольких результатов в пакетной инструкции `maxRecords` SQL применяется только к первому результату. Это справедливо и для строк, содержащих разбитые на разделы результаты (.NET Framework поставщик данных только для OLE DB). Результат верхнего уровня ограничен `maxRecords`, но добавляются все дочерние строки.  
  
-   Если один из результатов содержит ошибку, все последующие результаты пропускаются.  
  
> [!NOTE]
>  Не будет содержать число записей, указанное в параметре `maxRecords`. `DataSet` Однако весь набор результатов, сформированный запросом, по-прежнему возвращается с сервера.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException"><see cref="T:System.Data.DataSet" /> не является допустимым.</exception>
        <exception cref="T:System.InvalidOperationException">Исходная таблица является недопустимой.  
  
 - или -  
  
 Подключение является недопустимым.</exception>
        <exception cref="T:System.InvalidCastException">Не удалось найти подключение.</exception>
        <exception cref="T:System.ArgumentException">Значение параметра <paramref name="startRecord" /> меньше 0.  
  
- или - 
Значение параметра <paramref name="maxRecords" /> меньше 0.</exception>
        <block subset="none" type="overrides"><para>При переопределении <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> в производном классе обязательно вызовите <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> метод базового класса.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet, int32 startRecord, int32 maxRecords, string srcTable, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataSet ^ dataSet, int startRecord, int maxRecords, System::String ^ srcTable, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * int * int * string * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataSet, startRecord, maxRecords, srcTable, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataSet">Объект <see cref="T:System.Data.DataSet" /> для заполнения записями и, если необходимо, — схемой.</param>
        <param name="startRecord">Номер записи (с нуля), с которой необходимо начать.</param>
        <param name="maxRecords">Максимальное число извлекаемых записей.</param>
        <param name="srcTable">Имя исходной таблицы, используемое для сопоставления таблицы.</param>
        <param name="command">Оператор SQL SELECT используется для извлечения строки из источника данных.</param>
        <param name="behavior">Одно из значений перечисления <see cref="T:System.Data.CommandBehavior" />.</param>
        <summary>Добавляет или обновляет строки в указанном диапазоне в объект <see cref="T:System.Data.DataSet" /> для получения соответствия строкам в источнике данных с помощью имен <see cref="T:System.Data.DataSet" /> и исходной таблицы, командной строки и поведения команды.</summary>
        <returns>Количество строк, успешно добавленных или обновленных в объекте <see cref="T:System.Data.DataSet" />. Не включает строки, на которые воздействуют операторы, не возвращающие строк.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод получает строки из источника данных с помощью инструкции SELECT, заданной связанным <xref:System.Data.IDbDataAdapter.SelectCommand%2A> свойством. <xref:System.Data.Common.DbDataAdapter.Fill%2A> Объект соединения, связанный с инструкцией SELECT, должен быть допустимым, но не должен быть открытым. Если соединение закрывается до <xref:System.Data.Common.DbDataAdapter.Fill%2A> вызова метода, оно открывается для получения данных, а затем закрывается. Если соединение открыто до <xref:System.Data.Common.DbDataAdapter.Fill%2A> вызова метода, оно остается открытым.  
  
 Затем операция добавляет строки в целевые <xref:System.Data.DataTable> объекты <xref:System.Data.DataTable> в <xref:System.Data.DataSet>, создавая объекты, если они еще не существуют. <xref:System.Data.Common.DbDataAdapter.Fill%2A> При создании <xref:System.Data.DataTable> объектов <xref:System.Data.Common.DbDataAdapter.Fill%2A> операция обычно создает только метаданные имени столбца. Однако если <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> свойство имеет `AddWithKey`значение, то также создаются соответствующие первичные ключи и ограничения.  
  
 ** <xref:System.Data.DataTable>**** Если обнаруживает дублированные столбцы при заполнении, он создает имена для последующих столбцов с использованием шаблона "ColumnName 1", "ColumnName 2", "ColumnName 3" и т. д. <xref:System.Data.Common.DbDataAdapter> Если входящие данные содержат безымянные столбцы, они помещаются в в <xref:System.Data.DataSet> соответствии с шаблоном «Столбец1», «Столбец2» и т. д. При добавлении <xref:System.Data.DataSet> нескольких результирующих наборов в каждый результирующий набор помещается в отдельную таблицу. Дополнительные результирующие наборы именуются путем добавления целочисленных значений к заданному имени таблицы (например, "Table", "table1", "Table2" и т. д.). Приложения, использующие имена столбцов и таблиц, должны гарантировать, что конфликты с этими шаблонами именования не происходят.  
  
 Метод поддерживает сценарии, в которых <xref:System.Data.DataSet> объект содержит <xref:System.Data.DataTable> несколько объектов, имена которых отличаются только регистром. <xref:System.Data.Common.DbDataAdapter.Fill%2A> В таких ситуациях <xref:System.Data.Common.DbDataAdapter.Fill%2A> выполняет сравнение с учетом регистра для поиска соответствующей таблицы и создает новую таблицу, если точное совпадение не существует. Это поведение C# демонстрируется в следующем коде.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Если <xref:System.Data.Common.DbDataAdapter.Fill%2A> вызывается <xref:System.Data.DataSet> и содержит только те <xref:System.Data.DataTable> , имя которых отличается от имени только регистром <xref:System.Data.DataTable> , то обновляется. В этом сценарии сравнение выполняется без учета регистра. Это поведение C# демонстрируется в следующем коде.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> Метод можно использовать несколько раз для одного и того же <xref:System.Data.DataTable>. Если первичный ключ существует, входящие строки объединяются с совпадающими строками, которые уже существуют. Если первичный ключ не существует, входящие строки добавляются к <xref:System.Data.DataTable>.  
  
 Если `SelectCommand` возвращает результаты OUTER JOIN, то `DataAdapter` не задает значение <xref:System.Data.DataTable.PrimaryKey%2A> для результирующего объекта <xref:System.Data.DataTable>. Необходимо явно определить первичный ключ, чтобы гарантировать правильное разрешение повторяющихся строк. Дополнительные сведения см. в разделе [Определение первичных ключей](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  При обработке инструкций SQL пакетной службы, возвращающих несколько результатов <xref:System.Data.Common.DbDataAdapter.Fill%2A> , <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> реализация и для .NET Framework поставщик данных получает сведения о схеме только для первого результата.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Исходная таблица является недопустимой.</exception>
        <exception cref="T:System.ArgumentException">Значение параметра <paramref name="startRecord" /> меньше 0.  
  
-или- 
Значение параметра <paramref name="maxRecords" /> меньше 0.</exception>
        <block subset="none" type="overrides"><para>Эта перегрузка <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" /> метода защищена и разработана для использования .NET Framework поставщиком данных.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FillCommandBehavior">
      <MemberSignature Language="C#" Value="protected internal System.Data.CommandBehavior FillCommandBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.CommandBehavior FillCommandBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.FillCommandBehavior" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property FillCommandBehavior As CommandBehavior" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Data::CommandBehavior FillCommandBehavior { System::Data::CommandBehavior get(); void set(System::Data::CommandBehavior value); };" />
      <MemberSignature Language="F#" Value="member this.FillCommandBehavior : System.Data.CommandBehavior with get, set" Usage="System.Data.Common.DbDataAdapter.FillCommandBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.CommandBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает реакцию команды, использованной для заполнения адаптера данных.</summary>
        <value>Значение типа <see cref="T:System.Data.CommandBehavior" /> команды, использованной для заполнения адаптера данных.</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FillError">
      <MemberSignature Language="C#" Value="public event System.Data.FillErrorEventHandler FillError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.FillErrorEventHandler FillError" />
      <MemberSignature Language="DocId" Value="E:System.Data.Common.DbDataAdapter.FillError" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FillError As FillErrorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::FillErrorEventHandler ^ FillError;" />
      <MemberSignature Language="F#" Value="member this.FillError : System.Data.FillErrorEventHandler " Usage="member this.FillError : System.Data.FillErrorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DbDataAdapter_FillError")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.FillErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращается при возникновении ошибки во время работы операции заполнения.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Добавляет объект <see cref="T:System.Data.DataTable" /> в объект <see cref="T:System.Data.DataSet" /> и настраивает схему для получения соответствия со схемой в источнике данных.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet">Объект <see cref="T:System.Data.DataSet" /> для вставки схемы.</param>
        <param name="schemaType">Одно из значений типа <see cref="T:System.Data.SchemaType" />, указывающее, как вставлять схему.</param>
        <summary>Добавляет объект <see cref="T:System.Data.DataTable" /> с именем "Таблица" к указанному объекту <see cref="T:System.Data.DataSet" /> и настраивает схему в соответствии с источником данных, основанном на указанном значении типа <see cref="T:System.Data.SchemaType" />.</summary>
        <returns>Ссылка на коллекцию объектов <see cref="T:System.Data.DataTable" />, которые были добавлены в объект <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод получает сведения о схеме из источника данных с помощью <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.  
  
 Операция добавляет в назначение<xref:System.Data.DataSet>. <xref:System.Data.DataTable> <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Затем он добавляет столбцы <xref:System.Data.DataColumnCollection> <xref:System.Data.DataTable>в и настраивает следующие <xref:System.Data.DataColumn> свойства, если они существуют в источнике данных:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Необходимо задать <xref:System.Data.DataColumn.AutoIncrementStep%2A> и <xref:System.Data.DataColumn.AutoIncrementSeed%2A> отдельно.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>также настраивает <xref:System.Data.DataTable.PrimaryKey%2A> свойства и <xref:System.Data.DataTable.Constraints%2A> в соответствии со следующими правилами.  
  
-   Если один или несколько первичных ключевых столбцов возвращаются <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, они используются в качестве первичных ключевых столбцов <xref:System.Data.DataTable>для.  
  
-   Если столбцы первичного ключа не возвращаются, но уникальные столбцы являются уникальными, то уникальные столбцы используются в качестве первичного ключа, и только в случае, если все уникальные столбцы не равны NULL. Если какой <xref:System.Data.UniqueConstraint> -либо из столбцов допускает значение null, добавляется <xref:System.Data.ConstraintCollection>к, но <xref:System.Data.DataTable.PrimaryKey%2A> свойство не задается.  
  
-   Если возвращаются столбцы первичного ключа и уникальные столбцы, первичные ключевые столбцы используются в качестве первичных ключевых столбцов для <xref:System.Data.DataTable>.  
  
 Обратите внимание, что первичные ключи и ограничения UNIQUE <xref:System.Data.ConstraintCollection> добавляются в в в соответствии с предыдущими правилами, но другие типы ограничений не добавляются.  
  
 Если для столбца или столбцов в SQL Server таблице определен уникальный кластеризованный индекс, а для отдельного набора столбцов определено ограничение PRIMARY KEY, то будут возвращены имена столбцов в кластеризованном индексе. Чтобы получить имена и имена первичных ключевых столбцов, используйте указание запроса с инструкцией SELECT, указывающей имя индекса первичного ключа. Дополнительные сведения об указании указания запроса см. в разделе [Указание запроса (Transact-SQL)](https://msdn.microsoft.com/library/ms181714.aspx).  
  
 Сведения о первичном ключе <xref:System.Data.Common.DbDataAdapter.Fill%2A> используются во время поиска и замены всех строк, ключевые столбцы которых совпадают. Если это не требуемое поведение, используйте <xref:System.Data.Common.DbDataAdapter.Fill%2A> без запроса сведений о схеме.  
  
 ** <xref:System.Data.DataTable>**** Если обнаруживает дублированные столбцы при заполнении, он создает имена для последующих столбцов с использованием шаблона "ColumnName 1", "ColumnName 2", "ColumnName 3" и т. д. <xref:System.Data.IDataAdapter> Если входящие данные содержат безымянные столбцы, они помещаются в в <xref:System.Data.DataSet> соответствии с шаблоном «Столбец1», «Столбец2» и т. д. При добавлении <xref:System.Data.DataSet> нескольких результирующих наборов в каждый результирующий набор помещается в отдельную таблицу. Дополнительным результирующим наборам присваиваются имена путем добавления целочисленных значений к заданному имени таблицы (например, "Table", "table1", "Table2" и т. д.). Приложения, использующие имена столбцов и таблиц, должны гарантировать, что конфликты с этими шаблонами именования не происходят.  
  
 <xref:System.Data.IDbConnection> Объект, связанный с командой SELECT, должен быть допустимым, но не должен открываться. Если объект <xref:System.Data.IDbConnection> закрыт до <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> вызова метода, он открывается для получения данных, а затем закрывается. Если соединение открыто до <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> вызова метода, оно остается открытым.  
  
> [!NOTE]
>  При обработке инструкций SQL пакетной службы, возвращающих несколько результатов <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> , реализация для .NET Framework поставщика данных для OLE DB получает сведения о схеме только для первого результата. Чтобы получить сведения о схеме для нескольких результатов, <xref:System.Data.Common.DbDataAdapter.Fill%2A> используйте <xref:System.Data.MissingSchemaAction> с `AddWithKey`параметром, равным.  
  
 При использовании метода <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> поставщик данных .NET Framework для SQL Server добавляет предложение FOR BROWSE к выполняемому оператору. Пользователь должен быть осведомлен о возможных побочных эффектах, например о проблемах, возникающих при использовании операторов SET FMTONLY ON. Дополнительные сведения см. в разделе [SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql).
  
   
  
## Examples  
 В следующем примере используется производный класс, <xref:System.Data.SqlClient.SqlDataAdapter>для <xref:System.Data.DataSet> заполнения со <xref:System.Data.DataSet>схемой и возвращает.  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable FillSchema(class System.Data.DataTable dataTable, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTable ^ FillSchema(System::Data::DataTable ^ dataTable, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataTable * System.Data.SchemaType -&gt; System.Data.DataTable" Usage="dbDataAdapter.FillSchema (dataTable, schemaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataTable">Объект <see cref="T:System.Data.DataTable" />, который необходимо заполнить сведениями схемы из источника данных.</param>
        <param name="schemaType">Одно из значений перечисления <see cref="T:System.Data.SchemaType" />.</param>
        <summary>Настраивает схему для указанного объекта <see cref="T:System.Data.DataTable" />, основываясь на указанном значении типа <see cref="T:System.Data.SchemaType" />.</summary>
        <returns>Объект <see cref="T:System.Data.DataTable" />, который содержит сведения схемы, возвращенные из источника данных.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод получает схему из источника данных <xref:System.Data.IDbDataAdapter.SelectCommand%2A>с помощью. <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Объект соединения, связанный с <xref:System.Data.IDbDataAdapter.SelectCommand%2A> объектом, должен быть допустимым, но не должен быть открытым. Если соединение закрывается до <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> вызова метода, оно открывается для получения данных, а затем закрывается. Если соединение открыто до <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> вызова метода, оно остается открытым.  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Операция<xref:System.Data.DataTable>возвращает. Затем он добавляет столбцы <xref:System.Data.DataColumnCollection> <xref:System.Data.DataTable>в и настраивает следующие <xref:System.Data.DataColumn> свойства, если они существуют в источнике данных:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Необходимо задать <xref:System.Data.DataColumn.AutoIncrementStep%2A> и <xref:System.Data.DataColumn.AutoIncrementSeed%2A> отдельно.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>также настраивает <xref:System.Data.DataTable.PrimaryKey%2A> свойства и <xref:System.Data.DataTable.Constraints%2A> в соответствии со следующими правилами.  
  
-   Если объект <xref:System.Data.DataTable.PrimaryKey%2A> уже определен `DataTable`для, или `DataTable` содержит данные, `PrimaryKey` свойство не будет установлено.  
  
-   Если один или несколько первичных ключевых столбцов возвращаются <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, они используются в качестве первичных ключевых столбцов `DataTable`для.  
  
-   Если столбцы первичного ключа не возвращаются, но уникальные столбцы являются уникальными, то уникальные столбцы используются в качестве первичного ключа, и только в случае, если все уникальные столбцы не равны NULL. Если какой <xref:System.Data.UniqueConstraint> -либо из столбцов допускает значение null, добавляется <xref:System.Data.ConstraintCollection>к, но `PrimaryKey` свойство не задается.  
  
-   Если возвращаются столбцы первичного ключа и уникальные столбцы, первичные ключевые столбцы используются в качестве первичных ключевых столбцов для `DataTable`.  
  
 Обратите внимание, что первичные ключи и ограничения UNIQUE <xref:System.Data.ConstraintCollection> добавляются в в в соответствии с предыдущими правилами, но другие типы ограничений не добавляются. Этот процесс может потребовать нескольких обращений к серверу.  
  
 Если для столбца или столбцов в SQL Server таблице определен уникальный кластеризованный индекс, а для отдельного набора столбцов определено ограничение PRIMARY KEY, то будут возвращены имена столбцов в кластеризованном индексе. Чтобы получить имена и имена первичных ключевых столбцов, используйте указание запроса с инструкцией SELECT, указывающей имя индекса первичного ключа. Дополнительные сведения об указании указания запроса см. в разделе [Указание запроса (Transact-SQL)](https://msdn.microsoft.com/library/ms181714.aspx).  
  
 ** <xref:System.Data.DataTable>**** Если обнаруживает дублированные столбцы при заполнении, он создает имена для последующих столбцов с использованием шаблона "ColumnName 1", "ColumnName 2", "ColumnName 3" и т. д. <xref:System.Data.Common.DbDataAdapter> Если входящие данные содержат безымянные столбцы, они помещаются в в <xref:System.Data.DataSet> соответствии с шаблоном «Столбец1», «Столбец2» и т. д. При добавлении <xref:System.Data.DataSet> нескольких результирующих наборов в каждый результирующий набор помещается в отдельную таблицу. Дополнительным результирующим наборам присваиваются имена путем добавления целочисленных значений к заданному имени таблицы (например, "Table", "table1", "Table2" и т. д.). Приложения, использующие имена столбцов и таблиц, должны гарантировать, что конфликты с этими шаблонами именования не происходят.  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>не возвращает никаких строк. Используйте метод для добавления строк <xref:System.Data.DataTable>в. <xref:System.Data.Common.DbDataAdapter.Fill%2A>  
  
> [!NOTE]
>  При обработке инструкций SQL пакетной службы, возвращающих несколько результатов <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> , реализация для .NET Framework поставщика данных для OLE DB получает сведения о схеме только для первого результата. Чтобы получить сведения о схеме для нескольких результатов, <xref:System.Data.Common.DbDataAdapter.Fill%2A> используйте <xref:System.Data.MissingSchemaAction> с `AddWithKey`параметром, равным.  
  
 При использовании метода <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> поставщик данных .NET Framework для SQL Server добавляет предложение FOR BROWSE к выполняемому оператору. Пользователь должен быть осведомлен о возможных побочных эффектах, например о проблемах, возникающих при использовании операторов SET FMTONLY ON. Дополнительные сведения см. в разделе [SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql).
  
   
  
## Examples  
 В следующем примере используется производный класс, <xref:System.Data.SqlClient.SqlDataAdapter>для <xref:System.Data.DataSet> заполнения со <xref:System.Data.DataTable>схемой и возвращает.  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema3#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema3/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema3#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType * string -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">Объект <see cref="T:System.Data.DataSet" /> для вставки схемы.</param>
        <param name="schemaType">Одно из значений типа <see cref="T:System.Data.SchemaType" />, указывающее, как вставлять схему.</param>
        <param name="srcTable">Имя исходной таблицы, используемое для сопоставления таблицы.</param>
        <summary>Добавляет объект <see cref="T:System.Data.DataTable" /> к указанному объекту <see cref="T:System.Data.DataSet" /> и настраивает схему в соответствии с источником данных, основанном на указанном значении типа <see cref="T:System.Data.SchemaType" /> и объекте <see cref="T:System.Data.DataTable" />.</summary>
        <returns>Ссылка на коллекцию объектов <see cref="T:System.Data.DataTable" />, которые были добавлены в объект <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод получает сведения о схеме из источника данных с помощью <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.  
  
 Операция добавляет в назначение<xref:System.Data.DataSet>. <xref:System.Data.DataTable> <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Затем он добавляет столбцы <xref:System.Data.DataColumnCollection> <xref:System.Data.DataTable>в и настраивает следующие <xref:System.Data.DataColumn> свойства, если они существуют в источнике данных:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Необходимо задать <xref:System.Data.DataColumn.AutoIncrementStep%2A> и <xref:System.Data.DataColumn.AutoIncrementSeed%2A> отдельно.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>также настраивает <xref:System.Data.DataTable.PrimaryKey%2A> свойства и <xref:System.Data.DataTable.Constraints%2A> в соответствии со следующими правилами.  
  
-   Если один или несколько первичных ключевых столбцов возвращаются <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, они используются в качестве первичных ключевых столбцов <xref:System.Data.DataTable>для.  
  
-   Если столбцы первичного ключа не возвращаются, но уникальные столбцы являются уникальными, то уникальные столбцы используются в качестве первичного ключа, и только в случае, если все уникальные столбцы не равны NULL. Если какой <xref:System.Data.UniqueConstraint> -либо из столбцов допускает значение null, добавляется <xref:System.Data.ConstraintCollection>к, но <xref:System.Data.DataTable.PrimaryKey%2A> свойство не задается.  
  
-   Если возвращаются столбцы первичного ключа и уникальные столбцы, первичные ключевые столбцы используются в качестве первичных ключевых столбцов для <xref:System.Data.DataTable>.  
  
 Обратите внимание, что первичные ключи и ограничения UNIQUE <xref:System.Data.ConstraintCollection> добавляются в в в соответствии с предыдущими правилами, но другие типы ограничений не добавляются.  
  
 Если для столбца или столбцов в SQL Server таблице определен уникальный кластеризованный индекс, а для отдельного набора столбцов определено ограничение PRIMARY KEY, то будут возвращены имена столбцов в кластеризованном индексе. Чтобы получить имена и имена первичных ключевых столбцов, используйте указание запроса с инструкцией SELECT, указывающей имя индекса первичного ключа. Дополнительные сведения об указании указания запроса см. в разделе [Указание запроса (Transact-SQL)](https://msdn.microsoft.com/library/ms181714.aspx).  
  
 Сведения о первичном ключе <xref:System.Data.Common.DbDataAdapter.Fill%2A> используются во время поиска и замены всех строк, ключевые столбцы которых совпадают. Если это не требуемое поведение, используйте <xref:System.Data.Common.DbDataAdapter.Fill%2A> без запроса сведений о схеме.  
  
 ** <xref:System.Data.DataTable>**** Если обнаруживает дублированные столбцы при заполнении, он создает имена для последующих столбцов с использованием шаблона "ColumnName 1", "ColumnName 2", "ColumnName 3" и т. д. <xref:System.Data.Common.DbDataAdapter> Если входящие данные содержат безымянные столбцы, они помещаются в в <xref:System.Data.DataSet> соответствии с шаблоном «Столбец1», «Столбец2» и т. д. При добавлении <xref:System.Data.DataSet> нескольких результирующих наборов в каждый результирующий набор помещается в отдельную таблицу. Дополнительным результирующим наборам присваиваются имена путем добавления целочисленных значений к заданному имени таблицы (например, "Table", "table1", "Table2" и т. д.). Приложения, использующие имена столбцов и таблиц, должны гарантировать, что конфликты с этими шаблонами именования не происходят.  
  
 Метод поддерживает сценарии, в которых <xref:System.Data.DataSet> объект содержит <xref:System.Data.DataTable> несколько объектов, имена которых отличаются только регистром. <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> В таких ситуациях <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> выполняет сравнение с учетом регистра для поиска соответствующей таблицы и создает новую таблицу, если точное совпадение не существует. Это поведение C# демонстрируется в следующем коде.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.FillSchema(dataset, "aaa"); // Fills the schema of "aaa", which already exists in the DataSet.  
adapter.FillSchema(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Если <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> вызывается <xref:System.Data.DataSet> и содержит только те <xref:System.Data.DataTable> , имя которых отличается от имени только регистром <xref:System.Data.DataTable> , то обновляется. В этом сценарии сравнение выполняется без учета регистра. Это поведение C# демонстрируется в следующем коде.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.FillSchema(dataset, "AAA"); // Fills the schema of table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <xref:System.Data.IDbConnection> Объект, связанный с командой SELECT, должен быть допустимым, но не должен открываться. Если объект <xref:System.Data.IDbConnection> закрыт до <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> вызова метода, он открывается для получения данных, а затем закрывается. Если соединение открыто до <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> вызова метода, оно остается открытым.  
  
> [!NOTE]
>  При обработке инструкций SQL пакетной службы, возвращающих несколько результатов <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> , реализация для .NET Framework поставщика данных для OLE DB получает сведения о схеме только для первого результата. Чтобы получить сведения о схеме для нескольких результатов, <xref:System.Data.Common.DbDataAdapter.Fill%2A> используйте <xref:System.Data.MissingSchemaAction> с `AddWithKey`параметром, равным.  
  
 При использовании метода <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> поставщик данных .NET Framework для SQL Server добавляет предложение FOR BROWSE к выполняемому оператору. Пользователь должен быть осведомлен о возможных побочных эффектах, например о проблемах, возникающих при использовании операторов SET FMTONLY ON. Дополнительные сведения см. в разделе [SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql).
  
   
  
## Examples  
 В следующем примере используется производный класс, <xref:System.Data.SqlClient.SqlDataAdapter>для <xref:System.Data.DataSet> заполнения со <xref:System.Data.DataSet>схемой и возвращает.  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Не удается найти исходную таблицу для получения схемы.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable FillSchema(class System.Data.DataTable dataTable, valuetype System.Data.SchemaType schemaType, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::DataTable ^ FillSchema(System::Data::DataTable ^ dataTable, System::Data::SchemaType schemaType, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataTable * System.Data.SchemaType * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; System.Data.DataTable" Usage="dbDataAdapter.FillSchema (dataTable, schemaType, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTable">Объект <see cref="T:System.Data.DataTable" />, который необходимо заполнить сведениями схемы из источника данных.</param>
        <param name="schemaType">Одно из значений перечисления <see cref="T:System.Data.SchemaType" />.</param>
        <param name="command">Оператор SQL SELECT используется для извлечения строки из источника данных.</param>
        <param name="behavior">Одно из значений <see cref="T:System.Data.CommandBehavior" />.</param>
        <summary>Настраивает схему для указанного объекта <see cref="T:System.Data.DataTable" />, основываясь на указанном значении типа <see cref="T:System.Data.SchemaType" />, командной строке и значениях типа <see cref="T:System.Data.CommandBehavior" />.</summary>
        <returns>Объект <see cref="T:System.Data.DataTable" /> содержит сведения схемы, возвращенные из источника данных.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод получает схему из источника данных <xref:System.Data.IDbDataAdapter.SelectCommand%2A>с помощью. <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Объект соединения, связанный с <xref:System.Data.IDbDataAdapter.SelectCommand%2A> объектом, должен быть допустимым, но не должен быть открытым. Если соединение закрывается до <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> вызова метода, оно открывается для получения данных, а затем закрывается. Если соединение открыто до <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> вызова метода, оно остается открытым.  
  
 Операция добавляет в назначение<xref:System.Data.DataSet>. <xref:System.Data.DataTable> <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Затем он добавляет столбцы <xref:System.Data.DataColumnCollection> <xref:System.Data.DataTable>в и настраивает следующие <xref:System.Data.DataColumn> свойства, если они существуют в источнике данных:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Необходимо задать <xref:System.Data.DataColumn.AutoIncrementStep%2A> и <xref:System.Data.DataColumn.AutoIncrementSeed%2A> отдельно.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>также настраивает <xref:System.Data.DataTable.PrimaryKey%2A> свойства и <xref:System.Data.DataTable.Constraints%2A> в соответствии со следующими правилами.  
  
-   Если один или несколько первичных ключевых столбцов возвращаются <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, они используются в качестве первичных ключевых столбцов <xref:System.Data.DataTable>для.  
  
-   Если столбцы первичного ключа не возвращаются, но уникальные столбцы являются уникальными, то уникальные столбцы используются в качестве первичного ключа, и только в случае, если все уникальные столбцы не равны NULL. Если какой <xref:System.Data.UniqueConstraint> -либо из столбцов допускает значение null, добавляется <xref:System.Data.ConstraintCollection>к, но <xref:System.Data.DataTable.PrimaryKey%2A> свойство не задается.  
  
-   Если возвращаются столбцы первичного ключа и уникальные столбцы, первичные ключевые столбцы используются в качестве первичных ключевых столбцов для <xref:System.Data.DataTable>.  
  
 Обратите внимание, что первичные ключи и ограничения UNIQUE <xref:System.Data.ConstraintCollection> добавляются в в в соответствии с предыдущими правилами, но другие типы ограничений не добавляются.  
  
 Если для столбца или столбцов в SQL Server таблице определен уникальный кластеризованный индекс, а для отдельного набора столбцов определено ограничение PRIMARY KEY, то будут возвращены имена столбцов в кластеризованном индексе. Чтобы получить имена и имена первичных ключевых столбцов, используйте указание запроса с инструкцией SELECT, указывающей имя индекса первичного ключа. Дополнительные сведения об указании указания запроса см. в разделе [Указание запроса (Transact-SQL)](https://msdn.microsoft.com/library/ms181714.aspx).  
  
 ** <xref:System.Data.DataTable>**** Если обнаруживает дублированные столбцы при заполнении, он создает имена для последующих столбцов с использованием шаблона "ColumnName 1", "ColumnName 2", "ColumnName 3" и т. д. <xref:System.Data.IDataAdapter> Если входящие данные содержат безымянные столбцы, они помещаются в в <xref:System.Data.DataSet> соответствии с шаблоном «Столбец1», «Столбец2» и т. д. При добавлении <xref:System.Data.DataSet> нескольких результирующих наборов в каждый результирующий набор помещается в отдельную таблицу. Дополнительным результирующим наборам присваиваются имена путем добавления целочисленных значений к заданному имени таблицы (например, "Table", "table1", "Table2" и т. д.). Приложения, использующие имена столбцов и таблиц, должны гарантировать, что конфликты с этими шаблонами именования не происходят.  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>не возвращает никаких строк. Используйте метод для добавления строк <xref:System.Data.DataTable>в. <xref:System.Data.Common.DbDataAdapter.Fill%2A>  
  
> [!NOTE]
>  При обработке инструкций SQL пакетной службы, возвращающих несколько результатов <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> , реализация для .NET Framework поставщика данных для OLE DB получает сведения о схеме только для первого результата. Чтобы получить сведения о схеме для нескольких результатов, <xref:System.Data.Common.DbDataAdapter.Fill%2A> используйте <xref:System.Data.MissingSchemaAction> с `AddWithKey`параметром, равным.  
  
 При использовании метода <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> поставщик данных .NET Framework для SQL Server добавляет предложение FOR BROWSE к выполняемому оператору. Пользователь должен быть осведомлен о возможных побочных эффектах, например о проблемах, возникающих при использовании операторов SET FMTONLY ON. Дополнительные сведения см. в разделе [SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql).
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Эта реализация <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" /> метода защищена и разработана для использования .NET Framework поставщиком данных.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, System.Data.IDbCommand command, string srcTable, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType, class System.Data.IDbCommand command, string srcTable, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType, System::Data::IDbCommand ^ command, System::String ^ srcTable, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType * System.Data.IDbCommand * string * System.Data.CommandBehavior -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType, command, srcTable, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataSet">Объект <see cref="T:System.Data.DataSet" />, который необходимо заполнить сведениями схемы из источника данных.</param>
        <param name="schemaType">Одно из значений <see cref="T:System.Data.SchemaType" />.</param>
        <param name="command">Оператор SQL SELECT используется для извлечения строки из источника данных.</param>
        <param name="srcTable">Имя исходной таблицы, используемое для сопоставления таблицы.</param>
        <param name="behavior">Одно из значений перечисления <see cref="T:System.Data.CommandBehavior" />.</param>
        <summary>Добавляет объект <see cref="T:System.Data.DataTable" /> к указанному объекту <see cref="T:System.Data.DataSet" /> и настраивает схему в соответствии с источником данных, основанном на указанном значении типа <see cref="T:System.Data.SchemaType" />.</summary>
        <returns>Массив объектов <see cref="T:System.Data.DataTable" />, который содержит сведения схемы, возвращенные из источника данных.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод получает схему из источника данных <xref:System.Data.IDbDataAdapter.SelectCommand%2A>с помощью. <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Объект соединения, связанный с <xref:System.Data.IDbDataAdapter.SelectCommand%2A> объектом, должен быть допустимым, но не должен быть открытым. Если соединение закрывается до <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> вызова метода, оно открывается для получения данных, а затем закрывается. Если соединение открыто до <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> вызова метода, оно остается открытым.  
  
 Операция добавляет в назначение<xref:System.Data.DataSet>. <xref:System.Data.DataTable> <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Затем он добавляет столбцы <xref:System.Data.DataColumnCollection> <xref:System.Data.DataTable>в и настраивает следующие <xref:System.Data.DataColumn> свойства, если они существуют в источнике данных:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Необходимо задать <xref:System.Data.DataColumn.AutoIncrementStep%2A> и <xref:System.Data.DataColumn.AutoIncrementSeed%2A> отдельно.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>также настраивает <xref:System.Data.DataTable.PrimaryKey%2A> свойства и <xref:System.Data.DataTable.Constraints%2A> в соответствии со следующими правилами.  
  
-   Если один или несколько первичных ключевых столбцов возвращаются <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, они используются в качестве первичных ключевых столбцов <xref:System.Data.DataTable>для.  
  
-   Если столбцы первичного ключа не возвращаются, но уникальные столбцы являются уникальными, то уникальные столбцы используются в качестве первичного ключа, и только в случае, если все уникальные столбцы не равны NULL. Если какой <xref:System.Data.UniqueConstraint> -либо из столбцов допускает значение null, добавляется <xref:System.Data.ConstraintCollection>к, но <xref:System.Data.DataTable.PrimaryKey%2A> свойство не задается.  
  
-   Если возвращаются столбцы первичного ключа и уникальные столбцы, первичные ключевые столбцы используются в качестве первичных ключевых столбцов для <xref:System.Data.DataTable>.  
  
 Обратите внимание, что первичные ключи и ограничения UNIQUE <xref:System.Data.ConstraintCollection> добавляются в в в соответствии с предыдущими правилами, но другие типы ограничений не добавляются.  
  
 Если для столбца или столбцов в SQL Server таблице определен уникальный кластеризованный индекс, а для отдельного набора столбцов определено ограничение PRIMARY KEY, то будут возвращены имена столбцов в кластеризованном индексе. Чтобы получить имена и имена первичных ключевых столбцов, используйте указание запроса с инструкцией SELECT, указывающей имя индекса первичного ключа. Дополнительные сведения об указании указания запроса см. в разделе [Указание запроса (Transact-SQL)](https://msdn.microsoft.com/library/ms181714.aspx).  
  
 ** <xref:System.Data.DataTable>**** Если обнаруживает дублированные столбцы при заполнении, он создает имена для последующих столбцов с использованием шаблона "ColumnName 1", "ColumnName 2", "ColumnName 3" и т. д. <xref:System.Data.IDataAdapter> Если входящие данные содержат безымянные столбцы, они помещаются в в <xref:System.Data.DataSet> соответствии с шаблоном «Столбец1», «Столбец2» и т. д. При добавлении <xref:System.Data.DataSet> нескольких результирующих наборов в каждый результирующий набор помещается в отдельную таблицу. Дополнительным результирующим наборам присваиваются имена путем добавления целочисленных значений к заданному имени таблицы (например, "Table", "table1", "Table2" и т. д.). Приложения, использующие имена столбцов и таблиц, должны гарантировать, что конфликты с этими шаблонами именования не происходят.  
  
 Метод поддерживает сценарии, в которых <xref:System.Data.DataSet> объект содержит <xref:System.Data.DataTable> несколько объектов, имена которых отличаются только регистром. <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> В таких ситуациях <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> выполняет сравнение с учетом регистра для поиска соответствующей таблицы и создает новую таблицу, если точное совпадение не существует. Это поведение C# демонстрируется в следующем коде.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.FillSchema(dataset, "aaa"); // Fills the schema of "aaa", which already exists in the DataSet.  
adapter.FillSchema(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Если <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> вызывается <xref:System.Data.DataSet> и содержит только те <xref:System.Data.DataTable> , имя которых отличается от имени только регистром <xref:System.Data.DataTable> , то обновляется. В этом сценарии сравнение выполняется без учета регистра. Это поведение C# демонстрируется в следующем коде.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.FillSchema(dataset, "AAA"); // Fills the schema of table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>не возвращает никаких строк. Используйте метод для добавления строк <xref:System.Data.DataTable>в. <xref:System.Data.Common.DbDataAdapter.Fill%2A>  
  
> [!NOTE]
>  При обработке инструкций SQL пакетной службы, возвращающих несколько результатов <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> , реализация для .NET Framework поставщика данных для OLE DB получает сведения о схеме только для первого результата. Чтобы получить сведения о схеме для нескольких результатов, <xref:System.Data.Common.DbDataAdapter.Fill%2A> используйте <xref:System.Data.MissingSchemaAction> с `AddWithKey`параметром, равным.  
  
 При использовании метода <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> поставщик данных .NET Framework для SQL Server добавляет предложение FOR BROWSE к выполняемому оператору. Пользователь должен быть осведомлен о возможных побочных эффектах, например о проблемах, возникающих при использовании операторов SET FMTONLY ON. Дополнительные сведения см. в разделе [SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql).
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Эта реализация <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" /> метода защищена и разработана для использования .NET Framework поставщиком данных.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetBatchedParameter">
      <MemberSignature Language="C#" Value="protected virtual System.Data.IDataParameter GetBatchedParameter (int commandIdentifier, int parameterIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.IDataParameter GetBatchedParameter(int32 commandIdentifier, int32 parameterIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetBatchedParameter (commandIdentifier As Integer, parameterIndex As Integer) As IDataParameter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::IDataParameter ^ GetBatchedParameter(int commandIdentifier, int parameterIndex);" />
      <MemberSignature Language="F#" Value="abstract member GetBatchedParameter : int * int -&gt; System.Data.IDataParameter&#xA;override this.GetBatchedParameter : int * int -&gt; System.Data.IDataParameter" Usage="dbDataAdapter.GetBatchedParameter (commandIdentifier, parameterIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandIdentifier" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameterIndex" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="commandIdentifier">Индекс команды, из которой извлекается параметр.</param>
        <param name="parameterIndex">Индекс параметра внутри команды.</param>
        <summary>Возвращает интерфейс <see cref="T:System.Data.IDataParameter" /> из одной из команд в текущем пакете.</summary>
        <returns>Указанный <see cref="T:System.Data.IDataParameter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В <xref:System.Data.Common.DbDataAdapter>этот метод создает исключение <xref:System.NotSupportedException>. Классы, наследующие <xref:System.Data.Common.DbDataAdapter> от переопределения этого метода, обеспечивают поддержку пакетов.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Адаптер не поддерживает пакеты.</exception>
        <block subset="none" type="overrides"><para>Этот метод защищен и предназначен для использования .NET Framework поставщиком данных.  
  
Если класс, наследующий от <see cref="T:System.Data.Common.DbDataAdapter" /> , поддерживает пакеты, этот класс переопределяет этот метод, чтобы разрешить пользователям выполнять пакет. Реализация использует <paramref name="commandIdentifier" /> предоставленный для размещения запрашиваемой команды, а затем использует предоставленный объект <paramref name="parameterIndex" /> для размещения запрошенного параметра. Например, значение <paramref name="commandIdentifier" /> 0 и a <paramref name="parameterIndex" /> 0 возвращает первый параметр из первой команды в пакете.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetBatchedRecordsAffected">
      <MemberSignature Language="C#" Value="protected virtual bool GetBatchedRecordsAffected (int commandIdentifier, out int recordsAffected, out Exception error);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool GetBatchedRecordsAffected(int32 commandIdentifier, [out] int32&amp; recordsAffected, [out] class System.Exception&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetBatchedRecordsAffected (commandIdentifier As Integer, ByRef recordsAffected As Integer, ByRef error As Exception) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool GetBatchedRecordsAffected(int commandIdentifier, [Runtime::InteropServices::Out] int % recordsAffected, [Runtime::InteropServices::Out] Exception ^ % error);" />
      <MemberSignature Language="F#" Value="abstract member GetBatchedRecordsAffected : int * int * Exception -&gt; bool&#xA;override this.GetBatchedRecordsAffected : int * int * Exception -&gt; bool" Usage="dbDataAdapter.GetBatchedRecordsAffected (commandIdentifier, recordsAffected, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandIdentifier" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="recordsAffected" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="error" Type="System.Exception" RefType="out" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="commandIdentifier">Порядковый номер (с нуля) столбца отдельной команды в пакете.</param>
        <param name="recordsAffected">Количество строк в хранилище данных, на которые было оказано воздействие указанной командой в пакете.</param>
        <param name="error">Исключение <see cref="T:System.Exception" />, выданное при выполнении указанной команды. Возвращает значение <see langword="null" /> (<see langword="Nothing" /> в Visual Basic), если исключение не было выдано.</param>
        <summary>Возвращает сведения об отдельной попытке обновления в рамках большего по своему объему пакета обновления.</summary>
        <returns>Сведения об отдельной попытке обновления в рамках большего по своему объему пакета обновления.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Поставщики данных, поддерживающие логику пакетного обновления, должны переопределять ряд виртуальных методов <xref:System.Data.Common.DbDataAdapter> в классе. `GetBatchedRecordsAffected`представляет один из этих виртуальных методов. Класс полагается на `GetBatchedRecordsAffected` определение успешности или неудачного завершения отдельных попыток обновления в пакете, чтобы <xref:System.Data.DataRow> он мог помечать соответствующим образом. `DbDataAdapter`  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public override System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberSignature Language="F#" Value="override this.GetFillParameters : unit -&gt; System.Data.IDataParameter[]" Usage="dbDataAdapter.GetFillParameters " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.GetFillParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Получает параметры, заданные пользователем при выполнении оператора SQL SELECT.</summary>
        <returns>Массив объектов <see cref="T:System.Data.IDataParameter" /> содержит параметры, заданные пользователем.</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="InitializeBatching">
      <MemberSignature Language="C#" Value="protected virtual void InitializeBatching ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeBatching() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.InitializeBatching" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitializeBatching ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitializeBatching();" />
      <MemberSignature Language="F#" Value="abstract member InitializeBatching : unit -&gt; unit&#xA;override this.InitializeBatching : unit -&gt; unit" Usage="dbDataAdapter.InitializeBatching " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Инициализирует пакетную обработку для объекта <see cref="T:System.Data.Common.DbDataAdapter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В <xref:System.Data.Common.DbDataAdapter>этот метод создает исключение <xref:System.NotSupportedException>. Классы, наследующие <xref:System.Data.Common.DbDataAdapter> от переопределения этого метода, обеспечивают поддержку пакетов.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Адаптер не поддерживает пакеты.</exception>
        <block subset="none" type="overrides"><para>Этот метод защищен и предназначен для использования .NET Framework поставщиком данных.  
  
Если класс, наследующий от <see cref="T:System.Data.Common.DbDataAdapter" /> , поддерживает пакеты, этот класс переопределяет этот метод. Этот метод предоставляет классу возможность инициализировать все ресурсы, необходимые для поддержки пакетной обработки. Например, класс может выделить структуру данных для хранения набора команд в пакете.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.InsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ InsertCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InsertCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.InsertCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает команду SQL для вставки новых записей в источник данных.</summary>
        <value>Интерфейс <see cref="T:System.Data.IDbCommand" />, используемый во время применения метода <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> для вставки записей в источник данных, соответствующих новым строкам в наборе данных.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В случае <xref:System.Data.DataSet> <xref:System.Data.IDbDataAdapter.InsertCommand%2A> , если это свойство не задано и сведения о первичном ключе имеются в, будет автоматически создан. <xref:System.Data.Common.DbDataAdapter.Update%2A>  
  
   
  
## Examples  
 В следующем примере создается производный класс <xref:System.Data.OleDb.OleDbDataAdapter> и задаются некоторые его свойства.  
  
 [!code-csharp[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Обработка данных (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnFillError">
      <MemberSignature Language="C#" Value="protected virtual void OnFillError (System.Data.FillErrorEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFillError(class System.Data.FillErrorEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnFillError(System.Data.FillErrorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnFillError (value As FillErrorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnFillError(System::Data::FillErrorEventArgs ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnFillError : System.Data.FillErrorEventArgs -&gt; unit&#xA;override this.OnFillError : System.Data.FillErrorEventArgs -&gt; unit" Usage="dbDataAdapter.OnFillError value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.FillErrorEventArgs" Index="0" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="value">Данные для события.</param>
        <summary>Вызывает событие <see cref="E:System.Data.Common.DataAdapter.FillError" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdated">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUpdated(class System.Data.Common.RowUpdatedEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowUpdated (value As RowUpdatedEventArgs)" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowUpdated(System::Data::Common::RowUpdatedEventArgs ^ value);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member OnRowUpdated : System.Data.Common.RowUpdatedEventArgs -&gt; unit&#xA;override this.OnRowUpdated : System.Data.Common.RowUpdatedEventArgs -&gt; unit" Usage="dbDataAdapter.OnRowUpdated value" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="protected abstract void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub OnRowUpdated (value As RowUpdatedEventArgs)" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void OnRowUpdated(System::Data::Common::RowUpdatedEventArgs ^ value);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="abstract member OnRowUpdated : System.Data.Common.RowUpdatedEventArgs -&gt; unit" Usage="dbDataAdapter.OnRowUpdated value" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatedEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">Объект <see cref="T:System.Data.Common.RowUpdatedEventArgs" />, содержащий данные события.</param>
        <summary>Вызывает событие <see langword="RowUpdated" /> поставщика данных .NET Framework.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При возникновении события через делегат вызывается обработчик события. Общие сведения см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>При переопределении <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" /> в производном классе обязательно вызовите <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" /> метод базового класса.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdating">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUpdating(class System.Data.Common.RowUpdatingEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowUpdating (value As RowUpdatingEventArgs)" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowUpdating(System::Data::Common::RowUpdatingEventArgs ^ value);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member OnRowUpdating : System.Data.Common.RowUpdatingEventArgs -&gt; unit&#xA;override this.OnRowUpdating : System.Data.Common.RowUpdatingEventArgs -&gt; unit" Usage="dbDataAdapter.OnRowUpdating value" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="protected abstract void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub OnRowUpdating (value As RowUpdatingEventArgs)" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void OnRowUpdating(System::Data::Common::RowUpdatingEventArgs ^ value);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="abstract member OnRowUpdating : System.Data.Common.RowUpdatingEventArgs -&gt; unit" Usage="dbDataAdapter.OnRowUpdating value" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatingEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">Объект класса <see cref="T:System.Data.Common.RowUpdatingEventArgs" />, содержащий данные события.</param>
        <summary>Вызывает событие <see langword="RowUpdating" /> поставщика данных .NET Framework.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При возникновении события через делегат вызывается обработчик события. Общие сведения см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>При переопределении <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" /> в производном классе обязательно вызовите <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" /> метод базового класса.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.SelectCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ SelectCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.SelectCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает команду, используемую для выбора записей в источнике данных.</summary>
        <value>Интерфейс <see cref="T:System.Data.IDbCommand" />, используемый во время применения метода <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> для выбора записей из источника данных для размещения в наборе данных.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере создается производный класс <xref:System.Data.OleDb.OleDbDataAdapter> и задаются некоторые его свойства.  
  
 [!code-csharp[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Обработка данных (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.DeleteCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand" />
      <MemberSignature Language="VB.NET" Value=" Property DeleteCommand As IDbCommand Implements IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::DeleteCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.DeleteCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает оператор SQL для удаления записей из набора данных.</summary>
        <value>Интерфейс <see cref="T:System.Data.IDbCommand" />, используемый во время применения метода <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> для удаления записей в источнике данных, соответствующих удаленным строкам в наборе данных.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет собой явную реализацию члена интерфейса. Он может использоваться, только если экземпляр <xref:System.Data.Common.DbDataAdapter> приведен к типу интерфейса <xref:System.Data.IDbDataAdapter>.  
  
 Для получения дополнительной информации см. <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.InsertCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand" />
      <MemberSignature Language="VB.NET" Value=" Property InsertCommand As IDbCommand Implements IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::InsertCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.InsertCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.InsertCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает оператор SQL для вставки новых записей в источник данных.</summary>
        <value>Интерфейс <see cref="T:System.Data.IDbCommand" />, используемый во время применения метода <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> для вставки записей в источник данных, соответствующих новым строкам в наборе данных.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет собой явную реализацию члена интерфейса. Он может использоваться, только если экземпляр <xref:System.Data.Common.DbDataAdapter> приведен к типу интерфейса <xref:System.Data.IDbDataAdapter>.  
  
 Для получения дополнительной информации см. <xref:System.Data.IDbDataAdapter.InsertCommand%2A>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.SelectCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand" />
      <MemberSignature Language="VB.NET" Value=" Property SelectCommand As IDbCommand Implements IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::SelectCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.SelectCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.SelectCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает оператор SQL для выбора записей в источнике данных.</summary>
        <value>Интерфейс <see cref="T:System.Data.IDbCommand" />, используемый во время применения метода <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> для выбора записей из источника данных для размещения в наборе данных.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет собой явную реализацию члена интерфейса. Он может использоваться, только если экземпляр <xref:System.Data.Common.DbDataAdapter> приведен к типу интерфейса <xref:System.Data.IDbDataAdapter>.  
  
 Для получения дополнительной информации см. <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.UpdateCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand" />
      <MemberSignature Language="VB.NET" Value=" Property UpdateCommand As IDbCommand Implements IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::UpdateCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.UpdateCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает оператор SQL для обновления записей в источнике данных.</summary>
        <value>Интерфейс <see cref="T:System.Data.IDbCommand" />, используемый во время применения метода <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> для обновления записей в источнике данных, соответствующих измененным строкам в наборе данных.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет собой явную реализацию члена интерфейса. Он может использоваться, только если экземпляр <xref:System.Data.Common.DbDataAdapter> приведен к типу интерфейса <xref:System.Data.IDbDataAdapter>.  
  
 Для получения дополнительной информации см. <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.System#ICloneable#Clone" />
      <MemberSignature Language="VB.NET" Value="Function Clone () As Object Implements ICloneable.Clone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ICloneable.Clone() = ICloneable::Clone;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("use 'protected DbDataAdapter(DbDataAdapter)' ctor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Создает новый объект, являющийся копией текущего экземпляра.</summary>
        <returns>Новый объект, являющийся копией этого экземпляра.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет собой явную реализацию члена интерфейса. Он может использоваться, только если экземпляр <xref:System.Data.Common.DbDataAdapter> приведен к типу интерфейса <xref:System.ICloneable>.  
  
 Для получения дополнительной информации см. <xref:System.ICloneable.Clone%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="TerminateBatching">
      <MemberSignature Language="C#" Value="protected virtual void TerminateBatching ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void TerminateBatching() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.TerminateBatching" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub TerminateBatching ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void TerminateBatching();" />
      <MemberSignature Language="F#" Value="abstract member TerminateBatching : unit -&gt; unit&#xA;override this.TerminateBatching : unit -&gt; unit" Usage="dbDataAdapter.TerminateBatching " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Завершает пакетную обработку для объекта <see cref="T:System.Data.Common.DbDataAdapter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В <xref:System.Data.Common.DbDataAdapter>этот метод создает исключение <xref:System.NotSupportedException>. Классы, наследующие <xref:System.Data.Common.DbDataAdapter> от переопределения этого метода, обеспечивают поддержку пакетов.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Адаптер не поддерживает пакеты.</exception>
        <block subset="none" type="overrides"><para>Этот метод защищен и предназначен для использования .NET Framework поставщиком данных.  
  
Если класс, наследующий от <see cref="T:System.Data.Common.DbDataAdapter" /> , поддерживает пакеты, этот класс переопределяет этот метод. Этот метод предоставляет классу возможность удаления любых ресурсов, выделенных для поддержки пакетной обработки. Например, класс может освободить структуру данных, содержащую команды в пакете.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Update">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Обновляет значения в базе данных, выполняя соответствующие операторы INSERT, UPDATE или DELETE для каждой вставленной, обновленной или удаленной строки в <see cref="T:System.Data.DataSet" />.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataRow[] dataRows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataRow[] dataRows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (dataRows As DataRow()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(cli::array &lt;System::Data::DataRow ^&gt; ^ dataRows);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataRow[] -&gt; int" Usage="dbDataAdapter.Update dataRows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="dataRows">Массив объектов <see cref="T:System.Data.DataRow" />, использованный для обновления источника данных.</param>
        <summary>Обновляет значения в базе данных, выполняя соответствующие операторы INSERT, UPDATE или DELETE для каждой вставленной, обновленной или удаленной строки в указанном массиве объектов <see cref="T:System.Data.DataSet" />.</summary>
        <returns>Количество строк, успешно обновленных из объекта <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда приложение вызывает <xref:System.Data.Common.DbDataAdapter.Update%2A> метод, объект <xref:System.Data.Common.DbDataAdapter> проверяет <xref:System.Data.DataRow.RowState%2A> свойство и выполняет необходимые инструкции INSERT, UPDATE или DELETE для каждой строки в зависимости от порядка индексов, настроенных в <xref:System.Data.DataSet>. Например, <xref:System.Data.Common.DbDataAdapter.Update%2A> может выполнить инструкцию DELETE, за которой следует инструкция INSERT, а затем другую инструкцию DELETE из-за упорядочения строк <xref:System.Data.DataTable>в.  
  
 Следует отметить, что эти инструкции не выполняются как пакетный процесс. Каждая строка обновляется по отдельности. Приложение может вызывать <xref:System.Data.DataSet.GetChanges%2A> метод в ситуациях, когда необходимо управлять последовательностью типов операторов (например, вставок перед обновлениями). Дополнительные сведения см. в разделе [Обновление источников данных с помощью DataAdapter](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Если инструкции INSERT, UPDATE или DELETE не указаны, <xref:System.Data.Common.DbDataAdapter.Update%2A> метод создает исключение. Однако можно создать <xref:System.Data.SqlClient.SqlCommandBuilder> объект или <xref:System.Data.OleDb.OleDbCommandBuilder> , чтобы автоматически формировать инструкции SQL для однотабличных `SelectCommand` обновлений, если задать свойство .NET Framework поставщика данных. Затем любые дополнительные инструкции SQL, которые вы не задаете, создаются **CommandBuilder**. Эта логика создания требует, <xref:System.Data.DataSet>чтобы сведения о ключевом столбце присутствовали в. Дополнительные сведения см. [в разделе Создание команд с помощью коммандбуилдерс](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A> Метод извлекает строки из таблицы, указанной в первом сопоставлении, перед выполнением обновления. Затем обновляет строку, используя значение <xref:System.Data.IDbCommand.UpdatedRowSource%2A> свойства. <xref:System.Data.Common.DbDataAdapter.Update%2A> Все возвращаемые дополнительные строки игнорируются.  
  
 После того как любые данные загружаются <xref:System.Data.DataSet>обратно в <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> , возникает событие, позволяющее пользователю проверить выверенную <xref:System.Data.DataSet> строку и все выходные параметры, возвращаемые командой. После успешного обновления строки принимаются изменения в этой строке.  
  
 При использовании <xref:System.Data.Common.DbDataAdapter.Update%2A>порядок выполнения выглядит следующим образом:  
  
1.  Значения в <xref:System.Data.DataRow> перемещаются в значения параметров.  
  
2.  Возникает событие <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>.  
  
3.  Команда выполняется.  
  
4.  Если для `FirstReturnedRecord`команды задано значение, первый возвращенный результат помещается <xref:System.Data.DataRow>в.  
  
5.  Если имеются выходные параметры, они помещаются в <xref:System.Data.DataRow>.  
  
6.  Возникает событие <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>.  
  
7.  Вызывается метод <xref:System.Data.DataRow.AcceptChanges%2A>.  
  
 Каждая команда, связанная <xref:System.Data.Common.DbDataAdapter> с, обычно имеет связанную с ней коллекцию параметров. Параметры сопоставлены с текущей строкой с `SourceColumn` помощью `SourceVersion` свойств и `Parameter` класса .NET Framework поставщика данных. `SourceColumn`ссылается на <xref:System.Data.DataTable> столбец <xref:System.Data.Common.DbDataAdapter> , который ссылается на получение значений параметров для текущей строки.  
  
 `SourceColumn`ссылается на несопоставленное имя столбца перед применением сопоставлений таблиц. Если `SourceColumn` ссылается на несуществующий столбец, то выполняемое действие зависит от одного из следующих <xref:System.Data.MissingMappingAction> значений.  
  
|Значение перечисления|Предпринятое действие|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Используйте имена исходных столбцов и имена таблиц в, <xref:System.Data.DataSet> если сопоставление отсутствует.|  
|`MissingMappingAction.Ignore`|<xref:System.SystemException> Создается. Если сопоставления заданы явно, отсутствие сопоставления для входного параметра обычно является результатом ошибки.|  
|`MissingMappingAction.Error`|<xref:System.SystemException> Создается.|  
  
 Свойство также используется для отображения значения выходных или входных и выходных параметров обратно `DataSet`в. `SourceColumn` Исключение создается, если оно ссылается на несуществующий столбец.  
  
 `SourceVersion` Свойство `Parameter` класса .NET Frameworkного поставщика данных определяет, следует ли использовать исходную, текущую или предложенную версию значения столбца. Эта возможность часто используется для включения исходных значений в предложение WHERE инструкции UPDATE для проверки нарушений оптимистической блокировки.  
  
> [!NOTE]
>  Если при обновлении строки возникает ошибка, возникает исключение и выполнение обновления прекращается. Чтобы продолжить операцию обновления без создания исключений при возникновении ошибки, задайте <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> для `true` свойства значение до вызова <xref:System.Data.Common.DbDataAdapter.Update%2A>. Вы также можете реагировать на ошибки на уровне отдельных строк в рамках `RowUpdated` события DataAdapter. Чтобы продолжить операцию обновления без `RowUpdated` создания исключения в событии, <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> задайте <xref:System.Data.Common.RowUpdatedEventArgs> для <xref:System.Data.UpdateStatus.Continue>свойства объекта значение.  
  
   
  
## Examples  
 В следующем примере производный класс <xref:System.Data.OleDb.OleDbDataAdapter>используется для обновления источника данных.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" /> не является допустимым.</exception>
        <exception cref="T:System.InvalidOperationException">Исходная таблица является недопустимой.</exception>
        <exception cref="T:System.SystemException">Не существует объект <see cref="T:System.Data.DataRow" /> для обновления.  
  
- или - 
Не существует объект <see cref="T:System.Data.DataTable" /> для обновления.  
  
- или - 
Не существует объект <see cref="T:System.Data.DataSet" /> для использования в качестве источника.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">Попытка выполнить оператор INSERT, UPDATE или DELETE привела к нулевому количеству обработанных записей.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Обработка данных (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public override int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Update(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataSet -&gt; int" Usage="dbDataAdapter.Update dataSet" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.Update(System.Data.DataSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">Объект <see cref="T:System.Data.DataSet" />, использованный для обновления источника данных.</param>
        <summary>Обновляет значения в базе данных, выполняя соответствующие операторы INSERT, UPDATE или DELETE для каждой вставленной, обновленной или удаленной строки в указанном <see cref="T:System.Data.DataSet" />.</summary>
        <returns>Количество строк, успешно обновленных из объекта <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда приложение вызывает <xref:System.Data.Common.DbDataAdapter.Update%2A> метод, объект <xref:System.Data.Common.DbDataAdapter> проверяет <xref:System.Data.DataRow.RowState%2A> свойство и выполняет необходимые инструкции INSERT, UPDATE или DELETE для каждой строки в зависимости от порядка индексов, настроенных в <xref:System.Data.DataSet>. Например, <xref:System.Data.Common.DbDataAdapter.Update%2A> может выполнить инструкцию DELETE, за которой следует инструкция INSERT, а затем другую инструкцию DELETE из-за упорядочения строк <xref:System.Data.DataTable>в.  
  
 Следует отметить, что эти инструкции не выполняются как пакетный процесс. Каждая строка обновляется по отдельности. Приложение может вызывать <xref:System.Data.DataSet.GetChanges%2A> метод в ситуациях, когда необходимо управлять последовательностью типов операторов (например, вставок перед обновлениями). Дополнительные сведения см. в разделе [Обновление источников данных с помощью DataAdapter](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Если инструкции INSERT, UPDATE или DELETE не указаны, <xref:System.Data.Common.DbDataAdapter.Update%2A> метод создает исключение. Однако можно создать <xref:System.Data.SqlClient.SqlCommandBuilder> объект или <xref:System.Data.OleDb.OleDbCommandBuilder> , чтобы автоматически формировать инструкции SQL для однотабличных `SelectCommand` обновлений, если задать свойство .NET Framework поставщика данных. Затем любые дополнительные инструкции SQL, которые вы не задаете, создаются **CommandBuilder**. Эта логика создания требует, <xref:System.Data.DataSet>чтобы сведения о ключевом столбце присутствовали в. Дополнительные сведения см. [в разделе Создание команд с помощью коммандбуилдерс](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A> Метод извлекает строки из таблицы, указанной в первом сопоставлении, перед выполнением обновления. Затем обновляет строку, используя значение <xref:System.Data.IDbCommand.UpdatedRowSource%2A> свойства. <xref:System.Data.Common.DbDataAdapter.Update%2A> Все возвращаемые дополнительные строки игнорируются.  
  
 После того как любые данные загружаются <xref:System.Data.DataSet>обратно в <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> , возникает событие, позволяющее пользователю проверить выверенную <xref:System.Data.DataSet> строку и все выходные параметры, возвращаемые командой. После успешного обновления строки принимаются изменения в этой строке.  
  
 При использовании <xref:System.Data.Common.DbDataAdapter.Update%2A>порядок выполнения выглядит следующим образом:  
  
1.  Значения в <xref:System.Data.DataRow> перемещаются в значения параметров.  
  
2.  Возникает событие <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>.  
  
3.  Команда выполняется.  
  
4.  Если команда имеет значение `FirstReturnedRecord`, первый возвращенный результат помещается <xref:System.Data.DataRow>в.  
  
5.  Если имеются выходные параметры, они помещаются в <xref:System.Data.DataRow>.  
  
6.  Возникает событие <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>.  
  
7.  Вызывается метод <xref:System.Data.DataRow.AcceptChanges%2A>.  
  
 Каждая команда, связанная <xref:System.Data.Common.DbDataAdapter> с, обычно имеет связанную с ней коллекцию параметров. Параметры сопоставлены с текущей строкой с `SourceColumn` помощью `SourceVersion` свойств и `Parameter` класса .NET Framework поставщика данных. `SourceColumn`ссылается на <xref:System.Data.DataTable> столбец <xref:System.Data.Common.DbDataAdapter> , который ссылается на получение значений параметров для текущей строки.  
  
 `SourceColumn`ссылается на несопоставленное имя столбца перед применением сопоставлений таблиц. Если `SourceColumn` ссылается на несуществующий столбец, то выполняемое действие зависит от одного из следующих <xref:System.Data.MissingMappingAction> значений.  
  
|Значение перечисления|Предпринятое действие|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Используйте имена исходных столбцов и имена таблиц в, <xref:System.Data.DataSet> если сопоставление отсутствует.|  
|`MissingMappingAction.Ignore`|<xref:System.SystemException> Создается. Если сопоставления заданы явно, отсутствие сопоставления для входного параметра обычно является результатом ошибки.|  
|`MissingMappingAction.Error`|<xref:System.SystemException> Создается.|  
  
 Свойство также используется для отображения значения выходных или входных и выходных параметров обратно `DataSet`в. `SourceColumn` Исключение создается, если оно ссылается на несуществующий столбец.  
  
 `SourceVersion` Свойство `Parameter` класса .NET Frameworkного поставщика данных определяет, следует ли использовать исходную, текущую или предложенную версию значения столбца. Эта возможность часто используется для включения исходных значений в предложение WHERE инструкции UPDATE для проверки нарушений оптимистической блокировки.  
  
> [!NOTE]
>  Если при обновлении строки возникает ошибка, возникает исключение и выполнение обновления прекращается. Чтобы продолжить операцию обновления без создания исключений при возникновении ошибки, задайте <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> для `true` свойства значение до вызова <xref:System.Data.Common.DbDataAdapter.Update%2A>. Вы также можете реагировать на ошибки на уровне отдельных строк в рамках `RowUpdated` события DataAdapter. Чтобы продолжить операцию обновления без `RowUpdated` создания исключения в событии, <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> задайте <xref:System.Data.Common.RowUpdatedEventArgs> для <xref:System.Data.UpdateStatus.Continue>свойства объекта значение.  
  
   
  
## Examples  
 В следующем примере производный класс <xref:System.Data.OleDb.OleDbDataAdapter>используется для обновления источника данных.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Исходная таблица является недопустимой.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">Попытка выполнить оператор INSERT, UPDATE или DELETE привела к нулевому количеству обработанных записей.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Обработка данных (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataTable dataTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataTable dataTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataTable ^ dataTable);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataTable -&gt; int" Usage="dbDataAdapter.Update dataTable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="dataTable">Объект <see cref="T:System.Data.DataTable" />, использованный для обновления источника данных.</param>
        <summary>Обновляет значения в базе данных, выполняя соответствующие операторы INSERT, UPDATE или DELETE для каждой вставленной, обновленной или удаленной строки в указанном <see cref="T:System.Data.DataTable" />.</summary>
        <returns>Количество строк, успешно обновленных из объекта <see cref="T:System.Data.DataTable" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда приложение вызывает <xref:System.Data.Common.DbDataAdapter.Update%2A> метод, объект <xref:System.Data.Common.DbDataAdapter> проверяет <xref:System.Data.DataRow.RowState%2A> свойство и выполняет необходимые инструкции INSERT, UPDATE или DELETE для каждой строки в зависимости от порядка индексов, настроенных в <xref:System.Data.DataSet>. Например, <xref:System.Data.Common.DbDataAdapter.Update%2A> может выполнить инструкцию DELETE, за которой следует инструкция INSERT, а затем другую инструкцию DELETE из-за упорядочения строк <xref:System.Data.DataTable>в.  
  
 Следует отметить, что эти инструкции не выполняются как пакетный процесс. Каждая строка обновляется по отдельности. Приложение может вызывать <xref:System.Data.DataSet.GetChanges%2A> метод в ситуациях, когда необходимо управлять последовательностью типов операторов (например, вставок перед обновлениями). Дополнительные сведения см. в разделе [Обновление источников данных с помощью DataAdapter](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Если инструкции INSERT, UPDATE или DELETE не указаны, <xref:System.Data.Common.DbDataAdapter.Update%2A> метод создает исключение. Однако можно создать <xref:System.Data.SqlClient.SqlCommandBuilder> объект или <xref:System.Data.OleDb.OleDbCommandBuilder> , чтобы автоматически формировать инструкции SQL для однотабличных `SelectCommand` обновлений, если задать свойство .NET Framework поставщика данных. Затем любые дополнительные инструкции SQL, которые вы не задаете, создаются **CommandBuilder**. Эта логика создания требует, <xref:System.Data.DataSet>чтобы сведения о ключевом столбце присутствовали в. Дополнительные сведения см. [в разделе Создание команд с помощью коммандбуилдерс](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A> Метод извлекает строки из таблицы, указанной в первом сопоставлении, перед выполнением обновления. Затем обновляет строку, используя значение <xref:System.Data.IDbCommand.UpdatedRowSource%2A> свойства. <xref:System.Data.Common.DbDataAdapter.Update%2A> Все возвращаемые дополнительные строки игнорируются.  
  
 После того как любые данные загружаются <xref:System.Data.DataSet>обратно в <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> , возникает событие, позволяющее пользователю проверить выверенную <xref:System.Data.DataSet> строку и все выходные параметры, возвращаемые командой. После успешного обновления строки принимаются изменения в этой строке.  
  
 При использовании <xref:System.Data.Common.DbDataAdapter.Update%2A>порядок выполнения выглядит следующим образом:  
  
1.  Значения в <xref:System.Data.DataRow> перемещаются в значения параметров.  
  
2.  Возникает событие <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>.  
  
3.  Команда выполняется.  
  
4.  Если команда имеет значение `FirstReturnedRecord`, первый возвращенный результат помещается <xref:System.Data.DataRow>в.  
  
5.  Если имеются выходные параметры, они помещаются в <xref:System.Data.DataRow>.  
  
6.  Возникает событие <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>.  
  
7.  Вызывается метод <xref:System.Data.DataRow.AcceptChanges%2A>.  
  
 Каждая команда, связанная <xref:System.Data.Common.DbDataAdapter> с, обычно имеет связанную с ней коллекцию параметров. Параметры сопоставлены с текущей строкой с `SourceColumn` помощью `SourceVersion` свойств и `Parameter` класса .NET Framework поставщика данных. `SourceColumn`ссылается на <xref:System.Data.DataTable> столбец <xref:System.Data.Common.DbDataAdapter> , который ссылается на получение значений параметров для текущей строки.  
  
 `SourceColumn`ссылается на несопоставленное имя столбца перед применением сопоставлений таблиц. Если `SourceColumn` ссылается на несуществующий столбец, то выполняемое действие зависит от одного из следующих <xref:System.Data.MissingMappingAction> значений.  
  
|Значение перечисления|Предпринятое действие|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Используйте имена исходных столбцов и имена таблиц в, <xref:System.Data.DataSet> если сопоставление отсутствует.|  
|`MissingMappingAction.Ignore`|<xref:System.SystemException> Создается. Если сопоставления заданы явно, отсутствие сопоставления для входного параметра обычно является результатом ошибки.|  
|`MissingMappingAction.Error`|<xref:System.SystemException> Создается.|  
  
 Свойство также используется для отображения значения выходных или входных и выходных параметров обратно `DataSet`в. `SourceColumn` Исключение создается, если оно ссылается на несуществующий столбец.  
  
 `SourceVersion` Свойство `Parameter` класса .NET Frameworkного поставщика данных определяет, следует ли использовать исходную, текущую или предложенную версию значения столбца. Эта возможность часто используется для включения исходных значений в предложение WHERE инструкции UPDATE для проверки нарушений оптимистической блокировки.  
  
> [!NOTE]
>  Если при обновлении строки возникает ошибка, возникает исключение и выполнение обновления прекращается. Чтобы продолжить операцию обновления без создания исключений при возникновении ошибки, задайте <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> для `true` свойства значение до вызова <xref:System.Data.Common.DbDataAdapter.Update%2A>. Вы также можете реагировать на ошибки на уровне отдельных строк в рамках `RowUpdated` события DataAdapter. Чтобы продолжить операцию обновления без `RowUpdated` создания исключения в событии, <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> задайте <xref:System.Data.Common.RowUpdatedEventArgs> для <xref:System.Data.UpdateStatus.Continue>свойства объекта значение.  
  
   
  
## Examples  
 В следующем примере производный класс <xref:System.Data.OleDb.OleDbDataAdapter>используется для обновления источника данных.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" /> не является допустимым.</exception>
        <exception cref="T:System.InvalidOperationException">Исходная таблица является недопустимой.</exception>
        <exception cref="T:System.SystemException">Не существует объект <see cref="T:System.Data.DataRow" /> для обновления.  
  
- или - 
Не существует объект <see cref="T:System.Data.DataTable" /> для обновления.  
  
-или- 
Не существует объект <see cref="T:System.Data.DataSet" /> для использования в качестве источника.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">Попытка выполнить оператор INSERT, UPDATE или DELETE привела к нулевому количеству обработанных записей.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Обработка данных (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="protected virtual int Update (System.Data.DataRow[] dataRows, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Update(class System.Data.DataRow[] dataRows, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Update (dataRows As DataRow(), tableMapping As DataTableMapping) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Update(cli::array &lt;System::Data::DataRow ^&gt; ^ dataRows, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataRow[] * System.Data.Common.DataTableMapping -&gt; int" Usage="dbDataAdapter.Update (dataRows, tableMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRows" Type="System.Data.DataRow[]" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRows">Массив объектов <see cref="T:System.Data.DataRow" />, использованный для обновления источника данных.</param>
        <param name="tableMapping">Используемая коллекция <see cref="P:System.Data.IDataAdapter.TableMappings" />.</param>
        <summary>Обновляет значения в базе данных, выполняя соответствующие операторы INSERT, UPDATE или DELETE для каждой вставленной, обновленной или удаленной строки в указанном массиве объектов <see cref="T:System.Data.DataSet" />.</summary>
        <returns>Количество строк, успешно обновленных из объекта <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда приложение вызывает <xref:System.Data.Common.DbDataAdapter.Update%2A> метод, объект <xref:System.Data.Common.DbDataAdapter> проверяет <xref:System.Data.DataRow.RowState%2A> свойство и выполняет необходимые инструкции INSERT, UPDATE или DELETE для каждой строки в зависимости от порядка индексов, настроенных в <xref:System.Data.DataSet>. Например, <xref:System.Data.Common.DbDataAdapter.Update%2A> может выполнить инструкцию DELETE, за которой следует инструкция INSERT, а затем другую инструкцию DELETE из-за упорядочения строк <xref:System.Data.DataTable>в.  
  
 Следует отметить, что эти инструкции не выполняются как пакетный процесс. Каждая строка обновляется по отдельности. Приложение может вызывать <xref:System.Data.DataSet.GetChanges%2A> метод в ситуациях, когда необходимо управлять последовательностью типов операторов (например, вставок перед обновлениями). Дополнительные сведения см. в разделе [Обновление источников данных с помощью DataAdapter](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Если инструкции INSERT, UPDATE или DELETE не указаны, <xref:System.Data.Common.DbDataAdapter.Update%2A> метод создает исключение. Однако можно создать <xref:System.Data.SqlClient.SqlCommandBuilder> объект или <xref:System.Data.OleDb.OleDbCommandBuilder> , чтобы автоматически формировать инструкции SQL для однотабличных `SelectCommand` обновлений, если задать свойство .NET Framework поставщика данных. Затем любые дополнительные инструкции SQL, которые вы не задаете, создаются **CommandBuilder**. Эта логика создания требует, <xref:System.Data.DataSet>чтобы сведения о ключевом столбце присутствовали в. Дополнительные сведения см. [в разделе Создание команд с помощью коммандбуилдерс](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A> Метод извлекает строки из таблицы, указанной в первом сопоставлении, перед выполнением обновления. Затем обновляет строку, используя значение <xref:System.Data.IDbCommand.UpdatedRowSource%2A> свойства. <xref:System.Data.Common.DbDataAdapter.Update%2A> Все возвращаемые дополнительные строки игнорируются.  
  
 После того как любые данные загружаются <xref:System.Data.DataSet>обратно в <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> , возникает событие, позволяющее пользователю проверить выверенную <xref:System.Data.DataSet> строку и все выходные параметры, возвращаемые командой. После успешного обновления строки принимаются изменения в этой строке.  
  
 При использовании <xref:System.Data.Common.DbDataAdapter.Update%2A>порядок выполнения выглядит следующим образом:  
  
1.  Значения в <xref:System.Data.DataRow> перемещаются в значения параметров.  
  
2.  Возникает событие <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>.  
  
3.  Команда выполняется.  
  
4.  Если команда имеет значение `FirstReturnedRecord`, первый возвращенный результат помещается <xref:System.Data.DataRow>в.  
  
5.  Если имеются выходные параметры, они помещаются в <xref:System.Data.DataRow>.  
  
6.  Возникает событие <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>.  
  
7.  Вызывается метод <xref:System.Data.DataRow.AcceptChanges%2A>.  
  
 Каждая команда, связанная <xref:System.Data.Common.DbDataAdapter> с, обычно имеет связанную с ней коллекцию параметров. Параметры сопоставлены с текущей строкой с `SourceColumn` помощью `SourceVersion` свойств и `Parameter` класса .NET Framework поставщика данных. `SourceColumn`ссылается на <xref:System.Data.DataTable> столбец <xref:System.Data.Common.DbDataAdapter> , который ссылается на получение значений параметров для текущей строки.  
  
 `SourceColumn`ссылается на несопоставленное имя столбца перед применением сопоставлений таблиц. Если `SourceColumn` ссылается на несуществующий столбец, то выполняемое действие зависит от одного из следующих <xref:System.Data.MissingMappingAction> значений.  
  
|Значение перечисления|Предпринятое действие|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Используйте имена исходных столбцов и имена таблиц в, <xref:System.Data.DataSet> если сопоставление отсутствует.|  
|`MissingMappingAction.Ignore`|<xref:System.SystemException> Создается. Если сопоставления заданы явно, отсутствие сопоставления для входного параметра обычно является результатом ошибки.|  
|`MissingMappingAction.Error`|<xref:System.SystemException> Создается.|  
  
 Свойство также используется для отображения значения выходных или входных и выходных параметров обратно `DataSet`в. `SourceColumn` Исключение создается, если оно ссылается на несуществующий столбец.  
  
 `SourceVersion` Свойство `Parameter` класса .NET Frameworkного поставщика данных определяет, следует ли использовать исходную, текущую или предложенную версию значения столбца. Эта возможность часто используется для включения исходных значений в предложение WHERE инструкции UPDATE для проверки нарушений оптимистической блокировки.  
  
> [!NOTE]
>  Если при обновлении строки возникает ошибка, возникает исключение и выполнение обновления прекращается. Чтобы продолжить операцию обновления без создания исключений при возникновении ошибки, задайте <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> для `true` свойства значение до вызова <xref:System.Data.Common.DbDataAdapter.Update%2A>. Вы также можете реагировать на ошибки на уровне отдельных строк в рамках `RowUpdated` события DataAdapter. Чтобы продолжить операцию обновления без `RowUpdated` создания исключения в событии, <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> задайте <xref:System.Data.Common.RowUpdatedEventArgs> для <xref:System.Data.UpdateStatus.Continue>свойства объекта значение.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" /> не является допустимым.</exception>
        <exception cref="T:System.InvalidOperationException">Исходная таблица является недопустимой.</exception>
        <exception cref="T:System.SystemException">Не существует объект <see cref="T:System.Data.DataRow" /> для обновления.  
  
- или - 
Не существует объект <see cref="T:System.Data.DataTable" /> для обновления.  
  
- или - 
Не существует объект <see cref="T:System.Data.DataSet" /> для использования в качестве источника.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">Попытка выполнить оператор INSERT, UPDATE или DELETE привела к нулевому количеству обработанных записей.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Обработка данных (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataSet dataSet, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataSet * string -&gt; int" Usage="dbDataAdapter.Update (dataSet, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">Объект <see cref="T:System.Data.DataSet" />, используемый для обновления источника данных.</param>
        <param name="srcTable">Имя исходной таблицы, используемое для сопоставления таблицы.</param>
        <summary>Обновляет значения в базе данных, выполняя соответствующие операторы INSERT, UPDATE или DELETE для каждой вставленной, обновленной или удаленной строки в <see cref="T:System.Data.DataSet" /> с заданным именем <see cref="T:System.Data.DataTable" />.</summary>
        <returns>Количество строк, успешно обновленных из объекта <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда приложение вызывает <xref:System.Data.Common.DbDataAdapter.Update%2A> метод, объект <xref:System.Data.Common.DbDataAdapter> проверяет <xref:System.Data.DataRow.RowState%2A> свойство и выполняет необходимые инструкции INSERT, UPDATE или DELETE для каждой строки в зависимости от порядка индексов, настроенных в <xref:System.Data.DataSet>. Например, <xref:System.Data.Common.DbDataAdapter.Update%2A> может выполнить инструкцию DELETE, за которой следует инструкция INSERT, а затем другую инструкцию DELETE из-за упорядочения строк <xref:System.Data.DataTable>в.  
  
 Следует отметить, что эти инструкции не выполняются как пакетный процесс. Каждая строка обновляется по отдельности. Приложение может вызвать <xref:System.Data.DataSet.GetChanges%2A> метод в ситуациях, когда необходимо управлять последовательностью типов инструкций (например, INSERT перед обновлением). Дополнительные сведения см. в разделе [Обновление источников данных с помощью DataAdapter](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Если инструкции INSERT, UPDATE или DELETE не указаны, <xref:System.Data.Common.DbDataAdapter.Update%2A> метод создает исключение. Однако можно создать <xref:System.Data.SqlClient.SqlCommandBuilder> объект или <xref:System.Data.OleDb.OleDbCommandBuilder> , чтобы автоматически формировать инструкции SQL для однотабличных `SelectCommand` обновлений, если задать свойство .NET Framework поставщика данных. Затем любые дополнительные инструкции SQL, которые вы не задаете, создаются **CommandBuilder**. Эта логика создания требует, <xref:System.Data.DataSet>чтобы сведения о ключевом столбце присутствовали в. Дополнительные сведения см. [в разделе Создание команд с помощью коммандбуилдерс](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 Метод поддерживает сценарии, в которых <xref:System.Data.DataSet> объект содержит <xref:System.Data.DataTable> несколько объектов, имена которых отличаются только регистром. <xref:System.Data.Common.DbDataAdapter.Update%2A> Если несколько таблиц с одинаковым именем, но с разным регистром, существуют `DataSet`в <xref:System.Data.Common.DbDataAdapter.Update%2A> , выполняет сравнение с учетом регистра для поиска соответствующей таблицы и создает исключение, если точное совпадение не существует. Это поведение C# демонстрируется в следующем коде.  
  
```  
DataSet ds = new DataSet();  
 ds.Tables.Add("aaa");  
 ds.Tables.Add("AAA");  
 adapter.Update(ds, "aaa"); // Updates "aaa", which already exists in the DataSet.  
 adapter.Update(ds, "AAA"); // Updates "AAA", which already exists in the DataSet.  
    adapter.Update(ds, "Aaa"); // Results in an exception.  
```  
  
 Если <xref:System.Data.Common.DbDataAdapter.Update%2A> вызывается <xref:System.Data.DataSet> и содержит только те <xref:System.Data.DataTable> , имя которых отличается от имени только регистром <xref:System.Data.DataTable> , то обновляется. В этом сценарии сравнение выполняется без учета регистра. Это поведение C# демонстрируется в следующем коде.  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
    adapter.Update(dataset, "AAA"); // Updates table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A> Метод извлекает строки из таблицы, указанной в первом сопоставлении, перед выполнением обновления. Затем обновляет строку, используя значение <xref:System.Data.IDbCommand.UpdatedRowSource%2A> свойства. <xref:System.Data.Common.DbDataAdapter.Update%2A> Все возвращаемые дополнительные строки игнорируются.  
  
 После того как любые данные загружаются <xref:System.Data.DataSet>обратно в <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> , возникает событие, позволяющее пользователю проверить выверенную <xref:System.Data.DataSet> строку и все выходные параметры, возвращаемые командой. После успешного обновления строки принимаются изменения в этой строке.  
  
 При использовании <xref:System.Data.Common.DbDataAdapter.Update%2A>порядок выполнения выглядит следующим образом:  
  
1.  Значения в <xref:System.Data.DataRow> перемещаются в значения параметров.  
  
2.  Возникает событие <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>.  
  
3.  Команда выполняется.  
  
4.  Если команда имеет значение `FirstReturnedRecord`, первый возвращенный результат помещается <xref:System.Data.DataRow>в.  
  
5.  Если имеются выходные параметры, они помещаются в <xref:System.Data.DataRow>.  
  
6.  Возникает событие <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>.  
  
7.  Вызывается метод <xref:System.Data.DataRow.AcceptChanges%2A>.  
  
 Каждая команда, связанная <xref:System.Data.Common.DbDataAdapter> с, обычно имеет связанную с ней коллекцию параметров. Параметры сопоставлены с текущей строкой с `SourceColumn` помощью `SourceVersion` свойств и `Parameter` класса .NET Framework поставщика данных. `SourceColumn`ссылается на <xref:System.Data.DataTable> столбец <xref:System.Data.Common.DbDataAdapter> , который ссылается на получение значений параметров для текущей строки.  
  
 `SourceColumn`ссылается на несопоставленное имя столбца перед применением сопоставлений таблиц. Если `SourceColumn` ссылается на несуществующий столбец, то выполняемое действие зависит от одного из следующих <xref:System.Data.MissingMappingAction> значений.  
  
|Значение перечисления|Предпринятое действие|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Используйте имена исходных столбцов и имена таблиц в, <xref:System.Data.DataSet> если сопоставление отсутствует.|  
|`MissingMappingAction.Ignore`|<xref:System.SystemException> Создается. Если сопоставления заданы явно, отсутствие сопоставления для входного параметра обычно является результатом ошибки.|  
|`MissingMappingAction.Error`|<xref:System.SystemException> Создается.|  
  
 Свойство также используется для отображения значения выходных или входных и выходных параметров обратно `DataSet`в. `SourceColumn` Исключение создается, если оно ссылается на несуществующий столбец.  
  
 `SourceVersion` Свойство `Parameter` класса .NET Frameworkного поставщика данных определяет, следует ли использовать исходную, текущую или предложенную версию значения столбца. Эта возможность часто используется для включения исходных значений в предложение WHERE инструкции UPDATE для проверки нарушений оптимистической блокировки.  
  
> [!NOTE]
>  Если при обновлении строки возникает ошибка, возникает исключение и выполнение обновления прекращается. Чтобы продолжить операцию обновления без создания исключений при возникновении ошибки, задайте <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> для `true` свойства значение до вызова <xref:System.Data.Common.DbDataAdapter.Update%2A>. Вы также можете реагировать на ошибки на уровне отдельных строк в рамках `RowUpdated` события DataAdapter. Чтобы продолжить операцию обновления без `RowUpdated` создания исключения в событии, <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> задайте <xref:System.Data.Common.RowUpdatedEventArgs> для <xref:System.Data.UpdateStatus.Continue>свойства объекта значение.  
  
   
  
## Examples  
 В следующем примере производный класс <xref:System.Data.OleDb.OleDbDataAdapter>используется для обновления источника данных.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update3#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update3/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update3#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" /> не является допустимым.</exception>
        <exception cref="T:System.InvalidOperationException">Исходная таблица является недопустимой.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">Попытка выполнить оператор INSERT, UPDATE или DELETE привела к нулевому количеству обработанных записей.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Обработка данных (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateBatchSize">
      <MemberSignature Language="C#" Value="public virtual int UpdateBatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 UpdateBatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UpdateBatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int UpdateBatchSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateBatchSize : int with get, set" Usage="System.Data.Common.DbDataAdapter.UpdateBatchSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, которое включает или отключает поддержку пакетной обработки и задает количество команд, которые могут выполняться в рамках одного пакета.</summary>
        <value>Количество строк, которые необходимо обработать с помощью одного пакета.  
  
 <list type="table"><listheader><term> Значение 
 </term><description> Действие 
 </description></listheader><item><term> 0 
 </term><description> Размер пакета не ограничен.  
  
 </description></item><item><term> 1 
 </term><description> Отключает пакетное обновление.  
  
 </description></item><item><term> &gt; 1 
 </term><description> Изменения отправляются с помощью пакетов, единовременное количество операций в которых определяется свойством <see cref="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" />.  
  
 </description></item></list>  

 При присвоении этому <see cref="P:System.Data.IDbCommand.UpdatedRowSource" /> свойству значения, отличного от 1, для всех команд <see cref="T:System.Data.Common.DbDataAdapter" /> , связанных с, свойство должно иметь значение **None** или **аутпутпараметерс**. В противном случае будет выдаваться исключение.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте свойство, чтобы обновить источник данных изменениями <xref:System.Data.DataSet>из. <xref:System.Data.Common.DbDataAdapter.UpdateBatchSize%2A> Если поставщик данных поддерживает пакетную обработку, это может повысить производительность приложения, уменьшая количество обращений к серверу. В ADO.NET 2,0 это свойство поддерживается для поставщиков данных .NET для SQL Server (SqlClient) и Oracle (OracleClient).  
  
 Выполнение очень больших пакетов может снизить производительность. Поэтому необходимо экспериментальным путем найти параметр оптимального размера пакета перед реализацией приложения.  
  
 Если в качестве значения задано число меньше нуля, будетсозданоисключение.<xref:System.ArgumentOutOfRangeException>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Обработка данных (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.UpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ UpdateCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.UpdateCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает команду, используемую для обновления записей в источнике данных.</summary>
        <value>Интерфейс <see cref="T:System.Data.IDbCommand" />, используемый во время применения метода <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> для обновления записей в источнике данных, соответствующих измененным строкам в наборе данных.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В случае <xref:System.Data.DataSet> <xref:System.Data.IDbDataAdapter.UpdateCommand%2A> , если это свойство не задано и сведения о первичном ключе имеются в, будет автоматически создан. <xref:System.Data.Common.DbDataAdapter.Update%2A>  
  
   
  
## Examples  
 В следующем примере создается производный класс <xref:System.Data.OleDb.OleDbDataAdapter> и задаются некоторые его свойства.  
  
 [!code-csharp[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.UpdateCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.UpdateCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Обработка данных (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
  </Members>
</Type>
