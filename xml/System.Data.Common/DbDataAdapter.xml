<Type Name="DbDataAdapter" FullName="System.Data.Common.DbDataAdapter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3db191c839c8f56032f735e1fccf95a42edd36ef" /><Meta Name="ms.sourcegitcommit" Value="0609891c89ddaa91e4c02970acb00072fcc29baf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="05/13/2019" /><Meta Name="ms.locfileid" Value="65558337" /></Metadata><TypeSignature Language="C#" Value="public abstract class DbDataAdapter : System.Data.Common.DataAdapter, ICloneable, System.Data.IDbDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DbDataAdapter extends System.Data.Common.DataAdapter implements class System.Data.IDataAdapter, class System.Data.IDbDataAdapter, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Data.Common.DbDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DbDataAdapter&#xA;Inherits DataAdapter&#xA;Implements ICloneable, IDbDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public ref class DbDataAdapter abstract : System::Data::Common::DataAdapter, ICloneable, System::Data::IDbDataAdapter" />
  <TypeSignature Language="F#" Value="type DbDataAdapter = class&#xA;    inherit DataAdapter&#xA;    interface IDbDataAdapter&#xA;    interface ICloneable&#xA;    interface IDataAdapter" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DataAdapter</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.IDataAdapter</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Data.IDbDataAdapter</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Помогает в реализации интерфейса <see cref="T:System.Data.IDbDataAdapter" />. Разработчики производных классов <see cref="T:System.Data.Common.DbDataAdapter" /> реализуют набор функций, обеспечивающий строгую типизацию, но наследуют большинство функций, необходимых для полной реализации **DataAdapter**.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter> Класс наследует от <xref:System.Data.Common.DataAdapter> и реализующий <xref:System.Data.IDbDataAdapter> интерфейс. Он помогает реализовать класс **DataAdapter** предназначен для использования с реляционной базой данных.  
  
 Приложение не создает экземпляр <xref:System.Data.Common.DbDataAdapter> напрямую, но создает экземпляр класса, который наследует от него.  
  
 Классы, наследующие <xref:System.Data.Common.DbDataAdapter> необходимо реализовать наследуемые члены и обычно определяются дополнительные члены для добавления функций конкретного поставщика. Например <xref:System.Data.Common.DbDataAdapter> класс определяет <xref:System.Data.IDbDataAdapter.SelectCommand%2A> свойство и <xref:System.Data.Common.DbDataAdapter> класс определяет восемь перегрузки <xref:System.Data.IDataAdapter.Fill%2A> метод. В свою очередь <xref:System.Data.OleDb.OleDbDataAdapter> класс наследует <xref:System.Data.Common.DbDataAdapter.Fill%2A> метода, а также определяет две дополнительные перегрузки <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> , которые принимают объект набора записей ADO в качестве параметра.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>При наследовании от <see cref="T:System.Data.Common.DbDataAdapter" /> класс, рекомендуется реализовать следующие конструкторы: 
 <list type="table"><listheader><term> Элемент 
 </term><description> Описание 
 </description></listheader><item><term> *Prv*DataAdapter() 
 </term><description> Инициализирует новый экземпляр класса *Prv*класс DataAdapter в среде.  
  
 </description></item><item><term> *Prv*DataAdapter (*Prv*команда *selectCommand*) 
 </term><description> Инициализирует новый экземпляр класса *Prv*класс DataAdapter в среде с заданным оператором SQL SELECT.  
  
 </description></item><item><term> *Prv*DataAdapter (строка *selectCommandText*, строка *selectConnectionString*) 
 </term><description> Инициализирует новый экземпляр класса *Prv*класс DataAdapter в среде с оператором SQL SELECT и строку подключения.  
  
 </description></item><item><term> *Prv*DataAdapter (строка *selectCommandText*, *Prv*подключения *selectConnection*) 
 </term><description> Инициализирует новый экземпляр класса *Prv*класс DataAdapter в среде с помощью инструкции SQL SELECT и *Prv*объект соединения.  
  
 </description></item></list>  

 Для обеспечения согласованности между поставщиками данных .NET Framework следует имя наследующие классы в форме *Prv*DataAdapter, где *Prv* — стандартный префикс, назначаемый всем классам в конкретных .NET Пространство имен поставщика данных платформы. Например, «Sql» является префиксом <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> в класс **System.Data.SqlClient** пространства имен.</para></block>
    <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
    <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see langword="DataAdapter" />.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbDataAdapter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DbDataAdapter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса **DataAdapter**.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При создании экземпляра <xref:System.Data.Common.DbDataAdapter>, следующие свойства чтения/записи присваиваются следующие начальные значения.  
  
|Свойства|Исходное значение|  
|----------------|-------------------|  
|<xref:System.Data.IDbDataAdapter.SelectCommand%2A>|Новый объект <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.IDbDataAdapter.InsertCommand%2A>|Новый объект <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.IDbDataAdapter.DeleteCommand%2A>|Новый объект <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.IDbDataAdapter.UpdateCommand%2A>|Новый объект <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  
|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  
  
 Можно изменить значения любого из этих свойств, вызвав его отдельно.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbDataAdapter (System.Data.Common.DbDataAdapter adapter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Data.Common.DbDataAdapter adapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (adapter As DbDataAdapter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DbDataAdapter(System::Data::Common::DbDataAdapter ^ adapter);" />
      <MemberSignature Language="F#" Value="new System.Data.Common.DbDataAdapter : System.Data.Common.DbDataAdapter -&gt; System.Data.Common.DbDataAdapter" Usage="new System.Data.Common.DbDataAdapter adapter" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="adapter" Type="System.Data.Common.DbDataAdapter" />
      </Parameters>
      <Docs>
        <param name="adapter">Объект <see langword="DataAdapter" /> объект, используемый для создания нового <see langword="DataAdapter" />.</param>
        <summary>Инициализирует новый экземпляр класса <see langword="DataAdapter" /> класса из существующего объекта того же типа.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта перегрузка <xref:System.Data.Common.DbDataAdapter> конструктор предназначен для использования поставщиком данных .NET Framework при реализации похожего конструктора для использования в реализации клона.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="AddToBatch">
      <MemberSignature Language="C#" Value="protected virtual int AddToBatch (System.Data.IDbCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 AddToBatch(class System.Data.IDbCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AddToBatch (command As IDbCommand) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int AddToBatch(System::Data::IDbCommand ^ command);" />
      <MemberSignature Language="F#" Value="abstract member AddToBatch : System.Data.IDbCommand -&gt; int&#xA;override this.AddToBatch : System.Data.IDbCommand -&gt; int" Usage="dbDataAdapter.AddToBatch command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.IDbCommand" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="command"><see cref="T:System.Data.IDbCommand" /> Для добавления в пакет.</param>
        <summary>Добавляет <see cref="T:System.Data.IDbCommand" /> для текущего пакета.</summary>
        <returns>Число команд в пакете перед добавлением <see cref="T:System.Data.IDbCommand" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В <xref:System.Data.Common.DbDataAdapter>, этот метод вызывает исключение <xref:System.NotSupportedException>. Классы, наследующие от <xref:System.Data.Common.DbDataAdapter> Переопределите этот метод, чтобы обеспечить поддержку для пакетов.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Адаптер не поддерживает пакеты.</exception>
        <block subset="none" type="overrides"><para>Этот метод защищен и предназначен для использования поставщиком данных .NET Framework.  
  
Если класс, наследуемый от <see cref="T:System.Data.Common.DbDataAdapter" /> поддерживает пакеты, что класс переопределяет этот метод, чтобы разрешить пользователям добавлять команды в пакет.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ClearBatch">
      <MemberSignature Language="C#" Value="protected virtual void ClearBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ClearBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.ClearBatch" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ClearBatch ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ClearBatch();" />
      <MemberSignature Language="F#" Value="abstract member ClearBatch : unit -&gt; unit&#xA;override this.ClearBatch : unit -&gt; unit" Usage="dbDataAdapter.ClearBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Удаляет все <see cref="T:System.Data.IDbCommand" /> объекты из пакета.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В <xref:System.Data.Common.DbDataAdapter>, этот метод вызывает исключение <xref:System.NotSupportedException>. Классы, наследующие от <xref:System.Data.Common.DbDataAdapter> Переопределите этот метод, чтобы обеспечить поддержку для пакетов.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Адаптер не поддерживает пакеты.</exception>
        <block subset="none" type="overrides"><para>Этот метод защищен и предназначен для использования поставщиком данных .NET Framework.  
  
Если класс, наследуемый от <see cref="T:System.Data.Common.DbDataAdapter" /> поддерживает пакеты, что класс переопределяет этот метод, чтобы разрешить пользователям удалять все команды из пакета.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatedEvent">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::RowUpdatedEventArgs ^ CreateRowUpdatedEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberSignature Language="F#" Value="abstract member CreateRowUpdatedEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatedEventArgs&#xA;override this.CreateRowUpdatedEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatedEventArgs" Usage="dbDataAdapter.CreateRowUpdatedEvent (dataRow, command, statementType, tableMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatedEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow"><see cref="T:System.Data.DataRow" /> Используется для обновления источника данных.</param>
        <param name="command"><see cref="T:System.Data.IDbCommand" /> Выполнен во время <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />.</param>
        <param name="statementType">Является ли команда обновление, вставка, удаление или инструкция SELECT.</param>
        <param name="tableMapping">Объект <see cref="T:System.Data.Common.DataTableMapping" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Common.RowUpdatedEventArgs" />.</summary>
        <returns>Новый экземпляр класса <see cref="T:System.Data.Common.RowUpdatedEventArgs" />.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>При переопределении метода <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> в производном классе, не забудьте вызвать базовый класс <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> метод.</para></block>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatingEvent">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::RowUpdatingEventArgs ^ CreateRowUpdatingEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberSignature Language="F#" Value="abstract member CreateRowUpdatingEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatingEventArgs&#xA;override this.CreateRowUpdatingEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatingEventArgs" Usage="dbDataAdapter.CreateRowUpdatingEvent (dataRow, command, statementType, tableMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatingEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow"><see cref="T:System.Data.DataRow" /> , Обновляет источник данных.</param>
        <param name="command"><see cref="T:System.Data.IDbCommand" /> , Выполняемая во время <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />.</param>
        <param name="statementType">Является ли команда обновление, вставка, удаление или инструкция SELECT.</param>
        <param name="tableMapping">Объект <see cref="T:System.Data.Common.DataTableMapping" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Common.RowUpdatingEventArgs" />.</summary>
        <returns>Новый экземпляр класса <see cref="T:System.Data.Common.RowUpdatingEventArgs" />.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>При переопределении метода <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> в производном классе, не забудьте вызвать базовый класс <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> метод.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultSourceTableName">
      <MemberSignature Language="C#" Value="public const string DefaultSourceTableName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DefaultSourceTableName" />
      <MemberSignature Language="DocId" Value="F:System.Data.Common.DbDataAdapter.DefaultSourceTableName" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultSourceTableName As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ DefaultSourceTableName;" />
      <MemberSignature Language="F#" Value="val mutable DefaultSourceTableName : string" Usage="System.Data.Common.DbDataAdapter.DefaultSourceTableName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Имя по умолчанию, используемые <see cref="T:System.Data.Common.DataAdapter" /> для сопоставления таблицы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 «Таблица», — это имя по умолчанию, используемые <xref:System.Data.Common.DataAdapter> для сопоставления таблицы.  
  
 <xref:System.Data.Common.DbDataAdapter.DefaultSourceTableName> Когда приложение добавляет сопоставление таблицы для использования с <xref:System.Data.Common.DbDataAdapter.Fill%2A>, но не указывает <xref:System.Data.DataTable> имя.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.DeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ DeleteCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.DeleteCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает команду для удаления записей из набора данных.</summary>
        <value><see cref="T:System.Data.IDbCommand" /> Используется во время <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> для удаления записей в источнике данных, соответствующих удаленным строкам в наборе данных.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Во время <xref:System.Data.Common.DbDataAdapter.Update%2A>, если это свойство не задано и сведения о первичном ключе присутствует в <xref:System.Data.DataSet>, <xref:System.Data.IDbDataAdapter.DeleteCommand%2A> создается автоматически.  
  
   
  
## Examples  
 В следующем примере создается производный класс <xref:System.Data.OleDb.OleDbDataAdapter> и задаются некоторые его свойства.  
  
 [!code-csharp[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Обработка данных (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="dbDataAdapter.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.</param>
        <summary>Освобождает неуправляемые ресурсы, используемые объектом <see cref="T:System.Data.Common.DbDataAdapter" />, а при необходимости освобождает также управляемые ресурсы.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ExecuteBatch">
      <MemberSignature Language="C#" Value="protected virtual int ExecuteBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 ExecuteBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.ExecuteBatch" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ExecuteBatch () As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int ExecuteBatch();" />
      <MemberSignature Language="F#" Value="abstract member ExecuteBatch : unit -&gt; int&#xA;override this.ExecuteBatch : unit -&gt; int" Usage="dbDataAdapter.ExecuteBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Выполняет текущий пакет.</summary>
        <returns>Возвращаемое значение из последней команды в пакете.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В <xref:System.Data.Common.DbDataAdapter>, этот метод вызывает исключение <xref:System.NotSupportedException>. Классы, наследующие от <xref:System.Data.Common.DbDataAdapter> Переопределите этот метод, чтобы обеспечить поддержку для пакетов.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Этот метод защищен и предназначен для использования поставщиком данных .NET Framework.  
  
Если класс, наследуемый от <see cref="T:System.Data.Common.DbDataAdapter" /> поддерживает пакеты, что класс переопределяет этот метод, чтобы разрешить пользователям выполнять пакет. Реализация этого метода объединяет команды в адаптер в пакете, а затем выполняет пакет и возвращает возвращаемое значение пакета.</para></block>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Обработка данных (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Fill">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Заполняет <see cref="T:System.Data.DataSet" /> или <see cref="T:System.Data.DataTable" />.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public override int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet -&gt; int" Usage="dbDataAdapter.Fill dataSet" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.Fill(System.Data.DataSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">Объект <see cref="T:System.Data.DataSet" /> для заполнения записями и, при необходимости схемы.</param>
        <summary>Добавляет или обновляет строки в <see cref="T:System.Data.DataSet" />.</summary>
        <returns>Число строк, успешно добавленных или обновленных в <see cref="T:System.Data.DataSet" />. Это не включает строки, которые воздействуют операторы, не возвращающие строк.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> Метод получает данные из источника данных, с помощью инструкции SELECT. <xref:System.Data.IDbConnection> Объект, связанный с инструкцией select должен быть допустимым, но его не должны быть открыты. Если <xref:System.Data.IDbConnection> закрыта перед <xref:System.Data.Common.DbDataAdapter.Fill%2A> — вызывается, он открывается для получения данных и затем закрывается. Если соединение открыто до <xref:System.Data.Common.DbDataAdapter.Fill%2A> является именем, он остается открытым.  
  
 Если произошла ошибка или исключение при заполнении таблиц данных, строки добавляются перед возникновением ошибки сохраняется в таблицах данных. В оставшейся части операция будет прервана.  
  
 Если команда не возвращает никаких строк, ни одной таблицы добавляются к <xref:System.Data.DataSet>, и исключение не создается.  
  
 Если <xref:System.Data.Common.DbDataAdapter> объект обнаруживает повторяющиеся столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последующих столбцов, используя шаблон "*columnname*1 «,»*columnname*2", " *columnname*3" и т. д. Если входные данные содержат безымянные столбцы, они помещаются в <xref:System.Data.DataSet> в соответствии с шаблоном «Column1», «Column2» и т. д.  
  
 Если указанный запрос возвращает несколько результатов, результирующий набор для каждой строки запроса, возвращающего помещается в отдельную таблицу. Дополнительные результирующие наборы именуются путем добавления целочисленного значения к указанным именем таблицы (например, «Таблица», «Table1», «Table2» и т. д.). Так как нет таблица создается для запроса, который не возвращает строки, если вы обрабатываете запрос insert, а затем запрос select, таблица, созданная для запроса select называется «Table», так как это первая созданная таблица. Приложений, использующих имена столбцов и таблиц следует убедиться, что конфликтов шаблонов именования.  
  
 Если инструкция SELECT, используемая для заполнения <xref:System.Data.DataSet> возвращает несколько результатов, например пакетные инструкции SQL, если один из результатов содержит ошибку, все последующие результаты пропускаются и не добавляются <xref:System.Data.DataSet>.  
  
 При использовании последующих <xref:System.Data.Common.DbDataAdapter.Fill%2A> вызовы, чтобы обновить содержимое <xref:System.Data.DataSet>, необходимо выполнить два условия:  
  
1.  Инструкция SQL должна совпадать с той, изначально используется для заполнения <xref:System.Data.DataSet>.  
  
2.  **Ключ** сведения о столбце должен присутствовать.  
  
 Если сведения о первичном ключе присутствует, все повторяющиеся строки согласовываются и появляются только один раз в <xref:System.Data.DataTable> , соответствующий <xref:System.Data.DataSet>. Может задать сведения о первичном ключе, либо с помощью <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, указав <xref:System.Data.DataTable.PrimaryKey%2A> свойство <xref:System.Data.DataTable>, или установив <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> свойства `AddWithKey`.  
  
 Если `SelectCommand` возвращает результаты OUTER JOIN, то `DataAdapter` не задает значение <xref:System.Data.DataTable.PrimaryKey%2A> для результирующего объекта <xref:System.Data.DataTable>. Необходимо явно определить первичный ключ, чтобы убедиться, что повторяющиеся строки обработаны правильно. Дополнительные сведения см. в разделе [Определение первичных ключей](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  При обработке пакетных инструкций SQL, возвращающих несколько результатов, реализация <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> для поставщику данных .NET Framework для OLE DB возвращает сведения схемы только для первого результата. Чтобы получить сведения о схеме для нескольких результатов, используйте <xref:System.Data.Common.DbDataAdapter.Fill%2A> с <xref:System.Data.MissingSchemaAction> присвоено `AddWithKey`.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataTable dataTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataTable dataTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataTable ^ dataTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable -&gt; int" Usage="dbDataAdapter.Fill dataTable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="dataTable">Имя <see cref="T:System.Data.DataTable" /> использовать для сопоставления таблицы.</param>
        <summary>Добавляет или обновляет строки в указанном диапазоне в <see cref="T:System.Data.DataSet" /> для получения соответствия строкам в источнике данных с помощью <see cref="T:System.Data.DataTable" /> имя.</summary>
        <returns>Число строк, успешно добавленных или обновленных в <see cref="T:System.Data.DataSet" />. Это не включает строки, которые воздействуют операторы, не возвращающие строк.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> Метод извлекает строки из источника данных, с помощью инструкции SELECT, указанной и связанной <xref:System.Data.IDbDataAdapter.SelectCommand%2A> свойство. Объект соединения, связанный с инструкцией SELECT должен быть допустимым, но его не должны быть открыты. Если подключение закрывается до <xref:System.Data.Common.DbDataAdapter.Fill%2A> является именем, он открывается для получения данных, затем закрывается. Если соединение открыто до <xref:System.Data.Common.DbDataAdapter.Fill%2A> является именем, он остается открытым.  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> Операция затем добавляет строки в место назначения <xref:System.Data.DataTable> объекты в <xref:System.Data.DataSet>, создавая <xref:System.Data.DataTable> объекты, если они еще не существуют. При создании <xref:System.Data.DataTable> объектов, <xref:System.Data.Common.DbDataAdapter.Fill%2A> операции, как правило, создает только метаданные имени столбца. Тем не менее если <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> свойству `AddWithKey`, также создаются соответствующие первичные ключи и ограничения.  
  
 Если <xref:System.Data.Common.DbDataAdapter> встречает идентичные столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последующих столбцов, используя шаблон "*columnname*1", "*columnname*2», «*columnname*3" и т. д. Если входные данные содержат безымянные столбцы, они помещаются в <xref:System.Data.DataSet> в соответствии с шаблоном «Column1», «Column2» и т. д. При добавлении нескольких результирующих наборов <xref:System.Data.DataSet> каждый набор результатов помещается в отдельную таблицу.  
  
 Перегрузка <xref:System.Data.Common.DbDataAdapter.Fill%2A> , принимающий `DataTable` как параметр получает только первый результат. Используйте перегрузку <xref:System.Data.Common.DbDataAdapter.Fill%2A> , принимающий `DataSet` как параметр, чтобы получить несколько результатов.  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> Метод поддерживает сценарии где <xref:System.Data.DataSet> содержит несколько <xref:System.Data.DataTable> объекты, имена которых отличаются только регистром. В таких ситуациях <xref:System.Data.Common.DbDataAdapter.Fill%2A> выполняет сравнение с учетом регистра для поиска соответствующей таблицы и создает новую таблицу, если точного соответствия не существует. Следующий код C# демонстрирует это поведение.  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
 dataset.Tables.Add("AAA");  
 adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
    adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Если <xref:System.Data.Common.DbDataAdapter.Fill%2A> вызывается и <xref:System.Data.DataSet> содержит только одну <xref:System.Data.DataTable> , имена которых отличаются только регистром, который <xref:System.Data.DataTable> обновляется. В этом случае сравнение выполняется без учета регистра. Следующий код C# демонстрирует это поведение.  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
    adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Можно использовать <xref:System.Data.Common.DbDataAdapter.Fill%2A> метод несколько раз на том же <xref:System.Data.DataTable>. Если существует первичный ключ, входящие строки объединяются с совпадающие строки, которые уже существуют. Если первичный ключ отсутствует, входящие строки добавляются к <xref:System.Data.DataTable>.  
  
 Если `SelectCommand` возвращает результаты OUTER JOIN, то `DataAdapter` не задает значение <xref:System.Data.DataTable.PrimaryKey%2A> для результирующего объекта <xref:System.Data.DataTable>. Необходимо явно определить первичный ключ, чтобы убедиться, что повторяющиеся строки обработаны правильно. Дополнительные сведения см. в разделе [Определение первичных ключей](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  При обработке пакетных инструкций SQL, возвращающих несколько результатов, реализация <xref:System.Data.Common.DbDataAdapter.Fill%2A> и <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> для данных .NET Framework, поставщик возвращает сведения схемы для только первый результат.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Исходная таблица является недопустимым.</exception>
        <block subset="none" type="overrides"><para>Эта перегрузка <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" /> метод является защищенным и предназначен для использования поставщиком данных .NET Framework.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataSet dataSet, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * string -&gt; int" Usage="dbDataAdapter.Fill (dataSet, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">Объект <see cref="T:System.Data.DataSet" /> для заполнения записями и, при необходимости схемы.</param>
        <param name="srcTable">Имя исходной таблицы, используемое для сопоставления таблиц.</param>
        <summary>Добавляет или обновляет строки в <see cref="T:System.Data.DataSet" /> для получения соответствия строкам в источнике данных с помощью <see cref="T:System.Data.DataSet" /> и <see cref="T:System.Data.DataTable" /> имена.</summary>
        <returns>Число строк, успешно добавленных или обновленных в <see cref="T:System.Data.DataSet" />. Это не включает строки, которые воздействуют операторы, не возвращающие строк.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> Метод получает данные из источника данных, с помощью инструкции SELECT. <xref:System.Data.IDbConnection> Объект, связанный с инструкцией select должен быть допустимым, но его не должны быть открыты. Если <xref:System.Data.IDbConnection> закрыта перед <xref:System.Data.Common.DbDataAdapter.Fill%2A> является именем, он открывается для получения данных, затем закрывается. Если соединение открыто до <xref:System.Data.Common.DbDataAdapter.Fill%2A> является именем, он остается открытым.  
  
 Если команда не возвращает никаких строк, ни одной таблицы добавляются к <xref:System.Data.DataSet>, и исключение не создается.  
  
 Если <xref:System.Data.Common.DbDataAdapter> объект обнаруживает повторяющиеся столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последующих столбцов, используя шаблон «столбцами columnname1», «columnname2», «имя_столбца3» и т. д. Если входные данные содержат безымянные столбцы, они помещаются в <xref:System.Data.DataSet> в соответствии с шаблоном «Column1», «Column2» и т. д.  
  
 Если указанный запрос возвращает несколько результатов, каждый результирующий набор помещается в отдельную таблицу. Дополнительные результирующие наборы именуются путем добавления целочисленного значения к указанным именем таблицы (например, «Таблица», «Table1», «Table2» и т. д.). Так как не таблица создается для запроса, который не возвращает строки, если бы запрос insert, а затем запрос select, таблица, созданная для запроса select будет называться «Таблица», так как это первая созданная таблица. Приложений, использующих имена столбцов и таблиц следует убедиться, что конфликтов шаблонов именования.  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> Метод поддерживает сценарии где <xref:System.Data.DataSet> содержит несколько <xref:System.Data.DataTable> объекты, имена которых отличаются только регистром. В таких ситуациях <xref:System.Data.Common.DbDataAdapter.Fill%2A> выполняет сравнение с учетом регистра для поиска соответствующей таблицы и создает новую таблицу, если точного соответствия не существует. Следующий код C# демонстрирует это поведение.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Если <xref:System.Data.Common.DbDataAdapter.Fill%2A> вызывается и <xref:System.Data.DataSet> содержит только одну <xref:System.Data.DataTable> , имена которых отличаются только регистром, который <xref:System.Data.DataTable> обновляется. В этом случае сравнение выполняется без учета регистра. Следующий код C# демонстрирует это поведение.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Если произошла ошибка или исключение при заполнении таблиц данных, строки добавляются перед возникновением ошибки сохраняется в таблицах данных. В оставшейся части операция будет прервана.  
  
 Если инструкция SELECT, используемая для заполнения <xref:System.Data.DataSet> возвращает несколько результатов, такие как пакетный оператор SQL, следует учитывать следующее:  
  
-   Если один из результатов содержит ошибку, все последующие результаты, пропущен и не добавляются в <xref:System.Data.DataSet>.  
  
 При использовании последующих <xref:System.Data.Common.DbDataAdapter.Fill%2A> вызовы, чтобы обновить содержимое <xref:System.Data.DataSet>, необходимо выполнить два условия:  
  
1.  Инструкция SQL должна совпадать с той, изначально используется для заполнения <xref:System.Data.DataSet>.  
  
2.  **Ключ** сведения о столбце должен присутствовать. Если сведения о первичном ключе присутствует, все повторяющиеся строки согласовываются и появляются только один раз в <xref:System.Data.DataTable> , соответствующий <xref:System.Data.DataSet>. Может задать сведения о первичном ключе, либо с помощью <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, указав <xref:System.Data.DataTable.PrimaryKey%2A> свойство <xref:System.Data.DataTable>, или установив <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> свойства `AddWithKey`.  
  
 Если `SelectCommand` возвращает результаты OUTER JOIN, то `DataAdapter` не задает значение <xref:System.Data.DataTable.PrimaryKey%2A> для результирующего объекта <xref:System.Data.DataTable>. Необходимо явно определить первичный ключ, чтобы убедиться, что повторяющиеся строки обработаны правильно. Дополнительные сведения см. в разделе [Определение первичных ключей](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  При обработке пакетных инструкций SQL, возвращающих несколько результатов, реализация <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> для поставщику данных .NET Framework для OLE DB возвращает сведения схемы только для первого результата. Чтобы получить сведения о схеме для нескольких результатов, используйте <xref:System.Data.Common.DbDataAdapter.Fill%2A> с <xref:System.Data.MissingSchemaAction> присвоено `AddWithKey`.  
  
   
  
## Examples  
 В следующем примере используется производный класс <xref:System.Data.OleDb.OleDbDataAdapter>, для заполнения <xref:System.Data.DataSet> со строками из таблицы categories. В этом примере предполагается, что вы создали <xref:System.Data.OleDb.OleDbDataAdapter> и <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Fill2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Fill2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">Исходная таблица является недопустимым.</exception>
        <block subset="none" type="overrides"><para>При переопределении метода <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> в производном классе, не забудьте вызвать базовый класс <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> метод.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDataReader dataReader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable dataTable, class System.Data.IDataReader dataReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataTable ^ dataTable, System::Data::IDataReader ^ dataReader);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable * System.Data.IDataReader -&gt; int" Usage="dbDataAdapter.Fill (dataTable, dataReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="dataReader" Type="System.Data.IDataReader" Index="1" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="dataTable">Объект <see cref="T:System.Data.DataTable" /> для заполнения записями и, при необходимости схемы.</param>
        <param name="dataReader">Имя <see cref="T:System.Data.IDataReader" />.</param>
        <summary>Добавляет или обновляет строки в <see cref="T:System.Data.DataTable" /> для получения соответствия строкам в источнике данных, используя указанный <see cref="T:System.Data.DataTable" /> и <see cref="T:System.Data.IDataReader" /> имена.</summary>
        <returns>Число строк, успешно добавленных или обновленных в <see cref="T:System.Data.DataTable" />. Это не включает строки, которые воздействуют операторы, не возвращающие строк.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable dataTable, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataTable ^ dataTable, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataTable, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTable">Объект <see cref="T:System.Data.DataTable" /> для заполнения записями и, при необходимости схемы.</param>
        <param name="command">Оператор SQL SELECT используется для получения строк из источника данных.</param>
        <param name="behavior">Одно из значений перечисления <see cref="T:System.Data.CommandBehavior" />.</param>
        <summary>Добавляет или обновляет строки в <see cref="T:System.Data.DataTable" /> для получения соответствия строкам в источнике данных, используя указанный <see cref="T:System.Data.DataTable" />, <see cref="T:System.Data.IDbCommand" /> и <see cref="T:System.Data.CommandBehavior" />.</summary>
        <returns>Число строк, успешно добавленных или обновленных в <see cref="T:System.Data.DataTable" />. Это не включает строки, которые воздействуют операторы, не возвращающие строк.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> Метод извлекает строки из источника данных, с помощью инструкции SELECT, указанной и связанной <xref:System.Data.IDbDataAdapter.SelectCommand%2A> свойство. Объект соединения, связанный с инструкцией SELECT должен быть допустимым, но его не должны быть открыты. Если подключение закрывается до <xref:System.Data.Common.DbDataAdapter.Fill%2A> — вызывается, он открывается для получения данных и затем закрывается. Если соединение открыто до <xref:System.Data.Common.DbDataAdapter.Fill%2A> является именем, он остается открытым.  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> Операция затем добавляет строки в указанное место назначения <xref:System.Data.DataTable> объекта в <xref:System.Data.DataSet>, создавая <xref:System.Data.DataTable> объекта, если он еще не существует. При создании <xref:System.Data.DataTable> объекта, <xref:System.Data.Common.DbDataAdapter.Fill%2A> операции, как правило, создает только метаданные имени столбца. Тем не менее если <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> свойству `AddWithKey`, также создаются соответствующие первичные ключи и ограничения.  
  
 Если <xref:System.Data.Common.DbDataAdapter> объект обнаруживает повторяющиеся столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последующих столбцов, используя шаблон "*columnname*1", "*columnname*2 «, "*columnname*3», и т. д. Если входные данные содержат безымянные столбцы, они помещаются в <xref:System.Data.DataSet> в соответствии с шаблоном «Column1», «Column2» и т. д.  
  
 Перегрузка <xref:System.Data.Common.DbDataAdapter.Fill%2A> , принимающий `DataTable` как параметр получает только первый результат. Используйте перегрузку <xref:System.Data.Common.DbDataAdapter.Fill%2A> , принимающий `DataSet` как параметр, чтобы получить несколько результатов.  
  
 Можно использовать <xref:System.Data.Common.DbDataAdapter.Fill%2A> метод несколько раз на том же <xref:System.Data.DataTable>. Если существует первичный ключ, входящие строки объединяются с совпадающие строки, которые уже существуют. Если первичный ключ отсутствует, входящие строки добавляются к <xref:System.Data.DataTable>.  
  
 Если `SelectCommand` возвращает результаты OUTER JOIN, то `DataAdapter` не задает значение <xref:System.Data.DataTable.PrimaryKey%2A> для результирующего объекта <xref:System.Data.DataTable>. Необходимо явно определить первичный ключ, чтобы убедиться, что повторяющиеся строки обработаны правильно. Дополнительные сведения см. в разделе [Определение первичных ключей](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  При обработке пакетных инструкций SQL, возвращающих несколько результатов, реализация <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> для поставщику данных .NET Framework для OLE DB возвращает сведения схемы только для первого результата. Чтобы получить сведения о схеме для нескольких результатов, используйте <xref:System.Data.Common.DbDataAdapter.Fill%2A> с <xref:System.Data.MissingSchemaAction> присвоено `AddWithKey`.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Эта перегрузка <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" /> метод является защищенным и предназначен для использования поставщиком данных .NET Framework.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (int startRecord, int maxRecords, params System.Data.DataTable[] dataTables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(int32 startRecord, int32 maxRecords, class System.Data.DataTable[] dataTables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Fill (startRecord As Integer, maxRecords As Integer, ParamArray dataTables As DataTable()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(int startRecord, int maxRecords, ... cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables);" />
      <MemberSignature Language="F#" Value="override this.Fill : int * int * System.Data.DataTable[] -&gt; int" Usage="dbDataAdapter.Fill (startRecord, maxRecords, dataTables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startRecord" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="maxRecords" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="dataTables" Type="System.Data.DataTable[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-2.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startRecord">Отсчитываемый от нуля номер записи для запуска с.</param>
        <param name="maxRecords">Максимальное число извлекаемых записей.</param>
        <param name="dataTables"><see cref="T:System.Data.DataTable" /> Для заполнения из источника данных.</param>
        <summary>Добавляет или обновляет строки в <see cref="T:System.Data.DataTable" /> для получения соответствия строкам в источнике данных, начиная с указанной записи и вплоть до указанное максимальное количество записей.</summary>
        <returns>Число строк, успешно добавленных или обновленных в <see cref="T:System.Data.DataTable" />. Это значение не включает строки, которые воздействуют операторы, не возвращающие строк.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DataAdapter.Fill%2A> Метод извлекает строки из источника данных, с помощью инструкции SELECT, указанной и связанной <xref:System.Data.IDbDataAdapter.SelectCommand%2A> свойство. Объект соединения, связанный с инструкцией SELECT должен быть допустимым, но его не должны быть открыты. Если подключение закрывается до <xref:System.Data.Common.DataAdapter.Fill%2A> — вызывается, он открывается для получения данных и затем закрывается. Если соединение открыто до <xref:System.Data.Common.DataAdapter.Fill%2A> является именем, он остается открытым.  
  
 <xref:System.Data.Common.DataAdapter.Fill%2A> Операция затем добавляет строки в место назначения <xref:System.Data.DataTable> объекты в <xref:System.Data.DataSet>, создавая <xref:System.Data.DataTable> объекты, если они еще не существуют. При создании <xref:System.Data.DataTable> объектов, <xref:System.Data.Common.DataAdapter.Fill%2A> операции, как правило, создает только метаданные имени столбца. Тем не менее если <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> свойству `AddWithKey`, также создаются соответствующие первичные ключи и ограничения.  
  
 Если `SelectCommand` возвращает результаты OUTER JOIN, то `DataAdapter` не задает значение <xref:System.Data.DataTable.PrimaryKey%2A> для результирующего объекта <xref:System.Data.DataTable>. Необходимо явно определить первичный ключ, чтобы убедиться, что повторяющиеся строки обработаны правильно. Дополнительные сведения см. в разделе [Определение первичных ключей](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
 Если адаптер данных обнаруживает повторяющиеся столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последующих столбцов, используя шаблон «столбцами columnname1», «columnname2», «имя_столбца3» и т. д. Если входные данные содержат безымянные столбцы, они помещаются в <xref:System.Data.DataSet> в соответствии с шаблоном «Column1», «Column2» и т. д. При добавлении нескольких результирующих наборов <xref:System.Data.DataSet>, каждый набор результатов помещается в отдельную таблицу. Дополнительные результирующие наборы именуются путем добавления целочисленного значения к указанным именем таблицы (например, «Таблица», «Table1», «Table2» и т. д.). Приложений, использующих имена столбцов и таблиц следует убедиться, что конфликтов шаблонов именования.  
  
 Если инструкция SELECT, используемая для заполнения <xref:System.Data.DataSet> возвращает несколько результатов, например пакетные инструкции SQL, если один из результатов содержит ошибку, все последующие результаты, пропущен и не добавляются в <xref:System.Data.DataSet>.  
  
 Можно использовать <xref:System.Data.Common.DataAdapter.Fill%2A> метод несколько раз на том же <xref:System.Data.DataTable>. Если существует первичный ключ, входящие строки объединяются с совпадающие строки, которые уже существуют. Если первичный ключ отсутствует, входящие строки добавляются к <xref:System.Data.DataTable>.  
  
> [!NOTE]
>  При обработке пакетных инструкций SQL, возвращающих несколько результатов, реализация <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> для поставщику данных .NET Framework для OLE DB возвращает сведения схемы только для первого результата. Чтобы получить сведения о схеме для нескольких результатов, используйте <xref:System.Data.Common.DbDataAdapter.Fill%2A> с <xref:System.Data.MissingSchemaAction> присвоено `AddWithKey`.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataSet dataSet, int32 startRecord, int32 maxRecords, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet, int startRecord, int maxRecords, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * int * int * string -&gt; int" Usage="dbDataAdapter.Fill (dataSet, startRecord, maxRecords, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">Объект <see cref="T:System.Data.DataSet" /> для заполнения записями и, при необходимости схемы.</param>
        <param name="startRecord">Отсчитываемый от нуля номер записи для запуска с.</param>
        <param name="maxRecords">Максимальное число извлекаемых записей.</param>
        <param name="srcTable">Имя исходной таблицы, используемое для сопоставления таблиц.</param>
        <summary>Добавляет или обновляет строки в указанном диапазоне в <see cref="T:System.Data.DataSet" /> для получения соответствия строкам в источнике данных с помощью <see cref="T:System.Data.DataSet" /> и <see cref="T:System.Data.DataTable" /> имена.</summary>
        <returns>Число строк, успешно добавленных или обновленных в <see cref="T:System.Data.DataSet" />. Это не включает строки, которые воздействуют операторы, не возвращающие строк.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект `maxRecords` значение, равное 0 возвращает все записи, найденные после начальной записи. Если `maxRecords` больше, чем количество оставшихся строк только для оставшихся строк, возвращаются, а ошибка не выдается.  
  
 Если соответствующие команды select является оператором, который возвращает несколько результатов, <xref:System.Data.Common.DbDataAdapter.Fill%2A> применяется только `maxRecords` к первому результату.  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> Метод получает данные из источника данных, с помощью инструкции SELECT. <xref:System.Data.IDbConnection> Объект, связанный с инструкцией SELECT должен быть допустимым, но его не должны быть открыты. Если <xref:System.Data.IDbConnection> закрыта перед <xref:System.Data.Common.DbDataAdapter.Fill%2A> — вызывается, он открывается для получения данных и затем закрывается. Если соединение открыто до <xref:System.Data.Common.DbDataAdapter.Fill%2A> является именем, он остается открытым.  
  
 Если команда не возвращает никаких строк, ни одной таблицы добавляются к <xref:System.Data.DataSet>, но исключения не было.  
  
 Если <xref:System.Data.Common.DbDataAdapter> объект обнаруживает повторяющиеся столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последующих столбцов, используя шаблон "*columnname*1", "*columnname*2 «, "*columnname*3», и т. д. Если входные данные содержат безымянные столбцы, они помещаются в <xref:System.Data.DataSet> в соответствии с шаблоном «Column1», «Column2» и т. д.  
  
 Если указанный запрос возвращает несколько результатов, каждый результирующий набор помещается в отдельную таблицу. Дополнительные результирующие наборы именуются путем добавления целочисленного значения к указанным именем таблицы (например, «Таблица», «Table1», «Table2» и т. д.). Так как нет таблица создается для запроса, который не возвращает строки, если вы обрабатываете запрос insert, а затем запрос select, таблица, созданная для запроса select называется «Таблица», так как это первая созданная таблица. Приложений, использующих имена столбцов и таблиц следует убедиться, что конфликтов шаблонов именования.  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> Метод поддерживает сценарии где <xref:System.Data.DataSet> содержит несколько <xref:System.Data.DataTable> объекты, имена которых отличаются только регистром. В таких ситуациях <xref:System.Data.Common.DbDataAdapter.Fill%2A> выполняет сравнение с учетом регистра для поиска соответствующей таблицы и создает новую таблицу, если точного соответствия не существует. Следующий код C# демонстрирует это поведение.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Если <xref:System.Data.Common.DbDataAdapter.Fill%2A> вызывается и <xref:System.Data.DataSet> содержит только одну <xref:System.Data.DataTable> , имена которых отличаются только регистром, который <xref:System.Data.DataTable> обновляется. В этом случае сравнение выполняется без учета регистра. Следующий код C# демонстрирует это поведение.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Если произошла ошибка или исключение при заполнении таблиц данных, строки добавляются перед возникновением ошибки сохраняется в таблицах данных. В оставшейся части операция будет прервана.  
  
 Если инструкция SELECT, используемая для заполнения <xref:System.Data.DataSet> возвращает несколько результатов, например пакетные инструкции SQL, необходимо учитывать следующее:  
  
-   При обработке нескольких результатов пакетной инструкции SQL, `maxRecords` применяется только к первому результату. То же самое верно для строк, содержащий разбитые на разделы результаты (.NET Framework поставщик данных для OLE DB только). Результат верхнего уровня, ограничиваются `maxRecords`, но будут добавлены все дочерние строки.  
  
-   Если один из результатов содержит ошибку, все последующие результаты, пропущен и не добавляются в <xref:System.Data.DataSet>.  
  
 При использовании последующих <xref:System.Data.Common.DbDataAdapter.Fill%2A> вызовы, чтобы обновить содержимое <xref:System.Data.DataSet>, необходимо выполнить два условия:  
  
1.  Инструкция SQL должна совпадать с той, изначально используется для заполнения <xref:System.Data.DataSet>.  
  
2.  **Ключ** сведения о столбце должен присутствовать.  
  
 Если сведения о первичном ключе присутствует, все повторяющиеся строки согласовать и появляются только один раз в <xref:System.Data.DataTable> , соответствующий <xref:System.Data.DataSet>. Может задать сведения о первичном ключе, либо с помощью <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, указав <xref:System.Data.DataTable.PrimaryKey%2A> свойство <xref:System.Data.DataTable>, или установив <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> свойства `AddWithKey`.  
  
 Если `SelectCommand` возвращает результаты OUTER JOIN, то `DataAdapter` не задает значение <xref:System.Data.DataTable.PrimaryKey%2A> для результирующего объекта <xref:System.Data.DataTable>. Необходимо явно определить первичный ключ, чтобы убедиться, что повторяющиеся строки обработаны правильно. Дополнительные сведения см. в разделе [Определение первичных ключей](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  При обработке пакетных инструкций SQL, возвращающих несколько результатов, реализация <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> для поставщику данных .NET Framework для OLE DB возвращает сведения схемы только для первого результата. Чтобы получить сведения о схеме для нескольких результатов, используйте <xref:System.Data.Common.DbDataAdapter.Fill%2A> с <xref:System.Data.MissingSchemaAction> присвоено `AddWithKey`.  
  
> [!NOTE]
>  `DataSet` Не будет содержать больше, чем количество записей, обозначается `maxRecords`. Однако весь результирующий набор, созданный запросом по-прежнему возвращается с сервера.  
  
   
  
## Examples  
 В следующем примере используется производный класс <xref:System.Data.OleDb.OleDbDataAdapter>, для заполнения <xref:System.Data.DataSet> 15 строк, начиная со строки 10, из **категории** таблицы. В этом примере предполагается, что вы создали <xref:System.Data.OleDb.OleDbDataAdapter> и <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Fill3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Fill3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException"><see cref="T:System.Data.DataSet" /> не является допустимым.</exception>
        <exception cref="T:System.InvalidOperationException">Исходная таблица является недопустимым.  
  
-или- 
Подключение является недопустимым.</exception>
        <exception cref="T:System.InvalidCastException">Не удалось найти подключение.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="startRecord" /> Параметра меньше 0.  
  
-или- 
<paramref name="maxRecords" /> Параметра меньше 0.</exception>
        <block subset="none" type="overrides"><para>При переопределении метода <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> в производном классе, не забудьте вызвать базовый класс <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> метод.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataSet dataSet, string srcTable, System.Data.IDataReader dataReader, int startRecord, int maxRecords);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet, string srcTable, class System.Data.IDataReader dataReader, int32 startRecord, int32 maxRecords) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataSet ^ dataSet, System::String ^ srcTable, System::Data::IDataReader ^ dataReader, int startRecord, int maxRecords);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * string * System.Data.IDataReader * int * int -&gt; int" Usage="dbDataAdapter.Fill (dataSet, srcTable, dataReader, startRecord, maxRecords)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="srcTable" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="dataReader" Type="System.Data.IDataReader" Index="2" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="startRecord" Type="System.Int32" Index="3" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="maxRecords" Type="System.Int32" Index="4" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="dataSet">Объект <see cref="T:System.Data.DataSet" /> для заполнения записями и, при необходимости схемы.</param>
        <param name="srcTable">Имя <see cref="T:System.Data.DataTable" /> использовать для сопоставления таблицы.</param>
        <param name="dataReader">Имя <see cref="T:System.Data.IDataReader" />.</param>
        <param name="startRecord">Отсчитываемый от нуля номер записи для запуска с.</param>
        <param name="maxRecords">Максимальное число извлекаемых записей.</param>
        <summary>Добавляет или обновляет строки в указанном диапазоне в <see cref="T:System.Data.DataSet" /> для получения соответствия строкам в источнике данных с помощью <see cref="T:System.Data.DataSet" />, <see cref="T:System.Data.DataTable" />, и <see cref="T:System.Data.IDataReader" /> имена.</summary>
        <returns>Число строк, успешно добавленных или обновленных в <see cref="T:System.Data.DataSet" />. Это не включает строки, которые воздействуют операторы, не возвращающие строк.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable[] dataTables, int startRecord, int maxRecords, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable[] dataTables, int32 startRecord, int32 maxRecords, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Fill (dataTables As DataTable(), startRecord As Integer, maxRecords As Integer, command As IDbCommand, behavior As CommandBehavior) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables, int startRecord, int maxRecords, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable[] * int * int * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataTables, startRecord, maxRecords, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTables" Type="System.Data.DataTable[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="startRecord" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="maxRecords" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="command" Type="System.Data.IDbCommand" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dataTables"><see cref="T:System.Data.DataTable" /> Для заполнения из источника данных.</param>
        <param name="startRecord">Отсчитываемый от нуля номер записи для запуска с.</param>
        <param name="maxRecords">Максимальное число извлекаемых записей.</param>
        <param name="command"><see cref="T:System.Data.IDbCommand" /> Исполняемый для заполнения <see cref="T:System.Data.DataTable" /> объектов.</param>
        <param name="behavior">Одно из значений перечисления <see cref="T:System.Data.CommandBehavior" />.</param>
        <summary>Добавляет или обновляет строки в указанном диапазоне в <see cref="T:System.Data.DataSet" /> для получения соответствия строкам в источнике данных с помощью <see cref="T:System.Data.DataSet" /> и <see cref="T:System.Data.DataTable" /> имена.</summary>
        <returns>Число строк, добавленных или обновленных в таблицах данных.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект `maxRecords` значение, равное 0 возвращает все записи, найденные после начальной записи. Если `maxRecords` больше, чем количество оставшихся строк только для оставшихся строк возвращаются и ошибка не выдается.  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> Метод получает данные из источника данных, с помощью инструкции SELECT. <xref:System.Data.IDbConnection> Объект, связанный с инструкцией SELECT должен быть допустимым, но его не должны быть открыты. Если <xref:System.Data.IDbConnection> закрыта перед <xref:System.Data.Common.DbDataAdapter.Fill%2A> является именем, он открывается для получения данных, затем закрывается. Если соединение открыто до <xref:System.Data.Common.DbDataAdapter.Fill%2A> является именем, он остается открытым.  
  
 Если команда не возвращает никаких строк, ни одной таблицы добавляются к <xref:System.Data.DataSet>, но исключения не было.  
  
 Если <xref:System.Data.Common.DbDataAdapter> объект обнаруживает повторяющиеся столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последующих столбцов, используя шаблон "*columnname*1", "*columnname*2 «, "*columnname*3», и т. д. Если входные данные содержат безымянные столбцы, они помещаются в <xref:System.Data.DataSet> в соответствии с шаблоном «Column1», «Column2» и т. д.  
  
 Если указанный запрос возвращает несколько результатов, каждый результирующий набор помещается в отдельную таблицу. Дополнительные результирующие наборы именуются путем добавления целочисленного значения к указанным именем таблицы (например, «Таблица», «Table1», «Table2» и т. д.). Так как не таблица создается для запроса, который не возвращает строки, если бы запрос insert, а затем запрос select, таблица, созданная для запроса select будет называться «Таблица», так как это первая созданная таблица. Приложений, использующих имена столбцов и таблиц следует убедиться, что конфликтов шаблонов именования.  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> Метод поддерживает сценарии где <xref:System.Data.DataSet> содержит несколько <xref:System.Data.DataTable> объекты, имена которых отличаются только регистром. В таких ситуациях <xref:System.Data.Common.DbDataAdapter.Fill%2A> выполняет сравнение с учетом регистра для поиска соответствующей таблицы и создает новую таблицу, если точного соответствия не существует. Следующий код C# демонстрирует это поведение.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Если <xref:System.Data.Common.DbDataAdapter.Fill%2A> вызывается и <xref:System.Data.DataSet> содержит только одну <xref:System.Data.DataTable> , имена которых отличаются только регистром, который <xref:System.Data.DataTable> обновляется. В этом случае сравнение выполняется без учета регистра. Следующий код C# демонстрирует это поведение.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Если произошла ошибка или исключение при заполнении таблиц данных, строки добавляются перед возникновением ошибки сохраняется в таблицах данных. В оставшейся части операция будет прервана.  
  
 Если инструкция SELECT, используемая для заполнения <xref:System.Data.DataTable> объекты возвращает несколько результатов, такие как пакетный оператор SQL, следует учитывать следующее:  
  
-   При обработке нескольких результатов пакетной инструкции SQL, `maxRecords` применяется только к первому результату. То же самое верно для строк, содержащий разбитые на разделы результаты (.NET Framework поставщик данных для OLE DB только). Результат верхнего уровня, ограничиваются `maxRecords`, но будут добавлены все дочерние строки.  
  
-   Если один из результатов содержит ошибку, пропускаются все последующие результаты.  
  
> [!NOTE]
>  `DataSet` Не будет содержать больше, чем количество записей, обозначается `maxRecords`. Однако весь результирующий набор, созданный запросом по-прежнему возвращается с сервера.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException"><see cref="T:System.Data.DataSet" /> не является допустимым.</exception>
        <exception cref="T:System.InvalidOperationException">Исходная таблица является недопустимым.  
  
-или- 
Подключение является недопустимым.</exception>
        <exception cref="T:System.InvalidCastException">Не удалось найти подключение.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="startRecord" /> Параметра меньше 0.  
  
-или- 
<paramref name="maxRecords" /> Параметра меньше 0.</exception>
        <block subset="none" type="overrides"><para>При переопределении метода <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> в производном классе, не забудьте вызвать базовый класс <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> метод.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet, int32 startRecord, int32 maxRecords, string srcTable, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataSet ^ dataSet, int startRecord, int maxRecords, System::String ^ srcTable, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * int * int * string * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataSet, startRecord, maxRecords, srcTable, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataSet">Объект <see cref="T:System.Data.DataSet" /> для заполнения записями и, при необходимости схемы.</param>
        <param name="startRecord">Отсчитываемый от нуля номер записи для запуска с.</param>
        <param name="maxRecords">Максимальное число извлекаемых записей.</param>
        <param name="srcTable">Имя исходной таблицы, используемое для сопоставления таблиц.</param>
        <param name="command">Оператор SQL SELECT используется для получения строк из источника данных.</param>
        <param name="behavior">Одно из значений перечисления <see cref="T:System.Data.CommandBehavior" />.</param>
        <summary>Добавляет или обновляет строки в указанном диапазоне в <see cref="T:System.Data.DataSet" /> для получения соответствия строкам в источнике данных с помощью <see cref="T:System.Data.DataSet" /> и исходные имена таблиц, командную строку и поведение команды.</summary>
        <returns>Число строк, успешно добавленных или обновленных в <see cref="T:System.Data.DataSet" />. Это не включает строки, которые воздействуют операторы, не возвращающие строк.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> Метод извлекает строки из источника данных, с помощью инструкции SELECT, указанной и связанной <xref:System.Data.IDbDataAdapter.SelectCommand%2A> свойство. Объект соединения, связанный с инструкцией SELECT должен быть допустимым, но его не должны быть открыты. Если подключение закрывается до <xref:System.Data.Common.DbDataAdapter.Fill%2A> является именем, он открывается для получения данных, затем закрывается. Если соединение открыто до <xref:System.Data.Common.DbDataAdapter.Fill%2A> является именем, он остается открытым.  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> Операция затем добавляет строки в место назначения <xref:System.Data.DataTable> объекты в <xref:System.Data.DataSet>, создавая <xref:System.Data.DataTable> объекты, если они еще не существуют. При создании <xref:System.Data.DataTable> объектов, <xref:System.Data.Common.DbDataAdapter.Fill%2A> операции, как правило, создает только метаданные имени столбца. Тем не менее если <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> свойству `AddWithKey`, также создаются соответствующие первичные ключи и ограничения.  
  
 Если <xref:System.Data.Common.DbDataAdapter> встречает идентичные столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последующих столбцов, используя шаблон "*columnname*1", "*columnname*2», «*columnname*3" и т. д. Если входные данные содержат безымянные столбцы, они помещаются в <xref:System.Data.DataSet> в соответствии с шаблоном «Column1», «Column2» и т. д. При добавлении нескольких результирующих наборов <xref:System.Data.DataSet> каждый набор результатов помещается в отдельную таблицу. Дополнительные результирующие наборы именуются путем добавления целочисленного значения к указанным именем таблицы (например, «Таблица», «Table1», «Table2» и т. д.). Приложений, использующих имена столбцов и таблиц следует убедиться, что конфликтов шаблонов именования.  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> Метод поддерживает сценарии где <xref:System.Data.DataSet> содержит несколько <xref:System.Data.DataTable> объекты, имена которых отличаются только регистром. В таких ситуациях <xref:System.Data.Common.DbDataAdapter.Fill%2A> выполняет сравнение с учетом регистра для поиска соответствующей таблицы и создает новую таблицу, если точного соответствия не существует. Следующий код C# демонстрирует это поведение.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Если <xref:System.Data.Common.DbDataAdapter.Fill%2A> вызывается и <xref:System.Data.DataSet> содержит только одну <xref:System.Data.DataTable> , имена которых отличаются только регистром, который <xref:System.Data.DataTable> обновляется. В этом случае сравнение выполняется без учета регистра. Следующий код C# демонстрирует это поведение.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Можно использовать <xref:System.Data.Common.DbDataAdapter.Fill%2A> метод несколько раз на том же <xref:System.Data.DataTable>. Если существует первичный ключ, входящие строки объединяются с совпадающие строки, которые уже существуют. Если первичный ключ отсутствует, входящие строки добавляются к <xref:System.Data.DataTable>.  
  
 Если `SelectCommand` возвращает результаты OUTER JOIN, то `DataAdapter` не задает значение <xref:System.Data.DataTable.PrimaryKey%2A> для результирующего объекта <xref:System.Data.DataTable>. Необходимо явно определить первичный ключ, чтобы убедиться, что повторяющиеся строки обработаны правильно. Дополнительные сведения см. в разделе [Определение первичных ключей](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  При обработке пакетных инструкций SQL, возвращающих несколько результатов, реализация <xref:System.Data.Common.DbDataAdapter.Fill%2A> и <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> для данных .NET Framework, поставщик возвращает сведения схемы для только первый результат.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Исходная таблица является недопустимым.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="startRecord" /> Параметра меньше 0.  
  
-или- 
<paramref name="maxRecords" /> Параметра меньше 0.</exception>
        <block subset="none" type="overrides"><para>Эта перегрузка <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" /> метод является защищенным и предназначен для использования поставщиком данных .NET Framework.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FillCommandBehavior">
      <MemberSignature Language="C#" Value="protected internal System.Data.CommandBehavior FillCommandBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.CommandBehavior FillCommandBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.FillCommandBehavior" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property FillCommandBehavior As CommandBehavior" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Data::CommandBehavior FillCommandBehavior { System::Data::CommandBehavior get(); void set(System::Data::CommandBehavior value); };" />
      <MemberSignature Language="F#" Value="member this.FillCommandBehavior : System.Data.CommandBehavior with get, set" Usage="System.Data.Common.DbDataAdapter.FillCommandBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.CommandBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает поведение команда, используемая для заполнения адаптера данных.</summary>
        <value><see cref="T:System.Data.CommandBehavior" /> Команды, использованной для заполнения адаптера данных.</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FillError">
      <MemberSignature Language="C#" Value="public event System.Data.FillErrorEventHandler FillError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.FillErrorEventHandler FillError" />
      <MemberSignature Language="DocId" Value="E:System.Data.Common.DbDataAdapter.FillError" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FillError As FillErrorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::FillErrorEventHandler ^ FillError;" />
      <MemberSignature Language="F#" Value="member this.FillError : System.Data.FillErrorEventHandler " Usage="member this.FillError : System.Data.FillErrorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DbDataAdapter_FillError")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.FillErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращается при возникновении ошибки во время операции заполнения.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Добавляет <see cref="T:System.Data.DataTable" /> к <see cref="T:System.Data.DataSet" /> и настраивает схему для соответствия, в источнике данных.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet">Объект <see cref="T:System.Data.DataSet" />, куда вставляется схема.</param>
        <param name="schemaType">Одно из значений <see cref="T:System.Data.SchemaType" />, указывающее, как следует вставлять схему.</param>
        <summary>Добавляет объект <see cref="T:System.Data.DataTable" /> с именем Table в указанный объект <see cref="T:System.Data.DataSet" /> и настраивает схему для соответствия этому объекту в источнике данных на основе указанного значения типа <see cref="T:System.Data.SchemaType" />.</summary>
        <returns>Ссылка на коллекцию объектов <see cref="T:System.Data.DataTable" />, которые были добавлены в <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод извлекает сведения о схеме из источника данных с помощью <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.  
  
 Объект <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> операция добавляет <xref:System.Data.DataTable> в место назначения <xref:System.Data.DataSet>. Затем он добавляет столбцы для <xref:System.Data.DataColumnCollection> из <xref:System.Data.DataTable>и настраивает следующие <xref:System.Data.DataColumn> свойства, если они существуют в источнике данных:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Необходимо задать <xref:System.Data.DataColumn.AutoIncrementStep%2A> и <xref:System.Data.DataColumn.AutoIncrementSeed%2A> отдельно.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Кроме того, настраивает <xref:System.Data.DataTable.PrimaryKey%2A> и <xref:System.Data.DataTable.Constraints%2A> свойства согласно следующим правилам:  
  
-   Если один или несколько первичных ключевых столбцов, возвращаемых <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, они используются в качестве первичного ключа для <xref:System.Data.DataTable>.  
  
-   Если столбцы первичных ключей не возвращаются, но уникальные столбцы, уникальные столбцы используются как первичный ключ, если и только в том случае, если все они не допускающий значения NULL. Если какой-либо из столбцов допускает значения NULL, <xref:System.Data.UniqueConstraint> добавляется <xref:System.Data.ConstraintCollection>, но <xref:System.Data.DataTable.PrimaryKey%2A> свойство не задано.  
  
-   Если возвращаются столбцы первичного ключа и уникальные столбцы, столбцы первичного ключа используются в качестве первичного ключа для <xref:System.Data.DataTable>.  
  
 Обратите внимание, что первичные и уникальные ограничения добавляются <xref:System.Data.ConstraintCollection> в соответствии с предыдущими правилами, а также ограничения других типов не добавляются.  
  
 Если уникальный кластеризованный индекс определен на столбец или столбцы в таблицу SQL Server, и ограничение первичного ключа определен на отдельный набор столбцов, имена столбцов в кластеризованном индексе будет возвращен. Чтобы получить имя или имена первичных ключевых столбцов, используйте подсказки в запросе в инструкции SELECT, которая указывает имя индекса первичного ключа. Дополнительные сведения об указании указания запросов см. в разделе [указания запросов (Transact-SQL)](https://msdn.microsoft.com/library/ms181714.aspx).  
  
 Сведения о первичном ключе используется во время <xref:System.Data.Common.DbDataAdapter.Fill%2A> для поиска и замены строк, ключевые столбцы которого соответствуют. Если это не требуемое поведение, используйте <xref:System.Data.Common.DbDataAdapter.Fill%2A> без запроса сведений о схеме.  
  
 Если <xref:System.Data.IDataAdapter> встречает идентичные столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последующих столбцов, используя шаблон "*columnname*1", "*columnname*2», «*columnname*3" и т. д. Если входные данные содержат безымянные столбцы, они помещаются в <xref:System.Data.DataSet> в соответствии с шаблоном «Column1», «Column2» и т. д. При добавлении нескольких результирующих наборов <xref:System.Data.DataSet> каждый набор результатов помещается в отдельную таблицу. Дополнительные результирующие наборы именуются путем добавления целочисленного значения к указанным именем таблицы (например, «Таблицы», «Table1», «Table2» и т. д.). Приложений, использующих имена столбцов и таблиц следует убедиться, что конфликтов шаблонов именования.  
  
 <xref:System.Data.IDbConnection> Объект, связанный с инструкцией select должен быть допустимым, но его не нужно открыть. Если <xref:System.Data.IDbConnection> закрыта перед <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> является именем, он открывается для получения данных, затем закрывается. Если соединение открыто до <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> является именем, он остается открытым.  
  
> [!NOTE]
>  При обработке пакетных инструкций SQL, возвращающих несколько результатов, реализация <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> для поставщику данных .NET Framework для OLE DB возвращает сведения схемы только для первого результата. Чтобы получить сведения о схеме для нескольких результатов, используйте <xref:System.Data.Common.DbDataAdapter.Fill%2A> с <xref:System.Data.MissingSchemaAction> присвоено `AddWithKey`.  
  
 При использовании <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, поставщик данных .NET Framework для SQL Server добавляет предложение FOR BROWSE к выполняемому оператору. Пользователю следует иметь в виду о возможных побочных эффектах, например при использовании операторов SET FMTONLY ON. Дополнительные сведения см. в разделе [SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql).
  
   
  
## Examples  
 В следующем примере используется производный класс <xref:System.Data.SqlClient.SqlDataAdapter>, для заполнения <xref:System.Data.DataSet> с схемы и возвращает <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable FillSchema(class System.Data.DataTable dataTable, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTable ^ FillSchema(System::Data::DataTable ^ dataTable, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataTable * System.Data.SchemaType -&gt; System.Data.DataTable" Usage="dbDataAdapter.FillSchema (dataTable, schemaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataTable">Объект <see cref="T:System.Data.DataTable" /> для заполнения схемой из источника данных.</param>
        <param name="schemaType">Одно из значений перечисления <see cref="T:System.Data.SchemaType" />.</param>
        <summary>Настраивает схему указанного объекта <see cref="T:System.Data.DataTable" /> на основе указанного <see cref="T:System.Data.SchemaType" />.</summary>
        <returns>Объект <see cref="T:System.Data.DataTable" />, содержащий сведения о схеме, возвращенные из источника данных.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Метод получает схему из источника данных с помощью <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. Объект соединения, связанный с <xref:System.Data.IDbDataAdapter.SelectCommand%2A> должен быть допустимым, но его не должны быть открыты. Если подключение закрывается до <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> является именем, он открывается для получения данных, затем закрывается. Если соединение открыто до <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> является именем, он остается открытым.  
  
 Объект <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> операция возвращает <xref:System.Data.DataTable>. Затем он добавляет столбцы для <xref:System.Data.DataColumnCollection> из <xref:System.Data.DataTable>и настраивает следующие <xref:System.Data.DataColumn> свойства, если они существуют в источнике данных:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Необходимо задать <xref:System.Data.DataColumn.AutoIncrementStep%2A> и <xref:System.Data.DataColumn.AutoIncrementSeed%2A> отдельно.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Кроме того, настраивает <xref:System.Data.DataTable.PrimaryKey%2A> и <xref:System.Data.DataTable.Constraints%2A> свойства согласно следующим правилам:  
  
-   Если <xref:System.Data.DataTable.PrimaryKey%2A> уже был определен для `DataTable`, или `DataTable` содержит данные, `PrimaryKey` свойство не задано.  
  
-   Если один или несколько первичных ключевых столбцов, возвращаемых <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, они используются в качестве первичного ключа для `DataTable`.  
  
-   Если столбцы первичных ключей не возвращаются, но уникальные столбцы, уникальные столбцы используются как первичный ключ, если и только в том случае, если все они не допускающий значения NULL. Если какой-либо из столбцов допускает значения NULL, <xref:System.Data.UniqueConstraint> добавляется <xref:System.Data.ConstraintCollection>, но `PrimaryKey` свойство не задано.  
  
-   Если возвращаются столбцы первичного ключа и уникальные столбцы, столбцы первичного ключа используются в качестве первичного ключа для `DataTable`.  
  
 Обратите внимание, что первичные и уникальные ограничения добавляются <xref:System.Data.ConstraintCollection> в соответствии с предыдущими правилами, а также ограничения других типов не добавляются. Этот процесс может потребовать несколько циклов приема-передачи на сервер.  
  
 Если уникальный кластеризованный индекс определен на столбец или столбцы в таблицу SQL Server, и ограничение первичного ключа определен на отдельный набор столбцов, имена столбцов в кластеризованном индексе будет возвращен. Чтобы получить имя или имена первичных ключевых столбцов, используйте подсказки в запросе в инструкции SELECT, которая указывает имя индекса первичного ключа. Дополнительные сведения об указании указания запросов см. в разделе [указания запросов (Transact-SQL)](https://msdn.microsoft.com/library/ms181714.aspx).  
  
 Если <xref:System.Data.Common.DbDataAdapter> встречает идентичные столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последующих столбцов, используя шаблон "*columnname*1", "*columnname*2», «*columnname*3" и т. д. Если входные данные содержат безымянные столбцы, они помещаются в <xref:System.Data.DataSet> в соответствии с шаблоном «Column1», «Column2» и т. д. При добавлении нескольких результирующих наборов <xref:System.Data.DataSet> каждый набор результатов помещается в отдельную таблицу. Дополнительные результирующие наборы именуются путем добавления целочисленного значения к указанным именем таблицы (например, «Таблицы», «Table1», «Table2» и т. д.). Приложений, использующих имена столбцов и таблиц следует убедиться, что конфликтов шаблонов именования.  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> не возвращает никаких строк. Используйте <xref:System.Data.Common.DbDataAdapter.Fill%2A> метод для добавления строк в <xref:System.Data.DataTable>.  
  
> [!NOTE]
>  При обработке пакетных инструкций SQL, возвращающих несколько результатов, реализация <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> для поставщику данных .NET Framework для OLE DB возвращает сведения схемы только для первого результата. Чтобы получить сведения о схеме для нескольких результатов, используйте <xref:System.Data.Common.DbDataAdapter.Fill%2A> с <xref:System.Data.MissingSchemaAction> присвоено `AddWithKey`.  
  
 При использовании <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, поставщик данных .NET Framework для SQL Server добавляет предложение FOR BROWSE к выполняемому оператору. Пользователю следует иметь в виду о возможных побочных эффектах, например при использовании операторов SET FMTONLY ON. Дополнительные сведения см. в разделе [SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql).
  
   
  
## Examples  
 В следующем примере используется производный класс <xref:System.Data.SqlClient.SqlDataAdapter>, для заполнения <xref:System.Data.DataSet> с схемы и возвращает <xref:System.Data.DataTable>.  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema3#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema3/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema3#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType * string -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">Объект <see cref="T:System.Data.DataSet" />, куда вставляется схема.</param>
        <param name="schemaType">Одно из значений <see cref="T:System.Data.SchemaType" />, указывающее, как следует вставлять схему.</param>
        <param name="srcTable">Имя исходной таблицы, используемое для сопоставления таблиц.</param>
        <summary>Добавляет объект <see cref="T:System.Data.DataTable" /> в указанный объект <see cref="T:System.Data.DataSet" /> и настраивает схему для соответствия этому объекту в источнике данных на основе указанных <see cref="T:System.Data.SchemaType" /> и <see cref="T:System.Data.DataTable" />.</summary>
        <returns>Ссылка на коллекцию объектов <see cref="T:System.Data.DataTable" />, которые были добавлены в <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод извлекает сведения о схеме из источника данных с помощью <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.  
  
 Объект <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> операция добавляет <xref:System.Data.DataTable> в место назначения <xref:System.Data.DataSet>. Затем он добавляет столбцы для <xref:System.Data.DataColumnCollection> из <xref:System.Data.DataTable>и настраивает следующие <xref:System.Data.DataColumn> свойства, если они существуют в источнике данных:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Необходимо задать <xref:System.Data.DataColumn.AutoIncrementStep%2A> и <xref:System.Data.DataColumn.AutoIncrementSeed%2A> отдельно.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Кроме того, настраивает <xref:System.Data.DataTable.PrimaryKey%2A> и <xref:System.Data.DataTable.Constraints%2A> свойства согласно следующим правилам:  
  
-   Если один или несколько первичных ключевых столбцов, возвращаемых <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, они используются в качестве первичного ключа для <xref:System.Data.DataTable>.  
  
-   Если столбцы первичных ключей не возвращаются, но уникальные столбцы, уникальные столбцы используются как первичный ключ, если и только в том случае, если все они не допускающий значения NULL. Если какой-либо из столбцов допускает значения NULL, <xref:System.Data.UniqueConstraint> добавляется <xref:System.Data.ConstraintCollection>, но <xref:System.Data.DataTable.PrimaryKey%2A> свойство не задано.  
  
-   Если возвращаются столбцы первичного ключа и уникальные столбцы, столбцы первичного ключа используются в качестве первичного ключа для <xref:System.Data.DataTable>.  
  
 Обратите внимание, что первичные и уникальные ограничения добавляются <xref:System.Data.ConstraintCollection> в соответствии с предыдущими правилами, а также ограничения других типов не добавляются.  
  
 Если уникальный кластеризованный индекс определен на столбец или столбцы в таблицу SQL Server, и ограничение первичного ключа определен на отдельный набор столбцов, имена столбцов в кластеризованном индексе будет возвращен. Чтобы получить имя или имена первичных ключевых столбцов, используйте подсказки в запросе в инструкции SELECT, которая указывает имя индекса первичного ключа. Дополнительные сведения об указании указания запросов см. в разделе [указания запросов (Transact-SQL)](https://msdn.microsoft.com/library/ms181714.aspx).  
  
 Сведения о первичном ключе используется во время <xref:System.Data.Common.DbDataAdapter.Fill%2A> для поиска и замены строк, ключевые столбцы которого соответствуют. Если это не требуемое поведение, используйте <xref:System.Data.Common.DbDataAdapter.Fill%2A> без запроса сведений о схеме.  
  
 Если <xref:System.Data.Common.DbDataAdapter> встречает идентичные столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последующих столбцов, используя шаблон "*columnname*1", "*columnname*2», «*columnname*3" и т. д. Если входные данные содержат безымянные столбцы, они помещаются в <xref:System.Data.DataSet> в соответствии с шаблоном «Column1», «Column2» и т. д. При добавлении нескольких результирующих наборов <xref:System.Data.DataSet> каждый набор результатов помещается в отдельную таблицу. Дополнительные результирующие наборы именуются путем добавления целочисленного значения к указанным именем таблицы (например, «Таблицы», «Table1», «Table2» и т. д.). Приложений, использующих имена столбцов и таблиц следует убедиться, что конфликтов шаблонов именования.  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Метод поддерживает сценарии где <xref:System.Data.DataSet> содержит несколько <xref:System.Data.DataTable> объекты, имена которых отличаются только регистром. В таких ситуациях <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> выполняет сравнение с учетом регистра для поиска соответствующей таблицы и создает новую таблицу, если точного соответствия не существует. Следующий код C# демонстрирует это поведение.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.FillSchema(dataset, "aaa"); // Fills the schema of "aaa", which already exists in the DataSet.  
adapter.FillSchema(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Если <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> вызывается и <xref:System.Data.DataSet> содержит только одну <xref:System.Data.DataTable> , имена которых отличаются только регистром, который <xref:System.Data.DataTable> обновляется. В этом случае сравнение выполняется без учета регистра. Следующий код C# демонстрирует это поведение.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.FillSchema(dataset, "AAA"); // Fills the schema of table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <xref:System.Data.IDbConnection> Объект, связанный с инструкцией select должен быть допустимым, но его не нужно открыть. Если <xref:System.Data.IDbConnection> закрыта перед <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> является именем, он открывается для получения данных, затем закрывается. Если соединение открыто до <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> является именем, он остается открытым.  
  
> [!NOTE]
>  При обработке пакетных инструкций SQL, возвращающих несколько результатов, реализация <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> для поставщику данных .NET Framework для OLE DB возвращает сведения схемы только для первого результата. Чтобы получить сведения о схеме для нескольких результатов, используйте <xref:System.Data.Common.DbDataAdapter.Fill%2A> с <xref:System.Data.MissingSchemaAction> присвоено `AddWithKey`.  
  
 При использовании <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, поставщик данных .NET Framework для SQL Server добавляет предложение FOR BROWSE к выполняемому оператору. Пользователю следует иметь в виду о возможных побочных эффектах, например при использовании операторов SET FMTONLY ON. Дополнительные сведения см. в разделе [SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql).
  
   
  
## Examples  
 В следующем примере используется производный класс <xref:System.Data.SqlClient.SqlDataAdapter>, для заполнения <xref:System.Data.DataSet> с схемы и возвращает <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Не удалось найти исходную таблицу для получения схемы.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable FillSchema(class System.Data.DataTable dataTable, valuetype System.Data.SchemaType schemaType, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::DataTable ^ FillSchema(System::Data::DataTable ^ dataTable, System::Data::SchemaType schemaType, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataTable * System.Data.SchemaType * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; System.Data.DataTable" Usage="dbDataAdapter.FillSchema (dataTable, schemaType, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTable">Объект <see cref="T:System.Data.DataTable" /> для заполнения схемой из источника данных.</param>
        <param name="schemaType">Одно из значений перечисления <see cref="T:System.Data.SchemaType" />.</param>
        <param name="command">Оператор SQL SELECT используется для получения строк из источника данных.</param>
        <param name="behavior">Одно из значений перечисления <see cref="T:System.Data.CommandBehavior" />.</param>
        <summary>Настраивает схему указанного <see cref="T:System.Data.DataTable" /> на основе указанного <see cref="T:System.Data.SchemaType" />, командной строке и <see cref="T:System.Data.CommandBehavior" /> значения.</summary>
        <returns>A <see cref="T:System.Data.DataTable" /> содержит сведения схемы, возвращенные из источника данных.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Метод получает схему из источника данных с помощью <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. Объект соединения, связанный с <xref:System.Data.IDbDataAdapter.SelectCommand%2A> должен быть допустимым, но его не должны быть открыты. Если подключение закрывается до <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> является именем, он открывается для получения данных, затем закрывается. Если соединение открыто до <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> является именем, он остается открытым.  
  
 Объект <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> операция добавляет <xref:System.Data.DataTable> в место назначения <xref:System.Data.DataSet>. Затем он добавляет столбцы для <xref:System.Data.DataColumnCollection> из <xref:System.Data.DataTable>и настраивает следующие <xref:System.Data.DataColumn> свойства, если они существуют в источнике данных:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Необходимо задать <xref:System.Data.DataColumn.AutoIncrementStep%2A> и <xref:System.Data.DataColumn.AutoIncrementSeed%2A> отдельно.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Кроме того, настраивает <xref:System.Data.DataTable.PrimaryKey%2A> и <xref:System.Data.DataTable.Constraints%2A> свойства согласно следующим правилам:  
  
-   Если один или несколько первичных ключевых столбцов, возвращаемых <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, они используются в качестве первичного ключа для <xref:System.Data.DataTable>.  
  
-   Если столбцы первичных ключей не возвращаются, но уникальные столбцы, уникальные столбцы используются как первичный ключ, если и только в том случае, если все они не допускающий значения NULL. Если какой-либо из столбцов допускает значения NULL, <xref:System.Data.UniqueConstraint> добавляется <xref:System.Data.ConstraintCollection>, но <xref:System.Data.DataTable.PrimaryKey%2A> свойство не задано.  
  
-   Если возвращаются столбцы первичного ключа и уникальные столбцы, столбцы первичного ключа используются в качестве первичного ключа для <xref:System.Data.DataTable>.  
  
 Обратите внимание, что первичные и уникальные ограничения добавляются <xref:System.Data.ConstraintCollection> в соответствии с предыдущими правилами, а также ограничения других типов не добавляются.  
  
 Если уникальный кластеризованный индекс определен на столбец или столбцы в таблицу SQL Server, и ограничение первичного ключа определен на отдельный набор столбцов, имена столбцов в кластеризованном индексе будет возвращен. Чтобы получить имя или имена первичных ключевых столбцов, используйте подсказки в запросе в инструкции SELECT, которая указывает имя индекса первичного ключа. Дополнительные сведения об указании указания запросов см. в разделе [указания запросов (Transact-SQL)](https://msdn.microsoft.com/library/ms181714.aspx).  
  
 Если <xref:System.Data.IDataAdapter> встречает идентичные столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последующих столбцов, используя шаблон "*columnname*1", "*columnname*2», «*columnname*3" и т. д. Если входные данные содержат безымянные столбцы, они помещаются в <xref:System.Data.DataSet> в соответствии с шаблоном «Column1», «Column2» и т. д. При добавлении нескольких результирующих наборов <xref:System.Data.DataSet> каждый набор результатов помещается в отдельную таблицу. Дополнительные результирующие наборы именуются путем добавления целочисленного значения к указанным именем таблицы (например, «Таблицы», «Table1», «Table2» и т. д.). Приложений, использующих имена столбцов и таблиц следует убедиться, что конфликтов шаблонов именования.  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> не возвращает никаких строк. Используйте <xref:System.Data.Common.DbDataAdapter.Fill%2A> метод для добавления строк в <xref:System.Data.DataTable>.  
  
> [!NOTE]
>  При обработке пакетных инструкций SQL, возвращающих несколько результатов, реализация <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> для поставщику данных .NET Framework для OLE DB возвращает сведения схемы только для первого результата. Чтобы получить сведения о схеме для нескольких результатов, используйте <xref:System.Data.Common.DbDataAdapter.Fill%2A> с <xref:System.Data.MissingSchemaAction> присвоено `AddWithKey`.  
  
 При использовании <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, поставщик данных .NET Framework для SQL Server добавляет предложение FOR BROWSE к выполняемому оператору. Пользователю следует иметь в виду о возможных побочных эффектах, например при использовании операторов SET FMTONLY ON. Дополнительные сведения см. в разделе [SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql).
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Эта реализация <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" /> метод является защищенным и предназначен для использования поставщиком данных .NET Framework.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, System.Data.IDbCommand command, string srcTable, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType, class System.Data.IDbCommand command, string srcTable, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType, System::Data::IDbCommand ^ command, System::String ^ srcTable, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType * System.Data.IDbCommand * string * System.Data.CommandBehavior -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType, command, srcTable, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataSet">Объект <see cref="T:System.Data.DataSet" /> для заполнения схемой из источника данных.</param>
        <param name="schemaType">Одно из значений перечисления <see cref="T:System.Data.SchemaType" />.</param>
        <param name="command">Оператор SQL SELECT используется для получения строк из источника данных.</param>
        <param name="srcTable">Имя исходной таблицы, используемое для сопоставления таблиц.</param>
        <param name="behavior">Одно из значений перечисления <see cref="T:System.Data.CommandBehavior" />.</param>
        <summary>Добавляет <see cref="T:System.Data.DataTable" /> в указанный <see cref="T:System.Data.DataSet" /> и настраивает схему для соответствия, в источнике данных на основе указанного <see cref="T:System.Data.SchemaType" />.</summary>
        <returns>Массив <see cref="T:System.Data.DataTable" /> возвращаются объекты, которые содержат сведения о схеме из источника данных.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Метод получает схему из источника данных с помощью <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. Объект соединения, связанный с <xref:System.Data.IDbDataAdapter.SelectCommand%2A> должен быть допустимым, но его не должны быть открыты. Если подключение закрывается до <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> является именем, он открывается для получения данных, затем закрывается. Если соединение открыто до <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> является именем, он остается открытым.  
  
 Объект <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> операция добавляет <xref:System.Data.DataTable> в место назначения <xref:System.Data.DataSet>. Затем он добавляет столбцы для <xref:System.Data.DataColumnCollection> из <xref:System.Data.DataTable>и настраивает следующие <xref:System.Data.DataColumn> свойства, если они существуют в источнике данных:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Необходимо задать <xref:System.Data.DataColumn.AutoIncrementStep%2A> и <xref:System.Data.DataColumn.AutoIncrementSeed%2A> отдельно.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Кроме того, настраивает <xref:System.Data.DataTable.PrimaryKey%2A> и <xref:System.Data.DataTable.Constraints%2A> свойства согласно следующим правилам:  
  
-   Если один или несколько первичных ключевых столбцов, возвращаемых <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, они используются в качестве первичного ключа для <xref:System.Data.DataTable>.  
  
-   Если столбцы первичных ключей не возвращаются, но уникальные столбцы, уникальные столбцы используются как первичный ключ, если и только в том случае, если все они не допускающий значения NULL. Если какой-либо из столбцов допускает значения NULL, <xref:System.Data.UniqueConstraint> добавляется <xref:System.Data.ConstraintCollection>, но <xref:System.Data.DataTable.PrimaryKey%2A> свойство не задано.  
  
-   Если возвращаются столбцы первичного ключа и уникальные столбцы, столбцы первичного ключа используются в качестве первичного ключа для <xref:System.Data.DataTable>.  
  
 Обратите внимание, что первичные и уникальные ограничения добавляются <xref:System.Data.ConstraintCollection> в соответствии с предыдущими правилами, а также ограничения других типов не добавляются.  
  
 Если уникальный кластеризованный индекс определен на столбец или столбцы в таблицу SQL Server, и ограничение первичного ключа определен на отдельный набор столбцов, имена столбцов в кластеризованном индексе будет возвращен. Чтобы получить имя или имена первичных ключевых столбцов, используйте подсказки в запросе в инструкции SELECT, которая указывает имя индекса первичного ключа. Дополнительные сведения об указании указания запросов см. в разделе [указания запросов (Transact-SQL)](https://msdn.microsoft.com/library/ms181714.aspx).  
  
 Если <xref:System.Data.IDataAdapter> встречает идентичные столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последующих столбцов, используя шаблон "*columnname*1", "*columnname*2», «*columnname*3" и т. д. Если входные данные содержат безымянные столбцы, они помещаются в <xref:System.Data.DataSet> в соответствии с шаблоном «Column1», «Column2» и т. д. При добавлении нескольких результирующих наборов <xref:System.Data.DataSet> каждый набор результатов помещается в отдельную таблицу. Дополнительные результирующие наборы именуются путем добавления целочисленного значения к указанным именем таблицы (например, «Таблицы», «Table1», «Table2» и т. д.). Приложений, использующих имена столбцов и таблиц следует убедиться, что конфликтов шаблонов именования.  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Метод поддерживает сценарии где <xref:System.Data.DataSet> содержит несколько <xref:System.Data.DataTable> объекты, имена которых отличаются только регистром. В таких ситуациях <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> выполняет сравнение с учетом регистра для поиска соответствующей таблицы и создает новую таблицу, если точного соответствия не существует. Следующий код C# демонстрирует это поведение.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.FillSchema(dataset, "aaa"); // Fills the schema of "aaa", which already exists in the DataSet.  
adapter.FillSchema(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Если <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> вызывается и <xref:System.Data.DataSet> содержит только одну <xref:System.Data.DataTable> , имена которых отличаются только регистром, который <xref:System.Data.DataTable> обновляется. В этом случае сравнение выполняется без учета регистра. Следующий код C# демонстрирует это поведение.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.FillSchema(dataset, "AAA"); // Fills the schema of table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> не возвращает никаких строк. Используйте <xref:System.Data.Common.DbDataAdapter.Fill%2A> метод для добавления строк в <xref:System.Data.DataTable>.  
  
> [!NOTE]
>  При обработке пакетных инструкций SQL, возвращающих несколько результатов, реализация <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> для поставщику данных .NET Framework для OLE DB возвращает сведения схемы только для первого результата. Чтобы получить сведения о схеме для нескольких результатов, используйте <xref:System.Data.Common.DbDataAdapter.Fill%2A> с <xref:System.Data.MissingSchemaAction> присвоено `AddWithKey`.  
  
 При использовании <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, поставщик данных .NET Framework для SQL Server добавляет предложение FOR BROWSE к выполняемому оператору. Пользователю следует иметь в виду о возможных побочных эффектах, например при использовании операторов SET FMTONLY ON. Дополнительные сведения см. в разделе [SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql).
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Эта реализация <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" /> метод является защищенным и предназначен для использования поставщиком данных .NET Framework.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetBatchedParameter">
      <MemberSignature Language="C#" Value="protected virtual System.Data.IDataParameter GetBatchedParameter (int commandIdentifier, int parameterIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.IDataParameter GetBatchedParameter(int32 commandIdentifier, int32 parameterIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetBatchedParameter (commandIdentifier As Integer, parameterIndex As Integer) As IDataParameter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::IDataParameter ^ GetBatchedParameter(int commandIdentifier, int parameterIndex);" />
      <MemberSignature Language="F#" Value="abstract member GetBatchedParameter : int * int -&gt; System.Data.IDataParameter&#xA;override this.GetBatchedParameter : int * int -&gt; System.Data.IDataParameter" Usage="dbDataAdapter.GetBatchedParameter (commandIdentifier, parameterIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandIdentifier" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameterIndex" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="commandIdentifier">Индекс команды для получения из параметра.</param>
        <param name="parameterIndex">Индекс параметра внутри команды.</param>
        <summary>Возвращает <see cref="T:System.Data.IDataParameter" /> из одной из команд в текущем пакете.</summary>
        <returns>Указанный <see cref="T:System.Data.IDataParameter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В <xref:System.Data.Common.DbDataAdapter>, этот метод вызывает исключение <xref:System.NotSupportedException>. Классы, наследующие от <xref:System.Data.Common.DbDataAdapter> Переопределите этот метод, чтобы обеспечить поддержку для пакетов.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Адаптер не поддерживает пакеты.</exception>
        <block subset="none" type="overrides"><para>Этот метод защищен и предназначен для использования поставщиком данных .NET Framework.  
  
Если класс, наследуемый от <see cref="T:System.Data.Common.DbDataAdapter" /> поддерживает пакеты, что класс переопределяет этот метод, чтобы разрешить пользователям выполнять пакет. Реализация использует <paramref name="commandIdentifier" /> позволяет найти запрашиваемую команду, а затем использует <paramref name="parameterIndex" /> для поиска запрошенного параметра. Например <paramref name="commandIdentifier" /> 0 и <paramref name="parameterIndex" /> 0 возвращает первый параметр из первой команды в пакете.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetBatchedRecordsAffected">
      <MemberSignature Language="C#" Value="protected virtual bool GetBatchedRecordsAffected (int commandIdentifier, out int recordsAffected, out Exception error);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool GetBatchedRecordsAffected(int32 commandIdentifier, [out] int32&amp; recordsAffected, [out] class System.Exception&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetBatchedRecordsAffected (commandIdentifier As Integer, ByRef recordsAffected As Integer, ByRef error As Exception) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool GetBatchedRecordsAffected(int commandIdentifier, [Runtime::InteropServices::Out] int % recordsAffected, [Runtime::InteropServices::Out] Exception ^ % error);" />
      <MemberSignature Language="F#" Value="abstract member GetBatchedRecordsAffected : int *  *  -&gt; bool&#xA;override this.GetBatchedRecordsAffected : int *  *  -&gt; bool" Usage="dbDataAdapter.GetBatchedRecordsAffected (commandIdentifier, recordsAffected, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandIdentifier" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="recordsAffected" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="error" Type="System.Exception" RefType="out" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="commandIdentifier">Порядковый номер (с нуля) столбца отдельной команды в пакете.</param>
        <param name="recordsAffected">Число строк, затронутых в хранилище данных с помощью указанной команды, в том же пакете.</param>
        <param name="error"><see cref="T:System.Exception" /> Возникшие во время выполнения указанной команды. Возвращает <see langword="null" /> (<see langword="Nothing" /> в Visual Basic), если исключение не создается.</param>
        <summary>Возвращает сведения об отдельной попытке обновления в рамках большего размера пакетного обновления.</summary>
        <returns>Сведения об отдельной попытке обновления в рамках большего своему объему пакета обновления.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Поставщики данных, поддерживающие логику пакетного обновления необходимо переопределить ряд виртуальных методов на <xref:System.Data.Common.DbDataAdapter> класса. `GetBatchedRecordsAffected` Представляет один из этих виртуальных методов. `DbDataAdapter` Класс использует `GetBatchedRecordsAffected` для определения успешности выполнения попыток отдельного обновления в пакете, поэтому его можно пометить соответствующие <xref:System.Data.DataRow> соответствующим образом.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public override System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberSignature Language="F#" Value="override this.GetFillParameters : unit -&gt; System.Data.IDataParameter[]" Usage="dbDataAdapter.GetFillParameters " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.GetFillParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Получает параметры, заданные пользователем при выполнении инструкции SQL SELECT.</summary>
        <returns>Массив <see cref="T:System.Data.IDataParameter" /> объектов содержит параметры, установленные пользователем.</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="InitializeBatching">
      <MemberSignature Language="C#" Value="protected virtual void InitializeBatching ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeBatching() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.InitializeBatching" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitializeBatching ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitializeBatching();" />
      <MemberSignature Language="F#" Value="abstract member InitializeBatching : unit -&gt; unit&#xA;override this.InitializeBatching : unit -&gt; unit" Usage="dbDataAdapter.InitializeBatching " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Инициализирует пакетную обработку для <see cref="T:System.Data.Common.DbDataAdapter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В <xref:System.Data.Common.DbDataAdapter>, этот метод вызывает исключение <xref:System.NotSupportedException>. Классы, наследующие от <xref:System.Data.Common.DbDataAdapter> Переопределите этот метод, чтобы обеспечить поддержку для пакетов.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Адаптер не поддерживает пакеты.</exception>
        <block subset="none" type="overrides"><para>Этот метод защищен и предназначен для использования поставщиком данных .NET Framework.  
  
Если класс, наследуемый от <see cref="T:System.Data.Common.DbDataAdapter" /> поддерживает пакеты, что класс переопределяет этот метод. Этот метод предоставляет классу возможность инициализировать любые ресурсы, необходимые для поддержки пакетной обработки. Например класс может выделять структуру данных для хранения набора команд в пакете.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.InsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ InsertCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InsertCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.InsertCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает команду, используемую для вставки новых записей в источнике данных.</summary>
        <value>Объект <see cref="T:System.Data.IDbCommand" /> используется во время <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> для вставки записей в источнике данных, соответствующих новым строкам в наборе данных.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Во время <xref:System.Data.Common.DbDataAdapter.Update%2A>, если это свойство не задано и сведения о первичном ключе присутствует в <xref:System.Data.DataSet>, <xref:System.Data.IDbDataAdapter.InsertCommand%2A> будет создан автоматически.  
  
   
  
## Examples  
 В следующем примере создается производный класс <xref:System.Data.OleDb.OleDbDataAdapter> и задаются некоторые его свойства.  
  
 [!code-csharp[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Обработка данных (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnFillError">
      <MemberSignature Language="C#" Value="protected virtual void OnFillError (System.Data.FillErrorEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFillError(class System.Data.FillErrorEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnFillError(System.Data.FillErrorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnFillError (value As FillErrorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnFillError(System::Data::FillErrorEventArgs ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnFillError : System.Data.FillErrorEventArgs -&gt; unit&#xA;override this.OnFillError : System.Data.FillErrorEventArgs -&gt; unit" Usage="dbDataAdapter.OnFillError value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.FillErrorEventArgs" Index="0" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="value">Данные для события.</param>
        <summary>Вызывает событие <see cref="E:System.Data.Common.DataAdapter.FillError" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdated">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUpdated(class System.Data.Common.RowUpdatedEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowUpdated (value As RowUpdatedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowUpdated(System::Data::Common::RowUpdatedEventArgs ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnRowUpdated : System.Data.Common.RowUpdatedEventArgs -&gt; unit&#xA;override this.OnRowUpdated : System.Data.Common.RowUpdatedEventArgs -&gt; unit" Usage="dbDataAdapter.OnRowUpdated value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatedEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">Объект <see cref="T:System.Data.Common.RowUpdatedEventArgs" />, содержащий данные события.</param>
        <summary>Вызывает <see langword="RowUpdated" /> событий поставщика данных .NET Framework.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При возникновении события через делегат вызывается обработчик события. Дополнительные сведения см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>При переопределении метода <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" /> в производном классе, не забудьте вызвать базовый класс <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" /> метод.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdating">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUpdating(class System.Data.Common.RowUpdatingEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowUpdating (value As RowUpdatingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowUpdating(System::Data::Common::RowUpdatingEventArgs ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnRowUpdating : System.Data.Common.RowUpdatingEventArgs -&gt; unit&#xA;override this.OnRowUpdating : System.Data.Common.RowUpdatingEventArgs -&gt; unit" Usage="dbDataAdapter.OnRowUpdating value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatingEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">Объект класса <see cref="T:System.Data.Common.RowUpdatingEventArgs" />, содержащий данные события.</param>
        <summary>Вызывает <see langword="RowUpdating" /> событий поставщика данных .NET Framework.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При возникновении события через делегат вызывается обработчик события. Дополнительные сведения см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>При переопределении метода <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" /> в производном классе, убедитесь, что вызов базового класса <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" /> метод.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.SelectCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ SelectCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.SelectCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает команду, используемую для выбора записей в источнике данных.</summary>
        <value>Объект <see cref="T:System.Data.IDbCommand" /> , используемый во время <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> для выбора записей из источника данных для размещения в наборе данных.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере создается производный класс <xref:System.Data.OleDb.OleDbDataAdapter> и задаются некоторые его свойства.  
  
 [!code-csharp[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Обработка данных (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.DeleteCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand" />
      <MemberSignature Language="VB.NET" Value=" Property DeleteCommand As IDbCommand Implements IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::DeleteCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.DeleteCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает оператор SQL для удаления записей из набора данных.</summary>
        <value><see cref="T:System.Data.IDbCommand" /> Используется во время <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> для удаления записей в источнике данных, соответствующих удаленным строкам в наборе данных.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет собой явную реализацию члена интерфейса. Он может использоваться, только если экземпляр <xref:System.Data.Common.DbDataAdapter> приведен к типу интерфейса <xref:System.Data.IDbDataAdapter>.  
  
 Дополнительные сведения см. в разделе <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.InsertCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand" />
      <MemberSignature Language="VB.NET" Value=" Property InsertCommand As IDbCommand Implements IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::InsertCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.InsertCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.InsertCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает инструкцию SQL, используемую для вставки новых записей в источнике данных.</summary>
        <value><see cref="T:System.Data.IDbCommand" /> Используется во время <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> для вставки записей в источнике данных, соответствующих новым строкам в наборе данных.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет собой явную реализацию члена интерфейса. Он может использоваться, только если экземпляр <xref:System.Data.Common.DbDataAdapter> приведен к типу интерфейса <xref:System.Data.IDbDataAdapter>.  
  
 Дополнительные сведения см. в разделе <xref:System.Data.IDbDataAdapter.InsertCommand%2A>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.SelectCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand" />
      <MemberSignature Language="VB.NET" Value=" Property SelectCommand As IDbCommand Implements IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::SelectCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.SelectCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.SelectCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает инструкцию SQL, используемую для выбора записей в источнике данных.</summary>
        <value><see cref="T:System.Data.IDbCommand" /> , Используемый во время <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> для выбора записей из источника данных для размещения в наборе данных.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет собой явную реализацию члена интерфейса. Он может использоваться, только если экземпляр <xref:System.Data.Common.DbDataAdapter> приведен к типу интерфейса <xref:System.Data.IDbDataAdapter>.  
  
 Дополнительные сведения см. в разделе <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.UpdateCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand" />
      <MemberSignature Language="VB.NET" Value=" Property UpdateCommand As IDbCommand Implements IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::UpdateCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.UpdateCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает инструкцию SQL, используемую для обновления записей в источнике данных.</summary>
        <value><see cref="T:System.Data.IDbCommand" /> Используется во время <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> для обновления записей в источнике данных, соответствующих измененным строкам в наборе данных.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет собой явную реализацию члена интерфейса. Он может использоваться, только если экземпляр <xref:System.Data.Common.DbDataAdapter> приведен к типу интерфейса <xref:System.Data.IDbDataAdapter>.  
  
 Дополнительные сведения см. в разделе <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.System#ICloneable#Clone" />
      <MemberSignature Language="VB.NET" Value="Function Clone () As Object Implements ICloneable.Clone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ICloneable.Clone() = ICloneable::Clone;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("use 'protected DbDataAdapter(DbDataAdapter)' ctor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Создает новый объект, являющийся копией текущего экземпляра.</summary>
        <returns>Новый объект, являющийся копией этого экземпляра.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет собой явную реализацию члена интерфейса. Он может использоваться, только если экземпляр <xref:System.Data.Common.DbDataAdapter> приведен к типу интерфейса <xref:System.ICloneable>.  
  
 Дополнительные сведения см. в разделе <xref:System.ICloneable.Clone%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="TerminateBatching">
      <MemberSignature Language="C#" Value="protected virtual void TerminateBatching ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void TerminateBatching() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.TerminateBatching" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub TerminateBatching ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void TerminateBatching();" />
      <MemberSignature Language="F#" Value="abstract member TerminateBatching : unit -&gt; unit&#xA;override this.TerminateBatching : unit -&gt; unit" Usage="dbDataAdapter.TerminateBatching " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Завершает пакетную обработку для <see cref="T:System.Data.Common.DbDataAdapter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В <xref:System.Data.Common.DbDataAdapter>, этот метод вызывает исключение <xref:System.NotSupportedException>. Классы, наследующие от <xref:System.Data.Common.DbDataAdapter> Переопределите этот метод, чтобы обеспечить поддержку для пакетов.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Адаптер не поддерживает пакеты.</exception>
        <block subset="none" type="overrides"><para>Этот метод защищен и предназначен для использования поставщиком данных .NET Framework.  
  
Если класс, наследуемый от <see cref="T:System.Data.Common.DbDataAdapter" /> поддерживает пакеты, что класс переопределяет этот метод. Этот метод предоставляет классу возможность удалять все ресурсы, выделенные для поддержки пакетной обработки. Например класс может освободить структура данных, которая содержит команды в пакете.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Update">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Обновляет значения в базе данных, выполняя соответствующие операторы INSERT, UPDATE или DELETE, для каждой вставки, обновления или удаленной строки в <see cref="T:System.Data.DataSet" />.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataRow[] dataRows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataRow[] dataRows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (dataRows As DataRow()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(cli::array &lt;System::Data::DataRow ^&gt; ^ dataRows);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataRow[] -&gt; int" Usage="dbDataAdapter.Update dataRows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="dataRows">Массив <see cref="T:System.Data.DataRow" /> объекты, используемые для обновления источника данных.</param>
        <summary>Обновляет значения в базе данных, выполняя соответствующие операторы INSERT, UPDATE или DELETE, для каждой вставки, обновления или удаленной строки в указанном массиве в <see cref="T:System.Data.DataSet" />.</summary>
        <returns>Число успешно обновленных строк из <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если приложение вызывает <xref:System.Data.Common.DbDataAdapter.Update%2A> метод, <xref:System.Data.Common.DbDataAdapter> проверяет <xref:System.Data.DataRow.RowState%2A> свойство и выполняет необходимые инструкции INSERT, UPDATE или DELETE итеративно для каждой строки, на основе порядка индексов, настроенных в <xref:System.Data.DataSet>. Например <xref:System.Data.Common.DbDataAdapter.Update%2A> может выполнить инструкцию DELETE, за которым следует инструкции INSERT, а затем еще одну инструкцию DELETE, из-за упорядочение строк в <xref:System.Data.DataTable>.  
  
 Следует отметить, что эти инструкции выполняются не как пакетный процесс. Каждая строка обновляется по отдельности. Приложение может вызвать <xref:System.Data.DataSet.GetChanges%2A> метод в ситуациях, когда необходимо управлять последовательность инструкции типов (например,). Дополнительные сведения см. в разделе [обновление источников данных с объектами DataAdapter](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Если инструкции INSERT, UPDATE или DELETE не были указаны, <xref:System.Data.Common.DbDataAdapter.Update%2A> метод создает исключение. Тем не менее, можно создать <xref:System.Data.SqlClient.SqlCommandBuilder> или <xref:System.Data.OleDb.OleDbCommandBuilder> для автоматического создания инструкций SQL для отдельных обновлений, если задать `SelectCommand` свойства поставщика данных .NET Framework. Затем создаются все дополнительные инструкции SQL, не устанавливайте **CommandBuilder**. Этот код требует сведения о ключевом столбце должны присутствовать в <xref:System.Data.DataSet>. Дополнительные сведения см. в разделе [создание команд с помощью построителей CommandBuilder](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A> Метод извлекает строки из таблицы, приведенной в первом сопоставлении перед выполнением обновления. <xref:System.Data.Common.DbDataAdapter.Update%2A> Затем обновляет строку, используя значение <xref:System.Data.IDbCommand.UpdatedRowSource%2A> свойства. Возвращено никаких дополнительных строк учитываются.  
  
 После загрузки всех данных обратно в <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> события, позволяя пользователю проверить согласованную <xref:System.Data.DataSet> строке и все выходные параметры, возвращенный командой. После успешного обновления строки принимаются изменения этой строки.  
  
 При использовании <xref:System.Data.Common.DbDataAdapter.Update%2A>, порядок выполнения выглядит следующим образом:  
  
1.  Значения в <xref:System.Data.DataRow> перемещаются в значения параметров.  
  
2.  Возникает событие <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>.  
  
3.  Выполняется команда.  
  
4.  Если команда имеет значение `FirstReturnedRecord`, первый возвращенный результат помещается в <xref:System.Data.DataRow>.  
  
5.  Если выходные параметры, они помещаются в <xref:System.Data.DataRow>.  
  
6.  Возникает событие <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>.  
  
7.  вызывается метод <xref:System.Data.DataRow.AcceptChanges%2A>;  
  
 Каждая команда, связанная с <xref:System.Data.Common.DbDataAdapter> обычно имеет коллекцию параметров, связанных с ним. Параметры сопоставляются с текущей строкой с помощью `SourceColumn` и `SourceVersion` свойств поставщика данных .NET Framework `Parameter` класса. `SourceColumn` ссылается на <xref:System.Data.DataTable> столбца, <xref:System.Data.Common.DbDataAdapter> ссылки для получения значения параметров для текущей строки.  
  
 `SourceColumn` ссылается на несопоставленный столбец, прежде чем будут применены все сопоставления таблиц. Если `SourceColumn` ссылается на несуществующий столбец, предпринимаемые действия зависят от одного из следующих <xref:System.Data.MissingMappingAction> значения.  
  
|Значение перечисления|Действие, выполняемое|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Используйте имена исходных столбцов и таблиц в <xref:System.Data.DataSet> Если сопоставление отсутствует.|  
|`MissingMappingAction.Ignore`|Объект <xref:System.SystemException> создается. Если сопоставления заданы явно, отсутствует сопоставление для входного параметра обычно является результатом ошибки.|  
|`MissingMappingAction.Error`|Объект <xref:System.SystemException> создается.|  
  
 `SourceColumn` Свойство также используется для сопоставления значений выходных данных или входных и выходных параметров обратно в `DataSet`. Исключение создается в том случае, если он ссылается на несуществующий столбец.  
  
 `SourceVersion` Свойства поставщика данных .NET Framework `Parameter` класс определяет, следует ли использовать исходные, текущий или предложено версию значения столбца. Эта возможность часто используется для включения исходных значений в предложении WHERE инструкции UPDATE на наличие нарушений оптимистичного параллелизма.  
  
> [!NOTE]
>  Если произошла ошибка при обновлении строки, создается исключение, и выполнение обновления прекращается. Чтобы продолжить операцию обновления без генерации исключения при возникновении ошибки, установите <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> свойства `true` перед вызовом <xref:System.Data.Common.DbDataAdapter.Update%2A>. Также может реагировать на ошибки для каждой строки в `RowUpdated` событие DataAdapter. Чтобы продолжить операцию обновления без генерации исключения в `RowUpdated` набор событий, <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> свойство <xref:System.Data.Common.RowUpdatedEventArgs> для <xref:System.Data.UpdateStatus.Continue>.  
  
   
  
## Examples  
 В следующем примере используется производный класс <xref:System.Data.OleDb.OleDbDataAdapter>, для обновления источника данных.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" /> не является допустимым.</exception>
        <exception cref="T:System.InvalidOperationException">Исходная таблица является недопустимым.</exception>
        <exception cref="T:System.SystemException">Не <see cref="T:System.Data.DataRow" /> существует для обновления.  
  
-или- 
Не <see cref="T:System.Data.DataTable" /> существует для обновления.  
  
-или- 
Не <see cref="T:System.Data.DataSet" /> существует для использования в качестве источника.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">При попытке выполнить инструкцию INSERT, UPDATE или DELETE привела к нулевому количеству обработанных записей.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Обработка данных (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public override int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Update(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataSet -&gt; int" Usage="dbDataAdapter.Update dataSet" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.Update(System.Data.DataSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet"><see cref="T:System.Data.DataSet" /> Используется для обновления источника данных.</param>
        <summary>Обновляет значения в базе данных, выполняя соответствующие операторы INSERT, UPDATE или DELETE, для каждой вставки, обновления или удаленной строки в указанном <see cref="T:System.Data.DataSet" />.</summary>
        <returns>Число успешно обновленных строк из <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если приложение вызывает <xref:System.Data.Common.DbDataAdapter.Update%2A> метод, <xref:System.Data.Common.DbDataAdapter> проверяет <xref:System.Data.DataRow.RowState%2A> свойство и выполняет необходимые инструкции INSERT, UPDATE или DELETE итеративно для каждой строки, на основе порядка индексов, настроенных в <xref:System.Data.DataSet>. Например <xref:System.Data.Common.DbDataAdapter.Update%2A> может выполнить инструкцию DELETE, за которым следует инструкции INSERT, а затем еще одну инструкцию DELETE, из-за упорядочение строк в <xref:System.Data.DataTable>.  
  
 Следует отметить, что эти инструкции выполняются не как пакетный процесс. Каждая строка обновляется по отдельности. Приложение может вызвать <xref:System.Data.DataSet.GetChanges%2A> метод в ситуациях, когда необходимо управлять последовательность инструкции типов (например,). Дополнительные сведения см. в разделе [обновление источников данных с объектами DataAdapter](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Если инструкции INSERT, UPDATE или DELETE не были указаны, <xref:System.Data.Common.DbDataAdapter.Update%2A> метод создает исключение. Тем не менее, можно создать <xref:System.Data.SqlClient.SqlCommandBuilder> или <xref:System.Data.OleDb.OleDbCommandBuilder> для автоматического создания инструкций SQL для отдельных обновлений, если задать `SelectCommand` свойства поставщика данных .NET Framework. Затем создаются все дополнительные инструкции SQL, не устанавливайте **CommandBuilder**. Этот код требует сведения о ключевом столбце должны присутствовать в <xref:System.Data.DataSet>. Дополнительные сведения см. в разделе [создание команд с помощью построителей CommandBuilder](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A> Метод извлекает строки из таблицы, приведенной в первом сопоставлении перед выполнением обновления. <xref:System.Data.Common.DbDataAdapter.Update%2A> Затем обновляет строку, используя значение <xref:System.Data.IDbCommand.UpdatedRowSource%2A> свойства. Возвращено никаких дополнительных строк учитываются.  
  
 После загрузки всех данных обратно в <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> события, позволяя пользователю проверить согласованную <xref:System.Data.DataSet> строке и все выходные параметры, возвращенный командой. После успешного обновления строки принимаются изменения этой строки.  
  
 При использовании <xref:System.Data.Common.DbDataAdapter.Update%2A>, порядок выполнения выглядит следующим образом:  
  
1.  Значения в <xref:System.Data.DataRow> перемещаются в значения параметров.  
  
2.  Возникает событие <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>.  
  
3.  Выполняется команда.  
  
4.  Если команда имеет значение `FirstReturnedRecord`, первый возвращенный результат помещается в <xref:System.Data.DataRow>.  
  
5.  Если выходные параметры, они помещаются в <xref:System.Data.DataRow>.  
  
6.  Возникает событие <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>.  
  
7.  вызывается метод <xref:System.Data.DataRow.AcceptChanges%2A>;  
  
 Каждая команда, связанная с <xref:System.Data.Common.DbDataAdapter> обычно имеет коллекцию параметров, связанных с ним. Параметры сопоставляются с текущей строкой с помощью `SourceColumn` и `SourceVersion` свойств поставщика данных .NET Framework `Parameter` класса. `SourceColumn` ссылается на <xref:System.Data.DataTable> столбца, <xref:System.Data.Common.DbDataAdapter> ссылки для получения значения параметров для текущей строки.  
  
 `SourceColumn` ссылается на несопоставленный столбец, прежде чем будут применены все сопоставления таблиц. Если `SourceColumn` ссылается на несуществующий столбец, предпринимаемые действия зависят от одного из следующих <xref:System.Data.MissingMappingAction> значения.  
  
|Значение перечисления|Действие, выполняемое|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Используйте имена исходных столбцов и таблиц в <xref:System.Data.DataSet> Если сопоставление отсутствует.|  
|`MissingMappingAction.Ignore`|Объект <xref:System.SystemException> создается. Если сопоставления заданы явно, отсутствует сопоставление для входного параметра обычно является результатом ошибки.|  
|`MissingMappingAction.Error`|Объект <xref:System.SystemException> создается.|  
  
 `SourceColumn` Свойство также используется для сопоставления значений выходных данных или входных и выходных параметров обратно в `DataSet`. Исключение создается в том случае, если он ссылается на несуществующий столбец.  
  
 `SourceVersion` Свойства поставщика данных .NET Framework `Parameter` класс определяет, следует ли использовать исходные, текущий или предложено версию значения столбца. Эта возможность часто используется для включения исходных значений в предложении WHERE инструкции UPDATE на наличие нарушений оптимистичного параллелизма.  
  
> [!NOTE]
>  Если произошла ошибка при обновлении строки, создается исключение, и выполнение обновления прекращается. Чтобы продолжить операцию обновления без генерации исключения при возникновении ошибки, установите <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> свойства `true` перед вызовом <xref:System.Data.Common.DbDataAdapter.Update%2A>. Также может реагировать на ошибки для каждой строки в `RowUpdated` событие DataAdapter. Чтобы продолжить операцию обновления без генерации исключения в `RowUpdated` набор событий, <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> свойство <xref:System.Data.Common.RowUpdatedEventArgs> для <xref:System.Data.UpdateStatus.Continue>.  
  
   
  
## Examples  
 В следующем примере используется производный класс <xref:System.Data.OleDb.OleDbDataAdapter>, для обновления источника данных.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Исходная таблица является недопустимым.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">При попытке выполнить инструкцию INSERT, UPDATE или DELETE привела к нулевому количеству обработанных записей.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Обработка данных (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataTable dataTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataTable dataTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataTable ^ dataTable);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataTable -&gt; int" Usage="dbDataAdapter.Update dataTable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="dataTable"><see cref="T:System.Data.DataTable" /> Используется для обновления источника данных.</param>
        <summary>Обновляет значения в базе данных, выполняя соответствующие операторы INSERT, UPDATE или DELETE, для каждой вставки, обновления или удаленной строки в указанном <see cref="T:System.Data.DataTable" />.</summary>
        <returns>Число успешно обновленных строк из <see cref="T:System.Data.DataTable" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если приложение вызывает <xref:System.Data.Common.DbDataAdapter.Update%2A> метод, <xref:System.Data.Common.DbDataAdapter> проверяет <xref:System.Data.DataRow.RowState%2A> свойство и выполняет необходимые инструкции INSERT, UPDATE или DELETE итеративно для каждой строки, на основе порядка индексов, настроенных в <xref:System.Data.DataSet>. Например <xref:System.Data.Common.DbDataAdapter.Update%2A> может выполнить инструкцию DELETE, за которым следует инструкции INSERT, а затем еще одну инструкцию DELETE, из-за упорядочение строк в <xref:System.Data.DataTable>.  
  
 Следует отметить, что эти инструкции выполняются не как пакетный процесс. Каждая строка обновляется по отдельности. Приложение может вызвать <xref:System.Data.DataSet.GetChanges%2A> метод в ситуациях, когда необходимо управлять последовательность инструкции типов (например,). Дополнительные сведения см. в разделе [обновление источников данных с объектами DataAdapter](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Если инструкции INSERT, UPDATE или DELETE не были указаны, <xref:System.Data.Common.DbDataAdapter.Update%2A> метод создает исключение. Тем не менее, можно создать <xref:System.Data.SqlClient.SqlCommandBuilder> или <xref:System.Data.OleDb.OleDbCommandBuilder> для автоматического создания инструкций SQL для отдельных обновлений, если задать `SelectCommand` свойства поставщика данных .NET Framework. Затем создаются все дополнительные инструкции SQL, не устанавливайте **CommandBuilder**. Этот код требует сведения о ключевом столбце должны присутствовать в <xref:System.Data.DataSet>. Дополнительные сведения см. в разделе [создание команд с помощью построителей CommandBuilder](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A> Метод извлекает строки из таблицы, приведенной в первом сопоставлении перед выполнением обновления. <xref:System.Data.Common.DbDataAdapter.Update%2A> Затем обновляет строку, используя значение <xref:System.Data.IDbCommand.UpdatedRowSource%2A> свойства. Возвращено никаких дополнительных строк учитываются.  
  
 После загрузки всех данных обратно в <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> события, позволяя пользователю проверить согласованную <xref:System.Data.DataSet> строке и все выходные параметры, возвращенный командой. После успешного обновления строки принимаются изменения этой строки.  
  
 При использовании <xref:System.Data.Common.DbDataAdapter.Update%2A>, порядок выполнения выглядит следующим образом:  
  
1.  Значения в <xref:System.Data.DataRow> перемещаются в значения параметров.  
  
2.  Возникает событие <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>.  
  
3.  Выполняется команда.  
  
4.  Если команда имеет значение `FirstReturnedRecord`, первый возвращенный результат помещается в <xref:System.Data.DataRow>.  
  
5.  Если выходные параметры, они помещаются в <xref:System.Data.DataRow>.  
  
6.  Возникает событие <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>.  
  
7.  вызывается метод <xref:System.Data.DataRow.AcceptChanges%2A>;  
  
 Каждая команда, связанная с <xref:System.Data.Common.DbDataAdapter> обычно имеет коллекцию параметров, связанных с ним. Параметры сопоставляются с текущей строкой с помощью `SourceColumn` и `SourceVersion` свойств поставщика данных .NET Framework `Parameter` класса. `SourceColumn` ссылается на <xref:System.Data.DataTable> столбца, <xref:System.Data.Common.DbDataAdapter> ссылки для получения значения параметров для текущей строки.  
  
 `SourceColumn` ссылается на несопоставленный столбец, прежде чем будут применены все сопоставления таблиц. Если `SourceColumn` ссылается на несуществующий столбец, предпринимаемые действия зависят от одного из следующих <xref:System.Data.MissingMappingAction> значения.  
  
|Значение перечисления|Действие, выполняемое|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Используйте имена исходных столбцов и таблиц в <xref:System.Data.DataSet> Если сопоставление отсутствует.|  
|`MissingMappingAction.Ignore`|Объект <xref:System.SystemException> создается. Если сопоставления заданы явно, отсутствует сопоставление для входного параметра обычно является результатом ошибки.|  
|`MissingMappingAction.Error`|Объект <xref:System.SystemException> создается.|  
  
 `SourceColumn` Свойство также используется для сопоставления значений выходных данных или входных и выходных параметров обратно в `DataSet`. Исключение создается в том случае, если он ссылается на несуществующий столбец.  
  
 `SourceVersion` Свойства поставщика данных .NET Framework `Parameter` класс определяет, следует ли использовать исходные, текущий или предложено версию значения столбца. Эта возможность часто используется для включения исходных значений в предложении WHERE инструкции UPDATE на наличие нарушений оптимистичного параллелизма.  
  
> [!NOTE]
>  Если произошла ошибка при обновлении строки, создается исключение, и выполнение обновления прекращается. Чтобы продолжить операцию обновления без генерации исключения при возникновении ошибки, установите <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> свойства `true` перед вызовом <xref:System.Data.Common.DbDataAdapter.Update%2A>. Также может реагировать на ошибки для каждой строки в `RowUpdated` событие DataAdapter. Чтобы продолжить операцию обновления без генерации исключения в `RowUpdated` набор событий, <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> свойство <xref:System.Data.Common.RowUpdatedEventArgs> для <xref:System.Data.UpdateStatus.Continue>.  
  
   
  
## Examples  
 В следующем примере используется производный класс <xref:System.Data.OleDb.OleDbDataAdapter>, для обновления источника данных.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" /> не является допустимым.</exception>
        <exception cref="T:System.InvalidOperationException">Исходная таблица является недопустимым.</exception>
        <exception cref="T:System.SystemException">Не <see cref="T:System.Data.DataRow" /> существует для обновления.  
  
-или- 
Не <see cref="T:System.Data.DataTable" /> существует для обновления.  
  
-или- 
Не <see cref="T:System.Data.DataSet" /> существует для использования в качестве источника.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">При попытке выполнить инструкцию INSERT, UPDATE или DELETE привела к нулевому количеству обработанных записей.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Обработка данных (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="protected virtual int Update (System.Data.DataRow[] dataRows, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Update(class System.Data.DataRow[] dataRows, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Update (dataRows As DataRow(), tableMapping As DataTableMapping) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Update(cli::array &lt;System::Data::DataRow ^&gt; ^ dataRows, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataRow[] * System.Data.Common.DataTableMapping -&gt; int" Usage="dbDataAdapter.Update (dataRows, tableMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRows" Type="System.Data.DataRow[]" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRows">Массив <see cref="T:System.Data.DataRow" /> объекты, используемые для обновления источника данных.</param>
        <param name="tableMapping"><see cref="P:System.Data.IDataAdapter.TableMappings" /> Коллекцию для использования.</param>
        <summary>Обновляет значения в базе данных, выполняя соответствующие операторы INSERT, UPDATE или DELETE, для каждой вставки, обновления или удаленной строки в указанном массиве <see cref="T:System.Data.DataSet" /> объектов.</summary>
        <returns>Число успешно обновленных строк из <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если приложение вызывает <xref:System.Data.Common.DbDataAdapter.Update%2A> метод, <xref:System.Data.Common.DbDataAdapter> проверяет <xref:System.Data.DataRow.RowState%2A> свойство и выполняет необходимые инструкции INSERT, UPDATE или DELETE итеративно для каждой строки, на основе порядка индексов, настроенных в <xref:System.Data.DataSet>. Например <xref:System.Data.Common.DbDataAdapter.Update%2A> может выполнить инструкцию DELETE, за которым следует инструкции INSERT, а затем еще одну инструкцию DELETE, из-за упорядочение строк в <xref:System.Data.DataTable>.  
  
 Следует отметить, что эти инструкции выполняются не как пакетный процесс. Каждая строка обновляется по отдельности. Приложение может вызвать <xref:System.Data.DataSet.GetChanges%2A> метод в ситуациях, когда необходимо управлять последовательность инструкции типов (например,). Дополнительные сведения см. в разделе [обновление источников данных с объектами DataAdapter](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Если инструкции INSERT, UPDATE или DELETE не были указаны, <xref:System.Data.Common.DbDataAdapter.Update%2A> метод создает исключение. Тем не менее, можно создать <xref:System.Data.SqlClient.SqlCommandBuilder> или <xref:System.Data.OleDb.OleDbCommandBuilder> для автоматического создания инструкций SQL для отдельных обновлений, если задать `SelectCommand` свойства поставщика данных .NET Framework. Затем создаются все дополнительные инструкции SQL, не устанавливайте **CommandBuilder**. Этот код требует сведения о ключевом столбце должны присутствовать в <xref:System.Data.DataSet>. Дополнительные сведения см. в разделе [создание команд с помощью построителей CommandBuilder](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A> Метод извлекает строки из таблицы, приведенной в первом сопоставлении перед выполнением обновления. <xref:System.Data.Common.DbDataAdapter.Update%2A> Затем обновляет строку, используя значение <xref:System.Data.IDbCommand.UpdatedRowSource%2A> свойства. Возвращено никаких дополнительных строк учитываются.  
  
 После загрузки всех данных обратно в <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> события, позволяя пользователю проверить согласованную <xref:System.Data.DataSet> строке и все выходные параметры, возвращенный командой. После успешного обновления строки принимаются изменения этой строки.  
  
 При использовании <xref:System.Data.Common.DbDataAdapter.Update%2A>, порядок выполнения выглядит следующим образом:  
  
1.  Значения в <xref:System.Data.DataRow> перемещаются в значения параметров.  
  
2.  Возникает событие <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>.  
  
3.  Выполняется команда.  
  
4.  Если команда имеет значение `FirstReturnedRecord`, первый возвращенный результат помещается в <xref:System.Data.DataRow>.  
  
5.  Если выходные параметры, они помещаются в <xref:System.Data.DataRow>.  
  
6.  Возникает событие <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>.  
  
7.  вызывается метод <xref:System.Data.DataRow.AcceptChanges%2A>;  
  
 Каждая команда, связанная с <xref:System.Data.Common.DbDataAdapter> обычно имеет коллекцию параметров, связанных с ним. Параметры сопоставляются с текущей строкой с помощью `SourceColumn` и `SourceVersion` свойств поставщика данных .NET Framework `Parameter` класса. `SourceColumn` ссылается на <xref:System.Data.DataTable> столбца, <xref:System.Data.Common.DbDataAdapter> ссылки для получения значения параметров для текущей строки.  
  
 `SourceColumn` ссылается на несопоставленный столбец, прежде чем будут применены все сопоставления таблиц. Если `SourceColumn` ссылается на несуществующий столбец, предпринимаемые действия зависят от одного из следующих <xref:System.Data.MissingMappingAction> значения.  
  
|Значение перечисления|Действие, выполняемое|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Используйте имена исходных столбцов и таблиц в <xref:System.Data.DataSet> Если сопоставление отсутствует.|  
|`MissingMappingAction.Ignore`|Объект <xref:System.SystemException> создается. Если сопоставления заданы явно, отсутствует сопоставление для входного параметра обычно является результатом ошибки.|  
|`MissingMappingAction.Error`|Объект <xref:System.SystemException> создается.|  
  
 `SourceColumn` Свойство также используется для сопоставления значений выходных данных или входных и выходных параметров обратно в `DataSet`. Исключение создается в том случае, если он ссылается на несуществующий столбец.  
  
 `SourceVersion` Свойства поставщика данных .NET Framework `Parameter` класс определяет, следует ли использовать исходные, текущий или предложено версию значения столбца. Эта возможность часто используется для включения исходных значений в предложении WHERE инструкции UPDATE на наличие нарушений оптимистичного параллелизма.  
  
> [!NOTE]
>  Если произошла ошибка при обновлении строки, создается исключение, и выполнение обновления прекращается. Чтобы продолжить операцию обновления без генерации исключения при возникновении ошибки, установите <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> свойства `true` перед вызовом <xref:System.Data.Common.DbDataAdapter.Update%2A>. Также может реагировать на ошибки для каждой строки в `RowUpdated` событие DataAdapter. Чтобы продолжить операцию обновления без генерации исключения в `RowUpdated` набор событий, <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> свойство <xref:System.Data.Common.RowUpdatedEventArgs> для <xref:System.Data.UpdateStatus.Continue>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" /> не является допустимым.</exception>
        <exception cref="T:System.InvalidOperationException">Исходная таблица является недопустимым.</exception>
        <exception cref="T:System.SystemException">Не <see cref="T:System.Data.DataRow" /> существует для обновления.  
  
-или- 
Не <see cref="T:System.Data.DataTable" /> существует для обновления.  
  
-или- 
Не <see cref="T:System.Data.DataSet" /> существует для использования в качестве источника.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">При попытке выполнить инструкцию INSERT, UPDATE или DELETE привела к нулевому количеству обработанных записей.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Обработка данных (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataSet dataSet, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataSet * string -&gt; int" Usage="dbDataAdapter.Update (dataSet, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet"><see cref="T:System.Data.DataSet" /> Использовать для обновления источника данных.</param>
        <param name="srcTable">Имя исходной таблицы, используемое для сопоставления таблиц.</param>
        <summary>Обновляет значения в базе данных, выполняя соответствующие операторы INSERT, UPDATE или DELETE для каждой вставленной, обновленной или удаленной строки в <see cref="T:System.Data.DataSet" /> с заданным именем <see cref="T:System.Data.DataTable" />.</summary>
        <returns>Число успешно обновленных строк из <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если приложение вызывает <xref:System.Data.Common.DbDataAdapter.Update%2A> метод, <xref:System.Data.Common.DbDataAdapter> проверяет <xref:System.Data.DataRow.RowState%2A> свойство и выполняет необходимые инструкции INSERT, UPDATE или DELETE итеративно для каждой строки, на основе порядка индексов, настроенных в <xref:System.Data.DataSet>. Например <xref:System.Data.Common.DbDataAdapter.Update%2A> может выполнить инструкцию DELETE, за которым следует инструкции INSERT, а затем еще одну инструкцию DELETE, из-за упорядочение строк в <xref:System.Data.DataTable>.  
  
 Следует отметить, что эти инструкции выполняются не как пакетный процесс. Каждая строка обновляется по отдельности. Приложение может вызвать <xref:System.Data.DataSet.GetChanges%2A> метод в ситуациях, когда необходимо управлять последовательностью типов инструкций (например, вставить до обновления). Дополнительные сведения см. в разделе [обновление источников данных с объектами DataAdapter](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Если инструкции INSERT, UPDATE или DELETE не были указаны, <xref:System.Data.Common.DbDataAdapter.Update%2A> метод создает исключение. Тем не менее, можно создать <xref:System.Data.SqlClient.SqlCommandBuilder> или <xref:System.Data.OleDb.OleDbCommandBuilder> для автоматического создания инструкций SQL для отдельных обновлений, если задать `SelectCommand` свойства поставщика данных .NET Framework. Затем создаются все дополнительные инструкции SQL, не устанавливайте **CommandBuilder**. Этот код требует сведения о ключевом столбце должны присутствовать в <xref:System.Data.DataSet>. Дополнительные сведения см. в разделе [создание команд с помощью построителей CommandBuilder](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A> Метод поддерживает сценарии где <xref:System.Data.DataSet> содержит несколько <xref:System.Data.DataTable> объекты, имена которых отличаются только регистром. Если существует несколько таблиц с одинаковыми именами, но в другом случае в `DataSet`, <xref:System.Data.Common.DbDataAdapter.Update%2A> выполняет сравнение с учетом регистра для поиска соответствующей таблицы и создает исключение, если точного соответствия не существует. Следующий код C# демонстрирует это поведение.  
  
```  
DataSet ds = new DataSet();  
 ds.Tables.Add("aaa");  
 ds.Tables.Add("AAA");  
 adapter.Update(ds, "aaa"); // Updates "aaa", which already exists in the DataSet.  
 adapter.Update(ds, "AAA"); // Updates "AAA", which already exists in the DataSet.  
    adapter.Update(ds, "Aaa"); // Results in an exception.  
```  
  
 Если <xref:System.Data.Common.DbDataAdapter.Update%2A> вызывается и <xref:System.Data.DataSet> содержит только одну <xref:System.Data.DataTable> , имена которых отличаются только регистром, который <xref:System.Data.DataTable> обновляется. В этом случае сравнение выполняется без учета регистра. Следующий код C# демонстрирует это поведение.  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
    adapter.Update(dataset, "AAA"); // Updates table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A> Метод извлекает строки из таблицы, приведенной в первом сопоставлении перед выполнением обновления. <xref:System.Data.Common.DbDataAdapter.Update%2A> Затем обновляет строку, используя значение <xref:System.Data.IDbCommand.UpdatedRowSource%2A> свойства. Возвращено никаких дополнительных строк учитываются.  
  
 После загрузки всех данных обратно в <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> события, позволяя пользователю проверить согласованную <xref:System.Data.DataSet> строке и все выходные параметры, возвращенный командой. После успешного обновления строки принимаются изменения этой строки.  
  
 При использовании <xref:System.Data.Common.DbDataAdapter.Update%2A>, порядок выполнения выглядит следующим образом:  
  
1.  Значения в <xref:System.Data.DataRow> перемещаются в значения параметров.  
  
2.  Возникает событие <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>.  
  
3.  Выполняется команда.  
  
4.  Если команда имеет значение `FirstReturnedRecord`, первый возвращенный результат помещается в <xref:System.Data.DataRow>.  
  
5.  Если выходные параметры, они помещаются в <xref:System.Data.DataRow>.  
  
6.  Возникает событие <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>.  
  
7.  вызывается метод <xref:System.Data.DataRow.AcceptChanges%2A>;  
  
 Каждая команда, связанная с <xref:System.Data.Common.DbDataAdapter> обычно имеет коллекцию параметров, связанных с ним. Параметры сопоставляются с текущей строкой с помощью `SourceColumn` и `SourceVersion` свойств поставщика данных .NET Framework `Parameter` класса. `SourceColumn` ссылается на <xref:System.Data.DataTable> столбца, <xref:System.Data.Common.DbDataAdapter> ссылки для получения значения параметров для текущей строки.  
  
 `SourceColumn` ссылается на несопоставленный столбец, прежде чем будут применены все сопоставления таблиц. Если `SourceColumn` ссылается на несуществующий столбец, предпринимаемые действия зависят от одного из следующих <xref:System.Data.MissingMappingAction> значения.  
  
|Значение перечисления|Действие, выполняемое|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Используйте имена исходных столбцов и таблиц в <xref:System.Data.DataSet> Если сопоставление отсутствует.|  
|`MissingMappingAction.Ignore`|Объект <xref:System.SystemException> создается. Если сопоставления заданы явно, отсутствует сопоставление для входного параметра обычно является результатом ошибки.|  
|`MissingMappingAction.Error`|Объект <xref:System.SystemException> создается.|  
  
 `SourceColumn` Свойство также используется для сопоставления значений выходных данных или входных и выходных параметров обратно в `DataSet`. Исключение создается в том случае, если он ссылается на несуществующий столбец.  
  
 `SourceVersion` Свойства поставщика данных .NET Framework `Parameter` класс определяет, следует ли использовать исходные, текущий или предложено версию значения столбца. Эта возможность часто используется для включения исходных значений в предложении WHERE инструкции UPDATE на наличие нарушений оптимистичного параллелизма.  
  
> [!NOTE]
>  Если произошла ошибка при обновлении строки, создается исключение, и выполнение обновления прекращается. Чтобы продолжить операцию обновления без генерации исключения при возникновении ошибки, установите <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> свойства `true` перед вызовом <xref:System.Data.Common.DbDataAdapter.Update%2A>. Также может реагировать на ошибки для каждой строки в `RowUpdated` событие DataAdapter. Чтобы продолжить операцию обновления без генерации исключения в `RowUpdated` набор событий, <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> свойство <xref:System.Data.Common.RowUpdatedEventArgs> для <xref:System.Data.UpdateStatus.Continue>.  
  
   
  
## Examples  
 В следующем примере используется производный класс <xref:System.Data.OleDb.OleDbDataAdapter>, для обновления источника данных.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update3#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update3/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update3#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" /> не является допустимым.</exception>
        <exception cref="T:System.InvalidOperationException">Исходная таблица является недопустимым.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">При попытке выполнить инструкцию INSERT, UPDATE или DELETE привела к нулевому количеству обработанных записей.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Обработка данных (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateBatchSize">
      <MemberSignature Language="C#" Value="public virtual int UpdateBatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 UpdateBatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UpdateBatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int UpdateBatchSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateBatchSize : int with get, set" Usage="System.Data.Common.DbDataAdapter.UpdateBatchSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, которое включает или отключает поддержку пакетной обработки и задает количество команд, которые могут быть выполнены в пакете.</summary>
        <value>Число строк для обработки каждого пакета.  
  
 <list type="table"><listheader><term> Значение равно 
 </term><description> Действие 
 </description></listheader><item><term> 0 
 </term><description> Не ограничено размер пакета.  
  
 </description></item><item><term> 1 
 </term><description> Отключает пакетное обновление.  
  
 </description></item><item><term> &gt; 1 
 </term><description> Изменения отправляются с помощью пакетов <see cref="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" /> операций одновременно.  
  
 </description></item></list>  

 Если для этого параметра значение, отличное от 1, все команды, связанные с <see cref="T:System.Data.Common.DbDataAdapter" /> должен иметь их <see cref="P:System.Data.IDbCommand.UpdatedRowSource" /> свойство значение **None** или **OutputParameters**. В противном случае будет создано исключение.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Data.Common.DbDataAdapter.UpdateBatchSize%2A> свойства для обновления источника данных с изменениями из <xref:System.Data.DataSet>. Если поставщик данных поддерживает пакетную обработку, это может повысить производительность приложений благодаря уменьшению числа циклов приема-передачи на сервер. В ADO.NET 2.0 это свойство поддерживается для поставщиков данных .NET для SQL Server (SqlClient) и Oracle (OracleClient).  
  
 Выполнение очень больших пакетов может снизить производительность. Поэтому необходимо экспериментальным путем найти параметр оптимального размера пакета перед реализацией приложения.  
  
 <xref:System.ArgumentOutOfRangeException> Возникнет, если число имеет значение меньше нуля.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Обработка данных (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.UpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ UpdateCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.UpdateCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает команду, используемую для обновления записей в источнике данных.</summary>
        <value>Объект <see cref="T:System.Data.IDbCommand" /> используется во время <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> для обновления записей в источнике данных, соответствующих измененным строкам в наборе данных.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Во время <xref:System.Data.Common.DbDataAdapter.Update%2A>, если это свойство не задано и сведения о первичном ключе присутствует в <xref:System.Data.DataSet>, <xref:System.Data.IDbDataAdapter.UpdateCommand%2A> будет создан автоматически.  
  
   
  
## Examples  
 В следующем примере создается производный класс <xref:System.Data.OleDb.OleDbDataAdapter> и задаются некоторые его свойства.  
  
 [!code-csharp[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.UpdateCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.UpdateCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Обработка данных (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Классы DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
  </Members>
</Type>