<Type Name="ServiceManager" FullName="System.Activities.Presentation.ServiceManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1cbc2e11dcde8e5947f80148f71714d64441074d" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69322478" /></Metadata><TypeSignature Language="C#" Value="public abstract class ServiceManager : IServiceProvider, System.Collections.Generic.IEnumerable&lt;Type&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ServiceManager extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt;, class System.Collections.IEnumerable, class System.IServiceProvider" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Presentation.ServiceManager" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ServiceManager&#xA;Implements IEnumerable(Of Type), IServiceProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceManager abstract : IServiceProvider, System::Collections::Generic::IEnumerable&lt;Type ^&gt;" />
  <TypeSignature Language="F#" Value="type ServiceManager = class&#xA;    interface IServiceProvider&#xA;    interface seq&lt;Type&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="a9078-101">Реализует <see cref="T:System.IServiceProvider" /> и обеспечивает доступ к службам, предлагаемым контекстом редактирования.</span><span class="sxs-lookup"><span data-stu-id="a9078-101">Implements <see cref="T:System.IServiceProvider" /> and provides access to services offered by the editing context.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9078-102"><xref:System.Activities.Presentation.EditingContext.Services%2A> представляет функции, которые предоставляются сервером для конструктора или используются в конструкторе, чтобы сделать функции доступными для всех конструкторов в пределах редактора.</span><span class="sxs-lookup"><span data-stu-id="a9078-102"><xref:System.Activities.Presentation.EditingContext.Services%2A> represent functionality that is either provided by the host for the designer to use or that is used by the designer to make functionality available to all designers within the editor.</span></span> <span data-ttu-id="a9078-103">Он получается из объекта <xref:System.Activities.Presentation.EditingContext> свойством <xref:System.Activities.Presentation.EditingContext.Services%2A>.</span><span class="sxs-lookup"><span data-stu-id="a9078-103">It is obtained from the <xref:System.Activities.Presentation.EditingContext> by the <xref:System.Activities.Presentation.EditingContext.Services%2A> property.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ServiceManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ServiceManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a9078-104">Инициализирует новый экземпляр класса <see cref="T:System.Activities.Presentation.ServiceManager" />.</span><span class="sxs-lookup"><span data-stu-id="a9078-104">Initializes a new instance of the <see cref="T:System.Activities.Presentation.ServiceManager" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public abstract bool Contains (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Contains(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Contains (serviceType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Contains(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="abstract member Contains : Type -&gt; bool" Usage="serviceManager.Contains serviceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="a9078-105">Тип проверяемой службы.</span><span class="sxs-lookup"><span data-stu-id="a9078-105">The type of service to check.</span></span></param>
        <summary><span data-ttu-id="a9078-106">Возвращает логическое значение, указывающее, содержит ли диспетчер служб службу указанного типа.</span><span class="sxs-lookup"><span data-stu-id="a9078-106">Returns a Boolean value that indicates whether the service manager contains a service of the given type.</span></span></summary>
        <returns><span data-ttu-id="a9078-107">Значение <see langword="true" />, если опубликована служба типа <paramref name="serviceType" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a9078-107"><see langword="true" /> if a service of type <paramref name="serviceType" /> has been published; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public bool Contains&lt;TServiceType&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains&lt;TServiceType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Contains``1" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains(Of TServiceType) () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; bool Contains();" />
      <MemberSignature Language="F#" Value="member this.Contains : unit -&gt; bool" Usage="serviceManager.Contains " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TServiceType"><span data-ttu-id="a9078-108">Тип проверяемой службы.</span><span class="sxs-lookup"><span data-stu-id="a9078-108">The type of service to check.</span></span></typeparam>
        <summary><span data-ttu-id="a9078-109">Возвращает логическое значение, указывающее, содержит ли диспетчер служб службу указанного типа.</span><span class="sxs-lookup"><span data-stu-id="a9078-109">Returns a Boolean value that indicates whether the service manager contains a service of the given type.</span></span></summary>
        <returns><span data-ttu-id="a9078-110">Значение <see langword="true" />, если опубликована служба типа <paramref name="serviceType" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a9078-110"><see langword="true" /> if a service of type <paramref name="serviceType" /> has been published; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerator&lt;Type&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.Type&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEnumerator () As IEnumerator(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IEnumerator&lt;Type ^&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;Type&gt;" Usage="serviceManager.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a9078-111">Извлекает перечислитель, который можно использовать для перечисления всех служб, публикуемых этим диспетчером служб.</span><span class="sxs-lookup"><span data-stu-id="a9078-111">Retrieves an enumerator that can be used to enumerate all of the services that this service manager publishes.</span></span></summary>
        <returns><span data-ttu-id="a9078-112">Возвращает <see cref="T:System.Collections.Generic.IEnumerator`1" />, который содержит перечисление опубликованных служб.</span><span class="sxs-lookup"><span data-stu-id="a9078-112">Returns <see cref="T:System.Collections.Generic.IEnumerator`1" />, which contains an enumeration of published services.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRequiredService&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public TServiceType GetRequiredService&lt;TServiceType&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TServiceType GetRequiredService&lt;TServiceType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.GetRequiredService``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRequiredService(Of TServiceType) () As TServiceType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; TServiceType GetRequiredService();" />
      <MemberSignature Language="F#" Value="member this.GetRequiredService : unit -&gt; 'ServiceType" Usage="serviceManager.GetRequiredService " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TServiceType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TServiceType"><span data-ttu-id="a9078-113">Тип извлекаемой службы.</span><span class="sxs-lookup"><span data-stu-id="a9078-113">The type of service to retrieve.</span></span></typeparam>
        <summary><span data-ttu-id="a9078-114">Извлекает запрошенную службу.</span><span class="sxs-lookup"><span data-stu-id="a9078-114">Retrieves the requested service.</span></span></summary>
        <returns><span data-ttu-id="a9078-115">Универсальный тип, который является экземпляром службы.</span><span class="sxs-lookup"><span data-stu-id="a9078-115">A generic type, which is an instance of the service.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9078-116">В отличие от <xref:System.Activities.Presentation.ServiceManager.GetService%2A>, этот метод выдает исключение <xref:System.NotSupportedException>, если служба недоступна.</span><span class="sxs-lookup"><span data-stu-id="a9078-116">Unlike <xref:System.Activities.Presentation.ServiceManager.GetService%2A>, this method throws a <xref:System.NotSupportedException> if the service is not available.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="a9078-117">Службы указанного типа не существует.</span><span class="sxs-lookup"><span data-stu-id="a9078-117">There is no service of the given type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public abstract object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetService(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="abstract member GetService : Type -&gt; obj" Usage="serviceManager.GetService serviceType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IServiceProvider.GetService(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="a9078-118">Тип извлекаемой службы.</span><span class="sxs-lookup"><span data-stu-id="a9078-118">The type of service to retrieve.</span></span></param>
        <summary><span data-ttu-id="a9078-119">Извлекает запрошенную службу.</span><span class="sxs-lookup"><span data-stu-id="a9078-119">Retrieves the requested service.</span></span>  <span data-ttu-id="a9078-120">Этот метод возвращает значение <see langword="null" />, если служба не обнаружена.</span><span class="sxs-lookup"><span data-stu-id="a9078-120">This method returns <see langword="null" /> if the service could not be located.</span></span></summary>
        <returns><span data-ttu-id="a9078-121">Возвращает <see cref="T:System.Object" />, который является экземпляром службы, или значение <see langword="null" />, если служба не была опубликована.</span><span class="sxs-lookup"><span data-stu-id="a9078-121">Returns <see cref="T:System.Object" />, which is an instance of the service, or <see langword="null" /> if the service has not been published.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a9078-122">Свойство <paramref name="serviceType" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="a9078-122"><paramref name="serviceType" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetService&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public TServiceType GetService&lt;TServiceType&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TServiceType GetService&lt;TServiceType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.GetService``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService(Of TServiceType) () As TServiceType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; TServiceType GetService();" />
      <MemberSignature Language="F#" Value="member this.GetService : unit -&gt; 'ServiceType" Usage="serviceManager.GetService " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TServiceType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TServiceType"><span data-ttu-id="a9078-123">Тип извлекаемой службы.</span><span class="sxs-lookup"><span data-stu-id="a9078-123">The type of service to retrieve.</span></span></typeparam>
        <summary><span data-ttu-id="a9078-124">Извлекает запрошенную службу.</span><span class="sxs-lookup"><span data-stu-id="a9078-124">Retrieves the requested service.</span></span> <span data-ttu-id="a9078-125">Этот метод возвращает значение <see langword="null" />, если служба не обнаружена.</span><span class="sxs-lookup"><span data-stu-id="a9078-125">This method returns <see langword="null" /> if the service could not be located.</span></span></summary>
        <returns><span data-ttu-id="a9078-126">Универсальный тип, который является экземпляром службы, или значение <see langword="null" />, если служба не была опубликована.</span><span class="sxs-lookup"><span data-stu-id="a9078-126">A generic type, which is an instance of the service, or <see langword="null" /> if the service has not been published.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTarget">
      <MemberSignature Language="C#" Value="protected static object GetTarget (Delegate callback);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig object GetTarget(class System.Delegate callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.GetTarget(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetTarget (callback As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Object ^ GetTarget(Delegate ^ callback);" />
      <MemberSignature Language="F#" Value="static member GetTarget : Delegate -&gt; obj" Usage="System.Activities.Presentation.ServiceManager.GetTarget callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="a9078-127">Делегат, для которого необходимо получить целевой объект.</span><span class="sxs-lookup"><span data-stu-id="a9078-127">The delegate to get the target for.</span></span></param>
        <summary><span data-ttu-id="a9078-128">Вспомогательный метод, который возвращает целевой объект для делегата.</span><span class="sxs-lookup"><span data-stu-id="a9078-128">A helper method that returns the target object for a delegate.</span></span> <span data-ttu-id="a9078-129">Если делегат создан как прокси-сервер для универсального делегата, этот метод правильно возвращает исходный объект, а не прокси-сервер.</span><span class="sxs-lookup"><span data-stu-id="a9078-129">If the delegate was created to proxy a generic delegate, this will correctly return the original object, not the proxy.</span></span></summary>
        <returns><span data-ttu-id="a9078-130">Возвращает объект <see cref="T:System.Object" />, являющийся целевым объектом обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="a9078-130">Returns <see cref="T:System.Object" />, which is the callback target.</span></span> <span data-ttu-id="a9078-131">Может вернуть значение <see langword="null" />, если обратный вызов представляет статический объект.</span><span class="sxs-lookup"><span data-stu-id="a9078-131">This can return <see langword="null" /> if the callback represents a static object.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a9078-132">Свойство <paramref name="callback" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="a9078-132"><paramref name="callback" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Publish">
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a9078-133">Публикует заданный тип службы, но не объявляет экземпляр.</span><span class="sxs-lookup"><span data-stu-id="a9078-133">Publishes the given service type, but does not declare an instance.</span></span> <span data-ttu-id="a9078-134">Когда служба запрошена, будет вызван обратный вызов службы публикации для создания экземпляра.</span><span class="sxs-lookup"><span data-stu-id="a9078-134">When the service is requested, the Publish service callback will be invoked to create the instance.</span></span> <span data-ttu-id="a9078-135">Обратный вызов выполняется только один раз.</span><span class="sxs-lookup"><span data-stu-id="a9078-135">The callback is invoked only once.</span></span> <span data-ttu-id="a9078-136">После этого возвращенный экземпляр записывается в кэш.</span><span class="sxs-lookup"><span data-stu-id="a9078-136">After that, the instance it returned is cached.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Publish">
      <MemberSignature Language="C#" Value="public abstract void Publish (Type serviceType, System.Activities.Presentation.PublishServiceCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Publish(class System.Type serviceType, class System.Activities.Presentation.PublishServiceCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Publish(System.Type,System.Activities.Presentation.PublishServiceCallback)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Publish (serviceType As Type, callback As PublishServiceCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Publish(Type ^ serviceType, System::Activities::Presentation::PublishServiceCallback ^ callback);" />
      <MemberSignature Language="F#" Value="abstract member Publish : Type * System.Activities.Presentation.PublishServiceCallback -&gt; unit" Usage="serviceManager.Publish (serviceType, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="callback" Type="System.Activities.Presentation.PublishServiceCallback" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="a9078-137">Тип публикуемой службы.</span><span class="sxs-lookup"><span data-stu-id="a9078-137">The type of service to publish.</span></span></param>
        <param name="callback"><span data-ttu-id="a9078-138">Обратный вызов, который будет выполнен, когда нужен экземпляр службы.</span><span class="sxs-lookup"><span data-stu-id="a9078-138">A callback that will be invoked when an instance of the service is needed.</span></span></param>
        <summary><span data-ttu-id="a9078-139">Публикует указанный тип службы, но не объявляет экземпляр.</span><span class="sxs-lookup"><span data-stu-id="a9078-139">Publishes the specified service type, but does not declare an instance.</span></span> <span data-ttu-id="a9078-140">Когда служба запрошена, будет вызван обратный вызов службы публикации для создания экземпляра.</span><span class="sxs-lookup"><span data-stu-id="a9078-140">When the service is requested, the Publish service callback will be invoked to create the instance.</span></span> <span data-ttu-id="a9078-141">Обратный вызов выполняется только один раз.</span><span class="sxs-lookup"><span data-stu-id="a9078-141">The callback is invoked only once.</span></span> <span data-ttu-id="a9078-142">После этого возвращенный экземпляр записывается в кэш.</span><span class="sxs-lookup"><span data-stu-id="a9078-142">After that, the instance it returned is cached.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a9078-143">Параметр <paramref name="serviceType" /> или <paramref name="callback" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="a9078-143"><paramref name="serviceType" /> or <paramref name="callback" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a9078-144"><paramref name="serviceType" /> уже опубликован.</span><span class="sxs-lookup"><span data-stu-id="a9078-144"><paramref name="serviceType" /> has already been published.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Publish">
      <MemberSignature Language="C#" Value="public abstract void Publish (Type serviceType, object serviceInstance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Publish(class System.Type serviceType, object serviceInstance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Publish(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Publish (serviceType As Type, serviceInstance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Publish(Type ^ serviceType, System::Object ^ serviceInstance);" />
      <MemberSignature Language="F#" Value="abstract member Publish : Type * obj -&gt; unit" Usage="serviceManager.Publish (serviceType, serviceInstance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="serviceInstance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="a9078-145">Тип публикуемой службы.</span><span class="sxs-lookup"><span data-stu-id="a9078-145">The type of service to publish.</span></span></param>
        <param name="serviceInstance"><span data-ttu-id="a9078-146">Экземпляр службы.</span><span class="sxs-lookup"><span data-stu-id="a9078-146">An instance of the service.</span></span></param>
        <summary><span data-ttu-id="a9078-147">Публикует заданную службу.</span><span class="sxs-lookup"><span data-stu-id="a9078-147">Publishes the given service.</span></span> <span data-ttu-id="a9078-148">После публикации экземпляр службы остается в диспетчере служб до тех пор, пока контекст редактирования не удален.</span><span class="sxs-lookup"><span data-stu-id="a9078-148">After it is published, the service instance remains in the service manager until the editing context is disposed of.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a9078-149">Параметр <paramref name="serviceType" /> или <paramref name="serviceInstance" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="a9078-149"><paramref name="serviceType" /> or <paramref name="serviceInstance" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a9078-150"><paramref name="serviceInstance" /> не является производным от объекта <paramref name="serviceType" />, не реализует его или <paramref name="serviceType" /> уже опубликован.</span><span class="sxs-lookup"><span data-stu-id="a9078-150"><paramref name="serviceInstance" /> does not derive from or implement <paramref name="serviceType" />, or <paramref name="serviceType" /> has already been published.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Publish&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public void Publish&lt;TServiceType&gt; (System.Activities.Presentation.PublishServiceCallback&lt;TServiceType&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Publish&lt;TServiceType&gt;(class System.Activities.Presentation.PublishServiceCallback`1&lt;!!TServiceType&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Publish``1(System.Activities.Presentation.PublishServiceCallback{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Publish(Of TServiceType) (callback As PublishServiceCallback(Of TServiceType))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; void Publish(System::Activities::Presentation::PublishServiceCallback&lt;TServiceType&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Publish : System.Activities.Presentation.PublishServiceCallback&lt;'ServiceType&gt; -&gt; unit" Usage="serviceManager.Publish callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Activities.Presentation.PublishServiceCallback&lt;TServiceType&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TServiceType"><span data-ttu-id="a9078-151">Тип публикуемой службы.</span><span class="sxs-lookup"><span data-stu-id="a9078-151">The type of the service to publish.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="a9078-152">Обратный вызов, который будет выполнен, когда нужен экземпляр службы.</span><span class="sxs-lookup"><span data-stu-id="a9078-152">A callback that will be invoked when an instance of the service is needed.</span></span></param>
        <summary><span data-ttu-id="a9078-153">Публикует заданный тип службы, но не объявляет экземпляр.</span><span class="sxs-lookup"><span data-stu-id="a9078-153">Publishes the given service type, but does not declare an instance yet.</span></span> <span data-ttu-id="a9078-154">Когда служба запрашивается, вызывается <see langword="PublishServiceCallback" /> для создания экземпляра.</span><span class="sxs-lookup"><span data-stu-id="a9078-154">When the service is requested, the <see langword="PublishServiceCallback" /> will be invoked to create the instance.</span></span> <span data-ttu-id="a9078-155">Обратный вызов выполняется только один раз.</span><span class="sxs-lookup"><span data-stu-id="a9078-155">The callback is invoked only once.</span></span> <span data-ttu-id="a9078-156">После этого возвращенный экземпляр записывается в кэш.</span><span class="sxs-lookup"><span data-stu-id="a9078-156">After that, the instance it returned is cached.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a9078-157">Свойство <paramref name="callback" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="a9078-157"><paramref name="callback" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Publish&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public void Publish&lt;TServiceType&gt; (TServiceType serviceInstance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Publish&lt;TServiceType&gt;(!!TServiceType serviceInstance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Publish``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Publish(Of TServiceType) (serviceInstance As TServiceType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; void Publish(TServiceType serviceInstance);" />
      <MemberSignature Language="F#" Value="member this.Publish : 'ServiceType -&gt; unit" Usage="serviceManager.Publish serviceInstance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceInstance" Type="TServiceType" />
      </Parameters>
      <Docs>
        <typeparam name="TServiceType"><span data-ttu-id="a9078-158">Тип публикуемой службы.</span><span class="sxs-lookup"><span data-stu-id="a9078-158">The type of the service to publish.</span></span></typeparam>
        <param name="serviceInstance"><span data-ttu-id="a9078-159">Экземпляр службы.</span><span class="sxs-lookup"><span data-stu-id="a9078-159">An instance of the service.</span></span></param>
        <summary><span data-ttu-id="a9078-160">Публикует заданную службу.</span><span class="sxs-lookup"><span data-stu-id="a9078-160">Publishes the given service.</span></span> <span data-ttu-id="a9078-161">После публикации экземпляр службы остается в диспетчере служб до тех пор, пока контекст редактирования не удален.</span><span class="sxs-lookup"><span data-stu-id="a9078-161">After it is published, the service instance remains in the service manager until the editing context is disposed of.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a9078-162"><paramref name="serviceInstance" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="a9078-162"><paramref name="serviceInstance" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveCallback">
      <MemberSignature Language="C#" Value="protected static Delegate RemoveCallback (Delegate existing, Delegate toRemove);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Delegate RemoveCallback(class System.Delegate existing, class System.Delegate toRemove) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.RemoveCallback(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function RemoveCallback (existing As Delegate, toRemove As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static Delegate ^ RemoveCallback(Delegate ^ existing, Delegate ^ toRemove);" />
      <MemberSignature Language="F#" Value="static member RemoveCallback : Delegate * Delegate -&gt; Delegate" Usage="System.Activities.Presentation.ServiceManager.RemoveCallback (existing, toRemove)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="existing" Type="System.Delegate" />
        <Parameter Name="toRemove" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="existing"><span data-ttu-id="a9078-163">Существующий делегат, из которого удаляется обратный вызов.</span><span class="sxs-lookup"><span data-stu-id="a9078-163">The existing delegate to remove the callback from.</span></span></param>
        <param name="toRemove"><span data-ttu-id="a9078-164">Удаляемый обратный вызов.</span><span class="sxs-lookup"><span data-stu-id="a9078-164">The callback to remove.</span></span></param>
        <summary><span data-ttu-id="a9078-165">Вспомогательный метод, который выполняет операцию <see langword="Delegate.Remove" /> и операцию распаковки делегатов, являющихся прокси для универсальных обратных вызовов.</span><span class="sxs-lookup"><span data-stu-id="a9078-165">A helper method that performs a <see langword="Delegate.Remove" /> operation, and unwraps delegates that are proxies to generic callbacks.</span></span> <span data-ttu-id="a9078-166">Используйте этот метод при реализации <see cref="Overload:System.Activities.Presentation.ServiceManager.Unsubscribe" />.</span><span class="sxs-lookup"><span data-stu-id="a9078-166">You should use this method in your <see cref="Overload:System.Activities.Presentation.ServiceManager.Unsubscribe" /> implementations.</span></span></summary>
        <returns><span data-ttu-id="a9078-167">Возвращает значение <see cref="T:System.Delegate" /> как новое значение для существующего делегата.</span><span class="sxs-lookup"><span data-stu-id="a9078-167">Returns <see cref="T:System.Delegate" />, which is  a new value to assign to the existing delegate.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subscribe">
      <MemberSignature Language="C#" Value="public abstract void Subscribe (Type serviceType, System.Activities.Presentation.SubscribeServiceCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Subscribe(class System.Type serviceType, class System.Activities.Presentation.SubscribeServiceCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Subscribe(System.Type,System.Activities.Presentation.SubscribeServiceCallback)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Subscribe (serviceType As Type, callback As SubscribeServiceCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Subscribe(Type ^ serviceType, System::Activities::Presentation::SubscribeServiceCallback ^ callback);" />
      <MemberSignature Language="F#" Value="abstract member Subscribe : Type * System.Activities.Presentation.SubscribeServiceCallback -&gt; unit" Usage="serviceManager.Subscribe (serviceType, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeServiceCallback" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="a9078-168">Тип услуги, на которую необходимо подписаться.</span><span class="sxs-lookup"><span data-stu-id="a9078-168">The type of service to subscribe to.</span></span></param>
        <param name="callback"><span data-ttu-id="a9078-169">Обратный вызов, который будет уведомлен, когда служба доступна.</span><span class="sxs-lookup"><span data-stu-id="a9078-169">A callback that will be notified when the service is available.</span></span></param>
        <summary><span data-ttu-id="a9078-170">Извлекает предоставленную обратного вызова, когда кто-то опубликовал запрошенную службу.</span><span class="sxs-lookup"><span data-stu-id="a9078-170">Invokes the provided callback when someone has published the requested service.</span></span> <span data-ttu-id="a9078-171">Если служба уже доступна, этот метод немедленно выполняет обратный вызов.</span><span class="sxs-lookup"><span data-stu-id="a9078-171">If the service was already available, this method invokes the callback immediately.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a9078-172">Параметр <paramref name="serviceType" /> или <paramref name="callback" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="a9078-172"><paramref name="serviceType" /> or <paramref name="callback" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Subscribe&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public void Subscribe&lt;TServiceType&gt; (System.Activities.Presentation.SubscribeServiceCallback&lt;TServiceType&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Subscribe&lt;TServiceType&gt;(class System.Activities.Presentation.SubscribeServiceCallback`1&lt;!!TServiceType&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Subscribe``1(System.Activities.Presentation.SubscribeServiceCallback{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Subscribe(Of TServiceType) (callback As SubscribeServiceCallback(Of TServiceType))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; void Subscribe(System::Activities::Presentation::SubscribeServiceCallback&lt;TServiceType&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Subscribe : System.Activities.Presentation.SubscribeServiceCallback&lt;'ServiceType&gt; -&gt; unit" Usage="serviceManager.Subscribe callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeServiceCallback&lt;TServiceType&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TServiceType"><span data-ttu-id="a9078-173">Тип службы, на которую необходимо подписаться.</span><span class="sxs-lookup"><span data-stu-id="a9078-173">The type of the service to subscribe to.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="a9078-174">Обратный вызов, который будет уведомлен, когда служба доступна.</span><span class="sxs-lookup"><span data-stu-id="a9078-174">A callback that will be notified when the service is available.</span></span></param>
        <summary><span data-ttu-id="a9078-175">Извлекает предоставленную обратного вызова, когда кто-то опубликовал запрошенную службу.</span><span class="sxs-lookup"><span data-stu-id="a9078-175">Invokes the provided callback when someone has published the requested service.</span></span> <span data-ttu-id="a9078-176">Если служба уже доступна, этот метод немедленно выполняет обратный вызов.</span><span class="sxs-lookup"><span data-stu-id="a9078-176">If the service was already available, this method invokes the callback immediately.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a9078-177">Свойство <paramref name="callback" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="a9078-177"><paramref name="callback" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a9078-178">Извлекает перечислитель, который можно использовать для перечисления всех служб, публикуемых этим диспетчером служб.</span><span class="sxs-lookup"><span data-stu-id="a9078-178">Retrieves an enumerator that can be used to enumerate all of the services that this service manager publishes.</span></span></summary>
        <returns><span data-ttu-id="a9078-179">Возвращает <see cref="T:System.Collections.IEnumerator" />, который содержит перечисление опубликованных служб.</span><span class="sxs-lookup"><span data-stu-id="a9078-179">Returns <see cref="T:System.Collections.IEnumerator" />, which contains an enumeration of published services.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unsubscribe">
      <MemberSignature Language="C#" Value="public abstract void Unsubscribe (Type serviceType, System.Activities.Presentation.SubscribeServiceCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unsubscribe(class System.Type serviceType, class System.Activities.Presentation.SubscribeServiceCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Unsubscribe(System.Type,System.Activities.Presentation.SubscribeServiceCallback)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Unsubscribe (serviceType As Type, callback As SubscribeServiceCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Unsubscribe(Type ^ serviceType, System::Activities::Presentation::SubscribeServiceCallback ^ callback);" />
      <MemberSignature Language="F#" Value="abstract member Unsubscribe : Type * System.Activities.Presentation.SubscribeServiceCallback -&gt; unit" Usage="serviceManager.Unsubscribe (serviceType, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeServiceCallback" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="a9078-180">Тип услуги, на которую отменяется подписка.</span><span class="sxs-lookup"><span data-stu-id="a9078-180">The type of service to remove the subscription from.</span></span></param>
        <param name="callback"><span data-ttu-id="a9078-181">Объект обратного вызова, удаляемый из подписки.</span><span class="sxs-lookup"><span data-stu-id="a9078-181">The callback object to remove from the subscription.</span></span></param>
        <summary><span data-ttu-id="a9078-182">Удаляет подписку для типа службы.</span><span class="sxs-lookup"><span data-stu-id="a9078-182">Removes a subscription for a service type.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a9078-183">Параметр <paramref name="serviceType" /> или <paramref name="callback" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="a9078-183"><paramref name="serviceType" /> or <paramref name="callback" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Unsubscribe&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public void Unsubscribe&lt;TServiceType&gt; (System.Activities.Presentation.SubscribeServiceCallback&lt;TServiceType&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unsubscribe&lt;TServiceType&gt;(class System.Activities.Presentation.SubscribeServiceCallback`1&lt;!!TServiceType&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Unsubscribe``1(System.Activities.Presentation.SubscribeServiceCallback{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unsubscribe(Of TServiceType) (callback As SubscribeServiceCallback(Of TServiceType))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; void Unsubscribe(System::Activities::Presentation::SubscribeServiceCallback&lt;TServiceType&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Unsubscribe : System.Activities.Presentation.SubscribeServiceCallback&lt;'ServiceType&gt; -&gt; unit" Usage="serviceManager.Unsubscribe callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeServiceCallback&lt;TServiceType&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TServiceType"><span data-ttu-id="a9078-184">Тип услуги, на которую отменяется подписка.</span><span class="sxs-lookup"><span data-stu-id="a9078-184">The type of the service to remove the subscription from.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="a9078-185">Объект обратного вызова, удаляемый из подписки.</span><span class="sxs-lookup"><span data-stu-id="a9078-185">The callback object to remove from the subscription.</span></span></param>
        <summary><span data-ttu-id="a9078-186">Удаляет подписку для типа службы.</span><span class="sxs-lookup"><span data-stu-id="a9078-186">Removes a subscription for a service type.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a9078-187">Свойство <paramref name="callback" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="a9078-187"><paramref name="callback" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
