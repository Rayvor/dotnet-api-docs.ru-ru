<Type Name="HttpEncoder" FullName="System.Web.Util.HttpEncoder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6d4ca8f4e0b8697125baead3259fe24f00acad98" /><Meta Name="ms.sourcegitcommit" Value="a22d0855bbf24d893f43605f8b7e3a44bd9551a5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70314195" /></Metadata><TypeSignature Language="C#" Value="public class HttpEncoder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi HttpEncoder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.HttpEncoder" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpEncoder" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpEncoder" />
  <TypeSignature Language="F#" Value="type HttpEncoder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет логику кодирования и декодирования.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Класс содержит логику кодирования и декодирования, используемую методами в таких классах <xref:System.Web.HttpUtility>, <xref:System.Web.HttpServerUtility>как, <xref:System.Net.HttpResponseHeader>и.  
  
 Можно наследовать от <xref:System.Web.Util.HttpEncoder> класса и переопределить его поведение для настройки кодировки по умолчанию и декодирования ASP.NET. Затем задайте <xref:System.Web.Configuration.HttpRuntimeSection.EncoderType%2A> свойство <xref:System.Web.Configuration.HttpRuntimeSection> класса, чтобы настроить пользовательский класс.  
  
 Пользовательский класс для кодирования и декодирования, производного от <xref:System.Web.Util.HttpEncoder> , может переопределить встроенное поведение кодирования и декодирования ASP.NET или изменить только выбранные аспекты.  
  
 Можно настроить пользовательский тип кодирования для в ASP.NET, чтобы заменить или дополнить следующее поведение кодировки:  
  
-   Кодировка HTML  
  
-   Кодировка атрибута HTML  
  
-   Кодирование URL-адреса  
  
-   Кодирование URL-пути  
  
-   Имя заголовка HTTP и кодировка значений заголовка  
  
 По умолчанию ASP.NET приложения настроены на использование <xref:System.Web.Security.AntiXss.AntiXssEncoder> типа для всех кодировок вывода.  
  
 В следующем примере из файла Web. config уровня приложения показано, <xref:System.Web.Security.AntiXss.AntiXssEncoder> как задается тип для приложения ASP.NET:  
  
 `<httpRuntime requestValidationMode="4.5" encoderType="System.Web.Security.AntiXss.AntiXssEncoder, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"/>`  
  
 Параметр конфигурации в примере задает <xref:System.Web.Security.AntiXss.AntiXssEncoder> класс для выполнения всех кодировок вывода в приложении. Дополнительные сведения см. в <xref:System.Web.Security.AntiXss.AntiXssEncoder> разделе Общие сведения о классе.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>При создании пользовательского класса кодировщика и переопределении базовых методов базового класса производный кодировщик может вызвать исключение из любого переопределенного метода. Однако в следующих случаях создание такого исключения может привести к непредвиденному поведению в ASP.NET:  
  
— Если ASP.NET выводит страницу ошибки, вызванную необработанным исключением, которое было создано из пользовательского кодировщика, ASP.NET не пытается кодировать вывод ошибок путем вызова пользовательского кодировщика. Это позволяет избежать рекурсивных условий возникновения ошибок.  
  
— Когда ASP.NET отправляет заголовки HTTP в службы IIS, ASP.NET не предоставляет необработанные исключения. Поэтому будет отображена стандартная страница ошибки ASP.NET (если параметры конфигурации позволяют отображать эту страницу).</para></block>
    <altmember cref="T:System.Web.HttpUtility" />
    <altmember cref="T:System.Web.HttpServerUtility" />
    <altmember cref="T:System.Web.Configuration.HttpRuntimeSection" />
    <altmember cref="T:System.Web.Security.AntiXss.AntiXssEncoder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpEncoder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Util.HttpEncoder" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.Util.HttpEncoder Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.HttpEncoder Current" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.HttpEncoder.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As HttpEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::HttpEncoder ^ Current { System::Web::Util::HttpEncoder ^ get(); void set(System::Web::Util::HttpEncoder ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Web.Util.HttpEncoder with get, set" Usage="System.Web.Util.HttpEncoder.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.HttpEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает тип <see cref="T:System.Web.Util.HttpEncoder" />, который будет использован в приложении.</summary>
        <value>Ссылка на тип кодирования-декодирования, который будет использован.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если в файле <xref:System.Web.Util.HttpEncoder> конфигурации указан производный тип <xref:System.Web.Util.HttpEncoder.Current%2A> , свойство возвращает ссылку на пользовательский тип. Однако если пользовательский кодировщик не используется, свойство возвращает ссылку на экземпляр ASP.NET <xref:System.Web.Util.HttpEncoder> по умолчанию.  
  
 <xref:System.Web.Util.HttpEncoder.Current%2A> Свойство не является потокобезопасным. Это свойство задается только в `Application_Start` методе приложения, поскольку `Application_Start` выполняется в одном потоке.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Экземпляр кодировщика, назначаемый данному свойству, имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Web.Util.HttpEncoder Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.HttpEncoder Default" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.HttpEncoder.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As HttpEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::HttpEncoder ^ Default { System::Web::Util::HttpEncoder ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.Web.Util.HttpEncoder" Usage="System.Web.Util.HttpEncoder.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Util.HttpEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает ссылку на кодировщик ASP.NET по умолчанию.</summary>
        <value>Ссылка на кодировщик по умолчанию.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Распространенная ошибка кодирования заключается в том, что <xref:System.Web.Util.HttpEncoder.UrlEncode%2A> поведение ASP.NET по умолчанию преобразует пробелы в символ "+". Исторически символ "+" был Интернет-соглашением для кодирования символов пространства в URL-адресе более удобочитаемым способом. Однако в соответствии со стандартами символ пробела должен быть закодирован как "% 20", а не как символ "+". ASP.NET позволяет реализовать более совместимый с стандартам алгоритм кодировки.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderNameValueEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HeaderNameValueEncode (string headerName, string headerValue, out string encodedHeaderName, out string encodedHeaderValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HeaderNameValueEncode(string headerName, string headerValue, [out] string&amp; encodedHeaderName, [out] string&amp; encodedHeaderValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HeaderNameValueEncode(System.String,System.String,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HeaderNameValueEncode (headerName As String, headerValue As String, ByRef encodedHeaderName As String, ByRef encodedHeaderValue As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HeaderNameValueEncode(System::String ^ headerName, System::String ^ headerValue, [Runtime::InteropServices::Out] System::String ^ % encodedHeaderName, [Runtime::InteropServices::Out] System::String ^ % encodedHeaderValue);" />
      <MemberSignature Language="F#" Value="abstract member HeaderNameValueEncode : string * string * string * string -&gt; unit&#xA;override this.HeaderNameValueEncode : string * string * string * string -&gt; unit" Usage="httpEncoder.HeaderNameValueEncode (headerName, headerValue, encodedHeaderName, encodedHeaderValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="headerName" Type="System.String" />
        <Parameter Name="headerValue" Type="System.String" />
        <Parameter Name="encodedHeaderName" Type="System.String" RefType="out" />
        <Parameter Name="encodedHeaderValue" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="headerName">Имя HTTP-заголовка, которое необходимо закодировать.</param>
        <param name="headerValue">Значение HTTP-заголовка, которое необходимо закодировать.</param>
        <param name="encodedHeaderName">Этот метод возвращает кодированное имя для использования в HTTP-заголовке. Этот параметр передается неинициализированным.</param>
        <param name="encodedHeaderValue">Этот метод возвращает кодированное значение для использования в HTTP-заголовке. Этот параметр передается неинициализированным.</param>
        <summary>Кодирует имя и значение заголовка в строку, которая может быть использована в HTTP-заголовке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод принимает входные строки `headerName` из параметров и `headerValue` и кодирует их. <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> Закодированные значения возвращаются в виде параметров out.  
  
 <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> Метод использует следующую логику для кодирования имен и значений заголовков:  
  
-   Все символы, значение Юникода которых меньше, чем символ ASCII 32, за исключением символа ASCII 9, кодируются в формате URL в формат `%NN` , в `N` котором символы представляют шестнадцатеричные значения.  
  
-   Символ ASCII 9 (символ табуляции по горизонтали) не кодируется в URL-адресе.  
  
-   Символ ASCII 127 кодируется как `%7F`.  
  
-   Все остальные символы не кодируются.  
  
    > [!NOTE]
    >  Несмотря на то, что этот метод можно использовать для значений Юникода, он обычно используется для значений в диапазоне ASCII.  
  
 Реализация <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> метода по умолчанию возвращает `headerValue` значение в `encodedHeaderValue` , если `headerValue` равно `null` или является пустой строкой. Аналогичным образом, реализация по умолчанию возвращает `headerName` значение `encodedHeaderName` в `headerName` , `null` если равно или является пустой строкой.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlAttributeEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlAttributeEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlAttributeEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlAttributeEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlAttributeEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlAttributeEncode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlAttributeEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlAttributeEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">Кодируемая строка.</param>
        <param name="output">Модуль записи текста, в который необходимо записать закодированное значение.</param>
        <summary>Кодирует входящее значение в строку, которая может быть вставлена в HTML-атрибут, ограниченный одинарными или двойными кавычками.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A> Метод кодирует символы с помощью стандартных сущностей HTML. Например, `<` (левая угловая скобка) кодируется как `&lt;` и `\` (обратная косая черта) кодируется как `&#92;`.  
  
 Его можно использовать <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A> в атрибутах с одинарными кавычками и двойными кавычками. Значения должны быть заключены в кавычки.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="output" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlDecode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlDecode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlDecode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlDecode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlDecode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlDecode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlDecode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlDecode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">Строка для расшифровки.</param>
        <param name="output">Модуль записи текста, в который необходимо записать декодированное значение.</param>
        <summary>Декодирует значение из строки в кодировке HTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В следующей таблице перечислены последовательности символов, которые может декодировать логика декодирования ASP.NET.  
  
|Последовательность символов|Правило|  
|------------------------|----------|  
|`&#NNN;`(десятичные коды для символов ASCII).|Декодированный как указанный символ ASCII. Последовательность символов начинается с первой цифры после символа # и заканчивается точкой с запятой.|  
|`&#xZZ;`(шестнадцатеричные коды для символов ASCII).|Декодированный как указанный символ ASCII. Закодированная форма указывает символ, используя шестнадцатеричные символы вместо десятичного значения. Последовательность символов начинается с первой цифры после символа # и заканчивается точкой с запятой.|  
|Именованные сущности HTML.|Декодированный как эквивалентный символ ASCII.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="output" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlEncode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">Кодируемая строка.</param>
        <param name="output">Модуль записи текста, в который необходимо записать закодированное значение.</param>
        <summary>Зашифровывает строку в строку в кодировке HTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В следующей таблице перечислены последовательности символов, которые может декодировать логика кодирования ASP.NET.  
  
|Знак|Закодировано как|  
|---------------|----------------|  
|`<`(левая угловая скобка)|`&lt;`|  
|`>`(правая угловая скобка)|`&gt;`|  
|`"`(двойные кавычки)|`&quot;`|  
|`&`знаки|`&amp;`|  
|`\`(обратная косая черта) |`&#92;`|  
|Символы ASCII с 160 по 255|`&#NNN;`, где `NNN` — код десятичного символа из трех цифр|  
  
 При переопределении <xref:System.Web.Util.HttpEncoder.HtmlEncode%2A> метода необходимо создать выходные данные, которые также могут быть защищены в HTML-атрибутах с двойными кавычками или одинарными кавычками. Это разбирается ядром Razor, где можно комбинировать разметку и код, например \<тег attr = "@value" >. Кроме того, оператор @ не учитывает контекст при обработке модулем Razor, поэтому он вызывает <xref:System.Web.Util.HttpEncoder.HtmlEncode%2A> , <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A>а не.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="output" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="JavaScriptStringEncode">
      <MemberSignature Language="C#" Value="protected internal virtual string JavaScriptStringEncode (string value);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string JavaScriptStringEncode(string value) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.JavaScriptStringEncode(System.String)" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function JavaScriptStringEncode (value As String) As String" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ JavaScriptStringEncode(System::String ^ value);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member JavaScriptStringEncode : string -&gt; string&#xA;override this.JavaScriptStringEncode : string -&gt; string" Usage="httpEncoder.JavaScriptStringEncode value" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">Кодируемая строка.</param>
        <summary>Кодирует строку.</summary>
        <returns>Закодированная строка.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Кодирование URL-адресов гарантирует правильную передачу текста в строках URL-адресов всеми браузерами. Такие символы, как вопросительный знак (?), амперсанд (&), косая черта (/) и пробелы, могут быть усечены или повреждены в некоторых браузерах. Поэтому эти символы должны быть закодированы.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="protected internal virtual byte[] UrlEncode (byte[] bytes, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance unsigned int8[] UrlEncode(unsigned int8[] bytes, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.UrlEncode(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function UrlEncode (bytes As Byte(), offset As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ UrlEncode(cli::array &lt;System::Byte&gt; ^ bytes, int offset, int count);" />
      <MemberSignature Language="F#" Value="abstract member UrlEncode : byte[] * int * int -&gt; byte[]&#xA;override this.UrlEncode : byte[] * int * int -&gt; byte[]" Usage="httpEncoder.UrlEncode (bytes, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">Массив байтов, который необходимо закодировать.</param>
        <param name="offset">Позиция в массиве <paramref name="bytes" />, с которой начинается кодирование.</param>
        <param name="count">Количество кодируемых элементов массива <paramref name="bytes" />.</param>
        <summary>Кодирует массив недопустимых в URL-адресе символов в шестнадцатеричный эквивалент сущности знака.</summary>
        <returns>Массив кодируемых символов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод вызывается несколькими методами кодирования URL-адреса <xref:System.Web.HttpUtility> в классе. <xref:System.Web.Util.HttpEncoder.UrlEncode%2A>  
  
 URL-адрес метода кодирует любой символ, который не входит в набор символов ASCII, которые считаются безопасными по URL-адресам. <xref:System.Web.Util.HttpEncoder.UrlEncode%2A> Пробелы кодируются как`+"` символ ASCII. URL-разрядные символы ASCII содержат символы ASCII (от A до Z и от a до z), цифры (от 0 до 9) и некоторые знаки препинания. В следующей таблице перечислены знаки пунктуации, которые считаются URL-безопасными символами ASCII.  
  
|Знак|Описание|  
|---------------|-----------------|  
|-|Означа|  
|_|Подчеркивания|  
|.|Точка (точка)|  
|!|Восклицательный знак|  
|*|Звездочка (звезда)|  
|(|Открывающая скобка|  
|)|Закрывающая круглая скобка|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> меньше нуля или больше, чем длина массива <paramref name="bytes" />.  
  
- или - 
 <paramref name="count" /> меньше нуля, или <paramref name="count" /> плюс <paramref name="offset" /> больше, чем длина массива <paramref name="bytes" />.</exception>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="bytes" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UrlPathEncode">
      <MemberSignature Language="C#" Value="protected internal virtual string UrlPathEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string UrlPathEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.UrlPathEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function UrlPathEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ UrlPathEncode(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member UrlPathEncode : string -&gt; string&#xA;override this.UrlPathEncode : string -&gt; string" Usage="httpEncoder.UrlPathEncode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Кодируемая строка.</param>
        <summary>Кодирует часть URL-адреса.</summary>
        <returns>Строка в URL-кодировке.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A> вызывается методом <xref:System.Web.HttpUtility.UrlPathEncode%2A>. <xref:System.Web.HttpUtility.UrlPathEncode%2A> Метод выполняет следующие действия:  
  
-   Применяет логику <xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A> кодирования метода только к части пути URL-адреса (которая исключает строку запроса). Метод предполагает, что URL-адрес кодируется как строка UTF-8.  
  
-   Кодирует непробелы таким образом, что в полученной строковой кодировке используется только подмножество первых 128 символов ASCII. Любые символы в Юникоде 128 и больше, или 32 и меньше, кодируются URL-адресом.  
  
-   Кодирует пробелы как% 20.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
