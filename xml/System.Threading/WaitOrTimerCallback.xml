<Type Name="WaitOrTimerCallback" FullName="System.Threading.WaitOrTimerCallback">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b1ac621ec611448ac033be06e63d1040d5ca4aea" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75114867" /></Metadata><TypeSignature Language="C#" Value="public delegate void WaitOrTimerCallback(object state, bool timedOut);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitOrTimerCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitOrTimerCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitOrTimerCallback(state As Object, timedOut As Boolean)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitOrTimerCallback(System::Object ^ state, bool timedOut);" />
  <TypeSignature Language="F#" Value="type WaitOrTimerCallback = delegate of obj * bool -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
    <Parameter Name="timedOut" Type="System.Boolean" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state"><span data-ttu-id="3ebf3-101">Объект, содержащий информацию, используемую всякий раз методом обратного вызова при каждом выполнении.</span><span class="sxs-lookup"><span data-stu-id="3ebf3-101">An object containing information to be used by the callback method each time it executes.</span></span></param>
    <param name="timedOut"><span data-ttu-id="3ebf3-102">Значение <see langword="true" />, если истекло время ожидания объекта <see cref="T:System.Threading.WaitHandle" />; <see langword="false" />, если объект получил сигнал.</span><span class="sxs-lookup"><span data-stu-id="3ebf3-102"><see langword="true" /> if the <see cref="T:System.Threading.WaitHandle" /> timed out; <see langword="false" /> if it was signaled.</span></span></param>
    <summary><span data-ttu-id="3ebf3-103">Представляет метод, который вызывается при получении объектом <see cref="T:System.Threading.WaitHandle" /> сигнала или истечении времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="3ebf3-103">Represents a method to be called when a <see cref="T:System.Threading.WaitHandle" /> is signaled or times out.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ebf3-104"><xref:System.Threading.WaitOrTimerCallback> представляет метод обратного вызова, который необходимо выполнить при истечении времени ожидания зарегистрированного дескриптора ожидания или сигнала.</span><span class="sxs-lookup"><span data-stu-id="3ebf3-104"><xref:System.Threading.WaitOrTimerCallback> represents a callback method that you want to execute when a registered wait handle times out or is signaled.</span></span> <span data-ttu-id="3ebf3-105">Создайте делегат, передав метод обратного вызова конструктору <xref:System.Threading.WaitOrTimerCallback>.</span><span class="sxs-lookup"><span data-stu-id="3ebf3-105">Create the delegate by passing your callback method to the <xref:System.Threading.WaitOrTimerCallback> constructor.</span></span> <span data-ttu-id="3ebf3-106">Ваш метод должен иметь приведенную здесь подпись.</span><span class="sxs-lookup"><span data-stu-id="3ebf3-106">Your method must have the signature shown here.</span></span>  
  
 <span data-ttu-id="3ebf3-107">Создайте зарегистрированный маркер ожидания, передав делегат <xref:System.Threading.WaitOrTimerCallback> и <xref:System.Threading.WaitHandle> <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="3ebf3-107">Create the registered wait handle by passing the <xref:System.Threading.WaitOrTimerCallback> delegate and a <xref:System.Threading.WaitHandle> to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="3ebf3-108">Метод обратного вызова выполняется каждый раз, когда <xref:System.Threading.WaitHandle> истекает время ожидания или сообщается.</span><span class="sxs-lookup"><span data-stu-id="3ebf3-108">Your callback method executes each time the <xref:System.Threading.WaitHandle> times out or is signaled.</span></span>  
  
  
> [!NOTE]
>  <span data-ttu-id="3ebf3-109">Visual Basic пользователи могут опустить конструктор <xref:System.Threading.WaitOrTimerCallback> и просто использовать оператор `AddressOf` при передаче метода обратного вызова в <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>.</span><span class="sxs-lookup"><span data-stu-id="3ebf3-109">Visual Basic users can omit the <xref:System.Threading.WaitOrTimerCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>.</span></span> <span data-ttu-id="3ebf3-110">Visual Basic автоматически вызывает правильный конструктор делегата.</span><span class="sxs-lookup"><span data-stu-id="3ebf3-110">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
 <span data-ttu-id="3ebf3-111">Если вы хотите передать сведения в метод обратного вызова, создайте объект, содержащий необходимые сведения, и передайте его в <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> при создании зарегистрированного маркера ожидания.</span><span class="sxs-lookup"><span data-stu-id="3ebf3-111">If you want to pass information to your callback method, create an object that contains the necessary information and pass it to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> when you create the registered wait handle.</span></span> <span data-ttu-id="3ebf3-112">Каждый раз, когда выполняется метод обратного вызова, параметр `state` содержит этот объект.</span><span class="sxs-lookup"><span data-stu-id="3ebf3-112">Each time your callback method executes, the `state` parameter contains this object.</span></span>  
  
 <span data-ttu-id="3ebf3-113">Дополнительные сведения об использовании методов обратного вызова для синхронизации потоков пула потоков см. [в разделе управляемый пул потоков](~/docs/standard/threading/the-managed-thread-pool.md).</span><span class="sxs-lookup"><span data-stu-id="3ebf3-113">For more information about using callback methods to synchronize thread pool threads, see [The managed thread pool](~/docs/standard/threading/the-managed-thread-pool.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3ebf3-114">В следующем примере показано, как использовать делегат <xref:System.Threading.WaitOrTimerCallback> для представления метода обратного вызова, который выполняется при сигнале дескриптора ожидания.</span><span class="sxs-lookup"><span data-stu-id="3ebf3-114">The following example shows how to use the <xref:System.Threading.WaitOrTimerCallback> delegate to represent a callback method that is executed when a wait handle is signaled.</span></span>  
  
 <span data-ttu-id="3ebf3-115">В примере также показано, как использовать метод <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> для выполнения указанного метода обратного вызова при получении сигнала о заданном дескрипторе ожидания.</span><span class="sxs-lookup"><span data-stu-id="3ebf3-115">The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="3ebf3-116">В этом примере метод обратного вызова `WaitProc`, а маркер ожидания — <xref:System.Threading.AutoResetEvent>.</span><span class="sxs-lookup"><span data-stu-id="3ebf3-116">In this example, the callback method is `WaitProc` and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="3ebf3-117">В примере определяется класс `TaskInfo`, в котором хранятся сведения, передаваемые обратному вызову при его выполнении.</span><span class="sxs-lookup"><span data-stu-id="3ebf3-117">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="3ebf3-118">В примере создается объект `TaskInfo` и назначается часть строковых данных.</span><span class="sxs-lookup"><span data-stu-id="3ebf3-118">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="3ebf3-119"><xref:System.Threading.RegisteredWaitHandle>, возвращаемый методом <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, назначается полю `Handle` объекта `TaskInfo`, чтобы метод обратного вызова получил доступ к <xref:System.Threading.RegisteredWaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="3ebf3-119">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object, so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="3ebf3-120">В дополнение к объекту `TaskInfo`, вызов метода <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> указывает <xref:System.Threading.AutoResetEvent>, который ожидает задача, делегат <xref:System.Threading.WaitOrTimerCallback>, представляющий метод обратного вызова `WaitProc`, интервал времени ожидания в 1 секунду и несколько обратных вызовов.</span><span class="sxs-lookup"><span data-stu-id="3ebf3-120">In addition to the `TaskInfo` object, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> the task waits on, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one-second timeout interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="3ebf3-121">Когда основной поток передает <xref:System.Threading.AutoResetEvent>, вызывая его метод <xref:System.Threading.EventWaitHandle.Set%2A>, вызывается делегат <xref:System.Threading.WaitOrTimerCallback>.</span><span class="sxs-lookup"><span data-stu-id="3ebf3-121">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="3ebf3-122">Метод `WaitProc` проверяет <xref:System.Threading.RegisteredWaitHandle>, чтобы определить, было ли истекло время ожидания.</span><span class="sxs-lookup"><span data-stu-id="3ebf3-122">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a timeout occurred.</span></span> <span data-ttu-id="3ebf3-123">Если обратный вызов был вызван из-за того, что дескриптор ожидания был сигнальным, метод `WaitProc` отменяет регистрацию <xref:System.Threading.RegisteredWaitHandle>и останавливает последующие обратные вызовы.</span><span class="sxs-lookup"><span data-stu-id="3ebf3-123">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping further callbacks.</span></span> <span data-ttu-id="3ebf3-124">В случае истечения времени ожидания задача переходит в режим ожидания.</span><span class="sxs-lookup"><span data-stu-id="3ebf3-124">In the case of a timeout, the task continues waiting.</span></span> <span data-ttu-id="3ebf3-125">Метод `WaitProc` завершается печатью сообщения на консоль.</span><span class="sxs-lookup"><span data-stu-id="3ebf3-125">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/threading/threads-and-threading.md"><span data-ttu-id="3ebf3-126">Потоки и работа с потоками</span><span class="sxs-lookup"><span data-stu-id="3ebf3-126">Threads and Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md"><span data-ttu-id="3ebf3-127">Пул управляемых потоков</span><span class="sxs-lookup"><span data-stu-id="3ebf3-127">The managed thread pool</span></span></related>
  </Docs>
</Type>
