<Type Name="WaitOrTimerCallback" FullName="System.Threading.WaitOrTimerCallback">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e689e3c51fb3b9fb769b22344ec66072599632f8" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70692956" /></Metadata><TypeSignature Language="C#" Value="public delegate void WaitOrTimerCallback(object state, bool timedOut);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitOrTimerCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitOrTimerCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitOrTimerCallback(state As Object, timedOut As Boolean)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitOrTimerCallback(System::Object ^ state, bool timedOut);" />
  <TypeSignature Language="F#" Value="type WaitOrTimerCallback = delegate of obj * bool -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
    <Parameter Name="timedOut" Type="System.Boolean" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state">Объект, содержащий информацию, используемую всякий раз методом обратного вызова при каждом выполнении.</param>
    <param name="timedOut">Значение <see langword="true" />, если истекло время ожидания объекта <see cref="T:System.Threading.WaitHandle" />; <see langword="false" />, если объект получил сигнал.</param>
    <summary>Представляет метод, который вызывается при получении объектом <see cref="T:System.Threading.WaitHandle" /> сигнала или истечении времени ожидания.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.WaitOrTimerCallback>представляет метод обратного вызова, который необходимо выполнить при истечении времени ожидания зарегистрированного дескриптора ожидания или сигнала. Создайте делегат, передав метод <xref:System.Threading.WaitOrTimerCallback> обратного вызова в конструктор. Ваш метод должен иметь приведенную здесь подпись.  
  
 Создайте зарегистрированный обработчик ожидания, передав <xref:System.Threading.WaitOrTimerCallback> делегата <xref:System.Threading.WaitHandle> и <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>в. Метод обратного вызова выполняется каждый раз, <xref:System.Threading.WaitHandle> когда истечет время ожидания или сигнал.  
  
  
> [!NOTE]
>  Visual Basic пользователи могут опустить <xref:System.Threading.WaitOrTimerCallback> конструктор и просто `AddressOf` использовать оператор при передаче метода обратного вызова в <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>. Visual Basic автоматически вызывает правильный конструктор делегата.  
  
 Если вы хотите передать сведения в метод обратного вызова, создайте объект, содержащий необходимые сведения, и передайте его <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> при создании зарегистрированного маркера ожидания. Каждый раз, когда выполняется метод обратного вызова `state` , параметр содержит этот объект.  
  
 Дополнительные сведения об использовании методов обратного вызова для синхронизации потоков пула потоков см. [в разделе управляемый пул потоков](~/docs/standard/threading/the-managed-thread-pool.md).  
  
   
  
## Examples  
 В следующем примере показано, как использовать <xref:System.Threading.WaitOrTimerCallback> делегат для представления метода обратного вызова, который выполняется при получении сигнала о дескрипторе ожидания.  
  
 В примере также показано, <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> как использовать метод для выполнения указанного метода обратного вызова при сигнале указанного дескриптора ожидания. В этом примере метод обратного вызова имеет `WaitProc` значение, а обработчик ожидания <xref:System.Threading.AutoResetEvent>—.  
  
 В примере определяется `TaskInfo` класс, в котором хранятся сведения, передаваемые обратному вызову при его выполнении. В примере создается `TaskInfo` объект и назначается часть строковых данных. <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> `TaskInfo` <xref:System.Threading.RegisteredWaitHandle>Объект, возвращаемый `Handle`  методом, присваивается полю объекта, чтобы метод обратного вызова получил доступ к. <xref:System.Threading.RegisteredWaitHandle>  
  
 `TaskInfo` В дополнение к объекту, вызов <xref:System.Threading.AutoResetEvent> <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> метода указывает, что задача ожидает, <xref:System.Threading.WaitOrTimerCallback> делегат, представляющий `WaitProc` метод обратного вызова, интервал времени ожидания в 1 секунду и несколько обратных вызовов. .  
  
 Когда основной поток передает <xref:System.Threading.AutoResetEvent> вызов, вызывая его <xref:System.Threading.EventWaitHandle.Set%2A> метод, <xref:System.Threading.WaitOrTimerCallback> вызывается делегат. `WaitProc` Метод проверяет <xref:System.Threading.RegisteredWaitHandle>  , было ли истекло время ожидания. Если обратный вызов был вызван из-за получения сигнала дескриптора ожидания, `WaitProc` метод отменяет регистрацию <xref:System.Threading.RegisteredWaitHandle>и останавливает дальнейшие обратные вызовы. В случае истечения времени ожидания задача переходит в режим ожидания. `WaitProc` Метод завершается печатью сообщения на консоль.  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/threading/threads-and-threading.md">Потоки и работа с потоками</related>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md">Пул управляемых потоков</related>
  </Docs>
</Type>
