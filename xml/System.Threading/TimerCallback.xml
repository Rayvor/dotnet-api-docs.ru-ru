<Type Name="TimerCallback" FullName="System.Threading.TimerCallback">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0b0b8efe4aa1165c6984fc5c20495271f9061b35" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69143730" /></Metadata><TypeSignature Language="C#" Value="public delegate void TimerCallback(object state);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed TimerCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.TimerCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub TimerCallback(state As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void TimerCallback(System::Object ^ state);" />
  <TypeSignature Language="F#" Value="type TimerCallback = delegate of obj -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Timer</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;dotnet-uwp-10.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state">Объект, содержащий информацию о конкретном приложении, существенные для метода, вызванного этим делегатом, или значение <see langword="null" />.</param>
    <summary>Представляет метод, обрабатывающий вызовы от события <see cref="T:System.Threading.Timer" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте делегат, чтобы указать метод, который вызывается <xref:System.Threading.Timer>. `TimerCallback` Этот метод не выполняется в потоке, создавшем таймер; он выполняется в отдельном потоке пула потоков, предоставляемом системой. Делегат вызывает метод один раз после истечения времени начала и по-своему вызывает его один раз для каждого интервала таймера <xref:System.Threading.Timer.Dispose%2A> до <xref:System.Threading.Timer.Change%2A?displayProperty=nameWithType> вызова метода или до вызова метода с использованием значения <xref:System.Threading.Timeout.Infinite>Interval. `TimerCallback`  
  
> [!NOTE]
>  Обратные вызовы могут возникать <xref:System.Threading.Timer.Dispose> после вызова перегрузки метода, поскольку таймер помещает обратные вызовы для выполнения потоками пула потоков. Перегрузку <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> метода можно использовать для ожидания завершения всех обратных вызовов.  
  
 Делегат Timer указывается при создании таймера и не может быть изменен. Время `Timer` начала передается `dueTime` в параметре `Timer` конструкторов `period` , а точка передается в параметр. Пример, демонстрирующий создание и использование `TimerCallback` делегата, см. в разделе. <xref:System.Threading.Timer?displayProperty=nameWithType>  
  
   
  
## Examples  
 В следующем примере кода показано, как создать делегат, используемый с `Timer` классом.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.Timer" />
    <altmember cref="T:System.Threading.ThreadPool" />
    <related type="Article" href="~/docs/standard/threading/timers.md">таймеры</related>
  </Docs>
</Type>
