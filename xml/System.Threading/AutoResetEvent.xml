<Type Name="AutoResetEvent" FullName="System.Threading.AutoResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9e6098621f5f19e3db4f83b158e21ab3f784ad58" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75116869" /></Metadata><TypeSignature Language="C#" Value="public sealed class AutoResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AutoResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.AutoResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AutoResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutoResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type AutoResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Представляет событие синхронизации потоков, которое при срабатывании автоматически сбрасывается, освобождая один поток в состоянии ожидания. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для взаимодействия потоков (или потоковых сигналов) используются `AutoResetEvent`, <xref:System.Threading.ManualResetEvent>и <xref:System.Threading.EventWaitHandle>. Дополнительные сведения см. в разделе [взаимодействие потоков или сигнализация](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling) статьи [Общие сведения о примитивах синхронизации](~/docs/standard/threading/overview-of-synchronization-primitives.md) .  
  
> [!IMPORTANT]
>  Этот тип реализует интерфейс <xref:System.IDisposable>. По окончании использования выдаленную ему память следует прямо или косвенно освободить. Чтобы сделать это прямо, вызовите его метод <xref:System.IDisposable.Dispose%2A> в блоке `try`/`catch`. Чтобы сделать это косвенно, используйте языковые конструкции, такие как `using` (в C#) или `Using` (в Visual Basic). Дополнительные сведения см. в разделе "Использование объекта, реализующего IDisposable" в статье об интерфейсе <xref:System.IDisposable>.  
  
 Поток ожидает сигнал, вызывая [AutoResetEvent. WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A). Если `AutoResetEvent` находится в несигнальном состоянии, поток блокируется до вызова [AutoResetEvent. Set](xref:System.Threading.EventWaitHandle.Set%2A) .  
  
 Вызов `Set` сигнализирует `AutoResetEvent`, чтобы освободить ожидающий поток. `AutoResetEvent` остается сигнальным до тех пор, пока не будет освобожден один ожидающий поток, а затем автоматически вернется в несигнальное состояние. Если потоки не ожидают, состояние остается неограниченным.  
  
 Если поток вызывает <xref:System.Threading.WaitHandle.WaitOne%2A>, когда <xref:System.Threading.AutoResetEvent> находится в сигнальном состоянии, поток не блокируется. <xref:System.Threading.AutoResetEvent> освобождает поток немедленно и возвращается в несигнальное состояние.  
  
> [!IMPORTANT]
>  Нет никакой гарантии, что каждый вызов метода <xref:System.Threading.EventWaitHandle.Set%2A> будет освобождать поток. Если два вызова находятся слишком близко друг к другу, так что второй вызов происходит до освобождения потока, освобождается только один поток. Это так, как если бы второй вызов не происходил. Кроме того, если <xref:System.Threading.EventWaitHandle.Set%2A> вызывается, когда нет потоков, ожидающих обработки, и <xref:System.Threading.AutoResetEvent> уже имеет сигнал, вызов не действует.  
  
 Вы можете управлять начальным состоянием `AutoResetEvent`, передав конструктору логическое значение: `true`, если начальное состояние сигнальное, и `false` в противном случае.  
  
 `AutoResetEvent` также можно использовать с методами `static` <xref:System.Threading.WaitHandle.WaitAll%2A> и <xref:System.Threading.WaitHandle.WaitAny%2A>.  
  
 Начиная с версии .NET Framework 2,0, <xref:System.Threading.AutoResetEvent> является производным от нового класса <xref:System.Threading.EventWaitHandle>. <xref:System.Threading.AutoResetEvent> функционально эквивалентен <xref:System.Threading.EventWaitHandle>, созданному с помощью <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.  
  
> [!NOTE]
>  В отличие от класса <xref:System.Threading.AutoResetEvent> класс <xref:System.Threading.EventWaitHandle> предоставляет доступ к именованным событиям системной синхронизации.  
  
   
  
## Examples  
 В следующем примере показано, как использовать <xref:System.Threading.AutoResetEvent> для освобождения одного потока за раз путем вызова метода <xref:System.Threading.EventWaitHandle.Set%2A> (в базовом классе) каждый раз, когда пользователь нажимает клавишу **Ввод** . В примере запускаются три потока, ожидающие <xref:System.Threading.AutoResetEvent>, которые были созданы в сигнальном состоянии. Первый поток освобождается немедленно, так как <xref:System.Threading.AutoResetEvent> уже находится в сигнальном состоянии. Это приведет к сбросу <xref:System.Threading.AutoResetEvent> в несигнальное состояние, чтобы последующий блок потоков был заблокирован. Заблокированные потоки освобождаются до тех пор, пока пользователь не выйдет их по одному, нажав клавишу **Ввод** .  
  
 После освобождения потоков от первого <xref:System.Threading.AutoResetEvent>они ожидают другого <xref:System.Threading.AutoResetEvent>, созданного в несигнальном состоянии. Все три потока блокируют, поэтому метод <xref:System.Threading.EventWaitHandle.Set%2A> должен вызываться три раза, чтобы освободить их.  
  
 [!code-cpp[System.Threading.AutoResetEvent#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/simplerisbetter.cpp#3)]
 [!code-csharp[System.Threading.AutoResetEvent#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/simplerisbetter.cs#3)]
 [!code-vb[System.Threading.AutoResetEvent#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/simplerisbetter.vb#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Этот класс является потокобезопасным.</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md">Управляемая поточность</related>
    <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md">Общие сведения о примитивах синхронизации</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AutoResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AutoResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.AutoResetEvent : bool -&gt; System.Threading.AutoResetEvent" Usage="new System.Threading.AutoResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">Значение <see langword="true" /> для задания начального состояния сигнальным; <see langword="false" /> для задания несигнального начального состояния.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.AutoResetEvent" /> логическим значением, показывающим наличие сигнального состояния.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере используется <xref:System.Threading.AutoResetEvent> для синхронизации действий двух потоков. Первый поток, который является потоком приложения, выполняет `Main`. Он записывает значения в защищенный ресурс, который является `static` (`Shared` в Visual Basic) с именем `number`. Второй поток выполняет статический метод `ThreadProc`, который считывает значения, записанные `Main`.  
  
 Метод `ThreadProc` ожидает <xref:System.Threading.AutoResetEvent>. Когда `Main` вызывает метод <xref:System.Threading.EventWaitHandle.Set%2A> на <xref:System.Threading.AutoResetEvent>, метод `ThreadProc` считывает одно значение. <xref:System.Threading.AutoResetEvent> немедленно сбрасывается, поэтому метод `ThreadProc` снова ждет.  
  
 Логика программы гарантирует, что метод `ThreadProc` никогда не будет считывать одно и то же значение два раза. Это не гарантирует, что метод `ThreadProc` будет считывать каждое значение, записанное `Main`. Это гарантирует необходимость второй блокировки <xref:System.Threading.AutoResetEvent>.  
  
 После каждой операции записи `Main` выдает вызов метода <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>, чтобы придать второму потоку возможность выполнить операцию. В противном случае на компьютере с одним процессором `Main` будет записывать много значений между любыми двумя операциями чтения.  
  
 [!code-cpp[System.Threading.AutoResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.AutoResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/class1.cs#1)]
 [!code-vb[System.Threading.AutoResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md">Управляемая поточность</related>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md">Общие сведения о примитивах синхронизации</related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="autoResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Задает несигнальное состояние события, вызывая блокирование потоков.</summary>
        <returns>Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="autoResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Задает сигнальное состояние события, позволяя одному или нескольким ожидающим потокам продолжить.</summary>
        <returns>Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Метод Set освобождает один поток. Если нет ожидающих потоков, дескриптор ожидания остается сигнальным до тех пор, пока поток не попытается его подождать или пока не будет вызван метод Reset.

> [!IMPORTANT]
> Нет никакой гарантии, что каждый вызов метода Set выдаст поток. Если два вызова находятся слишком близко друг к другу, так что второй вызов происходит до освобождения потока, выдается только один поток, как если бы второй вызов не произошел. Кроме того, если метод set вызывается, когда нет потоков, ожидающих обработки, а <xref:System.Threading.AutoResetEvent> уже имеет сигнал, вызов не действует.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
