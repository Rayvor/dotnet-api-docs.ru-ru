<Type Name="AutoResetEvent" FullName="System.Threading.AutoResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9e6098621f5f19e3db4f83b158e21ab3f784ad58" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75116869" /></Metadata><TypeSignature Language="C#" Value="public sealed class AutoResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AutoResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.AutoResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AutoResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutoResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type AutoResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="dba53-101">Представляет событие синхронизации потоков, которое при срабатывании автоматически сбрасывается, освобождая один поток в состоянии ожидания.</span><span class="sxs-lookup"><span data-stu-id="dba53-101">Represents a thread synchronization event that, when signaled, resets automatically after releasing a single waiting thread.</span></span> <span data-ttu-id="dba53-102">Этот класс не наследуется.</span><span class="sxs-lookup"><span data-stu-id="dba53-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba53-103">Для взаимодействия потоков (или потоковых сигналов) используются `AutoResetEvent`, <xref:System.Threading.ManualResetEvent>и <xref:System.Threading.EventWaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="dba53-103">You use `AutoResetEvent`, <xref:System.Threading.ManualResetEvent>, and <xref:System.Threading.EventWaitHandle> for thread interaction (or thread signaling).</span></span> <span data-ttu-id="dba53-104">Дополнительные сведения см. в разделе [взаимодействие потоков или сигнализация](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling) статьи [Общие сведения о примитивах синхронизации](~/docs/standard/threading/overview-of-synchronization-primitives.md) .</span><span class="sxs-lookup"><span data-stu-id="dba53-104">For more information, see the [Thread interaction, or signaling](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling) section of the [Overview of synchronization primitives](~/docs/standard/threading/overview-of-synchronization-primitives.md) article.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dba53-105">Этот тип реализует интерфейс <xref:System.IDisposable>.</span><span class="sxs-lookup"><span data-stu-id="dba53-105">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="dba53-106">По окончании использования выдаленную ему память следует прямо или косвенно освободить.</span><span class="sxs-lookup"><span data-stu-id="dba53-106">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="dba53-107">Чтобы сделать это прямо, вызовите его метод <xref:System.IDisposable.Dispose%2A> в блоке `try`/`catch`.</span><span class="sxs-lookup"><span data-stu-id="dba53-107">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="dba53-108">Чтобы сделать это косвенно, используйте языковые конструкции, такие как `using` (в C#) или `Using` (в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="dba53-108">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="dba53-109">Дополнительные сведения см. в разделе "Использование объекта, реализующего IDisposable" в статье об интерфейсе <xref:System.IDisposable>.</span><span class="sxs-lookup"><span data-stu-id="dba53-109">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="dba53-110">Поток ожидает сигнал, вызывая [AutoResetEvent. WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A).</span><span class="sxs-lookup"><span data-stu-id="dba53-110">A thread waits for a signal by calling [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A).</span></span> <span data-ttu-id="dba53-111">Если `AutoResetEvent` находится в несигнальном состоянии, поток блокируется до вызова [AutoResetEvent. Set](xref:System.Threading.EventWaitHandle.Set%2A) .</span><span class="sxs-lookup"><span data-stu-id="dba53-111">If the `AutoResetEvent` is in the non-signaled state, the thread blocks until [AutoResetEvent.Set](xref:System.Threading.EventWaitHandle.Set%2A) is called.</span></span>  
  
 <span data-ttu-id="dba53-112">Вызов `Set` сигнализирует `AutoResetEvent`, чтобы освободить ожидающий поток.</span><span class="sxs-lookup"><span data-stu-id="dba53-112">Calling `Set` signals `AutoResetEvent` to release a waiting thread.</span></span> <span data-ttu-id="dba53-113">`AutoResetEvent` остается сигнальным до тех пор, пока не будет освобожден один ожидающий поток, а затем автоматически вернется в несигнальное состояние.</span><span class="sxs-lookup"><span data-stu-id="dba53-113">`AutoResetEvent` remains signaled until a single waiting thread is released, and then automatically returns to the non-signaled state.</span></span> <span data-ttu-id="dba53-114">Если потоки не ожидают, состояние остается неограниченным.</span><span class="sxs-lookup"><span data-stu-id="dba53-114">If no threads are waiting, the state remains signaled indefinitely.</span></span>  
  
 <span data-ttu-id="dba53-115">Если поток вызывает <xref:System.Threading.WaitHandle.WaitOne%2A>, когда <xref:System.Threading.AutoResetEvent> находится в сигнальном состоянии, поток не блокируется.</span><span class="sxs-lookup"><span data-stu-id="dba53-115">If a thread calls <xref:System.Threading.WaitHandle.WaitOne%2A> while the <xref:System.Threading.AutoResetEvent> is in the signaled state, the thread does not block.</span></span> <span data-ttu-id="dba53-116"><xref:System.Threading.AutoResetEvent> освобождает поток немедленно и возвращается в несигнальное состояние.</span><span class="sxs-lookup"><span data-stu-id="dba53-116">The <xref:System.Threading.AutoResetEvent> releases the thread immediately and returns to the non-signaled state.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dba53-117">Нет никакой гарантии, что каждый вызов метода <xref:System.Threading.EventWaitHandle.Set%2A> будет освобождать поток.</span><span class="sxs-lookup"><span data-stu-id="dba53-117">There is no guarantee that every call to the <xref:System.Threading.EventWaitHandle.Set%2A> method will release a thread.</span></span> <span data-ttu-id="dba53-118">Если два вызова находятся слишком близко друг к другу, так что второй вызов происходит до освобождения потока, освобождается только один поток.</span><span class="sxs-lookup"><span data-stu-id="dba53-118">If two calls are too close together, so that the second call occurs before a thread has been released, only one thread is released.</span></span> <span data-ttu-id="dba53-119">Это так, как если бы второй вызов не происходил.</span><span class="sxs-lookup"><span data-stu-id="dba53-119">It's as if the second call did not happen.</span></span> <span data-ttu-id="dba53-120">Кроме того, если <xref:System.Threading.EventWaitHandle.Set%2A> вызывается, когда нет потоков, ожидающих обработки, и <xref:System.Threading.AutoResetEvent> уже имеет сигнал, вызов не действует.</span><span class="sxs-lookup"><span data-stu-id="dba53-120">Also, if <xref:System.Threading.EventWaitHandle.Set%2A> is called when there are no threads waiting and the <xref:System.Threading.AutoResetEvent> is already signaled, the call has no effect.</span></span>  
  
 <span data-ttu-id="dba53-121">Вы можете управлять начальным состоянием `AutoResetEvent`, передав конструктору логическое значение: `true`, если начальное состояние сигнальное, и `false` в противном случае.</span><span class="sxs-lookup"><span data-stu-id="dba53-121">You can control the initial state of an `AutoResetEvent` by passing a Boolean value to the constructor: `true` if the initial state is signaled and `false` otherwise.</span></span>  
  
 <span data-ttu-id="dba53-122">`AutoResetEvent` также можно использовать с методами `static` <xref:System.Threading.WaitHandle.WaitAll%2A> и <xref:System.Threading.WaitHandle.WaitAny%2A>.</span><span class="sxs-lookup"><span data-stu-id="dba53-122">`AutoResetEvent` can also be used with the `static` <xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.</span></span>  
  
 <span data-ttu-id="dba53-123">Начиная с версии .NET Framework 2,0, <xref:System.Threading.AutoResetEvent> является производным от нового класса <xref:System.Threading.EventWaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="dba53-123">Beginning with the .NET Framework version 2.0, <xref:System.Threading.AutoResetEvent> derives from the new <xref:System.Threading.EventWaitHandle> class.</span></span> <span data-ttu-id="dba53-124"><xref:System.Threading.AutoResetEvent> функционально эквивалентен <xref:System.Threading.EventWaitHandle>, созданному с помощью <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="dba53-124">An <xref:System.Threading.AutoResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dba53-125">В отличие от класса <xref:System.Threading.AutoResetEvent> класс <xref:System.Threading.EventWaitHandle> предоставляет доступ к именованным событиям системной синхронизации.</span><span class="sxs-lookup"><span data-stu-id="dba53-125">Unlike the <xref:System.Threading.AutoResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dba53-126">В следующем примере показано, как использовать <xref:System.Threading.AutoResetEvent> для освобождения одного потока за раз путем вызова метода <xref:System.Threading.EventWaitHandle.Set%2A> (в базовом классе) каждый раз, когда пользователь нажимает клавишу **Ввод** .</span><span class="sxs-lookup"><span data-stu-id="dba53-126">The following example shows how to use <xref:System.Threading.AutoResetEvent> to release one thread at a time, by calling the <xref:System.Threading.EventWaitHandle.Set%2A> method (on the base class) each time the user presses the **Enter** key.</span></span> <span data-ttu-id="dba53-127">В примере запускаются три потока, ожидающие <xref:System.Threading.AutoResetEvent>, которые были созданы в сигнальном состоянии.</span><span class="sxs-lookup"><span data-stu-id="dba53-127">The example starts three threads, which wait on an <xref:System.Threading.AutoResetEvent> that was created in the signaled state.</span></span> <span data-ttu-id="dba53-128">Первый поток освобождается немедленно, так как <xref:System.Threading.AutoResetEvent> уже находится в сигнальном состоянии.</span><span class="sxs-lookup"><span data-stu-id="dba53-128">The first thread is released immediately, because the <xref:System.Threading.AutoResetEvent> is already in the signaled state.</span></span> <span data-ttu-id="dba53-129">Это приведет к сбросу <xref:System.Threading.AutoResetEvent> в несигнальное состояние, чтобы последующий блок потоков был заблокирован.</span><span class="sxs-lookup"><span data-stu-id="dba53-129">This resets the <xref:System.Threading.AutoResetEvent> to the non-signaled state, so that subsequent threads block.</span></span> <span data-ttu-id="dba53-130">Заблокированные потоки освобождаются до тех пор, пока пользователь не выйдет их по одному, нажав клавишу **Ввод** .</span><span class="sxs-lookup"><span data-stu-id="dba53-130">The blocked threads are not released until the user releases them one at a time by pressing the **Enter** key.</span></span>  
  
 <span data-ttu-id="dba53-131">После освобождения потоков от первого <xref:System.Threading.AutoResetEvent>они ожидают другого <xref:System.Threading.AutoResetEvent>, созданного в несигнальном состоянии.</span><span class="sxs-lookup"><span data-stu-id="dba53-131">After the threads are released from the first <xref:System.Threading.AutoResetEvent>, they wait on another <xref:System.Threading.AutoResetEvent> that was created in the non-signaled state.</span></span> <span data-ttu-id="dba53-132">Все три потока блокируют, поэтому метод <xref:System.Threading.EventWaitHandle.Set%2A> должен вызываться три раза, чтобы освободить их.</span><span class="sxs-lookup"><span data-stu-id="dba53-132">All three threads block, so the <xref:System.Threading.EventWaitHandle.Set%2A> method must be called three times to release them all.</span></span>  
  
 [!code-cpp[System.Threading.AutoResetEvent#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/simplerisbetter.cpp#3)]
 [!code-csharp[System.Threading.AutoResetEvent#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/simplerisbetter.cs#3)]
 [!code-vb[System.Threading.AutoResetEvent#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/simplerisbetter.vb#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="dba53-133">Этот класс является потокобезопасным.</span><span class="sxs-lookup"><span data-stu-id="dba53-133">This class is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="dba53-134">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="dba53-134">Managed Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="dba53-135">Общие сведения о примитивах синхронизации</span><span class="sxs-lookup"><span data-stu-id="dba53-135">Overview of synchronization primitives</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AutoResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AutoResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.AutoResetEvent : bool -&gt; System.Threading.AutoResetEvent" Usage="new System.Threading.AutoResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState"><span data-ttu-id="dba53-136">Значение <see langword="true" /> для задания начального состояния сигнальным; <see langword="false" /> для задания несигнального начального состояния.</span><span class="sxs-lookup"><span data-stu-id="dba53-136"><see langword="true" /> to set the initial state to signaled; <see langword="false" /> to set the initial state to non-signaled.</span></span></param>
        <summary><span data-ttu-id="dba53-137">Инициализирует новый экземпляр класса <see cref="T:System.Threading.AutoResetEvent" /> логическим значением, показывающим наличие сигнального состояния.</span><span class="sxs-lookup"><span data-stu-id="dba53-137">Initializes a new instance of the <see cref="T:System.Threading.AutoResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dba53-138">В следующем примере используется <xref:System.Threading.AutoResetEvent> для синхронизации действий двух потоков.</span><span class="sxs-lookup"><span data-stu-id="dba53-138">The following example uses an <xref:System.Threading.AutoResetEvent> to synchronize the activities of two threads.</span></span> <span data-ttu-id="dba53-139">Первый поток, который является потоком приложения, выполняет `Main`.</span><span class="sxs-lookup"><span data-stu-id="dba53-139">The first thread, which is the application thread, executes `Main`.</span></span> <span data-ttu-id="dba53-140">Он записывает значения в защищенный ресурс, который является `static` (`Shared` в Visual Basic) с именем `number`.</span><span class="sxs-lookup"><span data-stu-id="dba53-140">It writes values to the protected resource, which is a `static` (`Shared` in Visual Basic) field named `number`.</span></span> <span data-ttu-id="dba53-141">Второй поток выполняет статический метод `ThreadProc`, который считывает значения, записанные `Main`.</span><span class="sxs-lookup"><span data-stu-id="dba53-141">The second thread executes the static `ThreadProc` method, which reads the values written by `Main`.</span></span>  
  
 <span data-ttu-id="dba53-142">Метод `ThreadProc` ожидает <xref:System.Threading.AutoResetEvent>.</span><span class="sxs-lookup"><span data-stu-id="dba53-142">The `ThreadProc` method waits for the <xref:System.Threading.AutoResetEvent>.</span></span> <span data-ttu-id="dba53-143">Когда `Main` вызывает метод <xref:System.Threading.EventWaitHandle.Set%2A> на <xref:System.Threading.AutoResetEvent>, метод `ThreadProc` считывает одно значение.</span><span class="sxs-lookup"><span data-stu-id="dba53-143">When `Main` calls the <xref:System.Threading.EventWaitHandle.Set%2A> method on the <xref:System.Threading.AutoResetEvent>, the `ThreadProc` method reads one value.</span></span> <span data-ttu-id="dba53-144"><xref:System.Threading.AutoResetEvent> немедленно сбрасывается, поэтому метод `ThreadProc` снова ждет.</span><span class="sxs-lookup"><span data-stu-id="dba53-144">The <xref:System.Threading.AutoResetEvent> immediately resets, so the `ThreadProc` method waits again.</span></span>  
  
 <span data-ttu-id="dba53-145">Логика программы гарантирует, что метод `ThreadProc` никогда не будет считывать одно и то же значение два раза.</span><span class="sxs-lookup"><span data-stu-id="dba53-145">The program logic guarantees that the `ThreadProc` method will never read the same value two times.</span></span> <span data-ttu-id="dba53-146">Это не гарантирует, что метод `ThreadProc` будет считывать каждое значение, записанное `Main`.</span><span class="sxs-lookup"><span data-stu-id="dba53-146">It does not guarantee that the `ThreadProc` method will read every value written by `Main`.</span></span> <span data-ttu-id="dba53-147">Это гарантирует необходимость второй блокировки <xref:System.Threading.AutoResetEvent>.</span><span class="sxs-lookup"><span data-stu-id="dba53-147">That guarantee would require a second <xref:System.Threading.AutoResetEvent> lock.</span></span>  
  
 <span data-ttu-id="dba53-148">После каждой операции записи `Main` выдает вызов метода <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>, чтобы придать второму потоку возможность выполнить операцию.</span><span class="sxs-lookup"><span data-stu-id="dba53-148">After each write operation, `Main` yields by calling the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method, to give the second thread a chance to execute.</span></span> <span data-ttu-id="dba53-149">В противном случае на компьютере с одним процессором `Main` будет записывать много значений между любыми двумя операциями чтения.</span><span class="sxs-lookup"><span data-stu-id="dba53-149">Otherwise, on a single-processor computer `Main` would write many values between any two read operations.</span></span>  
  
 [!code-cpp[System.Threading.AutoResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.AutoResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/class1.cs#1)]
 [!code-vb[System.Threading.AutoResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="dba53-150">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="dba53-150">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="dba53-151">Общие сведения о примитивах синхронизации</span><span class="sxs-lookup"><span data-stu-id="dba53-151">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="autoResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dba53-152">Задает несигнальное состояние события, вызывая блокирование потоков.</span><span class="sxs-lookup"><span data-stu-id="dba53-152">Sets the state of the event to nonsignaled, which causes threads to block.</span></span></summary>
        <returns><span data-ttu-id="dba53-153">Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="dba53-153"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="autoResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dba53-154">Задает сигнальное состояние события, позволяя одному или нескольким ожидающим потокам продолжить.</span><span class="sxs-lookup"><span data-stu-id="dba53-154">Sets the state of the event to signaled, which allows at most one waiting thread to proceed.</span></span></summary>
        <returns><span data-ttu-id="dba53-155">Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="dba53-155"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="dba53-156">Метод Set освобождает один поток.</span><span class="sxs-lookup"><span data-stu-id="dba53-156">The Set method releases a single thread.</span></span> <span data-ttu-id="dba53-157">Если нет ожидающих потоков, дескриптор ожидания остается сигнальным до тех пор, пока поток не попытается его подождать или пока не будет вызван метод Reset.</span><span class="sxs-lookup"><span data-stu-id="dba53-157">If there are no waiting threads, the wait handle remains signaled until a thread attempts to wait on it, or until its Reset method is called.</span></span>

> [!IMPORTANT]
> <span data-ttu-id="dba53-158">Нет никакой гарантии, что каждый вызов метода Set выдаст поток.</span><span class="sxs-lookup"><span data-stu-id="dba53-158">There is no guarantee that every call to the Set method will release a thread.</span></span> <span data-ttu-id="dba53-159">Если два вызова находятся слишком близко друг к другу, так что второй вызов происходит до освобождения потока, выдается только один поток, как если бы второй вызов не произошел.</span><span class="sxs-lookup"><span data-stu-id="dba53-159">If two calls are too close together, so that the second call occurs before a thread has been released, only one thread is released - as if the second call did not happen.</span></span> <span data-ttu-id="dba53-160">Кроме того, если метод set вызывается, когда нет потоков, ожидающих обработки, а <xref:System.Threading.AutoResetEvent> уже имеет сигнал, вызов не действует.</span><span class="sxs-lookup"><span data-stu-id="dba53-160">Also, if the Set method is called when there are no threads waiting and the <xref:System.Threading.AutoResetEvent> is already signaled, the call has no effect.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
