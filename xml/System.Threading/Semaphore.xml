<Type Name="Semaphore" FullName="System.Threading.Semaphore">
  <Metadata><Meta Name="ms.openlocfilehash" Value="36921ed4c4385bbffb34610a24aea9e46c2e26a5" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75158612" /></Metadata><TypeSignature Language="C#" Value="public sealed class Semaphore : System.Threading.WaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Semaphore extends System.Threading.WaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Semaphore" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Semaphore&#xA;Inherits WaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class Semaphore sealed : System::Threading::WaitHandle" />
  <TypeSignature Language="F#" Value="type Semaphore = class&#xA;    inherit WaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="0111b-101">Ограничивает число потоков, которые могут одновременно обращаться к ресурсу или пулу ресурсов.</span><span class="sxs-lookup"><span data-stu-id="0111b-101">Limits the number of threads that can access a resource or pool of resources concurrently.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0111b-102">Используйте класс <xref:System.Threading.Semaphore> для управления доступом к пулу ресурсов.</span><span class="sxs-lookup"><span data-stu-id="0111b-102">Use the <xref:System.Threading.Semaphore> class to control access to a pool of resources.</span></span> <span data-ttu-id="0111b-103">Потоки вводят семафор, вызывая метод <xref:System.Threading.WaitHandle.WaitOne%2A>, который наследуется от класса <xref:System.Threading.WaitHandle>, и освобождает семафор, вызывая метод <xref:System.Threading.Semaphore.Release%2A>.</span><span class="sxs-lookup"><span data-stu-id="0111b-103">Threads enter the semaphore by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method, which is inherited from the <xref:System.Threading.WaitHandle> class, and release the semaphore by calling the <xref:System.Threading.Semaphore.Release%2A> method.</span></span>  
  
 <span data-ttu-id="0111b-104">Счетчик для семафора уменьшается каждый раз, когда поток входит в семафор, и увеличивается, когда поток освобождает семафор.</span><span class="sxs-lookup"><span data-stu-id="0111b-104">The count on a semaphore is decremented each time a thread enters the semaphore, and incremented when a thread releases the semaphore.</span></span> <span data-ttu-id="0111b-105">Если значение счетчика равно нулю, последующие запросы блокируются до освобождения семафора другими потоками.</span><span class="sxs-lookup"><span data-stu-id="0111b-105">When the count is zero, subsequent requests block until other threads release the semaphore.</span></span> <span data-ttu-id="0111b-106">Когда семафор освобожден всеми потоками, счетчик будет иметь максимальное значение, указанное при создании семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-106">When all threads have released the semaphore, the count is at the maximum value specified when the semaphore was created.</span></span>  
  
 <span data-ttu-id="0111b-107">Нет гарантированного порядка, например FIFO или ЛИФО, в котором заблокированные потоки вводят семафор.</span><span class="sxs-lookup"><span data-stu-id="0111b-107">There is no guaranteed order, such as FIFO or LIFO, in which blocked threads enter the semaphore.</span></span>  
  
 <span data-ttu-id="0111b-108">Поток может многократно вводить семафор, вызывая метод <xref:System.Threading.WaitHandle.WaitOne%2A> несколько раз.</span><span class="sxs-lookup"><span data-stu-id="0111b-108">A thread can enter the semaphore multiple times, by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method repeatedly.</span></span> <span data-ttu-id="0111b-109">Чтобы освободить некоторые или все эти записи, поток может вызвать перегрузку метода без параметров <xref:System.Threading.Semaphore.Release> несколько раз, или же можно вызвать перегрузку метода <xref:System.Threading.Semaphore.Release%28System.Int32%29>, указывающую число освобожденных записей.</span><span class="sxs-lookup"><span data-stu-id="0111b-109">To release some or all of these entries, the thread can call the parameterless <xref:System.Threading.Semaphore.Release> method overload multiple times, or it can call the <xref:System.Threading.Semaphore.Release%28System.Int32%29> method overload that specifies the number of entries to be released.</span></span>  
  
 <span data-ttu-id="0111b-110">Класс <xref:System.Threading.Semaphore> не обеспечивает идентификацию потоков при вызовах <xref:System.Threading.WaitHandle.WaitOne%2A> или <xref:System.Threading.Semaphore.Release%2A>.</span><span class="sxs-lookup"><span data-stu-id="0111b-110">The <xref:System.Threading.Semaphore> class does not enforce thread identity on calls to <xref:System.Threading.WaitHandle.WaitOne%2A> or <xref:System.Threading.Semaphore.Release%2A>.</span></span> <span data-ttu-id="0111b-111">Ответственность за то, чтобы потоки не освободили семафор слишком много раз, лежит на программисте.</span><span class="sxs-lookup"><span data-stu-id="0111b-111">It is the programmer's responsibility to ensure that threads do not release the semaphore too many times.</span></span> <span data-ttu-id="0111b-112">Например предположим, что семафор имеет максимальное значение счетчика равное двум, а два потока A и B входят в семафор.</span><span class="sxs-lookup"><span data-stu-id="0111b-112">For example, suppose a semaphore has a maximum count of two, and that thread A and thread B both enter the semaphore.</span></span> <span data-ttu-id="0111b-113">Если ошибка программирования в потоке B приводит к вызову метода <xref:System.Threading.Semaphore.Release%2A> дважды, оба вызова будут выполнены.</span><span class="sxs-lookup"><span data-stu-id="0111b-113">If a programming error in thread B causes it to call <xref:System.Threading.Semaphore.Release%2A> twice, both calls succeed.</span></span> <span data-ttu-id="0111b-114">Счетчик на семафоре переполнен, и если поток A вызывает <xref:System.Threading.Semaphore.Release%2A>, <xref:System.Threading.SemaphoreFullException> создается исключение.</span><span class="sxs-lookup"><span data-stu-id="0111b-114">The count on the semaphore is full, and when thread A eventually calls <xref:System.Threading.Semaphore.Release%2A>, a <xref:System.Threading.SemaphoreFullException> is thrown.</span></span>  
  
 <span data-ttu-id="0111b-115">Семафоры имеют два типа: локальные семафоры и именованные системные семафоры.</span><span class="sxs-lookup"><span data-stu-id="0111b-115">Semaphores are of two types: local semaphores and named system semaphores.</span></span> <span data-ttu-id="0111b-116">При создании <xref:System.Threading.Semaphore> объекта с помощью конструктора, который принимает имя, он связывается с семафором операционной системы этого имени.</span><span class="sxs-lookup"><span data-stu-id="0111b-116">If you create a <xref:System.Threading.Semaphore> object using a constructor that accepts a name, it is associated with an operating-system semaphore of that name.</span></span> <span data-ttu-id="0111b-117">Именованные системные семафоры видимы во всей операционной системе и могут использоваться для синхронизации действий процессов.</span><span class="sxs-lookup"><span data-stu-id="0111b-117">Named system semaphores are visible throughout the operating system, and can be used to synchronize the activities of processes.</span></span> <span data-ttu-id="0111b-118">Можно создать несколько <xref:System.Threading.Semaphore> объектов, представляющих один и тот же именованный системный семафор, а метод <xref:System.Threading.Semaphore.OpenExisting%2A> можно использовать для открытия существующего именованного системного семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-118">You can create multiple <xref:System.Threading.Semaphore> objects that represent the same named system semaphore, and you can use the <xref:System.Threading.Semaphore.OpenExisting%2A> method to open an existing named system semaphore.</span></span>  
  
 <span data-ttu-id="0111b-119">Локальный семафор существует только в пределах процесса.</span><span class="sxs-lookup"><span data-stu-id="0111b-119">A local semaphore exists only within your process.</span></span> <span data-ttu-id="0111b-120">Его может использовать любой поток в вашем процессе, имеющий ссылку на локальный объект <xref:System.Threading.Semaphore>.</span><span class="sxs-lookup"><span data-stu-id="0111b-120">It can be used by any thread in your process that has a reference to the local <xref:System.Threading.Semaphore> object.</span></span> <span data-ttu-id="0111b-121">Каждый объект <xref:System.Threading.Semaphore> является отдельным локальным семафором.</span><span class="sxs-lookup"><span data-stu-id="0111b-121">Each <xref:System.Threading.Semaphore> object is a separate local semaphore.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0111b-122">В следующем примере кода создается семафор с максимальным числом трех и начальным счетчиком, равным нулю.</span><span class="sxs-lookup"><span data-stu-id="0111b-122">The following code example creates a semaphore with a maximum count of three and an initial count of zero.</span></span> <span data-ttu-id="0111b-123">В примере запускается пять потоков, которые блокируют ожидание семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-123">The example starts five threads, which block waiting for the semaphore.</span></span> <span data-ttu-id="0111b-124">Основной поток использует перегрузку метода <xref:System.Threading.Semaphore.Release%28System.Int32%29> для увеличения числа семафоров до максимального значения, позволяя трем потокам входить в семафор.</span><span class="sxs-lookup"><span data-stu-id="0111b-124">The main thread uses the <xref:System.Threading.Semaphore.Release%28System.Int32%29> method overload to increase the semaphore count to its maximum, allowing three threads to enter the semaphore.</span></span> <span data-ttu-id="0111b-125">Каждый поток использует метод <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> для ожидания одной секунды, для имитации работы, а затем вызывает перегрузку метода <xref:System.Threading.Semaphore.Release> для освобождения семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-125">Each thread uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to wait for one second, to simulate work, and then calls the <xref:System.Threading.Semaphore.Release> method overload to release the semaphore.</span></span> <span data-ttu-id="0111b-126">При каждом освобождении семафора отображается предыдущее число семафоров.</span><span class="sxs-lookup"><span data-stu-id="0111b-126">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="0111b-127">Сообщения консоли записывают использование семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-127">Console messages track semaphore use.</span></span> <span data-ttu-id="0111b-128">Рабочий интервал смоделированной работы немного увеличивается для каждого потока, чтобы упростить чтение выходных данных.</span><span class="sxs-lookup"><span data-stu-id="0111b-128">The simulated work interval is increased slightly for each thread, to make the output easier to read.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="0111b-129">Данный тип потокобезопасен.</span><span class="sxs-lookup"><span data-stu-id="0111b-129">This type is thread safe.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="0111b-130">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="0111b-130">Managed Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="0111b-131">Semaphore</span><span class="sxs-lookup"><span data-stu-id="0111b-131">Semaphore</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0111b-132">Инициализирует новый экземпляр класса <see cref="T:System.Threading.Semaphore" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-132">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maximumCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCount"><span data-ttu-id="0111b-133">Начальное количество запросов для семафора, которое может быть обеспечено одновременно.</span><span class="sxs-lookup"><span data-stu-id="0111b-133">The initial number of requests for the semaphore that can be granted concurrently.</span></span></param>
        <param name="maximumCount"><span data-ttu-id="0111b-134">Максимальное количество запросов семафора, которое может быть обеспеченно одновременно.</span><span class="sxs-lookup"><span data-stu-id="0111b-134">The maximum number of requests for the semaphore that can be granted concurrently.</span></span></param>
        <summary><span data-ttu-id="0111b-135">Инициализирует новый экземпляр класса <see cref="T:System.Threading.Semaphore" />, задающий начальное количество входов и максимальное количество одновременных входов.</span><span class="sxs-lookup"><span data-stu-id="0111b-135">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0111b-136">Этот конструктор инициализирует безымянный семафор.</span><span class="sxs-lookup"><span data-stu-id="0111b-136">This constructor initializes an unnamed semaphore.</span></span> <span data-ttu-id="0111b-137">Все потоки, использующие экземпляр такого семафора, должны иметь ссылки на экземпляр.</span><span class="sxs-lookup"><span data-stu-id="0111b-137">All threads that use an instance of such a semaphore must have references to the instance.</span></span>  
  
 <span data-ttu-id="0111b-138">Если `initialCount` меньше `maximumCount`, то результат будет таким же, как если бы текущий поток вызывал <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` минус `initialCount`) раз.</span><span class="sxs-lookup"><span data-stu-id="0111b-138">If `initialCount` is less than `maximumCount`, the effect is the same as if the current thread had called <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` minus `initialCount`) times.</span></span> <span data-ttu-id="0111b-139">Если вы не хотите зарезервировать какие бы то ни было записи для потока, создающего семафор, используйте то же значение для `maximumCount` и `initialCount`.</span><span class="sxs-lookup"><span data-stu-id="0111b-139">If you do not want to reserve any entries for the thread that creates the semaphore, use the same number for `maximumCount` and `initialCount`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0111b-140">В следующем примере создается семафор с максимальным числом трех и начальным счетчиком, равным нулю.</span><span class="sxs-lookup"><span data-stu-id="0111b-140">The following example creates a semaphore with a maximum count of three and an initial count of zero.</span></span> <span data-ttu-id="0111b-141">В примере запускается пять потоков, которые блокируют ожидание семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-141">The example starts five threads, which block waiting for the semaphore.</span></span> <span data-ttu-id="0111b-142">Основной поток использует перегрузку метода <xref:System.Threading.Semaphore.Release%28System.Int32%29> для увеличения числа семафоров до максимального значения, позволяя трем потокам входить в семафор.</span><span class="sxs-lookup"><span data-stu-id="0111b-142">The main thread uses the <xref:System.Threading.Semaphore.Release%28System.Int32%29> method overload to increase the semaphore count to its maximum, allowing three threads to enter the semaphore.</span></span> <span data-ttu-id="0111b-143">Каждый поток использует метод <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> для ожидания одной секунды, для имитации работы, а затем вызывает перегрузку метода <xref:System.Threading.Semaphore.Release> для освобождения семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-143">Each thread uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to wait for one second, to simulate work, and then calls the <xref:System.Threading.Semaphore.Release> method overload to release the semaphore.</span></span> <span data-ttu-id="0111b-144">При каждом освобождении семафора отображается предыдущее число семафоров.</span><span class="sxs-lookup"><span data-stu-id="0111b-144">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="0111b-145">Сообщения консоли записывают использование семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-145">Console messages track semaphore use.</span></span> <span data-ttu-id="0111b-146">Рабочий интервал смоделированной работы немного увеличивается для каждого потока, чтобы упростить чтение выходных данных.</span><span class="sxs-lookup"><span data-stu-id="0111b-146">The simulated work interval is increased slightly for each thread, to make the output easier to read.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0111b-147">Значение <paramref name="initialCount" /> больше значения <paramref name="maximumCount" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-147"><paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0111b-148">Значение параметра <paramref name="maximumCount" /> меньше 1.</span><span class="sxs-lookup"><span data-stu-id="0111b-148"><paramref name="maximumCount" /> is less than 1.</span></span>  
  
<span data-ttu-id="0111b-149">-или-</span><span class="sxs-lookup"><span data-stu-id="0111b-149">-or-</span></span> 
 <span data-ttu-id="0111b-150">Значение параметра <paramref name="initialCount" /> меньше 0.</span><span class="sxs-lookup"><span data-stu-id="0111b-150"><paramref name="initialCount" /> is less than 0.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="0111b-151">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="0111b-151">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="0111b-152">Semaphore</span><span class="sxs-lookup"><span data-stu-id="0111b-152">Semaphore</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maximumCount As Integer, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int * string -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="initialCount"><span data-ttu-id="0111b-153">Начальное количество запросов для семафора, которое может быть обеспечено одновременно.</span><span class="sxs-lookup"><span data-stu-id="0111b-153">The initial number of requests for the semaphore that can be granted concurrently.</span></span></param>
        <param name="maximumCount"><span data-ttu-id="0111b-154">Максимальное количество запросов семафора, которое может быть обеспеченно одновременно.</span><span class="sxs-lookup"><span data-stu-id="0111b-154">The maximum number of requests for the semaphore that can be granted concurrently.</span></span></param>
        <param name="name"><span data-ttu-id="0111b-155">Имя объекта именованного системного семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-155">The name of a named system semaphore object.</span></span></param>
        <summary><span data-ttu-id="0111b-156">Инициализирует новый экземпляр класса <see cref="T:System.Threading.Semaphore" />, задающий начальное количество входов и максимальное количество одновременных входов, а также при необходимости имя объекта системного семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-156">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries, and optionally specifying the name of a system semaphore object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0111b-157">Этот конструктор инициализирует объект <xref:System.Threading.Semaphore>, представляющий именованный системный семафор.</span><span class="sxs-lookup"><span data-stu-id="0111b-157">This constructor initializes a <xref:System.Threading.Semaphore> object that represents a named system semaphore.</span></span> <span data-ttu-id="0111b-158">Можно создать несколько <xref:System.Threading.Semaphore> объектов, представляющих один и тот же именованный системный семафор.</span><span class="sxs-lookup"><span data-stu-id="0111b-158">You can create multiple <xref:System.Threading.Semaphore> objects that represent the same named system semaphore.</span></span>  
  
 <span data-ttu-id="0111b-159">Если именованный системный семафор не существует, он создается с начальным числом и максимальным числом, заданным в `initialCount` и `maximumCount`.</span><span class="sxs-lookup"><span data-stu-id="0111b-159">If the named system semaphore does not exist, it is created with the initial count and maximum count specified by `initialCount` and `maximumCount`.</span></span> <span data-ttu-id="0111b-160">Если именованный системный семафор уже существует, `initialCount` и `maximumCount` не используются, хотя недопустимые значения по-прежнему вызывают исключения.</span><span class="sxs-lookup"><span data-stu-id="0111b-160">If the named system semaphore already exists, `initialCount` and `maximumCount` are not used, although invalid values still cause exceptions.</span></span> <span data-ttu-id="0111b-161">Если необходимо определить, был ли именованный системный семафор создан, используйте вместо него перегрузку <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.String%2CSystem.Boolean%40%29> конструктора.</span><span class="sxs-lookup"><span data-stu-id="0111b-161">If you need to determine whether or not a named system semaphore was created, use the <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.String%2CSystem.Boolean%40%29> constructor overload instead.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0111b-162">При использовании этой перегрузки конструктора рекомендуется указать тот же номер для `initialCount` и `maximumCount`.</span><span class="sxs-lookup"><span data-stu-id="0111b-162">When you use this constructor overload, the recommended practice is to specify the same number for `initialCount` and `maximumCount`.</span></span> <span data-ttu-id="0111b-163">Если `initialCount` меньше `maximumCount`и создается именованный системный семафор, то результат будет таким же, как если бы текущий поток вызывал <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` минус `initialCount`) раз.</span><span class="sxs-lookup"><span data-stu-id="0111b-163">If `initialCount` is less than `maximumCount`, and a named system semaphore is created, the effect is the same as if the current thread had called <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` minus `initialCount`) times.</span></span> <span data-ttu-id="0111b-164">Однако при использовании этой перегруженной версии конструктора невозможно определить, был ли создан именованный системный семафор.</span><span class="sxs-lookup"><span data-stu-id="0111b-164">However, with this constructor overload there is no way to determine whether a named system semaphore was created.</span></span>  
  
 <span data-ttu-id="0111b-165">Если для `name`указан `null` или пустая строка, создается локальный семафор, как если бы вы вызывали перегрузку конструктора <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29>.</span><span class="sxs-lookup"><span data-stu-id="0111b-165">If you specify `null` or an empty string for `name`, a local semaphore is created, as if you had called the <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> constructor overload.</span></span>  
  
 <span data-ttu-id="0111b-166">Так как именованные семафоры видимы во всей операционной системе, их можно использовать для координации использования ресурсов в пределах границ процесса.</span><span class="sxs-lookup"><span data-stu-id="0111b-166">Because named semaphores are visible throughout the operating system, they can be used to coordinate resource use across process boundaries.</span></span>  
  
 <span data-ttu-id="0111b-167">Если вы хотите узнать, существует ли именованный системный семафор, используйте метод <xref:System.Threading.Semaphore.OpenExisting%2A>.</span><span class="sxs-lookup"><span data-stu-id="0111b-167">If you want to find out whether a named system semaphore exists, use the <xref:System.Threading.Semaphore.OpenExisting%2A> method.</span></span> <span data-ttu-id="0111b-168">Метод <xref:System.Threading.Semaphore.OpenExisting%2A> пытается открыть существующий именованный семафор и создает исключение, если системный семафор не существует.</span><span class="sxs-lookup"><span data-stu-id="0111b-168">The <xref:System.Threading.Semaphore.OpenExisting%2A> method attempts to open an existing named semaphore, and throws an exception if the system semaphore does not exist.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0111b-169">В следующем примере кода демонстрируется поведение перекрестной обработки именованного семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-169">The following code example demonstrates the cross-process behavior of a named semaphore.</span></span> <span data-ttu-id="0111b-170">В этом примере создается именованный семафор с максимальным числом, равным пяти, и начальным числом, равным пяти.</span><span class="sxs-lookup"><span data-stu-id="0111b-170">The example creates a named semaphore with a maximum count of five and an initial count of five.</span></span> <span data-ttu-id="0111b-171">Программа выполняет три вызова метода <xref:System.Threading.WaitHandle.WaitOne%2A>.</span><span class="sxs-lookup"><span data-stu-id="0111b-171">The program makes three calls to the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="0111b-172">Таким образом, если запустить скомпилированный пример из двух окон командной строки, вторая копия будет блокироваться по третьему вызову <xref:System.Threading.WaitHandle.WaitOne%2A>.</span><span class="sxs-lookup"><span data-stu-id="0111b-172">Thus, if you run the compiled example from two command windows, the second copy will block on the third call to <xref:System.Threading.WaitHandle.WaitOne%2A>.</span></span> <span data-ttu-id="0111b-173">Выпустите одну или несколько записей в первой копии программы, чтобы разблокировать вторую.</span><span class="sxs-lookup"><span data-stu-id="0111b-173">Release one or more entries in the first copy of the program to unblock the second.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 3/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 3/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0111b-174">Значение <paramref name="initialCount" /> больше значения <paramref name="maximumCount" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-174"><paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span></span>  
  
<span data-ttu-id="0111b-175">-или-</span><span class="sxs-lookup"><span data-stu-id="0111b-175">-or-</span></span> 
 <span data-ttu-id="0111b-176">Длина значения параметра <paramref name="name" /> превышает 260 символов.</span><span class="sxs-lookup"><span data-stu-id="0111b-176"><paramref name="name" /> is longer than 260 characters.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0111b-177">Значение параметра <paramref name="maximumCount" /> меньше 1.</span><span class="sxs-lookup"><span data-stu-id="0111b-177"><paramref name="maximumCount" /> is less than 1.</span></span>  
  
<span data-ttu-id="0111b-178">-или-</span><span class="sxs-lookup"><span data-stu-id="0111b-178">-or-</span></span> 
 <span data-ttu-id="0111b-179">Значение параметра <paramref name="initialCount" /> меньше 0.</span><span class="sxs-lookup"><span data-stu-id="0111b-179"><paramref name="initialCount" /> is less than 0.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0111b-180">Произошла ошибка Win32.</span><span class="sxs-lookup"><span data-stu-id="0111b-180">A Win32 error occurred.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="0111b-181">Именованный семафор существует, доступ к нему безопасно регулируется, но пользователь не имеет прав <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-181">The named semaphore exists and has access control security, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />.</span></span></exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException"><span data-ttu-id="0111b-182">Именованный семафор нельзя создать. Вероятно, дескриптор ожидания другого типа имеет то же имя.</span><span class="sxs-lookup"><span data-stu-id="0111b-182">The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="0111b-183">для вызова неуправляемого кода для создания именованного системного семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-183">for calling unmanaged code to create a named system semaphore.</span></span> <span data-ttu-id="0111b-184">Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-184">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span>  
  
<span data-ttu-id="0111b-185">Действие безопасности: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-185">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span></permission>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="0111b-186">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="0111b-186">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="0111b-187">Semaphore</span><span class="sxs-lookup"><span data-stu-id="0111b-187">Semaphore</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount, string name, out bool createdNew);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount, string name, [out] bool&amp; createdNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maximumCount As Integer, name As String, ByRef createdNew As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int * string * bool -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount, name, createdNew)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="initialCount"><span data-ttu-id="0111b-188">Начальное количество запросов семафора, которое может быть удовлетворено одновременно.</span><span class="sxs-lookup"><span data-stu-id="0111b-188">The initial number of requests for the semaphore that can be satisfied concurrently.</span></span></param>
        <param name="maximumCount"><span data-ttu-id="0111b-189">Максимальное количество запросов семафора, которое может быть удовлетворено одновременно.</span><span class="sxs-lookup"><span data-stu-id="0111b-189">The maximum number of requests for the semaphore that can be satisfied concurrently.</span></span></param>
        <param name="name"><span data-ttu-id="0111b-190">Имя объекта именованного системного семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-190">The name of a named system semaphore object.</span></span></param>
        <param name="createdNew"><span data-ttu-id="0111b-191">При возврате этот метод содержит значение <see langword="true" />, если был создан локальный семафор (то есть если параметр <paramref name="name" /> имеет значение <see langword="null" /> или содержит пустую строку) или был создан заданный именованный системный семафор; значение <see langword="false" />, если указанный именованный семафор уже существовал.</span><span class="sxs-lookup"><span data-stu-id="0111b-191">When this method returns, contains <see langword="true" /> if a local semaphore was created (that is, if <paramref name="name" /> is <see langword="null" /> or an empty string) or if the specified named system semaphore was created; <see langword="false" /> if the specified named system semaphore already existed.</span></span> <span data-ttu-id="0111b-192">Этот параметр передается неинициализированным.</span><span class="sxs-lookup"><span data-stu-id="0111b-192">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="0111b-193">Инициализирует новый экземпляр класса <see cref="T:System.Threading.Semaphore" />, задающий начальное количество входов и максимальное количество одновременных входов, а также при необходимости задающий имя объекта системного семафора и переменную, получающую значение, которое указывает, был ли создан новый системный семафор.</span><span class="sxs-lookup"><span data-stu-id="0111b-193">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries, optionally specifying the name of a system semaphore object, and specifying a variable that receives a value indicating whether a new system semaphore was created.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0111b-194">Этот конструктор инициализирует объект <xref:System.Threading.Semaphore>, представляющий именованный системный семафор.</span><span class="sxs-lookup"><span data-stu-id="0111b-194">This constructor initializes a <xref:System.Threading.Semaphore> object that represents a named system semaphore.</span></span> <span data-ttu-id="0111b-195">Можно создать несколько <xref:System.Threading.Semaphore> объектов, представляющих один и тот же именованный системный семафор.</span><span class="sxs-lookup"><span data-stu-id="0111b-195">You can create multiple <xref:System.Threading.Semaphore> objects that represent the same named system semaphore.</span></span>  
  
 <span data-ttu-id="0111b-196">Если именованный системный семафор не существует, он создается с начальным числом и максимальным числом, заданным в `initialCount` и `maximumCount`.</span><span class="sxs-lookup"><span data-stu-id="0111b-196">If the named system semaphore does not exist, it is created with the initial count and maximum count specified by `initialCount` and `maximumCount`.</span></span> <span data-ttu-id="0111b-197">Если именованный системный семафор уже существует, `initialCount` и `maximumCount` не используются, хотя недопустимые значения по-прежнему вызывают исключения.</span><span class="sxs-lookup"><span data-stu-id="0111b-197">If the named system semaphore already exists, `initialCount` and `maximumCount` are not used, although invalid values still cause exceptions.</span></span> <span data-ttu-id="0111b-198">Чтобы определить, был ли создан системный семафор, используйте `createdNew`.</span><span class="sxs-lookup"><span data-stu-id="0111b-198">Use `createdNew` to determine whether the system semaphore was created.</span></span>  
  
 <span data-ttu-id="0111b-199">Если `initialCount` меньше `maximumCount`, а `createdNew` `true`, то результат будет таким же, как если бы текущий поток вызывал <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` минус `initialCount`) раз.</span><span class="sxs-lookup"><span data-stu-id="0111b-199">If `initialCount` is less than `maximumCount`, and `createdNew` is `true`, the effect is the same as if the current thread had called <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` minus `initialCount`) times.</span></span>  
  
 <span data-ttu-id="0111b-200">Если для `name`указан `null` или пустая строка, создается локальный семафор, как если бы вы вызывали перегрузку конструктора <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29>.</span><span class="sxs-lookup"><span data-stu-id="0111b-200">If you specify `null` or an empty string for `name`, a local semaphore is created, as if you had called the <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> constructor overload.</span></span> <span data-ttu-id="0111b-201">В этом случае `createdNew` всегда `true`.</span><span class="sxs-lookup"><span data-stu-id="0111b-201">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="0111b-202">Так как именованные семафоры видимы во всей операционной системе, их можно использовать для координации использования ресурсов в пределах границ процесса.</span><span class="sxs-lookup"><span data-stu-id="0111b-202">Because named semaphores are visible throughout the operating system, they can be used to coordinate resource use across process boundaries.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0111b-203">В следующем примере кода демонстрируется поведение перекрестной обработки именованного семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-203">The following code example demonstrates the cross-process behavior of a named semaphore.</span></span> <span data-ttu-id="0111b-204">В этом примере создается именованный семафор с максимальным числом, равным пяти, и начальным счетчиком двух.</span><span class="sxs-lookup"><span data-stu-id="0111b-204">The example creates a named semaphore with a maximum count of five and an initial count of two.</span></span> <span data-ttu-id="0111b-205">То есть он резервирует три записи для потока, который вызывает конструктор.</span><span class="sxs-lookup"><span data-stu-id="0111b-205">That is, it reserves three entries for the thread that calls the constructor.</span></span> <span data-ttu-id="0111b-206">Если `createNew` `false`, программа выполняет три вызова метода <xref:System.Threading.WaitHandle.WaitOne%2A>.</span><span class="sxs-lookup"><span data-stu-id="0111b-206">If `createNew` is `false`, the program makes three calls to the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="0111b-207">Таким образом, если запустить скомпилированный пример из двух окон командной строки, вторая копия будет блокироваться по третьему вызову <xref:System.Threading.WaitHandle.WaitOne%2A>.</span><span class="sxs-lookup"><span data-stu-id="0111b-207">Thus, if you run the compiled example from two command windows, the second copy will block on the third call to <xref:System.Threading.WaitHandle.WaitOne%2A>.</span></span> <span data-ttu-id="0111b-208">Выпустите одну или несколько записей в первой копии программы, чтобы разблокировать вторую.</span><span class="sxs-lookup"><span data-stu-id="0111b-208">Release one or more entries in the first copy of the program to unblock the second.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0111b-209">Значение <paramref name="initialCount" /> больше значения <paramref name="maximumCount" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-209"><paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span></span>  
  
<span data-ttu-id="0111b-210">-или-</span><span class="sxs-lookup"><span data-stu-id="0111b-210">-or-</span></span> 
 <span data-ttu-id="0111b-211">Длина значения параметра <paramref name="name" /> превышает 260 символов.</span><span class="sxs-lookup"><span data-stu-id="0111b-211"><paramref name="name" /> is longer than 260 characters.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0111b-212">Значение параметра <paramref name="maximumCount" /> меньше 1.</span><span class="sxs-lookup"><span data-stu-id="0111b-212"><paramref name="maximumCount" /> is less than 1.</span></span>  
  
<span data-ttu-id="0111b-213">-или-</span><span class="sxs-lookup"><span data-stu-id="0111b-213">-or-</span></span> 
 <span data-ttu-id="0111b-214">Значение параметра <paramref name="initialCount" /> меньше 0.</span><span class="sxs-lookup"><span data-stu-id="0111b-214"><paramref name="initialCount" /> is less than 0.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0111b-215">Произошла ошибка Win32.</span><span class="sxs-lookup"><span data-stu-id="0111b-215">A Win32 error occurred.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="0111b-216">Именованный семафор существует, доступ к нему безопасно регулируется, но пользователь не имеет прав <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-216">The named semaphore exists and has access control security, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />.</span></span></exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException"><span data-ttu-id="0111b-217">Именованный семафор нельзя создать. Вероятно, дескриптор ожидания другого типа имеет то же имя.</span><span class="sxs-lookup"><span data-stu-id="0111b-217">The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="0111b-218">для вызова неуправляемого кода для создания именованного системного семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-218">for calling unmanaged code to create a named system semaphore.</span></span> <span data-ttu-id="0111b-219">Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-219">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span>  
  
<span data-ttu-id="0111b-220">Действие безопасности: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-220">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span></permission>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="0111b-221">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="0111b-221">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="0111b-222">Semaphore</span><span class="sxs-lookup"><span data-stu-id="0111b-222">Semaphore</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount, string name, out bool createdNew, System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount, string name, [out] bool&amp; createdNew, class System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@,System.Security.AccessControl.SemaphoreSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew, System::Security::AccessControl::SemaphoreSecurity ^ semaphoreSecurity);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int * string * bool * System.Security.AccessControl.SemaphoreSecurity -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount, name, createdNew, semaphoreSecurity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="maximumCount" Type="System.Int32" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="name" Type="System.String" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="createdNew" Type="System.Boolean" RefType="out" Index="3" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="semaphoreSecurity" Type="System.Security.AccessControl.SemaphoreSecurity" Index="4" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="initialCount"><span data-ttu-id="0111b-223">Начальное количество запросов семафора, которое может быть удовлетворено одновременно.</span><span class="sxs-lookup"><span data-stu-id="0111b-223">The initial number of requests for the semaphore that can be satisfied concurrently.</span></span></param>
        <param name="maximumCount"><span data-ttu-id="0111b-224">Максимальное количество запросов семафора, которое может быть удовлетворено одновременно.</span><span class="sxs-lookup"><span data-stu-id="0111b-224">The maximum number of requests for the semaphore that can be satisfied concurrently.</span></span></param>
        <param name="name"><span data-ttu-id="0111b-225">Имя объекта именованного системного семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-225">The name of a named system semaphore object.</span></span></param>
        <param name="createdNew"><span data-ttu-id="0111b-226">При возврате этот метод содержит значение <see langword="true" />, если был создан локальный семафор (то есть если параметр <paramref name="name" /> имеет значение <see langword="null" /> или содержит пустую строку) или был создан заданный именованный системный семафор; значение <see langword="false" />, если указанный именованный семафор уже существовал.</span><span class="sxs-lookup"><span data-stu-id="0111b-226">When this method returns, contains <see langword="true" /> if a local semaphore was created (that is, if <paramref name="name" /> is <see langword="null" /> or an empty string) or if the specified named system semaphore was created; <see langword="false" /> if the specified named system semaphore already existed.</span></span> <span data-ttu-id="0111b-227">Этот параметр передается неинициализированным.</span><span class="sxs-lookup"><span data-stu-id="0111b-227">This parameter is passed uninitialized.</span></span></param>
        <param name="semaphoreSecurity"><span data-ttu-id="0111b-228">Объект <see cref="T:System.Security.AccessControl.SemaphoreSecurity" />, представляющий безопасность управления доступом для применения к именованному системному семафору.</span><span class="sxs-lookup"><span data-stu-id="0111b-228">A <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> object that represents the access control security to be applied to the named system semaphore.</span></span></param>
        <summary><span data-ttu-id="0111b-229">Инициализирует новый экземпляр класса <see cref="T:System.Threading.Semaphore" />, задающий начальное количество входов и максимальное количество одновременных входов, а также при необходимости задает имя объекта системного семафора, переменную, которая получает значение, указывающее, был ли создан новый системный семафор, и управление безопасным доступом для системного семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-229">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries, optionally specifying the name of a system semaphore object, specifying a variable that receives a value indicating whether a new system semaphore was created, and specifying security access control for the system semaphore.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0111b-230">Используйте этот конструктор для применения безопасности управления доступом к именованному системному семафору при его создании, предотвращая управление семафором другим кодом.</span><span class="sxs-lookup"><span data-stu-id="0111b-230">Use this constructor to apply access control security to a named system semaphore when it is created, preventing other code from taking control of the semaphore.</span></span>  
  
 <span data-ttu-id="0111b-231">Этот конструктор инициализирует объект <xref:System.Threading.Semaphore>, представляющий именованный системный семафор.</span><span class="sxs-lookup"><span data-stu-id="0111b-231">This constructor initializes a <xref:System.Threading.Semaphore> object that represents a named system semaphore.</span></span> <span data-ttu-id="0111b-232">Можно создать несколько <xref:System.Threading.Semaphore> объектов, представляющих один и тот же именованный системный семафор.</span><span class="sxs-lookup"><span data-stu-id="0111b-232">You can create multiple <xref:System.Threading.Semaphore> objects that represent the same named system semaphore.</span></span>  
  
 <span data-ttu-id="0111b-233">Если именованный системный семафор не существует, он создается с указанной защитой управления доступом.</span><span class="sxs-lookup"><span data-stu-id="0111b-233">If the named system semaphore does not exist, it is created with the specified access control security.</span></span> <span data-ttu-id="0111b-234">Если существует именованный семафор, заданная безопасность контроля доступа игнорируется.</span><span class="sxs-lookup"><span data-stu-id="0111b-234">If the named semaphore exists, the specified access control security is ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0111b-235">Вызывающий объект имеет полный контроль над вновь созданным <xref:System.Threading.Semaphore> объектом, даже если `semaphoreSecurity` запрещает или не может предоставить некоторые права доступа для текущего пользователя.</span><span class="sxs-lookup"><span data-stu-id="0111b-235">The caller has full control over the newly created <xref:System.Threading.Semaphore> object even if `semaphoreSecurity` denies or fails to grant some access rights to the current user.</span></span> <span data-ttu-id="0111b-236">Однако если текущий пользователь пытается получить другой объект <xref:System.Threading.Semaphore> для представления того же именованного семафора с помощью конструктора или метода <xref:System.Threading.Semaphore.OpenExisting%2A>, применяется безопасность управления доступом Windows.</span><span class="sxs-lookup"><span data-stu-id="0111b-236">However, if the current user attempts to get another <xref:System.Threading.Semaphore> object to represent the same named semaphore, using either a constructor or the <xref:System.Threading.Semaphore.OpenExisting%2A> method, Windows access control security is applied.</span></span>  
  
 <span data-ttu-id="0111b-237">Если именованный системный семафор не существует, он создается с начальным числом и максимальным числом, заданным в `initialCount` и `maximumCount`.</span><span class="sxs-lookup"><span data-stu-id="0111b-237">If the named system semaphore does not exist, it is created with the initial count and maximum count specified by `initialCount` and `maximumCount`.</span></span> <span data-ttu-id="0111b-238">Если именованный системный семафор уже существует, `initialCount` и `maximumCount` не используются, хотя недопустимые значения по-прежнему вызывают исключения.</span><span class="sxs-lookup"><span data-stu-id="0111b-238">If the named system semaphore already exists, `initialCount` and `maximumCount` are not used, although invalid values still cause exceptions.</span></span> <span data-ttu-id="0111b-239">Используйте параметр `createdNew`, чтобы определить, был ли системный семафор создан этим конструктором.</span><span class="sxs-lookup"><span data-stu-id="0111b-239">Use the `createdNew` parameter to determine whether the system semaphore was created by this constructor.</span></span>  
  
 <span data-ttu-id="0111b-240">Если `initialCount` меньше `maximumCount`, а `createdNew` `true`, то результат будет таким же, как если бы текущий поток вызывал <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` минус `initialCount`) раз.</span><span class="sxs-lookup"><span data-stu-id="0111b-240">If `initialCount` is less than `maximumCount`, and `createdNew` is `true`, the effect is the same as if the current thread had called <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` minus `initialCount`) times.</span></span>  
  
 <span data-ttu-id="0111b-241">Если для `name`указан `null` или пустая строка, создается локальный семафор, как если бы вы вызывали перегрузку конструктора <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29>.</span><span class="sxs-lookup"><span data-stu-id="0111b-241">If you specify `null` or an empty string for `name`, a local semaphore is created, as if you had called the <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> constructor overload.</span></span> <span data-ttu-id="0111b-242">В этом случае `createdNew` всегда `true`.</span><span class="sxs-lookup"><span data-stu-id="0111b-242">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="0111b-243">Так как именованные семафоры видимы во всей операционной системе, их можно использовать для координации использования ресурсов в пределах границ процесса.</span><span class="sxs-lookup"><span data-stu-id="0111b-243">Because named semaphores are visible throughout the operating system, they can be used to coordinate resource use across process boundaries.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0111b-244">В следующем примере кода показано поведение перекрестной обработки именованного семафора с защитой управления доступом.</span><span class="sxs-lookup"><span data-stu-id="0111b-244">The following code example demonstrates the cross-process behavior of a named semaphore with access control security.</span></span> <span data-ttu-id="0111b-245">В примере используется перегрузка метода <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> для проверки существования именованного семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-245">The example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload to test for the existence of a named semaphore.</span></span> <span data-ttu-id="0111b-246">Если семафор не существует, он создается с максимальным числом двух и с защитой управления доступом, которое запрещает текущему пользователю право использовать семафор, но предоставляет право на чтение и изменение семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-246">If the semaphore does not exist, it is created with a maximum count of two and with access control security that denies the current user the right to use the semaphore but grants the right to read and change permissions on the semaphore.</span></span> <span data-ttu-id="0111b-247">Если запустить скомпилированный пример из двух окон командной строки, вторая копия выдаст исключение нарушения прав доступа при вызове метода <xref:System.Threading.Semaphore.OpenExisting%28System.String%29>.</span><span class="sxs-lookup"><span data-stu-id="0111b-247">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method.</span></span> <span data-ttu-id="0111b-248">Исключение перехвачено, и в примере используется перегрузка метода <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> для открытия семафора с правами, необходимыми для чтения и изменения разрешений.</span><span class="sxs-lookup"><span data-stu-id="0111b-248">The exception is caught, and the example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload to open the semaphore with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="0111b-249">После изменения разрешений семафор открывается с правами, необходимыми для ввода и выпуска.</span><span class="sxs-lookup"><span data-stu-id="0111b-249">After the permissions are changed, the semaphore is opened with the rights required to enter and release.</span></span> <span data-ttu-id="0111b-250">Если запустить скомпилированный пример из третьего командного окна, он будет запущен с использованием новых разрешений.</span><span class="sxs-lookup"><span data-stu-id="0111b-250">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0111b-251">Значение <paramref name="initialCount" /> больше значения <paramref name="maximumCount" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-251"><paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span></span>  
  
<span data-ttu-id="0111b-252">-или-</span><span class="sxs-lookup"><span data-stu-id="0111b-252">-or-</span></span> 
 <span data-ttu-id="0111b-253">Длина значения параметра <paramref name="name" /> превышает 260 символов.</span><span class="sxs-lookup"><span data-stu-id="0111b-253"><paramref name="name" /> is longer than 260 characters.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0111b-254">Значение параметра <paramref name="maximumCount" /> меньше 1.</span><span class="sxs-lookup"><span data-stu-id="0111b-254"><paramref name="maximumCount" /> is less than 1.</span></span>  
  
<span data-ttu-id="0111b-255">-или-</span><span class="sxs-lookup"><span data-stu-id="0111b-255">-or-</span></span> 
 <span data-ttu-id="0111b-256">Значение параметра <paramref name="initialCount" /> меньше 0.</span><span class="sxs-lookup"><span data-stu-id="0111b-256"><paramref name="initialCount" /> is less than 0.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="0111b-257">Именованный семафор существует, доступ к нему безопасно регулируется, но пользователь не имеет прав <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-257">The named semaphore exists and has access control security, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0111b-258">Произошла ошибка Win32.</span><span class="sxs-lookup"><span data-stu-id="0111b-258">A Win32 error occurred.</span></span></exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException"><span data-ttu-id="0111b-259">Именованный семафор нельзя создать. Вероятно, дескриптор ожидания другого типа имеет то же имя.</span><span class="sxs-lookup"><span data-stu-id="0111b-259">The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="0111b-260">для вызова неуправляемого кода для создания именованного системного семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-260">for calling unmanaged code to create a named system semaphore.</span></span> <span data-ttu-id="0111b-261">Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-261">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span> <span data-ttu-id="0111b-262">Действие безопасности: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-262">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span></permission>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="0111b-263">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="0111b-263">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="0111b-264">Semaphore</span><span class="sxs-lookup"><span data-stu-id="0111b-264">Semaphore</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.SemaphoreSecurity GetAccessControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.AccessControl.SemaphoreSecurity GetAccessControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.GetAccessControl" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessControl () As SemaphoreSecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::AccessControl::SemaphoreSecurity ^ GetAccessControl();" />
      <MemberSignature Language="F#" Value="member this.GetAccessControl : unit -&gt; System.Security.AccessControl.SemaphoreSecurity" Usage="semaphore.GetAccessControl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.SemaphoreSecurity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0111b-265">Возвращает настройки управления доступом для именованного системного семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-265">Gets the access control security for a named system semaphore.</span></span></summary>
        <returns><span data-ttu-id="0111b-266">Объект <see cref="T:System.Security.AccessControl.SemaphoreSecurity" />, представляющий параметры безопасности управления доступом для именованного системного семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-266">A <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> object that represents the access control security for the named system semaphore.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0111b-267">Метод <xref:System.Threading.Semaphore.GetAccessControl%2A> использует следующее сочетание флагов (в сочетании с побитовой операцией OR) для поиска разрешений: <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>, <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>и <xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="0111b-267">The <xref:System.Threading.Semaphore.GetAccessControl%2A> method uses the following combination of flags (combined using the bitwise OR operation) to search for permissions: <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>, <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>, and <xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="0111b-268">Пользователь должен иметь права <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType> для вызова этого метода, а семафор должен быть открыт с правами <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="0111b-268">The user must have <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType> rights to call this method, and the semaphore must have been opened with <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType> rights.</span></span>  
  
 <span data-ttu-id="0111b-269">В локальном семафоре безопасность управления доступом не имеет значения.</span><span class="sxs-lookup"><span data-stu-id="0111b-269">On a local semaphore, access control security is irrelevant.</span></span> <span data-ttu-id="0111b-270">Если объект <xref:System.Threading.Semaphore> не представляет именованный системный семафор, этот метод возвращает объект <xref:System.Security.AccessControl.SemaphoreSecurity>, который предоставляет все права любому пользователю.</span><span class="sxs-lookup"><span data-stu-id="0111b-270">If the <xref:System.Threading.Semaphore> object does not represent a named system semaphore, this method returns a <xref:System.Security.AccessControl.SemaphoreSecurity> object that grants all rights to any user.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0111b-271">В следующем примере кода показано поведение перекрестной обработки именованного семафора с защитой управления доступом.</span><span class="sxs-lookup"><span data-stu-id="0111b-271">The following code example demonstrates the cross-process behavior of a named semaphore with access control security.</span></span> <span data-ttu-id="0111b-272">В примере используется перегрузка метода <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> для проверки существования именованного семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-272">The example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload to test for the existence of a named semaphore.</span></span>  
  
 <span data-ttu-id="0111b-273">Если семафор не существует, он создается с максимальным числом двух и с защитой управления доступом, которое запрещает текущему пользователю право использовать семафор, но предоставляет право на чтение и изменение семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-273">If the semaphore does not exist, it is created with a maximum count of two and with access control security that denies the current user the right to use the semaphore, but grants the right to read and change permissions on the semaphore.</span></span>  
  
 <span data-ttu-id="0111b-274">Если запустить скомпилированный пример из двух окон командной строки, вторая копия выдаст исключение нарушения прав доступа при вызове метода <xref:System.Threading.Semaphore.OpenExisting%28System.String%29>.</span><span class="sxs-lookup"><span data-stu-id="0111b-274">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method.</span></span> <span data-ttu-id="0111b-275">Исключение перехвачено, и в примере используется перегрузка метода <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> для открытия семафора с правами, необходимыми для чтения и изменения разрешений.</span><span class="sxs-lookup"><span data-stu-id="0111b-275">The exception is caught, and the example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload to open the semaphore with the rights needed to read and change the permissions.</span></span> <span data-ttu-id="0111b-276">Безопасность управления доступом для системного семафора достигается с помощью метода <xref:System.Threading.Semaphore.GetAccessControl%2A>.</span><span class="sxs-lookup"><span data-stu-id="0111b-276">The access control security for the system semaphore is obtained using the <xref:System.Threading.Semaphore.GetAccessControl%2A> method.</span></span>  
  
 <span data-ttu-id="0111b-277">После изменения разрешений семафор открывается с правами, необходимыми для ввода и выпуска.</span><span class="sxs-lookup"><span data-stu-id="0111b-277">After the permissions are changed, the semaphore is opened with the rights required to enter and release.</span></span> <span data-ttu-id="0111b-278">Если запустить скомпилированный пример из третьего командного окна, он будет запущен с использованием новых разрешений.</span><span class="sxs-lookup"><span data-stu-id="0111b-278">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="0111b-279">Текущий объект <see cref="T:System.Threading.Semaphore" /> представляет именованный системный семафор, а пользователь не имеет прав <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-279">The current <see cref="T:System.Threading.Semaphore" /> object represents a named system semaphore, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> rights.</span></span>  
  
<span data-ttu-id="0111b-280">-или-</span><span class="sxs-lookup"><span data-stu-id="0111b-280">-or-</span></span> 
<span data-ttu-id="0111b-281">Текущий объект <see cref="T:System.Threading.Semaphore" /> представляет именованный системный семафор и не был открыт с использованием прав <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-281">The current <see cref="T:System.Threading.Semaphore" /> object represents a named system semaphore and was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> rights.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0111b-282">Не поддерживается для Windows 98 или Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="0111b-282">Not supported for Windows 98 or Windows Millennium Edition.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="0111b-283">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="0111b-283">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="0111b-284">Semaphore</span><span class="sxs-lookup"><span data-stu-id="0111b-284">Semaphore</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0111b-285">Открывает указанный именованный семафор, если он уже существует.</span><span class="sxs-lookup"><span data-stu-id="0111b-285">Opens a specified named semaphore, if it already exists.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Semaphore OpenExisting (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Semaphore OpenExisting(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.OpenExisting(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String) As Semaphore" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Semaphore ^ OpenExisting(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member OpenExisting : string -&gt; System.Threading.Semaphore" Usage="System.Threading.Semaphore.OpenExisting name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Semaphore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="0111b-286">Имя системного семафора для открытия.</span><span class="sxs-lookup"><span data-stu-id="0111b-286">The name of the system semaphore to open.</span></span></param>
        <summary><span data-ttu-id="0111b-287">Открывает указанный именованный семафор, если он уже существует.</span><span class="sxs-lookup"><span data-stu-id="0111b-287">Opens the specified named semaphore, if it already exists.</span></span></summary>
        <returns><span data-ttu-id="0111b-288">Объект, представляющий именованный системный семафор.</span><span class="sxs-lookup"><span data-stu-id="0111b-288">An object that represents the named system semaphore.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0111b-289">Метод <xref:System.Threading.Semaphore.OpenExisting%2A> пытается открыть указанный именованный семафор.</span><span class="sxs-lookup"><span data-stu-id="0111b-289">The <xref:System.Threading.Semaphore.OpenExisting%2A> method tries to open the specified named semaphore.</span></span> <span data-ttu-id="0111b-290">Если системный семафор не существует, этот метод создает исключение вместо создания системного семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-290">If the system semaphore does not exist, this method throws an exception instead of creating the system semaphore.</span></span> <span data-ttu-id="0111b-291">Чтобы создать системный семафор, если он еще не существует, используйте один из <xref:System.Threading.Semaphore.%23ctor%2A> конструкторов с параметром `name`.</span><span class="sxs-lookup"><span data-stu-id="0111b-291">To create the system semaphore when it does not already exist, use one of the <xref:System.Threading.Semaphore.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="0111b-292">Несколько вызовов этого метода, которые используют одно и то же значение для `name`, не обязательно возвращают один и тот же объект <xref:System.Threading.Semaphore>, даже если возвращаемые объекты представляют один и тот же именованный системный семафор.</span><span class="sxs-lookup"><span data-stu-id="0111b-292">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Semaphore> object, even though the objects that are returned represent the same named system semaphore.</span></span>  
  
 <span data-ttu-id="0111b-293">Перегрузка этого метода эквивалентна вызову перегрузки метода <xref:System.Threading.Semaphore.OpenExisting%2A> и указанию прав <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> и <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> в сочетании с помощью побитовой операции или.</span><span class="sxs-lookup"><span data-stu-id="0111b-293">This method overload is equivalent to calling the <xref:System.Threading.Semaphore.OpenExisting%2A> method overload and specifying <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> and <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights, combined by using the bitwise OR operation.</span></span>  
  
 <span data-ttu-id="0111b-294">Задание флага <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> позволяет потоку входить в семафор, а указание флага <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> позволяет потоку вызывать метод <xref:System.Threading.Semaphore.Release%2A>.</span><span class="sxs-lookup"><span data-stu-id="0111b-294">Specifying the <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> flag allows a thread to enter the semaphore, and specifying the <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> flag allows a thread to call the <xref:System.Threading.Semaphore.Release%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0111b-295">В следующем примере кода показано поведение перекрестной обработки именованного семафора с защитой управления доступом.</span><span class="sxs-lookup"><span data-stu-id="0111b-295">The following code example demonstrates the cross-process behavior of a named semaphore with access control security.</span></span> <span data-ttu-id="0111b-296">В примере используется перегрузка метода <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> для проверки существования именованного семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-296">The example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload to test for the existence of a named semaphore.</span></span>  
  
 <span data-ttu-id="0111b-297">Если семафор не существует, он создается с максимальным числом двух и с защитой управления доступом, которое запрещает текущему пользователю право использовать семафор, но предоставляет право на чтение и изменение семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-297">If the semaphore does not exist, it is created with a maximum count of two and with access control security that denies the current user the right to use the semaphore, but which grants the right to read and change permissions on the semaphore.</span></span>  
  
 <span data-ttu-id="0111b-298">Если запустить скомпилированный пример из двух окон командной строки, вторая копия выдаст исключение нарушения прав доступа при вызове перегрузки метода <xref:System.Threading.Semaphore.OpenExisting%28System.String%29>.</span><span class="sxs-lookup"><span data-stu-id="0111b-298">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload.</span></span> <span data-ttu-id="0111b-299">Исключение перехвачено, и в примере используется перегрузка метода <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> для открытия семафора с правами, необходимыми для чтения и изменения разрешений.</span><span class="sxs-lookup"><span data-stu-id="0111b-299">The exception is caught, and the example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload to open the semaphore with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="0111b-300">После изменения разрешений семафор открывается с правами, необходимыми для ввода и освобождения.</span><span class="sxs-lookup"><span data-stu-id="0111b-300">After the permissions are changed, the semaphore is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="0111b-301">Если запустить скомпилированный пример из третьего командного окна, он будет запущен с использованием новых разрешений.</span><span class="sxs-lookup"><span data-stu-id="0111b-301">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0111b-302">Параметр <paramref name="name" /> равен пустой строке.</span><span class="sxs-lookup"><span data-stu-id="0111b-302"><paramref name="name" /> is an empty string.</span></span>  
  
<span data-ttu-id="0111b-303">-или-</span><span class="sxs-lookup"><span data-stu-id="0111b-303">-or-</span></span> 
 <span data-ttu-id="0111b-304">Длина значения параметра <paramref name="name" /> превышает 260 символов.</span><span class="sxs-lookup"><span data-stu-id="0111b-304"><paramref name="name" /> is longer than 260 characters.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0111b-305"><paramref name="name" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-305"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException"><span data-ttu-id="0111b-306">Именованный семафор не существует.</span><span class="sxs-lookup"><span data-stu-id="0111b-306">The named semaphore does not exist.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0111b-307">Произошла ошибка Win32.</span><span class="sxs-lookup"><span data-stu-id="0111b-307">A Win32 error occurred.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="0111b-308">Именованный семафор существует, но у пользователя нет прав доступа, необходимых для его использования.</span><span class="sxs-lookup"><span data-stu-id="0111b-308">The named semaphore exists, but the user does not have the security access required to use it.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="0111b-309">для вызова неуправляемого кода для открытия именованного системного семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-309">for calling unmanaged code to open a named system semaphore.</span></span> <span data-ttu-id="0111b-310">Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-310">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span>  
  
<span data-ttu-id="0111b-311">Действие безопасности: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-311">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span></permission>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="0111b-312">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="0111b-312">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="0111b-313">Semaphore</span><span class="sxs-lookup"><span data-stu-id="0111b-313">Semaphore</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Semaphore OpenExisting (string name, System.Security.AccessControl.SemaphoreRights rights);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Semaphore OpenExisting(string name, valuetype System.Security.AccessControl.SemaphoreRights rights) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.OpenExisting(System.String,System.Security.AccessControl.SemaphoreRights)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String, rights As SemaphoreRights) As Semaphore" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Semaphore ^ OpenExisting(System::String ^ name, System::Security::AccessControl::SemaphoreRights rights);" />
      <MemberSignature Language="F#" Value="static member OpenExisting : string * System.Security.AccessControl.SemaphoreRights -&gt; System.Threading.Semaphore" Usage="System.Threading.Semaphore.OpenExisting (name, rights)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Semaphore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="rights" Type="System.Security.AccessControl.SemaphoreRights" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="0111b-314">Имя системного семафора для открытия.</span><span class="sxs-lookup"><span data-stu-id="0111b-314">The name of the system semaphore to open.</span></span></param>
        <param name="rights"><span data-ttu-id="0111b-315">Битовая комбинация значений перечисления, которые определяют желаемые права доступа.</span><span class="sxs-lookup"><span data-stu-id="0111b-315">A bitwise combination of the enumeration values that represent the desired security access.</span></span></param>
        <summary><span data-ttu-id="0111b-316">Открывает указанный именованный семафор, если он уже существует, с требуемым безопасным доступом.</span><span class="sxs-lookup"><span data-stu-id="0111b-316">Opens the specified named semaphore, if it already exists, with the desired security access.</span></span></summary>
        <returns><span data-ttu-id="0111b-317">Объект, представляющий именованный системный семафор.</span><span class="sxs-lookup"><span data-stu-id="0111b-317">An object that represents the named system semaphore.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0111b-318">Параметр `rights` должен включать флаг <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType>, чтобы разрешить потокам входить в семафор, а флаг <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> разрешает потокам вызывать метод <xref:System.Threading.Semaphore.Release%2A>.</span><span class="sxs-lookup"><span data-stu-id="0111b-318">The `rights` parameter must include the <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> flag to allow threads to enter the semaphore, and the <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> flag to allow threads to call the <xref:System.Threading.Semaphore.Release%2A> method.</span></span>  
  
 <span data-ttu-id="0111b-319">Метод <xref:System.Threading.Semaphore.OpenExisting%2A> пытается открыть существующий именованный семафор.</span><span class="sxs-lookup"><span data-stu-id="0111b-319">The <xref:System.Threading.Semaphore.OpenExisting%2A> method tries to open an existing named semaphore.</span></span> <span data-ttu-id="0111b-320">Если системный семафор не существует, этот метод создает исключение вместо создания системного семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-320">If the system semaphore does not exist, this method throws an exception instead of creating the system semaphore.</span></span> <span data-ttu-id="0111b-321">Чтобы создать системный семафор, если он еще не существует, используйте один из <xref:System.Threading.Semaphore.%23ctor%2A> конструкторов с параметром `name`.</span><span class="sxs-lookup"><span data-stu-id="0111b-321">To create the system semaphore when it does not already exist, use one of the <xref:System.Threading.Semaphore.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="0111b-322">Несколько вызовов этого метода, которые используют одно и то же значение для `name`, не обязательно возвращают один и тот же объект <xref:System.Threading.Semaphore>, даже если возвращаемые объекты представляют один и тот же именованный системный семафор.</span><span class="sxs-lookup"><span data-stu-id="0111b-322">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Semaphore> object, even though the objects that are returned represent the same named system semaphore.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0111b-323">В следующем примере кода показано поведение перекрестной обработки именованного семафора с защитой управления доступом.</span><span class="sxs-lookup"><span data-stu-id="0111b-323">The following code example demonstrates the cross-process behavior of a named semaphore with access control security.</span></span> <span data-ttu-id="0111b-324">В примере используется перегрузка метода <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> для проверки существования именованного семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-324">The example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload to test for the existence of a named semaphore.</span></span>  
  
 <span data-ttu-id="0111b-325">Если семафор не существует, он создается с максимальным числом двух и с защитой управления доступом, которое запрещает текущему пользователю право использовать семафор, но предоставляет право на чтение и изменение семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-325">If the semaphore does not exist, it is created with a maximum count of two and with access control security that denies the current user the right to use the semaphore, but grants the right to read and change permissions on the semaphore.</span></span>  
  
 <span data-ttu-id="0111b-326">Если запустить скомпилированный пример из двух окон командной строки, вторая копия выдаст исключение нарушения прав доступа при вызове метода <xref:System.Threading.Semaphore.OpenExisting%28System.String%29>.</span><span class="sxs-lookup"><span data-stu-id="0111b-326">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method.</span></span> <span data-ttu-id="0111b-327">Исключение перехвачено, и в примере используется перегрузка метода <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> для открытия семафора с правами, необходимыми для чтения и изменения разрешений.</span><span class="sxs-lookup"><span data-stu-id="0111b-327">The exception is caught, and the example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload to open the semaphore with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="0111b-328">После изменения разрешений семафор открывается с правами, необходимыми для ввода и освобождения.</span><span class="sxs-lookup"><span data-stu-id="0111b-328">After the permissions are changed, the semaphore is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="0111b-329">Если запустить скомпилированный пример из третьего командного окна, он будет запущен с использованием новых разрешений.</span><span class="sxs-lookup"><span data-stu-id="0111b-329">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0111b-330">Параметр <paramref name="name" /> равен пустой строке.</span><span class="sxs-lookup"><span data-stu-id="0111b-330"><paramref name="name" /> is an empty string.</span></span>  
  
<span data-ttu-id="0111b-331">-или-</span><span class="sxs-lookup"><span data-stu-id="0111b-331">-or-</span></span> 
 <span data-ttu-id="0111b-332">Длина значения параметра <paramref name="name" /> превышает 260 символов.</span><span class="sxs-lookup"><span data-stu-id="0111b-332"><paramref name="name" /> is longer than 260 characters.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0111b-333"><paramref name="name" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-333"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException"><span data-ttu-id="0111b-334">Именованный семафор не существует.</span><span class="sxs-lookup"><span data-stu-id="0111b-334">The named semaphore does not exist.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0111b-335">Произошла ошибка Win32.</span><span class="sxs-lookup"><span data-stu-id="0111b-335">A Win32 error occurred.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="0111b-336">Именованный семафор существует, но у пользователя нет требуемых прав доступа.</span><span class="sxs-lookup"><span data-stu-id="0111b-336">The named semaphore exists, but the user does not have the desired security access rights.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="0111b-337">для вызова неуправляемого кода для создания именованного системного семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-337">for calling unmanaged code to create a named system semaphore.</span></span> <span data-ttu-id="0111b-338">Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-338">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span>  
  
<span data-ttu-id="0111b-339">Действие безопасности: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-339">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span></permission>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="0111b-340">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="0111b-340">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="0111b-341">Semaphore</span><span class="sxs-lookup"><span data-stu-id="0111b-341">Semaphore</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Release">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0111b-342">Выполняет выход из семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-342">Exits the semaphore.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.Release" />
      <MemberSignature Language="VB.NET" Value="Public Function Release () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release();" />
      <MemberSignature Language="F#" Value="member this.Release : unit -&gt; int" Usage="semaphore.Release " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Runtime.ConstrainedExecution.PrePrepareMethod</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0111b-343">Выходит из семафора и возвращает последнее значение счетчика.</span><span class="sxs-lookup"><span data-stu-id="0111b-343">Exits the semaphore and returns the previous count.</span></span></summary>
        <returns><span data-ttu-id="0111b-344">Счетчик семафора перед вызовом метода <see cref="Overload:System.Threading.Semaphore.Release" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-344">The count on the semaphore before the <see cref="Overload:System.Threading.Semaphore.Release" /> method was called.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0111b-345">Потоки обычно используют метод <xref:System.Threading.WaitHandle.WaitOne%2A> для входа в семафор и обычно используют перегрузку метода для выхода.</span><span class="sxs-lookup"><span data-stu-id="0111b-345">Threads typically use the <xref:System.Threading.WaitHandle.WaitOne%2A> method to enter the semaphore, and they typically use this method overload to exit.</span></span>  
  
 <span data-ttu-id="0111b-346">Если метод <xref:System.Threading.Semaphore.Release%2A> вызывает <xref:System.Threading.SemaphoreFullException>, он не обязательно указывает на проблему в вызывающем потоке.</span><span class="sxs-lookup"><span data-stu-id="0111b-346">If a <xref:System.Threading.SemaphoreFullException> is thrown by the <xref:System.Threading.Semaphore.Release%2A> method, it does not necessarily indicate a problem with the calling thread.</span></span> <span data-ttu-id="0111b-347">Ошибка программирования в другом потоке могла привести к тому, что поток выполнит выход из семафора больше времени, чем он был введен.</span><span class="sxs-lookup"><span data-stu-id="0111b-347">A programming error in another thread might have caused that thread to exit the semaphore more times than it entered.</span></span>  
  
 <span data-ttu-id="0111b-348">Если текущий объект <xref:System.Threading.Semaphore> представляет именованный системный семафор, пользователь должен иметь права <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>, а семафор должен быть открыт с правами <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="0111b-348">If the current <xref:System.Threading.Semaphore> object represents a named system semaphore, the user must have <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights and the semaphore must have been opened with <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0111b-349">В следующем примере кода создается семафор с максимальным числом трех и начальным счетчиком, равным нулю.</span><span class="sxs-lookup"><span data-stu-id="0111b-349">The following code example creates a semaphore with a maximum count of three and an initial count of zero.</span></span> <span data-ttu-id="0111b-350">В примере запускается пять потоков, которые блокируют ожидание семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-350">The example starts five threads, which block waiting for the semaphore.</span></span> <span data-ttu-id="0111b-351">Основной поток использует перегрузку метода <xref:System.Threading.Semaphore.Release%28System.Int32%29> для увеличения числа семафоров до максимального значения, позволяя трем потокам входить в семафор.</span><span class="sxs-lookup"><span data-stu-id="0111b-351">The main thread uses the <xref:System.Threading.Semaphore.Release%28System.Int32%29> method overload to increase the semaphore count to its maximum, allowing three threads to enter the semaphore.</span></span> <span data-ttu-id="0111b-352">Каждый поток использует метод <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> для ожидания одной секунды, для имитации работы, а затем вызывает перегрузку метода <xref:System.Threading.Semaphore.Release> для освобождения семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-352">Each thread uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to wait for one second, to simulate work, and then calls the <xref:System.Threading.Semaphore.Release> method overload to release the semaphore.</span></span>  
  
 <span data-ttu-id="0111b-353">При каждом освобождении семафора отображается предыдущее число семафоров.</span><span class="sxs-lookup"><span data-stu-id="0111b-353">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="0111b-354">Сообщения консоли записывают использование семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-354">Console messages track semaphore use.</span></span> <span data-ttu-id="0111b-355">Рабочий интервал смоделированной работы немного увеличивается для каждого потока, чтобы упростить чтение выходных данных.</span><span class="sxs-lookup"><span data-stu-id="0111b-355">The simulated work interval is increased slightly for each thread, to make the output easier to read.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SemaphoreFullException"><span data-ttu-id="0111b-356">Счетчик семафора уже имеет максимальное значение.</span><span class="sxs-lookup"><span data-stu-id="0111b-356">The semaphore count is already at the maximum value.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0111b-357">Произошла ошибка Win32, связанная с именованным семафором.</span><span class="sxs-lookup"><span data-stu-id="0111b-357">A Win32 error occurred with a named semaphore.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="0111b-358">Текущий семафор представляет именованный системный семафор, но пользователь не имеет прав <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-358">The current semaphore represents a named system semaphore, but the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.</span></span>  
  
<span data-ttu-id="0111b-359">-или-</span><span class="sxs-lookup"><span data-stu-id="0111b-359">-or-</span></span> 
<span data-ttu-id="0111b-360">Текущий семафор представляет именованный системный семафор, но он не был открыт с правами доступа <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-360">The current semaphore represents a named system semaphore, but it was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="0111b-361">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="0111b-361">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="0111b-362">Semaphore</span><span class="sxs-lookup"><span data-stu-id="0111b-362">Semaphore</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release (int releaseCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release(int32 releaseCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.Release(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Release (releaseCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release(int releaseCount);" />
      <MemberSignature Language="F#" Value="member this.Release : int -&gt; int" Usage="semaphore.Release releaseCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="releaseCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="releaseCount"><span data-ttu-id="0111b-363">Количество требуемых выходов из семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-363">The number of times to exit the semaphore.</span></span></param>
        <summary><span data-ttu-id="0111b-364">Выходит из семафора указанное число раз и возвращает последнее значение счетчика.</span><span class="sxs-lookup"><span data-stu-id="0111b-364">Exits the semaphore a specified number of times and returns the previous count.</span></span></summary>
        <returns><span data-ttu-id="0111b-365">Счетчик семафора перед вызовом метода <see cref="Overload:System.Threading.Semaphore.Release" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-365">The count on the semaphore before the <see cref="Overload:System.Threading.Semaphore.Release" /> method was called.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0111b-366">Если поток вошел в семафор несколько раз, этот перегруженный метод позволяет восстановить все число семафоров с помощью одного вызова.</span><span class="sxs-lookup"><span data-stu-id="0111b-366">If a thread has entered the semaphore multiple times, this method overload allows the entire semaphore count to be restored with one call.</span></span>  
  
 <span data-ttu-id="0111b-367">Если метод <xref:System.Threading.Semaphore.Release%2A> вызывает <xref:System.Threading.SemaphoreFullException>, он не обязательно указывает на проблему в вызывающем потоке.</span><span class="sxs-lookup"><span data-stu-id="0111b-367">If a <xref:System.Threading.SemaphoreFullException> is thrown by the <xref:System.Threading.Semaphore.Release%2A> method, it does not necessarily indicate a problem with the calling thread.</span></span> <span data-ttu-id="0111b-368">Ошибка программирования в другом потоке могла привести к тому, что поток выполнит выход из семафора больше времени, чем он был введен.</span><span class="sxs-lookup"><span data-stu-id="0111b-368">A programming error in another thread might have caused that thread to exit the semaphore more times than it entered.</span></span>  
  
 <span data-ttu-id="0111b-369">Если текущий объект <xref:System.Threading.Semaphore> представляет именованный системный семафор, пользователь должен иметь права <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>, а семафор должен быть открыт с правами <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="0111b-369">If the current <xref:System.Threading.Semaphore> object represents a named system semaphore, the user must have <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights and the semaphore must have been opened with <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0111b-370">В следующем примере кода создается семафор с максимальным числом трех и начальным счетчиком, равным нулю.</span><span class="sxs-lookup"><span data-stu-id="0111b-370">The following code example creates a semaphore with a maximum count of three and an initial count of zero.</span></span> <span data-ttu-id="0111b-371">В примере запускается пять потоков, которые блокируют ожидание семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-371">The example starts five threads, which block waiting for the semaphore.</span></span> <span data-ttu-id="0111b-372">Основной поток использует перегрузку метода <xref:System.Threading.Semaphore.Release%28System.Int32%29> для увеличения числа семафоров до максимального значения, позволяя трем потокам входить в семафор.</span><span class="sxs-lookup"><span data-stu-id="0111b-372">The main thread uses the <xref:System.Threading.Semaphore.Release%28System.Int32%29> method overload to increase the semaphore count to its maximum, allowing three threads to enter the semaphore.</span></span> <span data-ttu-id="0111b-373">Каждый поток использует метод <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> для ожидания одной секунды, для имитации работы, а затем вызывает перегрузку метода <xref:System.Threading.Semaphore.Release> для освобождения семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-373">Each thread uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to wait for one second, to simulate work, and then calls the <xref:System.Threading.Semaphore.Release> method overload to release the semaphore.</span></span>  
  
 <span data-ttu-id="0111b-374">При каждом освобождении семафора отображается предыдущее число семафоров.</span><span class="sxs-lookup"><span data-stu-id="0111b-374">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="0111b-375">Сообщения консоли записывают использование семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-375">Console messages track semaphore use.</span></span> <span data-ttu-id="0111b-376">Рабочий интервал смоделированной работы немного увеличивается для каждого потока, чтобы упростить чтение выходных данных.</span><span class="sxs-lookup"><span data-stu-id="0111b-376">The simulated work interval is increased slightly for each thread, to make the output easier to read.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0111b-377">Значение параметра <paramref name="releaseCount" /> меньше 1.</span><span class="sxs-lookup"><span data-stu-id="0111b-377"><paramref name="releaseCount" /> is less than 1.</span></span></exception>
        <exception cref="T:System.Threading.SemaphoreFullException"><span data-ttu-id="0111b-378">Счетчик семафора уже имеет максимальное значение.</span><span class="sxs-lookup"><span data-stu-id="0111b-378">The semaphore count is already at the maximum value.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0111b-379">Произошла ошибка Win32, связанная с именованным семафором.</span><span class="sxs-lookup"><span data-stu-id="0111b-379">A Win32 error occurred with a named semaphore.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="0111b-380">Текущий семафор представляет именованный системный семафор, но пользователь не имеет прав <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-380">The current semaphore represents a named system semaphore, but the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> rights.</span></span>  
  
<span data-ttu-id="0111b-381">-или-</span><span class="sxs-lookup"><span data-stu-id="0111b-381">-or-</span></span> 
<span data-ttu-id="0111b-382">Текущий семафор представляет именованный системный семафор, но он не был открыт с правами <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-382">The current semaphore represents a named system semaphore, but it was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> rights.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="0111b-383">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="0111b-383">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="0111b-384">Semaphore</span><span class="sxs-lookup"><span data-stu-id="0111b-384">Semaphore</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetAccessControl">
      <MemberSignature Language="C#" Value="public void SetAccessControl (System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessControl(class System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.SetAccessControl(System.Security.AccessControl.SemaphoreSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessControl(System::Security::AccessControl::SemaphoreSecurity ^ semaphoreSecurity);" />
      <MemberSignature Language="F#" Value="member this.SetAccessControl : System.Security.AccessControl.SemaphoreSecurity -&gt; unit" Usage="semaphore.SetAccessControl semaphoreSecurity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semaphoreSecurity" Type="System.Security.AccessControl.SemaphoreSecurity" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="semaphoreSecurity"><span data-ttu-id="0111b-385">Объект <see cref="T:System.Security.AccessControl.SemaphoreSecurity" />, представляющий безопасность управления доступом для применения к именованному системному семафору.</span><span class="sxs-lookup"><span data-stu-id="0111b-385">A <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> object that represents the access control security to be applied to the named system semaphore.</span></span></param>
        <summary><span data-ttu-id="0111b-386">Задает безопасность управления доступом для именованного системного семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-386">Sets the access control security for a named system semaphore.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0111b-387">Безопасность управления доступом можно задать только для объектов <xref:System.Threading.Semaphore>, представляющих именованные системные семафоры.</span><span class="sxs-lookup"><span data-stu-id="0111b-387">You can set access control security only on <xref:System.Threading.Semaphore> objects that represent named system semaphores.</span></span>  
  
 <span data-ttu-id="0111b-388">Пользователь должен иметь права <xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType> для вызова этого метода, а семафор должен быть открыт с правами <xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="0111b-388">The user must have <xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType> rights to call this method, and the semaphore must have been opened with <xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType> rights.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0111b-389">В следующем примере кода показано поведение перекрестной обработки именованного семафора с защитой управления доступом.</span><span class="sxs-lookup"><span data-stu-id="0111b-389">The following code example demonstrates the cross-process behavior of a named semaphore with access control security.</span></span> <span data-ttu-id="0111b-390">В примере используется перегрузка метода <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> для проверки существования именованного семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-390">The example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload to test for the existence of a named semaphore.</span></span>  
  
 <span data-ttu-id="0111b-391">Если семафор не существует, он создается с максимальным числом двух и с защитой управления доступом, которое запрещает текущему пользователю право использовать семафор, но предоставляет право на чтение и изменение семафора.</span><span class="sxs-lookup"><span data-stu-id="0111b-391">If the semaphore does not exist, it is created with a maximum count of two and with access control security that denies the current user the right to use the semaphore but grants the right to read and change permissions on the semaphore.</span></span>  
  
 <span data-ttu-id="0111b-392">Если запустить скомпилированный пример из двух окон командной строки, вторая копия выдаст исключение нарушения прав доступа при вызове метода <xref:System.Threading.Semaphore.OpenExisting%28System.String%29>.</span><span class="sxs-lookup"><span data-stu-id="0111b-392">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method.</span></span> <span data-ttu-id="0111b-393">Исключение перехвачено, и в примере используется перегрузка метода <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> для открытия семафора с правами, необходимыми для чтения и изменения разрешений.</span><span class="sxs-lookup"><span data-stu-id="0111b-393">The exception is caught, and the example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload to open the semaphore with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="0111b-394">После изменения разрешений с помощью метода <xref:System.Threading.Semaphore.SetAccessControl%2A> семафор открывается с правами, необходимыми для ввода и выпуска.</span><span class="sxs-lookup"><span data-stu-id="0111b-394">After the permissions are changed, using the <xref:System.Threading.Semaphore.SetAccessControl%2A> method, the semaphore is opened with the rights required to enter and release.</span></span> <span data-ttu-id="0111b-395">Если запустить скомпилированный пример из третьего командного окна, он будет запущен с использованием новых разрешений.</span><span class="sxs-lookup"><span data-stu-id="0111b-395">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0111b-396"><paramref name="semaphoreSecurity" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-396"><paramref name="semaphoreSecurity" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="0111b-397">Пользователь не имеет прав <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-397">The user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> rights.</span></span>  
  
<span data-ttu-id="0111b-398">-или-</span><span class="sxs-lookup"><span data-stu-id="0111b-398">-or-</span></span> 
<span data-ttu-id="0111b-399">Семафор не был открыт с правами <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-399">The semaphore was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> rights.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0111b-400">Текущий объект <see cref="T:System.Threading.Semaphore" /> не представляет именованный системный семафор.</span><span class="sxs-lookup"><span data-stu-id="0111b-400">The current <see cref="T:System.Threading.Semaphore" /> object does not represent a named system semaphore.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="0111b-401">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="0111b-401">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="0111b-402">Semaphore</span><span class="sxs-lookup"><span data-stu-id="0111b-402">Semaphore</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryOpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0111b-403">Открывает заданный именованный семафор, если он уже существует, и возвращает значение, указывающее, успешно ли выполнена операция.</span><span class="sxs-lookup"><span data-stu-id="0111b-403">Opens a specified named semaphore, if it already exists, and returns a value that indicates whether the operation succeeded.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, out System.Threading.Semaphore result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, [out] class System.Threading.Semaphore&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Threading.Semaphore@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, ByRef result As Semaphore) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, [Runtime::InteropServices::Out] System::Threading::Semaphore ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryOpenExisting : string * Semaphore -&gt; bool" Usage="System.Threading.Semaphore.TryOpenExisting (name, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.Threading.Semaphore" RefType="out" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="0111b-404">Имя системного семафора для открытия.</span><span class="sxs-lookup"><span data-stu-id="0111b-404">The name of the system semaphore to open.</span></span></param>
        <param name="result"><span data-ttu-id="0111b-405">При возврате этот метод содержит объект <see cref="T:System.Threading.Semaphore" />, представляющий именованный семафор, если вызов завершился успешно, или значение <see langword="null" />, если вызов завершился неудачно.</span><span class="sxs-lookup"><span data-stu-id="0111b-405">When this method returns, contains a <see cref="T:System.Threading.Semaphore" /> object that represents the named semaphore if the call succeeded, or <see langword="null" /> if the call failed.</span></span> <span data-ttu-id="0111b-406">Этот параметр обрабатывается как неинициализированный.</span><span class="sxs-lookup"><span data-stu-id="0111b-406">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="0111b-407">Открывает указанный именованный семафор, если он уже существует, и возвращает значение, указывающее, успешно ли выполнена операция.</span><span class="sxs-lookup"><span data-stu-id="0111b-407">Opens the specified named semaphore, if it already exists, and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="0111b-408">Значение <see langword="true" />, если именованный семафор был успешно открыт; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-408"><see langword="true" /> if the named semaphore was opened successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0111b-409">Если именованный семафор не существует, этот метод не создает его.</span><span class="sxs-lookup"><span data-stu-id="0111b-409">If the named semaphore does not exist, this method does not create it.</span></span> <span data-ttu-id="0111b-410">Чтобы создать системный семафор, если он еще не существует, используйте один из <xref:System.Threading.Semaphore.%23ctor%2A> конструкторов с параметром `name`.</span><span class="sxs-lookup"><span data-stu-id="0111b-410">To create the system semaphore when it does not already exist, use one of the <xref:System.Threading.Semaphore.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="0111b-411">Если вы не уверены, существует ли именованный семафор, используйте эту перегрузку метода вместо перегрузки метода <xref:System.Threading.Semaphore.OpenExisting%28System.String%29>, которая вызывает исключение, если семафор не существует.</span><span class="sxs-lookup"><span data-stu-id="0111b-411">If you are uncertain whether a named semaphore exists, use this method overload instead of the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload, which throws an exception if the semaphore does not exist.</span></span>  
  
 <span data-ttu-id="0111b-412">Перегрузка этого метода эквивалентна вызову перегрузки метода <xref:System.Threading.Semaphore.TryOpenExisting%2A> и указанию прав <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> и <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> в сочетании с помощью побитовой операции или.</span><span class="sxs-lookup"><span data-stu-id="0111b-412">This method overload is equivalent to calling the <xref:System.Threading.Semaphore.TryOpenExisting%2A> method overload and specifying <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> and <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights, combined by using the bitwise OR operation.</span></span> <span data-ttu-id="0111b-413">Задание флага <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> позволяет потоку входить в семафор, а указание флага <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> позволяет потоку вызывать метод <xref:System.Threading.Semaphore.Release%2A>.</span><span class="sxs-lookup"><span data-stu-id="0111b-413">Specifying the <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> flag allows a thread to enter the semaphore, and specifying the   <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> flag allows a thread to call the <xref:System.Threading.Semaphore.Release%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0111b-414">Параметр <paramref name="name" /> равен пустой строке.</span><span class="sxs-lookup"><span data-stu-id="0111b-414"><paramref name="name" /> is an empty string.</span></span>  
  
<span data-ttu-id="0111b-415">-или-</span><span class="sxs-lookup"><span data-stu-id="0111b-415">-or-</span></span> 
 <span data-ttu-id="0111b-416">Длина значения параметра <paramref name="name" /> превышает 260 символов.</span><span class="sxs-lookup"><span data-stu-id="0111b-416"><paramref name="name" /> is longer than 260 characters.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0111b-417"><paramref name="name" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-417"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0111b-418">Произошла ошибка Win32.</span><span class="sxs-lookup"><span data-stu-id="0111b-418">A Win32 error occurred.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="0111b-419">Именованный семафор существует, но у пользователя нет прав доступа, необходимых для его использования.</span><span class="sxs-lookup"><span data-stu-id="0111b-419">The named semaphore exists, but the user does not have the security access required to use it.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, System.Security.AccessControl.SemaphoreRights rights, out System.Threading.Semaphore result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, valuetype System.Security.AccessControl.SemaphoreRights rights, [out] class System.Threading.Semaphore&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Security.AccessControl.SemaphoreRights,System.Threading.Semaphore@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, rights As SemaphoreRights, ByRef result As Semaphore) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, System::Security::AccessControl::SemaphoreRights rights, [Runtime::InteropServices::Out] System::Threading::Semaphore ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryOpenExisting : string * System.Security.AccessControl.SemaphoreRights * Semaphore -&gt; bool" Usage="System.Threading.Semaphore.TryOpenExisting (name, rights, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="rights" Type="System.Security.AccessControl.SemaphoreRights" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.Threading.Semaphore" RefType="out" Index="2" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="0111b-420">Имя системного семафора для открытия.</span><span class="sxs-lookup"><span data-stu-id="0111b-420">The name of the system semaphore to open.</span></span></param>
        <param name="rights"><span data-ttu-id="0111b-421">Битовая комбинация значений перечисления, которые определяют желаемые права доступа.</span><span class="sxs-lookup"><span data-stu-id="0111b-421">A bitwise combination of the enumeration values that represent the desired security access.</span></span></param>
        <param name="result"><span data-ttu-id="0111b-422">При возврате этот метод содержит объект <see cref="T:System.Threading.Semaphore" />, представляющий именованный семафор, если вызов завершился успешно, или значение <see langword="null" />, если вызов завершился неудачно.</span><span class="sxs-lookup"><span data-stu-id="0111b-422">When this method returns, contains a <see cref="T:System.Threading.Semaphore" /> object that represents the named semaphore if the call succeeded, or <see langword="null" /> if the call failed.</span></span> <span data-ttu-id="0111b-423">Этот параметр обрабатывается как неинициализированный.</span><span class="sxs-lookup"><span data-stu-id="0111b-423">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="0111b-424">Открывает заданный именованный семафор, если он уже существует, с требуемыми правами доступа, и возвращает значение, указывающее, успешно ли выполнена операция.</span><span class="sxs-lookup"><span data-stu-id="0111b-424">Opens the specified named semaphore, if it already exists, with the desired security access, and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="0111b-425">Значение <see langword="true" />, если именованный семафор был успешно открыт; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-425"><see langword="true" /> if the named semaphore was opened successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0111b-426">Если именованный семафор не существует, этот метод не создает его.</span><span class="sxs-lookup"><span data-stu-id="0111b-426">If the named semaphore does not exist, this method does not create it.</span></span> <span data-ttu-id="0111b-427">Чтобы создать системный семафор, если он еще не существует, используйте один из <xref:System.Threading.Semaphore.%23ctor%2A> конструкторов с параметром `name`.</span><span class="sxs-lookup"><span data-stu-id="0111b-427">To create the system semaphore when it does not already exist, use one of the <xref:System.Threading.Semaphore.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="0111b-428">Если вы не уверены, существует ли именованный семафор, используйте эту перегрузку метода вместо перегрузки метода <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29>, которая вызывает исключение, если семафор не существует.</span><span class="sxs-lookup"><span data-stu-id="0111b-428">If you are uncertain whether a named semaphore exists, use this method overload instead of the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload, which throws an exception if the semaphore does not exist.</span></span>  
  
 <span data-ttu-id="0111b-429">Параметр `rights` должен включать флаг <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType>, чтобы разрешить потокам входить в семафор, а флаг <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> разрешает потокам вызывать метод <xref:System.Threading.Semaphore.Release%2A>.</span><span class="sxs-lookup"><span data-stu-id="0111b-429">The `rights` parameter must include the <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> flag to allow threads to enter the semaphore, and the <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> flag to allow threads to call the <xref:System.Threading.Semaphore.Release%2A> method.</span></span>  
  
 <span data-ttu-id="0111b-430">Несколько вызовов этого метода, которые используют одно и то же значение для `name`, не обязательно возвращают один и тот же объект <xref:System.Threading.Semaphore>, даже если возвращаемые объекты представляют один и тот же именованный системный семафор.</span><span class="sxs-lookup"><span data-stu-id="0111b-430">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Semaphore> object, even though the objects that are returned represent the same named system semaphore.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0111b-431">Параметр <paramref name="name" /> равен пустой строке.</span><span class="sxs-lookup"><span data-stu-id="0111b-431"><paramref name="name" /> is an empty string.</span></span>  
  
<span data-ttu-id="0111b-432">-или-</span><span class="sxs-lookup"><span data-stu-id="0111b-432">-or-</span></span> 
 <span data-ttu-id="0111b-433">Длина значения параметра <paramref name="name" /> превышает 260 символов.</span><span class="sxs-lookup"><span data-stu-id="0111b-433"><paramref name="name" /> is longer than 260 characters.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0111b-434"><paramref name="name" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0111b-434"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="0111b-435">Произошла ошибка Win32.</span><span class="sxs-lookup"><span data-stu-id="0111b-435">A Win32 error occurred.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="0111b-436">Именованный семафор существует, но у пользователя нет прав доступа, необходимых для его использования.</span><span class="sxs-lookup"><span data-stu-id="0111b-436">The named semaphore exists, but the user does not have the security access required to use it.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
