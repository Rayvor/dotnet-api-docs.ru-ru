<Type Name="ParameterizedThreadStart" FullName="System.Threading.ParameterizedThreadStart">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3a27f0b92c5f9b53691bdec768065422021c571f" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75115998" /></Metadata><TypeSignature Language="C#" Value="public delegate void ParameterizedThreadStart(object obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ParameterizedThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ParameterizedThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ParameterizedThreadStart(obj As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ParameterizedThreadStart(System::Object ^ obj);" />
  <TypeSignature Language="F#" Value="type ParameterizedThreadStart = delegate of obj -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="obj" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="obj">Объект, содержащий данные потоковой процедуры.</param>
    <summary>Представляет метод, выполняющийся в объекте <see cref="T:System.Threading.Thread" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При создании управляемого потока метод, выполняемый в потоке, представляется следующим образом:  
  
-   Делегат <xref:System.Threading.ThreadStart>, который передается в конструктор <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType>.  Любой метод, не имеющий параметров и возвращающий C# `void` в или, является `Sub`ой процедурой в Visual Basic может представлять делегат.  
  
-   Делегат <xref:System.Threading.ParameterizedThreadStart>, который передается в конструктор <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType>. Любой метод с одним параметром типа <xref:System.Object> и возвращающий значение void в C# или является подпроцедурой в Visual Basic может представлять делегат.  
  
 Поток не начинает выполняться до тех пор, пока не будет вызван метод <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType>. В потоке вызывается делегат <xref:System.Threading.ThreadStart> или <xref:System.Threading.ParameterizedThreadStart>, а выполнение начинается с первой строки метода, представленного делегатом. В случае делегата <xref:System.Threading.ParameterizedThreadStart> объект, который передается в метод <xref:System.Threading.Thread.Start%28System.Object%29>, передается делегату.  
  
> [!NOTE]
>  Visual Basic и C# пользователи могут опустить конструктор <xref:System.Threading.ThreadStart> или <xref:System.Threading.ParameterizedThreadStart> делегата при создании потока. В Visual Basic используйте оператор `AddressOf` при передаче метода в конструктор <xref:System.Threading.Thread.%23ctor%2A>. Например, `Dim t As New Thread(AddressOf ThreadProc)`. В C#службах просто укажите имя процедуры потока. Компилятор выбирает правильный конструктор делегата.  
  
> [!NOTE]
>  При создании <xref:System.Threading.ParameterizedThreadStart> делегата для метода экземпляра в C++первый параметр конструктора является переменной экземпляра. Для статического метода первый параметр конструктора равен нулю. Для статического метода конструктор делегата требует только одного параметра: адрес метода обратного вызова, дополненного именем класса.  
  
 Делегат <xref:System.Threading.ParameterizedThreadStart> и перегрузка метода <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> упрощают передачу данных в потоковую процедуру, но этот метод не является типобезопасным, так как любой объект может быть передан в <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>. Более надежный способ передачи данных в потоковую процедуру заключается в помещении как процедуры потока, так и полей данных в рабочий объект. Дополнительные сведения см. [в разделе Создание потоков и передача данных во время начала](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).  
  
 Делегат <xref:System.Threading.ParameterizedThreadStart> поддерживает только один параметр. В <xref:System.Threading.ParameterizedThreadStart> можно передать несколько элементов данных, сделав этот параметр одним из следующих:  
  
-   Массив объектов .  
  
-   Тип коллекции, если все элементы данных имеют один и тот же тип.  
  
-   Тип кортежа, например <xref:System.Tuple%602> или <xref:System.Tuple%604>.  
  
   
  
## Examples  
 В следующем примере кода используется делегат <xref:System.Threading.ParameterizedThreadStart> для выполнения статического метода и метода экземпляра. Первый делегат <xref:System.Threading.ParameterizedThreadStart> представлен статическим `DoWork`ным методом, а второй представляется методом `DoMoreWork` экземпляра. Оба метода соответствуют сигнатуре делегата <xref:System.Threading.ParameterizedThreadStart>; то есть они имеют единственный параметр типа <xref:System.Object> и не возвращают значение.  
  
> [!NOTE]
>  Visual Basic и C# компиляторы определяют <xref:System.Threading.ParameterizedThreadStart> делегата от сигнатур методов `DoWork` и `DoMoreWork` и вызывают правильный конструктор. Таким образом, в коде отсутствует явный вызов конструктора.  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
    <related type="Article" href="~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md">Создание потоков</related>
  </Docs>
</Type>
