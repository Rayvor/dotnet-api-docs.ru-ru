<Type Name="RegisteredWaitHandle" FullName="System.Threading.RegisteredWaitHandle">
  <Metadata><Meta Name="ms.openlocfilehash" Value="701e103adf3ab9ec55715a289f91d30417501770" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70567435" /></Metadata><TypeSignature Language="C#" Value="public sealed class RegisteredWaitHandle : MarshalByRefObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegisteredWaitHandle extends System.MarshalByRefObject" />
  <TypeSignature Language="DocId" Value="T:System.Threading.RegisteredWaitHandle" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegisteredWaitHandle&#xA;Inherits MarshalByRefObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegisteredWaitHandle sealed : MarshalByRefObject" />
  <TypeSignature Language="F#" Value="type RegisteredWaitHandle = class&#xA;    inherit MarshalByRefObject" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Представляет дескриптор, который регистрируется при вызове метода <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано, <xref:System.Threading.RegisteredWaitHandle> как использовать, чтобы определить, почему вызывается метод обратного вызова, и как отменить регистрацию задачи, если обратная передача возникла, так как был передан сигнал о дескрипторе ожидания.  
  
 В примере также показано, <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> как использовать метод для выполнения указанного метода обратного вызова при сигнале указанного дескриптора ожидания. В этом примере метод обратного вызова имеет `WaitProc`значение, а обработчик ожидания <xref:System.Threading.AutoResetEvent>—.  
  
 В примере определяется `TaskInfo` класс, в котором хранятся сведения, передаваемые обратному вызову при его выполнении. В примере создается `TaskInfo` объект и назначается часть строковых данных. `TaskInfo` Объект, возвращаемый <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> методом, присваивается <xref:System.Threading.RegisteredWaitHandle>полю объекта, чтобы метод обратного вызова получил доступ к. `Handle` <xref:System.Threading.RegisteredWaitHandle>  
  
 Помимо `TaskInfo` указания в качестве объекта для передачи в метод обратного вызова, вызов <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> метода указывает <xref:System.Threading.AutoResetEvent> , <xref:System.Threading.WaitOrTimerCallback> что задача будет `WaitProc` ожидать, делегат, представляющий метод обратного вызова, один второй интервал времени ожидания и несколько обратных вызовов.  
  
 Когда основной поток передает <xref:System.Threading.AutoResetEvent> вызов, вызывая его <xref:System.Threading.EventWaitHandle.Set%2A> метод, <xref:System.Threading.WaitOrTimerCallback> вызывается делегат. `WaitProc` Метод проверяет <xref:System.Threading.RegisteredWaitHandle>  , установлено ли время ожидания. Если обратный вызов был вызван из-за получения сигнала дескриптора ожидания, `WaitProc` метод отменяет регистрацию <xref:System.Threading.RegisteredWaitHandle>и останавливает дополнительные обратные вызовы. В случае истечения времени ожидания задача будет продолжать ожидание. `WaitProc` Метод завершается печатью сообщения на консоль.  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Данный тип потокобезопасен.</threadsafe>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md">Пул управляемых потоков</related>
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~RegisteredWaitHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.RegisteredWaitHandle.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!RegisteredWaitHandle ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="registeredWaitHandle.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Позволяет объекту попытаться освободить ресурсы и выполнить другие операции очистки, перед тем как объект будет утилизирован в процессе сборки мусора.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public bool Unregister (System.Threading.WaitHandle waitObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Unregister(class System.Threading.WaitHandle waitObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unregister (waitObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Unregister(System::Threading::WaitHandle ^ waitObject);" />
      <MemberSignature Language="F#" Value="member this.Unregister : System.Threading.WaitHandle -&gt; bool" Usage="registeredWaitHandle.Unregister waitObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="waitObject">Объект <see cref="T:System.Threading.WaitHandle" />, которому посылается сигнал.</param>
        <summary>Отменяет зарегистрированную операцию ожидания, вызванную методом <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />.</summary>
        <returns><see langword="true" />, если функция выполнилась успешно; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `waitObject` указан параметр, он сигнализирует, только <xref:System.Threading.RegisteredWaitHandle> если регистрация успешно отменена. Если метод обратного вызова выполняется при <xref:System.Threading.RegisteredWaitHandle.Unregister%2A> выполнении, `waitObject` он не сигнализирует до завершения метода обратного вызова. В частности, если метод обратного вызова выполняется <xref:System.Threading.RegisteredWaitHandle.Unregister%2A>, `waitObject` не сообщает о завершении метода обратного вызова.  
  
   
  
## Examples  
 В следующем примере показано, как использовать <xref:System.Threading.RegisteredWaitHandle.Unregister%2A> метод для отмены регистрации задачи при возникновении обратного вызова, поскольку был передан сигнал о дескрипторе ожидания.  
  
 В примере также показано, <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> как использовать метод для выполнения указанного метода обратного вызова при сигнале указанного дескриптора ожидания. В этом примере метод обратного вызова имеет `WaitProc`значение, а обработчик ожидания <xref:System.Threading.AutoResetEvent>—.  
  
 В примере определяется `TaskInfo` класс, в котором хранятся сведения, передаваемые обратному вызову при его выполнении. В примере создается `TaskInfo` объект и назначается часть строковых данных. `TaskInfo` Объект, возвращаемый <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> методом, присваивается <xref:System.Threading.RegisteredWaitHandle>полю объекта, чтобы метод обратного вызова получил доступ к. `Handle` <xref:System.Threading.RegisteredWaitHandle>  
  
 Помимо `TaskInfo` указания в качестве объекта для передачи в метод обратного вызова, вызов <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> метода указывает <xref:System.Threading.AutoResetEvent> , <xref:System.Threading.WaitOrTimerCallback> что задача будет `WaitProc` ожидать, делегат, представляющий метод обратного вызова, один второй интервал времени ожидания и несколько обратных вызовов.  
  
 Когда основной поток передает <xref:System.Threading.AutoResetEvent> вызов, вызывая его <xref:System.Threading.EventWaitHandle.Set%2A> метод, <xref:System.Threading.WaitOrTimerCallback> вызывается делегат. `WaitProc` Метод проверяет <xref:System.Threading.RegisteredWaitHandle>  , установлено ли время ожидания. Если обратный вызов был вызван из-за получения сигнала дескриптора ожидания, `WaitProc` метод отменяет регистрацию <xref:System.Threading.RegisteredWaitHandle>и останавливает дополнительные обратные вызовы. В случае истечения времени ожидания задача будет продолжать ожидание. `WaitProc` Метод завершается печатью сообщения на консоль.  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md">Пул управляемых потоков</related>
      </Docs>
    </Member>
  </Members>
</Type>
