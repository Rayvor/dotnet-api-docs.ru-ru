<Type Name="RegisteredWaitHandle" FullName="System.Threading.RegisteredWaitHandle">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8a21749bbf417c9af1797cd244170c9ee09e44d4" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75115725" /></Metadata><TypeSignature Language="C#" Value="public sealed class RegisteredWaitHandle : MarshalByRefObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegisteredWaitHandle extends System.MarshalByRefObject" />
  <TypeSignature Language="DocId" Value="T:System.Threading.RegisteredWaitHandle" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegisteredWaitHandle&#xA;Inherits MarshalByRefObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegisteredWaitHandle sealed : MarshalByRefObject" />
  <TypeSignature Language="F#" Value="type RegisteredWaitHandle = class&#xA;    inherit MarshalByRefObject" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="454b6-101">Представляет дескриптор, который регистрируется при вызове метода <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />.</span><span class="sxs-lookup"><span data-stu-id="454b6-101">Represents a handle that has been registered when calling <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />.</span></span> <span data-ttu-id="454b6-102">Этот класс не наследуется.</span><span class="sxs-lookup"><span data-stu-id="454b6-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="454b6-103">В следующем примере показано, как использовать <xref:System.Threading.RegisteredWaitHandle>, чтобы определить, почему вызывается метод обратного вызова, и как отменить регистрацию задачи, если обратная передача возникла из-за оповещения дескриптора ожидания.</span><span class="sxs-lookup"><span data-stu-id="454b6-103">The following example shows how to use a <xref:System.Threading.RegisteredWaitHandle> to determine why a callback method is called, and how to unregister a task if the callback occurred because the wait handle was signaled.</span></span>  
  
 <span data-ttu-id="454b6-104">В примере также показано, как использовать метод <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> для выполнения указанного метода обратного вызова при получении сигнала о заданном дескрипторе ожидания.</span><span class="sxs-lookup"><span data-stu-id="454b6-104">The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="454b6-105">В этом примере метод обратного вызова `WaitProc`, а маркер ожидания — <xref:System.Threading.AutoResetEvent>.</span><span class="sxs-lookup"><span data-stu-id="454b6-105">In this example, the callback method is `WaitProc`, and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="454b6-106">В примере определяется класс `TaskInfo`, в котором хранятся сведения, передаваемые обратному вызову при его выполнении.</span><span class="sxs-lookup"><span data-stu-id="454b6-106">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="454b6-107">В примере создается объект `TaskInfo` и назначается часть строковых данных.</span><span class="sxs-lookup"><span data-stu-id="454b6-107">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="454b6-108"><xref:System.Threading.RegisteredWaitHandle>, возвращаемый методом <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, назначается полю `Handle` объекта `TaskInfo`, чтобы метод обратного вызова получил доступ к <xref:System.Threading.RegisteredWaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="454b6-108">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="454b6-109">Помимо указания `TaskInfo` в качестве объекта для передачи в метод обратного вызова, вызов метода <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> указывает <xref:System.Threading.AutoResetEvent>, к которому будет ожидать задача, делегат <xref:System.Threading.WaitOrTimerCallback>, представляющий метод обратного вызова `WaitProc`, интервал времени ожидания, а также несколько обратных вызовов.</span><span class="sxs-lookup"><span data-stu-id="454b6-109">In addition to specifying `TaskInfo` as the object to pass to the callback method, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> that the task will wait for, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one second time-out interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="454b6-110">Когда основной поток передает <xref:System.Threading.AutoResetEvent>, вызывая его метод <xref:System.Threading.EventWaitHandle.Set%2A>, вызывается делегат <xref:System.Threading.WaitOrTimerCallback>.</span><span class="sxs-lookup"><span data-stu-id="454b6-110">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="454b6-111">Метод `WaitProc` проверяет <xref:System.Threading.RegisteredWaitHandle>, чтобы определить, было ли истекло время ожидания.</span><span class="sxs-lookup"><span data-stu-id="454b6-111">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a time-out occurred.</span></span> <span data-ttu-id="454b6-112">Если обратный вызов был вызван из-за того, что дескриптор ожидания был сигнальным, метод `WaitProc` отменяет регистрацию <xref:System.Threading.RegisteredWaitHandle>и останавливает дополнительные обратные вызовы.</span><span class="sxs-lookup"><span data-stu-id="454b6-112">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping additional callbacks.</span></span> <span data-ttu-id="454b6-113">В случае истечения времени ожидания задача будет продолжать ожидание.</span><span class="sxs-lookup"><span data-stu-id="454b6-113">In the case of a time-out, the task continues to wait.</span></span> <span data-ttu-id="454b6-114">Метод `WaitProc` завершается печатью сообщения на консоль.</span><span class="sxs-lookup"><span data-stu-id="454b6-114">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="454b6-115">Данный тип потокобезопасен.</span><span class="sxs-lookup"><span data-stu-id="454b6-115">This type is thread safe.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md"><span data-ttu-id="454b6-116">Пул управляемых потоков</span><span class="sxs-lookup"><span data-stu-id="454b6-116">The managed thread pool</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~RegisteredWaitHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.RegisteredWaitHandle.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!RegisteredWaitHandle ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="registeredWaitHandle.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="454b6-117">Позволяет объекту попытаться освободить ресурсы и выполнить другие операции очистки, перед тем как он будет уничтожен во время сборки мусора.</span><span class="sxs-lookup"><span data-stu-id="454b6-117">Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public bool Unregister (System.Threading.WaitHandle waitObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Unregister(class System.Threading.WaitHandle waitObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unregister (waitObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Unregister(System::Threading::WaitHandle ^ waitObject);" />
      <MemberSignature Language="F#" Value="member this.Unregister : System.Threading.WaitHandle -&gt; bool" Usage="registeredWaitHandle.Unregister waitObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="waitObject"><span data-ttu-id="454b6-118">Объект <see cref="T:System.Threading.WaitHandle" />, которому посылается сигнал.</span><span class="sxs-lookup"><span data-stu-id="454b6-118">The <see cref="T:System.Threading.WaitHandle" /> to be signaled.</span></span></param>
        <summary><span data-ttu-id="454b6-119">Отменяет зарегистрированную операцию ожидания, вызванную методом <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />.</span><span class="sxs-lookup"><span data-stu-id="454b6-119">Cancels a registered wait operation issued by the <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> method.</span></span></summary>
        <returns><span data-ttu-id="454b6-120"><see langword="true" />, если функция выполнилась успешно; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="454b6-120"><see langword="true" /> if the function succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="454b6-121">Если указан параметр `waitObject`, он сигнализирует, только если регистрация <xref:System.Threading.RegisteredWaitHandle> успешно отменена.</span><span class="sxs-lookup"><span data-stu-id="454b6-121">If `waitObject` is specified, it is signaled only if the <xref:System.Threading.RegisteredWaitHandle> is successfully unregistered.</span></span> <span data-ttu-id="454b6-122">Если метод обратного вызова выполняется, когда <xref:System.Threading.RegisteredWaitHandle.Unregister%2A> выполняется, `waitObject` не сообщается до завершения метода обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="454b6-122">If a callback method is in progress when <xref:System.Threading.RegisteredWaitHandle.Unregister%2A> executes, `waitObject` is not signaled until the callback method completes.</span></span> <span data-ttu-id="454b6-123">В частности, если метод обратного вызова выполняет <xref:System.Threading.RegisteredWaitHandle.Unregister%2A>, `waitObject` не сообщается до завершения метода обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="454b6-123">In particular, if a callback method executes <xref:System.Threading.RegisteredWaitHandle.Unregister%2A>, `waitObject` is not signaled until that callback method completes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="454b6-124">В следующем примере показано, как использовать метод <xref:System.Threading.RegisteredWaitHandle.Unregister%2A> для отмены регистрации задачи при возникновении обратного вызова, поскольку был передан сигнал о дескрипторе ожидания.</span><span class="sxs-lookup"><span data-stu-id="454b6-124">The following example shows how to use the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A> method to unregister a task if a callback occurred because the wait handle was signaled.</span></span>  
  
 <span data-ttu-id="454b6-125">В примере также показано, как использовать метод <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> для выполнения указанного метода обратного вызова при получении сигнала о заданном дескрипторе ожидания.</span><span class="sxs-lookup"><span data-stu-id="454b6-125">The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="454b6-126">В этом примере метод обратного вызова `WaitProc`, а маркер ожидания — <xref:System.Threading.AutoResetEvent>.</span><span class="sxs-lookup"><span data-stu-id="454b6-126">In this example, the callback method is `WaitProc`, and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="454b6-127">В примере определяется класс `TaskInfo`, в котором хранятся сведения, передаваемые обратному вызову при его выполнении.</span><span class="sxs-lookup"><span data-stu-id="454b6-127">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="454b6-128">В примере создается объект `TaskInfo` и назначается часть строковых данных.</span><span class="sxs-lookup"><span data-stu-id="454b6-128">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="454b6-129"><xref:System.Threading.RegisteredWaitHandle>, возвращаемый методом <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, назначается полю `Handle` объекта `TaskInfo`, чтобы метод обратного вызова получил доступ к <xref:System.Threading.RegisteredWaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="454b6-129">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="454b6-130">Помимо указания `TaskInfo` в качестве объекта для передачи в метод обратного вызова, вызов метода <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> указывает <xref:System.Threading.AutoResetEvent>, к которому будет ожидать задача, делегат <xref:System.Threading.WaitOrTimerCallback>, представляющий метод обратного вызова `WaitProc`, интервал времени ожидания, а также несколько обратных вызовов.</span><span class="sxs-lookup"><span data-stu-id="454b6-130">In addition to specifying `TaskInfo` as the object to pass to the callback method, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> that the task will wait for, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one second time-out interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="454b6-131">Когда основной поток передает <xref:System.Threading.AutoResetEvent>, вызывая его метод <xref:System.Threading.EventWaitHandle.Set%2A>, вызывается делегат <xref:System.Threading.WaitOrTimerCallback>.</span><span class="sxs-lookup"><span data-stu-id="454b6-131">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="454b6-132">Метод `WaitProc` проверяет <xref:System.Threading.RegisteredWaitHandle>, чтобы определить, было ли истекло время ожидания.</span><span class="sxs-lookup"><span data-stu-id="454b6-132">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a time-out occurred.</span></span> <span data-ttu-id="454b6-133">Если обратный вызов был вызван из-за того, что дескриптор ожидания был сигнальным, метод `WaitProc` отменяет регистрацию <xref:System.Threading.RegisteredWaitHandle>и останавливает дополнительные обратные вызовы.</span><span class="sxs-lookup"><span data-stu-id="454b6-133">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping additional callbacks.</span></span> <span data-ttu-id="454b6-134">В случае истечения времени ожидания задача будет продолжать ожидание.</span><span class="sxs-lookup"><span data-stu-id="454b6-134">In the case of a time-out, the task continues to wait.</span></span> <span data-ttu-id="454b6-135">Метод `WaitProc` завершается печатью сообщения на консоль.</span><span class="sxs-lookup"><span data-stu-id="454b6-135">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md"><span data-ttu-id="454b6-136">Пул управляемых потоков</span><span class="sxs-lookup"><span data-stu-id="454b6-136">The managed thread pool</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
