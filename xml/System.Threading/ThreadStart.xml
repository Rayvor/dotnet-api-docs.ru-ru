<Type Name="ThreadStart" FullName="System.Threading.ThreadStart">
  <Metadata><Meta Name="ms.openlocfilehash" Value="757faaeb61202c2dfb918b6181d28b880bc48464" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69143783" /></Metadata><TypeSignature Language="C#" Value="public delegate void ThreadStart();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ThreadStart()" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ThreadStart();" />
  <TypeSignature Language="F#" Value="type ThreadStart = delegate of unit -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <summary>Представляет метод, который выполняется в отношении <see cref="T:System.Threading.Thread" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При создании управляемого потока метод, выполняемый в потоке, представляется <xref:System.Threading.ThreadStart> делегатом <xref:System.Threading.ParameterizedThreadStart> или делегатом <xref:System.Threading.Thread.%23ctor%2A> , который передается в конструктор. Поток не начинает выполняться до <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> вызова метода. Выполнение начинается с первой строки метода, представленного <xref:System.Threading.ThreadStart> делегатом или. <xref:System.Threading.ParameterizedThreadStart>  
  
> [!NOTE]
>  Visual Basic и C# пользователи могут опустить <xref:System.Threading.ThreadStart> конструктор делегата или <xref:System.Threading.ParameterizedThreadStart> при создании потока. В Visual Basic используйте `AddressOf` оператор при передаче метода <xref:System.Threading.Thread.%23ctor%2A> в `Dim t As New Thread(AddressOf ThreadProc)`конструктор, например. В C#службах просто укажите имя процедуры потока. Компилятор выбирает правильный конструктор делегата.  
>  
>  Для C++, начиная с .NET Framework 2,0, создание <xref:System.Threading.ThreadStart> делегата для статического метода требует только одного параметра: адрес метода обратного вызова, дополненного именем класса. В более ранних версиях при создании делегата для статического метода требовалось два параметра: ноль (null) и адрес метода. Для метода экземпляра все версии должны иметь два параметра: переменная экземпляра и адрес метода.  
  
   
  
## Examples  
 В следующем примере кода показан синтаксис для создания и использования <xref:System.Threading.ThreadStart> делегата с методом экземпляра и со статическим методом.  
  
 Еще один простой пример, демонстрирующий создание <xref:System.Threading.ThreadStart> делегата, см. в <xref:System.Threading.Thread.Start?displayProperty=nameWithType> разделе перегрузка метода. Дополнительные сведения о создании потоков см. [в разделе Создание потоков и передача данных во время начала](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).  
  
 [!code-cpp[System.Threading.ThreadStart2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadStart2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadStart2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadStart2/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadStart2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadStart2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ParameterizedThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
    <related type="Article" href="~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md">Создание потоков и передача данных во время запуска</related>
  </Docs>
</Type>
