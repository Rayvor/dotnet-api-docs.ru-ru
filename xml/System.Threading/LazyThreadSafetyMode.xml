<Type Name="LazyThreadSafetyMode" FullName="System.Threading.LazyThreadSafetyMode">
  <Metadata><Meta Name="ms.openlocfilehash" Value="15e36d8fc81d7e8011bf3983aad5277fcb1a6fc5" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75116336" /></Metadata><TypeSignature Language="C#" Value="public enum LazyThreadSafetyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed LazyThreadSafetyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyThreadSafetyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum LazyThreadSafetyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class LazyThreadSafetyMode" />
  <TypeSignature Language="F#" Value="type LazyThreadSafetyMode = " />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Определяет, как экземпляр <see cref="T:System.Lazy`1" /> синхронизирует доступ из нескольких потоков.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте это перечисление, чтобы указать параметр `mode` конструкторов <xref:System.Lazy%601>. Влияние всех конструкторов на синхронизацию потоков можно описать в терминах этого перечисления, независимо от того, имеют ли они `mode` параметры.  
  
 <xref:System.Lazy%601> экземпляр инициализируется методом инициализации, заданным пользователем, или конструктором без параметров для `T`. Метод инициализации задается параметром `valueFactory` конструктора <xref:System.Lazy%601>. Метод возвращает экземпляр `T`, который является типом, экземпляром которого является отложенный экземпляр <xref:System.Lazy%601>. Если конструктор не имеет параметра `valueFactory`, конструктор без параметров для `T` используется для инициализации экземпляра <xref:System.Lazy%601>. В любом случае инициализация выполняется при первом вызове свойства <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>.  
  
 Помимо указания потокобезопасности экземпляра <xref:System.Lazy%601>, это перечисление влияет на кэширование исключений. При кэшировании исключений для экземпляра <xref:System.Lazy%601> вы получаете только одну шанс инициализировать экземпляр. Если исключение создается при первом вызове свойства <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>, это исключение кэшируется и повторно вызывается при всех последующих вызовах свойства <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>. Преимущество кэширования исключений состоит в том, что все два потока всегда получают одинаковый результат даже при возникновении ошибок.  
  
 При указании режима PublicationOnly исключения никогда не кэшируются. При указании None или режим потоковой кэширование зависит от того, указан ли метод инициализации или разрешено использование конструктора без параметров для `T`. Указание метода инициализации включает кэширование исключений для этих двух режимов. Метод инициализации может быть очень простым. Например, он может вызвать конструктор без параметров для `T`: `new Lazy<Contents>(() => new Contents(), mode)` в C#или `New Lazy(Of Contents)(Function() New Contents())` в Visual Basic. Если используется конструктор, не указывающий метод инициализации, исключения, вызываемые конструктором без параметров для `T`, не кэшируются. В следующей таблице приводится сводка поведения кэширования исключений.  
  
|Режим|Использование метода инициализации|Использование конструктора без параметров для `T`|  
|----------|---------------------------------|---------------------------------------|  
|Отсутствуют|Кэшировано|Не кэшировано|  
|PublicationOnly|Не кэшировано|Не кэшировано|  
|Режим потоковой|Кэшировано|Не кэшировано|  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">Отложенная инициализация</related>
  </Docs>
  <Members>
    <Member MemberName="ExecutionAndPublication">
      <MemberSignature Language="C#" Value="ExecutionAndPublication" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode ExecutionAndPublication = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberSignature Language="VB.NET" Value="ExecutionAndPublication" />
      <MemberSignature Language="C++ CLI" Value="ExecutionAndPublication" />
      <MemberSignature Language="F#" Value="ExecutionAndPublication = 2" Usage="System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Блокировки используются, чтобы убедиться, что только один поток может инициализировать экземпляр <see cref="T:System.Lazy`1" /> потокобезопасным способом. Если метод инициализации (или конструктор без параметров, если метод инициализации отсутствует) использует внутренние блокировки, могут возникнуть взаимоблокировки. Если вы используете конструктор <see cref="T:System.Lazy`1" />, который указывает метод инициализации (параметр <paramref name="valueFactory" />), и если этот метод инициализации вызывает исключение (или не может обработать исключение) при первом вызове свойства <see cref="P:System.Lazy`1.Value" />, исключение кэшируется и вызывается повторно в последующих вызовах свойства <see cref="P:System.Lazy`1.Value" />. Если вы используете конструктор <see cref="T:System.Lazy`1" />, который не указывает метод инициализации, исключения, вызываемые конструктором без параметров для <paramref name="T" />, не кэшируются. В этом случае последующий вызов свойства <see cref="P:System.Lazy`1.Value" /> может успешно инициализировать экземпляр <see cref="T:System.Lazy`1" />. Если метод инициализации рекурсивно получает доступ к свойству <see cref="P:System.Lazy`1.Value" /> экземпляра <see cref="T:System.Lazy`1" />, вызывается <see cref="T:System.InvalidOperationException" />.</summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberSignature Language="F#" Value="None = 0" Usage="System.Threading.LazyThreadSafetyMode.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Экземпляр <see cref="T:System.Lazy`1" /> не является потокобезопасным; если доступ к экземпляру осуществляется из нескольких потоков, его поведение не определено. Используйте этот режим только в том случае, когда крайне важна высокая производительность, а экземпляр <see cref="T:System.Lazy`1" /> гарантированно не будет инициализирован больше, чем из одного потока. Если вы используете конструктор <see cref="T:System.Lazy`1" />, который указывает метод инициализации (параметр <paramref name="valueFactory" />), и если этот метод инициализации вызывает исключение (или не может обработать исключение) при первом вызове свойства <see cref="P:System.Lazy`1.Value" />, исключение кэшируется и вызывается повторно в последующих вызовах свойства <see cref="P:System.Lazy`1.Value" />. Если вы используете конструктор <see cref="T:System.Lazy`1" />, который не указывает метод инициализации, исключения, вызываемые конструктором без параметров для <paramref name="T" />, не кэшируются. В этом случае последующий вызов свойства <see cref="P:System.Lazy`1.Value" /> может успешно инициализировать экземпляр <see cref="T:System.Lazy`1" />. Если метод инициализации рекурсивно получает доступ к свойству <see cref="P:System.Lazy`1.Value" /> экземпляра <see cref="T:System.Lazy`1" />, вызывается <see cref="T:System.InvalidOperationException" />.</summary>
      </Docs>
    </Member>
    <Member MemberName="PublicationOnly">
      <MemberSignature Language="C#" Value="PublicationOnly" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode PublicationOnly = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberSignature Language="VB.NET" Value="PublicationOnly" />
      <MemberSignature Language="C++ CLI" Value="PublicationOnly" />
      <MemberSignature Language="F#" Value="PublicationOnly = 1" Usage="System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Если несколько потоков пытаются инициализировать экземпляр <see cref="T:System.Lazy`1" /> одновременно, всем потокам разрешено выполнять метод инициализации (или конструктор без параметров, если нет метода инициализации). Первый поток для выполнения инициализации задает значение экземпляра <see cref="T:System.Lazy`1" />. Это значение возвращается в любые другие потоки, которые одновременно выполняли метод инициализации, если метод инициализации не вызывал исключения в этих потоках. Любые экземпляры <paramref name="T" />, созданные конкурирующими потоками, удаляются. Если метод инициализации вызывает исключение в каком-либо потоке, исключение распространяется из свойства <see cref="P:System.Lazy`1.Value" /> в этом потоке. Исключение не кэшируется. Значение свойства <see cref="P:System.Lazy`1.IsValueCreated" /> остается <see langword="false" />, и последующие вызовы свойства <see cref="P:System.Lazy`1.Value" /> потоком, где возникло исключение, или другими потоками вызывают повторный запуск метода инициализации. Если метод инициализации рекурсивно получает доступ к свойству <see cref="P:System.Lazy`1.Value" /> экземпляра <see cref="T:System.Lazy`1" />, исключение не вызывается.</summary>
      </Docs>
    </Member>
  </Members>
</Type>
