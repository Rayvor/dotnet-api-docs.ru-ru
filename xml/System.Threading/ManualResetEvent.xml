<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="545d81116f067c018afc5da6b348300a75fc2cc8" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75116258" /></Metadata><TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type ManualResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Представляет событие синхронизации потока, которое при получении сигнала необходимо сбросить вручную. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

 Для взаимодействия потоков (или потоковых сигналов) используются `ManualResetEvent`, <xref:System.Threading.AutoResetEvent>и <xref:System.Threading.EventWaitHandle>. Дополнительные сведения см. в разделе [взаимодействие потоков или сигнализация](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling) статьи [Общие сведения о примитивах синхронизации](~/docs/standard/threading/overview-of-synchronization-primitives.md) .  

 Когда поток начинает действие, которое должно быть завершено до продолжения других потоков, оно вызывает [ManualResetEvent. Reset](xref:System.Threading.EventWaitHandle.Reset%2A) , чтобы перевести `ManualResetEvent` в несигнальное состояние. Этот поток можно рассматривать как управление `ManualResetEvent`. Потоки, вызывающие блок [ManualResetEvent. WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A) , ожидающие сигнал. Когда управляющий поток завершает действие, он вызывает [ManualResetEvent. Set](xref:System.Threading.EventWaitHandle.Set%2A) , чтобы сообщить о том, что ожидание потоков может быть продолжено. Освобождаются все ожидающие потоки.  

 После получения сигнала `ManualResetEvent` остается сигнальным до тех пор, пока он не будет сброшен вручную путем вызова метода <xref:System.Threading.EventWaitHandle.Reset>. То есть вызовы <xref:System.Threading.WaitHandle.WaitOne%2A> возвращаться немедленно.  

 Вы можете управлять начальным состоянием `ManualResetEvent`, передав конструктору логическое значение: `true`, если исходное состояние сигнальное, и `false` в противном случае.  
 
 `ManualResetEvent` также можно использовать с методами `static` <xref:System.Threading.WaitHandle.WaitAll%2A> и <xref:System.Threading.WaitHandle.WaitAny%2A>.  
  
 Начиная с версии .NET Framework 2,0, <xref:System.Threading.ManualResetEvent> является производным от класса <xref:System.Threading.EventWaitHandle>. <xref:System.Threading.ManualResetEvent> функционально эквивалентен <xref:System.Threading.EventWaitHandle>, созданному с помощью <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.  
  
> [!NOTE]
> В отличие от класса <xref:System.Threading.ManualResetEvent> класс <xref:System.Threading.EventWaitHandle> предоставляет доступ к именованным событиям системной синхронизации.  

 Начиная с версии .NET Framework 4,0, класс <xref:System.Threading.ManualResetEventSlim?displayProperty=nameWithType> является упрощенной альтернативой <xref:System.Threading.ManualResetEvent>.    
   
   
  
## Examples  
 В следующем примере показано, как работает <xref:System.Threading.ManualResetEvent>. Пример начинается с <xref:System.Threading.ManualResetEvent> в несигнальном состоянии (то есть `false` передается в конструктор). В примере создаются три потока, каждый из которых блокирует <xref:System.Threading.ManualResetEvent> путем вызова его метода <xref:System.Threading.WaitHandle.WaitOne%2A>. Когда пользователь нажимает клавишу **Ввод** , в примере вызывается метод <xref:System.Threading.EventWaitHandle.Set%2A>, который освобождает все три потока. Сравните это с поведением класса <xref:System.Threading.AutoResetEvent>, который освобождает потоки по одному за раз, переустанавливая их автоматически после каждого выпуска.  
  
 Повторное нажатие клавиши **Ввод** демонстрирует, что <xref:System.Threading.ManualResetEvent> остается в сигнальном состоянии до тех пор, пока не будет вызван метод <xref:System.Threading.EventWaitHandle.Reset%2A>: в примере запускаются два потока. Эти потоки не блокируются при вызове метода <xref:System.Threading.WaitHandle.WaitOne%2A>, а выполняются до завершения.  
  
 Повторное нажатие клавиши **Ввод** приводит к тому, что в примере вызывается метод <xref:System.Threading.EventWaitHandle.Reset%2A> и запускается еще один поток, который блокируется при вызове <xref:System.Threading.WaitHandle.WaitOne%2A>. Нажимая клавишу **Ввод** , вы вызываете <xref:System.Threading.EventWaitHandle.Set%2A>, чтобы освободить последний поток, и программа завершается.  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Этот класс является потокобезопасным.</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md">Управляемая поточность</related>
    <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md">Общие сведения о примитивах синхронизации</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.ManualResetEvent : bool -&gt; System.Threading.ManualResetEvent" Usage="new System.Threading.ManualResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">Значение <see langword="true" /> для задания начального состояния сигнальным; <see langword="false" /> для задания несигнального начального состояния.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.ManualResetEvent" /> логическим значением, показывающим наличие сигнального состояния.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если начальное состояние <xref:System.Threading.ManualResetEvent> получает сигнал (то есть, если оно создается путем передачи `true` для `initialState`), потоки, ожидающие <xref:System.Threading.ManualResetEvent>, не блокируются. Если начальное состояние не сигнальо, потоки блокируются до вызова метода <xref:System.Threading.EventWaitHandle.Set%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md">Управляемая поточность</related>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md">Общие сведения о примитивах синхронизации</related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="manualResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Задает несигнальное состояние события, вызывая блокирование потоков.</summary>
        <returns>Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="manualResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Задает сигнальное состояние события, позволяя одному или нескольким ожидающим потокам развертываться.</summary>
        <returns>Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Вызов метода Set оставляет дескриптор ожидания в сигнальном состоянии до тех пор, пока не будет вызван метод <xref:System.Threading.ManualResetEvent.Reset>.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
