<Type Name="ManualResetEventSlim" FullName="System.Threading.ManualResetEventSlim">
  <Metadata><Meta Name="ms.openlocfilehash" Value="81d5dd2ff88510064e0209180b7b98aef685e7a5" /><Meta Name="ms.sourcegitcommit" Value="385ff23cc00fe9aa1c93460c62603b45c2041d0b" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="11/22/2019" /><Meta Name="ms.locfileid" Value="74387970" /></Metadata><TypeSignature Language="C#" Value="public class ManualResetEventSlim : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ManualResetEventSlim extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEventSlim" />
  <TypeSignature Language="VB.NET" Value="Public Class ManualResetEventSlim&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEventSlim : IDisposable" />
  <TypeSignature Language="F#" Value="type ManualResetEventSlim = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Set = {IsSet}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="9e97d-101">Represents a thread synchronization event that, when signaled, must be reset manually.</span><span class="sxs-lookup"><span data-stu-id="9e97d-101">Represents a thread synchronization event that, when signaled, must be reset manually.</span></span> <span data-ttu-id="9e97d-102">This class is a lightweight alternative to <see cref="T:System.Threading.ManualResetEvent" />.</span><span class="sxs-lookup"><span data-stu-id="9e97d-102">This class is a lightweight alternative to <see cref="T:System.Threading.ManualResetEvent" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e97d-103">Этот класс можно использовать для лучшей производительности, чем <xref:System.Threading.ManualResetEvent>, когда ожидается, что время ожидания будет очень коротким, а событие не пересекает границу процесса.</span><span class="sxs-lookup"><span data-stu-id="9e97d-103">You can use this class for better performance than <xref:System.Threading.ManualResetEvent> when wait times are expected to be very short, and when the event does not cross a process boundary.</span></span> <span data-ttu-id="9e97d-104"><xref:System.Threading.ManualResetEventSlim> использует цикличную работу в режиме занятости в течение короткого промежутка времени, пока ожидает перехода события в сигнальное состояние.</span><span class="sxs-lookup"><span data-stu-id="9e97d-104"><xref:System.Threading.ManualResetEventSlim> uses busy spinning for a short time while it waits for the event to become signaled.</span></span> <span data-ttu-id="9e97d-105">Если периоды ожидания короткие, цикличность может стоить гораздо дешевле, чем ожидание с использованием соответствующих дескрипторов.</span><span class="sxs-lookup"><span data-stu-id="9e97d-105">When wait times are short, spinning can be much less expensive than waiting by using wait handles.</span></span> <span data-ttu-id="9e97d-106">Однако, если состояние события не изменяется в течение заданного периода времени, <xref:System.Threading.ManualResetEventSlim> применяет обычный дескриптор ожидания событий.</span><span class="sxs-lookup"><span data-stu-id="9e97d-106">However, if the event does not become signaled within a certain period of time, <xref:System.Threading.ManualResetEventSlim> resorts to a regular event handle wait.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e97d-107">В следующем примере показано, как использовать <xref:System.Threading.ManualResetEventSlim>.</span><span class="sxs-lookup"><span data-stu-id="9e97d-107">The following example shows how to use a <xref:System.Threading.ManualResetEventSlim>.</span></span>
  
 [!code-csharp[System.Threading.ManualResetEventSlim#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.manualreseteventslim/cs/mres.cs#01)]
 [!code-vb[System.Threading.ManualResetEventSlim#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.manualreseteventslim/vb/mres.vb#01)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="9e97d-108">Все открытые и защищенные члены <see cref="T:System.Threading.ManualResetEventSlim" /> являются потокобезопасными и могут использоваться параллельно из нескольких потоков, за исключением Dispose, которое должно использоваться только в том случае, когда все остальные операции <see cref="T:System.Threading.ManualResetEventSlim" /> завершаются, и сбрасываются, что следует использовать только в том случае, если другие потоки не обращаются к событию.</span><span class="sxs-lookup"><span data-stu-id="9e97d-108">All public and protected members of <see cref="T:System.Threading.ManualResetEventSlim" /> are thread-safe and may be used concurrently from multiple threads, with the exception of Dispose, which must only be used when all other operations on the <see cref="T:System.Threading.ManualResetEventSlim" /> have completed, and Reset, which should only be used when no other threads are accessing the event.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="9e97d-109">Общие сведения о примитивах синхронизации</span><span class="sxs-lookup"><span data-stu-id="9e97d-109">Overview of synchronization primitives</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9e97d-110">Initializes a new instance of the <see cref="T:System.Threading.ManualResetEventSlim" /> class.</span><span class="sxs-lookup"><span data-stu-id="9e97d-110">Initializes a new instance of the <see cref="T:System.Threading.ManualResetEventSlim" /> class.</span></span></summary>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="9e97d-111">Общие сведения о примитивах синхронизации</span><span class="sxs-lookup"><span data-stu-id="9e97d-111">Overview of synchronization primitives</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEventSlim ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEventSlim.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEventSlim();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9e97d-112">Initializes a new instance of the <see cref="T:System.Threading.ManualResetEventSlim" /> class with an initial state of nonsignaled.</span><span class="sxs-lookup"><span data-stu-id="9e97d-112">Initializes a new instance of the <see cref="T:System.Threading.ManualResetEventSlim" /> class with an initial state of nonsignaled.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="9e97d-113">Общие сведения о примитивах синхронизации</span><span class="sxs-lookup"><span data-stu-id="9e97d-113">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEventSlim (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEventSlim(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.ManualResetEventSlim : bool -&gt; System.Threading.ManualResetEventSlim" Usage="new System.Threading.ManualResetEventSlim initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState"><span data-ttu-id="9e97d-114">true to set the initial state signaled; false to set the initial state to nonsignaled.</span><span class="sxs-lookup"><span data-stu-id="9e97d-114">true to set the initial state signaled; false to set the initial state to nonsignaled.</span></span></param>
        <summary><span data-ttu-id="9e97d-115">Initializes a new instance of the <see cref="T:System.Threading.ManualResetEventSlim" /> class with a Boolean value indicating whether to set the initial state to signaled.</span><span class="sxs-lookup"><span data-stu-id="9e97d-115">Initializes a new instance of the <see cref="T:System.Threading.ManualResetEventSlim" /> class with a Boolean value indicating whether to set the initial state to signaled.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="9e97d-116">Общие сведения о примитивах синхронизации</span><span class="sxs-lookup"><span data-stu-id="9e97d-116">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEventSlim (bool initialState, int spinCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState, int32 spinCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean, spinCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEventSlim(bool initialState, int spinCount);" />
      <MemberSignature Language="F#" Value="new System.Threading.ManualResetEventSlim : bool * int -&gt; System.Threading.ManualResetEventSlim" Usage="new System.Threading.ManualResetEventSlim (initialState, spinCount)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
        <Parameter Name="spinCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialState"><span data-ttu-id="9e97d-117">true to set the initial state to signaled; false to set the initial state to nonsignaled.</span><span class="sxs-lookup"><span data-stu-id="9e97d-117">true to set the initial state to signaled; false to set the initial state to nonsignaled.</span></span></param>
        <param name="spinCount"><span data-ttu-id="9e97d-118">The number of spin waits that will occur before falling back to a kernel-based wait operation.</span><span class="sxs-lookup"><span data-stu-id="9e97d-118">The number of spin waits that will occur before falling back to a kernel-based wait operation.</span></span></param>
        <summary><span data-ttu-id="9e97d-119">Initializes a new instance of the <see cref="T:System.Threading.ManualResetEventSlim" /> class with a Boolean value indicating whether to set the initial state to signaled and a specified spin count.</span><span class="sxs-lookup"><span data-stu-id="9e97d-119">Initializes a new instance of the <see cref="T:System.Threading.ManualResetEventSlim" /> class with a Boolean value indicating whether to set the initial state to signaled and a specified spin count.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9e97d-120"><paramref name="spinCount" /> is less than 0 or greater than the maximum allowed value.</span><span class="sxs-lookup"><span data-stu-id="9e97d-120"><paramref name="spinCount" /> is less than 0 or greater than the maximum allowed value.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="9e97d-121">Общие сведения о примитивах синхронизации</span><span class="sxs-lookup"><span data-stu-id="9e97d-121">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9e97d-122">Releases resources used by the current instance of the <see cref="T:System.Threading.ManualResetEventSlim" /> class.</span><span class="sxs-lookup"><span data-stu-id="9e97d-122">Releases resources used by the current instance of the <see cref="T:System.Threading.ManualResetEventSlim" /> class.</span></span></summary>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="9e97d-123">Общие сведения о примитивах синхронизации</span><span class="sxs-lookup"><span data-stu-id="9e97d-123">Overview of synchronization primitives</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEventSlim.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="manualResetEventSlim.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9e97d-124">Releases all resources used by the current instance of the <see cref="T:System.Threading.ManualResetEventSlim" /> class.</span><span class="sxs-lookup"><span data-stu-id="9e97d-124">Releases all resources used by the current instance of the <see cref="T:System.Threading.ManualResetEventSlim" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e97d-125">Вызовите метод `Dispose` по окончании использования класса <xref:System.Threading.ManualResetEventSlim>.</span><span class="sxs-lookup"><span data-stu-id="9e97d-125">Call `Dispose` when you are finished using the <xref:System.Threading.ManualResetEventSlim>.</span></span> <span data-ttu-id="9e97d-126">Метод `Dispose` оставляет класс <xref:System.Threading.ManualResetEventSlim> в непригодном для использования состоянии.</span><span class="sxs-lookup"><span data-stu-id="9e97d-126">The `Dispose` method leaves the <xref:System.Threading.ManualResetEventSlim> in an unusable state.</span></span> <span data-ttu-id="9e97d-127">После вызова метода `Dispose` необходимо освободить все ссылки на объект <xref:System.Threading.ManualResetEventSlim>, чтобы сборщик мусора мог освободить память, занимаемую объектом <xref:System.Threading.ManualResetEventSlim>.</span><span class="sxs-lookup"><span data-stu-id="9e97d-127">After calling `Dispose`, you must release all references to the <xref:System.Threading.ManualResetEventSlim> so the garbage collector can reclaim the memory that the <xref:System.Threading.ManualResetEventSlim> was occupying.</span></span>  
  
 <span data-ttu-id="9e97d-128">Дополнительные сведения см. в разделе [Очистка неуправляемых ресурсов](~/docs/standard/garbage-collection/unmanaged.md) и [Реализация метода Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="9e97d-128">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9e97d-129">Всегда вызывайте метод `Dispose` перед освобождением последней ссылки на класс <xref:System.Threading.ManualResetEventSlim>.</span><span class="sxs-lookup"><span data-stu-id="9e97d-129">Always call `Dispose` before you release your last reference to the <xref:System.Threading.ManualResetEventSlim>.</span></span> <span data-ttu-id="9e97d-130">В противном случае используемые им ресурсы не будут освобождены до тех пор, пока сборщик мусора не вызовет для объекта <xref:System.Threading.ManualResetEventSlim> метод `Finalize`.</span><span class="sxs-lookup"><span data-stu-id="9e97d-130">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.ManualResetEventSlim> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="9e97d-131">Общие сведения о примитивах синхронизации</span><span class="sxs-lookup"><span data-stu-id="9e97d-131">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEventSlim.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="manualResetEventSlim.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="9e97d-132">true to release both managed and unmanaged resources; false to release only unmanaged resources.</span><span class="sxs-lookup"><span data-stu-id="9e97d-132">true to release both managed and unmanaged resources; false to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="9e97d-133">Releases the unmanaged resources used by the <see cref="T:System.Threading.ManualResetEventSlim" />, and optionally releases the managed resources.</span><span class="sxs-lookup"><span data-stu-id="9e97d-133">Releases the unmanaged resources used by the <see cref="T:System.Threading.ManualResetEventSlim" />, and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e97d-134">В отличие от большинства членов <xref:System.Threading.ManualResetEventSlim>, <xref:System.Threading.ManualResetEventSlim.Dispose%2A> не является потокобезопасным и не может использоваться одновременно с другими членами этого экземпляра.</span><span class="sxs-lookup"><span data-stu-id="9e97d-134">Unlike most of the members of <xref:System.Threading.ManualResetEventSlim>, <xref:System.Threading.ManualResetEventSlim.Dispose%2A> is not thread-safe and may not be used concurrently with other members of this instance.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="9e97d-135">Общие сведения о примитивах синхронизации</span><span class="sxs-lookup"><span data-stu-id="9e97d-135">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsSet">
      <MemberSignature Language="C#" Value="public bool IsSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSet" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ManualResetEventSlim.IsSet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSet As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSet { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSet : bool" Usage="System.Threading.ManualResetEventSlim.IsSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e97d-136">Gets whether the event is set.</span><span class="sxs-lookup"><span data-stu-id="9e97d-136">Gets whether the event is set.</span></span></summary>
        <value><span data-ttu-id="9e97d-137">значение true, если событие задано. в противном случае — значение false.</span><span class="sxs-lookup"><span data-stu-id="9e97d-137">true if the event is set; otherwise, false.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="9e97d-138">Общие сведения о примитивах синхронизации</span><span class="sxs-lookup"><span data-stu-id="9e97d-138">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEventSlim.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="manualResetEventSlim.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9e97d-139">Sets the state of the event to nonsignaled, which causes threads to block.</span><span class="sxs-lookup"><span data-stu-id="9e97d-139">Sets the state of the event to nonsignaled, which causes threads to block.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e97d-140"><xref:System.Threading.ManualResetEventSlim.Reset%2A> могут вызываться параллельно со всеми членами, кроме <xref:System.Threading.ManualResetEventSlim.WaitHandle%2A>.</span><span class="sxs-lookup"><span data-stu-id="9e97d-140"><xref:System.Threading.ManualResetEventSlim.Reset%2A> can be called concurrently with all members except <xref:System.Threading.ManualResetEventSlim.WaitHandle%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e97d-141">The object has already been disposed.</span><span class="sxs-lookup"><span data-stu-id="9e97d-141">The object has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="9e97d-142">Общие сведения о примитивах синхронизации</span><span class="sxs-lookup"><span data-stu-id="9e97d-142">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public void Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEventSlim.Set" />
      <MemberSignature Language="VB.NET" Value="Public Sub Set ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; unit" Usage="manualResetEventSlim.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9e97d-143">Sets the state of the event to signaled, which allows one or more threads waiting on the event to proceed.</span><span class="sxs-lookup"><span data-stu-id="9e97d-143">Sets the state of the event to signaled, which allows one or more threads waiting on the event to proceed.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="9e97d-144">Общие сведения о примитивах синхронизации</span><span class="sxs-lookup"><span data-stu-id="9e97d-144">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SpinCount">
      <MemberSignature Language="C#" Value="public int SpinCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SpinCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ManualResetEventSlim.SpinCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SpinCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SpinCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.SpinCount : int" Usage="System.Threading.ManualResetEventSlim.SpinCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e97d-145">Gets the number of spin waits that will occur before falling back to a kernel-based wait operation.</span><span class="sxs-lookup"><span data-stu-id="9e97d-145">Gets the number of spin waits that will occur before falling back to a kernel-based wait operation.</span></span></summary>
        <value><span data-ttu-id="9e97d-146">Возвращает число спин-блокировок до возврата к операции ожидания на основе ядра.</span><span class="sxs-lookup"><span data-stu-id="9e97d-146">Returns the number of spin waits that will occur before falling back to a kernel-based wait operation.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="9e97d-147">Общие сведения о примитивах синхронизации</span><span class="sxs-lookup"><span data-stu-id="9e97d-147">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9e97d-148">Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim" /> is set.</span><span class="sxs-lookup"><span data-stu-id="9e97d-148">Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim" /> is set.</span></span></summary>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="9e97d-149">Общие сведения о примитивах синхронизации</span><span class="sxs-lookup"><span data-stu-id="9e97d-149">Overview of synchronization primitives</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEventSlim.Wait" />
      <MemberSignature Language="VB.NET" Value="Public Sub Wait ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait();" />
      <MemberSignature Language="F#" Value="member this.Wait : unit -&gt; unit" Usage="manualResetEventSlim.Wait " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9e97d-150">Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim" /> is set.</span><span class="sxs-lookup"><span data-stu-id="9e97d-150">Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim" /> is set.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e97d-151">Вызывающий объект этого метода блокируется на неопределенное время до тех пор, пока не будет задан текущий экземпляр.</span><span class="sxs-lookup"><span data-stu-id="9e97d-151">The caller of this method blocks indefinitely until the current instance is set.</span></span> <span data-ttu-id="9e97d-152">Вызывающий объект немедленно возвратит значение, если событие в данный момент находится в установленном состоянии.</span><span class="sxs-lookup"><span data-stu-id="9e97d-152">The caller will return immediately if the event is currently in a set state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e97d-153">The maximum number of waiters has been exceeded.</span><span class="sxs-lookup"><span data-stu-id="9e97d-153">The maximum number of waiters has been exceeded.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e97d-154">The object has already been disposed.</span><span class="sxs-lookup"><span data-stu-id="9e97d-154">The object has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="9e97d-155">Общие сведения о примитивах синхронизации</span><span class="sxs-lookup"><span data-stu-id="9e97d-155">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEventSlim.Wait(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.Wait : int -&gt; bool" Usage="manualResetEventSlim.Wait millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="9e97d-156">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely.</span><span class="sxs-lookup"><span data-stu-id="9e97d-156">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="9e97d-157">Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim" /> is set, using a 32-bit signed integer to measure the time interval.</span><span class="sxs-lookup"><span data-stu-id="9e97d-157">Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim" /> is set, using a 32-bit signed integer to measure the time interval.</span></span></summary>
        <returns><span data-ttu-id="9e97d-158"><see langword="true" /> if the <see cref="T:System.Threading.ManualResetEventSlim" /> was set; otherwise, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9e97d-158"><see langword="true" /> if the <see cref="T:System.Threading.ManualResetEventSlim" /> was set; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9e97d-159"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span><span class="sxs-lookup"><span data-stu-id="9e97d-159"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e97d-160">The maximum number of waiters has been exceeded.</span><span class="sxs-lookup"><span data-stu-id="9e97d-160">The maximum number of waiters has been exceeded.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e97d-161">The object has already been disposed.</span><span class="sxs-lookup"><span data-stu-id="9e97d-161">The object has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="9e97d-162">Общие сведения о примитивах синхронизации</span><span class="sxs-lookup"><span data-stu-id="9e97d-162">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Wait : System.Threading.CancellationToken -&gt; unit" Usage="manualResetEventSlim.Wait cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="9e97d-163">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span><span class="sxs-lookup"><span data-stu-id="9e97d-163">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span></span></param>
        <summary><span data-ttu-id="9e97d-164">Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim" /> receives a signal, while observing a <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="9e97d-164">Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim" /> receives a signal, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e97d-165">Вызывающий объект этого метода блокируется на неопределенное время до тех пор, пока не будет задан текущий экземпляр.</span><span class="sxs-lookup"><span data-stu-id="9e97d-165">The caller of this method blocks indefinitely until the current instance is set.</span></span> <span data-ttu-id="9e97d-166">Вызывающий объект немедленно возвратит значение, если событие в данный момент находится в установленном состоянии.</span><span class="sxs-lookup"><span data-stu-id="9e97d-166">The caller will return immediately if the event is currently in a set state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e97d-167">The maximum number of waiters has been exceeded.</span><span class="sxs-lookup"><span data-stu-id="9e97d-167">The maximum number of waiters has been exceeded.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="9e97d-168"><paramref name="cancellationToken" /> was canceled.</span><span class="sxs-lookup"><span data-stu-id="9e97d-168"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e97d-169">The object has already been disposed or the <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has been disposed.</span><span class="sxs-lookup"><span data-stu-id="9e97d-169">The object has already been disposed or the <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="9e97d-170">Общие сведения о примитивах синхронизации</span><span class="sxs-lookup"><span data-stu-id="9e97d-170">Overview of synchronization primitives</span></span></related>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="9e97d-171"><paramref name="cancellationToken" /> was canceled.</span><span class="sxs-lookup"><span data-stu-id="9e97d-171"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Wait : TimeSpan -&gt; bool" Usage="manualResetEventSlim.Wait timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="9e97d-172">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span><span class="sxs-lookup"><span data-stu-id="9e97d-172">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="9e97d-173">Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim" /> is set, using a <see cref="T:System.TimeSpan" /> to measure the time interval.</span><span class="sxs-lookup"><span data-stu-id="9e97d-173">Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim" /> is set, using a <see cref="T:System.TimeSpan" /> to measure the time interval.</span></span></summary>
        <returns><span data-ttu-id="9e97d-174"><see langword="true" /> if the <see cref="T:System.Threading.ManualResetEventSlim" /> was set; otherwise, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9e97d-174"><see langword="true" /> if the <see cref="T:System.Threading.ManualResetEventSlim" /> was set; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9e97d-175"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span><span class="sxs-lookup"><span data-stu-id="9e97d-175"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="9e97d-176">-or-</span><span class="sxs-lookup"><span data-stu-id="9e97d-176">-or-</span></span> 
<span data-ttu-id="9e97d-177">The number of milliseconds in <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="9e97d-177">The number of milliseconds in <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e97d-178">The maximum number of waiters has been exceeded.</span><span class="sxs-lookup"><span data-stu-id="9e97d-178">The maximum number of waiters has been exceeded.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e97d-179">The object has already been disposed.</span><span class="sxs-lookup"><span data-stu-id="9e97d-179">The object has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="9e97d-180">Общие сведения о примитивах синхронизации</span><span class="sxs-lookup"><span data-stu-id="9e97d-180">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Wait : int * System.Threading.CancellationToken -&gt; bool" Usage="manualResetEventSlim.Wait (millisecondsTimeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="9e97d-181">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely.</span><span class="sxs-lookup"><span data-stu-id="9e97d-181">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="9e97d-182">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span><span class="sxs-lookup"><span data-stu-id="9e97d-182">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span></span></param>
        <summary><span data-ttu-id="9e97d-183">Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim" /> is set, using a 32-bit signed integer to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="9e97d-183">Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim" /> is set, using a 32-bit signed integer to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="9e97d-184"><see langword="true" /> if the <see cref="T:System.Threading.ManualResetEventSlim" /> was set; otherwise, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9e97d-184"><see langword="true" /> if the <see cref="T:System.Threading.ManualResetEventSlim" /> was set; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="9e97d-185"><paramref name="cancellationToken" /> was canceled.</span><span class="sxs-lookup"><span data-stu-id="9e97d-185"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9e97d-186"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span><span class="sxs-lookup"><span data-stu-id="9e97d-186"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e97d-187">The maximum number of waiters has been exceeded.</span><span class="sxs-lookup"><span data-stu-id="9e97d-187">The maximum number of waiters has been exceeded.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e97d-188">The object has already been disposed or the <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has been disposed.</span><span class="sxs-lookup"><span data-stu-id="9e97d-188">The object has already been disposed or the <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="9e97d-189">Общие сведения о примитивах синхронизации</span><span class="sxs-lookup"><span data-stu-id="9e97d-189">Overview of synchronization primitives</span></span></related>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="9e97d-190"><paramref name="cancellationToken" /> was canceled.</span><span class="sxs-lookup"><span data-stu-id="9e97d-190"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Wait : TimeSpan * System.Threading.CancellationToken -&gt; bool" Usage="manualResetEventSlim.Wait (timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="9e97d-191">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span><span class="sxs-lookup"><span data-stu-id="9e97d-191">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="9e97d-192">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span><span class="sxs-lookup"><span data-stu-id="9e97d-192">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span></span></param>
        <summary><span data-ttu-id="9e97d-193">Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim" /> is set, using a <see cref="T:System.TimeSpan" /> to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="9e97d-193">Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim" /> is set, using a <see cref="T:System.TimeSpan" /> to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="9e97d-194"><see langword="true" /> if the <see cref="T:System.Threading.ManualResetEventSlim" /> was set; otherwise, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9e97d-194"><see langword="true" /> if the <see cref="T:System.Threading.ManualResetEventSlim" /> was set; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="9e97d-195"><paramref name="cancellationToken" /> was canceled.</span><span class="sxs-lookup"><span data-stu-id="9e97d-195"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9e97d-196"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span><span class="sxs-lookup"><span data-stu-id="9e97d-196"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="9e97d-197">-or-</span><span class="sxs-lookup"><span data-stu-id="9e97d-197">-or-</span></span> 
<span data-ttu-id="9e97d-198">The number of milliseconds in <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="9e97d-198">The number of milliseconds in <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e97d-199">The maximum number of waiters has been exceeded.</span><span class="sxs-lookup"><span data-stu-id="9e97d-199">The maximum number of waiters has been exceeded.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e97d-200">The object has already been disposed or the <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has been disposed.</span><span class="sxs-lookup"><span data-stu-id="9e97d-200">The object has already been disposed or the <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="9e97d-201">Общие сведения о примитивах синхронизации</span><span class="sxs-lookup"><span data-stu-id="9e97d-201">Overview of synchronization primitives</span></span></related>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="9e97d-202"><paramref name="cancellationToken" /> was canceled.</span><span class="sxs-lookup"><span data-stu-id="9e97d-202"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle WaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle WaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ManualResetEventSlim.WaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ WaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitHandle : System.Threading.WaitHandle" Usage="System.Threading.ManualResetEventSlim.WaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e97d-203">Gets the underlying <see cref="T:System.Threading.WaitHandle" /> object for this <see cref="T:System.Threading.ManualResetEventSlim" />.</span><span class="sxs-lookup"><span data-stu-id="9e97d-203">Gets the underlying <see cref="T:System.Threading.WaitHandle" /> object for this <see cref="T:System.Threading.ManualResetEventSlim" />.</span></span></summary>
        <value><span data-ttu-id="9e97d-204">Базовый объект <see cref="T:System.Threading.WaitHandle" /> события, на<see cref="T:System.Threading.ManualResetEventSlim" />.</span><span class="sxs-lookup"><span data-stu-id="9e97d-204">The underlying <see cref="T:System.Threading.WaitHandle" /> event object fore this <see cref="T:System.Threading.ManualResetEventSlim" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e97d-205">Доступ к этому свойству приводит к принудительной инициализации базового объекта события, если он еще не создан.</span><span class="sxs-lookup"><span data-stu-id="9e97d-205">Accessing this property forces initialization of an underlying event object if one hasn't already been created.</span></span> <span data-ttu-id="9e97d-206">Чтобы просто дождаться этого <xref:System.Threading.ManualResetEventSlim>, рекомендуется использовать открытые методы ожидания.</span><span class="sxs-lookup"><span data-stu-id="9e97d-206">To simply wait on this <xref:System.Threading.ManualResetEventSlim>, the public Wait methods should be preferred.</span></span> <span data-ttu-id="9e97d-207">Рекомендуется ликвидировать <xref:System.Threading.ManualResetEventSlim> экземпляр после доступа к этому свойству, чтобы предотвратить утечку ресурсов.</span><span class="sxs-lookup"><span data-stu-id="9e97d-207">It is recommended to dispose the <xref:System.Threading.ManualResetEventSlim> instance after accessing this property, in order to prevent a resource leak.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="9e97d-208">Общие сведения о примитивах синхронизации</span><span class="sxs-lookup"><span data-stu-id="9e97d-208">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
