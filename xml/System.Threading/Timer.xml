<Type Name="Timer" FullName="System.Threading.Timer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e96c8f8c67bf10af5464b443d038d2bcae96e40b" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75114971" /></Metadata><TypeSignature Language="C#" Value="public sealed class Timer : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Timer extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Timer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Timer&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer sealed : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Timer</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;dotnet-uwp-10.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Предоставляет механизм для выполнения метода в потоке пула с заданными интервалами. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Threading.TimerCallback> делегат, чтобы указать метод, который будет выполняться <xref:System.Threading.Timer>. Сигнатура <xref:System.Threading.TimerCallback> делегата:  
  
```csharp  
void TimerCallback(Object state)  
```  
  
```cpp  
void TimerCallback(Object state)  
```  
  
```vb  
Sub TimerCallback(state As Object)  
```  
  
 Делегат Timer указывается при создании таймера и не может быть изменен. Метод не выполняется в потоке, создавшем таймер; он выполняется в потоке <xref:System.Threading.ThreadPool>, предоставленном системой.  
  
> [!TIP]
> .NET включает четыре класса с именем `Timer`, каждый из которых предоставляет различные функциональные возможности:  
>
> - <xref:System.Timers.Timer?displayProperty=nameWithType>, который вызывает событие и выполняет код в одном или нескольких приемниках событий через регулярные интервалы. Класс предназначен для использования в качестве серверного компонента или компонент службы в многопоточной среде. Он не имеет пользовательского интерфейса и не отображается во время выполнения.
> - <xref:System.Threading.Timer?displayProperty=nameWithType>, который выполняет один метод обратного вызова в потоке пула потоков через регулярные интервалы. Метод обратного вызова определяется при создании экземпляра таймера и не может быть изменен. Как и класс <xref:System.Timers.Timer?displayProperty=nameWithType>, этот класс предназначен для использования в многопоточной среде в качестве серверного компонента или компонент службы. Он не имеет пользовательского интерфейса и не отображается во время выполнения.
> - <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (только .NET Framework), компонент Windows Forms, который запускает событие и выполняет код в одном или нескольких приемниках событий через регулярные интервалы. Компонент не имеет пользовательского интерфейса и предназначен для использования в среде с одним потоком; он выполняется в потоке пользовательского интерфейса.
> - <xref:System.Web.UI.Timer?displayProperty=nameWithType> (только .NET Framework) — компонент ASP.NET, который выполняет асинхронные или синхронные обратные передачи веб-страниц через равные промежутки времени.
  
 При создании таймера можно указать время ожидания перед первым выполнением метода (из-за времени) и время ожидания между последовательными выполнениями (период). Класс <xref:System.Threading.Timer> имеет то же разрешение, что и системные часы. Это означает, что если период меньше, чем разрешение системных часов, то делегат <xref:System.Threading.TimerCallback> будет выполняться с интервалами, определенными разрешением системных часов, что составляет примерно 15 миллисекунд на системах Windows 7 и Windows 8. Вы можете изменить время выполнения и период или отключить таймер с помощью метода <xref:System.Threading.Timer.Change%2A>.  
  
> [!NOTE]
>  Если вы используете <xref:System.Threading.Timer>, необходимо разместить ссылку на него. Как и в случае с любым управляемым объектом, <xref:System.Threading.Timer> подлежит сборке мусора при отсутствии ссылок на него. Тот факт, что <xref:System.Threading.Timer> по-прежнему активен, не предотвращает его сбор.  
  
 Если таймер больше не нужен, используйте метод <xref:System.Threading.Timer.Dispose%2A>, чтобы освободить ресурсы, удерживаемые таймером. Обратите внимание, что обратные вызовы могут происходить после вызова перегрузки метода <xref:System.Threading.Timer.Dispose>, поскольку таймер помещает обратные вызовы для выполнения потоками пула потоков. Можно использовать перегрузку метода <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>, чтобы дождаться завершения всех обратных вызовов.  
  
 Метод обратного вызова, выполняемый таймером, должен быть повторным, так как он вызывается в <xref:System.Threading.ThreadPool> потоках. Обратный вызов может быть выполнен одновременно в двух потоках пула потоков, если интервал таймера меньше времени, необходимого для выполнения обратного вызова, или если все потоки пула потоков используются и обратный вызов помещается в очередь несколько раз.  
  
> [!NOTE]
>  <xref:System.Threading.Timer?displayProperty=nameWithType> — это простой, упрощенный таймер, использующий методы обратного вызова и обслуживаемый потоками пула потоков. Не рекомендуется использовать с Windows Forms, так как обратные вызовы не выполняются в потоке пользовательского интерфейса. <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> лучше подходит для использования с Windows Forms. Для серверных функций таймера можно использовать <xref:System.Timers.Timer?displayProperty=nameWithType>, который вызывает события и имеет дополнительные функции.  
  
   
  
## Examples  
 В следующем примере определяется класс `StatusChecker`, включающий метод `CheckStatus`, сигнатура которого совпадает с делегатом <xref:System.Threading.TimerCallback>. Аргумент `state` метода `CheckStatus` является объектом <xref:System.Threading.AutoResetEvent>, который используется для синхронизации потока приложения и потока пула потоков, который выполняет делегат обратного вызова. Класс `StatusChecker` также включает две переменные состояния:  
  
 `invokeCount`  
 Указывает, сколько раз был вызван метод обратного вызова.  
  
 `maxCount`  
 Определяет максимальное число попыток вызова метода обратного вызова.  
  
 Поток приложения создает таймер, который ожидает одну секунду, а затем выполняет метод обратного вызова `CheckStatus` каждые 250 миллисекунд. Затем поток приложения блокируется до получения сигнала от объекта <xref:System.Threading.AutoResetEvent>. Когда метод обратного вызова `CheckStatus` выполняется `maxCount` раз, он вызывает метод `AutoResetEvent.Set`, чтобы задать для объекта <xref:System.Threading.AutoResetEvent> состояние "сигнал". В первый раз поток приложения вызывает метод <xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29>, чтобы метод обратного вызова выполнялся каждую половину секунды. Он снова блокируется, пока объект <xref:System.Threading.AutoResetEvent> не будет сигнальным. В этом случае таймер уничтожается вызовом метода <xref:System.Threading.Timer.Dispose%2A>, а приложение завершает работу.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Данный тип потокобезопасен.</threadsafe>
    <altmember cref="T:System.Threading.TimerCallback" />
    <related type="Article" href="~/docs/standard/threading/timers.md">таймеры</related>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md">Пул управляемых потоков</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see langword="Timer" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback -&gt; System.Threading.Timer" Usage="new System.Threading.Timer callback" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="callback">Делегат <see cref="T:System.Threading.TimerCallback" />, представляющий выполняемый метод.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Timer" /> с бесконечным периодом и бесконечным временем действия, используя созданный объект <see cref="T:System.Threading.Timer" /> в качестве объекта состояния.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызывайте этот конструктор, если вы хотите использовать объект <xref:System.Threading.Timer> в качестве объекта состояния. После создания таймера используйте метод <xref:System.Threading.Timer.Change%2A>, чтобы задать интервал и время выполнения.  
  
 Этот конструктор задает бесконечное время выполнения перед первым обратным вызовом и бесконечный интервал между обратными вызовами, чтобы предотвратить появление первого обратного вызова до того, как объект <xref:System.Threading.Timer> будет назначен объекту состояния.  
  
 Метод, указанный для `callback`, должен быть повторным, так как он вызывается в потоках <xref:System.Threading.ThreadPool>. Метод может быть выполнен одновременно в двух потоках пула потоков, если интервал таймера меньше времени, необходимого для выполнения метода, или если все потоки пула потоков используются и метод помещается в очередь несколько раз.  
  
   
  
## Examples  
 В следующем примере кода создается новый таймер с использованием самого таймера в качестве объекта состояния. Для запуска таймера используется метод <xref:System.Threading.Timer.Change%2A>. Когда происходит обратный вызов таймера, объект состояния используется для отключения таймера.  
  
 [!code-csharp[TimerSelfCtor#1](~/samples/snippets/csharp/VS_Snippets_Misc/timerSelfCtor/CS/source.cs#1)]
 [!code-vb[TimerSelfCtor#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/timerSelfCtor/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Integer, period As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, int dueTime, int period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int * int -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="callback">Делегат <see cref="T:System.Threading.TimerCallback" />, представляющий выполняемый метод.</param>
        <param name="state">Объект, содержащий информацию, используемую методом ответного вызова или значение <see langword="null" />.</param>
        <param name="dueTime">Количество времени до начала использования параметра <paramref name="callback" />, в миллисекундах. Следует задать поле <see cref="F:System.Threading.Timeout.Infinite" /> для того, чтобы не допустить запуск таймера. Задайте значение ноль (0) для немедленного запуска таймера.</param>
        <param name="period">Временной интервал между вызовами параметра <paramref name="callback" />, в миллисекундах. Следует задать поле <see cref="F:System.Threading.Timeout.Infinite" /> для отключения периодической сигнализации.</param>
        <summary>Инициализирует новый экземпляр класса <see langword="Timer" />, используя указанное 32-разрядное знаковое целое число для задания временного интервала.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Делегат, заданный параметром `callback`, вызывается один раз после истечения `dueTime`, а затем каждый раз, когда истечет интервал времени `period`.  
  
 Если `dueTime` равен нулю (0), `callback` вызывается немедленно. Если `dueTime` <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` не вызывается; таймер отключен, но его можно включить повторно, вызвав метод <xref:System.Threading.Timer.Change%2A>.  
  
 Поскольку класс <xref:System.Threading.Timer> имеет то же разрешение, что и системные часы, что составляет примерно 15 миллисекунд на системах Windows 7 и Windows 8, делегат `callback` выполняется с интервалами, определенными разрешением системных часов, если `period` меньше, чем разрешение системных часов. Если `period` равен нулю (0) или <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> и `dueTime` не <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` вызывается один раз. периодическое поведение таймера отключено, но его можно включить повторно с помощью метода <xref:System.Threading.Timer.Change%2A>.  
  
 Метод, указанный для `callback`, должен быть повторным, так как он вызывается в потоках <xref:System.Threading.ThreadPool>. Метод может быть выполнен одновременно в двух потоках пула потоков, если интервал таймера меньше времени, необходимого для выполнения метода, или если все потоки пула потоков используются и метод помещается в очередь несколько раз.  
  
   
  
## Examples  
 В следующем примере кода показано, как создать делегат `TimerCallback` и инициализировать новый экземпляр класса `Timer`.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="dueTime" /> или <paramref name="period" /> отрицательно, и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="callback" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">таймеры</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Long, period As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, long dueTime, long period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int64 * int64 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="dueTime" Type="System.Int64" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="period" Type="System.Int64" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="callback">Делегат <see cref="T:System.Threading.TimerCallback" />, представляющий выполняемый метод.</param>
        <param name="state">Объект, содержащий информацию, используемую методом ответного вызова или значение <see langword="null" />.</param>
        <param name="dueTime">Количество времени до начала использования параметра <paramref name="callback" />, в миллисекундах. Следует задать поле <see cref="F:System.Threading.Timeout.Infinite" /> для того, чтобы не допустить запуск таймера. Задайте значение ноль (0) для немедленного запуска таймера.</param>
        <param name="period">Временной интервал между вызовами параметра <paramref name="callback" />, в миллисекундах. Следует задать поле <see cref="F:System.Threading.Timeout.Infinite" /> для отключения периодической сигнализации.</param>
        <summary>Инициализирует новый экземпляр класса <see langword="Timer" />, используя указанное 64-разрядное знаковое целое число для измерения временных интервалов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Делегат, заданный параметром `callback`, вызывается один раз после истечения `dueTime`, а затем каждый раз, когда истечет интервал времени `period`.  
  
 Если `dueTime` равен нулю (0), `callback` вызывается немедленно. Если `dueTime` <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` не вызывается; таймер отключен, но его можно включить повторно, вызвав метод <xref:System.Threading.Timer.Change%2A>.  
  
 Поскольку класс <xref:System.Threading.Timer> имеет то же разрешение, что и системные часы, что составляет примерно 15 миллисекунд на системах Windows 7 и Windows 8, делегат `callback` выполняется с интервалами, определенными разрешением системных часов, если `period` меньше, чем разрешение системных часов. Если `period` равен нулю (0) или <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> и `dueTime` не <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` вызывается один раз. периодическое поведение таймера отключено, но его можно включить повторно с помощью метода <xref:System.Threading.Timer.Change%2A>.  
  
 Метод, указанный для `callback`, должен быть повторным, так как он вызывается в потоках <xref:System.Threading.ThreadPool>. Метод может быть выполнен одновременно в двух потоках пула потоков, если интервал таймера меньше времени, необходимого для выполнения метода, или если все потоки пула потоков используются и метод помещается в очередь несколько раз.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="dueTime" /> или <paramref name="period" /> отрицательно, и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
        <exception cref="T:System.NotSupportedException">Значение параметра <paramref name="dueTime" /> или <paramref name="period" /> больше 4294967294.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">таймеры</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As TimeSpan, period As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * TimeSpan * TimeSpan -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback">Делегат, представляющий выполняемый метод.</param>
        <param name="state">Объект, содержащий информацию, используемую методом ответного вызова или значение <see langword="null" />.</param>
        <param name="dueTime">Количество времени, которое следует подождать до того, как параметр <paramref name="callback" /> вызовет свои методы. Следует задать минус одну (-1) миллисекунду для того, чтобы не допустить запуск таймера. Задайте значение ноль (0) для немедленного запуска таймера.</param>
        <param name="period">Временной интервал между вызовами методов, на которые ссылается параметр <paramref name="callback" />. Следует задать минус одну (-1) миллисекунду для отключения периодической сигнализации.</param>
        <summary>Инициализирует новый экземпляр класса <see langword="Timer" />, используя значения объекта <see cref="T:System.TimeSpan" /> для измерения временных интервалов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Делегат, заданный параметром `callback`, вызывается один раз после истечения `dueTime`, а затем каждый раз, когда истечет интервал времени `period`.  
  
 Если `dueTime` равен нулю (0), `callback` вызывается немедленно. Если `dueTime` равен минус 1 (миллисекунды), `callback` не вызывается; таймер отключен, но его можно включить повторно, вызвав метод <xref:System.Threading.Timer.Change%2A>.  
  
 Поскольку класс <xref:System.Threading.Timer> имеет то же разрешение, что и системные часы, что составляет примерно 15 миллисекунд на системах Windows 7 и Windows 8, делегат `callback` выполняется с интервалами, определенными разрешением системных часов, если `period` меньше, чем разрешение системных часов. Если `period` равен нулю (0) или минус 1 (-1) миллисекунды, а `dueTime` является положительным, `callback` вызывается один раз; периодическое поведение таймера отключено, но его можно включить повторно с помощью метода <xref:System.Threading.Timer.Change%2A>.  
  
 Метод, указанный для `callback`, должен быть повторным, так как он вызывается в потоках <xref:System.Threading.ThreadPool>. Метод может быть выполнен одновременно в двух потоках пула потоков, если интервал таймера меньше времени, необходимого для выполнения метода, или если все потоки пула потоков используются и метод помещается в очередь несколько раз.  
  
   
  
## Examples  
 В следующем примере кода показано, как создать делегат `TimerCallback` и инициализировать новый экземпляр класса `Timer`.  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Число миллисекунд, заданное значением поля <paramref name="dueTime" /> или <paramref name="period" />, отрицательно и не равно <see cref="F:System.Threading.Timeout.Infinite" />, или больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="callback" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">таймеры</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As UInteger, period As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * uint32 * uint32 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="dueTime" Type="System.UInt32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="period" Type="System.UInt32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="callback">Делегат, представляющий выполняемый метод.</param>
        <param name="state">Объект, содержащий информацию, используемую методом ответного вызова или значение <see langword="null" />.</param>
        <param name="dueTime">Количество времени до начала использования параметра <paramref name="callback" />, в миллисекундах. Следует задать поле <see cref="F:System.Threading.Timeout.Infinite" /> для того, чтобы не допустить запуск таймера. Задайте значение ноль (0) для немедленного запуска таймера.</param>
        <param name="period">Временной интервал между вызовами параметра <paramref name="callback" />, в миллисекундах. Следует задать поле <see cref="F:System.Threading.Timeout.Infinite" /> для отключения периодической сигнализации.</param>
        <summary>Инициализирует новый экземпляр класса <see langword="Timer" />, используя указанное 32-разрядное незнаковое целое число для измерения временных интервалов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Делегат, заданный параметром `callback`, вызывается один раз после истечения `dueTime`, а затем каждый раз, когда истечет интервал времени `period`.  
  
 Если `dueTime` равен нулю (0), `callback` вызывается немедленно. Если `dueTime` <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` не вызывается; таймер отключен, но его можно включить повторно, вызвав метод <xref:System.Threading.Timer.Change%2A>.  
  
 Поскольку класс <xref:System.Threading.Timer> имеет то же разрешение, что и системные часы, что составляет примерно 15 миллисекунд на системах Windows 7 и Windows 8, делегат `callback` выполняется с интервалами, определенными разрешением системных часов, если `period` меньше, чем разрешение системных часов. Если `period` равен нулю (0) или <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> и `dueTime` не <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` вызывается один раз. периодическое поведение таймера отключено, но его можно включить повторно с помощью метода <xref:System.Threading.Timer.Change%2A>.  
  
 Метод, указанный для `callback`, должен быть повторным, так как он вызывается в потоках <xref:System.Threading.ThreadPool>. Метод может быть выполнен одновременно в двух потоках пула потоков, если интервал таймера меньше времени, необходимого для выполнения метода, или если все потоки пула потоков используются и метод помещается в очередь несколько раз.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="dueTime" /> или <paramref name="period" /> отрицательно, и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="callback" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">таймеры</related>
      </Docs>
    </Member>
    <Member MemberName="ActiveCount">
      <MemberSignature Language="C#" Value="public static long ActiveCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 ActiveCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Timer.ActiveCount" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ActiveCount As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property long ActiveCount { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ActiveCount : int64" Usage="System.Threading.Timer.ActiveCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает число активных сейчас таймеров. Активный таймер — это таймер, который зарегистрирован для срабатывания в определенный момент в будущем и пока не отменен.</summary>
        <value>Количество таймеров, которые активны в данный момент.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Change">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Меняет время запуска и интервал между вызовами метода таймера.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Integer, period As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(int dueTime, int period);" />
      <MemberSignature Language="F#" Value="member this.Change : int * int -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dueTime">Количество времени, в миллисекундах, которое должно пройти до вызова метода ответного вызова при создании объекта <see cref="T:System.Threading.Timer" />. Следует задать поле <see cref="F:System.Threading.Timeout.Infinite" /> для того, чтобы не допустить повторный запуск таймера. Задайте значение ноль (0) для немедленного перезапуска таймера.</param>
        <param name="period">Временной интервал в миллисекундах между вызовами метода обратного вызова, определенный в конструкторе объекта <see cref="T:System.Threading.Timer" />. Следует задать поле <see cref="F:System.Threading.Timeout.Infinite" /> для отключения периодической сигнализации.</param>
        <summary>Меняет время запуска и интервал между вызовами метода таймера, используя 32-разрядные знаковые целые числа для измерения временных интервалов.</summary>
        <returns>Значение <see langword="true" />, если таймер успешно обновлен; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод обратного вызова вызывается один раз после истечения `dueTime`, а затем каждый раз, когда интервал времени, заданный `period`, истечет.  
  
 Если `dueTime` равен нулю (0), метод обратного вызова вызывается немедленно. Если `dueTime` <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, метод обратного вызова никогда не вызывается; таймер отключен, но его можно включить повторно, вызвав <xref:System.Threading.Timer.Change%2A> и указав положительное значение для `dueTime`.  
  
 Если `period` имеет нулевое значение (0) или <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, а `dueTime` не <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, метод обратного вызова вызывается один раз. периодическое поведение таймера отключено, но его можно включить повторно, вызвав <xref:System.Threading.Timer.Change%2A> и указав положительное значение для `period`.  
  
 Метод <xref:System.Threading.Timer.Change%2A> можно вызвать из делегата <xref:System.Threading.TimerCallback>.  
  
   
  
## Examples  
 В следующем примере кода показано, как запустить `Timer` и изменить его период после заданного числа вызовов.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.Threading.Timer" /> уже был удален.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="dueTime" /> или <paramref name="period" /> отрицательно, и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">таймеры</related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Long, period As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(long dueTime, long period);" />
      <MemberSignature Language="F#" Value="member this.Change : int64 * int64 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int64" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="period" Type="System.Int64" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="dueTime">Количество времени, в миллисекундах, которое должно пройти до вызова метода ответного вызова при создании объекта <see cref="T:System.Threading.Timer" />. Следует задать поле <see cref="F:System.Threading.Timeout.Infinite" /> для того, чтобы не допустить повторный запуск таймера. Задайте значение ноль (0) для немедленного перезапуска таймера.</param>
        <param name="period">Временной интервал в миллисекундах между вызовами метода обратного вызова, определенный в конструкторе объекта <see cref="T:System.Threading.Timer" />. Следует задать поле <see cref="F:System.Threading.Timeout.Infinite" /> для отключения периодической сигнализации.</param>
        <summary>Меняет время запуска и интервал между вызовами метода таймера, используя 64-разрядные знаковые целые числа для измерения временных интервалов.</summary>
        <returns>Значение <see langword="true" />, если таймер успешно обновлен; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод обратного вызова вызывается один раз после истечения `dueTime`, а затем каждый раз, когда интервал времени, заданный `period`, истечет.  
  
 Если `dueTime` равен нулю (0), метод обратного вызова вызывается немедленно. Если `dueTime` <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, метод обратного вызова никогда не вызывается; таймер отключен, но его можно включить повторно, вызвав <xref:System.Threading.Timer.Change%2A> и указав положительное значение для `dueTime`.  
  
 Если `period` имеет нулевое значение (0) или <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, а `dueTime` не <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, метод обратного вызова вызывается один раз. периодическое поведение таймера отключено, но его можно включить повторно, вызвав <xref:System.Threading.Timer.Change%2A> и указав положительное значение для `period`.  
  
 Метод <xref:System.Threading.Timer.Change%2A> можно вызвать из делегата <xref:System.Threading.TimerCallback>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.Threading.Timer" /> уже был удален.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="dueTime" /> или <paramref name="period" /> меньше -1.</exception>
        <exception cref="T:System.NotSupportedException">Значение параметра <paramref name="dueTime" /> или <paramref name="period" /> больше 4294967294.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">таймеры</related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As TimeSpan, period As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="member this.Change : TimeSpan * TimeSpan -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dueTime">Объект <see cref="T:System.TimeSpan" />, представляющий количество времени, в миллисекундах, которое должно пройти до вызова метода ответного вызова при создании объекта <see cref="T:System.Threading.Timer" />. Следует задать минус одну (-1) миллисекунду для того, чтобы не допустить повторный запуск таймера. Задайте значение ноль (0) для немедленного перезапуска таймера.</param>
        <param name="period">Временной интервал между вызовами метода обратного вызова, определенный в конструкторе объекта <see cref="T:System.Threading.Timer" />. Следует задать минус одну (-1) миллисекунду для отключения периодической сигнализации.</param>
        <summary>Меняет время запуска и интервал межу вызовами метода таймера, используя значения объекта <see cref="T:System.TimeSpan" /> для измерения временных интервалов.</summary>
        <returns>Значение <see langword="true" />, если таймер успешно обновлен; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод обратного вызова вызывается один раз после истечения `dueTime`, а затем каждый раз, когда интервал времени, заданный `period`, истечет.  
  
 Если `dueTime` равен нулю (0), метод обратного вызова вызывается немедленно. Если `dueTime` является отрицательной единицей (-1) миллисекунд, метод обратного вызова никогда не вызывается; таймер отключен, но его можно включить повторно, вызвав <xref:System.Threading.Timer.Change%2A> и указав положительное значение для `dueTime`.  
  
 Если `period` равен нулю (0) или минус 1 (-1) миллисекунды, а `dueTime` является положительным, метод обратного вызова вызывается один раз. периодическое поведение таймера отключено, но его можно включить повторно, вызвав <xref:System.Threading.Timer.Change%2A> и указав значение больше нуля для `period`.  
  
 Метод <xref:System.Threading.Timer.Change%2A> можно вызвать из делегата <xref:System.Threading.TimerCallback>.  
  
   
  
## Examples  
 В следующем примере кода показано, как запустить `Timer` и изменить его период после заданного числа вызовов.  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.Threading.Timer" /> уже был удален.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="dueTime" /> или <paramref name="period" /> в миллисекундах меньше -1.</exception>
        <exception cref="T:System.NotSupportedException">Значение параметра <paramref name="dueTime" /> или <paramref name="period" /> в миллисекундах больше 4294967294.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">таймеры</related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As UInteger, period As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="member this.Change : uint32 * uint32 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="period" Type="System.UInt32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="dueTime">Количество времени, в миллисекундах, которое должно пройти до вызова метода ответного вызова при создании объекта <see cref="T:System.Threading.Timer" />. Следует задать поле <see cref="F:System.Threading.Timeout.Infinite" /> для того, чтобы не допустить повторный запуск таймера. Задайте значение ноль (0) для немедленного перезапуска таймера.</param>
        <param name="period">Временной интервал в миллисекундах между вызовами метода обратного вызова, определенный в конструкторе объекта <see cref="T:System.Threading.Timer" />. Следует задать поле <see cref="F:System.Threading.Timeout.Infinite" /> для отключения периодической сигнализации.</param>
        <summary>Меняет время запуска и интервал между вызовами метода таймера, используя 32-разрядные целые числа без знака для измерения временных интервалов.</summary>
        <returns>Значение <see langword="true" />, если таймер успешно обновлен; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод обратного вызова вызывается один раз после истечения `dueTime`, а затем каждый раз, когда интервал времени, заданный `period`, истечет.  
  
 Если `dueTime` равен нулю (0), метод обратного вызова вызывается немедленно. Если `dueTime` <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, метод обратного вызова никогда не вызывается; таймер отключен, но его можно включить повторно, вызвав <xref:System.Threading.Timer.Change%2A> и указав положительное значение для `dueTime`.  
  
 Если `period` имеет нулевое значение (0) или <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, а `dueTime` не <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, метод обратного вызова вызывается один раз. периодическое поведение таймера отключено, но его можно включить повторно, вызвав <xref:System.Threading.Timer.Change%2A> и указав положительное значение для `period`.  
  
 Метод <xref:System.Threading.Timer.Change%2A> можно вызвать из делегата <xref:System.Threading.TimerCallback>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.Threading.Timer" /> уже был удален.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">таймеры</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Освобождает все ресурсы, используемые экземпляром класса <see cref="T:System.Threading.Timer" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="timer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает все ресурсы, используемые экземпляром класса <see cref="T:System.Threading.Timer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызов `Dispose` позволяет перераспределить ресурсы, используемые <xref:System.Threading.Timer>, для других целей. Дополнительные сведения о `Dispose`см. в разделе [Очистка неуправляемых ресурсов](~/docs/standard/garbage-collection/unmanaged.md).  
  
> [!NOTE]
>  Обратные вызовы могут возникать после вызова перегрузки метода <xref:System.Threading.Timer.Dispose>, поскольку таймер помещает обратные вызовы для выполнения потоками пула потоков. Можно использовать перегрузку метода <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>, чтобы дождаться завершения всех обратных вызовов.  
  
   
  
## Examples  
 В следующем примере кода показано, как освободить ресурсы, удерживаемые `Timer`.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/timers.md">таймеры</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public bool Dispose (System.Threading.WaitHandle notifyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Dispose(class System.Threading.WaitHandle notifyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dispose (notifyObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Dispose(System::Threading::WaitHandle ^ notifyObject);" />
      <MemberSignature Language="F#" Value="member this.Dispose : System.Threading.WaitHandle -&gt; bool" Usage="timer.Dispose notifyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyObject" Type="System.Threading.WaitHandle" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="notifyObject">Объект <see cref="T:System.Threading.WaitHandle" />, который должен получить сигнал при удалении объекта <see langword="Timer" />.</param>
        <summary>Освобождает все ресурсы, используемые текущим экземпляром класса <see cref="T:System.Threading.Timer" /> и передает сигнал, когда таймер удаляется.</summary>
        <returns><see langword="true" />, если функция выполнилась успешно; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызов `Dispose` позволяет перераспределить ресурсы, используемые <xref:System.Threading.Timer>, для других целей. Дополнительные сведения о `Dispose`см. в разделе [Очистка неуправляемых ресурсов](~/docs/standard/garbage-collection/unmanaged.md).  
  
 По завершении этого метода он сигнализирует <xref:System.Threading.WaitHandle>, указанную параметром `notifyObject`. Используйте эту перегрузку метода <xref:System.Threading.Timer.Dispose%2A>, если вы хотите иметь возможность блокироваться до тех пор, пока не будет определено, что таймер был удален. Таймер не уничтожается до завершения всех текущих обратных вызовов в очереди.  
  
> [!NOTE]
>  Если в обратном вызове используется метод <xref:System.Threading.Timer.Change%2A> для установки параметра `dueTime` равным нулю, то <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> при вызове перегруженной версии метода может возникнуть состояние гонки. Если таймер помещает новый обратный вызов до того момента, когда перегрузка метода <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> обнаружит, что обратные вызовы не поставлены в очередь, <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> будет продолжать блокироваться. в противном случае таймер уничтожается во время постановки нового обратного вызова в очередь и создается <xref:System.ObjectDisposedException>, когда новый обратный вызов вызывает метод <xref:System.Threading.Timer.Change%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="notifyObject" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">таймеры</related>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="timer.DisposeAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает все ресурсы, используемые экземпляром класса <see cref="T:System.Threading.Timer" />.</summary>
        <returns>Объект <see cref="T:System.Threading.Tasks.ValueTask" />, который завершается после прекращения работы, связанной с таймером.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Timer ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="timer.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Позволяет объекту попытаться освободить ресурсы и выполнить другие операции очистки, перед тем как он будет уничтожен во время сборки мусора.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
