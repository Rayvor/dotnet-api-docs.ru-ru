<Type Name="Timer" FullName="System.Threading.Timer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="49a9b90c29fb506f13fbc9ad9b14c101b5c74ccf" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65014214" /></Metadata><TypeSignature Language="C#" Value="public sealed class Timer : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Timer extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Timer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Timer&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer sealed : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Timer</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;dotnet-uwp-10.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Предоставляет механизм для выполнения метода в потоке пула с заданными интервалами. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Threading.TimerCallback> делегат для указания метода, который необходимо <xref:System.Threading.Timer> для выполнения. Подпись <xref:System.Threading.TimerCallback> делегат:  
  
```csharp  
void TimerCallback(Object state)  
```  
  
```cpp  
void TimerCallback(Object state)  
```  
  
```vb  
Sub TimerCallback(state As Object)  
```  
  
 Делегат таймера указывается в том случае, если таймер создается и его нельзя изменить. Метод не выполняется в потоке, создавшем таймер; он выполняет в <xref:System.Threading.ThreadPool> потока, предоставленное системой.  
  
> [!TIP]
> .NET включает в себя четыре класса с именем `Timer`, каждый из который предлагает различные функциональные возможности:  
>
> - <xref:System.Timers.Timer?displayProperty=nameWithType>, который запускает событие и выполняет код в одном или приемники несколько событий с регулярными интервалами. Класс предназначен для использования в качестве сервера под управлением или компонента службы в многопоточной среде; он нет пользовательского интерфейса и не отображается во время выполнения.
> - <xref:System.Threading.Timer?displayProperty=nameWithType>, который выполняет метод одного ответного вызова пула потоков с регулярными интервалами. Метод обратного вызова определяется в том случае, когда таймер создается и не может быть изменено. Как и <xref:System.Timers.Timer?displayProperty=nameWithType> класса, этот класс предназначен для использования в качестве компонента server или службы в многопоточной среде; у него отсутствует интерфейс пользователя, который не отображается во время выполнения.
> - <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET framework только), компонент Windows Forms, который запускает событие и выполняет код в один или несколько приемников событий с регулярными интервалами. Компонент, у него отсутствует интерфейс пользователя и предназначен для использования в среде однопоточный; он выполняется в потоке пользовательского интерфейса.
> - <xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET framework только), компонент ASP.NET, выполняющий обратную передачу асинхронный или синхронный веб-страницы с регулярным интервалом.
  
 При создании таймера, можно указать время ожидания перед первым выполнением метода (ожидаемое время) и время ожидания между последовательными вызовами (период). <xref:System.Threading.Timer> Класс имеет тем же разрешением, что системные часы. Это означает, что если период меньше, чем разрешение системных часов, <xref:System.Threading.TimerCallback> делегат будет выполняться через интервалы, определенные путем разрешения системных часов, который составляет приблизительно 15 миллисекунд в системах Windows 7 и Windows 8. Вы можете изменить из-за времени и период, а также отключать таймер, с помощью <xref:System.Threading.Timer.Change%2A> метод.  
  
> [!NOTE]
>  До тех пор, пока вы используете <xref:System.Threading.Timer>, необходимо хранить ссылку на него. Как и для любого управляемого объекта <xref:System.Threading.Timer> становятся подвергаются сборке мусора, когда на него нет ссылок. Тот факт, <xref:System.Threading.Timer> — это все еще активен препятствует его сбора.  
  
 Когда таймер не нужны, используйте <xref:System.Threading.Timer.Dispose%2A> метод, чтобы освободить ресурсы, удерживаемые таймера. Обратите внимание, что обратные вызовы могут возникать после <xref:System.Threading.Timer.Dispose> перегруженный метод был вызван, так как таймер ставит в очередь обратные вызовы для выполнения по потокам пулов потоков. Можно использовать <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> перегруженный метод для ожидания до завершения всех ответных вызовов.  
  
 Метод обратного вызова, кем таймера должен быть реентерабельным, так как он вызывается для <xref:System.Threading.ThreadPool> потоков. Обратный вызов может выполняться одновременно в двух потоках пула потоков, если интервал таймера меньше, чем время, необходимое для выполнения обратного вызова, или в том случае, если используются все потоки пула потоков и обратный вызов помещается в очередь несколько раз.  
  
> [!NOTE]
>  <xref:System.Threading.Timer?displayProperty=nameWithType> представляет собой упрощенный таймер, который использует методы обратного вызова и обслуживается из пула потоков. Не рекомендуется для использования с Windows Forms, поскольку обратные вызовы не происходят в потоке пользовательского интерфейса. <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> не лучшим выбором для работы с Windows Forms. Для функции таймера на основе сервера, можно использовать <xref:System.Timers.Timer?displayProperty=nameWithType>, который вызывает события и предоставляет дополнительные возможности.  
  
   
  
## Examples  
 В следующем примере определяется `StatusChecker` класс, который включает в себя `CheckStatus` метод, сигнатура которого совпадает с как <xref:System.Threading.TimerCallback> делегировать. `state` Аргумент `CheckStatus` метод <xref:System.Threading.AutoResetEvent> объект, используемый для синхронизации потока приложения и пула потоков, который выполняет делегат обратного вызова. `StatusChecker` Класс также включает две переменные состояния:  
  
 `invokeCount`  
 Указывает, сколько раз был вызван метод обратного вызова.  
  
 `maxCount`  
 Определяет максимальное количество раз, когда должен быть вызван метод обратного вызова.  
  
 Поток приложения создает таймер, который ожидает в течение одной секунды, а затем выполняет `CheckStatus` метод обратного вызова каждые 250 миллисекунд. Поток приложения блокируется до <xref:System.Threading.AutoResetEvent> объект переводится в сигнальное состояние. Когда `CheckStatus` выполнении метода обратного вызова `maxCount` раз, он вызывает `AutoResetEvent.Set` метод для задания состояния <xref:System.Threading.AutoResetEvent> объект сигнальным. Первый раз, в этом случае поток приложения вызывает <xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29> метод таким образом, метод обратного вызова теперь выполняется каждые полсекунды. Он снова блокируется до <xref:System.Threading.AutoResetEvent> объект переводится в сигнальное состояние. В этом случае таймер уничтожается, вызвав его <xref:System.Threading.Timer.Dispose%2A> метод и приложение завершается.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Данный тип потокобезопасен.</threadsafe>
    <altmember cref="T:System.Threading.TimerCallback" />
    <related type="Article" href="~/docs/standard/threading/timers.md">таймеры</related>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md">Пул управляемых потоков</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see langword="Timer" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback -&gt; System.Threading.Timer" Usage="new System.Threading.Timer callback" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="callback">Объект <see cref="T:System.Threading.TimerCallback" /> делегат, представляющий метод, который будет выполнен.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Timer" /> с бесконечным периодом и бесконечным временем действия, используя только что созданный <see cref="T:System.Threading.Timer" /> объект в качестве объекта состояния.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызов этого конструктора, если вы хотите использовать <xref:System.Threading.Timer> сам объект как объект состояния. После создания таймера, используйте <xref:System.Threading.Timer.Change%2A> метод, чтобы задать интервал и время завершения.  
  
 Этот конструктор указывает неограниченное время перед первой обратного вызова и неограниченный интервал между обратными вызовами, чтобы предотвратить появление перед первой обратного вызова <xref:System.Threading.Timer> объект присваивается объект состояния.  
  
 Метод, указанный для `callback` должен быть реентерабельным, так как он вызывается для <xref:System.Threading.ThreadPool> потоков. Метод может выполняться одновременно в двух потоках пула потоков, если интервал таймера меньше, чем время, необходимое для выполнения метода, или в том случае, если используются все потоки пула потоков и метод помещается в очередь несколько раз.  
  
   
  
## Examples  
 В следующем примере кода создается новый таймер, используя таймер в качестве объекта состояния. <xref:System.Threading.Timer.Change%2A> Метод используется для запуска таймера. Когда происходит обратный вызов таймера, объект состояния позволяет отключить таймер.  
  
 [!code-csharp[TimerSelfCtor#1](~/samples/snippets/csharp/VS_Snippets_Misc/timerSelfCtor/CS/source.cs#1)]
 [!code-vb[TimerSelfCtor#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/timerSelfCtor/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Integer, period As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, int dueTime, int period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int * int -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="callback">Объект <see cref="T:System.Threading.TimerCallback" /> делегат, представляющий метод, который будет выполнен.</param>
        <param name="state">Объект, содержащий информацию, используемую методом обратного вызова, или <see langword="null" />.</param>
        <param name="dueTime">Количество времени до начала <paramref name="callback" /> вызывается в миллисекундах. Укажите <see cref="F:System.Threading.Timeout.Infinite" /> чтобы допустить запуск таймера. Задайте значение ноль (0) для немедленного запуска таймера.</param>
        <param name="period">Временной интервал между вызовами параметра <paramref name="callback" />, в миллисекундах. Укажите <see cref="F:System.Threading.Timeout.Infinite" /> для отключения периодической сигнализации.</param>
        <summary>Инициализирует новый экземпляр класса <see langword="Timer" /> с помощью 32-разрядное целое число со знаком для указания интервала времени.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Делегат, заданный параметром `callback` вызывается один раз после `dueTime` истекает и затем каждый раз `period` прошествии времени.  
  
 Если `dueTime` равно нулю (0), `callback` вызывается немедленно. Если `dueTime` — <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` не используется; таймер отключен, но можно включить путем вызова <xref:System.Threading.Timer.Change%2A> метод.  
  
 Так как <xref:System.Threading.Timer> класс имеет одинаковое разрешение как системных часов, являющийся примерно 15 миллисекунд в системах Windows 7 и Windows 8, `callback` выполняет делегат через интервалы, определенные путем разрешения системных часов, если `period`меньше, чем разрешение системных часов. Если `period` равно нулю (0) или <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> и `dueTime` не <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` вызывается один раз; периодическое поведение таймера отключена, но можно включить с помощью <xref:System.Threading.Timer.Change%2A> метод.  
  
 Метод, указанный для `callback` должен быть реентерабельным, так как он вызывается для <xref:System.Threading.ThreadPool> потоков. Метод может выполняться одновременно в двух потоках пула потоков, если интервал таймера меньше, чем время, необходимое для выполнения метода, или в том случае, если используются все потоки пула потоков и метод помещается в очередь несколько раз.  
  
   
  
## Examples  
 В следующем примере кода показано, как создать `TimerCallback` делегировать и инициализировать новый экземпляр класса `Timer` класса.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> Или <paramref name="period" /> параметр является отрицательным и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="callback" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">таймеры</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Long, period As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, long dueTime, long period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int64 * int64 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="dueTime" Type="System.Int64" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="period" Type="System.Int64" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="callback">Объект <see cref="T:System.Threading.TimerCallback" /> делегат, представляющий метод, который будет выполнен.</param>
        <param name="state">Объект, содержащий информацию, используемую методом обратного вызова, или <see langword="null" />.</param>
        <param name="dueTime">Количество времени до начала <paramref name="callback" /> вызывается в миллисекундах. Укажите <see cref="F:System.Threading.Timeout.Infinite" /> чтобы допустить запуск таймера. Задайте значение ноль (0) для немедленного запуска таймера.</param>
        <param name="period">Временной интервал между вызовами параметра <paramref name="callback" />, в миллисекундах. Укажите <see cref="F:System.Threading.Timeout.Infinite" /> для отключения периодической сигнализации.</param>
        <summary>Инициализирует новый экземпляр класса <see langword="Timer" /> с помощью 64-разрядных целых чисел со знаком для измерения временных интервалов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Делегат, заданный параметром `callback` вызывается один раз после `dueTime` истекает и затем каждый раз `period` прошествии времени.  
  
 Если `dueTime` равно нулю (0), `callback` вызывается немедленно. Если `dueTime` — <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` не используется; таймер отключен, но можно включить путем вызова <xref:System.Threading.Timer.Change%2A> метод.  
  
 Так как <xref:System.Threading.Timer> класс имеет одинаковое разрешение как системных часов, являющийся примерно 15 миллисекунд в системах Windows 7 и Windows 8, `callback` выполняет делегат через интервалы, определенные путем разрешения системных часов, если `period`меньше, чем разрешение системных часов. Если `period` равно нулю (0) или <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> и `dueTime` не <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` вызывается один раз; периодическое поведение таймера отключена, но можно включить с помощью <xref:System.Threading.Timer.Change%2A> метод.  
  
 Метод, указанный для `callback` должен быть реентерабельным, так как он вызывается для <xref:System.Threading.ThreadPool> потоков. Метод может выполняться одновременно в двух потоках пула потоков, если интервал таймера меньше, чем время, необходимое для выполнения метода, или в том случае, если используются все потоки пула потоков и метод помещается в очередь несколько раз.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> Или <paramref name="period" /> параметр является отрицательным и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="dueTime" /> Или <paramref name="period" /> параметра больше 4294967294.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">таймеры</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As TimeSpan, period As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * TimeSpan * TimeSpan -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback">Делегат, представляющий выполняемый метод.</param>
        <param name="state">Объект, содержащий информацию, используемую методом обратного вызова, или <see langword="null" />.</param>
        <param name="dueTime">Количество времени, которое следует подождать до того, как параметр <paramref name="callback" /> вызовет свои методы. Следует задать минус одну (-1) миллисекунду для того, чтобы не допустить запуск таймера. Задайте значение ноль (0) для немедленного запуска таймера.</param>
        <param name="period">Временной интервал между вызовами методов, на который указывает <paramref name="callback" />. Следует задать минус одну (-1) миллисекунду для отключения периодической сигнализации.</param>
        <summary>Инициализирует новый экземпляр класса <see langword="Timer" /> с помощью <see cref="T:System.TimeSpan" /> значения для измерения временных интервалов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Делегат, заданный параметром `callback` вызывается один раз после `dueTime` истекает и затем каждый раз `period` прошествии времени.  
  
 Если `dueTime` равно нулю (0), `callback` вызывается немедленно. Если `dueTime` — минус один (-1) миллисекунду, `callback` не используется; таймер отключен, но можно включить путем вызова <xref:System.Threading.Timer.Change%2A> метод.  
  
 Так как <xref:System.Threading.Timer> класс имеет одинаковое разрешение как системных часов, являющийся примерно 15 миллисекунд в системах Windows 7 и Windows 8, `callback` выполняет делегат через интервалы, определенные путем разрешения системных часов, если `period`меньше, чем разрешение системных часов. Если `period` является ноль (0) или (-1) и `dueTime` положительно, `callback` вызывается один раз; периодическое поведение таймера отключена, но можно включить с помощью <xref:System.Threading.Timer.Change%2A> метод.  
  
 Метод, указанный для `callback` должен быть реентерабельным, так как он вызывается для <xref:System.Threading.ThreadPool> потоков. Метод может выполняться одновременно в двух потоках пула потоков, если интервал таймера меньше, чем время, необходимое для выполнения метода, или в том случае, если используются все потоки пула потоков и метод помещается в очередь несколько раз.  
  
   
  
## Examples  
 В следующем примере кода показано, как создать `TimerCallback` делегировать и инициализировать новый экземпляр класса `Timer` класса.  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Количество миллисекунд в значении параметра <paramref name="dueTime" /> или <paramref name="period" /> является отрицательным и не равно <see cref="F:System.Threading.Timeout.Infinite" />, или больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="callback" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">таймеры</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As UInteger, period As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * uint32 * uint32 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="dueTime" Type="System.UInt32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="period" Type="System.UInt32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="callback">Делегат, представляющий выполняемый метод.</param>
        <param name="state">Объект, содержащий информацию, используемую методом обратного вызова, или <see langword="null" />.</param>
        <param name="dueTime">Количество времени до начала <paramref name="callback" /> вызывается в миллисекундах. Укажите <see cref="F:System.Threading.Timeout.Infinite" /> чтобы допустить запуск таймера. Задайте значение ноль (0) для немедленного запуска таймера.</param>
        <param name="period">Временной интервал между вызовами параметра <paramref name="callback" />, в миллисекундах. Укажите <see cref="F:System.Threading.Timeout.Infinite" /> для отключения периодической сигнализации.</param>
        <summary>Инициализирует новый экземпляр класса <see langword="Timer" /> с помощью 32-разрядных целых беззнаковых чисел для измерения временных интервалов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Делегат, заданный параметром `callback` вызывается один раз после `dueTime` истекает и затем каждый раз `period` прошествии времени.  
  
 Если `dueTime` равно нулю (0), `callback` вызывается немедленно. Если `dueTime` — <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` не используется; таймер отключен, но можно включить путем вызова <xref:System.Threading.Timer.Change%2A> метод.  
  
 Так как <xref:System.Threading.Timer> класс имеет одинаковое разрешение как системных часов, являющийся примерно 15 миллисекунд в системах Windows 7 и Windows 8, `callback` выполняет делегат через интервалы, определенные путем разрешения системных часов, если `period`меньше, чем разрешение системных часов. Если `period` равно нулю (0) или <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> и `dueTime` не <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` вызывается один раз; периодическое поведение таймера отключена, но можно включить с помощью <xref:System.Threading.Timer.Change%2A> метод.  
  
 Метод, указанный для `callback` должен быть реентерабельным, так как он вызывается для <xref:System.Threading.ThreadPool> потоков. Метод может выполняться одновременно в двух потоках пула потоков, если интервал таймера меньше, чем время, необходимое для выполнения метода, или в том случае, если используются все потоки пула потоков и метод помещается в очередь несколько раз.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> Или <paramref name="period" /> параметр является отрицательным и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="callback" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">таймеры</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Change">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Меняет время запуска и интервал между вызовами метода таймера.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Integer, period As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(int dueTime, int period);" />
      <MemberSignature Language="F#" Value="member this.Change : int * int -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dueTime">Количество времени должно пройти до вызова метода обратного вызова при <see cref="T:System.Threading.Timer" /> было создано, в миллисекундах. Укажите <see cref="F:System.Threading.Timeout.Infinite" /> чтобы допустить повторный запуск таймера. Задайте значение ноль (0) для немедленного перезапуска таймера.</param>
        <param name="period">Временной интервал между вызовами метода обратного вызова, определенный <see cref="T:System.Threading.Timer" /> было создано, в миллисекундах. Укажите <see cref="F:System.Threading.Timeout.Infinite" /> для отключения периодической сигнализации.</param>
        <summary>Меняет время запуска и интервал между вызовами метода таймера, используя 32-разрядные знаковые целые числа для измерения временных интервалов.</summary>
        <returns><see langword="true" /> Если таймер успешно обновлен; в противном случае <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод обратного вызова вызывается один раз после `dueTime` истекает и затем каждый раз интервал времени, заданный в параметре `period` пройдет указанное время.  
  
 Если `dueTime` равно нулю (0), немедленно вызывается метод обратного вызова. Если `dueTime` — <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, метод обратного вызова не вызывается; таймер отключен, но можно включить путем вызова <xref:System.Threading.Timer.Change%2A> и указав положительное значение для `dueTime`.  
  
 Если `period` равно нулю (0) или <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, и `dueTime` не <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, метод обратного вызова вызывается один раз; периодическое поведение таймера отключена, но можно включить путем вызова <xref:System.Threading.Timer.Change%2A> и указав положительное значение для `period`.  
  
 <xref:System.Threading.Timer.Change%2A> Метод может вызываться из <xref:System.Threading.TimerCallback> делегировать.  
  
   
  
## Examples  
 В следующем примере кода показано, как запустить `Timer` и после заданного количества вызовов, изменение периода.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" /> Уже был удален.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> Или <paramref name="period" /> параметр является отрицательным и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">таймеры</related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Long, period As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(long dueTime, long period);" />
      <MemberSignature Language="F#" Value="member this.Change : int64 * int64 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int64" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="period" Type="System.Int64" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dueTime">Количество времени должно пройти до вызова метода обратного вызова при <see cref="T:System.Threading.Timer" /> было создано, в миллисекундах. Укажите <see cref="F:System.Threading.Timeout.Infinite" /> чтобы допустить повторный запуск таймера. Задайте значение ноль (0) для немедленного перезапуска таймера.</param>
        <param name="period">Временной интервал между вызовами метода обратного вызова, определенный <see cref="T:System.Threading.Timer" /> было создано, в миллисекундах. Укажите <see cref="F:System.Threading.Timeout.Infinite" /> для отключения периодической сигнализации.</param>
        <summary>Меняет время запуска и интервал между вызовами метода таймера, используя 64-разрядные знаковые целые числа для измерения временных интервалов.</summary>
        <returns><see langword="true" /> Если таймер успешно обновлен; в противном случае <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод обратного вызова вызывается один раз после `dueTime` истекает и затем каждый раз интервал времени, заданный в параметре `period` пройдет указанное время.  
  
 Если `dueTime` равно нулю (0), немедленно вызывается метод обратного вызова. Если `dueTime` — <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, метод обратного вызова не вызывается; таймер отключен, но можно включить путем вызова <xref:System.Threading.Timer.Change%2A> и указав положительное значение для `dueTime`.  
  
 Если `period` равно нулю (0) или <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, и `dueTime` не <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, метод обратного вызова вызывается один раз; периодическое поведение таймера отключена, но можно включить путем вызова <xref:System.Threading.Timer.Change%2A> и указав положительное значение для `period`.  
  
 <xref:System.Threading.Timer.Change%2A> Метод может вызываться из <xref:System.Threading.TimerCallback> делегировать.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" /> Уже был удален.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> Или <paramref name="period" /> параметр имеет меньше -1.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="dueTime" /> Или <paramref name="period" /> параметра больше 4294967294.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">таймеры</related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As TimeSpan, period As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="member this.Change : TimeSpan * TimeSpan -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dueTime">Объект <see cref="T:System.TimeSpan" /> указываться представляющее объем времени должно пройти до вызова метода обратного вызова, если <see cref="T:System.Threading.Timer" /> был создан. Следует задать минус одну (-1) миллисекунду для того, чтобы не допустить повторный запуск таймера. Задайте значение ноль (0) для немедленного перезапуска таймера.</param>
        <param name="period">Временной интервал между вызовами метода обратного вызова, определенный <see cref="T:System.Threading.Timer" /> был создан. Следует задать минус одну (-1) миллисекунду для отключения периодической сигнализации.</param>
        <summary>Меняет время запуска и интервал между вызовами метода таймера, используя <see cref="T:System.TimeSpan" /> значения для измерения временных интервалов.</summary>
        <returns><see langword="true" /> Если таймер успешно обновлен; в противном случае <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод обратного вызова вызывается один раз после `dueTime` истекает и затем каждый раз интервал времени, заданный в параметре `period` пройдет указанное время.  
  
 Если `dueTime` равно нулю (0), немедленно вызывается метод обратного вызова. Если `dueTime` равен-1, метод обратного вызова не вызывается; таймер отключен, но можно включить путем вызова <xref:System.Threading.Timer.Change%2A> и указав положительное значение для `dueTime`.  
  
 Если `period` равен нулю (0) или минус один (-1) миллисекунду, и `dueTime` положительно, метод обратного вызова вызывается один раз; периодическое поведение таймера отключена, но можно включить путем вызова <xref:System.Threading.Timer.Change%2A> и указав значение больше ноль для `period`.  
  
 <xref:System.Threading.Timer.Change%2A> Метод может вызываться из <xref:System.Threading.TimerCallback> делегировать.  
  
   
  
## Examples  
 В следующем примере кода показано, как запустить `Timer` и после заданного количества вызовов, изменение периода.  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" /> Уже был удален.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> Или <paramref name="period" /> параметр, в миллисекундах, имеет меньше -1.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="dueTime" /> Или <paramref name="period" /> параметр, в миллисекундах больше 4294967294.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">таймеры</related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As UInteger, period As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="member this.Change : uint32 * uint32 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="period" Type="System.UInt32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dueTime">Количество времени должно пройти до вызова метода обратного вызова при <see cref="T:System.Threading.Timer" /> было создано, в миллисекундах. Укажите <see cref="F:System.Threading.Timeout.Infinite" /> чтобы допустить повторный запуск таймера. Задайте значение ноль (0) для немедленного перезапуска таймера.</param>
        <param name="period">Временной интервал между вызовами метода обратного вызова, определенный <see cref="T:System.Threading.Timer" /> было создано, в миллисекундах. Укажите <see cref="F:System.Threading.Timeout.Infinite" /> для отключения периодической сигнализации.</param>
        <summary>Меняет время запуска и интервал между вызовами метода таймера, используя 32-разрядные целые числа без знака для измерения временных интервалов.</summary>
        <returns><see langword="true" /> Если таймер успешно обновлен; в противном случае <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод обратного вызова вызывается один раз после `dueTime` истекает и затем каждый раз интервал времени, заданный в параметре `period` пройдет указанное время.  
  
 Если `dueTime` равно нулю (0), немедленно вызывается метод обратного вызова. Если `dueTime` — <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, метод обратного вызова не вызывается; таймер отключен, но можно включить путем вызова <xref:System.Threading.Timer.Change%2A> и указав положительное значение для `dueTime`.  
  
 Если `period` равно нулю (0) или <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, и `dueTime` не <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, метод обратного вызова вызывается один раз; периодическое поведение таймера отключена, но можно включить путем вызова <xref:System.Threading.Timer.Change%2A> и указав положительное значение для `period`.  
  
 <xref:System.Threading.Timer.Change%2A> Метод может вызываться из <xref:System.Threading.TimerCallback> делегировать.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" /> Уже был удален.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">таймеры</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Освобождает все ресурсы, используемые текущим экземпляром <see cref="T:System.Threading.Timer" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="timer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает все ресурсы, используемые текущим экземпляром <see cref="T:System.Threading.Timer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызов `Dispose` позволяет ресурсы, используемые <xref:System.Threading.Timer> перераспределить для других целей. Дополнительные сведения о `Dispose`, см. в разделе [очистки неуправляемых ресурсов](~/docs/standard/garbage-collection/unmanaged.md).  
  
> [!NOTE]
>  Обратные вызовы может возникнуть после <xref:System.Threading.Timer.Dispose> перегруженный метод был вызван, так как таймер ставит в очередь обратные вызовы для выполнения по потокам пулов потоков. Можно использовать <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> перегруженный метод для ожидания до завершения всех ответных вызовов.  
  
   
  
## Examples  
 В следующем примере кода показано, как освободить ресурсы, удерживаемые `Timer`.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/timers.md">таймеры</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public bool Dispose (System.Threading.WaitHandle notifyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Dispose(class System.Threading.WaitHandle notifyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dispose (notifyObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Dispose(System::Threading::WaitHandle ^ notifyObject);" />
      <MemberSignature Language="F#" Value="member this.Dispose : System.Threading.WaitHandle -&gt; bool" Usage="timer.Dispose notifyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyObject" Type="System.Threading.WaitHandle" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="notifyObject"><see cref="T:System.Threading.WaitHandle" /> Должен получить сигнал при <see langword="Timer" /> был удален.</param>
        <summary>Освобождает все ресурсы, используемые текущим экземпляром <see cref="T:System.Threading.Timer" /> и передает сигнал, когда таймер удаляется.</summary>
        <returns><see langword="true" /> Если функция выполнилась успешно; в противном случае <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызов `Dispose` позволяет ресурсы, используемые <xref:System.Threading.Timer> перераспределить для других целей. Дополнительные сведения о `Dispose`, см. в разделе [очистки неуправляемых ресурсов](~/docs/standard/garbage-collection/unmanaged.md).  
  
 После завершения этого метода, он сообщает о <xref:System.Threading.WaitHandle> определяется `notifyObject` параметра. Используйте эту перегрузку <xref:System.Threading.Timer.Dispose%2A> метод, если вы хотите иметь возможность заблокировать, пока не будете уверены, что таймер был удален. Таймер не удаляется до завершения всех обратных вызовов в очереди.  
  
> [!NOTE]
>  Если обратный вызов использует <xref:System.Threading.Timer.Change%2A> метод, чтобы задать `dueTime` параметра равным нулю, может возникнуть состояние гонки при <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> вызове перегрузки метода: Если таймер ставит в очередь новые обратного вызова перед <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> перегрузку метода обнаруживает, что в очереди нет обратных вызовов, <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> продолжает блокировать; в противном случае таймер удаляется, хотя новый обратный вызов помещается в очередь и это <xref:System.ObjectDisposedException> возникает, когда новые вызовы обратного вызова <xref:System.Threading.Timer.Change%2A> метод.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="notifyObject" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">таймеры</related>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="timer.DisposeAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Timer ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="timer.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Позволяет объекту попытаться освободить ресурсы и выполнить другие операции очистки, перед тем как он будет уничтожен во время сборки мусора.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>