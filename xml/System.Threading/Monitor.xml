<Type Name="Monitor" FullName="System.Threading.Monitor">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3bfaa4f0ca1c607a6d8ac9414307092efd5b281a" /><Meta Name="ms.sourcegitcommit" Value="bc24a3ba616ee1df8b858f9400cae4f058ea3a7e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="06/19/2019" /><Meta Name="ms.locfileid" Value="67243377" /></Metadata><TypeSignature Language="C#" Value="public static class Monitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Monitor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Monitor" />
  <TypeSignature Language="VB.NET" Value="Public Class Monitor" />
  <TypeSignature Language="C++ CLI" Value="public ref class Monitor abstract sealed" />
  <TypeSignature Language="F#" Value="type Monitor = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="43949-101">Предоставляет механизм для синхронизации доступа к объектам.</span><span class="sxs-lookup"><span data-stu-id="43949-101">Provides a mechanism that synchronizes access to objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43949-102"><xref:System.Threading.Monitor> Класс позволяет синхронизировать доступ к области кода путем установки и снятия блокировки определенного объекта путем вызова <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>, и <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> методы.</span><span class="sxs-lookup"><span data-stu-id="43949-102">The <xref:System.Threading.Monitor> class allows you to synchronize access to a region of code by taking and releasing a lock on a particular object by calling the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="43949-103">Объект блокировки предоставляют возможность ограничить доступ к блоку кода, обычно называется критической секции.</span><span class="sxs-lookup"><span data-stu-id="43949-103">Object locks provide the ability to restrict access to a block of code, commonly called a critical section.</span></span> <span data-ttu-id="43949-104">Хотя поток владеет блокировкой для объекта, ни один поток может получить блокировку.</span><span class="sxs-lookup"><span data-stu-id="43949-104">While a thread owns the lock for an object, no other thread can acquire that lock.</span></span> <span data-ttu-id="43949-105">Можно также использовать <xref:System.Threading.Monitor> класс, чтобы гарантировать, что ни один поток может получить доступ к части приложения код, выполняемый владельцем блокировки, пока другой поток не будет выполнять код, используя другой объект с блокировкой.</span><span class="sxs-lookup"><span data-stu-id="43949-105">You can also use the <xref:System.Threading.Monitor> class to ensure that no other thread is allowed to access a section of application code being executed by the lock owner, unless the other thread is executing the code using a different locked object.</span></span>  
  
 <span data-ttu-id="43949-106">Содержание этой статьи</span><span class="sxs-lookup"><span data-stu-id="43949-106">In this article:</span></span>  
  
 <span data-ttu-id="43949-107">[Класс Monitor: Общие сведения о](#Overview) </span><span class="sxs-lookup"><span data-stu-id="43949-107">[The Monitor class: An overview](#Overview) </span></span>  
 <span data-ttu-id="43949-108">[Объект блокировки](#Lock) </span><span class="sxs-lookup"><span data-stu-id="43949-108">[The lock object](#Lock) </span></span>  
 <span data-ttu-id="43949-109">[Критический раздел](#CriticalSection) </span><span class="sxs-lookup"><span data-stu-id="43949-109">[The critical section](#CriticalSection) </span></span>  
 <span data-ttu-id="43949-110">[Ожидания, Pulse и PulseAll](#Pulse) </span><span class="sxs-lookup"><span data-stu-id="43949-110">[Pulse, PulseAll, and Wait](#Pulse) </span></span>  
 [<span data-ttu-id="43949-111">Мониторы и дескрипторы ожидания</span><span class="sxs-lookup"><span data-stu-id="43949-111">Monitors and wait handles</span></span>](#WaitHandles)  
  
<a name="Overview"></a>   
## <a name="the-monitor-class-an-overview"></a><span data-ttu-id="43949-112">Класс Monitor: Общие сведения о</span><span class="sxs-lookup"><span data-stu-id="43949-112">The Monitor class: An overview</span></span>  
 <span data-ttu-id="43949-113"><xref:System.Threading.Monitor> обладает следующими функциями:</span><span class="sxs-lookup"><span data-stu-id="43949-113"><xref:System.Threading.Monitor> has the following features:</span></span>  
  
-   <span data-ttu-id="43949-114">Он связан с объектом по требованию.</span><span class="sxs-lookup"><span data-stu-id="43949-114">It is associated with an object on demand.</span></span>  
  
-   <span data-ttu-id="43949-115">Отменяется, то есть могут вызываться непосредственно из любого контекста.</span><span class="sxs-lookup"><span data-stu-id="43949-115">It is unbound, which means it can be called directly from any context.</span></span>  
  
-   <span data-ttu-id="43949-116">Экземпляр <xref:System.Threading.Monitor> класс не может быть создан; методы <xref:System.Threading.Monitor> класса являются статическими.</span><span class="sxs-lookup"><span data-stu-id="43949-116">An instance of the <xref:System.Threading.Monitor> class cannot be created; the methods of the <xref:System.Threading.Monitor> class are all static.</span></span> <span data-ttu-id="43949-117">Каждый метод передается синхронизированный объект, который управляет доступом к критической секции.</span><span class="sxs-lookup"><span data-stu-id="43949-117">Each method is passed the synchronized object that controls access to the critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43949-118">Используйте <xref:System.Threading.Monitor> класс для блокировки объектов, отличных от строк (то есть ссылочные типы, отличные от <xref:System.String>), не типы значений.</span><span class="sxs-lookup"><span data-stu-id="43949-118">Use the <xref:System.Threading.Monitor> class to lock objects other than strings (that is, reference types other than <xref:System.String>), not value types.</span></span> <span data-ttu-id="43949-119">Дополнительные сведения см. в разделе перегрузок <xref:System.Threading.Monitor.Enter%2A> метод и [объект блокировки](#Lock) разделе этой статьи.</span><span class="sxs-lookup"><span data-stu-id="43949-119">For details, see the overloads of the <xref:System.Threading.Monitor.Enter%2A> method and [The lock object](#Lock) section later in this article.</span></span>  
  
 <span data-ttu-id="43949-120">В следующей таблице описаны действия, которые может быть занят потоков, которые обращаются к Синхронизируемые объекты:</span><span class="sxs-lookup"><span data-stu-id="43949-120">The following table describes the actions that can be taken by threads that access synchronized objects:</span></span>  
  
|<span data-ttu-id="43949-121">Действие</span><span class="sxs-lookup"><span data-stu-id="43949-121">Action</span></span>|<span data-ttu-id="43949-122">Описание</span><span class="sxs-lookup"><span data-stu-id="43949-122">Description</span></span>|  
|------------|-----------------|  
|<span data-ttu-id="43949-123"><xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A></span><span class="sxs-lookup"><span data-stu-id="43949-123"><xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A></span></span>|<span data-ttu-id="43949-124">Получает блокировку для объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-124">Acquires a lock for an object.</span></span> <span data-ttu-id="43949-125">Это действие также отмечает начало критической секции.</span><span class="sxs-lookup"><span data-stu-id="43949-125">This action also marks the beginning of a critical section.</span></span> <span data-ttu-id="43949-126">Ни один поток может входить в критический раздел, если он выполняет инструкции в критической секции, используя другой объект с блокировкой.</span><span class="sxs-lookup"><span data-stu-id="43949-126">No other thread can enter the critical section unless it is executing the instructions in the critical section using a different locked object.</span></span>|  
|<xref:System.Threading.Monitor.Wait%2A>|<span data-ttu-id="43949-127">Освобождает блокировку объекта, чтобы разрешить другим потокам для блокировки и доступа к объекту.</span><span class="sxs-lookup"><span data-stu-id="43949-127">Releases the lock on an object in order to permit other threads to lock and access the object.</span></span> <span data-ttu-id="43949-128">Вызывающий поток ожидает, пока другой поток обращается к объекту.</span><span class="sxs-lookup"><span data-stu-id="43949-128">The calling thread waits while another thread accesses the object.</span></span> <span data-ttu-id="43949-129">Сигналы Pulse используются для уведомления об изменении состояния объекта, для потоков в состоянии ожидания.</span><span class="sxs-lookup"><span data-stu-id="43949-129">Pulse signals are used to notify waiting threads about changes to an object's state.</span></span>|  
|<span data-ttu-id="43949-130"><xref:System.Threading.Monitor.Pulse%2A> (сигнал), <xref:System.Threading.Monitor.PulseAll%2A></span><span class="sxs-lookup"><span data-stu-id="43949-130"><xref:System.Threading.Monitor.Pulse%2A> (signal), <xref:System.Threading.Monitor.PulseAll%2A></span></span>|<span data-ttu-id="43949-131">Отправляет сигнал к одной или нескольким ожидающим потокам.</span><span class="sxs-lookup"><span data-stu-id="43949-131">Sends a signal to one or more waiting threads.</span></span> <span data-ttu-id="43949-132">Сигнал уведомляет ожидающий поток, изменения состояния объекта с блокировкой, и владелец блокировки готов для снятия блокировки.</span><span class="sxs-lookup"><span data-stu-id="43949-132">The signal notifies a waiting thread that the state of the locked object has changed, and the owner of the lock is ready to release the lock.</span></span> <span data-ttu-id="43949-133">Ожидающий поток помещается в очередь готовности объекта таким образом, он может в конечном счете получить блокировку для объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-133">The waiting thread is placed in the object's ready queue so that it might eventually receive the lock for the object.</span></span> <span data-ttu-id="43949-134">Когда поток получает блокировку, его можно проверить новое состояние объекта см. в разделе, если был достигнут требуемое состояние.</span><span class="sxs-lookup"><span data-stu-id="43949-134">Once the thread has the lock, it can check the new state of the object to see if the required state has been reached.</span></span>|  
|<xref:System.Threading.Monitor.Exit%2A>|<span data-ttu-id="43949-135">Освобождает блокировку объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-135">Releases the lock on an object.</span></span> <span data-ttu-id="43949-136">Это действие также отмечает конец критической секции, защищенной объектом с блокировкой.</span><span class="sxs-lookup"><span data-stu-id="43949-136">This action also marks the end of a critical section protected by the locked object.</span></span>|  
  
 <span data-ttu-id="43949-137">Начиная с версии [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], существует два набора из перегрузок для <xref:System.Threading.Monitor.Enter%2A> и <xref:System.Threading.Monitor.TryEnter%2A> методы.</span><span class="sxs-lookup"><span data-stu-id="43949-137">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], there are two sets of overloads for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.TryEnter%2A> methods.</span></span> <span data-ttu-id="43949-138">Имеет один набор перегрузок `ref` (в C#) или `ByRef` (в Visual Basic) <xref:System.Boolean> параметр, который автоматически устанавливается как `true` Если блокировки, даже если возникает исключение при получении блокировки.</span><span class="sxs-lookup"><span data-stu-id="43949-138">One set of overloads has a `ref` (in C#) or `ByRef` (in Visual Basic) <xref:System.Boolean> parameter that is atomically set to `true` if the lock is acquired, even if an exception is thrown when acquiring the lock.</span></span> <span data-ttu-id="43949-139">Используйте эти перегрузки, если крайне важно для снятия блокировки во всех случаях, даже в том случае, если ресурсы, которые защита блокировки может оказаться в несогласованном состоянии.</span><span class="sxs-lookup"><span data-stu-id="43949-139">Use these overloads if it is critical to release the lock in all cases, even when the resources the lock is protecting might not be in a consistent state.</span></span>  
  
<a name="Lock"></a>   
## <a name="the-lock-object"></a><span data-ttu-id="43949-140">Объект блокировки</span><span class="sxs-lookup"><span data-stu-id="43949-140">The lock object</span></span>  
 <span data-ttu-id="43949-141">Класс Monitor состоит из `static` (в C#) или `Shared` (в Visual Basic) методы, которые работают на объект, который управляет доступом к критической секции.</span><span class="sxs-lookup"><span data-stu-id="43949-141">The Monitor class consists of `static` (in C#) or  `Shared` (in Visual Basic) methods that operate on an object that controls access to the critical section.</span></span>  <span data-ttu-id="43949-142">Для каждого синхронизированного объекта сохраняется следующие сведения:</span><span class="sxs-lookup"><span data-stu-id="43949-142">The following information is maintained for each synchronized object:</span></span>  
  
-   <span data-ttu-id="43949-143">Ссылка на поток, удерживающий блокировку в настоящее время.</span><span class="sxs-lookup"><span data-stu-id="43949-143">A reference to the thread that currently holds the lock.</span></span>  
  
-   <span data-ttu-id="43949-144">Ссылка на очередь готовности, в которой находятся потоки, готовые к получению блокировки.</span><span class="sxs-lookup"><span data-stu-id="43949-144">A reference to a ready queue, which contains the threads that are ready to obtain the lock.</span></span>  
  
-   <span data-ttu-id="43949-145">Ссылка на очередь ожидания, в которой находятся потоки, ожидающие получать уведомления об изменении состояния объекта с блокировкой.</span><span class="sxs-lookup"><span data-stu-id="43949-145">A reference to a waiting queue, which contains the threads that are waiting for notification of a change in the state of the locked object.</span></span>  
  
 <span data-ttu-id="43949-146"><xref:System.Threading.Monitor> блокирует объекты (то есть ссылочные типы), а не типы значений.</span><span class="sxs-lookup"><span data-stu-id="43949-146"><xref:System.Threading.Monitor> locks objects (that is, reference types), not value types.</span></span> <span data-ttu-id="43949-147">Хотя можно передать тип значения в <xref:System.Threading.Monitor.Enter%2A> и <xref:System.Threading.Monitor.Exit%2A>, он упаковывается отдельно для каждого вызова.</span><span class="sxs-lookup"><span data-stu-id="43949-147">While you can pass a value type to <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, it is boxed separately for each call.</span></span> <span data-ttu-id="43949-148">Поскольку при каждом вызове создается отдельный объект, <xref:System.Threading.Monitor.Enter%2A> никогда не выполняет блокировку, а код, который он предположительно защищает, на самом деле не синхронизируется.</span><span class="sxs-lookup"><span data-stu-id="43949-148">Since each call creates a separate object, <xref:System.Threading.Monitor.Enter%2A> never blocks, and the code it is supposedly protecting is not really synchronized.</span></span> <span data-ttu-id="43949-149">Кроме того, объект, переданный в <xref:System.Threading.Monitor.Exit%2A>, отличается от объекта, переданного в <xref:System.Threading.Monitor.Enter%2A>, поэтому <xref:System.Threading.Monitor> вызывает исключение <xref:System.Threading.SynchronizationLockException> с сообщением «Для не синхронизированного блока кода вызван метод синхронизации объектов».</span><span class="sxs-lookup"><span data-stu-id="43949-149">In addition, the object passed to <xref:System.Threading.Monitor.Exit%2A> is different from the object passed to <xref:System.Threading.Monitor.Enter%2A>, so <xref:System.Threading.Monitor> throws <xref:System.Threading.SynchronizationLockException> exception with the message "Object synchronization method was called from an unsynchronized block of code."</span></span>  
  
 <span data-ttu-id="43949-150">Приведенный ниже пример иллюстрирует данную проблему.</span><span class="sxs-lookup"><span data-stu-id="43949-150">The following example illustrates this problem.</span></span> <span data-ttu-id="43949-151">Он запускает десять задач, каждая из которых просто бездействует в течение 250 миллисекунд.</span><span class="sxs-lookup"><span data-stu-id="43949-151">It launches ten tasks, each of which just sleeps for 250 milliseconds.</span></span> <span data-ttu-id="43949-152">Затем каждая задача обновляет переменную счетчика `nTasks`, который предназначен для подсчета количества фактически запущенных и выполненных задач.</span><span class="sxs-lookup"><span data-stu-id="43949-152">Each task then updates a counter variable, `nTasks`, which is intended to count the number of tasks that actually launched and executed.</span></span> <span data-ttu-id="43949-153">Поскольку `nTasks` является глобальной переменной, которая может обновляться несколькими задачами одновременно, используется монитор, защищающий ее от одновременного изменения несколькими задачами.</span><span class="sxs-lookup"><span data-stu-id="43949-153">Because `nTasks` is a global variable that can be updated by multiple tasks simultaneously, a monitor is used to protect it from simultaneous modification by multiple tasks.</span></span> <span data-ttu-id="43949-154">Тем не менее, как показывают выходные данные в примере, каждая из задач вызывает исключение <xref:System.Threading.SynchronizationLockException>.</span><span class="sxs-lookup"><span data-stu-id="43949-154">However, as the output from the example shows, each of the tasks throws a <xref:System.Threading.SynchronizationLockException> exception.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#2](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badlock1.cs#2)]
 [!code-vb[Conceptual.Monitors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badlock1.vb#2)]  
  
 <span data-ttu-id="43949-155">Каждая задача вызывает исключение <xref:System.Threading.SynchronizationLockException> из-за того, что переменная `nTasks` упаковывается перед вызовом метода <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> в каждой задаче.</span><span class="sxs-lookup"><span data-stu-id="43949-155">Each task throws a <xref:System.Threading.SynchronizationLockException> exception because the `nTasks` variable is boxed before the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method in each task.</span></span> <span data-ttu-id="43949-156">Другими словами, в каждый вызов метода передается отдельная переменная, которая независима от остальных.</span><span class="sxs-lookup"><span data-stu-id="43949-156">In other words, each method call is passed a separate variable that is independent of the others.</span></span> <span data-ttu-id="43949-157">`nTasks` снова упаковывается в вызове метода <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="43949-157">`nTasks` is boxed again in the call to the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="43949-158">И снова при этом создается десять новых упакованных переменных, которые не зависят друг от друга, `nTasks`, и десять упакованных переменных, созданных при вызове метода <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="43949-158">Once again, this creates ten new boxed variables, which are independent of each other, `nTasks`, and the ten boxed variables created in the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="43949-159">Затем вызывается исключение, поскольку наш код пытается снять блокировку для вновь созданной переменной, которая ранее не была заблокирована.</span><span class="sxs-lookup"><span data-stu-id="43949-159">The exception is thrown, then, because our code is attempting to release a lock on a newly created variable that was not previously locked.</span></span>  
  
 <span data-ttu-id="43949-160">Хотя можно упаковать переменную типа значения перед вызовом <xref:System.Threading.Monitor.Enter%2A> и <xref:System.Threading.Monitor.Exit%2A>, как показано в следующем примере, и передать тот же упакованный объект в оба метода, такой подход не дает никаких преимуществ.</span><span class="sxs-lookup"><span data-stu-id="43949-160">Although you can box a value type variable before calling <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, as shown in the following example, and pass the same boxed object to both methods, there is no advantage to doing this.</span></span> <span data-ttu-id="43949-161">Изменения неупакованной переменной не отражаются в упакованной копии, и возможность изменения значения упакованной копии отсутствует.</span><span class="sxs-lookup"><span data-stu-id="43949-161">Changes to the unboxed variable are not reflected in the boxed copy, and there is no way to change the value of the boxed copy.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#3](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badbox1.cs#3)]
 [!code-vb[Conceptual.Monitors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badbox1.vb#3)]  
  
 <span data-ttu-id="43949-162">При выборе объекта для синхронизации, вы должны блокировать только закрытые или внутренние объекты.</span><span class="sxs-lookup"><span data-stu-id="43949-162">When selecting an object on which to synchronize, you should lock only on private or internal objects.</span></span> <span data-ttu-id="43949-163">Блокировки внешних объектов может привести к взаимоблокировок, так как несвязанный код может выбрать те же объекты блокировки для разных целей.</span><span class="sxs-lookup"><span data-stu-id="43949-163">Locking on external objects might result in deadlocks, because unrelated code could choose the same objects to lock on for different purposes.</span></span>  
  
 <span data-ttu-id="43949-164">Обратите внимание, что вы можете синхронизировать объекта в нескольких доменах приложений, если объект, используемый для блокировки является производным от <xref:System.MarshalByRefObject>.</span><span class="sxs-lookup"><span data-stu-id="43949-164">Note that you can synchronize on an object in multiple application domains if the object used for the lock derives from <xref:System.MarshalByRefObject>.</span></span>  
  
<a name="CriticalSection"></a>   
## <a name="the-critical-section"></a><span data-ttu-id="43949-165">Критический раздел</span><span class="sxs-lookup"><span data-stu-id="43949-165">The critical section</span></span>  
 <span data-ttu-id="43949-166">Используйте <xref:System.Threading.Monitor.Enter%2A> и <xref:System.Threading.Monitor.Exit%2A> методов, чтобы пометить начало и конец критической секции.</span><span class="sxs-lookup"><span data-stu-id="43949-166">Use the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods to mark the beginning and end of a critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43949-167">Функциональные возможности, предоставляемые <xref:System.Threading.Monitor.Enter%2A> и <xref:System.Threading.Monitor.Exit%2A> методы будут идентичны данным, предоставляемые [блокировки](~/docs/csharp/language-reference/keywords/lock-statement.md) инструкции на языке C# и [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) инструкции в Visual Basic, за исключением случаев, языковые конструкции wrap <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType> перегрузку метода и <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> метод в `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="43949-167">The functionality provided by the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods is identical to that provided by the [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement in C# and the [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement in Visual Basic, except that the language constructs wrap the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType> method overload and the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method in a `try`…`finally`</span></span> <span data-ttu-id="43949-168">блок, чтобы высвободить монитор.</span><span class="sxs-lookup"><span data-stu-id="43949-168">block to ensure that the monitor is released.</span></span>  
  
 <span data-ttu-id="43949-169">Если критический раздел представляет собой набор смежных инструкции, то блокировка, введенная оператором <xref:System.Threading.Monitor.Enter%2A> метод гарантирует, что только один поток может выполнять вложенный код с заблокированного объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-169">If the critical section is a set of contiguous instructions, then the lock acquired by the <xref:System.Threading.Monitor.Enter%2A> method guarantees that only a single thread can execute the enclosed code with the locked object.</span></span> <span data-ttu-id="43949-170">В этом случае мы рекомендуем поместить этот код в `try` блокировку и вызвать <xref:System.Threading.Monitor.Exit%2A> метод в `finally` блока.</span><span class="sxs-lookup"><span data-stu-id="43949-170">In this case, we recommend that you place that code in a `try` block and place the call to the <xref:System.Threading.Monitor.Exit%2A> method in a `finally` block.</span></span> <span data-ttu-id="43949-171">Это гарантирует снятие блокировки даже при возникновении исключения.</span><span class="sxs-lookup"><span data-stu-id="43949-171">This ensures that the lock is released even if an exception occurs.</span></span> <span data-ttu-id="43949-172">В следующем фрагменте кода показана схема работы.</span><span class="sxs-lookup"><span data-stu-id="43949-172">The following code fragment illustrates this pattern.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#2)]
 [!code-vb[System.Threading.Monitor.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#2)]  
  
 <span data-ttu-id="43949-173">Это средство обычно используется для синхронизации доступа к статический метод или метод экземпляра класса.</span><span class="sxs-lookup"><span data-stu-id="43949-173">This facility is typically used to synchronize access to a static or instance method of a class.</span></span>  
  
 <span data-ttu-id="43949-174">Если критический раздел охватывает весь метод, средство блокировки можно сделать, поместив <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType> на метод, с указанием <xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized> значение в конструкторе класса <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="43949-174">If a critical section spans an entire method, the locking facility can be achieved by placing the <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType> on the method, and specifying the <xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized> value in the constructor of <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>.</span></span> <span data-ttu-id="43949-175">При использовании этого атрибута <xref:System.Threading.Monitor.Enter%2A> и <xref:System.Threading.Monitor.Exit%2A> вызовы методов не требуются.</span><span class="sxs-lookup"><span data-stu-id="43949-175">When you use this attribute, the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> method calls are not needed.</span></span> <span data-ttu-id="43949-176">В следующем фрагменте кода показан этот шаблон:</span><span class="sxs-lookup"><span data-stu-id="43949-176">The following code fragment illustrates this pattern:</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#3)]
 [!code-vb[System.Threading.Monitor.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#3)]  
  
 <span data-ttu-id="43949-177">Обратите внимание на то, что данный атрибут приводит текущий поток удерживает блокировку до выполнения метода; Если блокировка может быть освобождена раньше, использовать <xref:System.Threading.Monitor> класса C# [блокировки](~/docs/csharp/language-reference/keywords/lock-statement.md) инструкции или Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) оператора в методе вместо атрибута.</span><span class="sxs-lookup"><span data-stu-id="43949-177">Note that the attribute causes the current thread to hold the lock until the method returns; if the lock can be released sooner, use the <xref:System.Threading.Monitor> class, the C# [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement, or the Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement inside of the method instead of the attribute.</span></span>  
  
 <span data-ttu-id="43949-178">Хотя для <xref:System.Threading.Monitor.Enter%2A> и <xref:System.Threading.Monitor.Exit%2A> инструкций, блокировать и освободить объект заданного пересекать члена или границы класса или оба, это не рекомендуется.</span><span class="sxs-lookup"><span data-stu-id="43949-178">While it is possible for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> statements that lock and release a given object to cross member or class boundaries or both, this practice is not recommended.</span></span>  
  
<a name="Pulse"></a>   
## <a name="pulse-pulseall-and-wait"></a><span data-ttu-id="43949-179">Ожидания, Pulse и PulseAll</span><span class="sxs-lookup"><span data-stu-id="43949-179">Pulse, PulseAll, and Wait</span></span>  
 <span data-ttu-id="43949-180">Как только поток владеет блокировкой и он перешел критический раздел, который защищает блокировки, оно может вызвать <xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>, и <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> методы.</span><span class="sxs-lookup"><span data-stu-id="43949-180">Once a thread owns the lock and has entered the critical section that the lock protects, it can call the <xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="43949-181">Когда поток, содержащий вызовы блокировки <xref:System.Threading.Monitor.Wait%2A>, блокировка снимается, и поток добавляется в очередь ожидания синхронизированный объект.</span><span class="sxs-lookup"><span data-stu-id="43949-181">When the thread that holds the lock calls <xref:System.Threading.Monitor.Wait%2A>, the lock is released and the thread is added to the waiting queue of the synchronized object.</span></span> <span data-ttu-id="43949-182">Первый поток в очередь готовности, если таковые имеются, получает блокировку и войдет в критический раздел.</span><span class="sxs-lookup"><span data-stu-id="43949-182">The first thread in the ready queue, if any, acquires the lock and enters the critical section.</span></span> <span data-ttu-id="43949-183">Поток перемещается из очереди ожидания в очередь готовности при либо <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType> (для перемещения, поток должен быть в голове очереди ожидания) или <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> метод вызывается на поток, удерживающий блокировку.</span><span class="sxs-lookup"><span data-stu-id="43949-183">The thread is moved from the waiting queue to the ready queue when either the <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType> (to be moved, the thread must be at the head of the waiting queue) or the <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> method is called by the thread that holds the lock.</span></span> <span data-ttu-id="43949-184"><xref:System.Threading.Monitor.Wait%2A> Возвращает метод, если вызывающий поток снова получает блокировку.</span><span class="sxs-lookup"><span data-stu-id="43949-184">The <xref:System.Threading.Monitor.Wait%2A> method returns when the calling thread reacquires the lock.</span></span>  
  
 <span data-ttu-id="43949-185">Когда поток, содержащий вызовы блокировки <xref:System.Threading.Monitor.Pulse%2A>, поток в голове очереди ожидания перемещается в очередь готовности.</span><span class="sxs-lookup"><span data-stu-id="43949-185">When the thread that holds the lock calls <xref:System.Threading.Monitor.Pulse%2A>, the thread at the head of the waiting queue is moved to the ready queue.</span></span> <span data-ttu-id="43949-186">Вызов <xref:System.Threading.Monitor.PulseAll%2A> метод перемещает все потоки из очереди ожидания в очередь готовности.</span><span class="sxs-lookup"><span data-stu-id="43949-186">The call to the <xref:System.Threading.Monitor.PulseAll%2A> method moves all the threads from the waiting queue to the ready queue.</span></span>  
  
<a name="WaitHandles"></a>   
## <a name="monitors-and-wait-handles"></a><span data-ttu-id="43949-187">Мониторы и дескрипторы ожидания</span><span class="sxs-lookup"><span data-stu-id="43949-187">Monitors and wait handles</span></span>  
 <span data-ttu-id="43949-188">Важно отметить различия между использованием <xref:System.Threading.Monitor> класс и <xref:System.Threading.WaitHandle> объектов.</span><span class="sxs-lookup"><span data-stu-id="43949-188">It is important to note the distinction between the use of the <xref:System.Threading.Monitor> class and <xref:System.Threading.WaitHandle> objects.</span></span>  
  
-   <span data-ttu-id="43949-189"><xref:System.Threading.Monitor> Класс полностью управляемые и полностью переносимые и может оказаться эффективнее с точки зрения требований к ресурсам операционной системы.</span><span class="sxs-lookup"><span data-stu-id="43949-189">The <xref:System.Threading.Monitor> class is purely managed, fully portable, and might be more efficient in terms of operating-system resource requirements.</span></span>  
  
-   <span data-ttu-id="43949-190">Объекты <xref:System.Threading.WaitHandle> представляют объекты ожидания операционной системы, удобны для синхронизации между управляемым и неуправляемым кодом и предоставляют некоторые расширенные функции операционной системы, например возможность ожидания сразу нескольких объектов.</span><span class="sxs-lookup"><span data-stu-id="43949-190"><xref:System.Threading.WaitHandle> objects represent operating-system waitable objects, are useful for synchronizing between managed and unmanaged code, and expose some advanced operating-system features like the ability to wait on many objects at once.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43949-191">В следующем примере используется <xref:System.Threading.Monitor> класс для синхронизации доступа к один экземпляр генератора случайных чисел, представленный <xref:System.Random> класса.</span><span class="sxs-lookup"><span data-stu-id="43949-191">The following example uses the <xref:System.Threading.Monitor> class to synchronize access to a single instance of a random number generator represented by the <xref:System.Random> class.</span></span> <span data-ttu-id="43949-192">В примере создается десять задач, каждая из которых выполняется асинхронно в потоке пула потоков.</span><span class="sxs-lookup"><span data-stu-id="43949-192">The example creates ten tasks, each of which executes asynchronously on a thread pool thread.</span></span> <span data-ttu-id="43949-193">Каждая задача создает 10 000 случайных чисел, вычисляет их среднее значение и обновляет две переменные на уровне процедуры, поддержки, общее количество случайных чисел и их сумму.</span><span class="sxs-lookup"><span data-stu-id="43949-193">Each task generates 10,000 random numbers, calculates their average, and updates two procedure-level variables that maintain a running total of the number of random numbers generated and their sum.</span></span> <span data-ttu-id="43949-194">После выполнения всех задач, эти два значения затем используются для вычисления общей среднее значение.</span><span class="sxs-lookup"><span data-stu-id="43949-194">After all tasks have executed, these two values are then used to calculate the overall mean.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/example1.cs#1)]
 [!code-vb[System.Threading.Monitor.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/example1.vb#1)]  
  
 <span data-ttu-id="43949-195">Они могут получать доступ из любой задачи, выполняемой в потоке пула потоков, доступ к переменным `total` и `n` также должна быть синхронизирована.</span><span class="sxs-lookup"><span data-stu-id="43949-195">Because they can be accessed from any task running on a thread pool thread, access to the variables `total` and `n` must also be synchronized.</span></span> <span data-ttu-id="43949-196"><xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType> Метод используется для этой цели.</span><span class="sxs-lookup"><span data-stu-id="43949-196">The <xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType> method is used for this purpose.</span></span>  
  
 <span data-ttu-id="43949-197">В следующем примере показано совместное использование <xref:System.Threading.Monitor> класс (реализуется с помощью `lock` или `SyncLock` языковой конструкции), <xref:System.Threading.Interlocked> класса и <xref:System.Threading.AutoResetEvent> класса.</span><span class="sxs-lookup"><span data-stu-id="43949-197">The following example demonstrates the combined use of the <xref:System.Threading.Monitor> class (implemented with the `lock` or `SyncLock` language construct), the <xref:System.Threading.Interlocked> class, and the <xref:System.Threading.AutoResetEvent> class.</span></span> <span data-ttu-id="43949-198">Он определяет два класса `internal` (в C#) или `Friend` (в Visual Basic), `SyncResource` и `UnSyncResource`, которые соответственно предоставляют синхронизированный и несинхронизированный доступ к ресурсу.</span><span class="sxs-lookup"><span data-stu-id="43949-198">It defines two `internal` (in C#) or `Friend` (in Visual Basic) classes, `SyncResource` and `UnSyncResource`, that respectively provide synchronized and unsynchronized access to a resource.</span></span> <span data-ttu-id="43949-199">Чтобы обеспечить демонстрацию в примере различия между синхронизированным и несинхронизированным доступом (что может случиться, если каждый вызов метода завершается быстро), метод включает случайную задержку: для потоков, свойство <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> которых имеет четное значение, метод вызывает <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> для введения задержки в 2 000 миллисекунд.</span><span class="sxs-lookup"><span data-stu-id="43949-199">To ensure that the example illustrates the difference between the synchronized and unsynchronized access (which could be the case if each method call completes rapidly), the method includes a random delay: for threads whose <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> property is even, the method calls <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> to introduce a delay of 2,000 milliseconds.</span></span> <span data-ttu-id="43949-200">Обратите внимание, что поскольку класс `SyncResource` не является общим, ни один клиентский код не выполняет блокировку в синхронизированном ресурсе; внутренний класс сам выполняет блокировку.</span><span class="sxs-lookup"><span data-stu-id="43949-200">Note that, because the `SyncResource` class is not public, none of the client code takes a lock on the synchronized resource; the internal class itself takes the lock.</span></span> <span data-ttu-id="43949-201">Это предотвращает блокировка общедоступного объекта вредоносным кодом.</span><span class="sxs-lookup"><span data-stu-id="43949-201">This prevents malicious code from taking a lock on a public object.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#1](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/source.cs#1)]
 [!code-vb[Conceptual.Monitors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/source.vb#1)]  
  
 <span data-ttu-id="43949-202">В примере определяется переменная `numOps`, задающая число потоков, которые будут пытаться получить доступ к ресурсу.</span><span class="sxs-lookup"><span data-stu-id="43949-202">The example defines a variable, `numOps`, that defines the number of threads that will attempt to access the resource.</span></span> <span data-ttu-id="43949-203">Поток приложения вызывает метод <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> для синхронизированного и несинхронизированного доступа по пять раз.</span><span class="sxs-lookup"><span data-stu-id="43949-203">The application thread calls the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method for synchronized and unsynchronized access five times each.</span></span> <span data-ttu-id="43949-204">Метод <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> имеет единственный параметр, делегат, который не принимает никаких параметров и не возвращает значений.</span><span class="sxs-lookup"><span data-stu-id="43949-204">The <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method has a single parameter, a delegate that accepts no parameters and returns no value.</span></span> <span data-ttu-id="43949-205">Для синхронизированного доступа он вызывает метод `SyncUpdateResource`; для несинхронизированного доступа он вызывает метод `UnSyncUpdateResource`.</span><span class="sxs-lookup"><span data-stu-id="43949-205">For synchronized access, it invokes the `SyncUpdateResource` method; for unsynchronized access, it invokes the `UnSyncUpdateResource` method.</span></span> <span data-ttu-id="43949-206">После каждого ряда вызовов метода поток приложения вызывает [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne*) метода, так что он блокируется до <xref:System.Threading.AutoResetEvent> экземпляр переводится в сигнальное состояние.</span><span class="sxs-lookup"><span data-stu-id="43949-206">After each set of method calls, the application thread calls the [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne*) method so that it blocks until the <xref:System.Threading.AutoResetEvent> instance is signaled.</span></span>  
  
 <span data-ttu-id="43949-207">Каждый вызов метода `SyncUpdateResource` вызывает внутренний метод `SyncResource.Access`, а затем вызывает метод <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> для уменьшения счетчика `numOps`.</span><span class="sxs-lookup"><span data-stu-id="43949-207">Each call to the `SyncUpdateResource` method calls the internal `SyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="43949-208"><xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> Метод используется для уменьшения счетчика, так как в противном случае нельзя быть уверенным, что второй поток будет обращаться к значению, прежде чем первый поток уменьшенное значение хранилось в переменной.</span><span class="sxs-lookup"><span data-stu-id="43949-208">The <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter, because otherwise you cannot be certain that a second thread will access the value before a first thread's decremented value has been stored in the variable.</span></span> <span data-ttu-id="43949-209">Когда последний синхронизированный рабочий поток уменьшит счетчик до нуля, указывающее, что все синхронизированные потоки завершили доступ к ресурсу, `SyncUpdateResource` вызовы методов <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> метод, который сигнализирует основному потоку продолжить выполнение.</span><span class="sxs-lookup"><span data-stu-id="43949-209">When the last synchronized worker thread decrements the counter to zero, indicating that all synchronized threads have completed accessing the resource, the `SyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="43949-210">Каждый вызов метода `UnSyncUpdateResource` вызывает внутренний метод `UnSyncResource.Access`, а затем вызывает метод <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> для уменьшения счетчика `numOps`.</span><span class="sxs-lookup"><span data-stu-id="43949-210">Each call to the `UnSyncUpdateResource` method calls the internal `UnSyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="43949-211">Опять же <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> метод используется для уменьшения счетчика, чтобы второй поток не обращаться к значение перед уменьшенное значение первого потока был назначен переменной.</span><span class="sxs-lookup"><span data-stu-id="43949-211">Once again, the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter to ensure that a second thread does not access the value before a first thread's decremented value has been assigned to the variable.</span></span> <span data-ttu-id="43949-212">Когда последний синхронизированный рабочий поток уменьшит счетчик до нуля, указывающее, что больше нет синхронизированных потоков требуется доступ к ресурсу, `UnSyncUpdateResource` вызовы методов <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> метод, который сигнализирует основному потоку продолжить выполнение .</span><span class="sxs-lookup"><span data-stu-id="43949-212">When the last unsynchronized worker thread decrements the counter to zero, indicating that no more unsynchronized threads need to access the resource, the `UnSyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="43949-213">Как показывает результат этого примера, синхронизированный доступ обеспечивает, что вызывающий поток выходит из защищенного ресурса до того, как другой поток получит доступ к этому ресурсу; каждый поток ожидает своего предшественника.</span><span class="sxs-lookup"><span data-stu-id="43949-213">As the output from  the example shows, synchronized access ensures that the calling thread exits the protected resource before another thread can access it; each thread waits on its predecessor.</span></span> <span data-ttu-id="43949-214">С другой стороны, без блокировки метод `UnSyncResource.Access` вызывается в том порядке, в котором потоки получают к нему доступ.</span><span class="sxs-lookup"><span data-stu-id="43949-214">On the other hand, without the lock, the `UnSyncResource.Access` method is called in the order in which threads reach it.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="43949-215">Данный тип потокобезопасен.</span><span class="sxs-lookup"><span data-stu-id="43949-215">This type is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Threading.Thread" />
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="43949-216">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="43949-216">Managed Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/threading-objects-and-features.md"><span data-ttu-id="43949-217">Объекты и функциональные возможности работы с потоками</span><span class="sxs-lookup"><span data-stu-id="43949-217">Threading Objects and Features</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="Enter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43949-218">Получает монопольную блокировку указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-218">Acquires an exclusive lock on a specified object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Enter : obj -&gt; unit" Usage="System.Threading.Monitor.Enter obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="43949-219">Объект, для которого получается блокировка монитора.</span><span class="sxs-lookup"><span data-stu-id="43949-219">The object on which to acquire the monitor lock.</span></span></param>
        <summary><span data-ttu-id="43949-220">Получает эксклюзивную блокировку указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-220">Acquires an exclusive lock on the specified object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43949-221">Используйте `Enter` получения <xref:System.Threading.Monitor> на объект, переданный в качестве параметра.</span><span class="sxs-lookup"><span data-stu-id="43949-221">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the parameter.</span></span> <span data-ttu-id="43949-222">Если другой поток выполнил `Enter` в объекте, но еще не выполнен соответствующий <xref:System.Threading.Monitor.Exit%2A>, текущий поток будет заблокирован, пока другой поток освобождает объект.</span><span class="sxs-lookup"><span data-stu-id="43949-222">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="43949-223">Допустимо для одного потока для вызова `Enter` более одного раза без их блокировки, однако одинаковое число `Exit` должно быть вызвано прежде, чем другие потоки, ожидающие объекта будут разблокированы.</span><span class="sxs-lookup"><span data-stu-id="43949-223">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="43949-224">Используйте <xref:System.Threading.Monitor> блокировка объектов (то есть ссылочные типы), не типы значений.</span><span class="sxs-lookup"><span data-stu-id="43949-224">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="43949-225">При передаче переменной типа значения к `Enter`, она трактуется как объект.</span><span class="sxs-lookup"><span data-stu-id="43949-225">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="43949-226">Если передать ту же переменную, чтобы `Enter` снова, она трактуется как отдельный объект, и поток не блокируется.</span><span class="sxs-lookup"><span data-stu-id="43949-226">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="43949-227">В данном случае код, `Monitor` является защищается не защищена.</span><span class="sxs-lookup"><span data-stu-id="43949-227">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="43949-228">Кроме того, при передаче переменной `Exit`, создается другой, отдельный объект.</span><span class="sxs-lookup"><span data-stu-id="43949-228">Furthermore, when you pass the variable to `Exit`, still another separate object is created.</span></span> <span data-ttu-id="43949-229">Так как объект, переданный `Exit` отличается от объекта, переданного `Enter`, `Monitor` вызывает <xref:System.Threading.SynchronizationLockException>.</span><span class="sxs-lookup"><span data-stu-id="43949-229">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="43949-230">Дополнительные сведения см. раздел общих понятий [мониторы](xref:System.Threading.Monitor).</span><span class="sxs-lookup"><span data-stu-id="43949-230">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="43949-231"><xref:System.Threading.Thread.Interrupt%2A> можно прервать потоков, ожидающих входа в `Monitor` объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-231"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="43949-232">Объект <xref:System.Threading.ThreadInterruptedException> будет создано.</span><span class="sxs-lookup"><span data-stu-id="43949-232">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
 <span data-ttu-id="43949-233">Использование языка C# `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="43949-233">Use a C# `try`…`finally`</span></span> <span data-ttu-id="43949-234">блок (`Try`...`Finally`</span><span class="sxs-lookup"><span data-stu-id="43949-234">block (`Try`…`Finally`</span></span> <span data-ttu-id="43949-235">в Visual Basic), чтобы убедитесь, что выпуск монитор, или использовать в C# `lock` инструкции (`SyncLock` в Visual Basic), который заключает в оболочку <xref:System.Threading.Monitor.Enter%2A> и <xref:System.Threading.Monitor.Exit%2A> методы в `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="43949-235">in Visual Basic) to ensure that you release the monitor, or use the C# `lock` statement (`SyncLock` statement in Visual Basic), which wraps the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods in a `try`…`finally`</span></span> <span data-ttu-id="43949-236">блок.</span><span class="sxs-lookup"><span data-stu-id="43949-236">block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43949-237">В следующем примере показано использование метода `Enter`.</span><span class="sxs-lookup"><span data-stu-id="43949-237">The following example demonstrates how to use the `Enter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="43949-238">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="43949-238">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="43949-239">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="43949-239">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member Enter : obj *  -&gt; unit" Usage="System.Threading.Monitor.Enter (obj, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="43949-240">Объект, в котором следует ожидать.</span><span class="sxs-lookup"><span data-stu-id="43949-240">The object on which to wait.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="43949-241">Результат попытки получить блокировку, переданную по ссылке.</span><span class="sxs-lookup"><span data-stu-id="43949-241">The result of the attempt to acquire the lock, passed by reference.</span></span> <span data-ttu-id="43949-242">Входное значение должно равняться <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="43949-242">The input must be <see langword="false" />.</span></span> <span data-ttu-id="43949-243">Выходное значение <see langword="true" />, если блокировка получена; в противном случае — выходное значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="43949-243">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span></span> <span data-ttu-id="43949-244">Выходное значение задается, даже если при попытке получить блокировку возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="43949-244">The output is set even if an exception occurs during the attempt to acquire the lock.</span></span>  
  
<span data-ttu-id="43949-245">Примечание. Если исключение не возникает, выходное значение этого метода всегда равно <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="43949-245">Note   If no exception occurs, the output of this method is always <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="43949-246">Получает монопольную блокировку указанного объекта и единым блоком задает значение, указывающее, была ли выполнена блокировка.</span><span class="sxs-lookup"><span data-stu-id="43949-246">Acquires an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43949-247">Используйте `Enter` получения <xref:System.Threading.Monitor> на объект, переданный в качестве `obj` параметра.</span><span class="sxs-lookup"><span data-stu-id="43949-247">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the `obj` parameter.</span></span> <span data-ttu-id="43949-248">Если другой поток выполнил `Enter` в объекте, но еще не выполнен соответствующий <xref:System.Threading.Monitor.Exit%2A>, текущий поток будет заблокирован, пока другой поток освобождает объект.</span><span class="sxs-lookup"><span data-stu-id="43949-248">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="43949-249">Допустимо для одного потока для вызова `Enter` более одного раза без их блокировки, однако одинаковое число `Exit` должно быть вызвано прежде, чем другие потоки, ожидающие объекта будут разблокированы.</span><span class="sxs-lookup"><span data-stu-id="43949-249">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="43949-250">Если не была выполнена блокировка, так как возникло исключение, переменная, указанная для `lockTaken` параметр `false` после завершения этого метода.</span><span class="sxs-lookup"><span data-stu-id="43949-250">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="43949-251">Это позволяет программе определить, во всех случаях необходимость для снятия блокировки.</span><span class="sxs-lookup"><span data-stu-id="43949-251">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span> <span data-ttu-id="43949-252">Если этот метод возвращает без создания исключения, переменная, указанная для `lockTaken` параметр всегда будет `true`, и нет необходимости, чтобы проверить его.</span><span class="sxs-lookup"><span data-stu-id="43949-252">If this method returns without throwing an exception, the variable specified for the `lockTaken` parameter is always `true`, and there is no need to test it.</span></span>  
  
 <span data-ttu-id="43949-253">Используйте <xref:System.Threading.Monitor> блокировка объектов (то есть ссылочные типы), не типы значений.</span><span class="sxs-lookup"><span data-stu-id="43949-253">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="43949-254">При передаче переменной типа значения к `Enter`, она трактуется как объект.</span><span class="sxs-lookup"><span data-stu-id="43949-254">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="43949-255">Если передать ту же переменную, чтобы `Enter` снова, она трактуется как отдельный объект, и поток не блокируется.</span><span class="sxs-lookup"><span data-stu-id="43949-255">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="43949-256">В данном случае код, `Monitor` является защищается не защищена.</span><span class="sxs-lookup"><span data-stu-id="43949-256">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="43949-257">Кроме того, при передаче переменной `Exit`, создается другой отдельный объект.</span><span class="sxs-lookup"><span data-stu-id="43949-257">Furthermore, when you pass the variable to `Exit`, another separate object is created.</span></span> <span data-ttu-id="43949-258">Так как объект, переданный `Exit` отличается от объекта, переданного `Enter`, `Monitor` вызывает <xref:System.Threading.SynchronizationLockException>.</span><span class="sxs-lookup"><span data-stu-id="43949-258">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="43949-259">Дополнительные сведения см. раздел общих понятий [мониторы](xref:System.Threading.Monitor).</span><span class="sxs-lookup"><span data-stu-id="43949-259">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="43949-260"><xref:System.Threading.Thread.Interrupt%2A> можно прервать потоков, ожидающих входа в `Monitor` объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-260"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="43949-261">Объект <xref:System.Threading.ThreadInterruptedException> будет создано.</span><span class="sxs-lookup"><span data-stu-id="43949-261">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43949-262">В следующем коде показано типичное использование <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29> перегрузки метода.</span><span class="sxs-lookup"><span data-stu-id="43949-262">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="43949-263">Эта перегрузка всегда устанавливает значение переменной, которая передается `ref` параметра (`ByRef` в Visual Basic) `lockTaken`, даже если метод создает исключение, поэтому значение переменной является надежным способом для проверки блокировки должен быть выпущен.</span><span class="sxs-lookup"><span data-stu-id="43949-263">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#2)]
 [!code-vb[System.Threading.Monitor.Enter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="43949-264">Входные данные для <paramref name="lockTaken" /> — <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="43949-264">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="43949-265">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="43949-265">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public static void Exit (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Exit(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Exit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Exit (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Exit(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Exit : obj -&gt; unit" Usage="System.Threading.Monitor.Exit obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="43949-266">Объект, блокировка которого освобождается.</span><span class="sxs-lookup"><span data-stu-id="43949-266">The object on which to release the lock.</span></span></param>
        <summary><span data-ttu-id="43949-267">Освобождает эксклюзивную блокировку указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-267">Releases an exclusive lock on the specified object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43949-268">Вызывающий поток должен быть владельцем блокировки на `obj` параметра.</span><span class="sxs-lookup"><span data-stu-id="43949-268">The calling thread must own the lock on the `obj` parameter.</span></span> <span data-ttu-id="43949-269">Если вызывающий поток владеет блокировкой для указанного объекта, а одинаковое число `Exit` и <xref:System.Threading.Monitor.Enter%2A> вызывает для объекта, то блокировка снимается.</span><span class="sxs-lookup"><span data-stu-id="43949-269">If the calling thread owns the lock on the specified object, and has made an equal number of `Exit` and <xref:System.Threading.Monitor.Enter%2A> calls for the object, then the lock is released.</span></span> <span data-ttu-id="43949-270">Если вызывающий поток не вызван `Exit` столько раз `Enter`, блокировка не снимается.</span><span class="sxs-lookup"><span data-stu-id="43949-270">If the calling thread has not invoked `Exit` as many times as `Enter`, the lock is not released.</span></span>  
  
 <span data-ttu-id="43949-271">Если другие потоки находятся в очереди готовности для объекта, блокировка снимается, один из потоков блокировку.</span><span class="sxs-lookup"><span data-stu-id="43949-271">If the lock is released and other threads are in the ready queue for the object, one of the threads acquires the lock.</span></span> <span data-ttu-id="43949-272">Если другие потоки находятся в очереди ожидания получения блокировки, они не перемещаются автоматически в очередь готовности, когда владелец блокировки вызывает `Exit`.</span><span class="sxs-lookup"><span data-stu-id="43949-272">If other threads are in the waiting queue waiting to acquire the lock, they are not automatically moved to the ready queue when the owner of the lock calls `Exit`.</span></span> <span data-ttu-id="43949-273">Чтобы переместить один или несколько ожидающих потоков в очередь готовности, вызовите <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A> перед вызовом `Exit`.</span><span class="sxs-lookup"><span data-stu-id="43949-273">To move one or more waiting threads into the ready queue, call <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> before invoking `Exit`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43949-274">В следующем примере показано использование метода `Exit`.</span><span class="sxs-lookup"><span data-stu-id="43949-274">The following example demonstrates how to use the `Exit` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="43949-275">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="43949-275">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="43949-276">Данный поток не владеет блокировкой для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-276">The current thread does not own the lock for the specified object.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="43949-277">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="43949-277">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsEntered">
      <MemberSignature Language="C#" Value="public static bool IsEntered (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEntered(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.IsEntered(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsEntered (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsEntered(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member IsEntered : obj -&gt; bool" Usage="System.Threading.Monitor.IsEntered obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="43949-278">Объект для тестирования.</span><span class="sxs-lookup"><span data-stu-id="43949-278">The object to test.</span></span></param>
        <summary><span data-ttu-id="43949-279">Определяет, является ли содержит ли текущий поток блокировку на заданном объекте.</span><span class="sxs-lookup"><span data-stu-id="43949-279">Determines whether the current thread holds the lock on the specified object.</span></span></summary>
        <returns><span data-ttu-id="43949-280">Значение <see langword="true" />, если текущий поток владеет блокировкой в <paramref name="obj" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="43949-280"><see langword="true" /> if the current thread holds the lock on <paramref name="obj" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43949-281">Этот метод работает только для блокировки, полученные с помощью методов класса <xref:System.Threading.Monitor> класса или с помощью C# `lock` инструкции или Visual Basic `SyncLock` инструкцию, которая реализуются с помощью <xref:System.Threading.Monitor>.</span><span class="sxs-lookup"><span data-stu-id="43949-281">This method works only for locks that are acquired by using the methods of the <xref:System.Threading.Monitor> class, or by using the C# `lock` statement or the Visual Basic `SyncLock` statement, which are implemented with <xref:System.Threading.Monitor>.</span></span>  
  
 <span data-ttu-id="43949-282">Используйте этот метод, с помощью средств диагностики, такие как <xref:System.Diagnostics.Debug.Assert%2A> метод и <xref:System.Diagnostics.Contracts.Contract> класс, для отладки проблем с блокировкой, включающие <xref:System.Threading.Monitor> класса.</span><span class="sxs-lookup"><span data-stu-id="43949-282">Use this method with diagnostic tools, such as the <xref:System.Diagnostics.Debug.Assert%2A> method and the <xref:System.Diagnostics.Contracts.Contract> class, to debug locking issues that involve the <xref:System.Threading.Monitor> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="43949-283"><paramref name="obj" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="43949-283"><paramref name="obj" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LockContentionCount">
      <MemberSignature Language="C#" Value="public static long LockContentionCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 LockContentionCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Monitor.LockContentionCount" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LockContentionCount As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property long LockContentionCount { long get(); };" />
      <MemberSignature Language="F#" Value="member this.LockContentionCount : int64" Usage="System.Threading.Monitor.LockContentionCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pulse">
      <MemberSignature Language="C#" Value="public static void Pulse (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Pulse(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Pulse(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Pulse (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Pulse(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Pulse : obj -&gt; unit" Usage="System.Threading.Monitor.Pulse obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="43949-284">Объект, которого ожидает поток.</span><span class="sxs-lookup"><span data-stu-id="43949-284">The object a thread is waiting for.</span></span></param>
        <summary><span data-ttu-id="43949-285">Уведомляет поток в очереди готовности об изменении состояния объекта с блокировкой.</span><span class="sxs-lookup"><span data-stu-id="43949-285">Notifies a thread in the waiting queue of a change in the locked object's state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43949-286">Только текущий владелец блокировки может подать сигнал объекта ожидания с помощью `Pulse`.</span><span class="sxs-lookup"><span data-stu-id="43949-286">Only the current owner of the lock can signal a waiting object using `Pulse`.</span></span>  
  
 <span data-ttu-id="43949-287">Поток, который в данный момент принадлежит блокировка указанного объекта вызывает этот метод для указания следующий поток в списке для блокировки.</span><span class="sxs-lookup"><span data-stu-id="43949-287">The thread that currently owns the lock on the specified object invokes this method to signal the next thread in line for the lock.</span></span> <span data-ttu-id="43949-288">При получении импульса, ожидающий поток перемещается в очередь готовности.</span><span class="sxs-lookup"><span data-stu-id="43949-288">Upon receiving the pulse, the waiting thread is moved to the ready queue.</span></span> <span data-ttu-id="43949-289">Когда поток, вызвавший метод `Pulse` освобождает блокировку, следующий поток в очереди готовности (который не обязательно является потоком, был импульс) получает блокировку.</span><span class="sxs-lookup"><span data-stu-id="43949-289">When the thread that invoked `Pulse` releases the lock, the next thread in the ready queue (which is not necessarily the thread that was pulsed) acquires the lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="43949-290"><xref:System.Threading.Monitor> Класс не сохраняет состояние, указывающее, что <xref:System.Threading.Monitor.Pulse%2A> был вызван метод.</span><span class="sxs-lookup"><span data-stu-id="43949-290">The <xref:System.Threading.Monitor> class does not maintain state indicating that the <xref:System.Threading.Monitor.Pulse%2A> method has been called.</span></span> <span data-ttu-id="43949-291">Таким образом при вызове метода <xref:System.Threading.Monitor.Pulse%2A> при отсутствии ожидающих потоков, следующий поток, который вызывает <xref:System.Threading.Monitor.Wait%2A> блоки так, как если <xref:System.Threading.Monitor.Pulse%2A> никогда не был вызван.</span><span class="sxs-lookup"><span data-stu-id="43949-291">Thus, if you call <xref:System.Threading.Monitor.Pulse%2A> when no threads are waiting, the next thread that calls <xref:System.Threading.Monitor.Wait%2A> blocks as if <xref:System.Threading.Monitor.Pulse%2A> had never been called.</span></span> <span data-ttu-id="43949-292">Если при использовании двух потоков <xref:System.Threading.Monitor.Pulse%2A> и <xref:System.Threading.Monitor.Wait%2A> для взаимодействия, это может привести к взаимоблокировке.</span><span class="sxs-lookup"><span data-stu-id="43949-292">If two threads are using <xref:System.Threading.Monitor.Pulse%2A> and <xref:System.Threading.Monitor.Wait%2A> to interact, this could result in a deadlock.</span></span> <span data-ttu-id="43949-293">Сравните это с поведением <xref:System.Threading.AutoResetEvent> класса: Если сигнал <xref:System.Threading.AutoResetEvent> путем вызова его <xref:System.Threading.EventWaitHandle.Set%2A> метод и нет потоков в состоянии ожидания <xref:System.Threading.AutoResetEvent> остается в сигнальном состоянии, пока поток не вызовет <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, или <xref:System.Threading.WaitHandle.WaitAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="43949-293">Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class: If you signal an <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, and there are no threads waiting, the <xref:System.Threading.AutoResetEvent> remains in a signaled state until a thread calls <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A>.</span></span> <span data-ttu-id="43949-294"><xref:System.Threading.AutoResetEvent> Освобождает этот поток и возвращается в состояние без сигнала.</span><span class="sxs-lookup"><span data-stu-id="43949-294">The <xref:System.Threading.AutoResetEvent> releases that thread and returns to the unsignaled state.</span></span>  
  
 <span data-ttu-id="43949-295">Обратите внимание, что синхронизированный объект имеет несколько ссылок, в том числе ссылку на поток, удерживающий блокировку, ссылку на очередь готовности, который содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, в настоящее время которой содержит потоки, ожидающие уведомления об изменении состояния объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-295">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="43949-296">`Pulse`, <xref:System.Threading.Monitor.PulseAll%2A>, И <xref:System.Threading.Monitor.Wait%2A> методы должны быть вызваны из синхронизированного блока кода.</span><span class="sxs-lookup"><span data-stu-id="43949-296">The `Pulse`, <xref:System.Threading.Monitor.PulseAll%2A>, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="43949-297">Чтобы информировать несколько потоков, используйте <xref:System.Threading.Monitor.PulseAll%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="43949-297">To signal multiple threads, use the <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="43949-298">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="43949-298">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="43949-299">Вызывающий поток не владеет блокировкой для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-299">The calling thread does not own the lock for the specified object.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="43949-300">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="43949-300">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PulseAll">
      <MemberSignature Language="C#" Value="public static void PulseAll (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PulseAll(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.PulseAll(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PulseAll (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PulseAll(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member PulseAll : obj -&gt; unit" Usage="System.Threading.Monitor.PulseAll obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="43949-301">Объект, посылающий импульс.</span><span class="sxs-lookup"><span data-stu-id="43949-301">The object that sends the pulse.</span></span></param>
        <summary><span data-ttu-id="43949-302">Уведомляет все ожидающие потоки об изменении состояния объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-302">Notifies all waiting threads of a change in the object's state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43949-303">Поток, который в данный момент принадлежит блокировка указанного объекта вызывает этот метод для указания всех потоков, ожидающих получения блокировки на объект.</span><span class="sxs-lookup"><span data-stu-id="43949-303">The thread that currently owns the lock on the specified object invokes this method to signal all threads waiting to acquire the lock on the object.</span></span> <span data-ttu-id="43949-304">После отправки сигнала ожидающим потокам, перемещаются в очередь готовности.</span><span class="sxs-lookup"><span data-stu-id="43949-304">After the signal is sent, the waiting threads are moved to the ready queue.</span></span> <span data-ttu-id="43949-305">Когда поток, вызвавший метод `PulseAll` освобождает блокировку, следующий поток в очереди готовности получает блокировку.</span><span class="sxs-lookup"><span data-stu-id="43949-305">When the thread that invoked `PulseAll` releases the lock, the next thread in the ready queue acquires the lock.</span></span>  
  
 <span data-ttu-id="43949-306">Обратите внимание, что синхронизированный объект имеет несколько ссылок, в том числе ссылку на поток, удерживающий блокировку, ссылку на очередь готовности, который содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, в настоящее время которой содержит потоки, ожидающие уведомления об изменении состояния объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-306">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="43949-307"><xref:System.Threading.Monitor.Pulse%2A>, `PulseAll`, И <xref:System.Threading.Monitor.Wait%2A> методы должны быть вызваны из синхронизированного блока кода.</span><span class="sxs-lookup"><span data-stu-id="43949-307">The <xref:System.Threading.Monitor.Pulse%2A>, `PulseAll`, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="43949-308">В примечаниях к описанию <xref:System.Threading.Monitor.Pulse%2A> метод объяснить, что произойдет, если <xref:System.Threading.Monitor.Pulse%2A> вызывается при отсутствии ожидающих потоков.</span><span class="sxs-lookup"><span data-stu-id="43949-308">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 <span data-ttu-id="43949-309">Для обозначения одного потока, используйте `Pulse` метод.</span><span class="sxs-lookup"><span data-stu-id="43949-309">To signal a single thread, use the `Pulse` method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="43949-310">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="43949-310">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="43949-311">Вызывающий поток не владеет блокировкой для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-311">The calling thread does not own the lock for the specified object.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="43949-312">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="43949-312">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43949-313">Пытается получить эксклюзивную блокировку указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-313">Attempts to acquire an exclusive lock on the specified object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj -&gt; bool" Usage="System.Threading.Monitor.TryEnter obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="43949-314">Объект, блокировка которого получается.</span><span class="sxs-lookup"><span data-stu-id="43949-314">The object on which to acquire the lock.</span></span></param>
        <summary><span data-ttu-id="43949-315">Пытается получить эксклюзивную блокировку указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-315">Attempts to acquire an exclusive lock on the specified object.</span></span></summary>
        <returns><span data-ttu-id="43949-316">Значение <see langword="true" />, если текущий поток получает блокировку; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="43949-316"><see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43949-317">Если в случае успешного выполнения этот метод получает монопольную блокировку на `obj` параметра.</span><span class="sxs-lookup"><span data-stu-id="43949-317">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="43949-318">Этот метод немедленно, возвращает ли доступна блокировка.</span><span class="sxs-lookup"><span data-stu-id="43949-318">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="43949-319">Этот метод аналогичен методу <xref:System.Threading.Monitor.Enter%2A>, но он никогда не блокирует текущий поток.</span><span class="sxs-lookup"><span data-stu-id="43949-319">This method is similar to <xref:System.Threading.Monitor.Enter%2A>, but it will never block the current thread.</span></span> <span data-ttu-id="43949-320">Если поток не может войти без блокировки, метод возвращает `false,`.</span><span class="sxs-lookup"><span data-stu-id="43949-320">If the thread cannot enter without blocking, the method returns `false,`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43949-321">Используйте <xref:System.Threading.Monitor> блокировка объектов (то есть ссылочные типы), не типы значений.</span><span class="sxs-lookup"><span data-stu-id="43949-321">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="43949-322">Дополнительные сведения см. в разделе <xref:System.Threading.Monitor> статьи.</span><span class="sxs-lookup"><span data-stu-id="43949-322">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="43949-323">Чтобы убедиться, что поток не войдет в критический раздел, необходимо изучить возвращаемое значение метода и выполнения кода в критический раздел, только в том случае, если его возвращаемое значение `true`.</span><span class="sxs-lookup"><span data-stu-id="43949-323">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="43949-324">В следующем фрагменте кода показан шаблон, используемый для вызова этого метода.</span><span class="sxs-lookup"><span data-stu-id="43949-324">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="43949-325">Обратите внимание, что следует вызывать <xref:System.Threading.Monitor.Exit%2A> в `finally` блок, чтобы убедиться, что вызывающий поток освобождает блокировку критической секции, при возникновении исключения.</span><span class="sxs-lookup"><span data-stu-id="43949-325">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#1)]
 [!code-vb[System.Threading.Monitor.TryEnter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="43949-326">В следующем примере кода показано, как использовать метод `TryEnter`.</span><span class="sxs-lookup"><span data-stu-id="43949-326">The following code example demonstrates how to use the `TryEnter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="43949-327">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="43949-327">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="43949-328">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="43949-328">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="43949-329">Объект, блокировка которого получается.</span><span class="sxs-lookup"><span data-stu-id="43949-329">The object on which to acquire the lock.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="43949-330">Результат попытки получить блокировку, переданную по ссылке.</span><span class="sxs-lookup"><span data-stu-id="43949-330">The result of the attempt to acquire the lock, passed by reference.</span></span> <span data-ttu-id="43949-331">Входное значение должно равняться <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="43949-331">The input must be <see langword="false" />.</span></span> <span data-ttu-id="43949-332">Выходное значение <see langword="true" />, если блокировка получена; в противном случае — выходное значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="43949-332">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span></span> <span data-ttu-id="43949-333">Выходное значение задается, даже если при попытке получить блокировку возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="43949-333">The output is set even if an exception occurs during the attempt to acquire the lock.</span></span></param>
        <summary><span data-ttu-id="43949-334">Пытается получить монопольную блокировку указанного объекта и единым блоком задает значение, указывающее, была ли выполнена блокировка.</span><span class="sxs-lookup"><span data-stu-id="43949-334">Attempts to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43949-335">Если в случае успешного выполнения этот метод получает монопольную блокировку на `obj` параметра.</span><span class="sxs-lookup"><span data-stu-id="43949-335">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="43949-336">Этот метод немедленно, возвращает ли доступна блокировка.</span><span class="sxs-lookup"><span data-stu-id="43949-336">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="43949-337">Если не была выполнена блокировка, так как возникло исключение, переменная, указанная для `lockTaken` параметр `false` после завершения этого метода.</span><span class="sxs-lookup"><span data-stu-id="43949-337">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="43949-338">Это позволяет программе определить, во всех случаях необходимость для снятия блокировки.</span><span class="sxs-lookup"><span data-stu-id="43949-338">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
 <span data-ttu-id="43949-339">Этот метод аналогичен методу <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>, но он никогда не блокирует текущий поток.</span><span class="sxs-lookup"><span data-stu-id="43949-339">This method is similar to <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>, but it will never block the current thread.</span></span> <span data-ttu-id="43949-340">Если поток не может войти без блокировки, `lockTaken` аргумент имеет значение `false` при возвращении метода.</span><span class="sxs-lookup"><span data-stu-id="43949-340">If the thread cannot enter without blocking, the `lockTaken` argument is set to `false` when the method returns.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43949-341">Используйте <xref:System.Threading.Monitor> блокировка объектов (то есть ссылочные типы), не типы значений.</span><span class="sxs-lookup"><span data-stu-id="43949-341">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="43949-342">Дополнительные сведения см. в разделе <xref:System.Threading.Monitor> статьи.</span><span class="sxs-lookup"><span data-stu-id="43949-342">For more information, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="43949-343">Чтобы убедиться, что поток не войдет в критический раздел, необходимо проверить значение `lockTaken` и выполнять код в критический раздел, только в том случае, если его значение равно `true`.</span><span class="sxs-lookup"><span data-stu-id="43949-343">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="43949-344">В следующем фрагменте кода показан шаблон, используемый для вызова этого метода.</span><span class="sxs-lookup"><span data-stu-id="43949-344">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="43949-345">Обратите внимание, что следует вызывать <xref:System.Threading.Monitor.Exit%2A> в `finally` блок, чтобы убедиться, что вызывающий поток освобождает блокировку критической секции, при возникновении исключения.</span><span class="sxs-lookup"><span data-stu-id="43949-345">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#2)]
 [!code-vb[System.Threading.Monitor.TryEnter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="43949-346">В следующем коде показано типичное использование <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> перегрузки метода.</span><span class="sxs-lookup"><span data-stu-id="43949-346">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="43949-347">Эта перегрузка всегда устанавливает значение переменной, которая передается `ref` параметра (`ByRef` в Visual Basic) `lockTaken`, даже если метод создает исключение, поэтому значение переменной является надежным способом для проверки блокировки должен быть выпущен.</span><span class="sxs-lookup"><span data-stu-id="43949-347">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#3)]
 [!code-vb[System.Threading.Monitor.Enter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="43949-348">Входные данные для <paramref name="lockTaken" /> — <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="43949-348">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="43949-349">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="43949-349">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * int -&gt; bool" Usage="System.Threading.Monitor.TryEnter (obj, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="43949-350">Объект, блокировка которого получается.</span><span class="sxs-lookup"><span data-stu-id="43949-350">The object on which to acquire the lock.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="43949-351">Количество миллисекунд, в течение которых ожидать блокировку.</span><span class="sxs-lookup"><span data-stu-id="43949-351">The number of milliseconds to wait for the lock.</span></span></param>
        <summary><span data-ttu-id="43949-352">Пытается получить эксклюзивную блокировку указанного объекта на заданное количество миллисекунд.</span><span class="sxs-lookup"><span data-stu-id="43949-352">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object.</span></span></summary>
        <returns><span data-ttu-id="43949-353">Значение <see langword="true" />, если текущий поток получает блокировку; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="43949-353"><see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43949-354">Если `millisecondsTimeout` равняется <xref:System.Threading.Timeout.Infinite>, этот метод эквивалентен <xref:System.Threading.Monitor.Enter%2A>.</span><span class="sxs-lookup"><span data-stu-id="43949-354">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="43949-355">Если `millisecondsTimeout` равен 0, этот метод эквивалентен <xref:System.Threading.Monitor.TryEnter%2A>.</span><span class="sxs-lookup"><span data-stu-id="43949-355">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43949-356">Используйте <xref:System.Threading.Monitor> блокировка объектов (то есть ссылочные типы), не типы значений.</span><span class="sxs-lookup"><span data-stu-id="43949-356">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="43949-357">Дополнительные сведения см. в разделе <xref:System.Threading.Monitor> статьи.</span><span class="sxs-lookup"><span data-stu-id="43949-357">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="43949-358">Чтобы убедиться, что поток не войдет в критический раздел, необходимо изучить возвращаемое значение метода и выполнения кода в критический раздел, только в том случае, если его возвращаемое значение `true`.</span><span class="sxs-lookup"><span data-stu-id="43949-358">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="43949-359">В следующем фрагменте кода показан шаблон, используемый для вызова этого метода.</span><span class="sxs-lookup"><span data-stu-id="43949-359">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="43949-360">Обратите внимание, что следует вызывать <xref:System.Threading.Monitor.Exit%2A> в `finally` блок, чтобы убедиться, что вызывающий поток освобождает блокировку критической секции, при возникновении исключения.</span><span class="sxs-lookup"><span data-stu-id="43949-360">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#3)]
 [!code-vb[System.Threading.Monitor.TryEnter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="43949-361">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="43949-361">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="43949-362"><paramref name="millisecondsTimeout" /> является отрицательным числом и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</span><span class="sxs-lookup"><span data-stu-id="43949-362"><paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="43949-363">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="43949-363">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * TimeSpan -&gt; bool" Usage="System.Threading.Monitor.TryEnter (obj, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="43949-364">Объект, блокировка которого получается.</span><span class="sxs-lookup"><span data-stu-id="43949-364">The object on which to acquire the lock.</span></span></param>
        <param name="timeout"><span data-ttu-id="43949-365">Класс <see cref="T:System.TimeSpan" />, представляющий количество времени, в течение которого ожидается блокировка.</span><span class="sxs-lookup"><span data-stu-id="43949-365">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait for the lock.</span></span> <span data-ttu-id="43949-366">Значение –1 миллисекунды обозначает бесконечное ожидание.</span><span class="sxs-lookup"><span data-stu-id="43949-366">A value of -1 millisecond specifies an infinite wait.</span></span></param>
        <summary><span data-ttu-id="43949-367">Пытается получить эксклюзивную блокировку указанного объекта в течение заданного количества времени.</span><span class="sxs-lookup"><span data-stu-id="43949-367">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object.</span></span></summary>
        <returns><span data-ttu-id="43949-368">Значение <see langword="true" />, если текущий поток получает блокировку; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="43949-368"><see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43949-369">Если значение `timeout` преобразуется в миллисекунды равно -1, этот метод эквивалентен <xref:System.Threading.Monitor.Enter%2A>.</span><span class="sxs-lookup"><span data-stu-id="43949-369">If the value of the `timeout` parameter converted to milliseconds equals -1, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="43949-370">Если значение `timeout` равен 0, этот метод эквивалентен <xref:System.Threading.Monitor.TryEnter%2A>.</span><span class="sxs-lookup"><span data-stu-id="43949-370">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43949-371">Используйте <xref:System.Threading.Monitor> блокировка объектов (то есть ссылочные типы), не типы значений.</span><span class="sxs-lookup"><span data-stu-id="43949-371">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="43949-372">Дополнительные сведения см. в разделе <xref:System.Threading.Monitor> разделе, посвященном классу.</span><span class="sxs-lookup"><span data-stu-id="43949-372">For details, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="43949-373">Чтобы убедиться, что поток не войдет в критический раздел, необходимо изучить возвращаемое значение метода и выполнения кода в критический раздел, только в том случае, если его возвращаемое значение `true`.</span><span class="sxs-lookup"><span data-stu-id="43949-373">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="43949-374">В следующем фрагменте кода показан шаблон, используемый для вызова этого метода.</span><span class="sxs-lookup"><span data-stu-id="43949-374">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="43949-375">Обратите внимание, что следует вызывать <xref:System.Threading.Monitor.Exit%2A> в `finally` блок, чтобы убедиться, что вызывающий поток освобождает блокировку критической секции, при возникновении исключения.</span><span class="sxs-lookup"><span data-stu-id="43949-375">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#5)]
 [!code-vb[System.Threading.Monitor.TryEnter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="43949-376">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="43949-376">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="43949-377">Значение <paramref name="timeout" /> в миллисекундах отрицательно и не равно <see cref="F:System.Threading.Timeout.Infinite" /> (–1 миллисекунда) или больше <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="43949-377">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="43949-378">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="43949-378">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, int millisecondsTimeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, int32 millisecondsTimeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, millisecondsTimeout As Integer, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, int millisecondsTimeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * int *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, millisecondsTimeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="43949-379">Объект, блокировка которого получается.</span><span class="sxs-lookup"><span data-stu-id="43949-379">The object on which to acquire the lock.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="43949-380">Количество миллисекунд, в течение которых ожидать блокировку.</span><span class="sxs-lookup"><span data-stu-id="43949-380">The number of milliseconds to wait for the lock.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="43949-381">Результат попытки получить блокировку, переданную по ссылке.</span><span class="sxs-lookup"><span data-stu-id="43949-381">The result of the attempt to acquire the lock, passed by reference.</span></span> <span data-ttu-id="43949-382">Входное значение должно равняться <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="43949-382">The input must be <see langword="false" />.</span></span> <span data-ttu-id="43949-383">Выходное значение <see langword="true" />, если блокировка получена; в противном случае — выходное значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="43949-383">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span></span> <span data-ttu-id="43949-384">Выходное значение задается, даже если при попытке получить блокировку возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="43949-384">The output is set even if an exception occurs during the attempt to acquire the lock.</span></span></param>
        <summary><span data-ttu-id="43949-385">В течение заданного количества миллисекунд пытается получить монопольную блокировку указанного объекта и единым блоком задает значение, указывающее, была ли выполнена блокировка.</span><span class="sxs-lookup"><span data-stu-id="43949-385">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43949-386">Если `millisecondsTimeout` равняется <xref:System.Threading.Timeout.Infinite>, этот метод эквивалентен <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="43949-386">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="43949-387">Если `millisecondsTimeout` равен 0, этот метод эквивалентен <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="43949-387">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="43949-388">Если не была выполнена блокировка, так как возникло исключение, переменная, указанная для `lockTaken` параметр `false` после завершения этого метода.</span><span class="sxs-lookup"><span data-stu-id="43949-388">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="43949-389">Это позволяет программе определить, во всех случаях необходимость для снятия блокировки.</span><span class="sxs-lookup"><span data-stu-id="43949-389">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43949-390">Используйте <xref:System.Threading.Monitor> блокировка объектов (то есть ссылочные типы), не типы значений.</span><span class="sxs-lookup"><span data-stu-id="43949-390">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="43949-391">Дополнительные сведения см. в разделе <xref:System.Threading.Monitor> разделе, посвященном классу.</span><span class="sxs-lookup"><span data-stu-id="43949-391">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="43949-392">Чтобы убедиться, что поток не войдет в критический раздел, необходимо проверить значение `lockTaken` и выполнять код в критический раздел, только в том случае, если его значение равно `true`.</span><span class="sxs-lookup"><span data-stu-id="43949-392">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="43949-393">В следующем фрагменте кода показан шаблон, используемый для вызова этого метода.</span><span class="sxs-lookup"><span data-stu-id="43949-393">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="43949-394">Обратите внимание, что следует вызывать <xref:System.Threading.Monitor.Exit%2A> в `finally` блок, чтобы убедиться, что вызывающий поток освобождает блокировку критической секции, при возникновении исключения.</span><span class="sxs-lookup"><span data-stu-id="43949-394">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#4)]
 [!code-vb[System.Threading.Monitor.TryEnter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="43949-395">В следующем коде показано типичное использование <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> перегрузки метода.</span><span class="sxs-lookup"><span data-stu-id="43949-395">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="43949-396">Эта перегрузка всегда устанавливает значение переменной, которая передается `ref` параметра (`ByRef` в Visual Basic) `lockTaken`, даже если метод создает исключение, поэтому значение переменной является надежным способом для проверки блокировки должен быть выпущен.</span><span class="sxs-lookup"><span data-stu-id="43949-396">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#4)]
 [!code-vb[System.Threading.Monitor.Enter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="43949-397">Входные данные для <paramref name="lockTaken" /> — <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="43949-397">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="43949-398">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="43949-398">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="43949-399"><paramref name="millisecondsTimeout" /> является отрицательным числом и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</span><span class="sxs-lookup"><span data-stu-id="43949-399"><paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, TimeSpan timeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, valuetype System.TimeSpan timeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, timeout As TimeSpan, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, TimeSpan timeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * TimeSpan *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, timeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="43949-400">Объект, блокировка которого получается.</span><span class="sxs-lookup"><span data-stu-id="43949-400">The object on which to acquire the lock.</span></span></param>
        <param name="timeout"><span data-ttu-id="43949-401">Период времени, в течение которого ожидается блокировка.</span><span class="sxs-lookup"><span data-stu-id="43949-401">The amount of time to wait for the lock.</span></span> <span data-ttu-id="43949-402">Значение –1 миллисекунды обозначает бесконечное ожидание.</span><span class="sxs-lookup"><span data-stu-id="43949-402">A value of -1 millisecond specifies an infinite wait.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="43949-403">Результат попытки получить блокировку, переданную по ссылке.</span><span class="sxs-lookup"><span data-stu-id="43949-403">The result of the attempt to acquire the lock, passed by reference.</span></span> <span data-ttu-id="43949-404">Входное значение должно равняться <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="43949-404">The input must be <see langword="false" />.</span></span> <span data-ttu-id="43949-405">Выходное значение <see langword="true" />, если блокировка получена; в противном случае — выходное значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="43949-405">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span></span> <span data-ttu-id="43949-406">Выходное значение задается, даже если при попытке получить блокировку возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="43949-406">The output is set even if an exception occurs during the attempt to acquire the lock.</span></span></param>
        <summary><span data-ttu-id="43949-407">В течение заданного периода времени пытается получить монопольную блокировку указанного объекта и единым блоком задает значение, указывающее, была ли выполнена блокировка.</span><span class="sxs-lookup"><span data-stu-id="43949-407">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43949-408">Если значение `timeout` преобразуется в миллисекунды равно -1, этот метод эквивалентен <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="43949-408">If the value of the `timeout` parameter converted to milliseconds equals -1, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="43949-409">Если значение `timeout` равен 0, этот метод эквивалентен <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="43949-409">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="43949-410">Если не была выполнена блокировка, так как возникло исключение, переменная, указанная для `lockTaken` параметр `false` после завершения этого метода.</span><span class="sxs-lookup"><span data-stu-id="43949-410">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="43949-411">Это позволяет программе определить, во всех случаях необходимость для снятия блокировки.</span><span class="sxs-lookup"><span data-stu-id="43949-411">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43949-412">Используйте <xref:System.Threading.Monitor> блокировка объектов (то есть ссылочные типы), не типы значений.</span><span class="sxs-lookup"><span data-stu-id="43949-412">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="43949-413">Дополнительные сведения см. в разделе <xref:System.Threading.Monitor> разделе, посвященном классу.</span><span class="sxs-lookup"><span data-stu-id="43949-413">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="43949-414">Чтобы убедиться, что поток не войдет в критический раздел, необходимо проверить значение `lockTaken` и выполнять код в критический раздел, только в том случае, если его значение равно `true`.</span><span class="sxs-lookup"><span data-stu-id="43949-414">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="43949-415">В следующем фрагменте кода показан шаблон, используемый для вызова этого метода.</span><span class="sxs-lookup"><span data-stu-id="43949-415">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="43949-416">Обратите внимание, что следует вызывать <xref:System.Threading.Monitor.Exit%2A> в `finally` блок, чтобы убедиться, что вызывающий поток освобождает блокировку критической секции, при возникновении исключения.</span><span class="sxs-lookup"><span data-stu-id="43949-416">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#6)]
 [!code-vb[System.Threading.Monitor.TryEnter#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="43949-417">Входные данные для <paramref name="lockTaken" /> — <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="43949-417">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="43949-418">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="43949-418">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="43949-419">Значение <paramref name="timeout" /> в миллисекундах отрицательно и не равно <see cref="F:System.Threading.Timeout.Infinite" /> (–1 миллисекунда) или больше <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="43949-419">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="43949-420">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="43949-420">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43949-421">Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова.</span><span class="sxs-lookup"><span data-stu-id="43949-421">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Wait : obj -&gt; bool" Usage="System.Threading.Monitor.Wait obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="43949-422">Объект, в котором следует ожидать.</span><span class="sxs-lookup"><span data-stu-id="43949-422">The object on which to wait.</span></span></param>
        <summary><span data-ttu-id="43949-423">Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова.</span><span class="sxs-lookup"><span data-stu-id="43949-423">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span></summary>
        <returns><span data-ttu-id="43949-424">Значение <see langword="true" />, если вызов осуществил возврат из-за того, что вызывающий поток заново получил блокировку заданного объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-424"><see langword="true" /> if the call returned because the caller reacquired the lock for the specified object.</span></span> <span data-ttu-id="43949-425">Этот метод не осуществляет возврат, если блокировка вновь не получена.</span><span class="sxs-lookup"><span data-stu-id="43949-425">This method does not return if the lock is not reacquired.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43949-426">Поток, который в данный момент принадлежит блокировка указанного объекта вызывает этот метод, чтобы освободить объект доступа к ней другим потоком.</span><span class="sxs-lookup"><span data-stu-id="43949-426">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="43949-427">Вызывающий поток блокируется, ожидая получения блокировки.</span><span class="sxs-lookup"><span data-stu-id="43949-427">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="43949-428">Этот метод вызывается, когда вызывающий объект должен ожидать изменения состояния, которые произойдут в результате операций другого потока.</span><span class="sxs-lookup"><span data-stu-id="43949-428">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="43949-429">Если поток вызывает `Wait`, он освобождает блокировку объекта и переходит в очередь ожидания объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-429">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="43949-430">Следующий поток в очередь готовности объекта (если таковой имеется), получает блокировку и эксклюзивное использование объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-430">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="43949-431">Все потоки, которые вызывают `Wait` остаются в очереди ожидания, пока не получат сигнала от <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A>, посланного владельцем блокировки.</span><span class="sxs-lookup"><span data-stu-id="43949-431">All threads that call `Wait` remain in the waiting queue until they receive a signal from <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>, sent by the owner of the lock.</span></span> <span data-ttu-id="43949-432">Если `Pulse` отправляется, затрагивается только поток в голове очереди ожидания.</span><span class="sxs-lookup"><span data-stu-id="43949-432">If `Pulse` is sent, only the thread at the head of the waiting queue is affected.</span></span> <span data-ttu-id="43949-433">Если `PulseAll` отправляется, затрагиваются все потоки, которые ожидают объект.</span><span class="sxs-lookup"><span data-stu-id="43949-433">If `PulseAll` is sent, all threads that are waiting for the object are affected.</span></span> <span data-ttu-id="43949-434">При получении сигнала, оставьте в очередь ожидания один или несколько потоков и введите очередь готовности.</span><span class="sxs-lookup"><span data-stu-id="43949-434">When the signal is received, one or more threads leave the waiting queue and enter the ready queue.</span></span> <span data-ttu-id="43949-435">Поток в очередь готовности разрешается получения блокировки.</span><span class="sxs-lookup"><span data-stu-id="43949-435">A thread in the ready queue is permitted to reacquire the lock.</span></span>  
  
 <span data-ttu-id="43949-436">Этот метод возвращает, если вызывающий поток снова получает блокировку объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-436">This method returns when the calling thread reacquires the lock on the object.</span></span> <span data-ttu-id="43949-437">Обратите внимание, что этот метод неограниченно блокируется, если владелец блокировки не вызывает `Pulse` или `PulseAll`.</span><span class="sxs-lookup"><span data-stu-id="43949-437">Note that this method blocks indefinitely if the holder of the lock does not call `Pulse` or `PulseAll`.</span></span>  
  
 <span data-ttu-id="43949-438">Вызывающий поток выполняет `Wait` один раз, независимо от того, сколько раз <xref:System.Threading.Monitor.Enter%2A> был вызван для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-438">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="43949-439">По существу `Wait` метод сохраняет количество раз, вызывающий инструкцию `Enter` в объекте и вызывает `Exit` столько раз, сколько нужно, чтобы полностью освободить объект с блокировкой.</span><span class="sxs-lookup"><span data-stu-id="43949-439">Conceptually, the `Wait` method stores the number of times the caller invoked `Enter` on the object and invokes `Exit` as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="43949-440">Вызывающий объект затем блокируется, ожидая получения объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-440">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="43949-441">Если вызывающий поток заново получает блокировку, система вызывает `Enter` столько раз, сколько необходимо для восстановления сохраненного `Enter` числа.</span><span class="sxs-lookup"><span data-stu-id="43949-441">When the caller reacquires the lock, the system calls `Enter` as many times as necessary to restore the saved `Enter` count for the caller.</span></span> <span data-ttu-id="43949-442">Вызов `Wait` снимает блокировку указанного объекта; если вызывающий объект является владельцем блокировки на другие объекты, они не освобождаются.</span><span class="sxs-lookup"><span data-stu-id="43949-442">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
 <span data-ttu-id="43949-443">Обратите внимание, что синхронизированный объект имеет несколько ссылок, в том числе ссылку на поток, удерживающий блокировку, ссылку на очередь готовности, который содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, в настоящее время которой содержит потоки, ожидающие уведомления об изменении состояния объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-443">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="43949-444"><xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, И `Wait` методы должны быть вызваны из синхронизированного блока кода.</span><span class="sxs-lookup"><span data-stu-id="43949-444">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="43949-445">В примечаниях к описанию <xref:System.Threading.Monitor.Pulse%2A> метод объяснить, что произойдет, если <xref:System.Threading.Monitor.Pulse%2A> вызывается при отсутствии ожидающих потоков.</span><span class="sxs-lookup"><span data-stu-id="43949-445">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="43949-446">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="43949-446">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="43949-447">Вызывающий поток не владеет блокировкой для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-447">The calling thread does not own the lock for the specified object.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="43949-448">Поток, который вызывает <see langword="Wait" />, позже прерывается из состояния ожидания.</span><span class="sxs-lookup"><span data-stu-id="43949-448">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span></span> <span data-ttu-id="43949-449">Это происходит, когда другой поток вызывает метод <see cref="M:System.Threading.Thread.Interrupt" /> этого потока.</span><span class="sxs-lookup"><span data-stu-id="43949-449">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="43949-450">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="43949-450">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * int -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="43949-451">Объект, в котором следует ожидать.</span><span class="sxs-lookup"><span data-stu-id="43949-451">The object on which to wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="43949-452">Количество миллисекунд для ожидания постановки в очередь готовности.</span><span class="sxs-lookup"><span data-stu-id="43949-452">The number of milliseconds to wait before the thread enters the ready queue.</span></span></param>
        <summary><span data-ttu-id="43949-453">Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова.</span><span class="sxs-lookup"><span data-stu-id="43949-453">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span> <span data-ttu-id="43949-454">Если указанные временные интервалы истекают, поток встает в очередь готовности.</span><span class="sxs-lookup"><span data-stu-id="43949-454">If the specified time-out interval elapses, the thread enters the ready queue.</span></span></summary>
        <returns><span data-ttu-id="43949-455">Значение <see langword="true" />, если блокировка была получена заново до истечения заданного времени; значение <see langword="false" />, если блокировка была получена заново по истечении заданного времени.</span><span class="sxs-lookup"><span data-stu-id="43949-455"><see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span></span> <span data-ttu-id="43949-456">Этот метод не осуществляет возврат, если блокировка не была получена.</span><span class="sxs-lookup"><span data-stu-id="43949-456">The method does not return until the lock is reacquired.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43949-457">Этот метод не возвращает до получения монопольной блокировки на `obj` параметра.</span><span class="sxs-lookup"><span data-stu-id="43949-457">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="43949-458">Поток, который в данный момент принадлежит блокировка указанного объекта вызывает этот метод, чтобы освободить объект доступа к ней другим потоком.</span><span class="sxs-lookup"><span data-stu-id="43949-458">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="43949-459">Вызывающий поток блокируется, ожидая получения блокировки.</span><span class="sxs-lookup"><span data-stu-id="43949-459">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="43949-460">Этот метод вызывается, когда вызывающий объект должен ожидать изменения состояния, которые произойдут в результате операций другого потока.</span><span class="sxs-lookup"><span data-stu-id="43949-460">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="43949-461">Время ожидания гарантирует, что текущий поток не блокируется неограниченно, если другой поток освобождает блокировку без предварительного вызова функции <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="43949-461">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="43949-462">Он также перемещает поток в очередь готовности, минуя другие потоки предшествует ей в очереди ожидания, таким образом, чтобы быстрее получения блокировки.</span><span class="sxs-lookup"><span data-stu-id="43949-462">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="43949-463">Поток можно проверить возвращаемое значение <xref:System.Threading.Monitor.Wait%2A> метод для определения того, получена ли его блокировки до истечения времени ожидания. Поток можно оценить условия, которые привело к введите ожидания, и если необходимости вызова <xref:System.Threading.Monitor.Wait%2A> метод снова.</span><span class="sxs-lookup"><span data-stu-id="43949-463">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="43949-464">Если поток вызывает `Wait`, он освобождает блокировку объекта и переходит в очередь ожидания объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-464">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="43949-465">Следующий поток в очередь готовности объекта (если таковой имеется), получает блокировку и эксклюзивное использование объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-465">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="43949-466">Поток, вызвавший `Wait` вызывающий поток, удерживающий блокировку остается в очереди ожидания либо до <xref:System.Threading.Monitor.PulseAll%2A>, или он является следующим в очереди, и вызывающий поток, удерживающий блокировку <xref:System.Threading.Monitor.Pulse%2A>.</span><span class="sxs-lookup"><span data-stu-id="43949-466">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="43949-467">Тем не менее если `millisecondsTimeout` истечет раньше, чем другой поток вызывает этот объект <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A> метод, исходный поток перемещается в очередь готовности, чтобы снова получить блокировку.</span><span class="sxs-lookup"><span data-stu-id="43949-467">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43949-468">Если <xref:System.Threading.Timeout.Infinite> указывается для `millisecondsTimeout` параметра, этот метод неограниченно блокируется, если владелец блокировки вызывает <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="43949-468">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="43949-469">Если `millisecondsTimeout` равно нулю, поток, вызывающий `Wait` снимает блокировку и затем немедленно постановки в очередь готовности, чтобы снова получить блокировку.</span><span class="sxs-lookup"><span data-stu-id="43949-469">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="43949-470">Вызывающий поток выполняет `Wait` один раз, независимо от того, сколько раз <xref:System.Threading.Monitor.Enter%2A> был вызван для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-470">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="43949-471">По существу `Wait` метод сохраняет количество раз, вызывающий инструкцию <xref:System.Threading.Monitor.Enter%2A> в объекте и вызывает <xref:System.Threading.Monitor.Exit%2A> столько раз, сколько нужно, чтобы полностью освободить объект с блокировкой.</span><span class="sxs-lookup"><span data-stu-id="43949-471">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="43949-472">Вызывающий объект затем блокируется, ожидая получения объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-472">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="43949-473">Если вызывающий поток заново получает блокировку, система вызывает <xref:System.Threading.Monitor.Enter%2A> столько раз, сколько необходимо для восстановления сохраненного <xref:System.Threading.Monitor.Enter%2A> числа.</span><span class="sxs-lookup"><span data-stu-id="43949-473">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="43949-474">Вызов `Wait` снимает блокировку указанного объекта; если вызывающий объект является владельцем блокировки на другие объекты, они не освобождаются.</span><span class="sxs-lookup"><span data-stu-id="43949-474">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43949-475">Синхронизированный объект имеет несколько ссылок, в том числе ссылку на поток, удерживающий блокировку, ссылку на очередь готовности, который содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, который содержит в настоящее время потоки, ожидающие получать уведомления об изменении состояния объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-475">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="43949-476"><xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, И `Wait` методы должны быть вызваны из синхронизированного блока кода.</span><span class="sxs-lookup"><span data-stu-id="43949-476">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="43949-477">В примечаниях к описанию <xref:System.Threading.Monitor.Pulse%2A> метод объяснить, что произойдет, если <xref:System.Threading.Monitor.Pulse%2A> вызывается при отсутствии ожидающих потоков.</span><span class="sxs-lookup"><span data-stu-id="43949-477">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="43949-478">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="43949-478">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="43949-479">Вызывающий поток не владеет блокировкой для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-479">The calling thread does not own the lock for the specified object.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="43949-480">Поток, который вызывает <see langword="Wait" />, позже прерывается из состояния ожидания.</span><span class="sxs-lookup"><span data-stu-id="43949-480">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span></span> <span data-ttu-id="43949-481">Это происходит, когда другой поток вызывает метод <see cref="M:System.Threading.Thread.Interrupt" /> этого потока.</span><span class="sxs-lookup"><span data-stu-id="43949-481">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="43949-482">Значение параметра <paramref name="millisecondsTimeout" /> отрицательно и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</span><span class="sxs-lookup"><span data-stu-id="43949-482">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="43949-483">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="43949-483">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * TimeSpan -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="43949-484">Объект, в котором следует ожидать.</span><span class="sxs-lookup"><span data-stu-id="43949-484">The object on which to wait.</span></span></param>
        <param name="timeout"><span data-ttu-id="43949-485">Класс <see cref="T:System.TimeSpan" />, представляющий количество времени, до истечения которого поток поступает в очередь ожидания.</span><span class="sxs-lookup"><span data-stu-id="43949-485">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span></span></param>
        <summary><span data-ttu-id="43949-486">Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова.</span><span class="sxs-lookup"><span data-stu-id="43949-486">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span> <span data-ttu-id="43949-487">Если указанные временные интервалы истекают, поток встает в очередь готовности.</span><span class="sxs-lookup"><span data-stu-id="43949-487">If the specified time-out interval elapses, the thread enters the ready queue.</span></span></summary>
        <returns><span data-ttu-id="43949-488">Значение <see langword="true" />, если блокировка была получена заново до истечения заданного времени; значение <see langword="false" />, если блокировка была получена заново по истечении заданного времени.</span><span class="sxs-lookup"><span data-stu-id="43949-488"><see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span></span> <span data-ttu-id="43949-489">Этот метод не осуществляет возврат, если блокировка не была получена.</span><span class="sxs-lookup"><span data-stu-id="43949-489">The method does not return until the lock is reacquired.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43949-490">Этот метод не возвращает до получения монопольной блокировки на `obj` параметра.</span><span class="sxs-lookup"><span data-stu-id="43949-490">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="43949-491">Поток, который в данный момент принадлежит блокировка указанного объекта вызывает этот метод, чтобы освободить объект доступа к ней другим потоком.</span><span class="sxs-lookup"><span data-stu-id="43949-491">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="43949-492">Вызывающий поток блокируется, ожидая получения блокировки.</span><span class="sxs-lookup"><span data-stu-id="43949-492">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="43949-493">Этот метод вызывается, когда вызывающий объект должен ожидать изменения состояния, которые произойдут в результате операций другого потока.</span><span class="sxs-lookup"><span data-stu-id="43949-493">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="43949-494">Время ожидания гарантирует, что текущий поток не блокируется неограниченно, если другой поток освобождает блокировку без предварительного вызова функции <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="43949-494">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="43949-495">Он также перемещает поток в очередь готовности, минуя другие потоки предшествует ей в очереди ожидания, таким образом, чтобы быстрее получения блокировки.</span><span class="sxs-lookup"><span data-stu-id="43949-495">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="43949-496">Поток можно проверить возвращаемое значение <xref:System.Threading.Monitor.Wait%2A> метод для определения того, получена ли его блокировки до истечения времени ожидания. Поток можно оценить условия, которые привело к введите ожидания, и если необходимости вызова <xref:System.Threading.Monitor.Wait%2A> метод снова.</span><span class="sxs-lookup"><span data-stu-id="43949-496">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="43949-497">Если поток вызывает `Wait`, он освобождает блокировку объекта и переходит в очередь ожидания объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-497">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="43949-498">Следующий поток в очередь готовности объекта (если таковой имеется), получает блокировку и эксклюзивное использование объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-498">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="43949-499">Поток, вызвавший `Wait` вызывающий поток, удерживающий блокировку остается в очереди ожидания либо до <xref:System.Threading.Monitor.PulseAll%2A>, или он является следующим в очереди, и вызывающий поток, удерживающий блокировку <xref:System.Threading.Monitor.Pulse%2A>.</span><span class="sxs-lookup"><span data-stu-id="43949-499">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="43949-500">Тем не менее если `timeout` истечет раньше, чем другой поток вызывает этот объект <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A> метод, исходный поток перемещается в очередь готовности, чтобы снова получить блокировку.</span><span class="sxs-lookup"><span data-stu-id="43949-500">However, if `timeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43949-501">Если <xref:System.TimeSpan> представляющий-1 миллисекунду для указан `timeout` параметра, этот метод неограниченно блокируется, если владелец блокировки вызывает <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="43949-501">If a <xref:System.TimeSpan> representing -1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="43949-502">Если `timeout` равно 0, поток, вызывающий `Wait` снимает блокировку и затем немедленно постановки в очередь готовности, чтобы снова получить блокировку.</span><span class="sxs-lookup"><span data-stu-id="43949-502">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="43949-503">Вызывающий поток выполняет `Wait` один раз, независимо от того, сколько раз <xref:System.Threading.Monitor.Enter%2A> был вызван для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-503">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="43949-504">По существу `Wait` метод сохраняет количество раз, вызывающий инструкцию <xref:System.Threading.Monitor.Enter%2A> в объекте и вызывает <xref:System.Threading.Monitor.Exit%2A> столько раз, сколько нужно, чтобы полностью освободить объект с блокировкой.</span><span class="sxs-lookup"><span data-stu-id="43949-504">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="43949-505">Вызывающий объект затем блокируется, ожидая получения объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-505">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="43949-506">Если вызывающий поток заново получает блокировку, система вызывает <xref:System.Threading.Monitor.Enter%2A> столько раз, сколько необходимо для восстановления сохраненного <xref:System.Threading.Monitor.Enter%2A> числа.</span><span class="sxs-lookup"><span data-stu-id="43949-506">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="43949-507">Вызов `Wait` снимает блокировку указанного объекта; если вызывающий объект является владельцем блокировки на другие объекты, они не освобождаются.</span><span class="sxs-lookup"><span data-stu-id="43949-507">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43949-508">Синхронизированный объект имеет несколько ссылок, в том числе ссылку на поток, удерживающий блокировку, ссылку на очередь готовности, который содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, который содержит в настоящее время потоки, ожидающие получать уведомления об изменении состояния объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-508">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="43949-509"><xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, И `Wait` методы должны быть вызваны из синхронизированного блока кода.</span><span class="sxs-lookup"><span data-stu-id="43949-509">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="43949-510">В примечаниях к описанию <xref:System.Threading.Monitor.Pulse%2A> метод объяснить, что произойдет, если <xref:System.Threading.Monitor.Pulse%2A> вызывается при отсутствии ожидающих потоков.</span><span class="sxs-lookup"><span data-stu-id="43949-510">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="43949-511">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="43949-511">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="43949-512">Вызывающий поток не владеет блокировкой для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-512">The calling thread does not own the lock for the specified object.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="43949-513">Поток, который вызывает <see langword="Wait" />, позже прерывается из состояния ожидания.</span><span class="sxs-lookup"><span data-stu-id="43949-513">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span></span> <span data-ttu-id="43949-514">Это происходит, когда другой поток вызывает метод <see cref="M:System.Threading.Thread.Interrupt" /> этого потока.</span><span class="sxs-lookup"><span data-stu-id="43949-514">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="43949-515">Значение параметра <paramref name="timeout" /> в миллисекундах отрицательно и не равно <see cref="F:System.Threading.Timeout.Infinite" /> (–1 миллисекунда) или больше <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="43949-515">The value of the <paramref name="timeout" /> parameter in milliseconds is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (-1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="43949-516">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="43949-516">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * int * bool -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="43949-517">Объект, в котором следует ожидать.</span><span class="sxs-lookup"><span data-stu-id="43949-517">The object on which to wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="43949-518">Количество миллисекунд для ожидания постановки в очередь готовности.</span><span class="sxs-lookup"><span data-stu-id="43949-518">The number of milliseconds to wait before the thread enters the ready queue.</span></span></param>
        <param name="exitContext"><span data-ttu-id="43949-519">Значение <see langword="true" /> для выхода из домена синхронизации в текущем контексте перед ожиданием (в синхронизированном контексте) с его последующим повторным получением; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="43949-519"><see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="43949-520">Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова.</span><span class="sxs-lookup"><span data-stu-id="43949-520">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span> <span data-ttu-id="43949-521">Если указанные временные интервалы истекают, поток встает в очередь готовности.</span><span class="sxs-lookup"><span data-stu-id="43949-521">If the specified time-out interval elapses, the thread enters the ready queue.</span></span> <span data-ttu-id="43949-522">Этот метод также указывает на наличие завершения области синхронизации для контекста (если в синхронизированном контексте) до получения впоследствии нового состояния ожидания.</span><span class="sxs-lookup"><span data-stu-id="43949-522">This method also specifies whether the synchronization domain for the context (if in a synchronized context) is exited before the wait and reacquired afterward.</span></span></summary>
        <returns><span data-ttu-id="43949-523">Значение <see langword="true" />, если блокировка была получена заново до истечения заданного времени; значение <see langword="false" />, если блокировка была получена заново по истечении заданного времени.</span><span class="sxs-lookup"><span data-stu-id="43949-523"><see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span></span> <span data-ttu-id="43949-524">Этот метод не осуществляет возврат, если блокировка не была получена.</span><span class="sxs-lookup"><span data-stu-id="43949-524">The method does not return until the lock is reacquired.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43949-525">Этот метод не возвращает до получения монопольной блокировки на `obj` параметра.</span><span class="sxs-lookup"><span data-stu-id="43949-525">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="43949-526">Поток, который в данный момент принадлежит блокировка указанного объекта вызывает этот метод, чтобы освободить объект доступа к ней другим потоком.</span><span class="sxs-lookup"><span data-stu-id="43949-526">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="43949-527">Вызывающий поток блокируется, ожидая получения блокировки.</span><span class="sxs-lookup"><span data-stu-id="43949-527">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="43949-528">Этот метод вызывается, когда вызывающий объект должен ожидать изменения состояния, которые произойдут в результате операций другого потока.</span><span class="sxs-lookup"><span data-stu-id="43949-528">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="43949-529">Время ожидания гарантирует, что текущий поток не блокируется неограниченно, если другой поток освобождает блокировку без предварительного вызова функции <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="43949-529">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="43949-530">Он также перемещает поток в очередь готовности, минуя другие потоки предшествует ей в очереди ожидания, таким образом, чтобы быстрее получения блокировки.</span><span class="sxs-lookup"><span data-stu-id="43949-530">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="43949-531">Поток можно проверить возвращаемое значение <xref:System.Threading.Monitor.Wait%2A> метод для определения того, получена ли его блокировки до истечения времени ожидания. Поток можно оценить условия, которые привело к введите ожидания, и если необходимости вызова <xref:System.Threading.Monitor.Wait%2A> метод снова.</span><span class="sxs-lookup"><span data-stu-id="43949-531">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="43949-532">Если поток вызывает `Wait`, он освобождает блокировку и входит в очередь ожидания.</span><span class="sxs-lookup"><span data-stu-id="43949-532">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="43949-533">На этом этапе следующий поток в очереди готовности (если таковой имеется) может контролировать блокировки.</span><span class="sxs-lookup"><span data-stu-id="43949-533">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="43949-534">Поток, вызвавший `Wait` вызывающий поток, удерживающий блокировку остается в очереди ожидания либо до <xref:System.Threading.Monitor.PulseAll%2A>, или он является следующим в очереди, и вызывающий поток, удерживающий блокировку <xref:System.Threading.Monitor.Pulse%2A>.</span><span class="sxs-lookup"><span data-stu-id="43949-534">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="43949-535">Тем не менее если `millisecondsTimeout` истечет раньше, чем другой поток вызывает этот объект <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A> метод, исходный поток перемещается в очередь готовности, чтобы снова получить блокировку.</span><span class="sxs-lookup"><span data-stu-id="43949-535">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43949-536">Если <xref:System.Threading.Timeout.Infinite> указывается для `millisecondsTimeout` параметра, этот метод неограниченно блокируется, если владелец блокировки вызывает <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="43949-536">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="43949-537">Если `millisecondsTimeout` равно нулю, поток, вызывающий `Wait` снимает блокировку и затем немедленно постановки в очередь готовности, чтобы снова получить блокировку.</span><span class="sxs-lookup"><span data-stu-id="43949-537">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="43949-538">Вызывающий поток выполняет `Wait` один раз, независимо от того, сколько раз <xref:System.Threading.Monitor.Enter%2A> был вызван для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-538">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="43949-539">По существу `Wait` метод сохраняет количество раз, вызывающий инструкцию <xref:System.Threading.Monitor.Enter%2A> в объекте и вызывает <xref:System.Threading.Monitor.Exit%2A> столько раз, сколько нужно, чтобы полностью освободить объект с блокировкой.</span><span class="sxs-lookup"><span data-stu-id="43949-539">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="43949-540">Вызывающий объект затем блокируется, ожидая получения объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-540">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="43949-541">Если вызывающий поток заново получает блокировку, система вызывает <xref:System.Threading.Monitor.Enter%2A> столько раз, сколько необходимо для восстановления сохраненного <xref:System.Threading.Monitor.Enter%2A> числа.</span><span class="sxs-lookup"><span data-stu-id="43949-541">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="43949-542">Вызов `Wait` снимает блокировку указанного объекта; если вызывающий объект является владельцем блокировки на другие объекты, они не освобождаются.</span><span class="sxs-lookup"><span data-stu-id="43949-542">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43949-543">Синхронизированный объект имеет несколько ссылок, в том числе ссылку на поток, удерживающий блокировку, ссылку на очередь готовности, который содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, который содержит в настоящее время потоки, ожидающие получать уведомления об изменении состояния объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-543">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="43949-544"><xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, И `Wait` методы должны быть вызваны из синхронизированного блока кода.</span><span class="sxs-lookup"><span data-stu-id="43949-544">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="43949-545">В примечаниях к описанию <xref:System.Threading.Monitor.Pulse%2A> метод объяснить, что произойдет, если <xref:System.Threading.Monitor.Pulse%2A> вызывается при отсутствии ожидающих потоков.</span><span class="sxs-lookup"><span data-stu-id="43949-545">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="43949-546">Примечания о выходе из контекста</span><span class="sxs-lookup"><span data-stu-id="43949-546">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="43949-547">`exitContext` Параметр действует только <xref:System.Threading.Monitor.Wait%2A> метод вызывается из внутри управляемого контекста не по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="43949-547">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="43949-548">Это может произойти, если ваш поток находится внутри вызова к экземпляру класса, производного от <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="43949-548">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="43949-549">Даже если в настоящее время выполняется метод в классе, который не является производным от <xref:System.ContextBoundObject>, например <xref:System.String>, может быть в контексте не по умолчанию если <xref:System.ContextBoundObject> стеке в текущем домене приложения.</span><span class="sxs-lookup"><span data-stu-id="43949-549">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="43949-550">Когда ваш код выполняется в контексте не по умолчанию, указав `true` для `exitContext` вызывающий поток выйти из управляемого контекста не по умолчанию (то есть для перехода в контекст по умолчанию) перед выполнением <xref:System.Threading.Monitor.Wait%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="43949-550">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="43949-551">Возвращается к исходному контексту не по умолчанию после вызова <xref:System.Threading.Monitor.Wait%2A> завершения метода.</span><span class="sxs-lookup"><span data-stu-id="43949-551">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="43949-552">Это может быть полезно, если класс контекстно привязанные имеет <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> применен атрибут.</span><span class="sxs-lookup"><span data-stu-id="43949-552">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="43949-553">В этом случае все вызовы к членам класса автоматически синхронизируются и области синхронизации находится в теле код для класса.</span><span class="sxs-lookup"><span data-stu-id="43949-553">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="43949-554">Если в стеке вызовов элемента вызывается <xref:System.Threading.Monitor.Wait%2A> метода с указанием `true` для `exitContext`, поток выходит из области синхронизации, позволяя потоку, который блокируется во время вызова любого члена объекта для продолжения.</span><span class="sxs-lookup"><span data-stu-id="43949-554">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="43949-555">Когда <xref:System.Threading.Monitor.Wait%2A> метод возвращает поток, которой был сделан вызов должен ожидать повторный ввод области синхронизации.</span><span class="sxs-lookup"><span data-stu-id="43949-555">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="43949-556">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="43949-556">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="43949-557"><see langword="Wait" /> — не вызывается из синхронизированного блока кода.</span><span class="sxs-lookup"><span data-stu-id="43949-557"><see langword="Wait" /> is not invoked from within a synchronized block of code.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="43949-558">Поток, который вызывает <see langword="Wait" />, позже прерывается из состояния ожидания.</span><span class="sxs-lookup"><span data-stu-id="43949-558">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span></span> <span data-ttu-id="43949-559">Это происходит, когда другой поток вызывает метод <see cref="M:System.Threading.Thread.Interrupt" /> этого потока.</span><span class="sxs-lookup"><span data-stu-id="43949-559">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="43949-560">Значение параметра <paramref name="millisecondsTimeout" /> отрицательно и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</span><span class="sxs-lookup"><span data-stu-id="43949-560">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="43949-561">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="43949-561">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * TimeSpan * bool -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="43949-562">Объект, в котором следует ожидать.</span><span class="sxs-lookup"><span data-stu-id="43949-562">The object on which to wait.</span></span></param>
        <param name="timeout"><span data-ttu-id="43949-563">Класс <see cref="T:System.TimeSpan" />, представляющий количество времени, до истечения которого поток поступает в очередь ожидания.</span><span class="sxs-lookup"><span data-stu-id="43949-563">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span></span></param>
        <param name="exitContext"><span data-ttu-id="43949-564">Значение <see langword="true" /> для выхода из домена синхронизации в текущем контексте перед ожиданием (в синхронизированном контексте) с его последующим повторным получением; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="43949-564"><see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="43949-565">Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова.</span><span class="sxs-lookup"><span data-stu-id="43949-565">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span> <span data-ttu-id="43949-566">Если указанные временные интервалы истекают, поток встает в очередь готовности.</span><span class="sxs-lookup"><span data-stu-id="43949-566">If the specified time-out interval elapses, the thread enters the ready queue.</span></span> <span data-ttu-id="43949-567">Дополнительно выходит из синхронизированного домена для синхронизации контекста до ожидания и получает домен впоследствии.</span><span class="sxs-lookup"><span data-stu-id="43949-567">Optionally exits the synchronization domain for the synchronized context before the wait and reacquires the domain afterward.</span></span></summary>
        <returns><span data-ttu-id="43949-568">Значение <see langword="true" />, если блокировка была получена заново до истечения заданного времени; значение <see langword="false" />, если блокировка была получена заново по истечении заданного времени.</span><span class="sxs-lookup"><span data-stu-id="43949-568"><see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span></span> <span data-ttu-id="43949-569">Этот метод не осуществляет возврат, если блокировка не была получена.</span><span class="sxs-lookup"><span data-stu-id="43949-569">The method does not return until the lock is reacquired.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43949-570">Этот метод не возвращает до получения монопольной блокировки на `obj` параметра.</span><span class="sxs-lookup"><span data-stu-id="43949-570">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="43949-571">Поток, который в данный момент принадлежит блокировка указанного объекта вызывает этот метод, чтобы освободить объект доступа к ней другим потоком.</span><span class="sxs-lookup"><span data-stu-id="43949-571">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="43949-572">Вызывающий поток блокируется, ожидая получения блокировки.</span><span class="sxs-lookup"><span data-stu-id="43949-572">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="43949-573">Этот метод вызывается, когда вызывающий объект должен ожидать изменения состояния, которые произойдут в результате операций другого потока.</span><span class="sxs-lookup"><span data-stu-id="43949-573">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="43949-574">Время ожидания гарантирует, что текущий поток не блокируется неограниченно, если другой поток освобождает блокировку без предварительного вызова функции <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="43949-574">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="43949-575">Он также перемещает поток в очередь готовности, минуя другие потоки предшествует ей в очереди ожидания, таким образом, чтобы быстрее получения блокировки.</span><span class="sxs-lookup"><span data-stu-id="43949-575">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="43949-576">Поток можно проверить возвращаемое значение <xref:System.Threading.Monitor.Wait%2A> метод для определения того, получена ли его блокировки до истечения времени ожидания. Поток можно оценить условия, которые привело к введите ожидания, и если необходимости вызова <xref:System.Threading.Monitor.Wait%2A> метод снова.</span><span class="sxs-lookup"><span data-stu-id="43949-576">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="43949-577">Если поток вызывает `Wait`, он освобождает блокировку и входит в очередь ожидания.</span><span class="sxs-lookup"><span data-stu-id="43949-577">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="43949-578">На этом этапе следующий поток в очереди готовности (если таковой имеется) может контролировать блокировки.</span><span class="sxs-lookup"><span data-stu-id="43949-578">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="43949-579">Поток, вызвавший `Wait` вызывающий поток, удерживающий блокировку остается в очереди ожидания либо до <xref:System.Threading.Monitor.PulseAll%2A>, или он является следующим в очереди, и вызывающий поток, удерживающий блокировку <xref:System.Threading.Monitor.Pulse%2A>.</span><span class="sxs-lookup"><span data-stu-id="43949-579">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="43949-580">Тем не менее если `timeout` пройдет, прежде чем другой поток вызывает этот объект <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A> метод, исходный поток перемещается в очередь готовности, чтобы снова получить блокировку.</span><span class="sxs-lookup"><span data-stu-id="43949-580">However, if `timeout` milliseconds elapse before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43949-581">Если <xref:System.TimeSpan> представляющий-1 миллисекунду для указан `timeout` параметра, этот метод неограниченно блокируется, если владелец блокировки вызывает <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="43949-581">If a <xref:System.TimeSpan> representing -1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="43949-582">Если `timeout` равно 0, поток, вызывающий `Wait` снимает блокировку и затем немедленно постановки в очередь готовности, чтобы снова получить блокировку.</span><span class="sxs-lookup"><span data-stu-id="43949-582">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="43949-583">Вызывающий поток выполняет `Wait` один раз, независимо от того, сколько раз <xref:System.Threading.Monitor.Enter%2A> был вызван для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-583">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="43949-584">По существу `Wait` метод сохраняет количество раз, вызывающий инструкцию <xref:System.Threading.Monitor.Enter%2A> в объекте и вызывает <xref:System.Threading.Monitor.Exit%2A> столько раз, сколько нужно, чтобы полностью освободить объект с блокировкой.</span><span class="sxs-lookup"><span data-stu-id="43949-584">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="43949-585">Вызывающий объект затем блокируется, ожидая получения объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-585">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="43949-586">Если вызывающий поток заново получает блокировку, система вызывает <xref:System.Threading.Monitor.Enter%2A> столько раз, сколько необходимо для восстановления сохраненного <xref:System.Threading.Monitor.Enter%2A> числа.</span><span class="sxs-lookup"><span data-stu-id="43949-586">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="43949-587">Вызов `Wait` снимает блокировку указанного объекта; если вызывающий объект является владельцем блокировки на другие объекты, они не освобождаются.</span><span class="sxs-lookup"><span data-stu-id="43949-587">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43949-588">Синхронизированный объект имеет несколько ссылок, в том числе ссылку на поток, удерживающий блокировку, ссылку на очередь готовности, который содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, который содержит в настоящее время потоки, ожидающие получать уведомления об изменении состояния объекта.</span><span class="sxs-lookup"><span data-stu-id="43949-588">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="43949-589"><xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, И `Wait` методы должны быть вызваны из синхронизированного блока кода.</span><span class="sxs-lookup"><span data-stu-id="43949-589">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="43949-590">В примечаниях к описанию <xref:System.Threading.Monitor.Pulse%2A> метод объяснить, что произойдет, если <xref:System.Threading.Monitor.Pulse%2A> вызывается при отсутствии ожидающих потоков.</span><span class="sxs-lookup"><span data-stu-id="43949-590">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="43949-591">Примечания о выходе из контекста</span><span class="sxs-lookup"><span data-stu-id="43949-591">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="43949-592">`exitContext` Параметр действует только <xref:System.Threading.Monitor.Wait%2A> метод вызывается из внутри управляемого контекста не по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="43949-592">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="43949-593">Это может произойти, если ваш поток находится внутри вызова к экземпляру класса, производного от <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="43949-593">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="43949-594">Даже если в настоящее время выполняется метод в классе, который не является производным от <xref:System.ContextBoundObject>, например <xref:System.String>, может быть в контексте не по умолчанию если <xref:System.ContextBoundObject> стеке в текущем домене приложения.</span><span class="sxs-lookup"><span data-stu-id="43949-594">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="43949-595">Когда ваш код выполняется в контексте не по умолчанию, указав `true` для `exitContext` вызывающий поток выйти из управляемого контекста не по умолчанию (то есть для перехода в контекст по умолчанию) перед выполнением <xref:System.Threading.Monitor.Wait%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="43949-595">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="43949-596">Возвращается к исходному контексту не по умолчанию после вызова <xref:System.Threading.Monitor.Wait%2A> завершения метода.</span><span class="sxs-lookup"><span data-stu-id="43949-596">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="43949-597">Это может быть полезно, если класс контекстно привязанные имеет <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> применен атрибут.</span><span class="sxs-lookup"><span data-stu-id="43949-597">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="43949-598">В этом случае все вызовы к членам класса автоматически синхронизируются и области синхронизации находится в теле код для класса.</span><span class="sxs-lookup"><span data-stu-id="43949-598">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="43949-599">Если в стеке вызовов элемента вызывается <xref:System.Threading.Monitor.Wait%2A> метода с указанием `true` для `exitContext`, поток выходит из области синхронизации, позволяя потоку, который блокируется во время вызова любого члена объекта для продолжения.</span><span class="sxs-lookup"><span data-stu-id="43949-599">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="43949-600">Когда <xref:System.Threading.Monitor.Wait%2A> метод возвращает поток, которой был сделан вызов должен ожидать повторный ввод области синхронизации.</span><span class="sxs-lookup"><span data-stu-id="43949-600">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="43949-601">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="43949-601">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="43949-602"><see langword="Wait" /> — не вызывается из синхронизированного блока кода.</span><span class="sxs-lookup"><span data-stu-id="43949-602"><see langword="Wait" /> is not invoked from within a synchronized block of code.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="43949-603">Для потока, который вызывает Wait, состояние ожидания позже прерывается.</span><span class="sxs-lookup"><span data-stu-id="43949-603">The thread that invokes Wait is later interrupted from the waiting state.</span></span> <span data-ttu-id="43949-604">Это происходит, когда другой поток вызывает метод <see cref="M:System.Threading.Thread.Interrupt" /> этого потока.</span><span class="sxs-lookup"><span data-stu-id="43949-604">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="43949-605">Значение параметра <paramref name="timeout" /> в миллисекундах отрицательно и не равно <see cref="F:System.Threading.Timeout.Infinite" /> (–1 миллисекунда) или больше <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="43949-605">The <paramref name="timeout" /> parameter is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (-1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="43949-606">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="43949-606">Managed Threading</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>