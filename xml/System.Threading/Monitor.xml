<Type Name="Monitor" FullName="System.Threading.Monitor">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5f67004b524b1dde95e7dc5e120aabea2beaccd5" /><Meta Name="ms.sourcegitcommit" Value="634678f7ccd2928c6b2cf792a301b079b63639af" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="07/26/2019" /><Meta Name="ms.locfileid" Value="68543696" /></Metadata><TypeSignature Language="C#" Value="public static class Monitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Monitor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Monitor" />
  <TypeSignature Language="VB.NET" Value="Public Class Monitor" />
  <TypeSignature Language="C++ CLI" Value="public ref class Monitor abstract sealed" />
  <TypeSignature Language="F#" Value="type Monitor = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="de2c1-101">Предоставляет механизм для синхронизации доступа к объектам.</span><span class="sxs-lookup"><span data-stu-id="de2c1-101">Provides a mechanism that synchronizes access to objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de2c1-102">Класс позволяет синхронизировать доступ к области кода, <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>вызывая и освобождая блокировку конкретного объекта путем вызова методов, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>и <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType>. <xref:System.Threading.Monitor></span><span class="sxs-lookup"><span data-stu-id="de2c1-102">The <xref:System.Threading.Monitor> class allows you to synchronize access to a region of code by taking and releasing a lock on a particular object by calling the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="de2c1-103">Блокировки объектов предоставляют возможность ограничить доступ к блоку кода, обычно называемому критическим разделом.</span><span class="sxs-lookup"><span data-stu-id="de2c1-103">Object locks provide the ability to restrict access to a block of code, commonly called a critical section.</span></span> <span data-ttu-id="de2c1-104">Пока поток владеет блокировкой объекта, другой поток не может получить эту блокировку.</span><span class="sxs-lookup"><span data-stu-id="de2c1-104">While a thread owns the lock for an object, no other thread can acquire that lock.</span></span> <span data-ttu-id="de2c1-105">Можно также использовать <xref:System.Threading.Monitor> класс, чтобы запретить другим потокам доступ к разделу кода приложения, выполняемому владельцем блокировки, если только другой поток не выполняет код, используя другой заблокированный объект.</span><span class="sxs-lookup"><span data-stu-id="de2c1-105">You can also use the <xref:System.Threading.Monitor> class to ensure that no other thread is allowed to access a section of application code being executed by the lock owner, unless the other thread is executing the code using a different locked object.</span></span>  
  
 <span data-ttu-id="de2c1-106">Содержание этой статьи</span><span class="sxs-lookup"><span data-stu-id="de2c1-106">In this article:</span></span>  
  
 <span data-ttu-id="de2c1-107">[Класс Monitor: Обзор](#Overview) </span><span class="sxs-lookup"><span data-stu-id="de2c1-107">[The Monitor class: An overview](#Overview) </span></span>  
 <span data-ttu-id="de2c1-108">[Объект Lock](#Lock) </span><span class="sxs-lookup"><span data-stu-id="de2c1-108">[The lock object](#Lock) </span></span>  
 <span data-ttu-id="de2c1-109">[Критическая секция](#CriticalSection) </span><span class="sxs-lookup"><span data-stu-id="de2c1-109">[The critical section](#CriticalSection) </span></span>  
 <span data-ttu-id="de2c1-110">[Pulse, PulseAll и Wait](#Pulse) </span><span class="sxs-lookup"><span data-stu-id="de2c1-110">[Pulse, PulseAll, and Wait](#Pulse) </span></span>  
 [<span data-ttu-id="de2c1-111">Мониторы и дескрипторы ожидания</span><span class="sxs-lookup"><span data-stu-id="de2c1-111">Monitors and wait handles</span></span>](#WaitHandles)  
  
<a name="Overview"></a>   
## <a name="the-monitor-class-an-overview"></a><span data-ttu-id="de2c1-112">Класс Monitor: Обзор</span><span class="sxs-lookup"><span data-stu-id="de2c1-112">The Monitor class: An overview</span></span>  
 <span data-ttu-id="de2c1-113"><xref:System.Threading.Monitor>имеет следующие возможности.</span><span class="sxs-lookup"><span data-stu-id="de2c1-113"><xref:System.Threading.Monitor> has the following features:</span></span>  
  
-   <span data-ttu-id="de2c1-114">Он связан с объектом по требованию.</span><span class="sxs-lookup"><span data-stu-id="de2c1-114">It is associated with an object on demand.</span></span>  
  
-   <span data-ttu-id="de2c1-115">Он не связан. Это означает, что его можно вызывать непосредственно из любого контекста.</span><span class="sxs-lookup"><span data-stu-id="de2c1-115">It is unbound, which means it can be called directly from any context.</span></span>  
  
-   <span data-ttu-id="de2c1-116">Экземпляр <xref:System.Threading.Monitor> класса не может быть создан; методы <xref:System.Threading.Monitor> класса являются статическими.</span><span class="sxs-lookup"><span data-stu-id="de2c1-116">An instance of the <xref:System.Threading.Monitor> class cannot be created; the methods of the <xref:System.Threading.Monitor> class are all static.</span></span> <span data-ttu-id="de2c1-117">Каждому методу передается синхронизированный объект, который управляет доступом к критической секции.</span><span class="sxs-lookup"><span data-stu-id="de2c1-117">Each method is passed the synchronized object that controls access to the critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="de2c1-118">Используйте класс для блокировки объектов, отличных от строк (то есть ссылочных типов, <xref:System.String>отличных от), а не типов значений. <xref:System.Threading.Monitor></span><span class="sxs-lookup"><span data-stu-id="de2c1-118">Use the <xref:System.Threading.Monitor> class to lock objects other than strings (that is, reference types other than <xref:System.String>), not value types.</span></span> <span data-ttu-id="de2c1-119">Дополнительные сведения см. в разделе перегрузки <xref:System.Threading.Monitor.Enter%2A> метода и [объекта блокировки](#Lock) далее в этой статье.</span><span class="sxs-lookup"><span data-stu-id="de2c1-119">For details, see the overloads of the <xref:System.Threading.Monitor.Enter%2A> method and [The lock object](#Lock) section later in this article.</span></span>  
  
 <span data-ttu-id="de2c1-120">В следующей таблице описаны действия, которые могут выполняться потоками, обращающимися к синхронизированным объектам.</span><span class="sxs-lookup"><span data-stu-id="de2c1-120">The following table describes the actions that can be taken by threads that access synchronized objects:</span></span>  
  
|<span data-ttu-id="de2c1-121">Действие</span><span class="sxs-lookup"><span data-stu-id="de2c1-121">Action</span></span>|<span data-ttu-id="de2c1-122">Описание</span><span class="sxs-lookup"><span data-stu-id="de2c1-122">Description</span></span>|  
|------------|-----------------|  
|<span data-ttu-id="de2c1-123"><xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A></span><span class="sxs-lookup"><span data-stu-id="de2c1-123"><xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A></span></span>|<span data-ttu-id="de2c1-124">Получает блокировку для объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-124">Acquires a lock for an object.</span></span> <span data-ttu-id="de2c1-125">Это действие также помечает начало критического раздела.</span><span class="sxs-lookup"><span data-stu-id="de2c1-125">This action also marks the beginning of a critical section.</span></span> <span data-ttu-id="de2c1-126">Ни один другой поток не может войти в критическую секцию, если он не будет выполнять инструкции в критическом разделе, используя другой заблокированный объект.</span><span class="sxs-lookup"><span data-stu-id="de2c1-126">No other thread can enter the critical section unless it is executing the instructions in the critical section using a different locked object.</span></span>|  
|<xref:System.Threading.Monitor.Wait%2A>|<span data-ttu-id="de2c1-127">Освобождает блокировку объекта, чтобы позволить другим потокам блокировать и получать доступ к объекту.</span><span class="sxs-lookup"><span data-stu-id="de2c1-127">Releases the lock on an object in order to permit other threads to lock and access the object.</span></span> <span data-ttu-id="de2c1-128">Вызывающий поток ожидает, пока другой поток пообращается к объекту.</span><span class="sxs-lookup"><span data-stu-id="de2c1-128">The calling thread waits while another thread accesses the object.</span></span> <span data-ttu-id="de2c1-129">Импульсные сигналы используются для уведомления ожидающих потоков об изменениях в состоянии объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-129">Pulse signals are used to notify waiting threads about changes to an object's state.</span></span>|  
|<span data-ttu-id="de2c1-130"><xref:System.Threading.Monitor.Pulse%2A>(сигнал),<xref:System.Threading.Monitor.PulseAll%2A></span><span class="sxs-lookup"><span data-stu-id="de2c1-130"><xref:System.Threading.Monitor.Pulse%2A> (signal), <xref:System.Threading.Monitor.PulseAll%2A></span></span>|<span data-ttu-id="de2c1-131">Отправляет сигнал одному или нескольким ожидающим потокам.</span><span class="sxs-lookup"><span data-stu-id="de2c1-131">Sends a signal to one or more waiting threads.</span></span> <span data-ttu-id="de2c1-132">Сигнал уведомляет ожидающий поток о том, что состояние заблокированного объекта изменилось, а владелец блокировки готов освободить блокировку.</span><span class="sxs-lookup"><span data-stu-id="de2c1-132">The signal notifies a waiting thread that the state of the locked object has changed, and the owner of the lock is ready to release the lock.</span></span> <span data-ttu-id="de2c1-133">Ожидающий поток помещается в очередь готовности объекта, чтобы она могла в конечном итоге получить блокировку для объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-133">The waiting thread is placed in the object's ready queue so that it might eventually receive the lock for the object.</span></span> <span data-ttu-id="de2c1-134">После блокировки потока он может проверить новое состояние объекта, чтобы узнать, было ли достигнуто требуемое состояние.</span><span class="sxs-lookup"><span data-stu-id="de2c1-134">Once the thread has the lock, it can check the new state of the object to see if the required state has been reached.</span></span>|  
|<xref:System.Threading.Monitor.Exit%2A>|<span data-ttu-id="de2c1-135">Освобождает блокировку объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-135">Releases the lock on an object.</span></span> <span data-ttu-id="de2c1-136">Это действие также помечает конец критической секции, защищенной заблокированным объектом.</span><span class="sxs-lookup"><span data-stu-id="de2c1-136">This action also marks the end of a critical section protected by the locked object.</span></span>|  
  
 <span data-ttu-id="de2c1-137">Начиная с [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], существует два набора перегрузок <xref:System.Threading.Monitor.Enter%2A> для методов и <xref:System.Threading.Monitor.TryEnter%2A> .</span><span class="sxs-lookup"><span data-stu-id="de2c1-137">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], there are two sets of overloads for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.TryEnter%2A> methods.</span></span> <span data-ttu-id="de2c1-138">Один набор `ref` перегрузок имеет параметр (in C#) или `ByRef` (в Visual Basic) <xref:System.Boolean> , который атомарно устанавливается в `true` значение, если блокировка получена, даже если при получении блокировки возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="de2c1-138">One set of overloads has a `ref` (in C#) or `ByRef` (in Visual Basic) <xref:System.Boolean> parameter that is atomically set to `true` if the lock is acquired, even if an exception is thrown when acquiring the lock.</span></span> <span data-ttu-id="de2c1-139">Используйте эти перегрузки, если важно снять блокировку во всех случаях, даже если ресурсы, защищающие блокировку, могут находиться в нестабильном состоянии.</span><span class="sxs-lookup"><span data-stu-id="de2c1-139">Use these overloads if it is critical to release the lock in all cases, even when the resources the lock is protecting might not be in a consistent state.</span></span>  
  
<a name="Lock"></a>   
## <a name="the-lock-object"></a><span data-ttu-id="de2c1-140">Объект Lock</span><span class="sxs-lookup"><span data-stu-id="de2c1-140">The lock object</span></span>  
 <span data-ttu-id="de2c1-141">Класс Monitor состоит из `static` методов (in C#) или `Shared` (в Visual Basic), которые работают с объектом, который управляет доступом к критическому разделу.</span><span class="sxs-lookup"><span data-stu-id="de2c1-141">The Monitor class consists of `static` (in C#) or  `Shared` (in Visual Basic) methods that operate on an object that controls access to the critical section.</span></span>  <span data-ttu-id="de2c1-142">Для каждого синхронизированного объекта сохраняются следующие сведения.</span><span class="sxs-lookup"><span data-stu-id="de2c1-142">The following information is maintained for each synchronized object:</span></span>  
  
-   <span data-ttu-id="de2c1-143">Ссылка на поток, который в настоящий момент удерживает блокировку.</span><span class="sxs-lookup"><span data-stu-id="de2c1-143">A reference to the thread that currently holds the lock.</span></span>  
  
-   <span data-ttu-id="de2c1-144">Ссылка на очередь готовности, которая содержит потоки, готовые к получению блокировки.</span><span class="sxs-lookup"><span data-stu-id="de2c1-144">A reference to a ready queue, which contains the threads that are ready to obtain the lock.</span></span>  
  
-   <span data-ttu-id="de2c1-145">Ссылка на очередь ожидания, которая содержит потоки, ожидающие уведомления об изменении состояния заблокированного объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-145">A reference to a waiting queue, which contains the threads that are waiting for notification of a change in the state of the locked object.</span></span>  
  
 <span data-ttu-id="de2c1-146"><xref:System.Threading.Monitor> блокирует объекты (то есть ссылочные типы), а не типы значений.</span><span class="sxs-lookup"><span data-stu-id="de2c1-146"><xref:System.Threading.Monitor> locks objects (that is, reference types), not value types.</span></span> <span data-ttu-id="de2c1-147">Хотя можно передать тип значения в <xref:System.Threading.Monitor.Enter%2A> и <xref:System.Threading.Monitor.Exit%2A>, он упаковывается отдельно для каждого вызова.</span><span class="sxs-lookup"><span data-stu-id="de2c1-147">While you can pass a value type to <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, it is boxed separately for each call.</span></span> <span data-ttu-id="de2c1-148">Поскольку при каждом вызове создается отдельный объект, <xref:System.Threading.Monitor.Enter%2A> никогда не выполняет блокировку, а код, который он предположительно защищает, на самом деле не синхронизируется.</span><span class="sxs-lookup"><span data-stu-id="de2c1-148">Since each call creates a separate object, <xref:System.Threading.Monitor.Enter%2A> never blocks, and the code it is supposedly protecting is not really synchronized.</span></span> <span data-ttu-id="de2c1-149">Кроме того, объект, переданный в <xref:System.Threading.Monitor.Exit%2A>, отличается от объекта, переданного в <xref:System.Threading.Monitor.Enter%2A>, поэтому <xref:System.Threading.Monitor> вызывает исключение <xref:System.Threading.SynchronizationLockException> с сообщением «Для не синхронизированного блока кода вызван метод синхронизации объектов».</span><span class="sxs-lookup"><span data-stu-id="de2c1-149">In addition, the object passed to <xref:System.Threading.Monitor.Exit%2A> is different from the object passed to <xref:System.Threading.Monitor.Enter%2A>, so <xref:System.Threading.Monitor> throws <xref:System.Threading.SynchronizationLockException> exception with the message "Object synchronization method was called from an unsynchronized block of code."</span></span>  
  
 <span data-ttu-id="de2c1-150">Приведенный ниже пример иллюстрирует данную проблему.</span><span class="sxs-lookup"><span data-stu-id="de2c1-150">The following example illustrates this problem.</span></span> <span data-ttu-id="de2c1-151">Он запускает десять задач, каждая из которых просто бездействует в течение 250 миллисекунд.</span><span class="sxs-lookup"><span data-stu-id="de2c1-151">It launches ten tasks, each of which just sleeps for 250 milliseconds.</span></span> <span data-ttu-id="de2c1-152">Затем каждая задача обновляет переменную счетчика `nTasks`, который предназначен для подсчета количества фактически запущенных и выполненных задач.</span><span class="sxs-lookup"><span data-stu-id="de2c1-152">Each task then updates a counter variable, `nTasks`, which is intended to count the number of tasks that actually launched and executed.</span></span> <span data-ttu-id="de2c1-153">Поскольку `nTasks` является глобальной переменной, которая может обновляться несколькими задачами одновременно, используется монитор, защищающий ее от одновременного изменения несколькими задачами.</span><span class="sxs-lookup"><span data-stu-id="de2c1-153">Because `nTasks` is a global variable that can be updated by multiple tasks simultaneously, a monitor is used to protect it from simultaneous modification by multiple tasks.</span></span> <span data-ttu-id="de2c1-154">Тем не менее, как показывают выходные данные в примере, каждая из задач вызывает исключение <xref:System.Threading.SynchronizationLockException>.</span><span class="sxs-lookup"><span data-stu-id="de2c1-154">However, as the output from the example shows, each of the tasks throws a <xref:System.Threading.SynchronizationLockException> exception.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#2](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badlock1.cs#2)]
 [!code-vb[Conceptual.Monitors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badlock1.vb#2)]  
  
 <span data-ttu-id="de2c1-155">Каждая задача вызывает исключение <xref:System.Threading.SynchronizationLockException> из-за того, что переменная `nTasks` упаковывается перед вызовом метода <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> в каждой задаче.</span><span class="sxs-lookup"><span data-stu-id="de2c1-155">Each task throws a <xref:System.Threading.SynchronizationLockException> exception because the `nTasks` variable is boxed before the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method in each task.</span></span> <span data-ttu-id="de2c1-156">Другими словами, в каждый вызов метода передается отдельная переменная, которая независима от остальных.</span><span class="sxs-lookup"><span data-stu-id="de2c1-156">In other words, each method call is passed a separate variable that is independent of the others.</span></span> <span data-ttu-id="de2c1-157">`nTasks` снова упаковывается в вызове метода <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="de2c1-157">`nTasks` is boxed again in the call to the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="de2c1-158">И снова при этом создается десять новых упакованных переменных, которые не зависят друг от друга, `nTasks`, и десять упакованных переменных, созданных при вызове метода <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="de2c1-158">Once again, this creates ten new boxed variables, which are independent of each other, `nTasks`, and the ten boxed variables created in the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="de2c1-159">Затем вызывается исключение, поскольку наш код пытается снять блокировку для вновь созданной переменной, которая ранее не была заблокирована.</span><span class="sxs-lookup"><span data-stu-id="de2c1-159">The exception is thrown, then, because our code is attempting to release a lock on a newly created variable that was not previously locked.</span></span>  
  
 <span data-ttu-id="de2c1-160">Хотя можно упаковать переменную типа значения перед вызовом <xref:System.Threading.Monitor.Enter%2A> и <xref:System.Threading.Monitor.Exit%2A>, как показано в следующем примере, и передать тот же упакованный объект в оба метода, такой подход не дает никаких преимуществ.</span><span class="sxs-lookup"><span data-stu-id="de2c1-160">Although you can box a value type variable before calling <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, as shown in the following example, and pass the same boxed object to both methods, there is no advantage to doing this.</span></span> <span data-ttu-id="de2c1-161">Изменения неупакованной переменной не отражаются в упакованной копии, и возможность изменения значения упакованной копии отсутствует.</span><span class="sxs-lookup"><span data-stu-id="de2c1-161">Changes to the unboxed variable are not reflected in the boxed copy, and there is no way to change the value of the boxed copy.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#3](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badbox1.cs#3)]
 [!code-vb[Conceptual.Monitors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badbox1.vb#3)]  
  
 <span data-ttu-id="de2c1-162">При выборе объекта для синхронизации следует блокировать только закрытые или внутренние объекты.</span><span class="sxs-lookup"><span data-stu-id="de2c1-162">When selecting an object on which to synchronize, you should lock only on private or internal objects.</span></span> <span data-ttu-id="de2c1-163">Блокировка внешних объектов может привести к взаимоблокировкам, так как несвязанный код может выбирать те же объекты для блокировки в различных целях.</span><span class="sxs-lookup"><span data-stu-id="de2c1-163">Locking on external objects might result in deadlocks, because unrelated code could choose the same objects to lock on for different purposes.</span></span>  
  
 <span data-ttu-id="de2c1-164">Обратите внимание, что можно выполнить синхронизацию для объекта в нескольких доменах приложений, если объект, используемый для <xref:System.MarshalByRefObject>блокировки, является производным от.</span><span class="sxs-lookup"><span data-stu-id="de2c1-164">Note that you can synchronize on an object in multiple application domains if the object used for the lock derives from <xref:System.MarshalByRefObject>.</span></span>  
  
<a name="CriticalSection"></a>   
## <a name="the-critical-section"></a><span data-ttu-id="de2c1-165">Критическая секция</span><span class="sxs-lookup"><span data-stu-id="de2c1-165">The critical section</span></span>  
 <span data-ttu-id="de2c1-166">Используйте методы <xref:System.Threading.Monitor.Exit%2A> и для обозначения начала и конца критической секции. <xref:System.Threading.Monitor.Enter%2A></span><span class="sxs-lookup"><span data-stu-id="de2c1-166">Use the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods to mark the beginning and end of a critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="de2c1-167">Функциональные возможности, предоставляемые <xref:System.Threading.Monitor.Enter%2A> <xref:System.Threading.Monitor.Exit%2A> методами и, идентичны функциям, предоставляемым оператором C# [Lock](~/docs/csharp/language-reference/keywords/lock-statement.md) в и оператором [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) в Visual Basic, за исключением того, что языковые конструкции заключают <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType>перегрузка метода и <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> `try`метод в...`finally`</span><span class="sxs-lookup"><span data-stu-id="de2c1-167">The functionality provided by the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods is identical to that provided by the [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement in C# and the [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement in Visual Basic, except that the language constructs wrap the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType> method overload and the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method in a `try`…`finally`</span></span> <span data-ttu-id="de2c1-168">, чтобы убедиться, что монитор освобожден.</span><span class="sxs-lookup"><span data-stu-id="de2c1-168">block to ensure that the monitor is released.</span></span>  
  
 <span data-ttu-id="de2c1-169">Если критическая секция является набором смежных инструкций, то блокировка, полученная <xref:System.Threading.Monitor.Enter%2A> методом, гарантирует, что только один поток может выполнить вложенный код с заблокированным объектом.</span><span class="sxs-lookup"><span data-stu-id="de2c1-169">If the critical section is a set of contiguous instructions, then the lock acquired by the <xref:System.Threading.Monitor.Enter%2A> method guarantees that only a single thread can execute the enclosed code with the locked object.</span></span> <span data-ttu-id="de2c1-170">В этом случае рекомендуется поместить этот код в `try` блок и поместить вызов <xref:System.Threading.Monitor.Exit%2A> метода в `finally` блок.</span><span class="sxs-lookup"><span data-stu-id="de2c1-170">In this case, we recommend that you place that code in a `try` block and place the call to the <xref:System.Threading.Monitor.Exit%2A> method in a `finally` block.</span></span> <span data-ttu-id="de2c1-171">Это гарантирует снятие блокировки даже при возникновении исключения.</span><span class="sxs-lookup"><span data-stu-id="de2c1-171">This ensures that the lock is released even if an exception occurs.</span></span> <span data-ttu-id="de2c1-172">Этот шаблон показан в следующем фрагменте кода.</span><span class="sxs-lookup"><span data-stu-id="de2c1-172">The following code fragment illustrates this pattern.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#2)]
 [!code-vb[System.Threading.Monitor.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#2)]  
  
 <span data-ttu-id="de2c1-173">Это средство обычно используется для синхронизации доступа к статическому методу или экземпляру класса.</span><span class="sxs-lookup"><span data-stu-id="de2c1-173">This facility is typically used to synchronize access to a static or instance method of a class.</span></span>  
  
 <span data-ttu-id="de2c1-174">Если критическая секция охватывает весь метод, механизм блокировки можно достичь, поместив в <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType> метод и <xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized> указав <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>значение в конструкторе.</span><span class="sxs-lookup"><span data-stu-id="de2c1-174">If a critical section spans an entire method, the locking facility can be achieved by placing the <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType> on the method, and specifying the <xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized> value in the constructor of <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>.</span></span> <span data-ttu-id="de2c1-175">При использовании этого атрибута <xref:System.Threading.Monitor.Enter%2A> вызовы методов и <xref:System.Threading.Monitor.Exit%2A> не требуются.</span><span class="sxs-lookup"><span data-stu-id="de2c1-175">When you use this attribute, the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> method calls are not needed.</span></span> <span data-ttu-id="de2c1-176">Этот шаблон показан в следующем фрагменте кода:</span><span class="sxs-lookup"><span data-stu-id="de2c1-176">The following code fragment illustrates this pattern:</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#3)]
 [!code-vb[System.Threading.Monitor.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#3)]  
  
 <span data-ttu-id="de2c1-177">Обратите внимание, что атрибут заставляет текущий поток удерживать блокировку до тех пор, пока метод не вернет значение. Если блокировку можно освободить <xref:System.Threading.Monitor> раньше, используйте класс, C# оператор [блокировки](~/docs/csharp/language-reference/keywords/lock-statement.md) или оператор Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) внутри метода вместо атрибута.</span><span class="sxs-lookup"><span data-stu-id="de2c1-177">Note that the attribute causes the current thread to hold the lock until the method returns; if the lock can be released sooner, use the <xref:System.Threading.Monitor> class, the C# [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement, or the Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement inside of the method instead of the attribute.</span></span>  
  
 <span data-ttu-id="de2c1-178">Хотя для <xref:System.Threading.Monitor.Enter%2A> операторов и <xref:System.Threading.Monitor.Exit%2A> , которые блокируют и освобождают данный объект, можно использовать перекрестные элементы или границы класса или и то, и другое, такой подход не рекомендуется.</span><span class="sxs-lookup"><span data-stu-id="de2c1-178">While it is possible for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> statements that lock and release a given object to cross member or class boundaries or both, this practice is not recommended.</span></span>  
  
<a name="Pulse"></a>   
## <a name="pulse-pulseall-and-wait"></a><span data-ttu-id="de2c1-179">Pulse, PulseAll и Wait</span><span class="sxs-lookup"><span data-stu-id="de2c1-179">Pulse, PulseAll, and Wait</span></span>  
 <span data-ttu-id="de2c1-180">После того как поток владеет блокировкой и вошел в критический раздел, который защищается блокировкой, он может вызывать <xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>методы <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>, и <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> .</span><span class="sxs-lookup"><span data-stu-id="de2c1-180">Once a thread owns the lock and has entered the critical section that the lock protects, it can call the <xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="de2c1-181">Когда поток, содержащий вызовы <xref:System.Threading.Monitor.Wait%2A>блокировки, снимается и поток добавляется в очередь ожидания синхронизированного объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-181">When the thread that holds the lock calls <xref:System.Threading.Monitor.Wait%2A>, the lock is released and the thread is added to the waiting queue of the synchronized object.</span></span> <span data-ttu-id="de2c1-182">Первый поток в очереди готовности, если таковой имеется, получает блокировку и вводит критическую секцию.</span><span class="sxs-lookup"><span data-stu-id="de2c1-182">The first thread in the ready queue, if any, acquires the lock and enters the critical section.</span></span> <span data-ttu-id="de2c1-183">Поток перемещается из очереди ожидания в очередь готовности, если перемещаемый <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType> объект (поток должен находиться в заголовке очереди ожидания) <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> или метод вызывается потоком, который владеет блокировкой.</span><span class="sxs-lookup"><span data-stu-id="de2c1-183">The thread is moved from the waiting queue to the ready queue when either the <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType> (to be moved, the thread must be at the head of the waiting queue) or the <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> method is called by the thread that holds the lock.</span></span> <span data-ttu-id="de2c1-184"><xref:System.Threading.Monitor.Wait%2A> Метод возвращает, когда вызывающий поток снова получает блокировку.</span><span class="sxs-lookup"><span data-stu-id="de2c1-184">The <xref:System.Threading.Monitor.Wait%2A> method returns when the calling thread reacquires the lock.</span></span>  
  
 <span data-ttu-id="de2c1-185">При вызове потока, содержащего вызовы <xref:System.Threading.Monitor.Pulse%2A>блокировки, поток в заголовке очереди ожидания перемещается в очередь готовности.</span><span class="sxs-lookup"><span data-stu-id="de2c1-185">When the thread that holds the lock calls <xref:System.Threading.Monitor.Pulse%2A>, the thread at the head of the waiting queue is moved to the ready queue.</span></span> <span data-ttu-id="de2c1-186">Вызов <xref:System.Threading.Monitor.PulseAll%2A> метода перемещает все потоки из очереди ожидания в очередь готовности.</span><span class="sxs-lookup"><span data-stu-id="de2c1-186">The call to the <xref:System.Threading.Monitor.PulseAll%2A> method moves all the threads from the waiting queue to the ready queue.</span></span>  
  
<a name="WaitHandles"></a>   
## <a name="monitors-and-wait-handles"></a><span data-ttu-id="de2c1-187">Мониторы и дескрипторы ожидания</span><span class="sxs-lookup"><span data-stu-id="de2c1-187">Monitors and wait handles</span></span>  
 <span data-ttu-id="de2c1-188">Важно отметить различие между использованием <xref:System.Threading.Monitor> класса и <xref:System.Threading.WaitHandle> объектов.</span><span class="sxs-lookup"><span data-stu-id="de2c1-188">It is important to note the distinction between the use of the <xref:System.Threading.Monitor> class and <xref:System.Threading.WaitHandle> objects.</span></span>  
  
-   <span data-ttu-id="de2c1-189"><xref:System.Threading.Monitor> Класс является полностью управляемым, полным переносимым и может быть более эффективным с точки зрения требований к ресурсам операционной системы.</span><span class="sxs-lookup"><span data-stu-id="de2c1-189">The <xref:System.Threading.Monitor> class is purely managed, fully portable, and might be more efficient in terms of operating-system resource requirements.</span></span>  
  
-   <span data-ttu-id="de2c1-190">Объекты <xref:System.Threading.WaitHandle> представляют объекты ожидания операционной системы, удобны для синхронизации между управляемым и неуправляемым кодом и предоставляют некоторые расширенные функции операционной системы, например возможность ожидания сразу нескольких объектов.</span><span class="sxs-lookup"><span data-stu-id="de2c1-190"><xref:System.Threading.WaitHandle> objects represent operating-system waitable objects, are useful for synchronizing between managed and unmanaged code, and expose some advanced operating-system features like the ability to wait on many objects at once.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="de2c1-191">В следующем примере <xref:System.Threading.Monitor> класс используется для синхронизации доступа к одному экземпляру генератора случайных чисел, представленного <xref:System.Random> классом.</span><span class="sxs-lookup"><span data-stu-id="de2c1-191">The following example uses the <xref:System.Threading.Monitor> class to synchronize access to a single instance of a random number generator represented by the <xref:System.Random> class.</span></span> <span data-ttu-id="de2c1-192">В примере создается десять задач, каждый из которых асинхронно выполняется в потоке пула потоков.</span><span class="sxs-lookup"><span data-stu-id="de2c1-192">The example creates ten tasks, each of which executes asynchronously on a thread pool thread.</span></span> <span data-ttu-id="de2c1-193">Каждая задача создает 10 000 случайных чисел, вычисляет их среднее значение и обновляет две переменные уровня процедуры, которые сохраняют общую сумму количества созданных случайных чисел и их сумму.</span><span class="sxs-lookup"><span data-stu-id="de2c1-193">Each task generates 10,000 random numbers, calculates their average, and updates two procedure-level variables that maintain a running total of the number of random numbers generated and their sum.</span></span> <span data-ttu-id="de2c1-194">После выполнения всех задач эти два значения затем используются для вычисления общего значения.</span><span class="sxs-lookup"><span data-stu-id="de2c1-194">After all tasks have executed, these two values are then used to calculate the overall mean.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/example1.cs#1)]
 [!code-vb[System.Threading.Monitor.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/example1.vb#1)]  
  
 <span data-ttu-id="de2c1-195">Так как доступ к ним можно получить из любой задачи, выполняемой в потоке пула потоков, `total` доступ `n` к переменным и также должен быть синхронизирован.</span><span class="sxs-lookup"><span data-stu-id="de2c1-195">Because they can be accessed from any task running on a thread pool thread, access to the variables `total` and `n` must also be synchronized.</span></span> <span data-ttu-id="de2c1-196">Для этой цели используется метод.<xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="de2c1-196">The <xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType> method is used for this purpose.</span></span>  
  
 <span data-ttu-id="de2c1-197">В следующем примере показано <xref:System.Threading.Monitor> комбинированное использование класса (реализованного `lock` с помощью <xref:System.Threading.AutoResetEvent> конструкции языка `SyncLock` или), <xref:System.Threading.Interlocked> класса и класса.</span><span class="sxs-lookup"><span data-stu-id="de2c1-197">The following example demonstrates the combined use of the <xref:System.Threading.Monitor> class (implemented with the `lock` or `SyncLock` language construct), the <xref:System.Threading.Interlocked> class, and the <xref:System.Threading.AutoResetEvent> class.</span></span> <span data-ttu-id="de2c1-198">Он определяет два класса `internal` (в C#) или `Friend` (в Visual Basic), `SyncResource` и `UnSyncResource`, которые соответственно предоставляют синхронизированный и несинхронизированный доступ к ресурсу.</span><span class="sxs-lookup"><span data-stu-id="de2c1-198">It defines two `internal` (in C#) or `Friend` (in Visual Basic) classes, `SyncResource` and `UnSyncResource`, that respectively provide synchronized and unsynchronized access to a resource.</span></span> <span data-ttu-id="de2c1-199">Чтобы обеспечить демонстрацию в примере различия между синхронизированным и несинхронизированным доступом (что может случиться, если каждый вызов метода завершается быстро), метод включает случайную задержку: для потоков, свойство <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> которых имеет четное значение, метод вызывает <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> для введения задержки в 2 000 миллисекунд.</span><span class="sxs-lookup"><span data-stu-id="de2c1-199">To ensure that the example illustrates the difference between the synchronized and unsynchronized access (which could be the case if each method call completes rapidly), the method includes a random delay: for threads whose <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> property is even, the method calls <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> to introduce a delay of 2,000 milliseconds.</span></span> <span data-ttu-id="de2c1-200">Обратите внимание, что поскольку класс `SyncResource` не является общим, ни один клиентский код не выполняет блокировку в синхронизированном ресурсе; внутренний класс сам выполняет блокировку.</span><span class="sxs-lookup"><span data-stu-id="de2c1-200">Note that, because the `SyncResource` class is not public, none of the client code takes a lock on the synchronized resource; the internal class itself takes the lock.</span></span> <span data-ttu-id="de2c1-201">Это предотвращает блокировка общедоступного объекта вредоносным кодом.</span><span class="sxs-lookup"><span data-stu-id="de2c1-201">This prevents malicious code from taking a lock on a public object.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#1](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/source.cs#1)]
 [!code-vb[Conceptual.Monitors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/source.vb#1)]  
  
 <span data-ttu-id="de2c1-202">В примере определяется переменная `numOps`, задающая число потоков, которые будут пытаться получить доступ к ресурсу.</span><span class="sxs-lookup"><span data-stu-id="de2c1-202">The example defines a variable, `numOps`, that defines the number of threads that will attempt to access the resource.</span></span> <span data-ttu-id="de2c1-203">Поток приложения вызывает метод <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> для синхронизированного и несинхронизированного доступа по пять раз.</span><span class="sxs-lookup"><span data-stu-id="de2c1-203">The application thread calls the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method for synchronized and unsynchronized access five times each.</span></span> <span data-ttu-id="de2c1-204">Метод <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> имеет единственный параметр, делегат, который не принимает никаких параметров и не возвращает значений.</span><span class="sxs-lookup"><span data-stu-id="de2c1-204">The <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method has a single parameter, a delegate that accepts no parameters and returns no value.</span></span> <span data-ttu-id="de2c1-205">Для синхронизированного доступа он вызывает метод `SyncUpdateResource`; для несинхронизированного доступа он вызывает метод `UnSyncUpdateResource`.</span><span class="sxs-lookup"><span data-stu-id="de2c1-205">For synchronized access, it invokes the `SyncUpdateResource` method; for unsynchronized access, it invokes the `UnSyncUpdateResource` method.</span></span> <span data-ttu-id="de2c1-206">После каждого набора вызовов метода поток приложения вызывает метод [AutoResetEvent. WaitOne](xref:System.Threading.WaitHandle.WaitOne*) , чтобы он блокировался до получения сигнала от <xref:System.Threading.AutoResetEvent> экземпляра.</span><span class="sxs-lookup"><span data-stu-id="de2c1-206">After each set of method calls, the application thread calls the [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne*) method so that it blocks until the <xref:System.Threading.AutoResetEvent> instance is signaled.</span></span>  
  
 <span data-ttu-id="de2c1-207">Каждый вызов метода `SyncUpdateResource` вызывает внутренний метод `SyncResource.Access`, а затем вызывает метод <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> для уменьшения счетчика `numOps`.</span><span class="sxs-lookup"><span data-stu-id="de2c1-207">Each call to the `SyncUpdateResource` method calls the internal `SyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="de2c1-208"><xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> Метод используется для уменьшения значения счетчика, так как в противном случае невозможно убедиться, что второй поток будет обращаться к значению до того, как значение декремента первого потока было сохранено в переменной.</span><span class="sxs-lookup"><span data-stu-id="de2c1-208">The <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter, because otherwise you cannot be certain that a second thread will access the value before a first thread's decremented value has been stored in the variable.</span></span> <span data-ttu-id="de2c1-209">Когда последний синхронизированный рабочий поток уменьшает счетчик до нуля, указывая, что все синхронизированные потоки завершили доступ к ресурсу, `SyncUpdateResource` метод <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> вызывает метод, который сигнализирует основному потоку продолжить. InstancePersistenceCommand.</span><span class="sxs-lookup"><span data-stu-id="de2c1-209">When the last synchronized worker thread decrements the counter to zero, indicating that all synchronized threads have completed accessing the resource, the `SyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="de2c1-210">Каждый вызов метода `UnSyncUpdateResource` вызывает внутренний метод `UnSyncResource.Access`, а затем вызывает метод <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> для уменьшения счетчика `numOps`.</span><span class="sxs-lookup"><span data-stu-id="de2c1-210">Each call to the `UnSyncUpdateResource` method calls the internal `UnSyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="de2c1-211">Опять же, <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> метод используется для уменьшения значения счетчика, чтобы второй поток не получил доступа к значению до того, как переменной будет присвоено уменьшенное значение первого потока.</span><span class="sxs-lookup"><span data-stu-id="de2c1-211">Once again, the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter to ensure that a second thread does not access the value before a first thread's decremented value has been assigned to the variable.</span></span> <span data-ttu-id="de2c1-212">Когда последний несинхронизированный рабочий поток уменьшает значение счетчика до нуля, указывая, что больше несинхронизированных потоков не требуется обращаться к ресурсу, `UnSyncUpdateResource` метод <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> вызывает метод, который сигнализирует основному потоку продолжить выполнение. .</span><span class="sxs-lookup"><span data-stu-id="de2c1-212">When the last unsynchronized worker thread decrements the counter to zero, indicating that no more unsynchronized threads need to access the resource, the `UnSyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="de2c1-213">Как показывает результат этого примера, синхронизированный доступ обеспечивает, что вызывающий поток выходит из защищенного ресурса до того, как другой поток получит доступ к этому ресурсу; каждый поток ожидает своего предшественника.</span><span class="sxs-lookup"><span data-stu-id="de2c1-213">As the output from  the example shows, synchronized access ensures that the calling thread exits the protected resource before another thread can access it; each thread waits on its predecessor.</span></span> <span data-ttu-id="de2c1-214">С другой стороны, без блокировки метод `UnSyncResource.Access` вызывается в том порядке, в котором потоки получают к нему доступ.</span><span class="sxs-lookup"><span data-stu-id="de2c1-214">On the other hand, without the lock, the `UnSyncResource.Access` method is called in the order in which threads reach it.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="de2c1-215">Данный тип потокобезопасен.</span><span class="sxs-lookup"><span data-stu-id="de2c1-215">This type is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Threading.Thread" />
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="de2c1-216">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="de2c1-216">Managed Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/threading-objects-and-features.md"><span data-ttu-id="de2c1-217">Объекты и функциональные возможности работы с потоками</span><span class="sxs-lookup"><span data-stu-id="de2c1-217">Threading Objects and Features</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="Enter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="de2c1-218">Получает монопольную блокировку указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-218">Acquires an exclusive lock on a specified object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Enter : obj -&gt; unit" Usage="System.Threading.Monitor.Enter obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="de2c1-219">Объект, для которого получается блокировка монитора.</span><span class="sxs-lookup"><span data-stu-id="de2c1-219">The object on which to acquire the monitor lock.</span></span></param>
        <summary><span data-ttu-id="de2c1-220">Получает эксклюзивную блокировку указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-220">Acquires an exclusive lock on the specified object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de2c1-221">Используйте `Enter` , чтобы <xref:System.Threading.Monitor> получить объект для объекта, переданного в качестве параметра.</span><span class="sxs-lookup"><span data-stu-id="de2c1-221">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the parameter.</span></span> <span data-ttu-id="de2c1-222">Если другой поток выполнил `Enter` в объекте объект, но еще не выполнил соответствующий <xref:System.Threading.Monitor.Exit%2A>параметр, текущий поток будет заблокирован до тех пор, пока другой поток не освободит объект.</span><span class="sxs-lookup"><span data-stu-id="de2c1-222">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="de2c1-223">Допустимо, чтобы один и тот же поток вызывал `Enter` больше одного раза без блокировки. Тем не менее, необходимо вызвать равное `Exit` число вызовов, прежде чем другие потоки, ожидающие объекта, будут разблокированы.</span><span class="sxs-lookup"><span data-stu-id="de2c1-223">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="de2c1-224">Используйте <xref:System.Threading.Monitor> для блокировки объектов (то есть ссылочных типов), а не типов значений.</span><span class="sxs-lookup"><span data-stu-id="de2c1-224">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="de2c1-225">При передаче переменной типа значения в `Enter`она упаковывается как объект.</span><span class="sxs-lookup"><span data-stu-id="de2c1-225">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="de2c1-226">Если вы `Enter` снова передаете одну и ту же переменную, она упаковывается как отдельный объект, а поток не блокируется.</span><span class="sxs-lookup"><span data-stu-id="de2c1-226">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="de2c1-227">В этом случае код, который `Monitor` предполагается защищать, не защищен.</span><span class="sxs-lookup"><span data-stu-id="de2c1-227">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="de2c1-228">Более того, при передаче переменной в `Exit`можно создать другой отдельный объект.</span><span class="sxs-lookup"><span data-stu-id="de2c1-228">Furthermore, when you pass the variable to `Exit`, still another separate object is created.</span></span> <span data-ttu-id="de2c1-229">Поскольку объект, переданный `Exit` в, отличается от объекта, переданного `Monitor` в <xref:System.Threading.SynchronizationLockException> `Enter`, вызывает исключение.</span><span class="sxs-lookup"><span data-stu-id="de2c1-229">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="de2c1-230">Дополнительные сведения см. в разделе « [мониторы](xref:System.Threading.Monitor)».</span><span class="sxs-lookup"><span data-stu-id="de2c1-230">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="de2c1-231"><xref:System.Threading.Thread.Interrupt%2A>может прерывать потоки, ожидающие ввода `Monitor` объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-231"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="de2c1-232"><xref:System.Threading.ThreadInterruptedException> Будет выдано исключение.</span><span class="sxs-lookup"><span data-stu-id="de2c1-232">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
 <span data-ttu-id="de2c1-233">C# Использовать...`try``finally`</span><span class="sxs-lookup"><span data-stu-id="de2c1-233">Use a C# `try`…`finally`</span></span> <span data-ttu-id="de2c1-234">блок (`Try`...`Finally`</span><span class="sxs-lookup"><span data-stu-id="de2c1-234">block (`Try`…`Finally`</span></span> <span data-ttu-id="de2c1-235">в Visual Basic) убедитесь, что вы выпустите монитор, или используйте C# `lock` оператор (`SyncLock` оператор в <xref:System.Threading.Monitor.Enter%2A> Visual Basic), который `try`создает оболочку для методов <xref:System.Threading.Monitor.Exit%2A> и в...`finally`</span><span class="sxs-lookup"><span data-stu-id="de2c1-235">in Visual Basic) to ensure that you release the monitor, or use the C# `lock` statement (`SyncLock` statement in Visual Basic), which wraps the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods in a `try`…`finally`</span></span> <span data-ttu-id="de2c1-236">блок.</span><span class="sxs-lookup"><span data-stu-id="de2c1-236">block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="de2c1-237">В следующем примере показано использование метода `Enter`.</span><span class="sxs-lookup"><span data-stu-id="de2c1-237">The following example demonstrates how to use the `Enter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="de2c1-238">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-238">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="de2c1-239">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="de2c1-239">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member Enter : obj *  -&gt; unit" Usage="System.Threading.Monitor.Enter (obj, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="de2c1-240">Объект, в котором следует ожидать.</span><span class="sxs-lookup"><span data-stu-id="de2c1-240">The object on which to wait.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="de2c1-241">Результат попытки получить блокировку, переданную по ссылке.</span><span class="sxs-lookup"><span data-stu-id="de2c1-241">The result of the attempt to acquire the lock, passed by reference.</span></span> <span data-ttu-id="de2c1-242">Входное значение должно равняться <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-242">The input must be <see langword="false" />.</span></span> <span data-ttu-id="de2c1-243">Выходное значение <see langword="true" />, если блокировка получена; в противном случае — выходное значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-243">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span></span> <span data-ttu-id="de2c1-244">Выходное значение задается, даже если при попытке получить блокировку возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="de2c1-244">The output is set even if an exception occurs during the attempt to acquire the lock.</span></span>  
  
<span data-ttu-id="de2c1-245">Примечание. Если исключение не возникает, выходное значение этого метода всегда равно <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-245">Note   If no exception occurs, the output of this method is always <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="de2c1-246">Получает монопольную блокировку указанного объекта и единым блоком задает значение, указывающее, была ли выполнена блокировка.</span><span class="sxs-lookup"><span data-stu-id="de2c1-246">Acquires an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de2c1-247">Используйте `Enter` , чтобы <xref:System.Threading.Monitor> получить объект для объекта, переданного `obj` в качестве параметра.</span><span class="sxs-lookup"><span data-stu-id="de2c1-247">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the `obj` parameter.</span></span> <span data-ttu-id="de2c1-248">Если другой поток выполнил `Enter` в объекте объект, но еще не выполнил соответствующий <xref:System.Threading.Monitor.Exit%2A>параметр, текущий поток будет заблокирован до тех пор, пока другой поток не освободит объект.</span><span class="sxs-lookup"><span data-stu-id="de2c1-248">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="de2c1-249">Допустимо, чтобы один и тот же поток вызывал `Enter` больше одного раза без блокировки. Тем не менее, необходимо вызвать равное `Exit` число вызовов, прежде чем другие потоки, ожидающие объекта, будут разблокированы.</span><span class="sxs-lookup"><span data-stu-id="de2c1-249">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="de2c1-250">Если блокировка не была выполнена из-за возникновения исключения, переменная, указанная для `lockTaken` параметра, находится `false` после завершения этого метода.</span><span class="sxs-lookup"><span data-stu-id="de2c1-250">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="de2c1-251">Это позволяет программе определить во всех случаях, требуется ли снять блокировку.</span><span class="sxs-lookup"><span data-stu-id="de2c1-251">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span> <span data-ttu-id="de2c1-252">Если этот метод возвращает исключение без создания исключения, то переменная, указанная `lockTaken` для параметра, `true`всегда имеет значение, и нет необходимости тестировать ее.</span><span class="sxs-lookup"><span data-stu-id="de2c1-252">If this method returns without throwing an exception, the variable specified for the `lockTaken` parameter is always `true`, and there is no need to test it.</span></span>  
  
 <span data-ttu-id="de2c1-253">Используйте <xref:System.Threading.Monitor> для блокировки объектов (то есть ссылочных типов), а не типов значений.</span><span class="sxs-lookup"><span data-stu-id="de2c1-253">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="de2c1-254">При передаче переменной типа значения в `Enter`она упаковывается как объект.</span><span class="sxs-lookup"><span data-stu-id="de2c1-254">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="de2c1-255">Если вы `Enter` снова передаете одну и ту же переменную, она упаковывается как отдельный объект, а поток не блокируется.</span><span class="sxs-lookup"><span data-stu-id="de2c1-255">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="de2c1-256">В этом случае код, который `Monitor` предполагается защищать, не защищен.</span><span class="sxs-lookup"><span data-stu-id="de2c1-256">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="de2c1-257">Кроме того, при передаче переменной в `Exit`создается другой отдельный объект.</span><span class="sxs-lookup"><span data-stu-id="de2c1-257">Furthermore, when you pass the variable to `Exit`, another separate object is created.</span></span> <span data-ttu-id="de2c1-258">Поскольку объект, переданный `Exit` в, отличается от объекта, переданного `Monitor` в <xref:System.Threading.SynchronizationLockException> `Enter`, вызывает исключение.</span><span class="sxs-lookup"><span data-stu-id="de2c1-258">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="de2c1-259">Дополнительные сведения см. в разделе « [мониторы](xref:System.Threading.Monitor)».</span><span class="sxs-lookup"><span data-stu-id="de2c1-259">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="de2c1-260"><xref:System.Threading.Thread.Interrupt%2A>может прерывать потоки, ожидающие ввода `Monitor` объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-260"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="de2c1-261"><xref:System.Threading.ThreadInterruptedException> Будет выдано исключение.</span><span class="sxs-lookup"><span data-stu-id="de2c1-261">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="de2c1-262">В следующем коде показан базовый шаблон для использования <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29> перегрузки метода.</span><span class="sxs-lookup"><span data-stu-id="de2c1-262">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="de2c1-263">Эта перегрузка всегда задает значение переменной, которая передается `ref` в параметр (`ByRef` в Visual Basic) `lockTaken`, даже если метод создает исключение, поэтому значение переменной является надежным способом проверки того, должна ли блокировка быть освободил.</span><span class="sxs-lookup"><span data-stu-id="de2c1-263">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#2)]
 [!code-vb[System.Threading.Monitor.Enter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="de2c1-264">Входные данные для <paramref name="lockTaken" /> — <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-264">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="de2c1-265">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-265">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public static void Exit (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Exit(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Exit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Exit (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Exit(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Exit : obj -&gt; unit" Usage="System.Threading.Monitor.Exit obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="de2c1-266">Объект, блокировка которого освобождается.</span><span class="sxs-lookup"><span data-stu-id="de2c1-266">The object on which to release the lock.</span></span></param>
        <summary><span data-ttu-id="de2c1-267">Освобождает эксклюзивную блокировку указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-267">Releases an exclusive lock on the specified object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de2c1-268">Вызывающий поток должен владеть блокировкой `obj` параметра.</span><span class="sxs-lookup"><span data-stu-id="de2c1-268">The calling thread must own the lock on the `obj` parameter.</span></span> <span data-ttu-id="de2c1-269">Если вызывающий поток владеет блокировкой на указанном объекте и произошел равное число `Exit` вызовов и <xref:System.Threading.Monitor.Enter%2A> для объекта, блокировка снимается.</span><span class="sxs-lookup"><span data-stu-id="de2c1-269">If the calling thread owns the lock on the specified object, and has made an equal number of `Exit` and <xref:System.Threading.Monitor.Enter%2A> calls for the object, then the lock is released.</span></span> <span data-ttu-id="de2c1-270">Если вызывающий поток не вызывал `Exit` столько `Enter`раз, сколько указано, блокировка не освобождается.</span><span class="sxs-lookup"><span data-stu-id="de2c1-270">If the calling thread has not invoked `Exit` as many times as `Enter`, the lock is not released.</span></span>  
  
 <span data-ttu-id="de2c1-271">Если блокировка освобождается и другие потоки находятся в очереди готовности для объекта, один из потоков получает блокировку.</span><span class="sxs-lookup"><span data-stu-id="de2c1-271">If the lock is released and other threads are in the ready queue for the object, one of the threads acquires the lock.</span></span> <span data-ttu-id="de2c1-272">Если другие потоки находятся в очереди ожидания, ожидающей получения блокировки, они не перемещаются автоматически в очередь готовности, когда владелец вызовов `Exit`блокировки.</span><span class="sxs-lookup"><span data-stu-id="de2c1-272">If other threads are in the waiting queue waiting to acquire the lock, they are not automatically moved to the ready queue when the owner of the lock calls `Exit`.</span></span> <span data-ttu-id="de2c1-273">Чтобы переместить один или несколько ожидающих потоков в очередь готовности, <xref:System.Threading.Monitor.Pulse%2A> вызовите или <xref:System.Threading.Monitor.PulseAll%2A> перед `Exit`вызовом.</span><span class="sxs-lookup"><span data-stu-id="de2c1-273">To move one or more waiting threads into the ready queue, call <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> before invoking `Exit`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="de2c1-274">В следующем примере показано использование метода `Exit`.</span><span class="sxs-lookup"><span data-stu-id="de2c1-274">The following example demonstrates how to use the `Exit` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="de2c1-275">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-275">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="de2c1-276">Данный поток не владеет блокировкой для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-276">The current thread does not own the lock for the specified object.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="de2c1-277">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="de2c1-277">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsEntered">
      <MemberSignature Language="C#" Value="public static bool IsEntered (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEntered(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.IsEntered(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsEntered (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsEntered(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member IsEntered : obj -&gt; bool" Usage="System.Threading.Monitor.IsEntered obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="de2c1-278">Объект для тестирования.</span><span class="sxs-lookup"><span data-stu-id="de2c1-278">The object to test.</span></span></param>
        <summary><span data-ttu-id="de2c1-279">Определяет, является ли содержит ли текущий поток блокировку на заданном объекте.</span><span class="sxs-lookup"><span data-stu-id="de2c1-279">Determines whether the current thread holds the lock on the specified object.</span></span></summary>
        <returns><span data-ttu-id="de2c1-280">Значение <see langword="true" />, если текущий поток владеет блокировкой в <paramref name="obj" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-280"><see langword="true" /> if the current thread holds the lock on <paramref name="obj" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de2c1-281">Этот метод работает только для блокировок, полученных с <xref:System.Threading.Monitor> помощью методов класса или с C# `lock` помощью инструкции или оператора Visual Basic `SyncLock` , которые реализуются с <xref:System.Threading.Monitor>помощью.</span><span class="sxs-lookup"><span data-stu-id="de2c1-281">This method works only for locks that are acquired by using the methods of the <xref:System.Threading.Monitor> class, or by using the C# `lock` statement or the Visual Basic `SyncLock` statement, which are implemented with <xref:System.Threading.Monitor>.</span></span>  
  
 <span data-ttu-id="de2c1-282">Используйте этот метод с инструментами диагностики, такими как <xref:System.Diagnostics.Debug.Assert%2A> метод <xref:System.Diagnostics.Contracts.Contract> и класс, для отладки проблем <xref:System.Threading.Monitor> блокировки, в которых участвует класс.</span><span class="sxs-lookup"><span data-stu-id="de2c1-282">Use this method with diagnostic tools, such as the <xref:System.Diagnostics.Debug.Assert%2A> method and the <xref:System.Diagnostics.Contracts.Contract> class, to debug locking issues that involve the <xref:System.Threading.Monitor> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="de2c1-283"><paramref name="obj" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-283"><paramref name="obj" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LockContentionCount">
      <MemberSignature Language="C#" Value="public static long LockContentionCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 LockContentionCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Monitor.LockContentionCount" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LockContentionCount As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property long LockContentionCount { long get(); };" />
      <MemberSignature Language="F#" Value="member this.LockContentionCount : int64" Usage="System.Threading.Monitor.LockContentionCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="de2c1-284">Возвращает значение, указывающее, сколько раз возникало состязание при попытке установить блокировку монитора.</span><span class="sxs-lookup"><span data-stu-id="de2c1-284">Gets the number of times there was contention when trying to take the monitor's lock.</span></span></summary>
        <value><span data-ttu-id="de2c1-285">Количество конфликтов при попытке снятия блокировки монитора.</span><span class="sxs-lookup"><span data-stu-id="de2c1-285">The number of times there was contention when trying to take the monitor's lock.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pulse">
      <MemberSignature Language="C#" Value="public static void Pulse (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Pulse(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Pulse(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Pulse (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Pulse(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Pulse : obj -&gt; unit" Usage="System.Threading.Monitor.Pulse obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="de2c1-286">Объект, которого ожидает поток.</span><span class="sxs-lookup"><span data-stu-id="de2c1-286">The object a thread is waiting for.</span></span></param>
        <summary><span data-ttu-id="de2c1-287">Уведомляет поток в очереди готовности об изменении состояния объекта с блокировкой.</span><span class="sxs-lookup"><span data-stu-id="de2c1-287">Notifies a thread in the waiting queue of a change in the locked object's state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de2c1-288">Только текущий владелец блокировки может передать сигнал ожидающему объекту с помощью `Pulse`.</span><span class="sxs-lookup"><span data-stu-id="de2c1-288">Only the current owner of the lock can signal a waiting object using `Pulse`.</span></span>  
  
 <span data-ttu-id="de2c1-289">Поток, который в настоящее время владеет блокировкой указанного объекта, вызывает этот метод, чтобы передать следующий поток в строке для блокировки.</span><span class="sxs-lookup"><span data-stu-id="de2c1-289">The thread that currently owns the lock on the specified object invokes this method to signal the next thread in line for the lock.</span></span> <span data-ttu-id="de2c1-290">При получении пульса ожидающий поток перемещается в очередь готовности.</span><span class="sxs-lookup"><span data-stu-id="de2c1-290">Upon receiving the pulse, the waiting thread is moved to the ready queue.</span></span> <span data-ttu-id="de2c1-291">Когда вызывающий `Pulse` поток освобождает блокировку, следующий поток в очереди готовности (который не обязательно является потоком, который был импульсным) получает блокировку.</span><span class="sxs-lookup"><span data-stu-id="de2c1-291">When the thread that invoked `Pulse` releases the lock, the next thread in the ready queue (which is not necessarily the thread that was pulsed) acquires the lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="de2c1-292">Класс не поддерживает состояние, указывающее на <xref:System.Threading.Monitor.Pulse%2A> вызов метода. <xref:System.Threading.Monitor></span><span class="sxs-lookup"><span data-stu-id="de2c1-292">The <xref:System.Threading.Monitor> class does not maintain state indicating that the <xref:System.Threading.Monitor.Pulse%2A> method has been called.</span></span> <span data-ttu-id="de2c1-293">Таким образом, при вызове <xref:System.Threading.Monitor.Pulse%2A> , когда потоки не ожидают ожидания, следующий поток, вызывающий <xref:System.Threading.Monitor.Wait%2A> блоки <xref:System.Threading.Monitor.Pulse%2A> , как будто никогда не вызывался.</span><span class="sxs-lookup"><span data-stu-id="de2c1-293">Thus, if you call <xref:System.Threading.Monitor.Pulse%2A> when no threads are waiting, the next thread that calls <xref:System.Threading.Monitor.Wait%2A> blocks as if <xref:System.Threading.Monitor.Pulse%2A> had never been called.</span></span> <span data-ttu-id="de2c1-294">Если два потока используют <xref:System.Threading.Monitor.Pulse%2A> и <xref:System.Threading.Monitor.Wait%2A> для взаимодействия, это может привести к взаимоблокировке.</span><span class="sxs-lookup"><span data-stu-id="de2c1-294">If two threads are using <xref:System.Threading.Monitor.Pulse%2A> and <xref:System.Threading.Monitor.Wait%2A> to interact, this could result in a deadlock.</span></span> <span data-ttu-id="de2c1-295">Сравните это с поведением <xref:System.Threading.AutoResetEvent> класса: Если вы сообщаете <xref:System.Threading.AutoResetEvent> о <xref:System.Threading.EventWaitHandle.Set%2A> вызове метода и <xref:System.Threading.AutoResetEvent> нет потоков, ожидающих, состояние остается в сигнальном состоянии до тех пор, пока поток <xref:System.Threading.WaitHandle.WaitOne%2A>не вызовет <xref:System.Threading.WaitHandle.WaitAll%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>или.</span><span class="sxs-lookup"><span data-stu-id="de2c1-295">Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class: If you signal an <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, and there are no threads waiting, the <xref:System.Threading.AutoResetEvent> remains in a signaled state until a thread calls <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A>.</span></span> <span data-ttu-id="de2c1-296"><xref:System.Threading.AutoResetEvent> Выводит поток и возвращается в несигнальное состояние.</span><span class="sxs-lookup"><span data-stu-id="de2c1-296">The <xref:System.Threading.AutoResetEvent> releases that thread and returns to the unsignaled state.</span></span>  
  
 <span data-ttu-id="de2c1-297">Обратите внимание, что синхронизированный объект содержит несколько ссылок, включая ссылку на поток, который в настоящее время владеет блокировкой, ссылку на очередь готовности, которая содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, которая содержит потоки, ожидающие уведомления об изменении состояния объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-297">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="de2c1-298">Методы `Pulse`, <xref:System.Threading.Monitor.PulseAll%2A> и<xref:System.Threading.Monitor.Wait%2A> должны вызываться из синхронизированного блока кода.</span><span class="sxs-lookup"><span data-stu-id="de2c1-298">The `Pulse`, <xref:System.Threading.Monitor.PulseAll%2A>, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="de2c1-299">Чтобы сообщить о нескольких потоках, <xref:System.Threading.Monitor.PulseAll%2A> используйте метод.</span><span class="sxs-lookup"><span data-stu-id="de2c1-299">To signal multiple threads, use the <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="de2c1-300">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-300">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="de2c1-301">Вызывающий поток не владеет блокировкой для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-301">The calling thread does not own the lock for the specified object.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="de2c1-302">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="de2c1-302">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PulseAll">
      <MemberSignature Language="C#" Value="public static void PulseAll (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PulseAll(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.PulseAll(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PulseAll (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PulseAll(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member PulseAll : obj -&gt; unit" Usage="System.Threading.Monitor.PulseAll obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="de2c1-303">Объект, посылающий импульс.</span><span class="sxs-lookup"><span data-stu-id="de2c1-303">The object that sends the pulse.</span></span></param>
        <summary><span data-ttu-id="de2c1-304">Уведомляет все ожидающие потоки об изменении состояния объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-304">Notifies all waiting threads of a change in the object's state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de2c1-305">Поток, которому в настоящее время принадлежит блокировка указанного объекта, вызывает этот метод, чтобы сообщить всем потокам, ожидающим получения блокировки объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-305">The thread that currently owns the lock on the specified object invokes this method to signal all threads waiting to acquire the lock on the object.</span></span> <span data-ttu-id="de2c1-306">После отправки сигнала ожидающие потоки перемещаются в очередь готовности.</span><span class="sxs-lookup"><span data-stu-id="de2c1-306">After the signal is sent, the waiting threads are moved to the ready queue.</span></span> <span data-ttu-id="de2c1-307">Когда поток, вызвавший вызов `PulseAll` , освобождает блокировку, следующий поток в очереди готовности получает блокировку.</span><span class="sxs-lookup"><span data-stu-id="de2c1-307">When the thread that invoked `PulseAll` releases the lock, the next thread in the ready queue acquires the lock.</span></span>  
  
 <span data-ttu-id="de2c1-308">Обратите внимание, что синхронизированный объект содержит несколько ссылок, включая ссылку на поток, который в настоящее время владеет блокировкой, ссылку на очередь готовности, которая содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, которая содержит потоки, ожидающие уведомления об изменении состояния объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-308">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="de2c1-309">Методы <xref:System.Threading.Monitor.Pulse%2A>, `PulseAll` и<xref:System.Threading.Monitor.Wait%2A> должны вызываться из синхронизированного блока кода.</span><span class="sxs-lookup"><span data-stu-id="de2c1-309">The <xref:System.Threading.Monitor.Pulse%2A>, `PulseAll`, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="de2c1-310">Примечания для <xref:System.Threading.Monitor.Pulse%2A> метода объясняют, что происходит, если <xref:System.Threading.Monitor.Pulse%2A> вызывается, когда потоки не ожидают ожидания.</span><span class="sxs-lookup"><span data-stu-id="de2c1-310">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 <span data-ttu-id="de2c1-311">Чтобы передать сигнал одному потоку, используйте `Pulse` метод.</span><span class="sxs-lookup"><span data-stu-id="de2c1-311">To signal a single thread, use the `Pulse` method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="de2c1-312">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-312">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="de2c1-313">Вызывающий поток не владеет блокировкой для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-313">The calling thread does not own the lock for the specified object.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="de2c1-314">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="de2c1-314">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="de2c1-315">Пытается получить эксклюзивную блокировку указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-315">Attempts to acquire an exclusive lock on the specified object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj -&gt; bool" Usage="System.Threading.Monitor.TryEnter obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="de2c1-316">Объект, блокировка которого получается.</span><span class="sxs-lookup"><span data-stu-id="de2c1-316">The object on which to acquire the lock.</span></span></param>
        <summary><span data-ttu-id="de2c1-317">Пытается получить эксклюзивную блокировку указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-317">Attempts to acquire an exclusive lock on the specified object.</span></span></summary>
        <returns><span data-ttu-id="de2c1-318">Значение <see langword="true" />, если текущий поток получает блокировку; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-318"><see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de2c1-319">В случае успешного выполнения этот метод получает монопольную блокировку на `obj` параметр.</span><span class="sxs-lookup"><span data-stu-id="de2c1-319">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="de2c1-320">Этот метод немедленно возвращает значение, независимо от того, доступна ли блокировка.</span><span class="sxs-lookup"><span data-stu-id="de2c1-320">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="de2c1-321">Этот метод аналогичен <xref:System.Threading.Monitor.Enter%2A>, но он никогда не блокирует текущий поток.</span><span class="sxs-lookup"><span data-stu-id="de2c1-321">This method is similar to <xref:System.Threading.Monitor.Enter%2A>, but it will never block the current thread.</span></span> <span data-ttu-id="de2c1-322">Если поток не может выполнить вход без блокировки, метод возвращает `false,`значение.</span><span class="sxs-lookup"><span data-stu-id="de2c1-322">If the thread cannot enter without blocking, the method returns `false,`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="de2c1-323">Используйте <xref:System.Threading.Monitor> для блокировки объектов (то есть ссылочных типов), а не типов значений.</span><span class="sxs-lookup"><span data-stu-id="de2c1-323">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="de2c1-324">Дополнительные сведения см. в <xref:System.Threading.Monitor> статье.</span><span class="sxs-lookup"><span data-stu-id="de2c1-324">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="de2c1-325">Чтобы убедиться, что поток не входит в критическую секцию, следует изучить возвращаемое значение метода и выполнить код в критическом разделе, только если его возвращаемое значение `true`равно.</span><span class="sxs-lookup"><span data-stu-id="de2c1-325">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="de2c1-326">В следующем фрагменте кода показан шаблон, используемый для вызова этого метода.</span><span class="sxs-lookup"><span data-stu-id="de2c1-326">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="de2c1-327">Обратите внимание, что <xref:System.Threading.Monitor.Exit%2A> необходимо вызвать `finally` в блоке, чтобы вызывающий поток снимет блокировку в критическом разделе, если возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="de2c1-327">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#1)]
 [!code-vb[System.Threading.Monitor.TryEnter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="de2c1-328">В следующем примере кода показано, как использовать метод `TryEnter`.</span><span class="sxs-lookup"><span data-stu-id="de2c1-328">The following code example demonstrates how to use the `TryEnter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="de2c1-329">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-329">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="de2c1-330">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="de2c1-330">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="de2c1-331">Объект, блокировка которого получается.</span><span class="sxs-lookup"><span data-stu-id="de2c1-331">The object on which to acquire the lock.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="de2c1-332">Результат попытки получить блокировку, переданную по ссылке.</span><span class="sxs-lookup"><span data-stu-id="de2c1-332">The result of the attempt to acquire the lock, passed by reference.</span></span> <span data-ttu-id="de2c1-333">Входное значение должно равняться <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-333">The input must be <see langword="false" />.</span></span> <span data-ttu-id="de2c1-334">Выходное значение <see langword="true" />, если блокировка получена; в противном случае — выходное значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-334">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span></span> <span data-ttu-id="de2c1-335">Выходное значение задается, даже если при попытке получить блокировку возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="de2c1-335">The output is set even if an exception occurs during the attempt to acquire the lock.</span></span></param>
        <summary><span data-ttu-id="de2c1-336">Пытается получить монопольную блокировку указанного объекта и единым блоком задает значение, указывающее, была ли выполнена блокировка.</span><span class="sxs-lookup"><span data-stu-id="de2c1-336">Attempts to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de2c1-337">В случае успешного выполнения этот метод получает монопольную блокировку на `obj` параметр.</span><span class="sxs-lookup"><span data-stu-id="de2c1-337">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="de2c1-338">Этот метод немедленно возвращает значение, независимо от того, доступна ли блокировка.</span><span class="sxs-lookup"><span data-stu-id="de2c1-338">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="de2c1-339">Если блокировка не была выполнена из-за возникновения исключения, переменная, указанная для `lockTaken` параметра, находится `false` после завершения этого метода.</span><span class="sxs-lookup"><span data-stu-id="de2c1-339">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="de2c1-340">Это позволяет программе определить во всех случаях, требуется ли снять блокировку.</span><span class="sxs-lookup"><span data-stu-id="de2c1-340">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
 <span data-ttu-id="de2c1-341">Этот метод аналогичен <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>, но он никогда не блокирует текущий поток.</span><span class="sxs-lookup"><span data-stu-id="de2c1-341">This method is similar to <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>, but it will never block the current thread.</span></span> <span data-ttu-id="de2c1-342">Если поток не может выполнить вход без блокировки, `lockTaken` аргумент устанавливается в `false` значение, когда метод возвращает значение.</span><span class="sxs-lookup"><span data-stu-id="de2c1-342">If the thread cannot enter without blocking, the `lockTaken` argument is set to `false` when the method returns.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="de2c1-343">Используйте <xref:System.Threading.Monitor> для блокировки объектов (то есть ссылочных типов), а не типов значений.</span><span class="sxs-lookup"><span data-stu-id="de2c1-343">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="de2c1-344">Дополнительные сведения см. в <xref:System.Threading.Monitor> статье.</span><span class="sxs-lookup"><span data-stu-id="de2c1-344">For more information, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="de2c1-345">Чтобы убедиться, что поток не входит в критическую секцию, следует проверить значение `lockTaken` и выполнить код в критическом разделе, только если его значение равно. `true`</span><span class="sxs-lookup"><span data-stu-id="de2c1-345">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="de2c1-346">В следующем фрагменте кода показан шаблон, используемый для вызова этого метода.</span><span class="sxs-lookup"><span data-stu-id="de2c1-346">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="de2c1-347">Обратите внимание, что <xref:System.Threading.Monitor.Exit%2A> необходимо вызвать `finally` в блоке, чтобы вызывающий поток снимет блокировку в критическом разделе, если возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="de2c1-347">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#2)]
 [!code-vb[System.Threading.Monitor.TryEnter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="de2c1-348">В следующем коде показан базовый шаблон для использования <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> перегрузки метода.</span><span class="sxs-lookup"><span data-stu-id="de2c1-348">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="de2c1-349">Эта перегрузка всегда задает значение переменной, которая передается `ref` в параметр (`ByRef` в Visual Basic) `lockTaken`, даже если метод создает исключение, поэтому значение переменной является надежным способом проверки того, должна ли блокировка быть освободил.</span><span class="sxs-lookup"><span data-stu-id="de2c1-349">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#3)]
 [!code-vb[System.Threading.Monitor.Enter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="de2c1-350">Входные данные для <paramref name="lockTaken" /> — <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-350">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="de2c1-351">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-351">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * int -&gt; bool" Usage="System.Threading.Monitor.TryEnter (obj, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="de2c1-352">Объект, блокировка которого получается.</span><span class="sxs-lookup"><span data-stu-id="de2c1-352">The object on which to acquire the lock.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="de2c1-353">Количество миллисекунд, в течение которых ожидать блокировку.</span><span class="sxs-lookup"><span data-stu-id="de2c1-353">The number of milliseconds to wait for the lock.</span></span></param>
        <summary><span data-ttu-id="de2c1-354">Пытается получить эксклюзивную блокировку указанного объекта на заданное количество миллисекунд.</span><span class="sxs-lookup"><span data-stu-id="de2c1-354">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object.</span></span></summary>
        <returns><span data-ttu-id="de2c1-355">Значение <see langword="true" />, если текущий поток получает блокировку; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-355"><see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de2c1-356">Если параметр равен <xref:System.Threading.Timeout.Infinite> ,<xref:System.Threading.Monitor.Enter%2A>этот метод эквивалентен. `millisecondsTimeout`</span><span class="sxs-lookup"><span data-stu-id="de2c1-356">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="de2c1-357">Если `millisecondsTimeout` равно 0, этот метод <xref:System.Threading.Monitor.TryEnter%2A>эквивалентен.</span><span class="sxs-lookup"><span data-stu-id="de2c1-357">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="de2c1-358">Используйте <xref:System.Threading.Monitor> для блокировки объектов (то есть ссылочных типов), а не типов значений.</span><span class="sxs-lookup"><span data-stu-id="de2c1-358">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="de2c1-359">Дополнительные сведения см. в <xref:System.Threading.Monitor> статье.</span><span class="sxs-lookup"><span data-stu-id="de2c1-359">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="de2c1-360">Чтобы убедиться, что поток не входит в критическую секцию, следует изучить возвращаемое значение метода и выполнить код в критическом разделе, только если его возвращаемое значение `true`равно.</span><span class="sxs-lookup"><span data-stu-id="de2c1-360">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="de2c1-361">В следующем фрагменте кода показан шаблон, используемый для вызова этого метода.</span><span class="sxs-lookup"><span data-stu-id="de2c1-361">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="de2c1-362">Обратите внимание, что <xref:System.Threading.Monitor.Exit%2A> необходимо вызвать `finally` в блоке, чтобы вызывающий поток снимет блокировку в критическом разделе, если возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="de2c1-362">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#3)]
 [!code-vb[System.Threading.Monitor.TryEnter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="de2c1-363">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-363">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="de2c1-364"><paramref name="millisecondsTimeout" /> является отрицательным числом и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-364"><paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="de2c1-365">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="de2c1-365">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * TimeSpan -&gt; bool" Usage="System.Threading.Monitor.TryEnter (obj, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="de2c1-366">Объект, блокировка которого получается.</span><span class="sxs-lookup"><span data-stu-id="de2c1-366">The object on which to acquire the lock.</span></span></param>
        <param name="timeout"><span data-ttu-id="de2c1-367">Класс <see cref="T:System.TimeSpan" />, представляющий количество времени, в течение которого ожидается блокировка.</span><span class="sxs-lookup"><span data-stu-id="de2c1-367">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait for the lock.</span></span> <span data-ttu-id="de2c1-368">Значение –1 миллисекунды обозначает бесконечное ожидание.</span><span class="sxs-lookup"><span data-stu-id="de2c1-368">A value of -1 millisecond specifies an infinite wait.</span></span></param>
        <summary><span data-ttu-id="de2c1-369">Пытается получить эксклюзивную блокировку указанного объекта в течение заданного количества времени.</span><span class="sxs-lookup"><span data-stu-id="de2c1-369">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object.</span></span></summary>
        <returns><span data-ttu-id="de2c1-370">Значение <see langword="true" />, если текущий поток получает блокировку; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-370"><see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de2c1-371">Если значение `timeout` параметра, преобразованное в миллисекунды, равно-1, этот метод <xref:System.Threading.Monitor.Enter%2A>эквивалентен.</span><span class="sxs-lookup"><span data-stu-id="de2c1-371">If the value of the `timeout` parameter converted to milliseconds equals -1, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="de2c1-372">Если значение `timeout` равно 0, этот метод <xref:System.Threading.Monitor.TryEnter%2A>эквивалентен.</span><span class="sxs-lookup"><span data-stu-id="de2c1-372">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="de2c1-373">Используйте <xref:System.Threading.Monitor> для блокировки объектов (то есть ссылочных типов), а не типов значений.</span><span class="sxs-lookup"><span data-stu-id="de2c1-373">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="de2c1-374">Дополнительные сведения см. в <xref:System.Threading.Monitor> разделе о классе.</span><span class="sxs-lookup"><span data-stu-id="de2c1-374">For details, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="de2c1-375">Чтобы убедиться, что поток не входит в критическую секцию, следует изучить возвращаемое значение метода и выполнить код в критическом разделе, только если его возвращаемое значение `true`равно.</span><span class="sxs-lookup"><span data-stu-id="de2c1-375">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="de2c1-376">В следующем фрагменте кода показан шаблон, используемый для вызова этого метода.</span><span class="sxs-lookup"><span data-stu-id="de2c1-376">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="de2c1-377">Обратите внимание, что <xref:System.Threading.Monitor.Exit%2A> необходимо вызвать `finally` в блоке, чтобы вызывающий поток снимет блокировку в критическом разделе, если возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="de2c1-377">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#5)]
 [!code-vb[System.Threading.Monitor.TryEnter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="de2c1-378">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-378">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="de2c1-379">Значение <paramref name="timeout" /> в миллисекундах отрицательно и не равно <see cref="F:System.Threading.Timeout.Infinite" /> (–1 миллисекунда) или больше <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-379">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="de2c1-380">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="de2c1-380">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, int millisecondsTimeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, int32 millisecondsTimeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, millisecondsTimeout As Integer, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, int millisecondsTimeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * int *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, millisecondsTimeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="de2c1-381">Объект, блокировка которого получается.</span><span class="sxs-lookup"><span data-stu-id="de2c1-381">The object on which to acquire the lock.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="de2c1-382">Количество миллисекунд, в течение которых ожидать блокировку.</span><span class="sxs-lookup"><span data-stu-id="de2c1-382">The number of milliseconds to wait for the lock.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="de2c1-383">Результат попытки получить блокировку, переданную по ссылке.</span><span class="sxs-lookup"><span data-stu-id="de2c1-383">The result of the attempt to acquire the lock, passed by reference.</span></span> <span data-ttu-id="de2c1-384">Входное значение должно равняться <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-384">The input must be <see langword="false" />.</span></span> <span data-ttu-id="de2c1-385">Выходное значение <see langword="true" />, если блокировка получена; в противном случае — выходное значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-385">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span></span> <span data-ttu-id="de2c1-386">Выходное значение задается, даже если при попытке получить блокировку возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="de2c1-386">The output is set even if an exception occurs during the attempt to acquire the lock.</span></span></param>
        <summary><span data-ttu-id="de2c1-387">В течение заданного количества миллисекунд пытается получить монопольную блокировку указанного объекта и единым блоком задает значение, указывающее, была ли выполнена блокировка.</span><span class="sxs-lookup"><span data-stu-id="de2c1-387">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de2c1-388">Если параметр равен <xref:System.Threading.Timeout.Infinite> ,<xref:System.Threading.Monitor.Enter%28System.Object%29>этот метод эквивалентен. `millisecondsTimeout`</span><span class="sxs-lookup"><span data-stu-id="de2c1-388">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="de2c1-389">Если `millisecondsTimeout` равно 0, этот метод <xref:System.Threading.Monitor.TryEnter%28System.Object%29>эквивалентен.</span><span class="sxs-lookup"><span data-stu-id="de2c1-389">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="de2c1-390">Если блокировка не была выполнена из-за возникновения исключения, переменная, указанная для `lockTaken` параметра, находится `false` после завершения этого метода.</span><span class="sxs-lookup"><span data-stu-id="de2c1-390">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="de2c1-391">Это позволяет программе определить во всех случаях, требуется ли снять блокировку.</span><span class="sxs-lookup"><span data-stu-id="de2c1-391">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="de2c1-392">Используйте <xref:System.Threading.Monitor> для блокировки объектов (то есть ссылочных типов), а не типов значений.</span><span class="sxs-lookup"><span data-stu-id="de2c1-392">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="de2c1-393">Дополнительные сведения см. в <xref:System.Threading.Monitor> разделе о классе.</span><span class="sxs-lookup"><span data-stu-id="de2c1-393">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="de2c1-394">Чтобы убедиться, что поток не входит в критическую секцию, следует проверить значение `lockTaken` и выполнить код в критическом разделе, только если его значение равно. `true`</span><span class="sxs-lookup"><span data-stu-id="de2c1-394">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="de2c1-395">В следующем фрагменте кода показан шаблон, используемый для вызова этого метода.</span><span class="sxs-lookup"><span data-stu-id="de2c1-395">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="de2c1-396">Обратите внимание, что <xref:System.Threading.Monitor.Exit%2A> необходимо вызвать `finally` в блоке, чтобы вызывающий поток снимет блокировку в критическом разделе, если возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="de2c1-396">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#4)]
 [!code-vb[System.Threading.Monitor.TryEnter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="de2c1-397">В следующем коде показан базовый шаблон для использования <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> перегрузки метода.</span><span class="sxs-lookup"><span data-stu-id="de2c1-397">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="de2c1-398">Эта перегрузка всегда задает значение переменной, которая передается `ref` в параметр (`ByRef` в Visual Basic) `lockTaken`, даже если метод создает исключение, поэтому значение переменной является надежным способом проверки того, должна ли блокировка быть освободил.</span><span class="sxs-lookup"><span data-stu-id="de2c1-398">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#4)]
 [!code-vb[System.Threading.Monitor.Enter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="de2c1-399">Входные данные для <paramref name="lockTaken" /> — <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-399">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="de2c1-400">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-400">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="de2c1-401"><paramref name="millisecondsTimeout" /> является отрицательным числом и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-401"><paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, TimeSpan timeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, valuetype System.TimeSpan timeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, timeout As TimeSpan, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, TimeSpan timeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * TimeSpan *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, timeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="de2c1-402">Объект, блокировка которого получается.</span><span class="sxs-lookup"><span data-stu-id="de2c1-402">The object on which to acquire the lock.</span></span></param>
        <param name="timeout"><span data-ttu-id="de2c1-403">Период времени, в течение которого ожидается блокировка.</span><span class="sxs-lookup"><span data-stu-id="de2c1-403">The amount of time to wait for the lock.</span></span> <span data-ttu-id="de2c1-404">Значение –1 миллисекунды обозначает бесконечное ожидание.</span><span class="sxs-lookup"><span data-stu-id="de2c1-404">A value of -1 millisecond specifies an infinite wait.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="de2c1-405">Результат попытки получить блокировку, переданную по ссылке.</span><span class="sxs-lookup"><span data-stu-id="de2c1-405">The result of the attempt to acquire the lock, passed by reference.</span></span> <span data-ttu-id="de2c1-406">Входное значение должно равняться <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-406">The input must be <see langword="false" />.</span></span> <span data-ttu-id="de2c1-407">Выходное значение <see langword="true" />, если блокировка получена; в противном случае — выходное значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-407">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span></span> <span data-ttu-id="de2c1-408">Выходное значение задается, даже если при попытке получить блокировку возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="de2c1-408">The output is set even if an exception occurs during the attempt to acquire the lock.</span></span></param>
        <summary><span data-ttu-id="de2c1-409">В течение заданного периода времени пытается получить монопольную блокировку указанного объекта и единым блоком задает значение, указывающее, была ли выполнена блокировка.</span><span class="sxs-lookup"><span data-stu-id="de2c1-409">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de2c1-410">Если значение `timeout` параметра, преобразованное в миллисекунды, равно-1, этот метод <xref:System.Threading.Monitor.Enter%28System.Object%29>эквивалентен.</span><span class="sxs-lookup"><span data-stu-id="de2c1-410">If the value of the `timeout` parameter converted to milliseconds equals -1, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="de2c1-411">Если значение `timeout` равно 0, этот метод <xref:System.Threading.Monitor.TryEnter%28System.Object%29>эквивалентен.</span><span class="sxs-lookup"><span data-stu-id="de2c1-411">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="de2c1-412">Если блокировка не была выполнена из-за возникновения исключения, переменная, указанная для `lockTaken` параметра, находится `false` после завершения этого метода.</span><span class="sxs-lookup"><span data-stu-id="de2c1-412">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="de2c1-413">Это позволяет программе определить во всех случаях, требуется ли снять блокировку.</span><span class="sxs-lookup"><span data-stu-id="de2c1-413">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="de2c1-414">Используйте <xref:System.Threading.Monitor> для блокировки объектов (то есть ссылочных типов), а не типов значений.</span><span class="sxs-lookup"><span data-stu-id="de2c1-414">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="de2c1-415">Дополнительные сведения см. в <xref:System.Threading.Monitor> разделе о классе.</span><span class="sxs-lookup"><span data-stu-id="de2c1-415">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="de2c1-416">Чтобы убедиться, что поток не входит в критическую секцию, следует проверить значение `lockTaken` и выполнить код в критическом разделе, только если его значение равно. `true`</span><span class="sxs-lookup"><span data-stu-id="de2c1-416">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="de2c1-417">В следующем фрагменте кода показан шаблон, используемый для вызова этого метода.</span><span class="sxs-lookup"><span data-stu-id="de2c1-417">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="de2c1-418">Обратите внимание, что <xref:System.Threading.Monitor.Exit%2A> необходимо вызвать `finally` в блоке, чтобы вызывающий поток снимет блокировку в критическом разделе, если возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="de2c1-418">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#6)]
 [!code-vb[System.Threading.Monitor.TryEnter#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="de2c1-419">Входные данные для <paramref name="lockTaken" /> — <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-419">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="de2c1-420">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-420">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="de2c1-421">Значение <paramref name="timeout" /> в миллисекундах отрицательно и не равно <see cref="F:System.Threading.Timeout.Infinite" /> (–1 миллисекунда) или больше <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-421">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="de2c1-422">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="de2c1-422">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="de2c1-423">Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова.</span><span class="sxs-lookup"><span data-stu-id="de2c1-423">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Wait : obj -&gt; bool" Usage="System.Threading.Monitor.Wait obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="de2c1-424">Объект, в котором следует ожидать.</span><span class="sxs-lookup"><span data-stu-id="de2c1-424">The object on which to wait.</span></span></param>
        <summary><span data-ttu-id="de2c1-425">Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова.</span><span class="sxs-lookup"><span data-stu-id="de2c1-425">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span></summary>
        <returns><span data-ttu-id="de2c1-426">Значение <see langword="true" />, если вызов осуществил возврат из-за того, что вызывающий поток заново получил блокировку заданного объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-426"><see langword="true" /> if the call returned because the caller reacquired the lock for the specified object.</span></span> <span data-ttu-id="de2c1-427">Этот метод не осуществляет возврат, если блокировка вновь не получена.</span><span class="sxs-lookup"><span data-stu-id="de2c1-427">This method does not return if the lock is not reacquired.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de2c1-428">Поток, который в настоящее время владеет блокировкой указанного объекта, вызывает этот метод, чтобы освободить объект, чтобы другой поток мог получить к нему доступ.</span><span class="sxs-lookup"><span data-stu-id="de2c1-428">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="de2c1-429">Вызывающий объект блокируется при ожидании повторного получения блокировки.</span><span class="sxs-lookup"><span data-stu-id="de2c1-429">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="de2c1-430">Этот метод вызывается, когда вызывающему объекту требуется подождать изменения состояния, которое будет происходить в результате операций другого потока.</span><span class="sxs-lookup"><span data-stu-id="de2c1-430">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="de2c1-431">Когда поток вызывает `Wait`, он освобождает блокировку объекта и переходит в очередь ожидания объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-431">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="de2c1-432">Следующий поток в очереди готовности объекта (если таковой имеется) получает блокировку и эксклюзивное использование объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-432">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="de2c1-433">Все потоки, вызывающие вызовы `Wait` , остаются в очереди ожидания до получения сигнала от <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A>, отправленного владельцем блокировки.</span><span class="sxs-lookup"><span data-stu-id="de2c1-433">All threads that call `Wait` remain in the waiting queue until they receive a signal from <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>, sent by the owner of the lock.</span></span> <span data-ttu-id="de2c1-434">Если `Pulse` отправляется, затрагивается только поток в заголовке очереди ожидания.</span><span class="sxs-lookup"><span data-stu-id="de2c1-434">If `Pulse` is sent, only the thread at the head of the waiting queue is affected.</span></span> <span data-ttu-id="de2c1-435">Если `PulseAll` отправляется, затрагиваются все потоки, ожидающие объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-435">If `PulseAll` is sent, all threads that are waiting for the object are affected.</span></span> <span data-ttu-id="de2c1-436">При получении сигнала один или несколько потоков покидают очередь ожидания и наведите очередь готовности.</span><span class="sxs-lookup"><span data-stu-id="de2c1-436">When the signal is received, one or more threads leave the waiting queue and enter the ready queue.</span></span> <span data-ttu-id="de2c1-437">Потоку в очереди готовности разрешено повторное получение блокировки.</span><span class="sxs-lookup"><span data-stu-id="de2c1-437">A thread in the ready queue is permitted to reacquire the lock.</span></span>  
  
 <span data-ttu-id="de2c1-438">Этот метод возвращает значение, если вызывающий поток повторно запрашивает блокировку объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-438">This method returns when the calling thread reacquires the lock on the object.</span></span> <span data-ttu-id="de2c1-439">Обратите внимание, что этот метод блокируется на неопределенное время, если `Pulse` владелец `PulseAll`блокировки не вызывает или.</span><span class="sxs-lookup"><span data-stu-id="de2c1-439">Note that this method blocks indefinitely if the holder of the lock does not call `Pulse` or `PulseAll`.</span></span>  
  
 <span data-ttu-id="de2c1-440">Вызывающий объект выполняется `Wait` один раз, независимо от числа вызовов <xref:System.Threading.Monitor.Enter%2A> , вызванных для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-440">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="de2c1-441">По `Wait` сути, метод сохраняет количество вызовов вызывающего `Enter` объекта в объекте и вызывает `Exit` столько раз, сколько необходимо для полного освобождения заблокированного объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-441">Conceptually, the `Wait` method stores the number of times the caller invoked `Enter` on the object and invokes `Exit` as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="de2c1-442">Затем вызывающий объект блокируется при ожидании повторного получения объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-442">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="de2c1-443">Когда вызывающий объект повторно получает блокировку, система вызывает `Enter` столько раз, сколько необходимо для восстановления сохраненного `Enter` количества для вызывающего.</span><span class="sxs-lookup"><span data-stu-id="de2c1-443">When the caller reacquires the lock, the system calls `Enter` as many times as necessary to restore the saved `Enter` count for the caller.</span></span> <span data-ttu-id="de2c1-444">Вызов `Wait` освобождает блокировку только для указанного объекта; если вызывающий объект является владельцем блокировок для других объектов, эти блокировки не освобождаются.</span><span class="sxs-lookup"><span data-stu-id="de2c1-444">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
 <span data-ttu-id="de2c1-445">Обратите внимание, что синхронизированный объект содержит несколько ссылок, включая ссылку на поток, который в настоящее время владеет блокировкой, ссылку на очередь готовности, которая содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, которая содержит потоки, ожидающие уведомления об изменении состояния объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-445">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="de2c1-446">Методы <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A> и`Wait` должны вызываться из синхронизированного блока кода.</span><span class="sxs-lookup"><span data-stu-id="de2c1-446">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="de2c1-447">Примечания для <xref:System.Threading.Monitor.Pulse%2A> метода объясняют, что происходит, если <xref:System.Threading.Monitor.Pulse%2A> вызывается, когда потоки не ожидают ожидания.</span><span class="sxs-lookup"><span data-stu-id="de2c1-447">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="de2c1-448">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-448">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="de2c1-449">Вызывающий поток не владеет блокировкой для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-449">The calling thread does not own the lock for the specified object.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="de2c1-450">Поток, который вызывает <see langword="Wait" />, позже прерывается из состояния ожидания.</span><span class="sxs-lookup"><span data-stu-id="de2c1-450">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span></span> <span data-ttu-id="de2c1-451">Это происходит, когда другой поток вызывает метод <see cref="M:System.Threading.Thread.Interrupt" /> этого потока.</span><span class="sxs-lookup"><span data-stu-id="de2c1-451">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="de2c1-452">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="de2c1-452">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * int -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="de2c1-453">Объект, в котором следует ожидать.</span><span class="sxs-lookup"><span data-stu-id="de2c1-453">The object on which to wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="de2c1-454">Количество миллисекунд для ожидания постановки в очередь готовности.</span><span class="sxs-lookup"><span data-stu-id="de2c1-454">The number of milliseconds to wait before the thread enters the ready queue.</span></span></param>
        <summary><span data-ttu-id="de2c1-455">Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова.</span><span class="sxs-lookup"><span data-stu-id="de2c1-455">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span> <span data-ttu-id="de2c1-456">Если указанные временные интервалы истекают, поток встает в очередь готовности.</span><span class="sxs-lookup"><span data-stu-id="de2c1-456">If the specified time-out interval elapses, the thread enters the ready queue.</span></span></summary>
        <returns><span data-ttu-id="de2c1-457">Значение <see langword="true" />, если блокировка была получена заново до истечения заданного времени; значение <see langword="false" />, если блокировка была получена заново по истечении заданного времени.</span><span class="sxs-lookup"><span data-stu-id="de2c1-457"><see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span></span> <span data-ttu-id="de2c1-458">Этот метод не осуществляет возврат, если блокировка не была получена.</span><span class="sxs-lookup"><span data-stu-id="de2c1-458">The method does not return until the lock is reacquired.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de2c1-459">Этот метод не возвращает значение `obj` до тех пор, пока он не получит монопольную блокировку на параметр.</span><span class="sxs-lookup"><span data-stu-id="de2c1-459">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="de2c1-460">Поток, который в настоящее время владеет блокировкой указанного объекта, вызывает этот метод, чтобы освободить объект, чтобы другой поток мог получить к нему доступ.</span><span class="sxs-lookup"><span data-stu-id="de2c1-460">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="de2c1-461">Вызывающий объект блокируется при ожидании повторного получения блокировки.</span><span class="sxs-lookup"><span data-stu-id="de2c1-461">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="de2c1-462">Этот метод вызывается, когда вызывающему объекту требуется подождать изменения состояния, которое будет происходить в результате операций другого потока.</span><span class="sxs-lookup"><span data-stu-id="de2c1-462">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="de2c1-463">Время ожидания гарантирует, что текущий поток не блокируется в течение неограниченного времени, если другой поток освобождает блокировку без предварительного <xref:System.Threading.Monitor.Pulse%2A> вызова <xref:System.Threading.Monitor.PulseAll%2A> метода или.</span><span class="sxs-lookup"><span data-stu-id="de2c1-463">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="de2c1-464">Он также перемещает поток в очередь готовности, обходя другие потоки перед ним в очереди ожидания, чтобы он мог повторно получить блокировку.</span><span class="sxs-lookup"><span data-stu-id="de2c1-464">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="de2c1-465">Поток может проверить возвращаемое значение <xref:System.Threading.Monitor.Wait%2A> метода, чтобы определить, был ли он получен повторно до истечения времени ожидания. Поток может оценить условия, вызвавшие его, чтобы войти в ожидание, и при необходимости снова <xref:System.Threading.Monitor.Wait%2A> вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="de2c1-465">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="de2c1-466">Когда поток вызывает `Wait`, он освобождает блокировку объекта и переходит в очередь ожидания объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-466">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="de2c1-467">Следующий поток в очереди готовности объекта (если таковой имеется) получает блокировку и эксклюзивное использование объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-467">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="de2c1-468">Поток, который вызывается `Wait` , остается в очереди ожидания до тех пор, пока не будет <xref:System.Threading.Monitor.PulseAll%2A>вызван поток, который владеет вызовом блокировки, или он является следующей в очереди и потоком, который <xref:System.Threading.Monitor.Pulse%2A>содержит вызовы блокировки.</span><span class="sxs-lookup"><span data-stu-id="de2c1-468">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="de2c1-469">Однако, если `millisecondsTimeout` происходит <xref:System.Threading.Monitor.Pulse%2A> до того, как другой поток вызовет метод или <xref:System.Threading.Monitor.PulseAll%2A> , исходный поток перемещается в очередь готовности для восстановления блокировки.</span><span class="sxs-lookup"><span data-stu-id="de2c1-469">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="de2c1-470">Если <xref:System.Threading.Timeout.Infinite> <xref:System.Threading.Monitor.Pulse%2A> для параметра указано значение, этот метод блокируется неопределенно долго, если владелец блокировки не вызывает или <xref:System.Threading.Monitor.PulseAll%2A>. `millisecondsTimeout`</span><span class="sxs-lookup"><span data-stu-id="de2c1-470">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="de2c1-471">Если `millisecondsTimeout` равно 0, то поток, вызывающий `Wait` освобождение блокировки, затем сразу переходит в очередь готовности, чтобы восстановить блокировку.</span><span class="sxs-lookup"><span data-stu-id="de2c1-471">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="de2c1-472">Вызывающий объект выполняется `Wait` один раз, независимо от числа вызовов <xref:System.Threading.Monitor.Enter%2A> , вызванных для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-472">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="de2c1-473">По `Wait` сути, метод сохраняет количество вызовов вызывающего <xref:System.Threading.Monitor.Enter%2A> объекта в объекте и вызывает <xref:System.Threading.Monitor.Exit%2A> столько раз, сколько необходимо для полного освобождения заблокированного объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-473">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="de2c1-474">Затем вызывающий объект блокируется при ожидании повторного получения объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-474">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="de2c1-475">Когда вызывающий объект повторно получает блокировку, система вызывает <xref:System.Threading.Monitor.Enter%2A> столько раз, сколько необходимо для восстановления сохраненного <xref:System.Threading.Monitor.Enter%2A> количества для вызывающего.</span><span class="sxs-lookup"><span data-stu-id="de2c1-475">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="de2c1-476">Вызов `Wait` освобождает блокировку только для указанного объекта; если вызывающий объект является владельцем блокировок для других объектов, эти блокировки не освобождаются.</span><span class="sxs-lookup"><span data-stu-id="de2c1-476">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="de2c1-477">Синхронизированный объект содержит несколько ссылок, включая ссылку на поток, который в настоящее время владеет блокировкой, ссылку на очередь готовности, которая содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, которая содержит потоки, ожидающие уведомления об изменении состояния объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-477">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="de2c1-478">Методы <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A> и`Wait` должны вызываться из синхронизированного блока кода.</span><span class="sxs-lookup"><span data-stu-id="de2c1-478">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="de2c1-479">Примечания для <xref:System.Threading.Monitor.Pulse%2A> метода объясняют, что происходит, если <xref:System.Threading.Monitor.Pulse%2A> вызывается, когда потоки не ожидают ожидания.</span><span class="sxs-lookup"><span data-stu-id="de2c1-479">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="de2c1-480">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-480">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="de2c1-481">Вызывающий поток не владеет блокировкой для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-481">The calling thread does not own the lock for the specified object.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="de2c1-482">Поток, который вызывает <see langword="Wait" />, позже прерывается из состояния ожидания.</span><span class="sxs-lookup"><span data-stu-id="de2c1-482">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span></span> <span data-ttu-id="de2c1-483">Это происходит, когда другой поток вызывает метод <see cref="M:System.Threading.Thread.Interrupt" /> этого потока.</span><span class="sxs-lookup"><span data-stu-id="de2c1-483">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="de2c1-484">Значение параметра <paramref name="millisecondsTimeout" /> отрицательно и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-484">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="de2c1-485">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="de2c1-485">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * TimeSpan -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="de2c1-486">Объект, в котором следует ожидать.</span><span class="sxs-lookup"><span data-stu-id="de2c1-486">The object on which to wait.</span></span></param>
        <param name="timeout"><span data-ttu-id="de2c1-487">Класс <see cref="T:System.TimeSpan" />, представляющий количество времени, до истечения которого поток поступает в очередь ожидания.</span><span class="sxs-lookup"><span data-stu-id="de2c1-487">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span></span></param>
        <summary><span data-ttu-id="de2c1-488">Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова.</span><span class="sxs-lookup"><span data-stu-id="de2c1-488">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span> <span data-ttu-id="de2c1-489">Если указанные временные интервалы истекают, поток встает в очередь готовности.</span><span class="sxs-lookup"><span data-stu-id="de2c1-489">If the specified time-out interval elapses, the thread enters the ready queue.</span></span></summary>
        <returns><span data-ttu-id="de2c1-490">Значение <see langword="true" />, если блокировка была получена заново до истечения заданного времени; значение <see langword="false" />, если блокировка была получена заново по истечении заданного времени.</span><span class="sxs-lookup"><span data-stu-id="de2c1-490"><see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span></span> <span data-ttu-id="de2c1-491">Этот метод не осуществляет возврат, если блокировка не была получена.</span><span class="sxs-lookup"><span data-stu-id="de2c1-491">The method does not return until the lock is reacquired.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de2c1-492">Этот метод не возвращает значение `obj` до тех пор, пока он не получит монопольную блокировку на параметр.</span><span class="sxs-lookup"><span data-stu-id="de2c1-492">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="de2c1-493">Поток, который в настоящее время владеет блокировкой указанного объекта, вызывает этот метод, чтобы освободить объект, чтобы другой поток мог получить к нему доступ.</span><span class="sxs-lookup"><span data-stu-id="de2c1-493">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="de2c1-494">Вызывающий объект блокируется при ожидании повторного получения блокировки.</span><span class="sxs-lookup"><span data-stu-id="de2c1-494">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="de2c1-495">Этот метод вызывается, когда вызывающему объекту требуется подождать изменения состояния, которое будет происходить в результате операций другого потока.</span><span class="sxs-lookup"><span data-stu-id="de2c1-495">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="de2c1-496">Время ожидания гарантирует, что текущий поток не блокируется в течение неограниченного времени, если другой поток освобождает блокировку без предварительного <xref:System.Threading.Monitor.Pulse%2A> вызова <xref:System.Threading.Monitor.PulseAll%2A> метода или.</span><span class="sxs-lookup"><span data-stu-id="de2c1-496">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="de2c1-497">Он также перемещает поток в очередь готовности, обходя другие потоки перед ним в очереди ожидания, чтобы он мог повторно получить блокировку.</span><span class="sxs-lookup"><span data-stu-id="de2c1-497">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="de2c1-498">Поток может проверить возвращаемое значение <xref:System.Threading.Monitor.Wait%2A> метода, чтобы определить, был ли он получен повторно до истечения времени ожидания. Поток может оценить условия, вызвавшие его, чтобы войти в ожидание, и при необходимости снова <xref:System.Threading.Monitor.Wait%2A> вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="de2c1-498">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="de2c1-499">Когда поток вызывает `Wait`, он освобождает блокировку объекта и переходит в очередь ожидания объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-499">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="de2c1-500">Следующий поток в очереди готовности объекта (если таковой имеется) получает блокировку и эксклюзивное использование объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-500">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="de2c1-501">Поток, который вызывается `Wait` , остается в очереди ожидания до тех пор, пока не будет <xref:System.Threading.Monitor.PulseAll%2A>вызван поток, который владеет вызовом блокировки, или он является следующей в очереди и потоком, который <xref:System.Threading.Monitor.Pulse%2A>содержит вызовы блокировки.</span><span class="sxs-lookup"><span data-stu-id="de2c1-501">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="de2c1-502">Однако, если `timeout` происходит <xref:System.Threading.Monitor.Pulse%2A> до того, как другой поток вызовет метод или <xref:System.Threading.Monitor.PulseAll%2A> , исходный поток перемещается в очередь готовности для восстановления блокировки.</span><span class="sxs-lookup"><span data-stu-id="de2c1-502">However, if `timeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="de2c1-503">Если <xref:System.TimeSpan> <xref:System.Threading.Monitor.Pulse%2A> для параметра указано значение-1 миллисекунда, этот метод блокируется неопределенно долго, если владелец блокировки не вызывает или <xref:System.Threading.Monitor.PulseAll%2A>. `timeout`</span><span class="sxs-lookup"><span data-stu-id="de2c1-503">If a <xref:System.TimeSpan> representing -1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="de2c1-504">Если `timeout` значение равно 0 миллисекундам, то поток, `Wait` вызывающий освобождение блокировки, затем сразу переходит в очередь готовности, чтобы восстановить блокировку.</span><span class="sxs-lookup"><span data-stu-id="de2c1-504">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="de2c1-505">Вызывающий объект выполняется `Wait` один раз, независимо от числа вызовов <xref:System.Threading.Monitor.Enter%2A> , вызванных для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-505">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="de2c1-506">По `Wait` сути, метод сохраняет количество вызовов вызывающего <xref:System.Threading.Monitor.Enter%2A> объекта в объекте и вызывает <xref:System.Threading.Monitor.Exit%2A> столько раз, сколько необходимо для полного освобождения заблокированного объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-506">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="de2c1-507">Затем вызывающий объект блокируется при ожидании повторного получения объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-507">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="de2c1-508">Когда вызывающий объект повторно получает блокировку, система вызывает <xref:System.Threading.Monitor.Enter%2A> столько раз, сколько необходимо для восстановления сохраненного <xref:System.Threading.Monitor.Enter%2A> количества для вызывающего.</span><span class="sxs-lookup"><span data-stu-id="de2c1-508">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="de2c1-509">Вызов `Wait` освобождает блокировку только для указанного объекта; если вызывающий объект является владельцем блокировок для других объектов, эти блокировки не освобождаются.</span><span class="sxs-lookup"><span data-stu-id="de2c1-509">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="de2c1-510">Синхронизированный объект содержит несколько ссылок, включая ссылку на поток, который в настоящее время владеет блокировкой, ссылку на очередь готовности, которая содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, которая содержит потоки, ожидающие уведомления об изменении состояния объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-510">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="de2c1-511">Методы <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A> и`Wait` должны вызываться из синхронизированного блока кода.</span><span class="sxs-lookup"><span data-stu-id="de2c1-511">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="de2c1-512">Примечания для <xref:System.Threading.Monitor.Pulse%2A> метода объясняют, что происходит, если <xref:System.Threading.Monitor.Pulse%2A> вызывается, когда потоки не ожидают ожидания.</span><span class="sxs-lookup"><span data-stu-id="de2c1-512">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="de2c1-513">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-513">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="de2c1-514">Вызывающий поток не владеет блокировкой для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-514">The calling thread does not own the lock for the specified object.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="de2c1-515">Поток, который вызывает <see langword="Wait" />, позже прерывается из состояния ожидания.</span><span class="sxs-lookup"><span data-stu-id="de2c1-515">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span></span> <span data-ttu-id="de2c1-516">Это происходит, когда другой поток вызывает метод <see cref="M:System.Threading.Thread.Interrupt" /> этого потока.</span><span class="sxs-lookup"><span data-stu-id="de2c1-516">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="de2c1-517">Значение параметра <paramref name="timeout" /> в миллисекундах отрицательно и не равно <see cref="F:System.Threading.Timeout.Infinite" /> (–1 миллисекунда) или больше <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-517">The value of the <paramref name="timeout" /> parameter in milliseconds is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (-1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="de2c1-518">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="de2c1-518">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * int * bool -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="de2c1-519">Объект, в котором следует ожидать.</span><span class="sxs-lookup"><span data-stu-id="de2c1-519">The object on which to wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="de2c1-520">Количество миллисекунд для ожидания постановки в очередь готовности.</span><span class="sxs-lookup"><span data-stu-id="de2c1-520">The number of milliseconds to wait before the thread enters the ready queue.</span></span></param>
        <param name="exitContext"><span data-ttu-id="de2c1-521">Значение <see langword="true" /> для выхода из домена синхронизации в текущем контексте перед ожиданием (в синхронизированном контексте) с его последующим повторным получением; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-521"><see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="de2c1-522">Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова.</span><span class="sxs-lookup"><span data-stu-id="de2c1-522">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span> <span data-ttu-id="de2c1-523">Если указанные временные интервалы истекают, поток встает в очередь готовности.</span><span class="sxs-lookup"><span data-stu-id="de2c1-523">If the specified time-out interval elapses, the thread enters the ready queue.</span></span> <span data-ttu-id="de2c1-524">Этот метод также указывает на наличие завершения области синхронизации для контекста (если в синхронизированном контексте) до получения впоследствии нового состояния ожидания.</span><span class="sxs-lookup"><span data-stu-id="de2c1-524">This method also specifies whether the synchronization domain for the context (if in a synchronized context) is exited before the wait and reacquired afterward.</span></span></summary>
        <returns><span data-ttu-id="de2c1-525">Значение <see langword="true" />, если блокировка была получена заново до истечения заданного времени; значение <see langword="false" />, если блокировка была получена заново по истечении заданного времени.</span><span class="sxs-lookup"><span data-stu-id="de2c1-525"><see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span></span> <span data-ttu-id="de2c1-526">Этот метод не осуществляет возврат, если блокировка не была получена.</span><span class="sxs-lookup"><span data-stu-id="de2c1-526">The method does not return until the lock is reacquired.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de2c1-527">Этот метод не возвращает значение `obj` до тех пор, пока он не получит монопольную блокировку на параметр.</span><span class="sxs-lookup"><span data-stu-id="de2c1-527">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="de2c1-528">Поток, который в настоящее время владеет блокировкой указанного объекта, вызывает этот метод, чтобы освободить объект, чтобы другой поток мог получить к нему доступ.</span><span class="sxs-lookup"><span data-stu-id="de2c1-528">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="de2c1-529">Вызывающий объект блокируется при ожидании повторного получения блокировки.</span><span class="sxs-lookup"><span data-stu-id="de2c1-529">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="de2c1-530">Этот метод вызывается, когда вызывающему объекту требуется подождать изменения состояния, которое будет происходить в результате операций другого потока.</span><span class="sxs-lookup"><span data-stu-id="de2c1-530">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="de2c1-531">Время ожидания гарантирует, что текущий поток не блокируется в течение неограниченного времени, если другой поток освобождает блокировку без предварительного <xref:System.Threading.Monitor.Pulse%2A> вызова <xref:System.Threading.Monitor.PulseAll%2A> метода или.</span><span class="sxs-lookup"><span data-stu-id="de2c1-531">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="de2c1-532">Он также перемещает поток в очередь готовности, обходя другие потоки перед ним в очереди ожидания, чтобы он мог повторно получить блокировку.</span><span class="sxs-lookup"><span data-stu-id="de2c1-532">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="de2c1-533">Поток может проверить возвращаемое значение <xref:System.Threading.Monitor.Wait%2A> метода, чтобы определить, был ли он получен повторно до истечения времени ожидания. Поток может оценить условия, вызвавшие его, чтобы войти в ожидание, и при необходимости снова <xref:System.Threading.Monitor.Wait%2A> вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="de2c1-533">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="de2c1-534">Когда поток вызывает `Wait`, он освобождает блокировку и переходит в очередь ожидания.</span><span class="sxs-lookup"><span data-stu-id="de2c1-534">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="de2c1-535">На этом этапе следующий поток в очереди готовности (если таковой имеется) может контролировать блокировку.</span><span class="sxs-lookup"><span data-stu-id="de2c1-535">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="de2c1-536">Поток, который вызывается `Wait` , остается в очереди ожидания до тех пор, пока не будет <xref:System.Threading.Monitor.PulseAll%2A>вызван поток, который владеет вызовом блокировки, или он является следующей в очереди и потоком, который <xref:System.Threading.Monitor.Pulse%2A>содержит вызовы блокировки.</span><span class="sxs-lookup"><span data-stu-id="de2c1-536">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="de2c1-537">Однако, если `millisecondsTimeout` происходит <xref:System.Threading.Monitor.Pulse%2A> до того, как другой поток вызовет метод или <xref:System.Threading.Monitor.PulseAll%2A> , исходный поток перемещается в очередь готовности для восстановления блокировки.</span><span class="sxs-lookup"><span data-stu-id="de2c1-537">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="de2c1-538">Если <xref:System.Threading.Timeout.Infinite> <xref:System.Threading.Monitor.Pulse%2A> для параметра указано значение, этот метод блокируется неопределенно долго, если владелец блокировки не вызывает или <xref:System.Threading.Monitor.PulseAll%2A>. `millisecondsTimeout`</span><span class="sxs-lookup"><span data-stu-id="de2c1-538">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="de2c1-539">Если `millisecondsTimeout` равно 0, то поток, вызывающий `Wait` освобождение блокировки, затем сразу переходит в очередь готовности, чтобы восстановить блокировку.</span><span class="sxs-lookup"><span data-stu-id="de2c1-539">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="de2c1-540">Вызывающий объект выполняется `Wait` один раз, независимо от числа вызовов <xref:System.Threading.Monitor.Enter%2A> , вызванных для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-540">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="de2c1-541">По `Wait` сути, метод сохраняет количество вызовов вызывающего <xref:System.Threading.Monitor.Enter%2A> объекта в объекте и вызывает <xref:System.Threading.Monitor.Exit%2A> столько раз, сколько необходимо для полного освобождения заблокированного объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-541">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="de2c1-542">Затем вызывающий объект блокируется при ожидании повторного получения объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-542">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="de2c1-543">Когда вызывающий объект повторно получает блокировку, система вызывает <xref:System.Threading.Monitor.Enter%2A> столько раз, сколько необходимо для восстановления сохраненного <xref:System.Threading.Monitor.Enter%2A> количества для вызывающего.</span><span class="sxs-lookup"><span data-stu-id="de2c1-543">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="de2c1-544">Вызов `Wait` освобождает блокировку только для указанного объекта; если вызывающий объект является владельцем блокировок для других объектов, эти блокировки не освобождаются.</span><span class="sxs-lookup"><span data-stu-id="de2c1-544">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="de2c1-545">Синхронизированный объект содержит несколько ссылок, включая ссылку на поток, который в настоящее время владеет блокировкой, ссылку на очередь готовности, которая содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, которая содержит потоки, ожидающие уведомления об изменении состояния объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-545">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="de2c1-546">Методы <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A> и`Wait` должны вызываться из синхронизированного блока кода.</span><span class="sxs-lookup"><span data-stu-id="de2c1-546">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="de2c1-547">Примечания для <xref:System.Threading.Monitor.Pulse%2A> метода объясняют, что происходит, если <xref:System.Threading.Monitor.Pulse%2A> вызывается, когда потоки не ожидают ожидания.</span><span class="sxs-lookup"><span data-stu-id="de2c1-547">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="de2c1-548">Примечания о выходе из контекста</span><span class="sxs-lookup"><span data-stu-id="de2c1-548">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="de2c1-549">Параметр не действует, <xref:System.Threading.Monitor.Wait%2A> если метод не вызывается из управляемого контекста, не используемого по умолчанию.`exitContext`</span><span class="sxs-lookup"><span data-stu-id="de2c1-549">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="de2c1-550">Это может произойти, если поток находится внутри вызова экземпляра класса, производного от <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="de2c1-550">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="de2c1-551">Даже если в данный момент выполняется метод для класса, который не является производным от <xref:System.ContextBoundObject>, например <xref:System.String>, вы можете находиться в нестандартном контексте, если <xref:System.ContextBoundObject> в вашем стеке в текущем домене приложения есть.</span><span class="sxs-lookup"><span data-stu-id="de2c1-551">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="de2c1-552">Если код выполняется в контексте, не установленном по умолчанию `true` , `exitContext` то при указании значения для потока будет завершен нестандартный управляемый контекст (то есть переход к <xref:System.Threading.Monitor.Wait%2A> контексту по умолчанию) перед выполнением метода.</span><span class="sxs-lookup"><span data-stu-id="de2c1-552">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="de2c1-553">После завершения вызова <xref:System.Threading.Monitor.Wait%2A> метода он возвращается к исходному контексту, не заданному по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="de2c1-553">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="de2c1-554">Это может быть полезно, если к контекстно-привязанному <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> классу применен атрибут.</span><span class="sxs-lookup"><span data-stu-id="de2c1-554">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="de2c1-555">В этом случае все вызовы членов класса автоматически синхронизируются, а домен синхронизации — весь текст кода для класса.</span><span class="sxs-lookup"><span data-stu-id="de2c1-555">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="de2c1-556">Если код в стеке вызовов члена вызывает <xref:System.Threading.Monitor.Wait%2A> метод и указывает `true` для `exitContext`, поток завершает домен синхронизации, позволяя потоку, который блокируется на вызов любого члена объекта, продолжать работу.</span><span class="sxs-lookup"><span data-stu-id="de2c1-556">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="de2c1-557"><xref:System.Threading.Monitor.Wait%2A> Когда метод возвращает значение, поток, который выполнил вызов, должен дождаться повторного входа в домен синхронизации.</span><span class="sxs-lookup"><span data-stu-id="de2c1-557">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="de2c1-558">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-558">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="de2c1-559"><see langword="Wait" /> — не вызывается из синхронизированного блока кода.</span><span class="sxs-lookup"><span data-stu-id="de2c1-559"><see langword="Wait" /> is not invoked from within a synchronized block of code.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="de2c1-560">Поток, который вызывает <see langword="Wait" />, позже прерывается из состояния ожидания.</span><span class="sxs-lookup"><span data-stu-id="de2c1-560">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span></span> <span data-ttu-id="de2c1-561">Это происходит, когда другой поток вызывает метод <see cref="M:System.Threading.Thread.Interrupt" /> этого потока.</span><span class="sxs-lookup"><span data-stu-id="de2c1-561">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="de2c1-562">Значение параметра <paramref name="millisecondsTimeout" /> отрицательно и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-562">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="de2c1-563">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="de2c1-563">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * TimeSpan * bool -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="de2c1-564">Объект, в котором следует ожидать.</span><span class="sxs-lookup"><span data-stu-id="de2c1-564">The object on which to wait.</span></span></param>
        <param name="timeout"><span data-ttu-id="de2c1-565">Класс <see cref="T:System.TimeSpan" />, представляющий количество времени, до истечения которого поток поступает в очередь ожидания.</span><span class="sxs-lookup"><span data-stu-id="de2c1-565">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span></span></param>
        <param name="exitContext"><span data-ttu-id="de2c1-566">Значение <see langword="true" /> для выхода из домена синхронизации в текущем контексте перед ожиданием (в синхронизированном контексте) с его последующим повторным получением; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-566"><see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="de2c1-567">Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова.</span><span class="sxs-lookup"><span data-stu-id="de2c1-567">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span> <span data-ttu-id="de2c1-568">Если указанные временные интервалы истекают, поток встает в очередь готовности.</span><span class="sxs-lookup"><span data-stu-id="de2c1-568">If the specified time-out interval elapses, the thread enters the ready queue.</span></span> <span data-ttu-id="de2c1-569">Дополнительно выходит из синхронизированного домена для синхронизации контекста до ожидания и получает домен впоследствии.</span><span class="sxs-lookup"><span data-stu-id="de2c1-569">Optionally exits the synchronization domain for the synchronized context before the wait and reacquires the domain afterward.</span></span></summary>
        <returns><span data-ttu-id="de2c1-570">Значение <see langword="true" />, если блокировка была получена заново до истечения заданного времени; значение <see langword="false" />, если блокировка была получена заново по истечении заданного времени.</span><span class="sxs-lookup"><span data-stu-id="de2c1-570"><see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span></span> <span data-ttu-id="de2c1-571">Этот метод не осуществляет возврат, если блокировка не была получена.</span><span class="sxs-lookup"><span data-stu-id="de2c1-571">The method does not return until the lock is reacquired.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de2c1-572">Этот метод не возвращает значение `obj` до тех пор, пока он не получит монопольную блокировку на параметр.</span><span class="sxs-lookup"><span data-stu-id="de2c1-572">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="de2c1-573">Поток, который в настоящее время владеет блокировкой указанного объекта, вызывает этот метод, чтобы освободить объект, чтобы другой поток мог получить к нему доступ.</span><span class="sxs-lookup"><span data-stu-id="de2c1-573">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="de2c1-574">Вызывающий объект блокируется при ожидании повторного получения блокировки.</span><span class="sxs-lookup"><span data-stu-id="de2c1-574">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="de2c1-575">Этот метод вызывается, когда вызывающему объекту требуется подождать изменения состояния, которое будет происходить в результате операций другого потока.</span><span class="sxs-lookup"><span data-stu-id="de2c1-575">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="de2c1-576">Время ожидания гарантирует, что текущий поток не блокируется в течение неограниченного времени, если другой поток освобождает блокировку без предварительного <xref:System.Threading.Monitor.Pulse%2A> вызова <xref:System.Threading.Monitor.PulseAll%2A> метода или.</span><span class="sxs-lookup"><span data-stu-id="de2c1-576">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="de2c1-577">Он также перемещает поток в очередь готовности, обходя другие потоки перед ним в очереди ожидания, чтобы он мог повторно получить блокировку.</span><span class="sxs-lookup"><span data-stu-id="de2c1-577">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="de2c1-578">Поток может проверить возвращаемое значение <xref:System.Threading.Monitor.Wait%2A> метода, чтобы определить, был ли он получен повторно до истечения времени ожидания. Поток может оценить условия, вызвавшие его, чтобы войти в ожидание, и при необходимости снова <xref:System.Threading.Monitor.Wait%2A> вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="de2c1-578">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="de2c1-579">Когда поток вызывает `Wait`, он освобождает блокировку и переходит в очередь ожидания.</span><span class="sxs-lookup"><span data-stu-id="de2c1-579">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="de2c1-580">На этом этапе следующий поток в очереди готовности (если таковой имеется) может контролировать блокировку.</span><span class="sxs-lookup"><span data-stu-id="de2c1-580">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="de2c1-581">Поток, который вызывается `Wait` , остается в очереди ожидания до тех пор, пока не будет <xref:System.Threading.Monitor.PulseAll%2A>вызван поток, который владеет вызовом блокировки, или он является следующей в очереди и потоком, который <xref:System.Threading.Monitor.Pulse%2A>содержит вызовы блокировки.</span><span class="sxs-lookup"><span data-stu-id="de2c1-581">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="de2c1-582">Однако если `timeout` миллисекунды пройдут до того, как другой поток вызовет <xref:System.Threading.Monitor.Pulse%2A> этот <xref:System.Threading.Monitor.PulseAll%2A> метод или, исходный поток перемещается в очередь готовности для восстановления блокировки.</span><span class="sxs-lookup"><span data-stu-id="de2c1-582">However, if `timeout` milliseconds elapse before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="de2c1-583">Если <xref:System.TimeSpan> <xref:System.Threading.Monitor.Pulse%2A> для параметра указано значение-1 миллисекунда, этот метод блокируется неопределенно долго, если владелец блокировки не вызывает или <xref:System.Threading.Monitor.PulseAll%2A>. `timeout`</span><span class="sxs-lookup"><span data-stu-id="de2c1-583">If a <xref:System.TimeSpan> representing -1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="de2c1-584">Если `timeout` значение равно 0 миллисекундам, то поток, `Wait` вызывающий освобождение блокировки, затем сразу переходит в очередь готовности, чтобы восстановить блокировку.</span><span class="sxs-lookup"><span data-stu-id="de2c1-584">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="de2c1-585">Вызывающий объект выполняется `Wait` один раз, независимо от числа вызовов <xref:System.Threading.Monitor.Enter%2A> , вызванных для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-585">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="de2c1-586">По `Wait` сути, метод сохраняет количество вызовов вызывающего <xref:System.Threading.Monitor.Enter%2A> объекта в объекте и вызывает <xref:System.Threading.Monitor.Exit%2A> столько раз, сколько необходимо для полного освобождения заблокированного объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-586">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="de2c1-587">Затем вызывающий объект блокируется при ожидании повторного получения объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-587">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="de2c1-588">Когда вызывающий объект повторно получает блокировку, система вызывает <xref:System.Threading.Monitor.Enter%2A> столько раз, сколько необходимо для восстановления сохраненного <xref:System.Threading.Monitor.Enter%2A> количества для вызывающего.</span><span class="sxs-lookup"><span data-stu-id="de2c1-588">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="de2c1-589">Вызов `Wait` освобождает блокировку только для указанного объекта; если вызывающий объект является владельцем блокировок для других объектов, эти блокировки не освобождаются.</span><span class="sxs-lookup"><span data-stu-id="de2c1-589">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="de2c1-590">Синхронизированный объект содержит несколько ссылок, включая ссылку на поток, который в настоящее время владеет блокировкой, ссылку на очередь готовности, которая содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, которая содержит потоки, ожидающие уведомления об изменении состояния объекта.</span><span class="sxs-lookup"><span data-stu-id="de2c1-590">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="de2c1-591">Методы <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A> и`Wait` должны вызываться из синхронизированного блока кода.</span><span class="sxs-lookup"><span data-stu-id="de2c1-591">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="de2c1-592">Примечания для <xref:System.Threading.Monitor.Pulse%2A> метода объясняют, что происходит, если <xref:System.Threading.Monitor.Pulse%2A> вызывается, когда потоки не ожидают ожидания.</span><span class="sxs-lookup"><span data-stu-id="de2c1-592">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="de2c1-593">Примечания о выходе из контекста</span><span class="sxs-lookup"><span data-stu-id="de2c1-593">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="de2c1-594">Параметр не действует, <xref:System.Threading.Monitor.Wait%2A> если метод не вызывается из управляемого контекста, не используемого по умолчанию.`exitContext`</span><span class="sxs-lookup"><span data-stu-id="de2c1-594">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="de2c1-595">Это может произойти, если поток находится внутри вызова экземпляра класса, производного от <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="de2c1-595">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="de2c1-596">Даже если в данный момент выполняется метод для класса, который не является производным от <xref:System.ContextBoundObject>, например <xref:System.String>, вы можете находиться в нестандартном контексте, если <xref:System.ContextBoundObject> в вашем стеке в текущем домене приложения есть.</span><span class="sxs-lookup"><span data-stu-id="de2c1-596">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="de2c1-597">Если код выполняется в контексте, не установленном по умолчанию `true` , `exitContext` то при указании значения для потока будет завершен нестандартный управляемый контекст (то есть переход к <xref:System.Threading.Monitor.Wait%2A> контексту по умолчанию) перед выполнением метода.</span><span class="sxs-lookup"><span data-stu-id="de2c1-597">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="de2c1-598">После завершения вызова <xref:System.Threading.Monitor.Wait%2A> метода он возвращается к исходному контексту, не заданному по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="de2c1-598">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="de2c1-599">Это может быть полезно, если к контекстно-привязанному <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> классу применен атрибут.</span><span class="sxs-lookup"><span data-stu-id="de2c1-599">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="de2c1-600">В этом случае все вызовы членов класса автоматически синхронизируются, а домен синхронизации — весь текст кода для класса.</span><span class="sxs-lookup"><span data-stu-id="de2c1-600">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="de2c1-601">Если код в стеке вызовов члена вызывает <xref:System.Threading.Monitor.Wait%2A> метод и указывает `true` для `exitContext`, поток завершает домен синхронизации, позволяя потоку, который блокируется на вызов любого члена объекта, продолжать работу.</span><span class="sxs-lookup"><span data-stu-id="de2c1-601">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="de2c1-602"><xref:System.Threading.Monitor.Wait%2A> Когда метод возвращает значение, поток, который выполнил вызов, должен дождаться повторного входа в домен синхронизации.</span><span class="sxs-lookup"><span data-stu-id="de2c1-602">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="de2c1-603">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-603">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="de2c1-604"><see langword="Wait" /> — не вызывается из синхронизированного блока кода.</span><span class="sxs-lookup"><span data-stu-id="de2c1-604"><see langword="Wait" /> is not invoked from within a synchronized block of code.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="de2c1-605">Для потока, который вызывает Wait, состояние ожидания позже прерывается.</span><span class="sxs-lookup"><span data-stu-id="de2c1-605">The thread that invokes Wait is later interrupted from the waiting state.</span></span> <span data-ttu-id="de2c1-606">Это происходит, когда другой поток вызывает метод <see cref="M:System.Threading.Thread.Interrupt" /> этого потока.</span><span class="sxs-lookup"><span data-stu-id="de2c1-606">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="de2c1-607">Значение параметра <paramref name="timeout" /> в миллисекундах отрицательно и не равно <see cref="F:System.Threading.Timeout.Infinite" /> (–1 миллисекунда) или больше <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="de2c1-607">The <paramref name="timeout" /> parameter is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (-1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="de2c1-608">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="de2c1-608">Managed Threading</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>