<Type Name="Monitor" FullName="System.Threading.Monitor">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a291bd5210f3cf06642cbd026f8633cce48fc987" /><Meta Name="ms.sourcegitcommit" Value="a22d0855bbf24d893f43605f8b7e3a44bd9551a5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70363036" /></Metadata><TypeSignature Language="C#" Value="public static class Monitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Monitor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Monitor" />
  <TypeSignature Language="VB.NET" Value="Public Class Monitor" />
  <TypeSignature Language="C++ CLI" Value="public ref class Monitor abstract sealed" />
  <TypeSignature Language="F#" Value="type Monitor = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Предоставляет механизм для синхронизации доступа к объектам.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Класс позволяет синхронизировать доступ к области кода, <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>вызывая и освобождая блокировку конкретного объекта путем вызова методов, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>и <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType>. <xref:System.Threading.Monitor> Блокировки объектов предоставляют возможность ограничить доступ к блоку кода, обычно называемому критическим разделом. Пока поток владеет блокировкой объекта, другой поток не может получить эту блокировку. Можно также использовать <xref:System.Threading.Monitor> класс, чтобы запретить другим потокам доступ к разделу кода приложения, выполняемому владельцем блокировки, если только другой поток не выполняет код, используя другой заблокированный объект.  
  
 Содержание этой статьи  
  
 [Класс Monitor: Обзор](#Overview)   
 [Объект Lock](#Lock)   
 [Критическая секция](#CriticalSection)   
 [Pulse, PulseAll и Wait](#Pulse)   
 [Мониторы и дескрипторы ожидания](#WaitHandles)  
  
<a name="Overview"></a>   
## <a name="the-monitor-class-an-overview"></a>Класс Monitor: Обзор  
 <xref:System.Threading.Monitor>имеет следующие возможности.  
  
-   Он связан с объектом по требованию.  
  
-   Он не связан. Это означает, что его можно вызывать непосредственно из любого контекста.  
  
-   Экземпляр <xref:System.Threading.Monitor> класса не может быть создан; методы <xref:System.Threading.Monitor> класса являются статическими. Каждому методу передается синхронизированный объект, который управляет доступом к критической секции.  
  
> [!NOTE]
>  Используйте класс для блокировки объектов, отличных от строк (то есть ссылочных типов, <xref:System.String>отличных от), а не типов значений. <xref:System.Threading.Monitor> Дополнительные сведения см. в разделе перегрузки <xref:System.Threading.Monitor.Enter%2A> метода и [объекта блокировки](#Lock) далее в этой статье.  
  
 В следующей таблице описаны действия, которые могут выполняться потоками, обращающимися к синхронизированным объектам.  
  
|Действие|Описание|  
|------------|-----------------|  
|<xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A>|Получает блокировку для объекта. Это действие также помечает начало критического раздела. Ни один другой поток не может войти в критическую секцию, если он не будет выполнять инструкции в критическом разделе, используя другой заблокированный объект.|  
|<xref:System.Threading.Monitor.Wait%2A>|Освобождает блокировку объекта, чтобы позволить другим потокам блокировать и получать доступ к объекту. Вызывающий поток ожидает, пока другой поток пообращается к объекту. Импульсные сигналы используются для уведомления ожидающих потоков об изменениях в состоянии объекта.|  
|<xref:System.Threading.Monitor.Pulse%2A>(сигнал),<xref:System.Threading.Monitor.PulseAll%2A>|Отправляет сигнал одному или нескольким ожидающим потокам. Сигнал уведомляет ожидающий поток о том, что состояние заблокированного объекта изменилось, а владелец блокировки готов освободить блокировку. Ожидающий поток помещается в очередь готовности объекта, чтобы она могла в конечном итоге получить блокировку для объекта. После блокировки потока он может проверить новое состояние объекта, чтобы узнать, было ли достигнуто требуемое состояние.|  
|<xref:System.Threading.Monitor.Exit%2A>|Освобождает блокировку объекта. Это действие также помечает конец критической секции, защищенной заблокированным объектом.|  
  
 Начиная с [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], существует два набора перегрузок <xref:System.Threading.Monitor.Enter%2A> для методов и <xref:System.Threading.Monitor.TryEnter%2A> . Один набор `ref` перегрузок имеет параметр (in C#) или `ByRef` (в Visual Basic) <xref:System.Boolean> , который атомарно устанавливается в `true` значение, если блокировка получена, даже если при получении блокировки возникает исключение. Используйте эти перегрузки, если важно снять блокировку во всех случаях, даже если ресурсы, защищающие блокировку, могут находиться в нестабильном состоянии.  
  
<a name="Lock"></a>   
## <a name="the-lock-object"></a>Объект Lock  
 Класс Monitor состоит из `static` методов (in C#) или `Shared` (в Visual Basic), которые работают с объектом, который управляет доступом к критическому разделу.  Для каждого синхронизированного объекта сохраняются следующие сведения.  
  
-   Ссылка на поток, который в настоящий момент удерживает блокировку.  
  
-   Ссылка на очередь готовности, которая содержит потоки, готовые к получению блокировки.  
  
-   Ссылка на очередь ожидания, которая содержит потоки, ожидающие уведомления об изменении состояния заблокированного объекта.  
  
 <xref:System.Threading.Monitor> блокирует объекты (то есть ссылочные типы), а не типы значений. Хотя можно передать тип значения в <xref:System.Threading.Monitor.Enter%2A> и <xref:System.Threading.Monitor.Exit%2A>, он упаковывается отдельно для каждого вызова. Поскольку при каждом вызове создается отдельный объект, <xref:System.Threading.Monitor.Enter%2A> никогда не выполняет блокировку, а код, который он предположительно защищает, на самом деле не синхронизируется. Кроме того, объект, переданный в <xref:System.Threading.Monitor.Exit%2A>, отличается от объекта, переданного в <xref:System.Threading.Monitor.Enter%2A>, поэтому <xref:System.Threading.Monitor> вызывает исключение <xref:System.Threading.SynchronizationLockException> с сообщением «Для не синхронизированного блока кода вызван метод синхронизации объектов».  
  
 Приведенный ниже пример иллюстрирует данную проблему. Он запускает десять задач, каждая из которых просто бездействует в течение 250 миллисекунд. Затем каждая задача обновляет переменную счетчика `nTasks`, который предназначен для подсчета количества фактически запущенных и выполненных задач. Поскольку `nTasks` является глобальной переменной, которая может обновляться несколькими задачами одновременно, используется монитор, защищающий ее от одновременного изменения несколькими задачами. Тем не менее, как показывают выходные данные в примере, каждая из задач вызывает исключение <xref:System.Threading.SynchronizationLockException>.  
  
 [!code-csharp[Conceptual.Monitors#2](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badlock1.cs#2)]
 [!code-vb[Conceptual.Monitors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badlock1.vb#2)]  
  
 Каждая задача вызывает исключение <xref:System.Threading.SynchronizationLockException> из-за того, что переменная `nTasks` упаковывается перед вызовом метода <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> в каждой задаче. Другими словами, в каждый вызов метода передается отдельная переменная, которая независима от остальных. `nTasks` снова упаковывается в вызове метода <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType>. И снова при этом создается десять новых упакованных переменных, которые не зависят друг от друга, `nTasks`, и десять упакованных переменных, созданных при вызове метода <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>. Затем вызывается исключение, поскольку наш код пытается снять блокировку для вновь созданной переменной, которая ранее не была заблокирована.  
  
 Хотя можно упаковать переменную типа значения перед вызовом <xref:System.Threading.Monitor.Enter%2A> и <xref:System.Threading.Monitor.Exit%2A>, как показано в следующем примере, и передать тот же упакованный объект в оба метода, такой подход не дает никаких преимуществ. Изменения неупакованной переменной не отражаются в упакованной копии, и возможность изменения значения упакованной копии отсутствует.  
  
 [!code-csharp[Conceptual.Monitors#3](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badbox1.cs#3)]
 [!code-vb[Conceptual.Monitors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badbox1.vb#3)]  
  
 При выборе объекта для синхронизации следует блокировать только закрытые или внутренние объекты. Блокировка внешних объектов может привести к взаимоблокировкам, так как несвязанный код может выбирать те же объекты для блокировки в различных целях.  
  
 Обратите внимание, что можно выполнить синхронизацию для объекта в нескольких доменах приложений, если объект, используемый для <xref:System.MarshalByRefObject>блокировки, является производным от.  
  
<a name="CriticalSection"></a>   
## <a name="the-critical-section"></a>Критическая секция  
 Используйте методы <xref:System.Threading.Monitor.Exit%2A> и для обозначения начала и конца критической секции. <xref:System.Threading.Monitor.Enter%2A>  
  
> [!NOTE]
>  Функциональные возможности, предоставляемые <xref:System.Threading.Monitor.Enter%2A> <xref:System.Threading.Monitor.Exit%2A> методами и, идентичны функциям, предоставляемым оператором C# [Lock](~/docs/csharp/language-reference/keywords/lock-statement.md) в и оператором [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) в Visual Basic, за исключением того, что языковые конструкции заключают <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType>перегрузка метода и <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> `try`метод в...`finally` , чтобы убедиться, что монитор освобожден.  
  
 Если критическая секция является набором смежных инструкций, то блокировка, полученная <xref:System.Threading.Monitor.Enter%2A> методом, гарантирует, что только один поток может выполнить вложенный код с заблокированным объектом. В этом случае рекомендуется поместить этот код в `try` блок и поместить вызов <xref:System.Threading.Monitor.Exit%2A> метода в `finally` блок. Это гарантирует снятие блокировки даже при возникновении исключения. Этот шаблон показан в следующем фрагменте кода.  
  
 [!code-csharp[System.Threading.Monitor.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#2)]
 [!code-vb[System.Threading.Monitor.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#2)]  
  
 Это средство обычно используется для синхронизации доступа к статическому методу или экземпляру класса.  
  
 Если критическая секция охватывает весь метод, механизм блокировки можно достичь, поместив в <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType> метод и <xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized> указав <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>значение в конструкторе. При использовании этого атрибута <xref:System.Threading.Monitor.Enter%2A> вызовы методов и <xref:System.Threading.Monitor.Exit%2A> не требуются. Этот шаблон показан в следующем фрагменте кода:  
  
 [!code-csharp[System.Threading.Monitor.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#3)]
 [!code-vb[System.Threading.Monitor.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#3)]  
  
 Обратите внимание, что атрибут заставляет текущий поток удерживать блокировку до тех пор, пока метод не вернет значение. Если блокировку можно освободить <xref:System.Threading.Monitor> раньше, используйте класс, C# оператор [блокировки](~/docs/csharp/language-reference/keywords/lock-statement.md) или оператор Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) внутри метода вместо атрибута.  
  
 Хотя для <xref:System.Threading.Monitor.Enter%2A> операторов и <xref:System.Threading.Monitor.Exit%2A> , которые блокируют и освобождают данный объект, можно использовать перекрестные элементы или границы класса или и то, и другое, такой подход не рекомендуется.  
  
<a name="Pulse"></a>   
## <a name="pulse-pulseall-and-wait"></a>Pulse, PulseAll и Wait  
 После того как поток владеет блокировкой и вошел в критический раздел, который защищается блокировкой, он может вызывать <xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>методы <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>, и <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> .  
  
 Когда поток, содержащий вызовы <xref:System.Threading.Monitor.Wait%2A>блокировки, снимается и поток добавляется в очередь ожидания синхронизированного объекта. Первый поток в очереди готовности, если таковой имеется, получает блокировку и вводит критическую секцию. Поток, вызываемый <xref:System.Threading.Monitor.Wait%2A> , перемещается из очереди ожидания в очередь готовности, <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType> если <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> метод или вызывается потоком, который владеет блокировкой (для перемещения, поток должен находиться в заголовке очереди ожидания). <xref:System.Threading.Monitor.Wait%2A> Метод возвращает, когда вызывающий поток снова получает блокировку.  
  
 При вызове потока, содержащего вызовы <xref:System.Threading.Monitor.Pulse%2A>блокировки, поток в заголовке очереди ожидания перемещается в очередь готовности. Вызов <xref:System.Threading.Monitor.PulseAll%2A> метода перемещает все потоки из очереди ожидания в очередь готовности.  
  
<a name="WaitHandles"></a>   
## <a name="monitors-and-wait-handles"></a>Мониторы и дескрипторы ожидания  
 Важно отметить различие между использованием <xref:System.Threading.Monitor> класса и <xref:System.Threading.WaitHandle> объектов.  
  
-   <xref:System.Threading.Monitor> Класс является полностью управляемым, полным переносимым и может быть более эффективным с точки зрения требований к ресурсам операционной системы.  
  
-   Объекты <xref:System.Threading.WaitHandle> представляют объекты ожидания операционной системы, удобны для синхронизации между управляемым и неуправляемым кодом и предоставляют некоторые расширенные функции операционной системы, например возможность ожидания сразу нескольких объектов.  
  
   
  
## Examples  
 В следующем примере <xref:System.Threading.Monitor> класс используется для синхронизации доступа к одному экземпляру генератора случайных чисел, представленного <xref:System.Random> классом. В примере создается десять задач, каждый из которых асинхронно выполняется в потоке пула потоков. Каждая задача создает 10 000 случайных чисел, вычисляет их среднее значение и обновляет две переменные уровня процедуры, которые сохраняют общую сумму количества созданных случайных чисел и их сумму. После выполнения всех задач эти два значения затем используются для вычисления общего значения.  
  
 [!code-csharp[System.Threading.Monitor.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/example1.cs#1)]
 [!code-vb[System.Threading.Monitor.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/example1.vb#1)]  
  
 Так как доступ к ним можно получить из любой задачи, выполняемой в потоке пула потоков, `total` доступ `n` к переменным и также должен быть синхронизирован. Для этой цели используется метод.<xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType>  
  
 В следующем примере показано <xref:System.Threading.Monitor> комбинированное использование класса (реализованного `lock` с помощью <xref:System.Threading.AutoResetEvent> конструкции языка `SyncLock` или), <xref:System.Threading.Interlocked> класса и класса. Он определяет два класса `internal` (в C#) или `Friend` (в Visual Basic), `SyncResource` и `UnSyncResource`, которые соответственно предоставляют синхронизированный и несинхронизированный доступ к ресурсу. Чтобы обеспечить демонстрацию в примере различия между синхронизированным и несинхронизированным доступом (что может случиться, если каждый вызов метода завершается быстро), метод включает случайную задержку: для потоков, свойство <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> которых имеет четное значение, метод вызывает <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> для введения задержки в 2 000 миллисекунд. Обратите внимание, что поскольку класс `SyncResource` не является общим, ни один клиентский код не выполняет блокировку в синхронизированном ресурсе; внутренний класс сам выполняет блокировку. Это предотвращает блокировка общедоступного объекта вредоносным кодом.  
  
 [!code-csharp[Conceptual.Monitors#1](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/source.cs#1)]
 [!code-vb[Conceptual.Monitors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/source.vb#1)]  
  
 В примере определяется переменная `numOps`, задающая число потоков, которые будут пытаться получить доступ к ресурсу. Поток приложения вызывает метод <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> для синхронизированного и несинхронизированного доступа по пять раз. Метод <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> имеет единственный параметр, делегат, который не принимает никаких параметров и не возвращает значений. Для синхронизированного доступа он вызывает метод `SyncUpdateResource`; для несинхронизированного доступа он вызывает метод `UnSyncUpdateResource`. После каждого набора вызовов метода поток приложения вызывает метод [AutoResetEvent. WaitOne](xref:System.Threading.WaitHandle.WaitOne*) , чтобы он блокировался до получения сигнала от <xref:System.Threading.AutoResetEvent> экземпляра.  
  
 Каждый вызов метода `SyncUpdateResource` вызывает внутренний метод `SyncResource.Access`, а затем вызывает метод <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> для уменьшения счетчика `numOps`. <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> Метод используется для уменьшения значения счетчика, так как в противном случае невозможно убедиться, что второй поток будет обращаться к значению до того, как значение декремента первого потока было сохранено в переменной. Когда последний синхронизированный рабочий поток уменьшает счетчик до нуля, указывая, что все синхронизированные потоки завершили доступ к ресурсу, `SyncUpdateResource` метод <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> вызывает метод, который сигнализирует основному потоку продолжить. InstancePersistenceCommand.  
  
 Каждый вызов метода `UnSyncUpdateResource` вызывает внутренний метод `UnSyncResource.Access`, а затем вызывает метод <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> для уменьшения счетчика `numOps`. Опять же, <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> метод используется для уменьшения значения счетчика, чтобы второй поток не получил доступа к значению до того, как переменной будет присвоено уменьшенное значение первого потока. Когда последний несинхронизированный рабочий поток уменьшает значение счетчика до нуля, указывая, что больше несинхронизированных потоков не требуется обращаться к ресурсу, `UnSyncUpdateResource` метод <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> вызывает метод, который сигнализирует основному потоку продолжить выполнение. .  
  
 Как показывает результат этого примера, синхронизированный доступ обеспечивает, что вызывающий поток выходит из защищенного ресурса до того, как другой поток получит доступ к этому ресурсу; каждый поток ожидает своего предшественника. С другой стороны, без блокировки метод `UnSyncResource.Access` вызывается в том порядке, в котором потоки получают к нему доступ.  
  
 ]]></format>
    </remarks>
    <threadsafe>Данный тип потокобезопасен.</threadsafe>
    <altmember cref="T:System.Threading.Thread" />
    <related type="Article" href="~/docs/standard/threading/index.md">Управляемая поточность</related>
    <related type="Article" href="~/docs/standard/threading/threading-objects-and-features.md">Объекты и функциональные возможности работы с потоками</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="Enter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Получает монопольную блокировку указанного объекта.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Enter : obj -&gt; unit" Usage="System.Threading.Monitor.Enter obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, для которого получается блокировка монитора.</param>
        <summary>Получает эксклюзивную блокировку указанного объекта.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте `Enter` , чтобы <xref:System.Threading.Monitor> получить объект для объекта, переданного в качестве параметра. Если другой поток выполнил `Enter` в объекте объект, но еще не выполнил соответствующий <xref:System.Threading.Monitor.Exit%2A>параметр, текущий поток будет заблокирован до тех пор, пока другой поток не освободит объект. Допустимо, чтобы один и тот же поток вызывал `Enter` больше одного раза без блокировки. Тем не менее, необходимо вызвать равное `Exit` число вызовов, прежде чем другие потоки, ожидающие объекта, будут разблокированы.  
  
 Используйте <xref:System.Threading.Monitor> для блокировки объектов (то есть ссылочных типов), а не типов значений. При передаче переменной типа значения в `Enter`она упаковывается как объект. Если вы `Enter` снова передаете одну и ту же переменную, она упаковывается как отдельный объект, а поток не блокируется. В этом случае код, который `Monitor` предполагается защищать, не защищен. Более того, при передаче переменной в `Exit`можно создать другой отдельный объект. Поскольку объект, переданный `Exit` в, отличается от объекта, переданного `Monitor` в <xref:System.Threading.SynchronizationLockException> `Enter`, вызывает исключение. Дополнительные сведения см. в разделе « [мониторы](xref:System.Threading.Monitor)».  
  
 <xref:System.Threading.Thread.Interrupt%2A>может прерывать потоки, ожидающие ввода `Monitor` объекта. <xref:System.Threading.ThreadInterruptedException> Будет выдано исключение.  
  
 C# Использовать...`try``finally` блок (`Try`...`Finally` в Visual Basic) убедитесь, что вы выпустите монитор, или используйте C# `lock` оператор (`SyncLock` оператор в <xref:System.Threading.Monitor.Enter%2A> Visual Basic), который `try`создает оболочку для методов <xref:System.Threading.Monitor.Exit%2A> и в...`finally` блок.  
  
   
  
## Examples  
 В следующем примере показано использование метода `Enter`.  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md">Управляемая поточность</related>
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member Enter : obj * bool -&gt; unit" Usage="System.Threading.Monitor.Enter (obj, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, в котором следует ожидать.</param>
        <param name="lockTaken">Результат попытки получить блокировку, переданную по ссылке. Входное значение должно равняться <see langword="false" />. Выходное значение <see langword="true" />, если блокировка получена; в противном случае — выходное значение <see langword="false" />. Выходное значение задается, даже если при попытке получить блокировку возникает исключение.  
  
Примечание. Если исключение не возникает, выходное значение этого метода всегда равно <see langword="true" />.</param>
        <summary>Получает монопольную блокировку указанного объекта и единым блоком задает значение, указывающее, была ли выполнена блокировка.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте `Enter` , чтобы <xref:System.Threading.Monitor> получить объект для объекта, переданного `obj` в качестве параметра. Если другой поток выполнил `Enter` в объекте объект, но еще не выполнил соответствующий <xref:System.Threading.Monitor.Exit%2A>параметр, текущий поток будет заблокирован до тех пор, пока другой поток не освободит объект. Допустимо, чтобы один и тот же поток вызывал `Enter` больше одного раза без блокировки. Тем не менее, необходимо вызвать равное `Exit` число вызовов, прежде чем другие потоки, ожидающие объекта, будут разблокированы.  
  
 Если блокировка не была выполнена из-за возникновения исключения, переменная, указанная для `lockTaken` параметра, находится `false` после завершения этого метода. Это позволяет программе определить во всех случаях, требуется ли снять блокировку. Если этот метод возвращает исключение без создания исключения, то переменная, указанная `lockTaken` для параметра, `true`всегда имеет значение, и нет необходимости тестировать ее.  
  
 Используйте <xref:System.Threading.Monitor> для блокировки объектов (то есть ссылочных типов), а не типов значений. При передаче переменной типа значения в `Enter`она упаковывается как объект. Если вы `Enter` снова передаете одну и ту же переменную, она упаковывается как отдельный объект, а поток не блокируется. В этом случае код, который `Monitor` предполагается защищать, не защищен. Кроме того, при передаче переменной в `Exit`создается другой отдельный объект. Поскольку объект, переданный `Exit` в, отличается от объекта, переданного `Monitor` в <xref:System.Threading.SynchronizationLockException> `Enter`, вызывает исключение. Дополнительные сведения см. в разделе « [мониторы](xref:System.Threading.Monitor)».  
  
 <xref:System.Threading.Thread.Interrupt%2A>может прерывать потоки, ожидающие ввода `Monitor` объекта. <xref:System.Threading.ThreadInterruptedException> Будет выдано исключение.  
  
   
  
## Examples  
 В следующем коде показан базовый шаблон для использования <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29> перегрузки метода. Эта перегрузка всегда задает значение переменной, которая передается `ref` в параметр (`ByRef` в Visual Basic) `lockTaken`, даже если метод создает исключение, поэтому значение переменной является надежным способом проверки того, должна ли блокировка быть освободил.  
  
 [!code-csharp[System.Threading.Monitor.Enter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#2)]
 [!code-vb[System.Threading.Monitor.Enter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Входные данные для <paramref name="lockTaken" /> — <see langword="true" />.</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public static void Exit (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Exit(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Exit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Exit (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Exit(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Exit : obj -&gt; unit" Usage="System.Threading.Monitor.Exit obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, блокировка которого освобождается.</param>
        <summary>Освобождает эксклюзивную блокировку указанного объекта.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызывающий поток должен владеть блокировкой `obj` параметра. Если вызывающий поток владеет блокировкой на указанном объекте и произошел равное число `Exit` вызовов и <xref:System.Threading.Monitor.Enter%2A> для объекта, блокировка снимается. Если вызывающий поток не вызывал `Exit` столько `Enter`раз, сколько указано, блокировка не освобождается.  
  
 Если блокировка освобождается и другие потоки находятся в очереди готовности для объекта, один из потоков получает блокировку. Если другие потоки находятся в очереди ожидания, ожидающей получения блокировки, они не перемещаются автоматически в очередь готовности, когда владелец вызовов `Exit`блокировки. Чтобы переместить один или несколько ожидающих потоков в очередь готовности, <xref:System.Threading.Monitor.Pulse%2A> вызовите или <xref:System.Threading.Monitor.PulseAll%2A> перед `Exit`вызовом.  
  
   
  
## Examples  
 В следующем примере показано использование метода `Exit`.  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Threading.SynchronizationLockException">Данный поток не владеет блокировкой для указанного объекта.</exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md">Управляемая поточность</related>
      </Docs>
    </Member>
    <Member MemberName="IsEntered">
      <MemberSignature Language="C#" Value="public static bool IsEntered (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEntered(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.IsEntered(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsEntered (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsEntered(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member IsEntered : obj -&gt; bool" Usage="System.Threading.Monitor.IsEntered obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj">Объект для тестирования.</param>
        <summary>Определяет, является ли содержит ли текущий поток блокировку на заданном объекте.</summary>
        <returns>Значение <see langword="true" />, если текущий поток владеет блокировкой в <paramref name="obj" />; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод работает только для блокировок, полученных с <xref:System.Threading.Monitor> помощью методов класса или с C# `lock` помощью инструкции или оператора Visual Basic `SyncLock` , которые реализуются с <xref:System.Threading.Monitor>помощью.  
  
 Используйте этот метод с инструментами диагностики, такими как <xref:System.Diagnostics.Debug.Assert%2A> метод <xref:System.Diagnostics.Contracts.Contract> и класс, для отладки проблем <xref:System.Threading.Monitor> блокировки, в которых участвует класс.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="LockContentionCount">
      <MemberSignature Language="C#" Value="public static long LockContentionCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 LockContentionCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Monitor.LockContentionCount" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LockContentionCount As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property long LockContentionCount { long get(); };" />
      <MemberSignature Language="F#" Value="member this.LockContentionCount : int64" Usage="System.Threading.Monitor.LockContentionCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, сколько раз возникало состязание при попытке установить блокировку монитора.</summary>
        <value>Количество конфликтов при попытке снятия блокировки монитора.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pulse">
      <MemberSignature Language="C#" Value="public static void Pulse (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Pulse(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Pulse(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Pulse (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Pulse(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Pulse : obj -&gt; unit" Usage="System.Threading.Monitor.Pulse obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, которого ожидает поток.</param>
        <summary>Уведомляет поток в очереди готовности об изменении состояния объекта с блокировкой.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Только текущий владелец блокировки может передать сигнал ожидающему объекту с помощью `Pulse`.  
  
 Поток, который в настоящее время владеет блокировкой указанного объекта, вызывает этот метод, чтобы передать следующий поток в строке для блокировки. При получении пульса ожидающий поток перемещается в очередь готовности. Когда вызывающий `Pulse` поток освобождает блокировку, следующий поток в очереди готовности (который не обязательно является потоком, который был импульсным) получает блокировку.  
  
> [!IMPORTANT]
>  Класс не поддерживает состояние, указывающее на <xref:System.Threading.Monitor.Pulse%2A> вызов метода. <xref:System.Threading.Monitor> Таким образом, при вызове <xref:System.Threading.Monitor.Pulse%2A> , когда потоки не ожидают ожидания, следующий поток, вызывающий <xref:System.Threading.Monitor.Wait%2A> блоки <xref:System.Threading.Monitor.Pulse%2A> , как будто никогда не вызывался. Если два потока используют <xref:System.Threading.Monitor.Pulse%2A> и <xref:System.Threading.Monitor.Wait%2A> для взаимодействия, это может привести к взаимоблокировке. Сравните это с поведением <xref:System.Threading.AutoResetEvent> класса: Если вы сообщаете <xref:System.Threading.AutoResetEvent> о <xref:System.Threading.EventWaitHandle.Set%2A> вызове метода и <xref:System.Threading.AutoResetEvent> нет потоков, ожидающих, состояние остается в сигнальном состоянии до тех пор, пока поток <xref:System.Threading.WaitHandle.WaitOne%2A>не вызовет <xref:System.Threading.WaitHandle.WaitAll%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>или. <xref:System.Threading.AutoResetEvent> Выводит поток и возвращается в несигнальное состояние.  
  
 Обратите внимание, что синхронизированный объект содержит несколько ссылок, включая ссылку на поток, который в настоящее время владеет блокировкой, ссылку на очередь готовности, которая содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, которая содержит потоки, ожидающие уведомления об изменении состояния объекта.  
  
 Методы `Pulse`, <xref:System.Threading.Monitor.PulseAll%2A> и<xref:System.Threading.Monitor.Wait%2A> должны вызываться из синхронизированного блока кода.  
  
 Чтобы сообщить о нескольких потоках, <xref:System.Threading.Monitor.PulseAll%2A> используйте метод.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Threading.SynchronizationLockException">Вызывающий поток не владеет блокировкой для указанного объекта.</exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md">Управляемая поточность</related>
      </Docs>
    </Member>
    <Member MemberName="PulseAll">
      <MemberSignature Language="C#" Value="public static void PulseAll (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PulseAll(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.PulseAll(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PulseAll (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PulseAll(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member PulseAll : obj -&gt; unit" Usage="System.Threading.Monitor.PulseAll obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, посылающий импульс.</param>
        <summary>Уведомляет все ожидающие потоки об изменении состояния объекта.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Поток, которому в настоящее время принадлежит блокировка указанного объекта, вызывает этот метод, чтобы сообщить всем потокам, ожидающим получения блокировки объекта. После отправки сигнала ожидающие потоки перемещаются в очередь готовности. Когда поток, вызвавший вызов `PulseAll` , освобождает блокировку, следующий поток в очереди готовности получает блокировку.  
  
 Обратите внимание, что синхронизированный объект содержит несколько ссылок, включая ссылку на поток, который в настоящее время владеет блокировкой, ссылку на очередь готовности, которая содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, которая содержит потоки, ожидающие уведомления об изменении состояния объекта.  
  
 Методы <xref:System.Threading.Monitor.Pulse%2A>, `PulseAll` и<xref:System.Threading.Monitor.Wait%2A> должны вызываться из синхронизированного блока кода.  
  
 Примечания для <xref:System.Threading.Monitor.Pulse%2A> метода объясняют, что происходит, если <xref:System.Threading.Monitor.Pulse%2A> вызывается, когда потоки не ожидают ожидания.  
  
 Чтобы передать сигнал одному потоку, используйте `Pulse` метод.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Threading.SynchronizationLockException">Вызывающий поток не владеет блокировкой для указанного объекта.</exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md">Управляемая поточность</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Пытается получить эксклюзивную блокировку указанного объекта.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj -&gt; bool" Usage="System.Threading.Monitor.TryEnter obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, блокировка которого получается.</param>
        <summary>Пытается получить эксклюзивную блокировку указанного объекта.</summary>
        <returns>Значение <see langword="true" />, если текущий поток получает блокировку; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В случае успешного выполнения этот метод получает монопольную блокировку на `obj` параметр. Этот метод немедленно возвращает значение, независимо от того, доступна ли блокировка.  
  
 Этот метод аналогичен <xref:System.Threading.Monitor.Enter%2A>, но он никогда не блокирует текущий поток. Если поток не может выполнить вход без блокировки, метод возвращает `false,`значение.  
  
> [!NOTE]
>  Используйте <xref:System.Threading.Monitor> для блокировки объектов (то есть ссылочных типов), а не типов значений. Дополнительные сведения см. в <xref:System.Threading.Monitor> статье.  
  
 Чтобы убедиться, что поток не входит в критическую секцию, следует изучить возвращаемое значение метода и выполнить код в критическом разделе, только если его возвращаемое значение `true`равно. В следующем фрагменте кода показан шаблон, используемый для вызова этого метода. Обратите внимание, что <xref:System.Threading.Monitor.Exit%2A> необходимо вызвать `finally` в блоке, чтобы вызывающий поток снимет блокировку в критическом разделе, если возникает исключение.  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#1)]
 [!code-vb[System.Threading.Monitor.TryEnter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#1)]  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать метод `TryEnter`.  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="T:System.Threading.Thread" />
        <related type="Article" href="~/docs/standard/threading/index.md">Управляемая поточность</related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * bool -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, блокировка которого получается.</param>
        <param name="lockTaken">Результат попытки получить блокировку, переданную по ссылке. Входное значение должно равняться <see langword="false" />. Выходное значение <see langword="true" />, если блокировка получена; в противном случае — выходное значение <see langword="false" />. Выходное значение задается, даже если при попытке получить блокировку возникает исключение.</param>
        <summary>Пытается получить монопольную блокировку указанного объекта и единым блоком задает значение, указывающее, была ли выполнена блокировка.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В случае успешного выполнения этот метод получает монопольную блокировку на `obj` параметр. Этот метод немедленно возвращает значение, независимо от того, доступна ли блокировка.  
  
 Если блокировка не была выполнена из-за возникновения исключения, переменная, указанная для `lockTaken` параметра, находится `false` после завершения этого метода. Это позволяет программе определить во всех случаях, требуется ли снять блокировку.  
  
 Этот метод аналогичен <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>, но он никогда не блокирует текущий поток. Если поток не может выполнить вход без блокировки, `lockTaken` аргумент устанавливается в `false` значение, когда метод возвращает значение.  
  
> [!NOTE]
>  Используйте <xref:System.Threading.Monitor> для блокировки объектов (то есть ссылочных типов), а не типов значений. Дополнительные сведения см. в <xref:System.Threading.Monitor> статье.  
  
 Чтобы убедиться, что поток не входит в критическую секцию, следует проверить значение `lockTaken` и выполнить код в критическом разделе, только если его значение равно. `true` В следующем фрагменте кода показан шаблон, используемый для вызова этого метода. Обратите внимание, что <xref:System.Threading.Monitor.Exit%2A> необходимо вызвать `finally` в блоке, чтобы вызывающий поток снимет блокировку в критическом разделе, если возникает исключение.  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#2)]
 [!code-vb[System.Threading.Monitor.TryEnter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#2)]  
  
   
  
## Examples  
 В следующем коде показан базовый шаблон для использования <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> перегрузки метода. Эта перегрузка всегда задает значение переменной, которая передается `ref` в параметр (`ByRef` в Visual Basic) `lockTaken`, даже если метод создает исключение, поэтому значение переменной является надежным способом проверки того, должна ли блокировка быть освободил.  
  
 [!code-csharp[System.Threading.Monitor.Enter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#3)]
 [!code-vb[System.Threading.Monitor.Enter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Входные данные для <paramref name="lockTaken" /> — <see langword="true" />.</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * int -&gt; bool" Usage="System.Threading.Monitor.TryEnter (obj, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, блокировка которого получается.</param>
        <param name="millisecondsTimeout">Количество миллисекунд, в течение которых ожидать блокировку.</param>
        <summary>Пытается получить эксклюзивную блокировку указанного объекта на заданное количество миллисекунд.</summary>
        <returns>Значение <see langword="true" />, если текущий поток получает блокировку; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если параметр равен <xref:System.Threading.Timeout.Infinite> ,<xref:System.Threading.Monitor.Enter%2A>этот метод эквивалентен. `millisecondsTimeout` Если `millisecondsTimeout` равно 0, этот метод <xref:System.Threading.Monitor.TryEnter%2A>эквивалентен.  
  
> [!NOTE]
>  Используйте <xref:System.Threading.Monitor> для блокировки объектов (то есть ссылочных типов), а не типов значений. Дополнительные сведения см. в <xref:System.Threading.Monitor> статье.  
  
 Чтобы убедиться, что поток не входит в критическую секцию, следует изучить возвращаемое значение метода и выполнить код в критическом разделе, только если его возвращаемое значение `true`равно. В следующем фрагменте кода показан шаблон, используемый для вызова этого метода. Обратите внимание, что <xref:System.Threading.Monitor.Exit%2A> необходимо вызвать `finally` в блоке, чтобы вызывающий поток снимет блокировку в критическом разделе, если возникает исключение.  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#3)]
 [!code-vb[System.Threading.Monitor.TryEnter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout" /> является отрицательным числом и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
        <altmember cref="T:System.Threading.Thread" />
        <related type="Article" href="~/docs/standard/threading/index.md">Управляемая поточность</related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * TimeSpan -&gt; bool" Usage="System.Threading.Monitor.TryEnter (obj, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, блокировка которого получается.</param>
        <param name="timeout">Класс <see cref="T:System.TimeSpan" />, представляющий количество времени, в течение которого ожидается блокировка. Значение –1 миллисекунды обозначает бесконечное ожидание.</param>
        <summary>Пытается получить эксклюзивную блокировку указанного объекта в течение заданного количества времени.</summary>
        <returns>Значение <see langword="true" />, если текущий поток получает блокировку; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если значение `timeout` параметра, преобразованное в миллисекунды, равно-1, этот метод <xref:System.Threading.Monitor.Enter%2A>эквивалентен. Если значение `timeout` равно 0, этот метод <xref:System.Threading.Monitor.TryEnter%2A>эквивалентен.  
  
> [!NOTE]
>  Используйте <xref:System.Threading.Monitor> для блокировки объектов (то есть ссылочных типов), а не типов значений. Дополнительные сведения см. в <xref:System.Threading.Monitor> разделе о классе.  
  
 Чтобы убедиться, что поток не входит в критическую секцию, следует изучить возвращаемое значение метода и выполнить код в критическом разделе, только если его возвращаемое значение `true`равно. В следующем фрагменте кода показан шаблон, используемый для вызова этого метода. Обратите внимание, что <xref:System.Threading.Monitor.Exit%2A> необходимо вызвать `finally` в блоке, чтобы вызывающий поток снимет блокировку в критическом разделе, если возникает исключение.  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#5)]
 [!code-vb[System.Threading.Monitor.TryEnter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение <paramref name="timeout" /> в миллисекундах отрицательно и не равно <see cref="F:System.Threading.Timeout.Infinite" /> (–1 миллисекунда) или больше <see cref="F:System.Int32.MaxValue" />.</exception>
        <altmember cref="T:System.Threading.Thread" />
        <related type="Article" href="~/docs/standard/threading/index.md">Управляемая поточность</related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, int millisecondsTimeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, int32 millisecondsTimeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, millisecondsTimeout As Integer, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, int millisecondsTimeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * int * bool -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, millisecondsTimeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, блокировка которого получается.</param>
        <param name="millisecondsTimeout">Количество миллисекунд, в течение которых ожидать блокировку.</param>
        <param name="lockTaken">Результат попытки получить блокировку, переданную по ссылке. Входное значение должно равняться <see langword="false" />. Выходное значение <see langword="true" />, если блокировка получена; в противном случае — выходное значение <see langword="false" />. Выходное значение задается, даже если при попытке получить блокировку возникает исключение.</param>
        <summary>В течение заданного количества миллисекунд пытается получить монопольную блокировку указанного объекта и единым блоком задает значение, указывающее, была ли выполнена блокировка.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если параметр равен <xref:System.Threading.Timeout.Infinite> ,<xref:System.Threading.Monitor.Enter%28System.Object%29>этот метод эквивалентен. `millisecondsTimeout` Если `millisecondsTimeout` равно 0, этот метод <xref:System.Threading.Monitor.TryEnter%28System.Object%29>эквивалентен.  
  
 Если блокировка не была выполнена из-за возникновения исключения, переменная, указанная для `lockTaken` параметра, находится `false` после завершения этого метода. Это позволяет программе определить во всех случаях, требуется ли снять блокировку.  
  
> [!NOTE]
>  Используйте <xref:System.Threading.Monitor> для блокировки объектов (то есть ссылочных типов), а не типов значений. Дополнительные сведения см. в <xref:System.Threading.Monitor> разделе о классе.  
  
 Чтобы убедиться, что поток не входит в критическую секцию, следует проверить значение `lockTaken` и выполнить код в критическом разделе, только если его значение равно. `true` В следующем фрагменте кода показан шаблон, используемый для вызова этого метода. Обратите внимание, что <xref:System.Threading.Monitor.Exit%2A> необходимо вызвать `finally` в блоке, чтобы вызывающий поток снимет блокировку в критическом разделе, если возникает исключение.  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#4)]
 [!code-vb[System.Threading.Monitor.TryEnter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#4)]  
  
   
  
## Examples  
 В следующем коде показан базовый шаблон для использования <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> перегрузки метода. Эта перегрузка всегда задает значение переменной, которая передается `ref` в параметр (`ByRef` в Visual Basic) `lockTaken`, даже если метод создает исключение, поэтому значение переменной является надежным способом проверки того, должна ли блокировка быть освободил.  
  
 [!code-csharp[System.Threading.Monitor.Enter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#4)]
 [!code-vb[System.Threading.Monitor.Enter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Входные данные для <paramref name="lockTaken" /> — <see langword="true" />.</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout" /> является отрицательным числом и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, TimeSpan timeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, valuetype System.TimeSpan timeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, timeout As TimeSpan, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, TimeSpan timeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * TimeSpan * bool -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, timeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, блокировка которого получается.</param>
        <param name="timeout">Период времени, в течение которого ожидается блокировка. Значение –1 миллисекунды обозначает бесконечное ожидание.</param>
        <param name="lockTaken">Результат попытки получить блокировку, переданную по ссылке. Входное значение должно равняться <see langword="false" />. Выходное значение <see langword="true" />, если блокировка получена; в противном случае — выходное значение <see langword="false" />. Выходное значение задается, даже если при попытке получить блокировку возникает исключение.</param>
        <summary>В течение заданного периода времени пытается получить монопольную блокировку указанного объекта и единым блоком задает значение, указывающее, была ли выполнена блокировка.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если значение `timeout` параметра, преобразованное в миллисекунды, равно-1, этот метод <xref:System.Threading.Monitor.Enter%28System.Object%29>эквивалентен. Если значение `timeout` равно 0, этот метод <xref:System.Threading.Monitor.TryEnter%28System.Object%29>эквивалентен.  
  
 Если блокировка не была выполнена из-за возникновения исключения, переменная, указанная для `lockTaken` параметра, находится `false` после завершения этого метода. Это позволяет программе определить во всех случаях, требуется ли снять блокировку.  
  
> [!NOTE]
>  Используйте <xref:System.Threading.Monitor> для блокировки объектов (то есть ссылочных типов), а не типов значений. Дополнительные сведения см. в <xref:System.Threading.Monitor> разделе о классе.  
  
 Чтобы убедиться, что поток не входит в критическую секцию, следует проверить значение `lockTaken` и выполнить код в критическом разделе, только если его значение равно. `true` В следующем фрагменте кода показан шаблон, используемый для вызова этого метода. Обратите внимание, что <xref:System.Threading.Monitor.Exit%2A> необходимо вызвать `finally` в блоке, чтобы вызывающий поток снимет блокировку в критическом разделе, если возникает исключение.  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#6)]
 [!code-vb[System.Threading.Monitor.TryEnter#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Входные данные для <paramref name="lockTaken" /> — <see langword="true" />.</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение <paramref name="timeout" /> в миллисекундах отрицательно и не равно <see cref="F:System.Threading.Timeout.Infinite" /> (–1 миллисекунда) или больше <see cref="F:System.Int32.MaxValue" />.</exception>
        <altmember cref="T:System.Threading.Thread" />
        <related type="Article" href="~/docs/standard/threading/index.md">Управляемая поточность</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Wait : obj -&gt; bool" Usage="System.Threading.Monitor.Wait obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, в котором следует ожидать.</param>
        <summary>Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова.</summary>
        <returns>Значение <see langword="true" />, если вызов осуществил возврат из-за того, что вызывающий поток заново получил блокировку заданного объекта. Этот метод не осуществляет возврат, если блокировка вновь не получена.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Поток, который в настоящее время владеет блокировкой указанного объекта, вызывает этот метод, чтобы освободить объект, чтобы другой поток мог получить к нему доступ. Вызывающий объект блокируется при ожидании повторного получения блокировки. Этот метод вызывается, когда вызывающему объекту требуется подождать изменения состояния, которое будет происходить в результате операций другого потока.  
  
 Когда поток вызывает `Wait`, он освобождает блокировку объекта и переходит в очередь ожидания объекта. Следующий поток в очереди готовности объекта (если таковой имеется) получает блокировку и эксклюзивное использование объекта. Все потоки, вызывающие вызовы `Wait` , остаются в очереди ожидания до получения сигнала от <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A>, отправленного владельцем блокировки. Если `Pulse` отправляется, затрагивается только поток в заголовке очереди ожидания. Если `PulseAll` отправляется, затрагиваются все потоки, ожидающие объекта. При получении сигнала один или несколько потоков покидают очередь ожидания и наведите очередь готовности. Потоку в очереди готовности разрешено повторное получение блокировки.  
  
 Этот метод возвращает значение, если вызывающий поток повторно запрашивает блокировку объекта. Обратите внимание, что этот метод блокируется на неопределенное время, если `Pulse` владелец `PulseAll`блокировки не вызывает или.  
  
 Вызывающий объект выполняется `Wait` один раз, независимо от числа вызовов <xref:System.Threading.Monitor.Enter%2A> , вызванных для указанного объекта. По `Wait` сути, метод сохраняет количество вызовов вызывающего `Enter` объекта в объекте и вызывает `Exit` столько раз, сколько необходимо для полного освобождения заблокированного объекта. Затем вызывающий объект блокируется при ожидании повторного получения объекта. Когда вызывающий объект повторно получает блокировку, система вызывает `Enter` столько раз, сколько необходимо для восстановления сохраненного `Enter` количества для вызывающего. Вызов `Wait` освобождает блокировку только для указанного объекта; если вызывающий объект является владельцем блокировок для других объектов, эти блокировки не освобождаются.  
  
 Обратите внимание, что синхронизированный объект содержит несколько ссылок, включая ссылку на поток, который в настоящее время владеет блокировкой, ссылку на очередь готовности, которая содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, которая содержит потоки, ожидающие уведомления об изменении состояния объекта.  
  
 Методы <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A> и`Wait` должны вызываться из синхронизированного блока кода.  
  
 Примечания для <xref:System.Threading.Monitor.Pulse%2A> метода объясняют, что происходит, если <xref:System.Threading.Monitor.Pulse%2A> вызывается, когда потоки не ожидают ожидания.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Threading.SynchronizationLockException">Вызывающий поток не владеет блокировкой для указанного объекта.</exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">Поток, который вызывает <see langword="Wait" />, позже прерывается из состояния ожидания. Это происходит, когда другой поток вызывает метод <see cref="M:System.Threading.Thread.Interrupt" /> этого потока.</exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md">Управляемая поточность</related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * int -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, в котором следует ожидать.</param>
        <param name="millisecondsTimeout">Количество миллисекунд для ожидания постановки в очередь готовности.</param>
        <summary>Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова. Если указанные временные интервалы истекают, поток встает в очередь готовности.</summary>
        <returns>Значение <see langword="true" />, если блокировка была получена заново до истечения заданного времени; значение <see langword="false" />, если блокировка была получена заново по истечении заданного времени. Этот метод не осуществляет возврат, если блокировка не была получена.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод не возвращает значение `obj` до тех пор, пока он не получит монопольную блокировку на параметр.  
  
 Поток, который в настоящее время владеет блокировкой указанного объекта, вызывает этот метод, чтобы освободить объект, чтобы другой поток мог получить к нему доступ. Вызывающий объект блокируется при ожидании повторного получения блокировки. Этот метод вызывается, когда вызывающему объекту требуется подождать изменения состояния, которое будет происходить в результате операций другого потока.  
  
 Время ожидания гарантирует, что текущий поток не блокируется в течение неограниченного времени, если другой поток освобождает блокировку без предварительного <xref:System.Threading.Monitor.Pulse%2A> вызова <xref:System.Threading.Monitor.PulseAll%2A> метода или. Он также перемещает поток в очередь готовности, обходя другие потоки перед ним в очереди ожидания, чтобы он мог повторно получить блокировку. Поток может проверить возвращаемое значение <xref:System.Threading.Monitor.Wait%2A> метода, чтобы определить, был ли он получен повторно до истечения времени ожидания. Поток может оценить условия, вызвавшие его, чтобы войти в ожидание, и при необходимости снова <xref:System.Threading.Monitor.Wait%2A> вызвать метод.  
  
 Когда поток вызывает `Wait`, он освобождает блокировку объекта и переходит в очередь ожидания объекта. Следующий поток в очереди готовности объекта (если таковой имеется) получает блокировку и эксклюзивное использование объекта. Поток, который вызывается `Wait` , остается в очереди ожидания до тех пор, пока не будет <xref:System.Threading.Monitor.PulseAll%2A>вызван поток, который владеет вызовом блокировки, или он является следующей в очереди и потоком, который <xref:System.Threading.Monitor.Pulse%2A>содержит вызовы блокировки. Однако, если `millisecondsTimeout` происходит <xref:System.Threading.Monitor.Pulse%2A> до того, как другой поток вызовет метод или <xref:System.Threading.Monitor.PulseAll%2A> , исходный поток перемещается в очередь готовности для восстановления блокировки.  
  
> [!NOTE]
>  Если <xref:System.Threading.Timeout.Infinite> <xref:System.Threading.Monitor.Pulse%2A> для параметра указано значение, этот метод блокируется неопределенно долго, если владелец блокировки не вызывает или <xref:System.Threading.Monitor.PulseAll%2A>. `millisecondsTimeout` Если `millisecondsTimeout` равно 0, то поток, вызывающий `Wait` освобождение блокировки, затем сразу переходит в очередь готовности, чтобы восстановить блокировку.  
  
 Вызывающий объект выполняется `Wait` один раз, независимо от числа вызовов <xref:System.Threading.Monitor.Enter%2A> , вызванных для указанного объекта. По `Wait` сути, метод сохраняет количество вызовов вызывающего <xref:System.Threading.Monitor.Enter%2A> объекта в объекте и вызывает <xref:System.Threading.Monitor.Exit%2A> столько раз, сколько необходимо для полного освобождения заблокированного объекта. Затем вызывающий объект блокируется при ожидании повторного получения объекта. Когда вызывающий объект повторно получает блокировку, система вызывает <xref:System.Threading.Monitor.Enter%2A> столько раз, сколько необходимо для восстановления сохраненного <xref:System.Threading.Monitor.Enter%2A> количества для вызывающего. Вызов `Wait` освобождает блокировку только для указанного объекта; если вызывающий объект является владельцем блокировок для других объектов, эти блокировки не освобождаются.  
  
> [!NOTE]
>  Синхронизированный объект содержит несколько ссылок, включая ссылку на поток, который в настоящее время владеет блокировкой, ссылку на очередь готовности, которая содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, которая содержит потоки, ожидающие уведомления об изменении состояния объекта.  
  
 Методы <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A> и`Wait` должны вызываться из синхронизированного блока кода.  
  
 Примечания для <xref:System.Threading.Monitor.Pulse%2A> метода объясняют, что происходит, если <xref:System.Threading.Monitor.Pulse%2A> вызывается, когда потоки не ожидают ожидания.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Threading.SynchronizationLockException">Вызывающий поток не владеет блокировкой для указанного объекта.</exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">Поток, который вызывает <see langword="Wait" />, позже прерывается из состояния ожидания. Это происходит, когда другой поток вызывает метод <see cref="M:System.Threading.Thread.Interrupt" /> этого потока.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="millisecondsTimeout" /> отрицательно и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md">Управляемая поточность</related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * TimeSpan -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, в котором следует ожидать.</param>
        <param name="timeout">Класс <see cref="T:System.TimeSpan" />, представляющий количество времени, до истечения которого поток поступает в очередь ожидания.</param>
        <summary>Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова. Если указанные временные интервалы истекают, поток встает в очередь готовности.</summary>
        <returns>Значение <see langword="true" />, если блокировка была получена заново до истечения заданного времени; значение <see langword="false" />, если блокировка была получена заново по истечении заданного времени. Этот метод не осуществляет возврат, если блокировка не была получена.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод не возвращает значение `obj` до тех пор, пока он не получит монопольную блокировку на параметр.  
  
 Поток, который в настоящее время владеет блокировкой указанного объекта, вызывает этот метод, чтобы освободить объект, чтобы другой поток мог получить к нему доступ. Вызывающий объект блокируется при ожидании повторного получения блокировки. Этот метод вызывается, когда вызывающему объекту требуется подождать изменения состояния, которое будет происходить в результате операций другого потока.  
  
 Время ожидания гарантирует, что текущий поток не блокируется в течение неограниченного времени, если другой поток освобождает блокировку без предварительного <xref:System.Threading.Monitor.Pulse%2A> вызова <xref:System.Threading.Monitor.PulseAll%2A> метода или. Он также перемещает поток в очередь готовности, обходя другие потоки перед ним в очереди ожидания, чтобы он мог повторно получить блокировку. Поток может проверить возвращаемое значение <xref:System.Threading.Monitor.Wait%2A> метода, чтобы определить, был ли он получен повторно до истечения времени ожидания. Поток может оценить условия, вызвавшие его, чтобы войти в ожидание, и при необходимости снова <xref:System.Threading.Monitor.Wait%2A> вызвать метод.  
  
 Когда поток вызывает `Wait`, он освобождает блокировку объекта и переходит в очередь ожидания объекта. Следующий поток в очереди готовности объекта (если таковой имеется) получает блокировку и эксклюзивное использование объекта. Поток, который вызывается `Wait` , остается в очереди ожидания до тех пор, пока не будет <xref:System.Threading.Monitor.PulseAll%2A>вызван поток, который владеет вызовом блокировки, или он является следующей в очереди и потоком, который <xref:System.Threading.Monitor.Pulse%2A>содержит вызовы блокировки. Однако, если `timeout` происходит <xref:System.Threading.Monitor.Pulse%2A> до того, как другой поток вызовет метод или <xref:System.Threading.Monitor.PulseAll%2A> , исходный поток перемещается в очередь готовности для восстановления блокировки.  
  
> [!NOTE]
>  Если <xref:System.TimeSpan> <xref:System.Threading.Monitor.Pulse%2A> для параметра указано значение-1 миллисекунда, этот метод блокируется неопределенно долго, если владелец блокировки не вызывает или <xref:System.Threading.Monitor.PulseAll%2A>. `timeout` Если `timeout` значение равно 0 миллисекундам, то поток, `Wait` вызывающий освобождение блокировки, затем сразу переходит в очередь готовности, чтобы восстановить блокировку.  
  
 Вызывающий объект выполняется `Wait` один раз, независимо от числа вызовов <xref:System.Threading.Monitor.Enter%2A> , вызванных для указанного объекта. По `Wait` сути, метод сохраняет количество вызовов вызывающего <xref:System.Threading.Monitor.Enter%2A> объекта в объекте и вызывает <xref:System.Threading.Monitor.Exit%2A> столько раз, сколько необходимо для полного освобождения заблокированного объекта. Затем вызывающий объект блокируется при ожидании повторного получения объекта. Когда вызывающий объект повторно получает блокировку, система вызывает <xref:System.Threading.Monitor.Enter%2A> столько раз, сколько необходимо для восстановления сохраненного <xref:System.Threading.Monitor.Enter%2A> количества для вызывающего. Вызов `Wait` освобождает блокировку только для указанного объекта; если вызывающий объект является владельцем блокировок для других объектов, эти блокировки не освобождаются.  
  
> [!NOTE]
>  Синхронизированный объект содержит несколько ссылок, включая ссылку на поток, который в настоящее время владеет блокировкой, ссылку на очередь готовности, которая содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, которая содержит потоки, ожидающие уведомления об изменении состояния объекта.  
  
 Методы <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A> и`Wait` должны вызываться из синхронизированного блока кода.  
  
 Примечания для <xref:System.Threading.Monitor.Pulse%2A> метода объясняют, что происходит, если <xref:System.Threading.Monitor.Pulse%2A> вызывается, когда потоки не ожидают ожидания.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Threading.SynchronizationLockException">Вызывающий поток не владеет блокировкой для указанного объекта.</exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">Поток, который вызывает <see langword="Wait" />, позже прерывается из состояния ожидания. Это происходит, когда другой поток вызывает метод <see cref="M:System.Threading.Thread.Interrupt" /> этого потока.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="timeout" /> в миллисекундах отрицательно и не равно <see cref="F:System.Threading.Timeout.Infinite" /> (–1 миллисекунда) или больше <see cref="F:System.Int32.MaxValue" />.</exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md">Управляемая поточность</related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * int * bool -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, в котором следует ожидать.</param>
        <param name="millisecondsTimeout">Количество миллисекунд для ожидания постановки в очередь готовности.</param>
        <param name="exitContext">Значение <see langword="true" /> для выхода из домена синхронизации в текущем контексте перед ожиданием (в синхронизированном контексте) с его последующим повторным получением; в противном случае — значение <see langword="false" />.</param>
        <summary>Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова. Если указанные временные интервалы истекают, поток встает в очередь готовности. Этот метод также указывает на наличие завершения области синхронизации для контекста (если в синхронизированном контексте) до получения впоследствии нового состояния ожидания.</summary>
        <returns>Значение <see langword="true" />, если блокировка была получена заново до истечения заданного времени; значение <see langword="false" />, если блокировка была получена заново по истечении заданного времени. Этот метод не осуществляет возврат, если блокировка не была получена.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод не возвращает значение `obj` до тех пор, пока он не получит монопольную блокировку на параметр.  
  
 Поток, который в настоящее время владеет блокировкой указанного объекта, вызывает этот метод, чтобы освободить объект, чтобы другой поток мог получить к нему доступ. Вызывающий объект блокируется при ожидании повторного получения блокировки. Этот метод вызывается, когда вызывающему объекту требуется подождать изменения состояния, которое будет происходить в результате операций другого потока.  
  
 Время ожидания гарантирует, что текущий поток не блокируется в течение неограниченного времени, если другой поток освобождает блокировку без предварительного <xref:System.Threading.Monitor.Pulse%2A> вызова <xref:System.Threading.Monitor.PulseAll%2A> метода или. Он также перемещает поток в очередь готовности, обходя другие потоки перед ним в очереди ожидания, чтобы он мог повторно получить блокировку. Поток может проверить возвращаемое значение <xref:System.Threading.Monitor.Wait%2A> метода, чтобы определить, был ли он получен повторно до истечения времени ожидания. Поток может оценить условия, вызвавшие его, чтобы войти в ожидание, и при необходимости снова <xref:System.Threading.Monitor.Wait%2A> вызвать метод.  
  
 Когда поток вызывает `Wait`, он освобождает блокировку и переходит в очередь ожидания. На этом этапе следующий поток в очереди готовности (если таковой имеется) может контролировать блокировку. Поток, который вызывается `Wait` , остается в очереди ожидания до тех пор, пока не будет <xref:System.Threading.Monitor.PulseAll%2A>вызван поток, который владеет вызовом блокировки, или он является следующей в очереди и потоком, который <xref:System.Threading.Monitor.Pulse%2A>содержит вызовы блокировки. Однако, если `millisecondsTimeout` происходит <xref:System.Threading.Monitor.Pulse%2A> до того, как другой поток вызовет метод или <xref:System.Threading.Monitor.PulseAll%2A> , исходный поток перемещается в очередь готовности для восстановления блокировки.  
  
> [!NOTE]
>  Если <xref:System.Threading.Timeout.Infinite> <xref:System.Threading.Monitor.Pulse%2A> для параметра указано значение, этот метод блокируется неопределенно долго, если владелец блокировки не вызывает или <xref:System.Threading.Monitor.PulseAll%2A>. `millisecondsTimeout` Если `millisecondsTimeout` равно 0, то поток, вызывающий `Wait` освобождение блокировки, затем сразу переходит в очередь готовности, чтобы восстановить блокировку.  
  
 Вызывающий объект выполняется `Wait` один раз, независимо от числа вызовов <xref:System.Threading.Monitor.Enter%2A> , вызванных для указанного объекта. По `Wait` сути, метод сохраняет количество вызовов вызывающего <xref:System.Threading.Monitor.Enter%2A> объекта в объекте и вызывает <xref:System.Threading.Monitor.Exit%2A> столько раз, сколько необходимо для полного освобождения заблокированного объекта. Затем вызывающий объект блокируется при ожидании повторного получения объекта. Когда вызывающий объект повторно получает блокировку, система вызывает <xref:System.Threading.Monitor.Enter%2A> столько раз, сколько необходимо для восстановления сохраненного <xref:System.Threading.Monitor.Enter%2A> количества для вызывающего. Вызов `Wait` освобождает блокировку только для указанного объекта; если вызывающий объект является владельцем блокировок для других объектов, эти блокировки не освобождаются.  
  
> [!NOTE]
>  Синхронизированный объект содержит несколько ссылок, включая ссылку на поток, который в настоящее время владеет блокировкой, ссылку на очередь готовности, которая содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, которая содержит потоки, ожидающие уведомления об изменении состояния объекта.  
  
 Методы <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A> и`Wait` должны вызываться из синхронизированного блока кода.  
  
 Примечания для <xref:System.Threading.Monitor.Pulse%2A> метода объясняют, что происходит, если <xref:System.Threading.Monitor.Pulse%2A> вызывается, когда потоки не ожидают ожидания.  
  
## <a name="notes-on-exiting-the-context"></a>Примечания о выходе из контекста  
 Параметр не действует, <xref:System.Threading.Monitor.Wait%2A> если метод не вызывается из управляемого контекста, не используемого по умолчанию.`exitContext` Это может произойти, если поток находится внутри вызова экземпляра класса, производного от <xref:System.ContextBoundObject>. Даже если в данный момент выполняется метод для класса, который не является производным от <xref:System.ContextBoundObject>, например <xref:System.String>, вы можете находиться в нестандартном контексте, если <xref:System.ContextBoundObject> в вашем стеке в текущем домене приложения есть.  
  
 Если код выполняется в контексте, не установленном по умолчанию `true` , `exitContext` то при указании значения для потока будет завершен нестандартный управляемый контекст (то есть переход к <xref:System.Threading.Monitor.Wait%2A> контексту по умолчанию) перед выполнением метода. После завершения вызова <xref:System.Threading.Monitor.Wait%2A> метода он возвращается к исходному контексту, не заданному по умолчанию.  
  
 Это может быть полезно, если к контекстно-привязанному <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> классу применен атрибут. В этом случае все вызовы членов класса автоматически синхронизируются, а домен синхронизации — весь текст кода для класса. Если код в стеке вызовов члена вызывает <xref:System.Threading.Monitor.Wait%2A> метод и указывает `true` для `exitContext`, поток завершает домен синхронизации, позволяя потоку, который блокируется на вызов любого члена объекта, продолжать работу. <xref:System.Threading.Monitor.Wait%2A> Когда метод возвращает значение, поток, который выполнил вызов, должен дождаться повторного входа в домен синхронизации.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><see langword="Wait" /> — не вызывается из синхронизированного блока кода.</exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">Поток, который вызывает <see langword="Wait" />, позже прерывается из состояния ожидания. Это происходит, когда другой поток вызывает метод <see cref="M:System.Threading.Thread.Interrupt" /> этого потока.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="millisecondsTimeout" /> отрицательно и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md">Управляемая поточность</related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * TimeSpan * bool -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, в котором следует ожидать.</param>
        <param name="timeout">Класс <see cref="T:System.TimeSpan" />, представляющий количество времени, до истечения которого поток поступает в очередь ожидания.</param>
        <param name="exitContext">Значение <see langword="true" /> для выхода из домена синхронизации в текущем контексте перед ожиданием (в синхронизированном контексте) с его последующим повторным получением; в противном случае — значение <see langword="false" />.</param>
        <summary>Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова. Если указанные временные интервалы истекают, поток встает в очередь готовности. Дополнительно выходит из синхронизированного домена для синхронизации контекста до ожидания и получает домен впоследствии.</summary>
        <returns>Значение <see langword="true" />, если блокировка была получена заново до истечения заданного времени; значение <see langword="false" />, если блокировка была получена заново по истечении заданного времени. Этот метод не осуществляет возврат, если блокировка не была получена.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод не возвращает значение `obj` до тех пор, пока он не получит монопольную блокировку на параметр.  
  
 Поток, который в настоящее время владеет блокировкой указанного объекта, вызывает этот метод, чтобы освободить объект, чтобы другой поток мог получить к нему доступ. Вызывающий объект блокируется при ожидании повторного получения блокировки. Этот метод вызывается, когда вызывающему объекту требуется подождать изменения состояния, которое будет происходить в результате операций другого потока.  
  
 Время ожидания гарантирует, что текущий поток не блокируется в течение неограниченного времени, если другой поток освобождает блокировку без предварительного <xref:System.Threading.Monitor.Pulse%2A> вызова <xref:System.Threading.Monitor.PulseAll%2A> метода или. Он также перемещает поток в очередь готовности, обходя другие потоки перед ним в очереди ожидания, чтобы он мог повторно получить блокировку. Поток может проверить возвращаемое значение <xref:System.Threading.Monitor.Wait%2A> метода, чтобы определить, был ли он получен повторно до истечения времени ожидания. Поток может оценить условия, вызвавшие его, чтобы войти в ожидание, и при необходимости снова <xref:System.Threading.Monitor.Wait%2A> вызвать метод.  
  
 Когда поток вызывает `Wait`, он освобождает блокировку и переходит в очередь ожидания. На этом этапе следующий поток в очереди готовности (если таковой имеется) может контролировать блокировку. Поток, который вызывается `Wait` , остается в очереди ожидания до тех пор, пока не будет <xref:System.Threading.Monitor.PulseAll%2A>вызван поток, который владеет вызовом блокировки, или он является следующей в очереди и потоком, который <xref:System.Threading.Monitor.Pulse%2A>содержит вызовы блокировки. Однако если `timeout` миллисекунды пройдут до того, как другой поток вызовет <xref:System.Threading.Monitor.Pulse%2A> этот <xref:System.Threading.Monitor.PulseAll%2A> метод или, исходный поток перемещается в очередь готовности для восстановления блокировки.  
  
> [!NOTE]
>  Если <xref:System.TimeSpan> <xref:System.Threading.Monitor.Pulse%2A> для параметра указано значение-1 миллисекунда, этот метод блокируется неопределенно долго, если владелец блокировки не вызывает или <xref:System.Threading.Monitor.PulseAll%2A>. `timeout` Если `timeout` значение равно 0 миллисекундам, то поток, `Wait` вызывающий освобождение блокировки, затем сразу переходит в очередь готовности, чтобы восстановить блокировку.  
  
 Вызывающий объект выполняется `Wait` один раз, независимо от числа вызовов <xref:System.Threading.Monitor.Enter%2A> , вызванных для указанного объекта. По `Wait` сути, метод сохраняет количество вызовов вызывающего <xref:System.Threading.Monitor.Enter%2A> объекта в объекте и вызывает <xref:System.Threading.Monitor.Exit%2A> столько раз, сколько необходимо для полного освобождения заблокированного объекта. Затем вызывающий объект блокируется при ожидании повторного получения объекта. Когда вызывающий объект повторно получает блокировку, система вызывает <xref:System.Threading.Monitor.Enter%2A> столько раз, сколько необходимо для восстановления сохраненного <xref:System.Threading.Monitor.Enter%2A> количества для вызывающего. Вызов `Wait` освобождает блокировку только для указанного объекта; если вызывающий объект является владельцем блокировок для других объектов, эти блокировки не освобождаются.  
  
> [!NOTE]
>  Синхронизированный объект содержит несколько ссылок, включая ссылку на поток, который в настоящее время владеет блокировкой, ссылку на очередь готовности, которая содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, которая содержит потоки, ожидающие уведомления об изменении состояния объекта.  
  
 Методы <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A> и`Wait` должны вызываться из синхронизированного блока кода.  
  
 Примечания для <xref:System.Threading.Monitor.Pulse%2A> метода объясняют, что происходит, если <xref:System.Threading.Monitor.Pulse%2A> вызывается, когда потоки не ожидают ожидания.  
  
## <a name="notes-on-exiting-the-context"></a>Примечания о выходе из контекста  
 Параметр не действует, <xref:System.Threading.Monitor.Wait%2A> если метод не вызывается из управляемого контекста, не используемого по умолчанию.`exitContext` Это может произойти, если поток находится внутри вызова экземпляра класса, производного от <xref:System.ContextBoundObject>. Даже если в данный момент выполняется метод для класса, который не является производным от <xref:System.ContextBoundObject>, например <xref:System.String>, вы можете находиться в нестандартном контексте, если <xref:System.ContextBoundObject> в вашем стеке в текущем домене приложения есть.  
  
 Если код выполняется в контексте, не установленном по умолчанию `true` , `exitContext` то при указании значения для потока будет завершен нестандартный управляемый контекст (то есть переход к <xref:System.Threading.Monitor.Wait%2A> контексту по умолчанию) перед выполнением метода. После завершения вызова <xref:System.Threading.Monitor.Wait%2A> метода он возвращается к исходному контексту, не заданному по умолчанию.  
  
 Это может быть полезно, если к контекстно-привязанному <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> классу применен атрибут. В этом случае все вызовы членов класса автоматически синхронизируются, а домен синхронизации — весь текст кода для класса. Если код в стеке вызовов члена вызывает <xref:System.Threading.Monitor.Wait%2A> метод и указывает `true` для `exitContext`, поток завершает домен синхронизации, позволяя потоку, который блокируется на вызов любого члена объекта, продолжать работу. <xref:System.Threading.Monitor.Wait%2A> Когда метод возвращает значение, поток, который выполнил вызов, должен дождаться повторного входа в домен синхронизации.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><see langword="Wait" /> — не вызывается из синхронизированного блока кода.</exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">Для потока, который вызывает Wait, состояние ожидания позже прерывается. Это происходит, когда другой поток вызывает метод <see cref="M:System.Threading.Thread.Interrupt" /> этого потока.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="timeout" /> в миллисекундах отрицательно и не равно <see cref="F:System.Threading.Timeout.Infinite" /> (–1 миллисекунда) или больше <see cref="F:System.Int32.MaxValue" />.</exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md">Управляемая поточность</related>
      </Docs>
    </Member>
  </Members>
</Type>
