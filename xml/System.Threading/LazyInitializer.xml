<Type Name="LazyInitializer" FullName="System.Threading.LazyInitializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="19a9cea9a7caa1bb7e43249d9fcee2f86c4d25d8" /><Meta Name="ms.sourcegitcommit" Value="385ff23cc00fe9aa1c93460c62603b45c2041d0b" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="11/22/2019" /><Meta Name="ms.locfileid" Value="74387980" /></Metadata><TypeSignature Language="C#" Value="public static class LazyInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LazyInitializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Class LazyInitializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class LazyInitializer abstract sealed" />
  <TypeSignature Language="F#" Value="type LazyInitializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="e196f-101">Provides lazy initialization routines.</span><span class="sxs-lookup"><span data-stu-id="e196f-101">Provides lazy initialization routines.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e196f-102">Эти подпрограммы не требуют выделения выделенного экземпляра с отложенной инициализацией вместо того, чтобы использовать ссылки, чтобы гарантировать инициализацию целевых объектов при обращении к ним.</span><span class="sxs-lookup"><span data-stu-id="e196f-102">These routines avoid needing to allocate a dedicated, lazy-initialization instance, instead using references to ensure targets have been initialized as they are accessed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e196f-103">В следующем примере показано, как использовать EnsureInitialized для неактивной инициализации значения с помощью логического значения, чтобы определить, была ли уже выполнена инициализация, и объект для использования в качестве взаимной блокировки исключения.</span><span class="sxs-lookup"><span data-stu-id="e196f-103">The following example demonstrates how to use EnsureInitialized to lazily initialize a value using a Boolean value to track whether initialization has already happened and an object to use as the mutual exclusion lock.</span></span>  
  
```vb  
Dim _data As ExpensiveData = Nothing  
Dim _dataInitialized As Boolean = False  
Dim _dataLock As Object = Nothing  
'    ...  
Dim name = LazyInitializer.EnsureInitialized(_data, _dataInitialized, _dataLock)  
```  
  
```csharp  
ExpensiveData _data = null;  
bool _dataInitialized = false;  
object _dataLock = new object();  

//  ...  
  
ExpensiveData dataToUse = LazyInitializer.EnsureInitialized(ref _data, ref _dataInitialized, ref _dataLock);  
```  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="e196f-104">Методы <see cref="T:System.Threading.LazyInitializer" /> являются потокобезопасными и могут вызываться из нескольких потоков одновременно.</span><span class="sxs-lookup"><span data-stu-id="e196f-104">The methods of <see cref="T:System.Threading.LazyInitializer" /> are thread-safe and may be called from multiple threads concurrently.</span></span></threadsafe>
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="e196f-105">Отложенная инициализация</span><span class="sxs-lookup"><span data-stu-id="e196f-105">Lazy Initialization</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="EnsureInitialized&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e196f-106">Initializes a target type if it hasn't already been initialized.</span><span class="sxs-lookup"><span data-stu-id="e196f-106">Initializes a target type if it hasn't already been initialized.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized : 'T -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e196f-107">Тип ссылки, которая должна быть инициализирована.</span><span class="sxs-lookup"><span data-stu-id="e196f-107">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="e196f-108">A reference to initialize if it has not already been initialized.</span><span class="sxs-lookup"><span data-stu-id="e196f-108">A reference to initialize if it has not already been initialized.</span></span></param>
        <summary><span data-ttu-id="e196f-109">Initializes a target reference type with the type's parameterless constructor if it hasn't already been initialized.</span><span class="sxs-lookup"><span data-stu-id="e196f-109">Initializes a target reference type with the type's parameterless constructor if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="e196f-110">The initialized object.</span><span class="sxs-lookup"><span data-stu-id="e196f-110">The initialized object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e196f-111">Этот метод может использоваться только для ссылочных типов.</span><span class="sxs-lookup"><span data-stu-id="e196f-111">This method may only be used on reference types.</span></span> <span data-ttu-id="e196f-112">Чтобы обеспечить инициализацию типов значений, ознакомьтесь с другими перегрузками `EnsureInitialized`.</span><span class="sxs-lookup"><span data-stu-id="e196f-112">To ensure initialization of value types, see other overloads of `EnsureInitialized`.</span></span>  
  
 <span data-ttu-id="e196f-113">Этот метод может одновременно использоваться несколькими потоками для инициализации `target`.</span><span class="sxs-lookup"><span data-stu-id="e196f-113">This method may be used concurrently by multiple threads to initialize `target`.</span></span>  
  
 <span data-ttu-id="e196f-114">В случае, если несколько потоков обращаются к этому методу параллельно, можно создать несколько экземпляров `T`, но только один из них будет сохранен в `target` и возвращен.</span><span class="sxs-lookup"><span data-stu-id="e196f-114">In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target` and returned.</span></span> <span data-ttu-id="e196f-115">В таком случае этот метод не будет удалять объекты, которые не были сохранены.</span><span class="sxs-lookup"><span data-stu-id="e196f-115">In such an occurrence, this method will not dispose of the objects that were not stored.</span></span> <span data-ttu-id="e196f-116">Если такие объекты должны быть удалены, используйте перегрузку, которая принимает `valueFactory` и уничтожает объект, если он не ссылается на один и тот же сохраненный объект.</span><span class="sxs-lookup"><span data-stu-id="e196f-116">If such objects must be disposed, use an overload that takes a `valueFactory` and dispose of the object if it does not reference the same stored object.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="e196f-117">Permissions to access the constructor of type <paramref name="T" /> were missing.</span><span class="sxs-lookup"><span data-stu-id="e196f-117">Permissions to access the constructor of type <paramref name="T" /> were missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="e196f-118">Type <paramref name="T" /> does not have a parameterless constructor.</span><span class="sxs-lookup"><span data-stu-id="e196f-118">Type <paramref name="T" /> does not have a parameterless constructor.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="e196f-119">Отложенная инициализация</span><span class="sxs-lookup"><span data-stu-id="e196f-119">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, Func&lt;T&gt; valueFactory) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized : 'T * Func&lt;'T (requires 'T : null)&gt; -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e196f-120">Тип ссылки, которая должна быть инициализирована.</span><span class="sxs-lookup"><span data-stu-id="e196f-120">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="e196f-121">The reference to initialize if it hasn't already been initialized.</span><span class="sxs-lookup"><span data-stu-id="e196f-121">The reference to initialize if it hasn't already been initialized.</span></span></param>
        <param name="valueFactory"><span data-ttu-id="e196f-122">The function that is called to initialize the reference.</span><span class="sxs-lookup"><span data-stu-id="e196f-122">The function that is called to initialize the reference.</span></span></param>
        <summary><span data-ttu-id="e196f-123">Initializes a target reference type by using a specified function if it hasn't already been initialized.</span><span class="sxs-lookup"><span data-stu-id="e196f-123">Initializes a target reference type by using a specified function if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="e196f-124">The initialized object.</span><span class="sxs-lookup"><span data-stu-id="e196f-124">The initialized object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e196f-125">Этот метод может использоваться только для ссылочных типов, а `valueFactory` не может возвращать пустую ссылку (Nothing в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="e196f-125">This method may only be used on reference types, and `valueFactory` may not return a null reference (Nothing in Visual Basic).</span></span> <span data-ttu-id="e196f-126">Чтобы обеспечить инициализацию типов значений или разрешить ссылочные типы null, ознакомьтесь с другими перегрузками EnsureInitialized.</span><span class="sxs-lookup"><span data-stu-id="e196f-126">To ensure initialization of value types or to allow null reference types, see other overloads of EnsureInitialized.</span></span>  
  
 <span data-ttu-id="e196f-127">Этот метод может одновременно использоваться несколькими потоками для инициализации `target`.</span><span class="sxs-lookup"><span data-stu-id="e196f-127">This method may be used concurrently by multiple threads to initialize `target`.</span></span>  
  
 <span data-ttu-id="e196f-128">В случае, если несколько потоков обращаются к этому методу параллельно, можно создать несколько экземпляров `T`, но только один из них будет сохранен в `target`.</span><span class="sxs-lookup"><span data-stu-id="e196f-128">In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target`.</span></span> <span data-ttu-id="e196f-129">В таком случае этот метод не будет удалять объекты, которые не были сохранены.</span><span class="sxs-lookup"><span data-stu-id="e196f-129">In such an occurrence, this method will not dispose of the objects that were not stored.</span></span> <span data-ttu-id="e196f-130">Если такие объекты должны быть удалены, то вызывающему объекту следует определить, не использовался ли объект, а затем соответствующим образом удалить объект.</span><span class="sxs-lookup"><span data-stu-id="e196f-130">If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="e196f-131">Type <paramref name="T" /> does not have a parameterless constructor.</span><span class="sxs-lookup"><span data-stu-id="e196f-131">Type <paramref name="T" /> does not have a parameterless constructor.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e196f-132"><paramref name="valueFactory" /> returned null (Nothing in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="e196f-132"><paramref name="valueFactory" /> returned null (Nothing in Visual Basic).</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="e196f-133">Отложенная инициализация</span><span class="sxs-lookup"><span data-stu-id="e196f-133">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref bool initialized, ref object syncLock);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;T&gt;(!!T&amp; target, bool&amp; initialized, object&amp; syncLock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T) (ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T EnsureInitialized(T % target, bool % initialized, System::Object ^ % syncLock);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized : 'T * bool * obj -&gt; 'T" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, initialized, syncLock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e196f-134">Тип ссылки, которая должна быть инициализирована.</span><span class="sxs-lookup"><span data-stu-id="e196f-134">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="e196f-135">A reference or value of type <c>T</c> to initialize if it hasn't already been initialized.</span><span class="sxs-lookup"><span data-stu-id="e196f-135">A reference or value of type <c>T</c> to initialize if it hasn't already been initialized.</span></span></param>
        <param name="initialized"><span data-ttu-id="e196f-136">A reference to a Boolean value that determines whether the target has already been initialized.</span><span class="sxs-lookup"><span data-stu-id="e196f-136">A reference to a Boolean value that determines whether the target has already been initialized.</span></span></param>
        <param name="syncLock"><span data-ttu-id="e196f-137">A reference to an object used as the mutually exclusive lock for initializing <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="e196f-137">A reference to an object used as the mutually exclusive lock for initializing <paramref name="target" />.</span></span> <span data-ttu-id="e196f-138">If <paramref name="syncLock" /> is <see langword="null" />, a new object will be instantiated.</span><span class="sxs-lookup"><span data-stu-id="e196f-138">If <paramref name="syncLock" /> is <see langword="null" />, a new object will be instantiated.</span></span></param>
        <summary><span data-ttu-id="e196f-139">Initializes a target reference or value type with its parameterless constructor if it hasn't already been initialized.</span><span class="sxs-lookup"><span data-stu-id="e196f-139">Initializes a target reference or value type with its parameterless constructor if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="e196f-140">The initialized object.</span><span class="sxs-lookup"><span data-stu-id="e196f-140">The initialized object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e196f-141">Если `initialized` указан как true, дальнейшая инициализация не выполняется.</span><span class="sxs-lookup"><span data-stu-id="e196f-141">If `initialized` is specified as true, then no further initialization occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="e196f-142">Permissions to access the constructor of type <paramref name="T" /> were missing.</span><span class="sxs-lookup"><span data-stu-id="e196f-142">Permissions to access the constructor of type <paramref name="T" /> were missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="e196f-143">Type <paramref name="T" /> does not have a parameterless constructor.</span><span class="sxs-lookup"><span data-stu-id="e196f-143">Type <paramref name="T" /> does not have a parameterless constructor.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="e196f-144">Отложенная инициализация</span><span class="sxs-lookup"><span data-stu-id="e196f-144">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref object syncLock, Func&lt;T&gt; valueFactory) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target, object&amp; syncLock, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Object@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T, ByRef syncLock As Object, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target, System::Object ^ % syncLock, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized : 'T * obj * Func&lt;'T (requires 'T : null)&gt; -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, syncLock, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="syncLock" Type="System.Object" RefType="ref" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e196f-145">Тип ссылки, которая должна быть инициализирована.</span><span class="sxs-lookup"><span data-stu-id="e196f-145">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="e196f-146">A reference to initialize if it has not already been initialized.</span><span class="sxs-lookup"><span data-stu-id="e196f-146">A reference to initialize if it has not already been initialized.</span></span></param>
        <param name="syncLock"><span data-ttu-id="e196f-147">A reference to an object used as the mutually exclusive lock for initializing <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="e196f-147">A reference to an object used as the mutually exclusive lock for initializing <paramref name="target" />.</span></span> <span data-ttu-id="e196f-148">If <paramref name="syncLock" /> is <see langword="null" />, a new object will be instantiated.</span><span class="sxs-lookup"><span data-stu-id="e196f-148">If <paramref name="syncLock" /> is <see langword="null" />, a new object will be instantiated.</span></span></param>
        <param name="valueFactory"><span data-ttu-id="e196f-149">The method to invoke to initialize <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="e196f-149">The method to invoke to initialize <paramref name="target" />.</span></span></param>
        <summary><span data-ttu-id="e196f-150">Initializes a target reference type with a specified function if it has not already been initialized.</span><span class="sxs-lookup"><span data-stu-id="e196f-150">Initializes a target reference type with a specified function if it has not already been initialized.</span></span></summary>
        <returns><span data-ttu-id="e196f-151">The initialized object.</span><span class="sxs-lookup"><span data-stu-id="e196f-151">The initialized object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref bool initialized, ref object syncLock, Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;T&gt;(!!T&amp; target, bool&amp; initialized, object&amp; syncLock, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T) (ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T EnsureInitialized(T % target, bool % initialized, System::Object ^ % syncLock, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized : 'T * bool * obj * Func&lt;'T&gt; -&gt; 'T" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, initialized, syncLock, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e196f-152">Тип ссылки, которая должна быть инициализирована.</span><span class="sxs-lookup"><span data-stu-id="e196f-152">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="e196f-153">A reference or value of type <c>T</c> to initialize if it hasn't already been initialized.</span><span class="sxs-lookup"><span data-stu-id="e196f-153">A reference or value of type <c>T</c> to initialize if it hasn't already been initialized.</span></span></param>
        <param name="initialized"><span data-ttu-id="e196f-154">A reference to a Boolean value that determines whether the target has already been initialized.</span><span class="sxs-lookup"><span data-stu-id="e196f-154">A reference to a Boolean value that determines whether the target has already been initialized.</span></span></param>
        <param name="syncLock"><span data-ttu-id="e196f-155">A reference to an object used as the mutually exclusive lock for initializing <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="e196f-155">A reference to an object used as the mutually exclusive lock for initializing <paramref name="target" />.</span></span> <span data-ttu-id="e196f-156">If <paramref name="syncLock" /> is <see langword="null" />, a new object will be instantiated.</span><span class="sxs-lookup"><span data-stu-id="e196f-156">If <paramref name="syncLock" /> is <see langword="null" />, a new object will be instantiated.</span></span></param>
        <param name="valueFactory"><span data-ttu-id="e196f-157">The function that is called to initialize the reference or value.</span><span class="sxs-lookup"><span data-stu-id="e196f-157">The function that is called to initialize the reference or value.</span></span></param>
        <summary><span data-ttu-id="e196f-158">Initializes a target reference or value type by using a specified function if it hasn't already been initialized.</span><span class="sxs-lookup"><span data-stu-id="e196f-158">Initializes a target reference or value type by using a specified function if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="e196f-159">The initialized object.</span><span class="sxs-lookup"><span data-stu-id="e196f-159">The initialized object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e196f-160">Если `initialized` указан как true, дальнейшая инициализация не выполняется.</span><span class="sxs-lookup"><span data-stu-id="e196f-160">If `initialized` is specified as true, then no further initialization occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="e196f-161">Permissions to access the constructor of type <paramref name="T" /> were missing.</span><span class="sxs-lookup"><span data-stu-id="e196f-161">Permissions to access the constructor of type <paramref name="T" /> were missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="e196f-162">Type <paramref name="T" /> does not have a parameterless constructor.</span><span class="sxs-lookup"><span data-stu-id="e196f-162">Type <paramref name="T" /> does not have a parameterless constructor.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="e196f-163">Отложенная инициализация</span><span class="sxs-lookup"><span data-stu-id="e196f-163">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
