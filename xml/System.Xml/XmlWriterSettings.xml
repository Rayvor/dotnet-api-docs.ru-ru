<Type Name="XmlWriterSettings" FullName="System.Xml.XmlWriterSettings">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f5aa9e60ee55b7f5c4a9a753c267c11fae72ce0e" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69422077" /></Metadata><TypeSignature Language="C#" Value="public sealed class XmlWriterSettings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XmlWriterSettings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlWriterSettings" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XmlWriterSettings" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlWriterSettings sealed" />
  <TypeSignature Language="F#" Value="type XmlWriterSettings = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Задает набор функций, которые должны поддерживаться объектом <see cref="T:System.Xml.XmlWriter" />, создаваемым с помощью метода <see cref="Overload:System.Xml.XmlWriter.Create" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод является предпочтительным механизмом для получения <xref:System.Xml.XmlWriter> экземпляров. <xref:System.Xml.XmlWriter.Create%2A> Метод использует класс, чтобы указать, какие <xref:System.Xml.XmlWriter> функции должны быть реализованы в созданном объекте. <xref:System.Xml.XmlWriterSettings> <xref:System.Xml.XmlWriter.Create%2A>  
  
> [!NOTE]
>  Если вы используете <xref:System.Xml.XmlWriter> объект <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> с методом <xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings%2A> , следует использовать свойство для получения <xref:System.Xml.XmlWriterSettings> объекта с правильными параметрами. Это гарантирует правильность параметров выходных данных для объекта <xref:System.Xml.XmlWriter>.  
  
 <xref:System.Xml.XmlWriterSettings> Класс предоставляет свойства, управляющие форматом соответствия данных и выходного формата.  
  
 Для проверок соответствия данных и автоматического исправления используйте следующие свойства:  
  
|Свойство.|Что определяет|Значение|Значение по умолчанию|  
|--------------|---------------|-----------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|Следует ли проверять, что символы находятся в допустимой кодировке XML, как определено консорциумом W3C.|`true` или `false`|`true`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|Следует ли проверять, что выходные данные представляют собой XML-документ или фрагмент с правильным форматом 1,0.|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>(уровень документа), <xref:System.Xml.ConformanceLevel.Fragment> (уровень фрагмента) или <xref:System.Xml.ConformanceLevel.Auto> (автоматическое обнаружение)|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>(соответствие уровня документа)|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|Следует ли добавлять закрывающие теги во все незакрытые элементы при <xref:System.Xml.XmlWriter.Close%2A> вызове метода.|`true` или `false`|`true`|  
  
 Чтобы указать формат выходных данных, используйте следующие свойства:  
  
|Свойство.|Что определяет|Значение|Значение по умолчанию|  
|--------------|---------------|-----------|-------------|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|Используемая кодировка текста.|Значение<xref:System.Text.Encoding?displayProperty=nameWithType>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|Следует ли понизить уровень элементов|`true` или `false`|`false`(без отступов)|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Символьная строка, используемая при отступе ( <xref:System.Xml.XmlWriterSettings.Indent%2A> используется, если `true`параметр имеет значение).|String|Два пробела|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|Символьная строка, используемая для разрывов строк.|String|`\r\n`(возврат каретки, перевод строки)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|Как работать с символами новой строки.|<xref:System.Xml.NewLineHandling?displayProperty=nameWithType>значение: <xref:System.Xml.NewLineHandling.Entitize> (нормализация), <xref:System.Xml.NewLineHandling.Replace> (заменить) или <xref:System.Xml.NewLineHandling.None> (оставьте без изменений)|<xref:System.Xml.NewLineHandling.Replace>(замените символами, указанными в параметре <xref:System.Xml.XmlWriterSettings.NewLineChars%2A>)|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|Следует ли записывать атрибуты в отдельных строках (не оказывает влияния <xref:System.Xml.XmlWriterSettings.Indent%2A> , `false`если имеет значение).|`true` или `false`|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|Следует ли записывать объявление XML.|`true` или `false`|`false`|  
  
   
  
## Examples  
 В следующем примере создается объект <xref:System.Xml.XmlWriter> , который записывает данные в XML-файл и записывает каждый атрибут в новой строке.  
  
 [!code-csharp[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/CS/writenewlineattrs.cs#1)]
 [!code-vb[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/VB/writenewlineattrs.vb#1)]  
  
 Образец выдает следующие выходные данные:  
  
```xml  
<order  
  orderID="367A54"  
  date="2001-05-03">  
  <price>19.95</price>  
</order>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterSettings();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Xml.XmlWriterSettings" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В следующей таблице показаны начальные значения свойств для экземпляра <xref:System.Xml.XmlWriterSettings>.  
  
|Свойство.|Начальное значение|  
|--------------|-------------------|  
|<xref:System.Xml.XmlWriterSettings.Async%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`.|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>.|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|`Encoding.UTF8`.|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Два пробела.|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n`(возврат каретки, Новая строка).|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace>.|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`.|  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Xml.XmlWriter> объект, который использует символ табуляции для отступа.  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Async">
      <MemberSignature Language="C#" Value="public bool Async { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Async" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Async" />
      <MemberSignature Language="VB.NET" Value="Public Property Async As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Async { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Async : bool with get, set" Usage="System.Xml.XmlWriterSettings.Async" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее, можно ли использовать асинхронные методы <see cref="T:System.Xml.XmlWriter" /> для конкретного экземпляра <see cref="T:System.Xml.XmlWriter" />.</summary>
        <value>Значение <see langword="true" />, если могут использоваться асинхронные методы; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если вы хотите использовать асинхронные `true` <xref:System.Xml.XmlWriter> методы для этого экземпляра, <xref:System.Xml.XmlWriter> это значение необходимо задать в параметре при создании нового экземпляра. После создания <xref:System.Xml.XmlWriter> <xref:System.Xml.XmlWriterSettings.Async%2A> экземпляра свойство доступно только для чтения. По умолчанию этому свойству присваивается значение `false`.  
  
 Этот флаг игнорируется <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> перегрузкой. Это означает, <xref:System.Xml.XmlWriter> что при создании нового на основе существующего <xref:System.Xml.XmlWriter>, асинхронное поведение зависит от входных данных <xref:System.Xml.XmlWriter>и нельзя использовать <xref:System.Xml.XmlWriterSettings.Async%2A> флаг для изменения асинхронного поведения.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Асинхронное программирование с использованием ключевых слов Async и Await (C# и Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CheckCharacters">
      <MemberSignature Language="C#" Value="public bool CheckCharacters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.CheckCharacters" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckCharacters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckCharacters { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckCharacters : bool with get, set" Usage="System.Xml.XmlWriterSettings.CheckCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее, должно ли средство записи XML выполнять проверку на предмет того, соответствуют ли все символы в документе разделу "2.2 Characters" документа W3C [XML 1.0 Recommendation](https://www.w3.org/TR/REC-xml/#charsets).</summary>
        <value>Значение <see langword="true" /> для выполнения проверки символов; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если объект поддерживает проверку символов, он создает исключение, если какие-либо символы находятся вне диапазона допустимых символов XML, указанных в разделе "2,2 символов" рекомендации консорциума W3C по [XML 1,0.](https://www.w3.org/TR/REC-xml/#charsets) <xref:System.Xml.XmlWriter>  
  
 Проверка символов не включает проверку недопустимых символов в именах XML или проверку допустимости всех имен XML. Эти проверки являются частью проверки соответствия и выполняются всегда.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Xml.XmlWriterSettings Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlWriterSettings Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As XmlWriterSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlWriterSettings ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Xml.XmlWriterSettings" Usage="xmlWriterSettings.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriterSettings</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Создает копию экземпляра <see cref="T:System.Xml.XmlWriterSettings" />.</summary>
        <returns>Точная копия объекта <see cref="T:System.Xml.XmlWriterSettings" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Клонированный <xref:System.Xml.XmlWriterSettings> объект можно изменить, не влияя на параметры исходного объекта.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseOutput">
      <MemberSignature Language="C#" Value="public bool CloseOutput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CloseOutput" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.CloseOutput" />
      <MemberSignature Language="VB.NET" Value="Public Property CloseOutput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CloseOutput { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CloseOutput : bool with get, set" Usage="System.Xml.XmlWriterSettings.CloseOutput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее, следует ли объекту <see cref="T:System.Xml.XmlWriter" /> закрывать также и основной поток или <see cref="T:System.IO.TextWriter" /> при вызове метода <see cref="M:System.Xml.XmlWriter.Close" />.</summary>
        <value>Значение <see langword="true" />, если следует закрыть основной поток или <see cref="T:System.IO.TextWriter" />; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот параметр полезен, если вы хотите записать XML в поток, а затем добавить дополнительные сведения в конец потока после <xref:System.Xml.XmlWriter> завершения записи.  
  
 Это свойство применяется только к <xref:System.Xml.XmlWriter> экземплярам, которые выводят XML-содержимое <xref:System.IO.TextWriter>в поток или. в противном случае этот параметр игнорируется.  
  
   
  
## Examples  
 В следующем примере фрагмент XML записывается в поток памяти.  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConformanceLevel">
      <MemberSignature Language="C#" Value="public System.Xml.ConformanceLevel ConformanceLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ConformanceLevel ConformanceLevel" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.ConformanceLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ConformanceLevel As ConformanceLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ConformanceLevel ConformanceLevel { System::Xml::ConformanceLevel get(); void set(System::Xml::ConformanceLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ConformanceLevel : System.Xml.ConformanceLevel with get, set" Usage="System.Xml.XmlWriterSettings.ConformanceLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.ConformanceLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает уровень соответствия, на предмет которого средство записи XML проверяет выходные данные XML.</summary>
        <value>Одно из значений перечисления, указывающее уровень соответствия (документ, фрагмент или автоматическое обнаружение). Значение по умолчанию — <see cref="F:System.Xml.ConformanceLevel.Document" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A?displayProperty=nameWithType> Свойство настраивает модуль записи XML на проверку и гарантирует, что записываемый поток соответствует определенному набору правил. XML-данные можно проверить, чтобы убедиться, что они соответствует правилам для XML-документа 1,0 или фрагмента документа. В следующей таблице описаны три параметра. Значение по умолчанию — соответствие уровня документа.  
  
|Параметр|Описание|  
|-------------|-----------------|  
|<xref:System.Xml.ConformanceLevel.Document>|Гарантирует, что выходные данные XML должны соответствовать [правилам для xml 1,0-документа с правильным форматом](https://www.w3.org/TR/REC-xml/#sec-well-formed) и могут обрабатываться любым процессором.<br /><br /> Проверка соответствия документов включает большую часть проверок на уровне фрагментов, а также гарантирует следующее:<br /><br /> — У элемента верхнего уровня нет ни одного узла, кроме объявления XML, DTD, элемента, комментария, пробела или инструкции по обработке.<br />— XML-данные имеют один и только один узел элемента верхнего уровня.<br /><br /> Модуль записи XML не анализирует данные DTD, которые записываются. Пользователь несет ответственность за обеспечение правильного формата DTD.|  
|<xref:System.Xml.ConformanceLevel.Fragment>|Гарантирует, что выходные данные XML соответствует [правилам для фрагмента документа xml 1,0 с правильным форматом](https://www.w3.org/TR/REC-xml/#wf-entities).<br /><br /> Этот параметр принимает XML-данные с несколькими корневыми элементами или текстовыми узлами на верхнем уровне. Этот уровень проверки гарантирует, что любое средство обработки сможет обработать считываемый поток как сущность XML 1.0 с внешним синтаксическим анализом.<br /><br /> Сведения о DTD не разрешены в фрагментах документа.|  
|<xref:System.Xml.ConformanceLevel.Auto>|Указывает, что модуль записи XML должен определить уровень проверки соответствия на основе входящих данных. Этот параметр может быть полезен, если не известно, будет ли сформированный XML-документ правильного формата или фрагмента.<br /><br /> Проверка согласованности на уровне документа применяется в следующих случаях:<br /><br /> — При <xref:System.Xml.XmlWriter.WriteStartDocument%2A> вызове метода.<br />— Если сведения о DTD записываются.<br /><br /> Проверка соответствия фрагментов применяется, если XML-данные содержат один из следующих элементов:<br /><br /> — Текстовый, CDATA или узел EntityReference на корневом уровне.<br />— Более одного элемента на корневом уровне.<br />— Отсутствует элемент на корневом уровне.<br /><br /> Исключение <xref:System.Xml.XmlException> создается, если обнаруживается конфликт, например когда на корневом уровне одновременно записываются текстовый узел и DTD.<br /><br /> При создании оболочки для другого <xref:System.Xml.XmlWriter> объекта внешний объект не выполняет дополнительную проверку соответствия, он остается базовым объектом.|  
  
 Если модуль записи XML обнаруживает какие-либо сведения, которые нарушают указанный уровень соответствия, возникает исключение. В некоторых случаях модуль записи XML автоматически исправляет ошибку соответствия. Например, модуль записи закрывает незакрытый атрибут, не вызывая исключение. В следующей таблице показано, как различные нарушения соответствия обрабатываются в каждом параметре.  
  
|Условие|<xref:System.Xml.ConformanceLevel.Document>|<xref:System.Xml.ConformanceLevel.Fragment>|<xref:System.Xml.ConformanceLevel.Auto>|  
|---------------|---------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|  
|Найдены сведения о DTD.|Не является нарушением этого параметра. Однако модуль записи XML не проверяет DTD. пользователь должен убедиться, что DTD имеет правильный формат.|<xref:System.Xml.XmlException>создается исключение.|Применяется проверка соответствия документов.|  
|Вызывается метод <xref:System.Xml.XmlWriter.WriteStartDocument%2A>.|Не считается нарушением для этого параметра.|<xref:System.Xml.XmlException>создается исключение.|Применяется проверка соответствия документов.|  
|<xref:System.Xml.XmlWriter.WriteStartDocument%2A> вызывается несколько раз.|<xref:System.Xml.XmlException>создается исключение.|<xref:System.Xml.XmlException>создается исключение.|<xref:System.Xml.XmlException>создается исключение.|  
|Текстовое значение отображается на верхнем уровне (не ниже элемента или узла атрибута).|<xref:System.Xml.XmlException>создается исключение.|Не считается нарушением.|Применяется проверка соответствия фрагмента.|  
|На верхнем уровне не отображаются несколько элементов или элементов.|<xref:System.Xml.XmlException>создается исключение.|Не считается нарушением.|Применяется проверка соответствия фрагмента.|  
|Элемент верхнего уровня является пробелом.|Не считается нарушением.|Не считается нарушением.|Не считается нарушением.|  
|<xref:System.Xml.XmlWriter.WriteEndAttribute%2A>не вызывается для завершения узла атрибута.|Исправлено модулем записи XML.|Исправлено модулем записи XML.|Исправлено модулем записи XML.|  
|Модуль записи XML находится в неправильном вложенном состоянии (например, <xref:System.Xml.XmlWriter.WriteStartElement%2A> за вызовом следует a <xref:System.Xml.XmlWriter.WriteEndAttribute%2A>).|<xref:System.Xml.XmlException>создается исключение.|<xref:System.Xml.XmlException>создается исключение.|<xref:System.Xml.XmlException>создается исключение.|  
|Элемент верхнего уровня является атрибутом.|<xref:System.Xml.XmlException>создается исключение.|<xref:System.Xml.XmlException>создается исключение.|<xref:System.Xml.XmlException>создается исключение.|  
|Найдены несколько смежных текстовых узлов.|Не считается нарушением, но ответственность за сцепление текстовых узлов несет пользователь.|Не считается нарушением, но ответственность за сцепление текстовых узлов несет пользователь.|Не считается нарушением, но ответственность за сцепление текстовых узлов несет пользователь.|  
|В элементе дважды объявлен один и тот же префикс пространства имен.|Модуль записи XML создает новый префикс для второго пространства имен.|Модуль записи XML создает новый префикс для второго пространства имен.|Модуль записи XML создает новый префикс для второго пространства имен.|  
|<xref:System.Xml.XmlWriter.WriteStartElement%2A>Задает префикс и пространство имен, которые не объявлены в этой области, либо префикс связан с другим пространством имен.|Модуль записи XML записывает необходимый узел пространства имен.|Модуль записи XML записывает необходимый узел пространства имен.|Модуль записи XML записывает необходимый узел пространства имен.|  
|<xref:System.Xml.XmlWriter.WriteStartAttribute%2A>Задает префикс и пространство имен, которые не объявлены в этой области.|Модуль записи XML записывает необходимый узел пространства имен.|Модуль записи XML записывает необходимый узел пространства имен.|Модуль записи XML записывает необходимый узел пространства имен.|  
|<xref:System.Xml.XmlWriter.WriteStartAttribute%2A>Задает префикс и пространство имен, но префикс связан с другим пространством имен в области.|Модуль записи XML игнорирует указанный префикс и либо ищет правильный префикс, либо создает новый префикс.|Модуль записи XML игнорирует указанный префикс и либо ищет правильный префикс, либо создает новый префикс.|Модуль записи XML игнорирует указанный префикс и либо ищет правильный префикс, либо создает новый префикс.|  
|<xref:System.Xml.XmlWriter.WriteQualifiedName%2A>используется для записи содержимого элемента с помощью пространства имен, которое не существует в области.|<xref:System.Xml.XmlException>создается исключение.|<xref:System.Xml.XmlException>создается исключение.|<xref:System.Xml.XmlException>создается исключение.|  
|<xref:System.Xml.XmlWriter.WriteQualifiedName%2A>используется для записи содержимого атрибута с помощью пространства имен, которое не существует в области.|Модуль записи XML записывает необходимое объявление пространства имен.|Модуль записи XML записывает необходимое объявление пространства имен.|Модуль записи XML записывает необходимое объявление пространства имен.|  
|`xml:space` Атрибут не содержит допустимое значение.|<xref:System.Xml.XmlException>создается исключение.|<xref:System.Xml.XmlException>создается исключение.|<xref:System.Xml.XmlException>создается исключение.|  
|Обнаружено недопустимое имя.|<xref:System.Xml.XmlException>создается исключение.|<xref:System.Xml.XmlException>создается исключение.|<xref:System.Xml.XmlException>создается исключение.|  
|`xml` Префикс не соответствует универсальному коду ресурса (URI).|Модуль записи XML не проверяет этот тип нарушения.|Модуль записи XML не проверяет этот тип нарушения.|Модуль записи XML не проверяет этот тип нарушения.|  
|Префикс не соответствует http://www.w3.org/XML/1998/namespace универсальному коду ресурса (URI). `xml`|<xref:System.Xml.XmlException>создается исключение.|<xref:System.Xml.XmlException>создается исключение.|<xref:System.Xml.XmlException>создается исключение.|  
|`xmlns` Префикс или локальное имя не соответствует универсальному коду ресурса (URI).|Модуль записи XML не проверяет этот тип нарушения.|Модуль записи XML не проверяет этот тип нарушения.|Модуль записи XML не проверяет этот тип нарушения.|  
|Префикс или локальное имя не совпадают http://www.w3.org/2000/xmlns с URI. `xmlns`|<xref:System.Xml.XmlException>создается исключение.|<xref:System.Xml.XmlException>создается исключение.|<xref:System.Xml.XmlException>создается исключение.|  
  
   
  
## Examples  
 В следующем примере фрагмент XML записывается в поток памяти.  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoNotEscapeUriAttributes">
      <MemberSignature Language="C#" Value="public bool DoNotEscapeUriAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoNotEscapeUriAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.DoNotEscapeUriAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property DoNotEscapeUriAttributes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DoNotEscapeUriAttributes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DoNotEscapeUriAttributes : bool with get, set" Usage="System.Xml.XmlWriterSettings.DoNotEscapeUriAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее, преобразует ли <see cref="T:System.Xml.XmlWriter" /> атрибуты URI в escape-последовательности.</summary>
        <value><see langword="true" />значение ,<see langword="false" />если не выполняетэкранированиеатрибутовURI;впротивномслучае—.<see cref="T:System.Xml.XmlWriter" /> Значение по умолчанию — <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding with get, set" Usage="System.Xml.XmlWriterSettings.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает тип используемой кодировки текста.</summary>
        <value>Используемая кодировка текста. Значение по умолчанию — <see langword="Encoding.UTF8" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlWriter> Кодирует буфер символов всего за один раз, а не на символ. Исключение возникает при <xref:System.Xml.XmlWriter.Flush%2A> вызове метода при обнаружении ошибок кодирования.  
  
 Свойство применяется только <xref:System.Xml.XmlWriter> к экземплярам, созданным либо с заданным <xref:System.IO.Stream> именем, либо с помощью указанного имени файла. <xref:System.Xml.XmlWriterSettings.Encoding%2A> Если экземпляр создается с указанным <xref:System.IO.TextWriter>параметром, <xref:System.Xml.XmlWriterSettings.Encoding%2A> свойство переопределяется кодировкой базового <xref:System.IO.TextWriter>объекта. <xref:System.Xml.XmlWriter> Например, если для конкретного <xref:System.Xml.XmlWriter>свойства задано значение Unicode (UTF-16), но базовый модуль записи <xref:System.IO.StreamWriter> является (производным от <xref:System.IO.TextWriter>) и его кодировкой является UTF8, выходные данные будут закодированы в кодировке UTF-8.  
  
 Если экземпляр создается с другими выходными параметрами <xref:System.Xml.XmlWriterSettings.Encoding%2A> , свойство игнорируется. <xref:System.Xml.XmlWriter>  
  
 В следующем примере:  
  
-   Значением свойства <xref:System.Xml.XmlWriterSettings.Encoding%2A> по умолчанию является `Encoding.UTF8`.  
  
-   Имеет значение, а <xref:System.IO.StreamWriter>кодировка переопределяет <xref:System.Xml.XmlWriterSettings.Encoding%2A>параметр. <xref:System.IO.StreamWriter> `Encoding.Unicode`  
  
-   Выходные данные будут иметь `Encoding.Unicode`значение.  
  
```csharp  
using (StreamWriter output =  
    new StreamWriter(new FileStream("Xml01.xml", FileMode.Create), Encoding.Unicode))  
{  
    using (XmlWriter xmlWriter =  
        XmlWriter.Create(output, new XmlWriterSettings()))  
    {  
        xmlWriter.WriteStartDocument();  
        xmlWriter.WriteStartElement("Root");  
        xmlWriter.WriteEndElement();  
        xmlWriter.WriteEndDocument();  
    }  
}  
```  
  
> [!IMPORTANT]
>  Не допускайте <xref:System.Text.Encoding> объект из ненадежного источника.  
  
   
  
## Examples  
 В следующем примере фрагмент XML записывается в поток памяти.  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public bool Indent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Indent" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Property Indent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Indent { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Indent : bool with get, set" Usage="System.Xml.XmlWriterSettings.Indent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее, следует ли использовать отступ для элементов.</summary>
        <value>Значение <see langword="true" />, если необходимо записывать отдельные элементы в новых строках с отступом; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство применяется только к <xref:System.Xml.XmlWriter> экземплярам, которые выводят текстовое содержимое; в противном случае этот параметр игнорируется.  
  
 Элементы отображаются с отступом, если элемент не содержит смешанного содержимого. После вызова метода <xref:System.Xml.XmlWriter.WriteWhitespace%2A> <xref:System.Xml.XmlWriter> или для записи содержимого смешанного элемента останавливается отступ. <xref:System.Xml.XmlWriter.WriteString%2A> Отступ возобновляется после закрытия элемента смешанного содержимого.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Xml.XmlWriter> объект, который использует символ табуляции для отступа.  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndentChars">
      <MemberSignature Language="C#" Value="public string IndentChars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IndentChars" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.IndentChars" />
      <MemberSignature Language="VB.NET" Value="Public Property IndentChars As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IndentChars { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.IndentChars : string with get, set" Usage="System.Xml.XmlWriterSettings.IndentChars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает строку символов, которую следует использовать при отступах. Этот параметр используется, если значение свойства <see cref="P:System.Xml.XmlWriterSettings.Indent" /> равно <see langword="true" />.</summary>
        <value>Строка символов, которую следует использовать при отступах. Может принять любое строчное значение. Однако в целях обеспечения допустимого XML-кода, необходимо указывать только допустимые символы строковых пробелов, например символы пробела, табуляции, возврата каретки или перевода строки. По умолчанию - два пробела.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство применяется только к <xref:System.Xml.XmlWriter> экземплярам, которые выводят текстовое содержимое; в противном случае этот параметр игнорируется. Метод <xref:System.Xml.XmlWriter> создает исключение, если символы отступа приведут к недопустимому XML.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Xml.XmlWriter> объект, который использует символ табуляции для отступа.  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойству <see cref="P:System.Xml.XmlWriterSettings.IndentChars" /> присваивается значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="NamespaceHandling">
      <MemberSignature Language="C#" Value="public System.Xml.NamespaceHandling NamespaceHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.NamespaceHandling NamespaceHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NamespaceHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property NamespaceHandling As NamespaceHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::NamespaceHandling NamespaceHandling { System::Xml::NamespaceHandling get(); void set(System::Xml::NamespaceHandling value); };" />
      <MemberSignature Language="F#" Value="member this.NamespaceHandling : System.Xml.NamespaceHandling with get, set" Usage="System.Xml.XmlWriterSettings.NamespaceHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.NamespaceHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающие, должен ли объект <see cref="T:System.Xml.XmlWriter" /> при записи содержимого XML удалять дубликаты объявлений пространств имен. По умолчанию объект записи выводит объявления пространств имен, присутствующие в его распознавателе пространств имен.</summary>
        <value>Перечисление <see cref="T:System.Xml.NamespaceHandling" />, которое указывает, нужно ли удалять дубликаты объявлений пространств имен в объекте <see cref="T:System.Xml.XmlWriter" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewLineChars">
      <MemberSignature Language="C#" Value="public string NewLineChars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewLineChars" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineChars" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineChars As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NewLineChars { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NewLineChars : string with get, set" Usage="System.Xml.XmlWriterSettings.NewLineChars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает строку символов, которую следует использовать для разрывов строк.</summary>
        <value>Строка символов, которую следует использовать для разрывов строк. Может принять любое строчное значение. Однако в целях обеспечения допустимого XML-кода, необходимо указывать только допустимые символы строковых пробелов, например символы пробела, табуляции, возврата каретки или перевода строки. Значение по умолчанию — <c>\r\n</c> (возврат каретки, Новая строка).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство применяется только к <xref:System.Xml.XmlWriter> экземплярам, которые выводят текстовое содержимое; в противном случае этот параметр игнорируется. Метод <xref:System.Xml.XmlWriter> создает исключение, если символы разрыва строки приведут к недопустимому XML.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойству <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> присваивается значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="NewLineHandling">
      <MemberSignature Language="C#" Value="public System.Xml.NewLineHandling NewLineHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.NewLineHandling NewLineHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineHandling As NewLineHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::NewLineHandling NewLineHandling { System::Xml::NewLineHandling get(); void set(System::Xml::NewLineHandling value); };" />
      <MemberSignature Language="F#" Value="member this.NewLineHandling : System.Xml.NewLineHandling with get, set" Usage="System.Xml.XmlWriterSettings.NewLineHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.NewLineHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, показывающее, осуществляется нормализация разрывов строк в выходных данных.</summary>
        <value>Одно из значений <see cref="T:System.Xml.NewLineHandling" />. Значение по умолчанию — <see cref="F:System.Xml.NewLineHandling.Replace" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот параметр применяется при записи текстового содержимого или значений атрибутов. Каждое из <xref:System.Xml.NewLineHandling> значений описано ниже.  
  
-   Параметр указывает, <xref:System.Xml.XmlWriter> что необходимо заменить символы новой строки, которые не были бы <xref:System.Xml.XmlReader> сохранены при нормализации с сущностями символов. <xref:System.Xml.NewLineHandling.Entitize> Это полезно в сценариях циклического приема, где выходные данные считываются путем нормализации <xref:System.Xml.XmlReader>. Дополнительные правила нормализации применяются к значениям атрибутов при округлении с `\t`момента `\n` и `\r` заменяются пробелом <xref:System.Xml.XmlReader>в значениях атрибутов при нормализации в.  
  
-   Параметр указывает, что <xref:System.Xml.XmlWriter> необходимо `\r\n`заменить символы новой строки символом, который является новым форматом строки, используемым операционной системой Microsoft Windows. <xref:System.Xml.NewLineHandling.Replace> Это гарантирует, что файл может быть правильно отображен в блокноте или приложениях Microsoft Word. Этот параметр также заменяет новые строки в атрибутах сущностями символов для сохранения символов. Это значение по умолчанию.  
  
-   Параметр указывает, что <xref:System.Xml.XmlWriter> необходимо оставить входные данные без изменений. <xref:System.Xml.NewLineHandling.None> Этот параметр используется, если не требуется обработка новых строк. Это полезно, когда выходные данные считываются <xref:System.Xml.XmlReader> объектом, который не выполняет нормализацию (например <xref:System.Xml.XmlTextReader> , с настройками по умолчанию).  
  
 В следующих таблицах показаны выходные данные <xref:System.Xml.XmlWriter.WriteString%2A> метода, предоставляемые со входным значением в зависимости <xref:System.Xml.XmlWriterSettings.NewLineHandling%2A> от значения свойства. В таблицах отображаются выходные данные при записи текстового содержимого, а также при записи значения атрибута.  
  
 `Text Node Value:`  
  
||\r\n|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|Типизируйте|& #D; \n|\n|& #D;|\t|  
|Замените|\r\n|\r\n|\r\n|\t|  
|Нет|\r\n|\n|\r|\t|  
  
 `Attribute Value:`  
  
||\r\n|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|Типизируйте|& #D; & #A;|& #A;|& #D;|&\#9;|  
|Замените|& #D; & #A;|& #A;|& #D;|&\#9;|  
|Нет|\r\n|\n|\r|\t|  
  
> [!NOTE]
>  <xref:System.Xml.XmlWriter> Имеет следующее поведение при записи содержимого в раздел CDATA, комментарий или инструкция по обработке. Новые строки никогда не заменяются сущностями символов, даже если <xref:System.Xml.XmlWriterSettings.NewLineHandling%2A> свойство имеет <xref:System.Xml.NewLineHandling.Entitize>значение. Это связано с тем, что сущности символов не распознаются в разделах CDATA, комментариях или инструкциях по обработке. Если свойство имеет <xref:System.Xml.NewLineHandling.None> значение или <xref:System.Xml.NewLineHandling.Replace>, то поведение будет таким же, как при записи значения текстового узла. <xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>  
  
 В следующей таблице описано, что <xref:System.Xml.XmlReader> возвращает нормализацию для каждого входного пробела. Дополнительные сведения см. в разделах 2,11 и 3.3.3 рекомендации консорциума W3C [XML 1,0](https://www.w3.org/TR/REC-xml/).  
  
> [!NOTE]
>  Нормализация модуля чтения — это <xref:System.Xml.XmlReader> любой объект <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> , созданный методом. Эти объекты всегда выполняют нормализацию разрыва строк и полную нормализацию атрибутов. Объект также может быть нормализованным модулем чтения, если <xref:System.Xml.XmlTextReader.Normalization%2A> свойство имеет значение `true`. <xref:System.Xml.XmlTextReader>  
  
||\r\n|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|Значение текстового узла|\n|\n|\n|\t|  
|Значение атрибута|один пробел|один пробел|один пробел|один пробел|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewLineOnAttributes">
      <MemberSignature Language="C#" Value="public bool NewLineOnAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NewLineOnAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineOnAttributes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NewLineOnAttributes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NewLineOnAttributes : bool with get, set" Usage="System.Xml.XmlWriterSettings.NewLineOnAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее, следует ли записывать атрибуты в новой строке.</summary>
        <value>Значение <see langword="true" />, если необходимо записывать атрибуты в отдельные строки; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.  
  
 <block subset="none" type="note"><para>  
 Этот параметр ни на что не влияет, если значение свойства  <see cref="P:System.Xml.XmlWriterSettings.Indent" /> равно <see langword="false" />.  
  
</para></block>  
  
 Если значение объекта <see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" /> равно <see langword="true" />, каждому атрибуту предшествует новая строка и дополнительный уровень отступа.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство применяется только к <xref:System.Xml.XmlWriter> экземплярам, которые выводят текстовое содержимое; в противном случае этот параметр игнорируется.  
  
   
  
## Examples  
 В следующем примере создается объект <xref:System.Xml.XmlWriter> , который записывает данные в XML-файл и записывает каждый атрибут в новой строке.  
  
 [!code-csharp[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/CS/writenewlineattrs.cs#1)]
 [!code-vb[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/VB/writenewlineattrs.vb#1)]  
  
 Образец выдает следующие выходные данные:  
  
```xml  
<order  
  orderID="367A54"  
  date="2001-05-03">  
  <price>19.95</price>  
</order>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OmitXmlDeclaration">
      <MemberSignature Language="C#" Value="public bool OmitXmlDeclaration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OmitXmlDeclaration" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration" />
      <MemberSignature Language="VB.NET" Value="Public Property OmitXmlDeclaration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OmitXmlDeclaration { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OmitXmlDeclaration : bool with get, set" Usage="System.Xml.XmlWriterSettings.OmitXmlDeclaration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, определяющее, следует ли опустить XML-объявление.</summary>
        <value>Значение <see langword="true" />, если необходимо опустить XML-объявление; в противном случае — значение <see langword="false" />. Значением по умолчанию является <see langword="false" />; XML-объявление записывается.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство применяется только к <xref:System.Xml.XmlWriter> экземплярам, которые выводят текстовое содержимое; в противном случае этот параметр игнорируется.  
  
 Если <xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A> параметр имеет `false`значение, XML-декларация записывается автоматически.  
  
 XML-декларация всегда записывается <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A> <xref:System.Xml.ConformanceLevel.Document>, если имеет значение, `true`даже <xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A> если параметр имеет значение.  
  
 Объявление XML никогда не записывается <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A> , если имеет <xref:System.Xml.ConformanceLevel.Fragment>значение. Можно вызвать <xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A> , чтобы явно записать объявление XML.  
  
   
  
## Examples  
 В следующем примере фрагмент XML записывается в поток памяти.  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputMethod">
      <MemberSignature Language="C#" Value="public System.Xml.XmlOutputMethod OutputMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlOutputMethod OutputMethod" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.OutputMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutputMethod As XmlOutputMethod" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlOutputMethod OutputMethod { System::Xml::XmlOutputMethod get(); };" />
      <MemberSignature Language="F#" Value="member this.OutputMethod : System.Xml.XmlOutputMethod" Usage="System.Xml.XmlWriterSettings.OutputMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlOutputMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает метод, используемый для сериализации выходных данных объекта <see cref="T:System.Xml.XmlWriter" />.</summary>
        <value>Одно из значений <see cref="T:System.Xml.XmlOutputMethod" />. Значение по умолчанию — <see cref="F:System.Xml.XmlOutputMethod.Xml" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство указывает метод, используемый для сериализации выходных данных. Выходные данные можно сериализовать с помощью правил HTML, правил XML 1,0 и т. д. Этот параметр задается процессором XSLT и используется Visual Studio для внутренних целей.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="xmlWriterSettings.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Повторно загружает значения по умолчанию для элементов класса параметров.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В следующей таблице показаны значения свойств по умолчанию для экземпляра <xref:System.Xml.XmlWriterSettings>.  
  
|Свойство.|Исходное значение|  
|--------------|-------------------|  
|<xref:System.Xml.XmlWriterSettings.Async%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`.|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>.|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|`Encoding.UTF8`.|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Два пробела.|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n`.|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace>.|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEndDocumentOnClose">
      <MemberSignature Language="C#" Value="public bool WriteEndDocumentOnClose { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WriteEndDocumentOnClose" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose" />
      <MemberSignature Language="VB.NET" Value="Public Property WriteEndDocumentOnClose As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WriteEndDocumentOnClose { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.WriteEndDocumentOnClose : bool with get, set" Usage="System.Xml.XmlWriterSettings.WriteEndDocumentOnClose" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее, добавляет ли <see cref="T:System.Xml.XmlWriter" /> закрывающие теги ко всем незакрытым тегам элементов при вызове метода <see cref="M:System.Xml.XmlWriter.Close" />.</summary>
        <value>Значение <see langword="true" />, если все незакрытые теги элементов будут закрыты; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если для `false`этого флага задано значение, то выходной XML-файл может быть неправильным.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
