<Type Name="IStreamProvider" FullName="System.Xml.IStreamProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3c75d46ddc1e28c366359499e3f355b22ecb170a" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69439991" /></Metadata><TypeSignature Language="C#" Value="public interface IStreamProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStreamProvider" />
  <TypeSignature Language="DocId" Value="T:System.Xml.IStreamProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStreamProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStreamProvider" />
  <TypeSignature Language="F#" Value="type IStreamProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
    <AssemblyVersion>4.1.3.0</AssemblyVersion>
    <AssemblyVersion>4.1.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="440f3-101">Представляет интерфейс, который может реализовываться классами, предоставляющими потоки.</span><span class="sxs-lookup"><span data-stu-id="440f3-101">Represents an interface that can be implemented by classes providing streams.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="440f3-102">При записи исходящего сообщения, содержащего текст, представляющий поток, направленный в модуль записи XML, <xref:System.ServiceModel.Channels.Message> использует в реализации <xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29> последовательность вызовов, подобную следующей:</span><span class="sxs-lookup"><span data-stu-id="440f3-102">When writing an outgoing message containing a streamed body to an XML writer, the <xref:System.ServiceModel.Channels.Message> will use a sequence of calls similar to the following in its <xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29> implementation:</span></span>  
  
-   <span data-ttu-id="440f3-103">Запись необходимых данных, предшествующих потоку (например, открывающий тег XML).</span><span class="sxs-lookup"><span data-stu-id="440f3-103">Write any necessary information preceding the stream (For example, the opening XML tag).</span></span>  
  
-   <span data-ttu-id="440f3-104">запись потока;</span><span class="sxs-lookup"><span data-stu-id="440f3-104">Write the stream.</span></span>  
  
-   <span data-ttu-id="440f3-105">Запись данных, следующих за потоком (например, закрывающий тег XML).</span><span class="sxs-lookup"><span data-stu-id="440f3-105">Write any information following the stream (For example, the closing XML tag).</span></span>  
  
 <span data-ttu-id="440f3-106">Этот подход хорошо работает с кодировками, подобными текстовой кодировке XML.</span><span class="sxs-lookup"><span data-stu-id="440f3-106">This works well with encodings that are similar to the textual XML encoding.</span></span> <span data-ttu-id="440f3-107">Однако, существуют кодировки, которые не размещают наборы сведений (например, открывающие и закрывающие теги элементов XML) вместе с данными, содержащимися внутри элементов.</span><span class="sxs-lookup"><span data-stu-id="440f3-107">However, there are some encodings that do not place XML infoset information (For example, tags for starting and ending XML elements) together with the data contained within elements.</span></span> <span data-ttu-id="440f3-108">Например, при кодировании MTOM сообщение разделяется на несколько частей.</span><span class="sxs-lookup"><span data-stu-id="440f3-108">For example, in the MTOM encoding, the message is split into multiple parts.</span></span> <span data-ttu-id="440f3-109">Одна часть содержит набор сведений XML, который может содержать ссылки на другие части для действительного содержимого элемента.</span><span class="sxs-lookup"><span data-stu-id="440f3-109">One part contains the XML infoset, which may contain references to other parts for actual element contents.</span></span> <span data-ttu-id="440f3-110">Поскольку набор сведений XML, как правило, небольшой в сравнении с потоковым содержимым, имеет смысл его буферизировать, сохранять, а затем записывать содержимое в виде потока.</span><span class="sxs-lookup"><span data-stu-id="440f3-110">Since the XML infoset will normally be small compared to the streamed contents, it makes sense to buffer the infoset, write it out, and then write the contents in a streamed way.</span></span> <span data-ttu-id="440f3-111">Это означает, что к моменту записи закрывающего тега элемента поток еще не должен быть сохранен.</span><span class="sxs-lookup"><span data-stu-id="440f3-111">This means that by the time the closing element tag is written, we should not have written out the stream yet.</span></span>  
  
 <span data-ttu-id="440f3-112">Для этого используется интерфейс <xref:System.Xml.IStreamProvider> .</span><span class="sxs-lookup"><span data-stu-id="440f3-112">For this purpose, the <xref:System.Xml.IStreamProvider> interface is used.</span></span> <span data-ttu-id="440f3-113">Этот интерфейс содержит метод <xref:System.Xml.IStreamProvider.GetStream> , который возвращает поток, подлежащий записи.</span><span class="sxs-lookup"><span data-stu-id="440f3-113">The interface has a <xref:System.Xml.IStreamProvider.GetStream> method that returns the stream to be written.</span></span> <span data-ttu-id="440f3-114">Ниже описан правильный способ сохранения потокового тела сообщения в <xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29> .</span><span class="sxs-lookup"><span data-stu-id="440f3-114">The correct way to write out a streamed message body in <xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29> is as follows:</span></span>  
  
-   <span data-ttu-id="440f3-115">Запись всех необходимых данных, предшествующих потоку (например, открывающий тег XML).</span><span class="sxs-lookup"><span data-stu-id="440f3-115">Write any necessary information preceding the stream (For example, the opening XML tag)</span></span>  
  
-   <span data-ttu-id="440f3-116">Вызов перегрузки `WriteValue` для <xref:System.Xml.XmlDictionaryWriter> , принимающего <xref:System.Xml.IStreamProvider>, с реализацией `IStreamProvider` , возвращающей подлежащий записи поток.</span><span class="sxs-lookup"><span data-stu-id="440f3-116">Call the `WriteValue` overload on the <xref:System.Xml.XmlDictionaryWriter> that takes an <xref:System.Xml.IStreamProvider>, with an `IStreamProvider` implementation that returns the stream to be written.</span></span>  
  
-   <span data-ttu-id="440f3-117">Запись данных, следующих за потоком (например, закрывающий тег XML).</span><span class="sxs-lookup"><span data-stu-id="440f3-117">Write any information following the stream (For example, the closing XML tag)</span></span>  
  
 <span data-ttu-id="440f3-118">Используя этот подход, средство записи XML может выбирать, когда вызывать <xref:System.Xml.IStreamProvider.GetStream> и сохранять потоковые данные.</span><span class="sxs-lookup"><span data-stu-id="440f3-118">With this approach, the XML writer has a choice of when to call <xref:System.Xml.IStreamProvider.GetStream> and write out the streamed data.</span></span> <span data-ttu-id="440f3-119">Например, модули записи текстовых и двоичных данных XML вызывают его немедленно и сохраняют потоковое содержимое между открывающим и закрывающим тегами.</span><span class="sxs-lookup"><span data-stu-id="440f3-119">For example, the textual and binary XML writers will call it immediately and write out the streamed contents in between the start and end tags.</span></span> <span data-ttu-id="440f3-120">Средство записи MTOM может вызвать <xref:System.Xml.IStreamProvider.GetStream> позже, когда будет готово к записи соответствующей части сообщения.</span><span class="sxs-lookup"><span data-stu-id="440f3-120">The MTOM writer may decide to call <xref:System.Xml.IStreamProvider.GetStream> later, when it is ready to write the appropriate part of the message.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream GetStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream GetStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.IStreamProvider.GetStream" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStream () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ GetStream();" />
      <MemberSignature Language="F#" Value="abstract member GetStream : unit -&gt; System.IO.Stream" Usage="iStreamProvider.GetStream " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="440f3-121">Получает поток.</span><span class="sxs-lookup"><span data-stu-id="440f3-121">Gets a stream.</span></span></summary>
        <returns><span data-ttu-id="440f3-122">Объект <see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="440f3-122">A <see cref="T:System.IO.Stream" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="440f3-123">Этот метод может использоваться для возвращения потока, подлежащего записи.</span><span class="sxs-lookup"><span data-stu-id="440f3-123">This method can be used to return the stream to be written.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseStream">
      <MemberSignature Language="C#" Value="public void ReleaseStream (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseStream(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.IStreamProvider.ReleaseStream(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseStream(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="abstract member ReleaseStream : System.IO.Stream -&gt; unit" Usage="iStreamProvider.ReleaseStream stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="440f3-124">Освобожденный поток.</span><span class="sxs-lookup"><span data-stu-id="440f3-124">The stream being released.</span></span></param>
        <summary><span data-ttu-id="440f3-125">Освобождает поток для вывода.</span><span class="sxs-lookup"><span data-stu-id="440f3-125">Releases a stream to output.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
