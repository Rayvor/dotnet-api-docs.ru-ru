<Type Name="IFragmentCapableXmlDictionaryWriter" FullName="System.Xml.IFragmentCapableXmlDictionaryWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d8042f377b6338179b925ff1f908c5112cd0fd61" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75046552" /></Metadata><TypeSignature Language="C#" Value="public interface IFragmentCapableXmlDictionaryWriter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFragmentCapableXmlDictionaryWriter" />
  <TypeSignature Language="DocId" Value="T:System.Xml.IFragmentCapableXmlDictionaryWriter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFragmentCapableXmlDictionaryWriter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFragmentCapableXmlDictionaryWriter" />
  <TypeSignature Language="F#" Value="type IFragmentCapableXmlDictionaryWriter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
    <AssemblyVersion>4.1.3.0</AssemblyVersion>
    <AssemblyVersion>4.1.4.0</AssemblyVersion>
    <AssemblyVersion>4.1.5.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Содержит свойства и методы, которые, при реализации с помощью <see cref="T:System.Xml.XmlDictionaryWriter" />, позволяют обрабатывать фрагменты XML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот класс определяет свойства и методы, связанные с возможностью <xref:System.Xml.XmlDictionaryWriter> перенаправлять часть вывода (фрагмент) в другой поток, а не в тот, который был им создан, и непосредственно вставлять записанные таким образом фрагменты обратно в основной поток того же модуля записи позднее.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CanFragment">
      <MemberSignature Language="C#" Value="public bool CanFragment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanFragment" />
      <MemberSignature Language="DocId" Value="P:System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanFragment As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanFragment { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanFragment : bool" Usage="System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, может ли этот объект <see cref="T:System.Xml.XmlDictionaryWriter" /> обработать фрагменты XML.</summary>
        <value><see langword="true" />, если этот <see cref="T:System.Xml.XmlDictionaryWriter" /> может обрабатывать фрагменты XML; в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Возвращает `true`, если модуль записи, реализующий этот интерфейс, может создавать и принимать XML-фрагменты.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndFragment">
      <MemberSignature Language="C#" Value="public void EndFragment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndFragment() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndFragment ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndFragment();" />
      <MemberSignature Language="F#" Value="abstract member EndFragment : unit -&gt; unit" Usage="iFragmentCapableXmlDictionaryWriter.EndFragment " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Завершает обработку фрагмента XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Останавливает перенаправление вывода в поток, предоставленный сопоставимым вызовом `StartFragment`. После этого вызова вывод записи XML поступает в поток, первоначально использовавшийся модулем записи до вызова `StartFragment`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartFragment">
      <MemberSignature Language="C#" Value="public void StartFragment (System.IO.Stream stream, bool generateSelfContainedTextFragment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartFragment(class System.IO.Stream stream, bool generateSelfContainedTextFragment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment(System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartFragment(System::IO::Stream ^ stream, bool generateSelfContainedTextFragment);" />
      <MemberSignature Language="F#" Value="abstract member StartFragment : System.IO.Stream * bool -&gt; unit" Usage="iFragmentCapableXmlDictionaryWriter.StartFragment (stream, generateSelfContainedTextFragment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="generateSelfContainedTextFragment" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">Поток, в который требуется выполнить запись.</param>
        <param name="generateSelfContainedTextFragment">Если <see langword="true" />, любое пространство имен, объявленное за пределами фрагмента, объявляется снова, если используется внутри него; если <see langword="false" />, то пространства имен не объявляются вновь.</param>
        <summary>Начинает обработку фрагмента XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Временно начинает перенаправлять запись вывода XML в предоставленный поток до вызова `EndFragment`. Если `generateSelfContainedTextFragment` имеет значение `true`, перенаправленный вывод XML всегда в текстовом формате XML и является автономным в пределах своего контекста пространства имен. вызовы `StartFragment`() не могут быть вложенными.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteFragment">
      <MemberSignature Language="C#" Value="public void WriteFragment (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteFragment(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteFragment (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteFragment(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="abstract member WriteFragment : byte[] * int * int -&gt; unit" Usage="iFragmentCapableXmlDictionaryWriter.WriteFragment (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Буфер для записи.</param>
        <param name="offset">Начальное положение для записи в параметре <paramref name="buffer" />.</param>
        <param name="count">Число байтов для записи в объект <paramref name="buffer" />.</param>
        <summary>Записывает фрагмент XML в основной поток модуля записи.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Записывает фрагмент, захваченный между `StartFragment` и `EndFragment`, и выполняет обратный вызов в основной поток XmlDictionaryWriter. Записанный фрагмент содержит `count` байт, начиная с индекса `offset`, от предоставленного `buffer`. Поведение может быть неопределенным, если предоставленный фрагмент не был захвачен с помощью экземпляра модуля записи.  
  
   
  
## Examples  
  
```csharp  
MemoryStream stream = new MemoryStream();  
MemoryStream fragmentStream = new MemoryStream();  
XmlDictionaryWriter writer = XmlDictionaryWriter.CreateTextWriter(stream);  
IXmlFragmentCapableXmlDictionaryWriter fragmentWriter = writer as IXmlFragmentCapableXmlDictionaryWriter;  
if (fragmentWriter == null || !fragmentWriter.CanFragment)  
{  
Console.WriteLine("This writer doesn't support fragments");  
return;  
}  
writer.WriteStartElement("Root");  
fragmentWriter.StartFragment(fragmentStream, false);  
writer.WriteStartElement("Body");  
writer.WriteString("This is my body");  
writer.WriteEndElement();  
fragmentWriter.EndFragment();  
writer.WriteStartElement("CharsInTheBody");  
writer.WriteValue(fragmentStream.Length);  
writer.WriteEndElement();  
fragmentWriter.WriteFragment(fragmentStream.GetBuffer(), 0, (int)fragmentStream.Length);  
writer.WriteEndElement(); // Root  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
