<Type Name="ITree&lt;TKey,TValue&gt;" FullName="Microsoft.VisualC.StlClr.ITree&lt;TKey,TValue&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="77d065da17c2be044b008809f0f48e87d74db898" /><Meta Name="ms.sourcegitcommit" Value="a22d0855bbf24d893f43605f8b7e3a44bd9551a5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70345004" /></Metadata><TypeSignature Language="C#" Value="public interface ITree&lt;TKey,TValue&gt; : ICloneable, Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer&lt;TValue&gt;, System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit ITree`2&lt;TKey, TValue&gt; implements class Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1&lt;!TValue&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualC.StlClr.ITree`2" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITree(Of TKey, TValue)&#xA;Implements IBidirectionalContainer(Of TValue), ICloneable, ICollection" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TValue&gt;&#xA;public interface class ITree : ICloneable, Microsoft::VisualC::StlClr::Generic::IBidirectionalContainer&lt;TValue&gt;, System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type ITree&lt;'Key, 'Value&gt; = interface&#xA;    interface IBidirectionalContainer&lt;'Value&gt;&#xA;    interface ICloneable&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1005")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TKey">Тип ключа для элемента в управляемой последовательности.</typeparam>
    <typeparam name="TValue">Тип значения для элемента в управляемой последовательности.</typeparam>
    <summary>Определяет интерфейс STL/CLR объектов <c>hash_map</c>, <c>hash_multimap</c>, <c>hash_set</c> и <c>hash_multiset</c>.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[unnamed_parm](~/includes/unnamed-parm-md.md)]  
  
 Дополнительные сведения см. в [разделе\_хэш-таблица (STL/CLR)](/cpp/dotnet/hash-map-stl-clr), [\_hash multimap (STL/CLR)](/cpp/dotnet/hash-multimap-stl-clr), [набор хэширования\_(STL/CLR)](/cpp/dotnet/hash-set-stl-clr)и [hash\_мультинабор (STL/CLR)](/cpp/dotnet/hash-multiset-stl-clr).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="begin">
      <MemberSignature Language="C#" Value="public void begin (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void begin(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.ITree`2.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function begin (ByRef  As ContainerBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ begin(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member begin : ContainerBidirectionalIterator -&gt; unit" Usage="iTree.begin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">Двунаправленный итератор, который задает первый элемент управляемой последовательности или элемент, расположенный непосредственно после конца пустой последовательности. Используется для получения итератора, который задает начало управляемой последовательности с параметром <paramref name="current" />, однако в случае изменения длины управляемой последовательности его состояние может измениться.</param>
        <summary>Задает начало управляемой последовательности.</summary>
        <returns>Итератор.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 Дополнительные сведения см. в [разделе\_хэш-схема:: Начало (STL/CLR)](/cpp/dotnet/hash-map-begin-stl-clr), [хэш-\_multimap:: Begin (STL/CLR)](/cpp/dotnet/hash-multimap-begin-stl-clr), [хэш-\_набор:: Begin (STL/CLR)](/cpp/dotnet/hash-set-begin-stl-clr)и [hash\_мультинабор:: Begin (STL/CLR)](/cpp/dotnet/hash-multiset-begin-stl-clr) .  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="clear">
      <MemberSignature Language="C#" Value="public void clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.ITree`2.clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void clear();" />
      <MemberSignature Language="F#" Value="abstract member clear : unit -&gt; unit" Usage="iTree.clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Удаляет все элементы из контейнера.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения см. в [разделе\_хэш-схема:: Clear (STL/CLR)](/cpp/dotnet/hash-map-clear-stl-clr), [хэш-\_multimap:: Clear (STL/CLR)](/cpp/dotnet/hash-multimap-clear-stl-clr), [хэш-\_набор:: Clear (STL/CLR)](/cpp/dotnet/hash-set-clear-stl-clr)и [hash\_мультинабор:: Clear (STL/CLR)](/cpp/dotnet/hash-multiset-clear-stl-clr) .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="count">
      <MemberSignature Language="C#" Value="public int count (TKey _Keyval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 count(!TKey _Keyval) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.ITree`2.count(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function count (_Keyval As TKey) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int count(TKey _Keyval);" />
      <MemberSignature Language="F#" Value="abstract member count : 'Key -&gt; int" Usage="iTree.count _Keyval" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Keyval" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="_Keyval">Значение ключа, по которому выполняется поиск.</param>
        <summary>Определяет количество элементов, которые соответствуют заданному ключу.</summary>
        <returns>Количество элементов управляемой последовательности с ключом <paramref name="_Keyval" />. Используется для определения количества элементов в управляемой последовательности, ключ которых в данный момент совпадает с заданным ключом.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения см. в [разделе\_хэш-схема:: count (STL/CLR)](/cpp/dotnet/hash-map-count-stl-clr), [хэш-\_multimap:: count (STL/CLR)](/cpp/dotnet/hash-multimap-count-stl-clr), [хэш-\_набор:: count (STL/CLR)](/cpp/dotnet/hash-set-count-stl-clr)и [hash\_мультинабор:: count (STL/CLR)](/cpp/dotnet/hash-multiset-count-stl-clr) .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="empty">
      <MemberSignature Language="C#" Value="public bool empty ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool empty() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.ITree`2.empty" />
      <MemberSignature Language="VB.NET" Value="Public Function empty () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool empty();" />
      <MemberSignature Language="F#" Value="abstract member empty : unit -&gt; bool" Usage="iTree.empty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Проверяет, действительно ли в контейнере нет элементов.</summary>
        <returns>Если элементы в контейнере отсутствуют, значение <see langword="true" />, если они есть, значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения см. в [разделе\_хэш-схема:: Empty (STL/CLR)](/cpp/dotnet/hash-map-empty-stl-clr), [хэш-\_multimap:: Empty (STL/CLR)](/cpp/dotnet/hash-multimap-empty-stl-clr), [хэш-\_набор:: Empty (STL/CLR)](/cpp/dotnet/hash-set-empty-stl-clr)и [hash\_мультинабор:: Empty (STL/CLR)](/cpp/dotnet/hash-multiset-empty-stl-clr) .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="end">
      <MemberSignature Language="C#" Value="public void end (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void end(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function end (ByRef  As ContainerBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ end(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member end : ContainerBidirectionalIterator -&gt; unit" Usage="iTree.end " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">Двунаправленный итератор, который указывает конец управляемой последовательности. Используется для получения итератора, который задает конец управляемой последовательности. При изменении длины управляемой последовательности его состояние не меняется.</param>
        <summary>Задает конец управляемой последовательности.</summary>
        <returns>Итератор.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 Дополнительные сведения см. в [разделе\_хэш-схема:: end (STL/CLR)](/cpp/dotnet/hash-map-end-stl-clr), [хэш-\_multimap:: end (STL/CLR)](/cpp/dotnet/hash-multimap-end-stl-clr), [хэш-\_набор:: end (STL/CLR)](/cpp/dotnet/hash-set-end-stl-clr)и [hash\_мультинабор:: end (STL/CLR)](/cpp/dotnet/hash-multiset-end-stl-clr).  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="equal_range">
      <MemberSignature Language="C#" Value="public void equal_range (ref Microsoft.VisualC.StlClr.GenericPair&lt;Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;&gt; , TKey _Keyval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void equal_range(class Microsoft.VisualC.StlClr.GenericPair`2&lt;class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;, class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&gt;&amp; , !TKey _Keyval) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.ITree`2.equal_range(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}}@,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function equal_range (ByRef  As GenericPair(Of ContainerBidirectionalIterator(Of TValue), ContainerBidirectionalIterator(Of TValue)), _Keyval As TKey) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ equal_range(Microsoft::VisualC::StlClr::GenericPair&lt;Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^, Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^&gt; ^ % , TKey _Keyval);" />
      <MemberSignature Language="F#" Value="abstract member equal_range : GenericPair * 'Key -&gt; unit" Usage="iTree.equal_range (, _Keyval)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.GenericPair&lt;Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;&gt;" RefType="ref" />
        <Parameter Name="_Keyval" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="">Пара итераторов, которые определяют диапазон элементов в управляемой последовательности, ключ которых в данный момент совпадает с заданным ключом.</param>
        <param name="_Keyval">Значение ключа, по которому выполняется поиск.</param>
        <summary>Определяет диапазон, соответствующий указанному ключу.</summary>
        <returns>Пара итераторов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 Дополнительные сведения см. в [статье\_хэш-схема:: equal_range (STL/CLR)](/cpp/dotnet/hash-map-stl-clr#equal_range), [hash\_multimap:: equal_range (STL/CLR)](/cpp/dotnet/hash-multimap-stl-clr#equal_range), [hashing\_:: equal_range (STL/CLR)](/cpp/dotnet/hash-set-stl-clr#equal_range)и [hash\_мультинабора:: equal_range (STL/CLR)](/cpp/dotnet/hash-multiset-stl-clr#equal_range).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="erase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Удаляет элементы из контейнера.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения см. в [разделе\_хэш-схема:: Erase (STL/CLR)](/cpp/dotnet/hash-map-stl-clr#erase), [хэш-\_multimap:: Erase (STL/CLR)](/cpp/dotnet/hash-multimap-stl-clr#erase), [хэш-\_набор:: Erase (STL/CLR)](/cpp/dotnet/hash-set-stl-clr#erase)и [hash\_мультинабор:: Erase (STL/CLR)](/cpp/dotnet/hash-multiset-stl-clr#erase) .  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="erase">
      <MemberSignature Language="C#" Value="public int erase (TKey _Keyval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 erase(!TKey _Keyval) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.ITree`2.erase(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function erase (_Keyval As TKey) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int erase(TKey _Keyval);" />
      <MemberSignature Language="F#" Value="abstract member erase : 'Key -&gt; int" Usage="iTree.erase _Keyval" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Keyval" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="_Keyval">Значение ключа для удаления.</param>
        <summary>Удаляет из контейнера элементы, которые соответствуют заданному ключу.</summary>
        <returns>Количество удаленных элементов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения см. в [разделе\_хэш-схема:: Erase (STL/CLR)](/cpp/dotnet/hash-map-stl-clr#erase), [хэш-\_multimap:: Erase (STL/CLR)](/cpp/dotnet/hash-multimap-stl-clr#erase), [хэш-\_набор:: Erase (STL/CLR)](/cpp/dotnet/hash-set-stl-clr#erase)и [hash\_мультинабор:: Erase (STL/CLR)](/cpp/dotnet/hash-multiset-stl-clr#erase) .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="erase">
      <MemberSignature Language="C#" Value="public void erase (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; , Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void erase(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; , class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.ITree`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)" />
      <MemberSignature Language="VB.NET" Value="Public Function erase (ByRef  As ContainerBidirectionalIterator(Of TValue), _Where As ContainerBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ erase(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % , Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where);" />
      <MemberSignature Language="F#" Value="abstract member erase : ContainerBidirectionalIterator * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; -&gt; unit" Usage="iTree.erase (, _Where)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="">Итератор, который задает первый элемент после удаленного элемента или элемент <see cref="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />, если таковой не существует.</param>
        <param name="_Where">Итератор, который указывает на элемент, подлежащий удалению.</param>
        <summary>Удаляет из контейнера элемент, указанный данным итератором.</summary>
        <returns>Итератор.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Дополнительные сведения см. в [разделе\_хэш-схема:: Erase (STL/CLR)](/cpp/dotnet/hash-map-stl-clr#erase), [хэш-\_multimap:: Erase (STL/CLR)](/cpp/dotnet/hash-multimap-stl-clr#erase), [хэш-\_набор:: Erase (STL/CLR)](/cpp/dotnet/hash-set-stl-clr#erase)и [hash\_мультинабор:: Erase (STL/CLR)](/cpp/dotnet/hash-multiset-stl-clr#erase) .

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="erase">
      <MemberSignature Language="C#" Value="public void erase (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; , Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _First_iter, Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Last_iter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void erase(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; , class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _First_iter, class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Last_iter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.ITree`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)" />
      <MemberSignature Language="VB.NET" Value="Public Function erase (ByRef  As ContainerBidirectionalIterator(Of TValue), _First_iter As ContainerBidirectionalIterator(Of TValue), _Last_iter As ContainerBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ erase(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % , Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _First_iter, Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Last_iter);" />
      <MemberSignature Language="F#" Value="abstract member erase : ContainerBidirectionalIterator * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; -&gt; unit" Usage="iTree.erase (, _First_iter, _Last_iter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_First_iter" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Last_iter" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="">Итератор, который задает первый элемент после удаления элементов, или элемент <see cref="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />, если таковой не существует.</param>
        <param name="_First_iter">Итератор, который указывает на начало диапазона удаления.</param>
        <param name="_Last_iter">Итератор, который задает положение непосредственно после диапазона удаления.</param>
        <summary>Удаляет из контейнера элементы, находящиеся между заданными итераторами.</summary>
        <returns>Итератор.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Дополнительные сведения см. в [разделе\_хэш-схема:: Erase (STL/CLR)](/cpp/dotnet/hash-map-stl-clr#erase), [хэш-\_multimap:: Erase (STL/CLR)](/cpp/dotnet/hash-multimap-stl-clr#erase), [хэш-\_набор:: Erase (STL/CLR)](/cpp/dotnet/hash-set-stl-clr#erase)и [hash\_мультинабор:: Erase (STL/CLR)](/cpp/dotnet/hash-multiset-stl-clr#erase) .

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="find">
      <MemberSignature Language="C#" Value="public void find (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; , TKey _Keyval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void find(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; , !TKey _Keyval) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.ITree`2.find(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function find (ByRef  As ContainerBidirectionalIterator(Of TValue), _Keyval As TKey) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ find(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % , TKey _Keyval);" />
      <MemberSignature Language="F#" Value="abstract member find : ContainerBidirectionalIterator * 'Key -&gt; unit" Usage="iTree.find (, _Keyval)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_Keyval" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="">Итератор, который задает один из найденных элементов или элемент <see cref="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />, если таковой не найден.</param>
        <param name="_Keyval">Значение ключа, по которому выполняется поиск.</param>
        <summary>Определяет элемент, соответствующий указанному ключу.</summary>
        <returns>Итератор.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 Дополнительные сведения см. в [разделе\_хэш-схема:: Find (STL/CLR)](/cpp/dotnet/hash-map-stl-clr#find), [хэш-\_multimap:: Find (STL/CLR)](/cpp/dotnet/hash-multimap-stl-clr#find), [хэш-\_набор:: Find (STL/CLR)](/cpp/dotnet/hash-set-stl-clr#find)и [hash\_мультинабор:: Find (STL/CLR)](/cpp/dotnet/hash-multiset-stl-clr#find).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="insert">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Добавляет в контейнер элементы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения см. в [разделе\_хэш-схема:: Insert (STL/CLR)](/cpp/dotnet/hash-map-stl-clr#insert), [хэш-\_multimap:: Insert (STL/CLR)](/cpp/dotnet/hash-multimap-stl-clr#insert), [хэш-\_набор:: Insert (STL/CLR)](/cpp/dotnet/hash-set-stl-clr#insert)и [hash\_мультинабор:: Insert (STL/CLR) ](/cpp/dotnet/hash-multiset-stl-clr#insert).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (System.Collections.Generic.IEnumerable&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void insert(class System.Collections.Generic.IEnumerable`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.ITree`2.insert(System.Collections.Generic.IEnumerable{`1})" />
      <MemberSignature Language="VB.NET" Value="Public Sub insert (_Right As IEnumerable(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void insert(System::Collections::Generic::IEnumerable&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member insert : seq&lt;'Value&gt; -&gt; unit" Usage="iTree.insert _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="System.Collections.Generic.IEnumerable&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">Перечисление, которое необходимо вставить в контейнер.</param>
        <summary>Добавляет в контейнер заданное перечисление.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения см. в [разделе\_хэш-схема:: Insert (STL/CLR)](/cpp/dotnet/hash-map-stl-clr#insert), [хэш-\_multimap:: Insert (STL/CLR)](/cpp/dotnet/hash-multimap-stl-clr#insert), [хэш-\_набор:: Insert (STL/CLR)](/cpp/dotnet/hash-set-stl-clr#insert)и [hash\_мультинабор:: Insert (STL/CLR) ](/cpp/dotnet/hash-multiset-stl-clr#insert).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _First, Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _Last);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void insert(class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _First, class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _Last) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.Generic.IInputIterator{`1},Microsoft.VisualC.StlClr.Generic.IInputIterator{`1})" />
      <MemberSignature Language="VB.NET" Value="Public Sub insert (_First As IInputIterator(Of TValue), _Last As IInputIterator(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void insert(Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _First, Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _Last);" />
      <MemberSignature Language="F#" Value="abstract member insert : Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; unit" Usage="iTree.insert (_First, _Last)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_First" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
        <Parameter Name="_Last" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_First">Итератор, который указывает на начало диапазона элементов для вставки.</param>
        <param name="_Last">Итератор, который указывает на элемент, расположенный непосредственно после элементов для вставки.</param>
        <summary>Добавляет в контейнер элементы, указанные данными итераторами.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения см. в [разделе\_хэш-схема:: Insert (STL/CLR)](/cpp/dotnet/hash-map-stl-clr#insert), [хэш-\_multimap:: Insert (STL/CLR)](/cpp/dotnet/hash-multimap-stl-clr#insert), [хэш-\_набор:: Insert (STL/CLR)](/cpp/dotnet/hash-set-stl-clr#insert)и [hash\_мультинабор:: Insert (STL/CLR) ](/cpp/dotnet/hash-multiset-stl-clr#insert).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (ref Microsoft.VisualC.StlClr.GenericPair&lt;Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;,bool&gt; , TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void insert(class Microsoft.VisualC.StlClr.GenericPair`2&lt;class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;, bool&gt;&amp; , !TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},System.Boolean}@,`1)" />
      <MemberSignature Language="VB.NET" Value="Public Function insert (ByRef  As GenericPair(Of ContainerBidirectionalIterator(Of TValue), Boolean), _Val As TValue) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ insert(Microsoft::VisualC::StlClr::GenericPair&lt;Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^, bool&gt; ^ % , TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member insert : GenericPair * 'Value -&gt; unit" Usage="iTree.insert (, _Val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.GenericPair&lt;Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;,System.Boolean&gt;" RefType="ref" />
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="">Пара значений X. Если значение X.второе равно true, значение X.первое соответствует новому вставленному элементу; в противном случае значение X.первое соответствует уже существующему элементу с эквивалентным упорядочением и новый элемент не добавляется.</param>
        <param name="_Val">Значение ключа, которое необходимо вставить в контейнер.</param>
        <summary>Добавляет в контейнер заданное значение.</summary>
        <returns>Пара итераторов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 Дополнительные сведения см. в [разделе\_хэш-схема:: Insert (STL/CLR)](/cpp/dotnet/hash-map-stl-clr#insert), [хэш-\_multimap:: Insert (STL/CLR)](/cpp/dotnet/hash-multimap-stl-clr#insert), [хэш-\_набор:: Insert (STL/CLR)](/cpp/dotnet/hash-set-stl-clr#insert)и [hash\_мультинабор:: Insert (STL/CLR) ](/cpp/dotnet/hash-multiset-stl-clr#insert).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; , Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where, TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void insert(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; , class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where, !TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,`1)" />
      <MemberSignature Language="VB.NET" Value="Public Function insert (ByRef  As ContainerBidirectionalIterator(Of TValue), _Where As ContainerBidirectionalIterator(Of TValue), _Val As TValue) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ insert(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % , Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where, TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member insert : ContainerBidirectionalIterator * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * 'Value -&gt; unit" Usage="iTree.insert (, _Where, _Val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="">Итератор, указывающий на новый вставленный элемент.</param>
        <param name="_Where">Итератор, который указывает положение в контейнере, в которое необходимо вставить элемент. Он нужен только как подсказка и используется для повышения производительности. Вставка элемента в это положение может не выполняться.</param>
        <param name="_Val">Значение ключа, которое необходимо вставить в контейнер.</param>
        <summary>Добавляет в контейнер заданный элемент.</summary>
        <returns>Итератор.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Дополнительные сведения см. в [разделе\_хэш-схема:: Insert (STL/CLR)](/cpp/dotnet/hash-map-stl-clr#insert), [хэш-\_multimap:: Insert (STL/CLR)](/cpp/dotnet/hash-multimap-stl-clr#insert), [хэш-\_набор:: Insert (STL/CLR)](/cpp/dotnet/hash-set-stl-clr#insert)и [hash\_мультинабор:: Insert (STL/CLR) ](/cpp/dotnet/hash-multiset-stl-clr#insert).

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="key_comp">
      <MemberSignature Language="C#" Value="public Microsoft.VisualC.StlClr.BinaryDelegate&lt;TKey,TKey,bool&gt; key_comp ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.VisualC.StlClr.BinaryDelegate`3&lt;!TKey, !TKey, bool&gt; key_comp() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.ITree`2.key_comp" />
      <MemberSignature Language="VB.NET" Value="Public Function key_comp () As BinaryDelegate(Of TKey, TKey, Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualC::StlClr::BinaryDelegate&lt;TKey, TKey, bool&gt; ^ key_comp();" />
      <MemberSignature Language="F#" Value="abstract member key_comp : unit -&gt; Microsoft.VisualC.StlClr.BinaryDelegate&lt;'Key, 'Key, bool&gt;" Usage="iTree.key_comp " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualC.StlClr.BinaryDelegate&lt;TKey,TKey,System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает делегата упорядочения, который используется для упорядочения управляемой последовательности. Используется для сравнения двух ключей.</summary>
        <returns>Делегат упорядочения, который используется для упорядочения управляемой последовательности.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения см. в [статье\_хэш-схема:: key_comp (STL/CLR)](/cpp/dotnet/hash-map-stl-clr#key_comp), [\_hash multimap:: key_comp (STL/CLR)](/cpp/dotnet/hash-multimap-stl-clr#key_comp), [hashing\_:: key_comp (STL/CLR)](/cpp/dotnet/hash-set-stl-clr#key_comp)и [hash\_мультинабора:: key_comp ( STL/CLR)](/cpp/dotnet/hash-multiset-stl-clr#key_comp).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="lower_bound">
      <MemberSignature Language="C#" Value="public void lower_bound (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; , TKey _Keyval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void lower_bound(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; , !TKey _Keyval) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.ITree`2.lower_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function lower_bound (ByRef  As ContainerBidirectionalIterator(Of TValue), _Keyval As TKey) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ lower_bound(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % , TKey _Keyval);" />
      <MemberSignature Language="F#" Value="abstract member lower_bound : ContainerBidirectionalIterator * 'Key -&gt; unit" Usage="iTree.lower_bound (, _Keyval)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_Keyval" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="">Итератор, задающий первый элемент управляемой последовательности, который относится к тому же сегменту хэш-таблицы, что и ключ <paramref name="_Keyval" />, и упорядочен так же, как и элемент с ключом <paramref name="_Keyval" />. Если такого элемента нет, возвращает метод <see cref="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />.</param>
        <param name="_Keyval">Значение ключа, по которому выполняется поиск.</param>
        <summary>Определяет начало диапазона элементов, которые соответствуют заданному ключу.</summary>
        <returns>Итератор.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 Дополнительные сведения см. в [статье\_хэш-схема:: lower_bound (STL/CLR)](/cpp/dotnet/hash-map-stl-clr#lower_bound), [hash\_multimap:: lower_bound (STL/CLR)](/cpp/dotnet/hash-multimap-stl-clr#lower_bound), [hashing\_:: lower_bound (STL/CLR)](/cpp/dotnet/hash-set-stl-clr#lower_bound)и [hash\_мультинабора:: lower_bound (STL/CLR)](/cpp/dotnet/hash-multiset-stl-clr#lower_bound).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="rbegin">
      <MemberSignature Language="C#" Value="public void rbegin (ref Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void rbegin(class Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.ITree`2.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function rbegin (ByRef  As ReverseBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ rbegin(Microsoft::VisualC::StlClr::Generic::ReverseBidirectionalIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member rbegin : ReverseBidirectionalIterator -&gt; unit" Usage="iTree.rbegin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">Обратный итератор, который задает последний элемент управляемой последовательности или элемент, расположенный непосредственно перед началом пустой последовательности. Таким образом, он задает для обратной последовательности параметр <paramref name="beginning" />. Используется для получения итератора, который задает начало отображаемой в обратном порядке управляемой последовательности с параметром <paramref name="current" />. При изменении длины управляемой последовательности его состояние может измениться.</param>
        <summary>Задает начало обратной управляемой последовательности.</summary>
        <returns>Итератор.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 Дополнительные сведения см. в [статье\_хэш-схема:: rbegin (STL/CLR)](/cpp/dotnet/hash-map-stl-clr#rbegin), [hash\_multimap:: rbegin (STL/CLR)](/cpp/dotnet/hash-multimap-stl-clr#rbegin), [hashing\_:: rbegin (STL/CLR)](/cpp/dotnet/hash-set-stl-clr#rbegin)и [hash\_мультинабора:: rbegin (STL/CLR) ](/cpp/dotnet/hash-multiset-stl-clr#rbegin).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="rend">
      <MemberSignature Language="C#" Value="public void rend (ref Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void rend(class Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.ITree`2.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function rend (ByRef  As ReverseBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ rend(Microsoft::VisualC::StlClr::Generic::ReverseBidirectionalIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member rend : ReverseBidirectionalIterator -&gt; unit" Usage="iTree.rend " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">Обратный итератор, который задает положение непосредственно перед началом управляемой последовательности. Таким образом, он задает для обратной последовательности параметр <paramref name="end" />. Используется для получения итератора, который задает конец отображаемой в обратном порядке управляемой последовательности с параметром <paramref name="current" />. При изменении длины управляемой последовательности его состояние может измениться.</param>
        <summary>Задает конец обратной управляемой последовательности.</summary>
        <returns>Итератор.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 Дополнительные сведения см. в [разделе\_хэш-схема:: rend (STL/CLR)](/cpp/dotnet/hash-map-stl-clr#rend), [hash\_multimap:: rend (STL/CLR)](/cpp/dotnet/hash-multimap-stl-clr#rend), [hashing\_:: rend (STL/CLR)](/cpp/dotnet/hash-set-stl-clr#rend)и [hash\_мультинабора:: rend (STL/CLR)](/cpp/dotnet/hash-multiset-stl-clr#rend).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="size">
      <MemberSignature Language="C#" Value="public int size ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 size() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.ITree`2.size" />
      <MemberSignature Language="VB.NET" Value="Public Function size () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int size();" />
      <MemberSignature Language="F#" Value="abstract member size : unit -&gt; int" Usage="iTree.size " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Подсчитывает количество элементов в контейнере.</summary>
        <returns>Длина управляемой последовательности.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения см. в [разделе\_хэш-схема:: размер (STL/CLR)](/cpp/dotnet/hash-map-stl-clr#size), [хэш-\_multimap:: размер (STL/CLR)](/cpp/dotnet/hash-multimap-stl-clr#size), [хэш-\_набор:: размер (STL/CLR)](/cpp/dotnet/hash-set-stl-clr#size)и [hash\_мультинабор:: size (STL/CLR)](/cpp/dotnet/hash-multiset-stl-clr#size).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="swap">
      <MemberSignature Language="C#" Value="public void swap (Microsoft.VisualC.StlClr.ITree&lt;TKey,TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void swap(class Microsoft.VisualC.StlClr.ITree`2&lt;!TKey, !TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.ITree`2.swap(Microsoft.VisualC.StlClr.ITree{`0,`1})" />
      <MemberSignature Language="VB.NET" Value="Public Sub swap (_Right As ITree(Of TKey, TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void swap(Microsoft::VisualC::StlClr::ITree&lt;TKey, TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member swap : Microsoft.VisualC.StlClr.ITree&lt;'Key, 'Value&gt; -&gt; unit" Usage="iTree.swap _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.ITree&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">Контейнер, с которым производится обмен содержимым.</param>
        <summary>Меняет местами содержимое двух контейнеров.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения см. в [разделе\_хэш-схема:: Swap (STL/CLR)](/cpp/dotnet/hash-map-stl-clr#swap), [хэш-\_multimap:: Swap (STL/CLR)](/cpp/dotnet/hash-multimap-stl-clr#swap), [хэш-\_набор:: Swap (STL/CLR)](/cpp/dotnet/hash-set-stl-clr#swap)и [hash\_мультинабор:: Swap (STL/CLR)](/cpp/dotnet/hash-multiset-stl-clr#swap).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="upper_bound">
      <MemberSignature Language="C#" Value="public void upper_bound (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; , TKey _Keyval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void upper_bound(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; , !TKey _Keyval) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.ITree`2.upper_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function upper_bound (ByRef  As ContainerBidirectionalIterator(Of TValue), _Keyval As TKey) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ upper_bound(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % , TKey _Keyval);" />
      <MemberSignature Language="F#" Value="abstract member upper_bound : ContainerBidirectionalIterator * 'Key -&gt; unit" Usage="iTree.upper_bound (, _Keyval)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_Keyval" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="">Итератор, задающий первый элемент, расположенный за последним элементом управляемой последовательности, который относится к тому же сегменту хэш-таблицы, что и ключ <paramref name="_Keyval" />, и упорядочен так же, как и элемент с ключом <paramref name="_Keyval" />. Если такого элемента нет, возвращает метод <see cref="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />.</param>
        <param name="_Keyval">Искомое значение ключа.</param>
        <summary>Определяет конец диапазона элементов, которые соответствуют заданному ключу.</summary>
        <returns>Итератор.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 Дополнительные сведения см. в [статье\_хэш-схема:: upper_bound (STL/CLR)](/cpp/dotnet/hash-map-stl-clr#upper_bound), [hash\_multimap:: upper_bound (STL/CLR)](/cpp/dotnet/hash-multimap-stl-clr#upper_bound), [hashing\_:: upper_bound (STL/CLR)](/cpp/dotnet/hash-set-stl-clr#upper_bound)и [hash\_мультинабора:: upper_bound (STL/CLR)](/cpp/dotnet/hash-multiset-stl-clr#upper_bound).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="value_comp">
      <MemberSignature Language="C#" Value="public Microsoft.VisualC.StlClr.BinaryDelegate&lt;TValue,TValue,bool&gt; value_comp ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.VisualC.StlClr.BinaryDelegate`3&lt;!TValue, !TValue, bool&gt; value_comp() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.ITree`2.value_comp" />
      <MemberSignature Language="VB.NET" Value="Public Function value_comp () As BinaryDelegate(Of TValue, TValue, Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualC::StlClr::BinaryDelegate&lt;TValue, TValue, bool&gt; ^ value_comp();" />
      <MemberSignature Language="F#" Value="abstract member value_comp : unit -&gt; Microsoft.VisualC.StlClr.BinaryDelegate&lt;'Value, 'Value, bool&gt;" Usage="iTree.value_comp " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualC.StlClr.BinaryDelegate&lt;TValue,TValue,System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает делегата упорядочения, который используется для упорядочения управляемой последовательности.</summary>
        <returns>Делегат упорядочения, который используется для упорядочения управляемой последовательности.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения см. в [статье\_хэш-схема:: value_comp (STL/CLR)](/cpp/dotnet/hash-map-stl-clr#value_comp), [hash\_multimap:: value_comp (STL/CLR)](/cpp/dotnet/hash-multimap-stl-clr#value_comp), [hashing\_:: value_comp (STL/CLR)](/cpp/dotnet/hash-set-stl-clr#value_comp)и [hash\_мультинабора:: value_comp (STL/CLR)](/cpp/dotnet/hash-multiset-stl-clr#value_comp).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
