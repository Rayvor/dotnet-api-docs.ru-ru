<Type Name="IMemberCreationService" FullName="System.Workflow.ComponentModel.Design.IMemberCreationService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c9366f8abaf73bb141a981f205bfdfeedb15edbf" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69429766" /></Metadata><TypeSignature Language="C#" Value="public interface IMemberCreationService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMemberCreationService" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.ComponentModel.Design.IMemberCreationService" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMemberCreationService" />
  <TypeSignature Language="C++ CLI" Value="public interface class IMemberCreationService" />
  <TypeSignature Language="F#" Value="type IMemberCreationService = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Определяет методы динамического создания, обновления и удаления элементов кода для типа во время разработки. Также предоставляются методы, позволяющие во время разработки отображать код.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateEvent">
      <MemberSignature Language="C#" Value="public void CreateEvent (string className, string eventName, Type eventType, System.Workflow.ComponentModel.Compiler.AttributeInfo[] attributes, bool emitDependencyProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateEvent(string className, string eventName, class System.Type eventType, class System.Workflow.ComponentModel.Compiler.AttributeInfo[] attributes, bool emitDependencyProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.IMemberCreationService.CreateEvent(System.String,System.String,System.Type,System.Workflow.ComponentModel.Compiler.AttributeInfo[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateEvent (className As String, eventName As String, eventType As Type, attributes As AttributeInfo(), emitDependencyProperty As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateEvent(System::String ^ className, System::String ^ eventName, Type ^ eventType, cli::array &lt;System::Workflow::ComponentModel::Compiler::AttributeInfo ^&gt; ^ attributes, bool emitDependencyProperty);" />
      <MemberSignature Language="F#" Value="abstract member CreateEvent : string * string * Type * System.Workflow.ComponentModel.Compiler.AttributeInfo[] * bool -&gt; unit" Usage="iMemberCreationService.CreateEvent (className, eventName, eventType, attributes, emitDependencyProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="className" Type="System.String" />
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventType" Type="System.Type" />
        <Parameter Name="attributes" Type="System.Workflow.ComponentModel.Compiler.AttributeInfo[]" />
        <Parameter Name="emitDependencyProperty" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="className">Строка, содержащая имя класса, к которому добавляется событие.</param>
        <param name="eventName">Строка, которая указывает имя события.</param>
        <param name="eventType">Класс <see cref="T:System.Type" />, присвоенный событию.</param>
        <param name="attributes">Массив класса <see cref="T:System.Workflow.ComponentModel.Compiler.AttributeInfo" />, содержащий сведения о всех атрибутах, присваиваемых событию.</param>
        <param name="emitDependencyProperty">Значение <see langword="true" />, чтобы порождать все свойства зависимости, связанные с событием, в противном случае — <see langword="false" />.</param>
        <summary>Создает событие для указанного класса, используя заданные имя события, тип события и атрибуты.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateField">
      <MemberSignature Language="C#" Value="public void CreateField (string className, string fieldName, Type fieldType, Type[] genericParameterTypes, System.CodeDom.MemberAttributes attributes, System.CodeDom.CodeSnippetExpression initializationExpression, bool overwriteExisting);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateField(string className, string fieldName, class System.Type fieldType, class System.Type[] genericParameterTypes, valuetype System.CodeDom.MemberAttributes attributes, class System.CodeDom.CodeSnippetExpression initializationExpression, bool overwriteExisting) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.IMemberCreationService.CreateField(System.String,System.String,System.Type,System.Type[],System.CodeDom.MemberAttributes,System.CodeDom.CodeSnippetExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateField (className As String, fieldName As String, fieldType As Type, genericParameterTypes As Type(), attributes As MemberAttributes, initializationExpression As CodeSnippetExpression, overwriteExisting As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateField(System::String ^ className, System::String ^ fieldName, Type ^ fieldType, cli::array &lt;Type ^&gt; ^ genericParameterTypes, System::CodeDom::MemberAttributes attributes, System::CodeDom::CodeSnippetExpression ^ initializationExpression, bool overwriteExisting);" />
      <MemberSignature Language="F#" Value="abstract member CreateField : string * string * Type * Type[] * System.CodeDom.MemberAttributes * System.CodeDom.CodeSnippetExpression * bool -&gt; unit" Usage="iMemberCreationService.CreateField (className, fieldName, fieldType, genericParameterTypes, attributes, initializationExpression, overwriteExisting)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="className" Type="System.String" />
        <Parameter Name="fieldName" Type="System.String" />
        <Parameter Name="fieldType" Type="System.Type" />
        <Parameter Name="genericParameterTypes" Type="System.Type[]" />
        <Parameter Name="attributes" Type="System.CodeDom.MemberAttributes" />
        <Parameter Name="initializationExpression" Type="System.CodeDom.CodeSnippetExpression" />
        <Parameter Name="overwriteExisting" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="className">Строка, определяющая имя класса, к которому добавляется поле.</param>
        <param name="fieldName">Строка, которая указывает имя поля.</param>
        <param name="fieldType">Класс <see cref="T:System.Type" /> нового поля.</param>
        <param name="genericParameterTypes">Массив (класс <see cref="T:System.Type" />) параметров, связанных с этим полем.</param>
        <param name="attributes">Перечисление <see cref="T:System.CodeDom.MemberAttributes" />, определяющее идентификатор атрибута участника для поля.</param>
        <param name="initializationExpression">Класс <see cref="T:System.CodeDom.CodeSnippetExpression" />, содержащей исходное выражение поля.</param>
        <param name="overwriteExisting">Значение <see langword="true" />, чтобы удалить все существующие поля в классе <paramref name="className" /> при создании нового поля, в противном случае — <see langword="false" />.</param>
        <summary>Создает поле в указанном классе, используя заданные имя поля, тип поля, типы параметров, атрибуты и исходное выражение инициализации.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateProperty">
      <MemberSignature Language="C#" Value="public void CreateProperty (string className, string propertyName, Type propertyType, System.Workflow.ComponentModel.Compiler.AttributeInfo[] attributes, bool emitDependencyProperty, bool isMetaProperty, bool isAttached, Type ownerType, bool isReadOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateProperty(string className, string propertyName, class System.Type propertyType, class System.Workflow.ComponentModel.Compiler.AttributeInfo[] attributes, bool emitDependencyProperty, bool isMetaProperty, bool isAttached, class System.Type ownerType, bool isReadOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.IMemberCreationService.CreateProperty(System.String,System.String,System.Type,System.Workflow.ComponentModel.Compiler.AttributeInfo[],System.Boolean,System.Boolean,System.Boolean,System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateProperty (className As String, propertyName As String, propertyType As Type, attributes As AttributeInfo(), emitDependencyProperty As Boolean, isMetaProperty As Boolean, isAttached As Boolean, ownerType As Type, isReadOnly As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateProperty(System::String ^ className, System::String ^ propertyName, Type ^ propertyType, cli::array &lt;System::Workflow::ComponentModel::Compiler::AttributeInfo ^&gt; ^ attributes, bool emitDependencyProperty, bool isMetaProperty, bool isAttached, Type ^ ownerType, bool isReadOnly);" />
      <MemberSignature Language="F#" Value="abstract member CreateProperty : string * string * Type * System.Workflow.ComponentModel.Compiler.AttributeInfo[] * bool * bool * bool * Type * bool -&gt; unit" Usage="iMemberCreationService.CreateProperty (className, propertyName, propertyType, attributes, emitDependencyProperty, isMetaProperty, isAttached, ownerType, isReadOnly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="className" Type="System.String" />
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="attributes" Type="System.Workflow.ComponentModel.Compiler.AttributeInfo[]" />
        <Parameter Name="emitDependencyProperty" Type="System.Boolean" />
        <Parameter Name="isMetaProperty" Type="System.Boolean" />
        <Parameter Name="isAttached" Type="System.Boolean" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="isReadOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="className">Строка, определяющая имя класса, к которому добавляется поле.</param>
        <param name="propertyName">Строка, которая указывает имя поля.</param>
        <param name="propertyType">Класс <see cref="T:System.Type" /> нового свойства.</param>
        <param name="attributes">Массив класса <see cref="T:System.Workflow.ComponentModel.Compiler.AttributeInfo" />, содержащий сведения о всех атрибутах, присваиваемых свойству.</param>
        <param name="emitDependencyProperty">Значение <see langword="true" />, чтобы создавать все свойства зависимости, связанные со свойством, в противном случае — <see langword="false" />.</param>
        <param name="isMetaProperty">Значение <see langword="true" />, чтобы создать свойство как метасвойство, в противном случае — <see langword="false" />.</param>
        <param name="isAttached">Значение <see langword="true" /> указывает на то, что созданное свойство зависимости имеет собственный набор свойств <see cref="P:System.Workflow.ComponentModel.DependencyProperty.IsAttached" /> со значением <see langword="true" />, в противном случае — <see langword="false" />.</param>
        <param name="ownerType">Класс <see cref="T:System.Type" />, объявляющий свойство зависимости.</param>
        <param name="isReadOnly">Значение <see langword="true" /> — свойство создается как свойство с доступом только для чтения, значение <see langword="false" /> — свойство создается как свойство с доступом для чтения и записи.</param>
        <summary>Создает свойство для указанного класса, используя заданные имя свойства, тип свойства и атрибуты.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEvent">
      <MemberSignature Language="C#" Value="public void RemoveEvent (string className, string eventName, Type eventType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveEvent(string className, string eventName, class System.Type eventType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.IMemberCreationService.RemoveEvent(System.String,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveEvent (className As String, eventName As String, eventType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveEvent(System::String ^ className, System::String ^ eventName, Type ^ eventType);" />
      <MemberSignature Language="F#" Value="abstract member RemoveEvent : string * string * Type -&gt; unit" Usage="iMemberCreationService.RemoveEvent (className, eventName, eventType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="className" Type="System.String" />
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="className">Строка, содержащая имя класса, из которого следует удалить событие.</param>
        <param name="eventName">Строка, содержащая имя удаляемого события.</param>
        <param name="eventType">Класс <see cref="T:System.Type" />, связанный с удаляемым событием.</param>
        <summary>Удаляет указанное событие из указанного класса.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveProperty">
      <MemberSignature Language="C#" Value="public void RemoveProperty (string className, string propertyName, Type propertyType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveProperty(string className, string propertyName, class System.Type propertyType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.IMemberCreationService.RemoveProperty(System.String,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveProperty (className As String, propertyName As String, propertyType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveProperty(System::String ^ className, System::String ^ propertyName, Type ^ propertyType);" />
      <MemberSignature Language="F#" Value="abstract member RemoveProperty : string * string * Type -&gt; unit" Usage="iMemberCreationService.RemoveProperty (className, propertyName, propertyType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="className" Type="System.String" />
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="className">Строка, содержащая имя класса, из которого следует удалить свойство.</param>
        <param name="propertyName">Строка, содержащая имя удаляемого свойства.</param>
        <param name="propertyType">Класс <see cref="T:System.Type" /> свойства, подлежащего удалению.</param>
        <summary>Удаляет указанное свойство из указанного класса.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ShowCode">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Отображает код для нового участника на поверхности конструктора рабочих процессов.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ShowCode">
      <MemberSignature Language="C#" Value="public void ShowCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.IMemberCreationService.ShowCode" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShowCode ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShowCode();" />
      <MemberSignature Language="F#" Value="abstract member ShowCode : unit -&gt; unit" Usage="iMemberCreationService.ShowCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Отображает код для нового участника на поверхности конструктора рабочих процессов.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowCode">
      <MemberSignature Language="C#" Value="public void ShowCode (System.Workflow.ComponentModel.Activity activity, string methodName, Type delegateType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowCode(class System.Workflow.ComponentModel.Activity activity, string methodName, class System.Type delegateType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.IMemberCreationService.ShowCode(System.Workflow.ComponentModel.Activity,System.String,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShowCode(System::Workflow::ComponentModel::Activity ^ activity, System::String ^ methodName, Type ^ delegateType);" />
      <MemberSignature Language="F#" Value="abstract member ShowCode : System.Workflow.ComponentModel.Activity * string * Type -&gt; unit" Usage="iMemberCreationService.ShowCode (activity, methodName, delegateType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="delegateType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="activity">Класс <see cref="T:System.Workflow.ComponentModel.Activity" />, связанный с отображаемым кодом.</param>
        <param name="methodName">Имя отображаемого метода.</param>
        <param name="delegateType">Класс <see cref="T:System.Type" /> делегата, связанный с отображаемым методом.</param>
        <summary>Отображает код для нового участника на поверхности конструктора рабочих процессов, используя указанный класс <see cref="T:System.Workflow.ComponentModel.Activity" />, метод и тип делегата.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateBaseType">
      <MemberSignature Language="C#" Value="public void UpdateBaseType (string className, Type baseType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateBaseType(string className, class System.Type baseType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.IMemberCreationService.UpdateBaseType(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateBaseType (className As String, baseType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateBaseType(System::String ^ className, Type ^ baseType);" />
      <MemberSignature Language="F#" Value="abstract member UpdateBaseType : string * Type -&gt; unit" Usage="iMemberCreationService.UpdateBaseType (className, baseType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="className" Type="System.String" />
        <Parameter Name="baseType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="className">Строка, содержащая имя класса, обновляемого с использованием нового базового типа.</param>
        <param name="baseType">Тип класса <see cref="T:System.Type" />, который будет новым базовым типом для данного класса.</param>
        <summary>Обновляет базовый тип для связи с указанным классом.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateEvent">
      <MemberSignature Language="C#" Value="public void UpdateEvent (string className, string oldEventName, Type oldEventType, string newEventName, Type newEventType, System.Workflow.ComponentModel.Compiler.AttributeInfo[] attributes, bool emitDependencyProperty, bool isMetaProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateEvent(string className, string oldEventName, class System.Type oldEventType, string newEventName, class System.Type newEventType, class System.Workflow.ComponentModel.Compiler.AttributeInfo[] attributes, bool emitDependencyProperty, bool isMetaProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.IMemberCreationService.UpdateEvent(System.String,System.String,System.Type,System.String,System.Type,System.Workflow.ComponentModel.Compiler.AttributeInfo[],System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateEvent (className As String, oldEventName As String, oldEventType As Type, newEventName As String, newEventType As Type, attributes As AttributeInfo(), emitDependencyProperty As Boolean, isMetaProperty As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateEvent(System::String ^ className, System::String ^ oldEventName, Type ^ oldEventType, System::String ^ newEventName, Type ^ newEventType, cli::array &lt;System::Workflow::ComponentModel::Compiler::AttributeInfo ^&gt; ^ attributes, bool emitDependencyProperty, bool isMetaProperty);" />
      <MemberSignature Language="F#" Value="abstract member UpdateEvent : string * string * Type * string * Type * System.Workflow.ComponentModel.Compiler.AttributeInfo[] * bool * bool -&gt; unit" Usage="iMemberCreationService.UpdateEvent (className, oldEventName, oldEventType, newEventName, newEventType, attributes, emitDependencyProperty, isMetaProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="className" Type="System.String" />
        <Parameter Name="oldEventName" Type="System.String" />
        <Parameter Name="oldEventType" Type="System.Type" />
        <Parameter Name="newEventName" Type="System.String" />
        <Parameter Name="newEventType" Type="System.Type" />
        <Parameter Name="attributes" Type="System.Workflow.ComponentModel.Compiler.AttributeInfo[]" />
        <Parameter Name="emitDependencyProperty" Type="System.Boolean" />
        <Parameter Name="isMetaProperty" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="className">Строка, содержащая имя класса, содержащего обновляемое событие.</param>
        <param name="oldEventName">Строка, содержащая имя существующего события.</param>
        <param name="oldEventType">Класс <see cref="T:System.Type" />, связанный с существующим событием.</param>
        <param name="newEventName">Строка, содержащая новое имя обновляемого события.</param>
        <param name="newEventType">Класс <see cref="T:System.Type" />, который связывается с обновляемым событием.</param>
        <param name="attributes">Массив класса <see cref="T:System.Workflow.ComponentModel.Compiler.AttributeInfo" />, содержащий сведения о всех атрибутах, присваиваемых обновляемому событию.</param>
        <param name="emitDependencyProperty">Значение <see langword="true" />, чтобы обновить событие для создания свойства зависимости, в противном случае — <see langword="false" />.</param>
        <param name="isMetaProperty">Значение <see langword="true" />, чтобы задать событие как метасвойство, в противном случае — <see langword="false" />.</param>
        <summary>Задает новое имя и тип для существующего события в указанном классе.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateProperty">
      <MemberSignature Language="C#" Value="public void UpdateProperty (string className, string oldPropertyName, Type oldPropertyType, string newPropertyName, Type newPropertyType, System.Workflow.ComponentModel.Compiler.AttributeInfo[] attributes, bool emitDependencyProperty, bool isMetaProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateProperty(string className, string oldPropertyName, class System.Type oldPropertyType, string newPropertyName, class System.Type newPropertyType, class System.Workflow.ComponentModel.Compiler.AttributeInfo[] attributes, bool emitDependencyProperty, bool isMetaProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.IMemberCreationService.UpdateProperty(System.String,System.String,System.Type,System.String,System.Type,System.Workflow.ComponentModel.Compiler.AttributeInfo[],System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateProperty (className As String, oldPropertyName As String, oldPropertyType As Type, newPropertyName As String, newPropertyType As Type, attributes As AttributeInfo(), emitDependencyProperty As Boolean, isMetaProperty As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateProperty(System::String ^ className, System::String ^ oldPropertyName, Type ^ oldPropertyType, System::String ^ newPropertyName, Type ^ newPropertyType, cli::array &lt;System::Workflow::ComponentModel::Compiler::AttributeInfo ^&gt; ^ attributes, bool emitDependencyProperty, bool isMetaProperty);" />
      <MemberSignature Language="F#" Value="abstract member UpdateProperty : string * string * Type * string * Type * System.Workflow.ComponentModel.Compiler.AttributeInfo[] * bool * bool -&gt; unit" Usage="iMemberCreationService.UpdateProperty (className, oldPropertyName, oldPropertyType, newPropertyName, newPropertyType, attributes, emitDependencyProperty, isMetaProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="className" Type="System.String" />
        <Parameter Name="oldPropertyName" Type="System.String" />
        <Parameter Name="oldPropertyType" Type="System.Type" />
        <Parameter Name="newPropertyName" Type="System.String" />
        <Parameter Name="newPropertyType" Type="System.Type" />
        <Parameter Name="attributes" Type="System.Workflow.ComponentModel.Compiler.AttributeInfo[]" />
        <Parameter Name="emitDependencyProperty" Type="System.Boolean" />
        <Parameter Name="isMetaProperty" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="className">Строка, содержащая имя класса, в котором располагается обновляемое свойство.</param>
        <param name="oldPropertyName">Строка, содержащая существующее имя свойства.</param>
        <param name="oldPropertyType">Класс <see cref="T:System.Type" />, связанный с существующим свойством.</param>
        <param name="newPropertyName">Строка, содержащая новое имя свойства.</param>
        <param name="newPropertyType">Класс <see cref="T:System.Type" />, который связан с обновленной версией свойства.</param>
        <param name="attributes">Массив класса <see cref="T:System.Workflow.ComponentModel.Compiler.AttributeInfo" />, содержащий сведения о всех атрибутах, присвоенных обновляемому свойству.</param>
        <param name="emitDependencyProperty">Значение <see langword="true" />, чтобы обновить данное свойство для создания свойства зависимости, в противном случае — <see langword="false" />.</param>
        <param name="isMetaProperty">Значение <see langword="true" />, чтобы задать свойство как метасвойство, в противном случае — <see langword="false" />.</param>
        <summary>Задает новое имя и тип для свойства в указанном классе.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateTypeName">
      <MemberSignature Language="C#" Value="public void UpdateTypeName (string oldClassName, string newClassName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateTypeName(string oldClassName, string newClassName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.IMemberCreationService.UpdateTypeName(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateTypeName (oldClassName As String, newClassName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateTypeName(System::String ^ oldClassName, System::String ^ newClassName);" />
      <MemberSignature Language="F#" Value="abstract member UpdateTypeName : string * string -&gt; unit" Usage="iMemberCreationService.UpdateTypeName (oldClassName, newClassName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldClassName" Type="System.String" />
        <Parameter Name="newClassName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="oldClassName">Строка, содержащая существующее имя класса.</param>
        <param name="newClassName">Строка, содержащая новое имя, присваиваемое классу.</param>
        <summary>Обновляет имя указанного класса.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
