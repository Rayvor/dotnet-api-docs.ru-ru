<Type Name="TypeProvider" FullName="System.Workflow.ComponentModel.Compiler.TypeProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4c6bab770bf512fd01245bce3774aefbdf9d0db4" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69430716" /></Metadata><TypeSignature Language="C#" Value="public sealed class TypeProvider : IDisposable, IServiceProvider, System.Workflow.ComponentModel.Compiler.ITypeProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TypeProvider extends System.Object implements class System.IDisposable, class System.IServiceProvider, class System.Workflow.ComponentModel.Compiler.ITypeProvider" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.ComponentModel.Compiler.TypeProvider" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TypeProvider&#xA;Implements IDisposable, IServiceProvider, ITypeProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeProvider sealed : IDisposable, IServiceProvider, System::Workflow::ComponentModel::Compiler::ITypeProvider" />
  <TypeSignature Language="F#" Value="type TypeProvider = class&#xA;    interface ITypeProvider&#xA;    interface IServiceProvider&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Workflow.ComponentModel.Compiler.ITypeProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Реализация интерфейса <see cref="T:System.Workflow.ComponentModel.Compiler.ITypeProvider" />, который действует как контейнер типов в указанных сборках и единицах компиляции кода.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 Данная реализация <xref:System.Workflow.ComponentModel.Compiler.ITypeProvider>, помимо обработки скомпилированных сборок (методы<xref:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssembly%2A> и <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssemblyReference%2A>), может обрабатывать еще не скомпилированные типы (<xref:System.Workflow.ComponentModel.Compiler.TypeProvider.AddCodeCompileUnit%2A>). Ограниченная реализация <xref:System.Type?displayProperty=nameWithType> возвращается для типов, в ссылках на которые используется <xref:System.CodeDom.CodeCompileUnit>.  
  
> [!NOTE]
>  Объект <xref:System.Workflow.ComponentModel.Compiler.TypeProvider> возвращает только открытые типы из сборок, на которые стоят ссылки, и неоткрытые и открытые типы из локальных сборок.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeProvider (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serviceProvider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeProvider(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="new System.Workflow.ComponentModel.Compiler.TypeProvider : IServiceProvider -&gt; System.Workflow.ComponentModel.Compiler.TypeProvider" Usage="new System.Workflow.ComponentModel.Compiler.TypeProvider serviceProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">Инкапсулированный <see cref="T:System.IServiceProvider" /> для этого экземпляра.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Workflow.ComponentModel.Compiler.TypeProvider" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода демонстрируется создание нового экземпляра класса <xref:System.Workflow.ComponentModel.Compiler.TypeProvider>.  Данный пример кода является частью образца пакета SDK "BasicDesignerHosting" из файла WorkflowLoader.cs. Дополнительные сведения см. в разделе [базовое размещение конструктора](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms741708(v=vs.90)).  
  
 [!code-csharp[WF_Samples#256](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#256)]
 [!code-vb[WF_Samples#256](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#256)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssembly">
      <MemberSignature Language="C#" Value="public void AddAssembly (System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAssembly(class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAssembly(System::Reflection::Assembly ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.AddAssembly : System.Reflection.Assembly -&gt; unit" Usage="typeProvider.AddAssembly assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="assembly">Сборка <see cref="P:System.Type.Assembly" />, для которой надо добавить ссылку.</param>
        <summary>Добавляет уже загруженную сборку. За загрузку сборки отвечает вызывающая сторона, а объект<see cref="T:System.Workflow.ComponentModel.Compiler.TypeProvider" /> включает типы из этой сборки для распространения при вызове метода <see cref="Overload:System.Workflow.ComponentModel.Compiler.TypeProvider.GetType" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="assembly" /> является пустой ссылкой (<see langword="Nothing" /> в Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="AddAssemblyReference">
      <MemberSignature Language="C#" Value="public void AddAssemblyReference (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAssemblyReference(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssemblyReference(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAssemblyReference (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAssemblyReference(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.AddAssemblyReference : string -&gt; unit" Usage="typeProvider.AddAssemblyReference path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Путь к добавляемой сборке <see cref="P:System.Type.Assembly" />.</param>
        <summary>Добавляет ссылку на объект <see cref="P:System.Type.Assembly" /> во внутренний список. Эта сборка используется для поиска типа <see cref="T:System.Type" /> в методе <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetType(System.String)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода показано, как создать новый экземпляр класса <xref:System.Workflow.ComponentModel.Compiler.TypeProvider> и запустить метод <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssemblyReference%2A>. Данный пример кода является частью образца пакета SDK "BasicDesignerHosting" из файла WorkflowLoader.cs. Дополнительные сведения см. в разделе [базовое размещение конструктора](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms741708(v=vs.90)).  
  
 [!code-csharp[Wf_samples#256](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#256)]
 [!code-vb[Wf_samples#256](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#256)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="path" /> является пустой ссылкой (<see langword="Nothing" /> в Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="AddCodeCompileUnit">
      <MemberSignature Language="C#" Value="public void AddCodeCompileUnit (System.CodeDom.CodeCompileUnit codeCompileUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCodeCompileUnit(class System.CodeDom.CodeCompileUnit codeCompileUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddCodeCompileUnit(System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCodeCompileUnit(System::CodeDom::CodeCompileUnit ^ codeCompileUnit);" />
      <MemberSignature Language="F#" Value="member this.AddCodeCompileUnit : System.CodeDom.CodeCompileUnit -&gt; unit" Usage="typeProvider.AddCodeCompileUnit codeCompileUnit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeCompileUnit" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="codeCompileUnit">Добавляемый объект <see cref="T:System.CodeDom.CodeCompileUnit" />.</param>
        <summary>Добавляет ссылку на объект <see cref="T:System.CodeDom.CodeCompileUnit" /> во внутренний список. Этот объект <see cref="T:System.CodeDom.CodeCompileUnit" /> используется для поиска типа <see cref="T:System.Type" /> в методе <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetType(System.String)" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="codeCompileUnit" /> является пустой ссылкой (<see langword="Nothing" /> в Visual Basic).</exception>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="codeCompileUnit" /> уже имеет ссылку в данном экземпляре.</exception>
      </Docs>
    </Member>
    <Member MemberName="AssemblyNameResolver">
      <MemberSignature Language="C#" Value="public Func&lt;Type,string&gt; AssemblyNameResolver { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`2&lt;class System.Type, string&gt; AssemblyNameResolver" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Compiler.TypeProvider.AssemblyNameResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property AssemblyNameResolver As Func(Of Type, String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Func&lt;Type ^, System::String ^&gt; ^ AssemblyNameResolver { Func&lt;Type ^, System::String ^&gt; ^ get(); void set(Func&lt;Type ^, System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyNameResolver : Func&lt;Type, string&gt; with get, set" Usage="System.Workflow.ComponentModel.Compiler.TypeProvider.AssemblyNameResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;System.Type,System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает делегат, который ссылается на метод с одним параметром и одним возвращаемым значением, которое возвращает отображаемое имя сборки, к которому относится указанный тип.</summary>
        <value>Делегат, который ссылается на метод с одним параметром и одним возвращаемым значением, которое возвращает отображаемое имя сборки, к которому относится указанный тип.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="typeProvider.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает все ресурсы, занятые модулем <see cref="T:System.Workflow.ComponentModel.Compiler.TypeProvider" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssemblyName">
      <MemberSignature Language="C#" Value="public string GetAssemblyName (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAssemblyName(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetAssemblyName(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAssemblyName(Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.GetAssemblyName : Type -&gt; string" Usage="typeProvider.GetAssemblyName type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="type">Тип, для которого нужно получить имя сборки.</param>
        <summary>Возвращает отображаемое имя сборки, в которой объявлен указанный тип.</summary>
        <returns>Отображаемое имя сборки, в которой объявлен указанный тип.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumNames">
      <MemberSignature Language="C#" Value="public static string[] GetEnumNames (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetEnumNames(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetEnumNames(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEnumNames (enumType As Type) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetEnumNames(Type ^ enumType);" />
      <MemberSignature Language="F#" Value="static member GetEnumNames : Type -&gt; string[]" Usage="System.Workflow.ComponentModel.Compiler.TypeProvider.GetEnumNames enumType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType">Тип, из которого нужно получить имена.</param>
        <summary>Предоставляет массив строк, содержащий имена для заданного объекта <see cref="T:System.Enum" /> в порядке индексирования.</summary>
        <returns>Имена для заданного объекта <see cref="T:System.Enum" /> в порядке индексирования.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="enumType" /> является пустой ссылкой (<see langword="Nothing" /> в Visual Basic).</exception>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="enumType" /> не является объектом<see cref="T:System.Enum" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEventHandlerType">
      <MemberSignature Language="C#" Value="public static Type GetEventHandlerType (System.Reflection.EventInfo eventInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetEventHandlerType(class System.Reflection.EventInfo eventInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetEventHandlerType(System.Reflection.EventInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetEventHandlerType(System::Reflection::EventInfo ^ eventInfo);" />
      <MemberSignature Language="F#" Value="static member GetEventHandlerType : System.Reflection.EventInfo -&gt; Type" Usage="System.Workflow.ComponentModel.Compiler.TypeProvider.GetEventHandlerType eventInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventInfo" Type="System.Reflection.EventInfo" />
      </Parameters>
      <Docs>
        <param name="eventInfo">Объект <see cref="T:System.Reflection.EventInfo" />, у которого надо получить тип объекта <see cref="T:System.EventHandler" />.</param>
        <summary>Возвращает тип <see cref="T:System.Type" /> объекта <see cref="T:System.EventHandler" />, используя ссылку на объект <see cref="T:System.Reflection.EventInfo" />.</summary>
        <returns>Тип <see cref="T:System.Type" /> объекта <see cref="T:System.EventHandler" />, используя ссылку на объект <see cref="T:System.Reflection.EventInfo" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="eventInfo" /> является пустой ссылкой (<see langword="Nothing" /> в Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetService(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="abstract member GetService : Type -&gt; obj&#xA;override this.GetService : Type -&gt; obj" Usage="typeProvider.GetService serviceType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IServiceProvider.GetService(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">Тип <see cref="T:System.Type" /> службы, который должен предоставить объект <see cref="T:System.Object" />.</param>
        <summary>Возвращает объект <see cref="T:System.Object" />, предоставляющий указанный тип <see cref="T:System.Type" /> службы.</summary>
        <returns>Объект <see cref="T:System.Object" />, предоставляющий указанный тип <see cref="T:System.Type" /> службы.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если инкапсулированный <xref:System.IServiceProvider>, связанный с данным экземпляром, является пустой ссылкой (`Nothing` в Visual Basic), возвращается пустая ссылка (`Nothing`).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetType">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает тип <see cref="T:System.Type" /> из полного имени типа, полученного в результате поиска в ссылках сборок и единицах компиляции кода, которые были добавлены.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.GetType : string -&gt; Type" Usage="typeProvider.GetType name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Workflow.ComponentModel.Compiler.ITypeProvider.GetType(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Имя типа.</param>
        <summary>Возвращает тип из набора сборок, добавленных в объект <see langword="TypeProvider" /> при помощи <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssembly(System.Reflection.Assembly)" />, <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssemblyReference(System.String)" /> или <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddCodeCompileUnit(System.CodeDom.CodeCompileUnit)" />.</summary>
        <returns>Запрошенный <see cref="T:System.Type" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если имя нельзя разрешить в пределах кэша сборок и единиц компиляции, возвращается пустая ссылка (`Nothing` в Visual Basic). Вызов этого перегруженного метода — то же самое, что вызов двух перегруженных методов с параметрами, когда параметр `throwOnError` имеет значение `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="name" /> является неопределенной ссылкой (<see langword="Nothing" /> в Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType (string name, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType(string name, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetType(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType (name As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType(System::String ^ name, bool throwOnError);" />
      <MemberSignature Language="F#" Value="override this.GetType : string * bool -&gt; Type" Usage="typeProvider.GetType (name, throwOnError)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Workflow.ComponentModel.Compiler.ITypeProvider.GetType(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Имя типа.</param>
        <param name="throwOnError">Значение, указывающее, вызывается ли исключение, если параметр <paramref name="name" /> нельзя разрешить.</param>
        <summary>Возвращает тип из набора сборок, добавленных в объект <see langword="TypeProvider" /> при помощи <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssembly(System.Reflection.Assembly)" />, <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssemblyReference(System.String)" /> или <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddCodeCompileUnit(System.CodeDom.CodeCompileUnit)" />.</summary>
        <returns>Запрошенный <see cref="T:System.Type" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если имя нельзя разрешить в пределах кэша сборок и единиц компиляции, возвращается пустая ссылка (`Nothing`), если параметр `throwOnError` имеет значение `false`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="name" /> является неопределенной ссылкой (<see langword="Nothing" /> в Visual Basic).</exception>
        <exception cref="T:System.Exception">Элемент <paramref name="name" /> невозможно разрешить, а для параметра <paramref name="throwOnError" /> установлено значение <see langword="true" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypes">
      <MemberSignature Language="C#" Value="public Type[] GetTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetTypes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypes () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetTypes();" />
      <MemberSignature Language="F#" Value="abstract member GetTypes : unit -&gt; Type[]&#xA;override this.GetTypes : unit -&gt; Type[]" Usage="typeProvider.GetTypes " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Workflow.ComponentModel.Compiler.ITypeProvider.GetTypes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Создает массив, содержащий все типы <see cref="T:System.Type" />, известные для данного экземпляра.</summary>
        <returns>Массив, содержащий все типы <see cref="T:System.Type" />, известные для данного экземпляра.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Reflection.ReflectionTypeLoadException">Какой-либо тип <see cref="T:System.Type" /> не удалось загрузить.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsAssignable">
      <MemberSignature Language="C#" Value="public static bool IsAssignable (Type toType, Type fromType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAssignable(class System.Type toType, class System.Type fromType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.IsAssignable(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsAssignable (toType As Type, fromType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsAssignable(Type ^ toType, Type ^ fromType);" />
      <MemberSignature Language="F#" Value="static member IsAssignable : Type * Type -&gt; bool" Usage="System.Workflow.ComponentModel.Compiler.TypeProvider.IsAssignable (toType, fromType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toType" Type="System.Type" />
        <Parameter Name="fromType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="toType">Целевой объект <see cref="T:System.Type" /> назначения.</param>
        <param name="fromType">Исходный объект <see cref="T:System.Type" /> назначения.</param>
        <summary>Указывает, может ли один тип безопасно быть назначен другому типу.</summary>
        <returns>Значение <see langword="true" />, если можно безопасно выполнить назначение; в противном случае — <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public static bool IsEnum (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEnum(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.IsEnum(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsEnum(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member IsEnum : Type -&gt; bool" Usage="System.Workflow.ComponentModel.Compiler.TypeProvider.IsEnum type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">Проверяемый объект <see cref="T:System.Type" />.</param>
        <summary>Указывает, принадлежит ли объект <see cref="T:System.Type" /> к типу <see cref="T:System.Enum" />.</summary>
        <returns>Значение <see langword="true" />, если объект <see cref="T:System.Type" /> имеет тип <see cref="T:System.Enum" />; в противном случае — значение <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="type" /> является неопределенной ссылкой (<see langword="Nothing" /> в Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSubclassOf">
      <MemberSignature Language="C#" Value="public static bool IsSubclassOf (Type subclass, Type superClass);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSubclassOf(class System.Type subclass, class System.Type superClass) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.IsSubclassOf(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSubclassOf (subclass As Type, superClass As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSubclassOf(Type ^ subclass, Type ^ superClass);" />
      <MemberSignature Language="F#" Value="static member IsSubclassOf : Type * Type -&gt; bool" Usage="System.Workflow.ComponentModel.Compiler.TypeProvider.IsSubclassOf (subclass, superClass)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subclass" Type="System.Type" />
        <Parameter Name="superClass" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="subclass">Класс <see cref="T:System.Type" />, который проверяется как производный класс.</param>
        <param name="superClass">Объект <see cref="T:System.Type" />, который проверяется как основной класс.</param>
        <summary>Указывает, является ли данный класс <see cref="T:System.Type" /> производным от другого класса <see cref="T:System.Type" />.</summary>
        <returns>Значение <see langword="true" />, если проверяемые отношения существуют, в противном случае — <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupportedProperty">
      <MemberSignature Language="C#" Value="public bool IsSupportedProperty (System.Reflection.PropertyInfo property, object declaringInstance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsSupportedProperty(class System.Reflection.PropertyInfo property, object declaringInstance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.IsSupportedProperty(System.Reflection.PropertyInfo,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSupportedProperty (property As PropertyInfo, declaringInstance As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsSupportedProperty(System::Reflection::PropertyInfo ^ property, System::Object ^ declaringInstance);" />
      <MemberSignature Language="F#" Value="member this.IsSupportedProperty : System.Reflection.PropertyInfo * obj -&gt; bool" Usage="typeProvider.IsSupportedProperty (property, declaringInstance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.Reflection.PropertyInfo" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="declaringInstance" Type="System.Object" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="property">Свойство, которое нужно разрешить.</param>
        <param name="declaringInstance">Экземпляр, в котором объявлено указанное свойство.</param>
        <summary>Возвращает значение, определяющее, поддерживается ли указанное свойство в целевой версии [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</summary>
        <returns>Значение <see langword="true" />, если указанное свойство поддерживается в целевой версии [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]; в противном случае — значение <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupportedPropertyResolver">
      <MemberSignature Language="C#" Value="public Func&lt;System.Reflection.PropertyInfo,object,bool&gt; IsSupportedPropertyResolver { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`3&lt;class System.Reflection.PropertyInfo, object, bool&gt; IsSupportedPropertyResolver" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Compiler.TypeProvider.IsSupportedPropertyResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property IsSupportedPropertyResolver As Func(Of PropertyInfo, Object, Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Func&lt;System::Reflection::PropertyInfo ^, System::Object ^, bool&gt; ^ IsSupportedPropertyResolver { Func&lt;System::Reflection::PropertyInfo ^, System::Object ^, bool&gt; ^ get(); void set(Func&lt;System::Reflection::PropertyInfo ^, System::Object ^, bool&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.IsSupportedPropertyResolver : Func&lt;System.Reflection.PropertyInfo, obj, bool&gt; with get, set" Usage="System.Workflow.ComponentModel.Compiler.TypeProvider.IsSupportedPropertyResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;System.Reflection.PropertyInfo,System.Object,System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает делегат, который ссылается на метод с двумя параметрами и одним возвращаемым значением, которое определяет, поддерживается ли указанное свойство в целевой версии [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</summary>
        <value>Делегат, который ссылается на метод с двумя параметрами и одним возвращаемым значением, которое определяет, поддерживается ли указанное свойство в целевой версии [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LocalAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly LocalAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Compiler.TypeProvider.LocalAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Assembly ^ LocalAssembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalAssembly : System.Reflection.Assembly" Usage="System.Workflow.ComponentModel.Compiler.TypeProvider.LocalAssembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Workflow.ComponentModel.Compiler.ITypeProvider.LocalAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, представляющее локально определенную сборку <see cref="T:System.Reflection.Assembly" /> для данного экземпляра.</summary>
        <value>Локально определенная сборка <see cref="T:System.Reflection.Assembly" /> для этого экземпляра.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferencedAssemblies">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;System.Reflection.Assembly&gt; ReferencedAssemblies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;class System.Reflection.Assembly&gt; ReferencedAssemblies" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Compiler.TypeProvider.ReferencedAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReferencedAssemblies As ICollection(Of Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::ICollection&lt;System::Reflection::Assembly ^&gt; ^ ReferencedAssemblies { System::Collections::Generic::ICollection&lt;System::Reflection::Assembly ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReferencedAssemblies : System.Collections.Generic.ICollection&lt;System.Reflection.Assembly&gt;" Usage="System.Workflow.ComponentModel.Compiler.TypeProvider.ReferencedAssemblies" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Workflow.ComponentModel.Compiler.ITypeProvider.ReferencedAssemblies</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.Reflection.Assembly&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает коллекцию всех сборок, на которые ссылается тип <see cref="T:System.Type" />.</summary>
        <value>Коллекция всех сборок, на которые ссылается тип <see cref="T:System.Type" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshCodeCompileUnit">
      <MemberSignature Language="C#" Value="public void RefreshCodeCompileUnit (System.CodeDom.CodeCompileUnit codeCompileUnit, EventHandler refresher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RefreshCodeCompileUnit(class System.CodeDom.CodeCompileUnit codeCompileUnit, class System.EventHandler refresher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.RefreshCodeCompileUnit(System.CodeDom.CodeCompileUnit,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RefreshCodeCompileUnit(System::CodeDom::CodeCompileUnit ^ codeCompileUnit, EventHandler ^ refresher);" />
      <MemberSignature Language="F#" Value="member this.RefreshCodeCompileUnit : System.CodeDom.CodeCompileUnit * EventHandler -&gt; unit" Usage="typeProvider.RefreshCodeCompileUnit (codeCompileUnit, refresher)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeCompileUnit" Type="System.CodeDom.CodeCompileUnit" />
        <Parameter Name="refresher" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="codeCompileUnit">Объект <see cref="T:System.CodeDom.CodeCompileUnit" /> для обновления.</param>
        <param name="refresher">Обработчик <see cref="T:System.EventHandler" />, которому делегируется событие.</param>
        <summary>Обновляет ссылку <see cref="T:System.CodeDom.CodeCompileUnit" />, связанную с данным экземпляром.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При вызове этого метода генерируется событие <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.TypesChanged>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="codeCompileUnit" /> является неопределенной ссылкой (<see langword="Nothing" /> в Visual Basic).</exception>
        <exception cref="T:System.ArgumentException">Экземпляр уже имеет ссылку на указанный объект <see cref="T:System.CodeDom.CodeCompileUnit" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAssembly">
      <MemberSignature Language="C#" Value="public void RemoveAssembly (System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAssembly(class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.RemoveAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAssembly(System::Reflection::Assembly ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.RemoveAssembly : System.Reflection.Assembly -&gt; unit" Usage="typeProvider.RemoveAssembly assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="assembly">Объект <see cref="T:System.Reflection.Assembly" /> для удаления из экземпляра.</param>
        <summary>Удаляет все ссылки на заданный объект <see cref="T:System.Reflection.Assembly" /> из экземпляра.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При вызове этого метода генерируется событие <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.TypesChanged>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="assembly" /> является неопределенной ссылкой (<see langword="Nothing" /> в Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAssemblyReference">
      <MemberSignature Language="C#" Value="public void RemoveAssemblyReference (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAssemblyReference(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.RemoveAssemblyReference(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAssemblyReference (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAssemblyReference(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.RemoveAssemblyReference : string -&gt; unit" Usage="typeProvider.RemoveAssemblyReference path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Путь к объекту <see cref="T:System.Reflection.Assembly" />, который требуется удалить.</param>
        <summary>Удаляет основанную на пути ссылку на объект <see cref="T:System.Reflection.Assembly" /> из экземпляра.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При вызове этого метода генерируется событие <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.TypesChanged>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="path" /> является неопределенной ссылкой (<see langword="Nothing" /> в Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveCodeCompileUnit">
      <MemberSignature Language="C#" Value="public void RemoveCodeCompileUnit (System.CodeDom.CodeCompileUnit codeCompileUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveCodeCompileUnit(class System.CodeDom.CodeCompileUnit codeCompileUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.RemoveCodeCompileUnit(System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveCodeCompileUnit(System::CodeDom::CodeCompileUnit ^ codeCompileUnit);" />
      <MemberSignature Language="F#" Value="member this.RemoveCodeCompileUnit : System.CodeDom.CodeCompileUnit -&gt; unit" Usage="typeProvider.RemoveCodeCompileUnit codeCompileUnit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeCompileUnit" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="codeCompileUnit">Удаляемый объект <see cref="T:System.CodeDom.CodeCompileUnit" />.</param>
        <summary>Удаляет все ссылки на заданный объект <see cref="T:System.CodeDom.CodeCompileUnit" /> из экземпляра.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При вызове этого метода генерируется событие <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.TypesChanged>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="codeCompileUnit" /> является неопределенной ссылкой (<see langword="Nothing" /> в Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLocalAssembly">
      <MemberSignature Language="C#" Value="public void SetLocalAssembly (System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLocalAssembly(class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.SetLocalAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetLocalAssembly(System::Reflection::Assembly ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.SetLocalAssembly : System.Reflection.Assembly -&gt; unit" Usage="typeProvider.SetLocalAssembly assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="assembly">Объект <see cref="T:System.Reflection.Assembly" /> для задания значения.</param>
        <summary>Задает в качестве значения локального объекта <see cref="T:System.Reflection.Assembly" /> объект <see cref="T:System.Reflection.Assembly" />, на который существует ссылка.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При вызове этого метода генерируется событие <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.TypesChanged>. Следует вызвать метод <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.SetLocalAssembly%28System.Reflection.Assembly%29> перед тем, как вызывать метод <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssembly%28System.Reflection.Assembly%29>, иначе он не повлияет на объект <xref:System.Workflow.ComponentModel.Compiler.TypeProvider>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeLoadErrors">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;object,Exception&gt; TypeLoadErrors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;object, class System.Exception&gt; TypeLoadErrors" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Compiler.TypeProvider.TypeLoadErrors" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeLoadErrors As IDictionary(Of Object, Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IDictionary&lt;System::Object ^, Exception ^&gt; ^ TypeLoadErrors { System::Collections::Generic::IDictionary&lt;System::Object ^, Exception ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeLoadErrors : System.Collections.Generic.IDictionary&lt;obj, Exception&gt;" Usage="System.Workflow.ComponentModel.Compiler.TypeProvider.TypeLoadErrors" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Workflow.ComponentModel.Compiler.ITypeProvider.TypeLoadErrors</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.Object,System.Exception&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает объект <see cref="T:System.Collections.IDictionary" />, содержащий исключения, связанные с ошибками загрузки; ключом является объект <see cref="T:System.Object" />, вызывающий исключение <see cref="T:System.Exception" />.</summary>
        <value>Объект <see cref="T:System.Collections.IDictionary" />, содержащий исключения, связанные с ошибками загрузки; ключом является объект <see cref="T:System.Object" />, вызывающий исключение <see cref="T:System.Exception" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обновленный отдельный объект <xref:System.Collections.IDictionary> создается при каждой ссылке на данное свойство.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeLoadErrorsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TypeLoadErrorsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TypeLoadErrorsChanged" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.ComponentModel.Compiler.TypeProvider.TypeLoadErrorsChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event TypeLoadErrorsChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ TypeLoadErrorsChanged;" />
      <MemberSignature Language="F#" Value="member this.TypeLoadErrorsChanged : EventHandler " Usage="member this.TypeLoadErrorsChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Workflow.ComponentModel.Compiler.ITypeProvider.TypeLoadErrorsChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при изменении коллекции <see cref="P:System.Workflow.ComponentModel.Compiler.TypeProvider.TypeLoadErrors" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypesChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TypesChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TypesChanged" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.ComponentModel.Compiler.TypeProvider.TypesChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event TypesChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ TypesChanged;" />
      <MemberSignature Language="F#" Value="member this.TypesChanged : EventHandler " Usage="member this.TypesChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Workflow.ComponentModel.Compiler.ITypeProvider.TypesChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при изменении коллекции указанных типов.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
