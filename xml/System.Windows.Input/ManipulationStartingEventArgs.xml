<Type Name="ManipulationStartingEventArgs" FullName="System.Windows.Input.ManipulationStartingEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c5f57421d80459d11a40fa0d7aca9bf5d68d65e4" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70630216" /></Metadata><TypeSignature Language="C#" Value="public sealed class ManipulationStartingEventArgs : System.Windows.Input.InputEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManipulationStartingEventArgs extends System.Windows.Input.InputEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ManipulationStartingEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManipulationStartingEventArgs&#xA;Inherits InputEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManipulationStartingEventArgs sealed : System::Windows::Input::InputEventArgs" />
  <TypeSignature Language="F#" Value="type ManipulationStartingEventArgs = class&#xA;    inherit InputEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.InputEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет данные для события <see cref="E:System.Windows.UIElement.ManipulationStarting" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.ManipulationStartingEventArgs> Позволяет указать поведение манипуляции.  Используйте, <xref:System.Windows.Input.ManipulationStartingEventArgs> чтобы выполнить следующие действия.  
  
-   Укажите, что расположение должно относиться к элементу путем задания <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> свойства.  
  
-   Укажите, включена ли манипуляция с одним пальцем, задав <xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=nameWithType> свойство.  
  
-   Укажите, какие типы манипуляции включены, задав <xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=nameWithType> <xref:System.Windows.Input.ManipulationModes> для свойства перечисление.  
  
-   Укажите центр вращения с одним пальцем, задав <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType> свойство.  
  
-   Отмените манипуляцию, задав <xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=nameWithType> для `true`свойства значение.  
  
 Дополнительные сведения об операциях см. в разделе [Общие сведения о входных данных](~/docs/framework/wpf/advanced/input-overview.md).  Пример приложения, реагирующего на манипуляции, см. в разделе [Пошаговое руководство. Создание первого приложения Touch](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public bool Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationStartingEventArgs.Cancel" />
      <MemberSignature Language="VB.NET" Value="Public Function Cancel () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Cancel();" />
      <MemberSignature Language="F#" Value="member this.Cancel : unit -&gt; bool" Usage="manipulationStartingEventArgs.Cancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Отменяет манипуляцию и преобразует операцию сенсорного ввода в события мыши.</summary>
        <returns>Значение <see langword="true" />, если сенсорный ввод был успешно преобразован в события мыши; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если метод завершается с ошибкой, по <xref:System.Windows.Input.TouchDevice> умолчанию происходит отправка предыдущих событий касания, когда события нажатия кнопки мыши и события манипуляции в будущем не происходят.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object genericTarget) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationStartingEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, genericTarget As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ genericTarget);" />
      <MemberSignature Language="F#" Value="override this.InvokeEventHandler : Delegate * obj -&gt; unit" Usage="manipulationStartingEventArgs.InvokeEventHandler (genericHandler, genericTarget)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="genericTarget" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">To be added.</param>
        <param name="genericTarget">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSingleTouchEnabled">
      <MemberSignature Language="C#" Value="public bool IsSingleTouchEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSingleTouchEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsSingleTouchEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSingleTouchEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsSingleTouchEnabled : bool with get, set" Usage="System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее, может ли манипуляция быть запущена одним пальцем.</summary>
        <value>Значение <see langword="true" />, если манипуляция может быть запущена одним пальцем; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения об операциях см. в разделе [Общие сведения о входных данных](~/docs/framework/wpf/advanced/input-overview.md).  Пример приложения, реагирующего на манипуляции, см. в разделе [Пошаговое руководство. Создание первого приложения Touch](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationContainer">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement ManipulationContainer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement ManipulationContainer" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer" />
      <MemberSignature Language="VB.NET" Value="Public Property ManipulationContainer As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ ManipulationContainer { System::Windows::IInputElement ^ get(); void set(System::Windows::IInputElement ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ManipulationContainer : System.Windows.IInputElement with get, set" Usage="System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает контейнер, к которому имеют отношение все события манипуляции и вычисления.</summary>
        <value>Контейнер, к которому имеют отношение все события манипуляции и вычисления. Значение по умолчанию — элемент, в котором произошло событие.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно указать, что расположение должно относиться к другому элементу, задав <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> свойство. Например, можно сделать позиции манипуляции относительно родителя элемента, который получает события манипуляции. Обработчик событий является единственным местом, в котором можно <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A>установить. <xref:System.Windows.UIElement.ManipulationStarting>  
  
 Дополнительные сведения об операциях см. в разделе [Общие сведения о входных данных](~/docs/framework/wpf/advanced/input-overview.md).  Пример приложения, реагирующего на манипуляции, см. в разделе [Пошаговое руководство. Создание первого приложения Touch](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Manipulators">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.IManipulator&gt; Manipulators { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.IManipulator&gt; Manipulators" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationStartingEventArgs.Manipulators" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Manipulators As IEnumerable(Of IManipulator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::IManipulator ^&gt; ^ Manipulators { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::IManipulator ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Manipulators : seq&lt;System.Windows.Input.IManipulator&gt;" Usage="System.Windows.Input.ManipulationStartingEventArgs.Manipulators" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.IManipulator&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает коллекцию объектов, представляющих сенсорные контакты для обработки.</summary>
        <value>Коллекция объектов, представляющих сенсорные контакты для обработки.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ManipulationModes Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.ManipulationModes Mode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationStartingEventArgs.Mode" />
      <MemberSignature Language="VB.NET" Value="Public Property Mode As ManipulationModes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ManipulationModes Mode { System::Windows::Input::ManipulationModes get(); void set(System::Windows::Input::ManipulationModes value); };" />
      <MemberSignature Language="F#" Value="member this.Mode : System.Windows.Input.ManipulationModes with get, set" Usage="System.Windows.Input.ManipulationStartingEventArgs.Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ManipulationModes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает возможные типы манипуляций.</summary>
        <value>Одно из значений перечисления. Значение по умолчанию — <see cref="F:System.Windows.Input.ManipulationModes.All" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения об операциях см. в разделе [Общие сведения о входных данных](~/docs/framework/wpf/advanced/input-overview.md).  Пример приложения, реагирующего на манипуляции, см. в разделе [Пошаговое руководство. Создание первого приложения Touch](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Свойству присваивается значение, отличное от значения одного или нескольких перечислений <see cref="T:System.Windows.Input.ManipulationModes" /></exception>
      </Docs>
    </Member>
    <Member MemberName="Pivot">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ManipulationPivot Pivot { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ManipulationPivot Pivot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationStartingEventArgs.Pivot" />
      <MemberSignature Language="VB.NET" Value="Public Property Pivot As ManipulationPivot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ManipulationPivot ^ Pivot { System::Windows::Input::ManipulationPivot ^ get(); void set(System::Windows::Input::ManipulationPivot ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Pivot : System.Windows.Input.ManipulationPivot with get, set" Usage="System.Windows.Input.ManipulationStartingEventArgs.Pivot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ManipulationPivot</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает объект, описывающий точку вращения для одноточечной манипуляции.</summary>
        <value>Объект, описывающий точку вращения для одноточечной манипуляции.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При задании <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A> свойства манипуляция будет содержать данные вращения, когда пользователь использует один палец во время манипуляции.  Это предназначено для имитации реальных ситуаций, в которых можно использовать один палец для поворота объекта, например фрагмента бумаги в таблице.  Если значение <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A> равно `null`, пользователь должен использовать два пальца для вращения.  
  
 Дополнительные сведения об операциях см. в разделе [Общие сведения о входных данных](~/docs/framework/wpf/advanced/input-overview.md).  Пример приложения, реагирующего на манипуляции, см. в разделе [Пошаговое руководство. Создание первого приложения Touch](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
   
  
## Examples  
 В следующем примере показан обработчик событий для <xref:System.Windows.UIElement.ManipulationStarting> события и <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType> задается свойство. Чтобы протестировать этот пример, выполните действия, описанные в [разделе Пошаговое руководство. Создание первого приложения Touch](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md) и замена кода в шаге 4 на этот код.  
  
 [!code-csharp[BasicManipulation#ManipulationPivot](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/reportboundaryfeedbackexample.xaml.cs#manipulationpivot)]
 [!code-vb[BasicManipulation#ManipulationPivot](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/reportboundaryfeedbackexample.xaml.vb#manipulationpivot)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetManipulationParameter">
      <MemberSignature Language="C#" Value="public void SetManipulationParameter (System.Windows.Input.Manipulations.ManipulationParameters2D parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetManipulationParameter(class System.Windows.Input.Manipulations.ManipulationParameters2D parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationStartingEventArgs.SetManipulationParameter(System.Windows.Input.Manipulations.ManipulationParameters2D)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetManipulationParameter (parameter As ManipulationParameters2D)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetManipulationParameter(System::Windows::Input::Manipulations::ManipulationParameters2D ^ parameter);" />
      <MemberSignature Language="F#" Value="member this.SetManipulationParameter : System.Windows.Input.Manipulations.ManipulationParameters2D -&gt; unit" Usage="manipulationStartingEventArgs.SetManipulationParameter parameter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Windows.Input.Manipulations.ManipulationParameters2D" />
      </Parameters>
      <Docs>
        <param name="parameter">Добавляемый параметр.</param>
        <summary>Добавляет параметры в текущую манипуляцию заданного элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обычно вызывать этот метод не требуется.  <xref:System.Windows.Input.ManipulationStartingEventArgs> Вместо этого используйте свойства.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
