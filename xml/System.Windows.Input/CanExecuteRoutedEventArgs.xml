<Type Name="CanExecuteRoutedEventArgs" FullName="System.Windows.Input.CanExecuteRoutedEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fbec0a81b7258d70c24d1eb064a0edbead2570ab" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69174204" /></Metadata><TypeSignature Language="C#" Value="public sealed class CanExecuteRoutedEventArgs : System.Windows.RoutedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CanExecuteRoutedEventArgs extends System.Windows.RoutedEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CanExecuteRoutedEventArgs&#xA;Inherits RoutedEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class CanExecuteRoutedEventArgs sealed : System::Windows::RoutedEventArgs" />
  <TypeSignature Language="F#" Value="type CanExecuteRoutedEventArgs = class&#xA;    inherit RoutedEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.RoutedEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет данные для маршрутизируемых событий <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> и <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило, источник команды, такой <xref:System.Windows.Controls.MenuItem>, <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> вызывает метод <xref:System.Windows.Input.RoutedCommand> для, чтобы определить, может ли команда выполнить или не может выполняться на текущем целевом объекте команды.  Если <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> для`false` параметра задано значение из обработчика событий, источник команды будет отключен.  Например, если член <xref:System.Windows.Controls.MenuItem> выступает в качестве источника команды для команды, и команда не может выполняться на текущем целевом объекте команды, то <xref:System.Windows.Controls.MenuItem> сам серый цвет будет неактивен.  
  
 <xref:System.Windows.Input.ICommand.CanExecuteChanged> Событие уведомляет источник команды, когда может быть изменена возможность выполнения команды.  
  
   
  
## Examples  
 В приведенном ниже примере <xref:System.Windows.Input.CanExecuteRoutedEventHandler> создается объект `true` , который возвращает, только если целевой объект команды является элементом управления.  Во- <xref:System.Windows.RoutedEventArgs.Source%2A> первых, приводится к типу. <xref:System.Windows.Controls.Control>  Если <xref:System.Windows.RoutedEventArgs.Source%2A> <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> параметримеет`true`значение ,`false`дляпараметра задается; в противном случае — значение. <xref:System.Windows.Controls.Control>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcanexecute)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
  </Docs>
  <Members>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanExecute" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute" />
      <MemberSignature Language="VB.NET" Value="Public Property CanExecute As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanExecute { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanExecute : bool with get, set" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее, может ли <see cref="T:System.Windows.Input.RoutedCommand" />, связанный с данным событием, выполняться для целевого объекта данной команды.</summary>
        <value><see langword="true" />, если данное событие может выполняться для целевого объекта команды; в противном случае — <see langword="false" />.  Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Многие источники команд, такие как <xref:System.Windows.Controls.MenuItem> и <xref:System.Windows.Controls.Button>, отключаются <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> , `false` когда имеет значение и <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> включены `true`, если имеет значение.  
  
   
  
## Examples  
 В приведенном ниже примере <xref:System.Windows.Input.CanExecuteRoutedEventHandler> создается объект, который возвращает значение true только в том случае, если целевой объект команды является элементом управления.  <xref:System.Windows.Controls.Control>Сначала данные <xref:System.Windows.RoutedEventArgs.Source%2A> события приводятся к типу.  Если это <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> `true`, то параметр имеет значение; в противном случае — значение `false`. <xref:System.Windows.Controls.Control>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcanexecute)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.Command" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает команду, связанную с этим событием.</summary>
        <value>Команда. Если команда не является пользовательской, обычно это <see cref="T:System.Windows.Input.RoutedCommand" />. Значение по умолчанию отсутствует.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения о командах см. в разделе [Общие сведения о командах](~/docs/framework/wpf/advanced/commanding-overview.md).  
  
   
  
## Examples  
 В следующем примере создается объект <xref:System.Windows.Input.CanExecuteRoutedEventHandler> , обрабатывающий несколько команд.  `false` `IsPlaying` `true` `false`Если свойство равно <xref:System.Windows.Input.MediaCommands.Play%2A> команде, а метод <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> возвращает,топараметруприсваиваетсязначение;впротивномслучаеустанавливаетсязначение.<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A>  `true` `IsPlaying` `true` `false`Если свойство равно <xref:System.Windows.Input.MediaCommands.Stop%2A> команде, а метод <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> возвращает,топараметруприсваиваетсязначение;впротивномслучаеустанавливаетсязначение.<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewmultiplecanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewmultiplecanexecute)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="ContinueRouting">
      <MemberSignature Language="C#" Value="public bool ContinueRouting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContinueRouting" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting" />
      <MemberSignature Language="VB.NET" Value="Public Property ContinueRouting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ContinueRouting { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ContinueRouting : bool with get, set" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Определяет, следует ли продолжать маршрутизацию перенаправленного события ввода, вызвавшего команду, по дереву элементов.</summary>
        <value>Значение <see langword="true" />, если следует продолжать маршрутизацию перенаправленного события по дереву элементов; в противном случае — значение <see langword="false" />.   Значение по умолчанию — <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object target);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, target As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ target);" />
      <MemberSignature Language="F#" Value="override this.InvokeEventHandler : Delegate * obj -&gt; unit" Usage="canExecuteRoutedEventArgs.InvokeEventHandler (genericHandler, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">To be added.</param>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public object Parameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parameter { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parameter : obj" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.Parameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает связанные с командой данные.</summary>
        <value>Связанные с командой данные.  Значение по умолчанию — <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Параметр команды используется для передачи определенной информации команде при ее выполнении.  Тип данных определяется командой.  
  
 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter%2A>может иметь `null`. Многие команды не обрабатывают или не запредполагают параметры команды.  
  
   
  
## Examples  
 В следующем примере показано, как использовать в <xref:System.Windows.Controls.Button> качестве источника команды для пользовательской команды.  <xref:System.Windows.Input.RoutedCommand> <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> `customCommand` <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> Свойство объекта задается для пользовательского вызываемого метода и используется для передачи значения свойства <xref:System.Windows.Controls.Slider> элемента управления. <xref:System.Windows.Controls.Button> <xref:System.Windows.Input.ICommandSource.Command%2A>  Это достигается с помощью привязки данных для привязки <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> к свойству.  Преобразователь в выражении привязки является пользовательским <xref:System.Windows.Data.IValueConverter> , который <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> преобразует в <xref:System.Int32> перед привязкой к <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  
  
 [!code-xaml[invalidaterequerywithdispatchertimer#InvalidateSampleSliderCommandParameter](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml#invalidatesampleslidercommandparameter)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
  </Members>
</Type>
