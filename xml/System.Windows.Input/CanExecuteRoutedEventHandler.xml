<Type Name="CanExecuteRoutedEventHandler" FullName="System.Windows.Input.CanExecuteRoutedEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d59f4554561d75bef1c57729e43a1f1ef365511f" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69173329" /></Metadata><TypeSignature Language="C#" Value="public delegate void CanExecuteRoutedEventHandler(object sender, CanExecuteRoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CanExecuteRoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub CanExecuteRoutedEventHandler(sender As Object, e As CanExecuteRoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void CanExecuteRoutedEventHandler(System::Object ^ sender, CanExecuteRoutedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type CanExecuteRoutedEventHandler = delegate of obj * CanExecuteRoutedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.CanExecuteRoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">Целевой объект команды, вызывающей данный обработчик.</param>
    <param name="e">Данные события.</param>
    <summary>Представляет метод, обрабатывающий событие <see cref="E:System.Windows.Input.CommandBinding.CanExecute" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Определяет <xref:System.Windows.Input.CanExecuteRoutedEventHandler> , может ли команда, связанная с источником события, выполняться на целевом объекте команды. Если у команды есть источник команды, указывающий целевой объект, то целевые сведения можно получить с помощью `sender`. Если параметр <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> не задан, то элемент с фокусом клавиатуры является целевым объектом, и его также можно получить с `sender`помощью.  Если определено, что команда может выполняться на целевом объекте, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A?displayProperty=nameWithType> свойство должно иметь `true`значение; `false`в противном случае — значение.  
  
 Для определения команды, источника и целевого объекта не нужно полагаться на данные события. Вы можете ограничить использование обработчика известными возможными вызовами команд, хотя это труднее сделать, если структура команд широко используется в маршрутизации команд для выполнения одной и той же команды для последовательных потенциальных целей в событии. направлены.  
  
   
  
## Examples  
 В следующем примере показан объект <xref:System.Windows.Input.CanExecuteRoutedEventHandler> , для <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> которого `true`задается значение.  
  
 [!code-csharp[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
  </Docs>
</Type>
