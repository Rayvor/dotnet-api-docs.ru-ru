<Type Name="CanExecuteRoutedEventHandler" FullName="System.Windows.Input.CanExecuteRoutedEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f72c30e4f64ddc93533afb2c9adbed1fc0d55eb0" /><Meta Name="ms.sourcegitcommit" Value="0528148687f8b0e0a3d0f550431a777fbe5346bc" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="04/25/2019" /><Meta Name="ms.locfileid" Value="64443171" /></Metadata><TypeSignature Language="C#" Value="public delegate void CanExecuteRoutedEventHandler(object sender, CanExecuteRoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CanExecuteRoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub CanExecuteRoutedEventHandler(sender As Object, e As CanExecuteRoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void CanExecuteRoutedEventHandler(System::Object ^ sender, CanExecuteRoutedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type CanExecuteRoutedEventHandler = delegate of obj * CanExecuteRoutedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.CanExecuteRoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">Целевой объект команды, вызывающей данный обработчик.</param>
    <param name="e">Данные события.</param>
    <summary>Представляет метод, обрабатывающий событие <see cref="E:System.Windows.Input.CommandBinding.CanExecute" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.CanExecuteRoutedEventHandler> Определяет, является ли команда, связанная с источником события могут выполнять для целевого объекта команды. Если команда имеет источник команды, в которой указана цель, то сведения о целевом можно получить с помощью `sender`. Если <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> не задано, элемент с фокусом клавиатуры является целевым объектом, а также может быть получен с помощью `sender`.  Если выяснилось, что команда может выполняться для целевого объекта, а затем <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A?displayProperty=nameWithType> свойство должно быть присвоено `true`; в противном случае задайте для него значение `false`.  
  
 Вы не обязательно полагаться на данные события, чтобы определить команду, источник и назначение. Вы можете ограничить использование обработчика известными возможными вызовами команды, несмотря на то, что это более сложно этого достичь, если структура команды сильно зависит от маршрутизация команд для выполнения той же команды на последующих потенциальных целевых объектов в событии маршрут.  
  
   
  
## Examples  
 В следующем примере показан <xref:System.Windows.Input.CanExecuteRoutedEventHandler> , задает <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> для `true`.  
  
 [!code-csharp[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
  </Docs>
</Type>