<Type Name="InputBinding" FullName="System.Windows.Input.InputBinding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="288a16ef07cf67cb7b066dde782a47b6d6ee730d" /><Meta Name="ms.sourcegitcommit" Value="74239f3977d28923e5020663db2c4e91601bea79" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="07/24/2019" /><Meta Name="ms.locfileid" Value="68439600" /></Metadata><TypeSignature Language="C#" Value="public class InputBinding : System.Windows.Freezable, System.Windows.Input.ICommandSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InputBinding extends System.Windows.Freezable implements class System.Windows.Input.ICommandSource" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.InputBinding" />
  <TypeSignature Language="VB.NET" Value="Public Class InputBinding&#xA;Inherits Freezable&#xA;Implements ICommandSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class InputBinding : System::Windows::Freezable, System::Windows::Input::ICommandSource" />
  <TypeSignature Language="F#" Value="type InputBinding = class&#xA;    inherit Freezable&#xA;    interface ICommandSource" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Freezable</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-3.0">System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommandSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="86e74-101">Представляет привязку между <see cref="T:System.Windows.Input.InputGesture" /> и командой.</span><span class="sxs-lookup"><span data-stu-id="86e74-101">Represents a binding between an <see cref="T:System.Windows.Input.InputGesture" /> and a command.</span></span> <span data-ttu-id="86e74-102">Этой командой потенциально является <see cref="T:System.Windows.Input.RoutedCommand" />.</span><span class="sxs-lookup"><span data-stu-id="86e74-102">The command is potentially a <see cref="T:System.Windows.Input.RoutedCommand" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86e74-103">Вы можете указать, что вводимые пользователем данные вызывают команду, создав <xref:System.Windows.Input.InputBinding>.</span><span class="sxs-lookup"><span data-stu-id="86e74-103">You can specify that user input invokes a command by creating a <xref:System.Windows.Input.InputBinding>.</span></span> <span data-ttu-id="86e74-104">Когда пользователь выполняет указанные входные данные, <xref:System.Windows.Input.ICommand> выполняется <xref:System.Windows.Input.InputBinding.Command%2A> свойство, заданное для свойства.</span><span class="sxs-lookup"><span data-stu-id="86e74-104">When the user performs the specified input, the <xref:System.Windows.Input.ICommand> that is set to the <xref:System.Windows.Input.InputBinding.Command%2A> property is executed.</span></span>  
  
 <span data-ttu-id="86e74-105">Можно указать, <xref:System.Windows.Input.InputBinding> что метод вызывает команду, определенную для объекта, создав привязку <xref:System.Windows.Input.InputBinding.Command%2A>для свойств, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>и <xref:System.Windows.Input.InputBinding.CommandTarget%2A> .</span><span class="sxs-lookup"><span data-stu-id="86e74-105">You can specify that the <xref:System.Windows.Input.InputBinding> invokes a command that is defined on an object by creating a binding on the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties.</span></span> <span data-ttu-id="86e74-106">Это позволяет определить пользовательскую команду и связать ее с введенными пользователем данными.</span><span class="sxs-lookup"><span data-stu-id="86e74-106">This enables you to define a custom command and associate it with user input.</span></span> <span data-ttu-id="86e74-107">Дополнительные сведения см. во втором примере в разделе "примеры".</span><span class="sxs-lookup"><span data-stu-id="86e74-107">For more information, see the second example in the Examples section.</span></span>  
  
 <span data-ttu-id="86e74-108">Можно определить для конкретного объекта или на уровне класса путем <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> регистрации с <xref:System.Windows.Input.CommandManager>помощью. <xref:System.Windows.Input.InputBinding></span><span class="sxs-lookup"><span data-stu-id="86e74-108">An <xref:System.Windows.Input.InputBinding> can be defined on a specific object or at the class level by registering a <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> with the <xref:System.Windows.Input.CommandManager>.</span></span>  
  
 <span data-ttu-id="86e74-109">Сам <xref:System.Windows.Input.InputBinding> класс не поддерживает использование XAML, так как не предоставляет общедоступный конструктор без параметров (есть конструктор без параметров, но он защищен).</span><span class="sxs-lookup"><span data-stu-id="86e74-109">The <xref:System.Windows.Input.InputBinding> class itself does not support XAML usage because it does not expose a public parameterless constructor (there is a parameterless constructor, but it is protected).</span></span> <span data-ttu-id="86e74-110">Однако производные классы могут предоставлять открытый конструктор, поэтому могут устанавливать свойства производного класса, наследуемые <xref:System.Windows.Input.InputBinding> с использованием XAML.</span><span class="sxs-lookup"><span data-stu-id="86e74-110">However, derived classes can expose a public constructor and therefore can set properties on the derived class that are inherited from <xref:System.Windows.Input.InputBinding> with a XAML usage.</span></span> <span data-ttu-id="86e74-111">Два существующих <xref:System.Windows.Input.InputBinding>производных класса, которые можно создать в XAML и могут задавать свойства в XAML, — <xref:System.Windows.Input.KeyBinding> это <xref:System.Windows.Input.MouseBinding>и.</span><span class="sxs-lookup"><span data-stu-id="86e74-111">Two existing <xref:System.Windows.Input.InputBinding>-derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="86e74-112">Типичное свойство в [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] программировании, заданное в XAML и принимающее один <xref:System.Windows.Input.InputBinding> или несколько <xref:System.Windows.UIElement.InputBindings%2A?displayProperty=nameWithType> объектов в качестве значений, является свойством.</span><span class="sxs-lookup"><span data-stu-id="86e74-112">The typical property in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] programming that is set in XAML and takes one or more <xref:System.Windows.Input.InputBinding> objects as values is the <xref:System.Windows.UIElement.InputBindings%2A?displayProperty=nameWithType> property.</span></span>  
  
<a name="xamlObjectElementUsage_InputBinding"></a>   
## <a name="xaml-object-element-usage"></a><span data-ttu-id="86e74-113">Использование элемента объекта XAML</span><span class="sxs-lookup"><span data-stu-id="86e74-113">XAML Object Element Usage</span></span>  
 <span data-ttu-id="86e74-114">\<*Инпутбиндингдериведкласс.../*></span><span class="sxs-lookup"><span data-stu-id="86e74-114">\<*inputBindingDerivedClass…/*></span></span>  
  
<a name="xamlValues_InputBinding"></a>   
## <a name="xaml-values"></a><span data-ttu-id="86e74-115">Значения XAML</span><span class="sxs-lookup"><span data-stu-id="86e74-115">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="86e74-116">Производный класс <xref:System.Windows.Input.InputBinding> , который поддерживает синтаксис элементов объекта, <xref:System.Windows.Input.KeyBinding> например или <xref:System.Windows.Input.MouseBinding>.</span><span class="sxs-lookup"><span data-stu-id="86e74-116">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="86e74-117">См. заметки.</span><span class="sxs-lookup"><span data-stu-id="86e74-117">See Remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86e74-118">В следующем примере показано, как использовать <xref:System.Windows.Input.KeyBinding> для <xref:System.Windows.Input.KeyGesture> привязки <xref:System.Windows.Input.ApplicationCommands.Open%2A> к команде.</span><span class="sxs-lookup"><span data-stu-id="86e74-118">The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.</span></span> <span data-ttu-id="86e74-119">При выполнении жеста клавиши вызывается команда Open.</span><span class="sxs-lookup"><span data-stu-id="86e74-119">When the key gesture is performed, the Open command is invoked.</span></span>  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 <span data-ttu-id="86e74-120">В следующих примерах показано, как привязать пользовательскую <xref:System.Windows.Input.InputBinding> команду к объектам.</span><span class="sxs-lookup"><span data-stu-id="86e74-120">The following examples show how to bind a custom command to <xref:System.Windows.Input.InputBinding> objects.</span></span> <span data-ttu-id="86e74-121">В этих примерах создается приложение, позволяющее пользователю изменить цвет фона, выполнив одно из следующих действий:</span><span class="sxs-lookup"><span data-stu-id="86e74-121">These examples create an application that enables the user to change the background color by performing one of the following actions:</span></span>  
  
-   <span data-ttu-id="86e74-122">Нажатие кнопки.</span><span class="sxs-lookup"><span data-stu-id="86e74-122">Clicking a button.</span></span>  
  
-   <span data-ttu-id="86e74-123">Нажав клавиши CTRL + C.</span><span class="sxs-lookup"><span data-stu-id="86e74-123">Pressing CTRL+C.</span></span>  
  
-   <span data-ttu-id="86e74-124">Щелчок <xref:System.Windows.Controls.StackPanel> правой кнопкой мыши ( <xref:System.Windows.Controls.ListBox>за пределами).</span><span class="sxs-lookup"><span data-stu-id="86e74-124">Right-clicking a <xref:System.Windows.Controls.StackPanel> (outside the <xref:System.Windows.Controls.ListBox>).</span></span>  
  
 <span data-ttu-id="86e74-125">В первом примере создается класс с именем `SimpleDelegateCommand`.</span><span class="sxs-lookup"><span data-stu-id="86e74-125">The first example creates a class named `SimpleDelegateCommand`.</span></span> <span data-ttu-id="86e74-126">Этот класс принимает делегат, чтобы объект, создающий команду, мог определить действие, выполняемое при выполнении команды.</span><span class="sxs-lookup"><span data-stu-id="86e74-126">This class accepts a delegate so that the object creating the command can define the action that occurs when the command executes.</span></span> <span data-ttu-id="86e74-127">`SimpleDelegateCommand`также определяет свойства, указывающие, какой ввод ключа и мыши вызывает команду.</span><span class="sxs-lookup"><span data-stu-id="86e74-127">`SimpleDelegateCommand` also defines properties that specify what key and mouse input invokes the command.</span></span> <span data-ttu-id="86e74-128">`GestureKey`и `GestureModifier` указать ввод с клавиатуры; `MouseGesture` задает входные данные мыши.</span><span class="sxs-lookup"><span data-stu-id="86e74-128">`GestureKey` and `GestureModifier` specify the keyboard input; `MouseGesture` specifies the mouse input.</span></span>  
  
 [!code-csharp[InputCommandBinding#DelegateCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml.cs#delegatecommand)]
 [!code-vb[InputCommandBinding#DelegateCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/inputcommandbinding/visualbasic/mainwindow.xaml.vb#delegatecommand)]  
  
 <span data-ttu-id="86e74-129">В следующем примере создается и инициализируется объект `ColorChangeCommand`, который `SimpleDelegateCommand`является.</span><span class="sxs-lookup"><span data-stu-id="86e74-129">The following example creates and initializes the `ColorChangeCommand`, which is a `SimpleDelegateCommand`.</span></span> <span data-ttu-id="86e74-130">В примере также определяется метод, выполняемый при вызове команды, и задаются `GestureKey`свойства, `GestureModifier`и. `MouseGesture`</span><span class="sxs-lookup"><span data-stu-id="86e74-130">The example also defines the method that executes when the command is invoked and sets the `GestureKey`, `GestureModifier`, and `MouseGesture` properties.</span></span> <span data-ttu-id="86e74-131">Приложение вызовет `InitializeCommand` метод при запуске программы, например в конструкторе <xref:System.Windows.Window>.</span><span class="sxs-lookup"><span data-stu-id="86e74-131">An application would call the `InitializeCommand` method when the program begins, such as in the constructor of a <xref:System.Windows.Window>.</span></span>  
  
 [!code-csharp[InputCommandBinding#InitializeCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml.cs#initializecommand)]
 [!code-vb[InputCommandBinding#InitializeCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/inputcommandbinding/visualbasic/mainwindow.xaml.vb#initializecommand)]  
  
 <span data-ttu-id="86e74-132">Наконец, в следующем примере создается пользовательский интерфейс.</span><span class="sxs-lookup"><span data-stu-id="86e74-132">Finally, the following example creates the user interface.</span></span> <span data-ttu-id="86e74-133">В примере добавляется <xref:System.Windows.Input.KeyBinding> <xref:System.Windows.Input.MouseBinding> и <xref:System.Windows.Controls.StackPanel> в, который содержит <xref:System.Windows.Controls.Button> и <xref:System.Windows.Controls.ListBox>.</span><span class="sxs-lookup"><span data-stu-id="86e74-133">The example adds a <xref:System.Windows.Input.KeyBinding> and a <xref:System.Windows.Input.MouseBinding> to a <xref:System.Windows.Controls.StackPanel> that contains a <xref:System.Windows.Controls.Button> and a <xref:System.Windows.Controls.ListBox>.</span></span> <span data-ttu-id="86e74-134">Когда пользователь выбирает элемент в <xref:System.Windows.Controls.ListBox>, он может изменить цвет фона на выбранный цвет.</span><span class="sxs-lookup"><span data-stu-id="86e74-134">When the user selects an item in the <xref:System.Windows.Controls.ListBox>, he or she can change the color of the background to the selected color.</span></span> <span data-ttu-id="86e74-135">В каждом случае `CommandParameter` свойство привязано к выбранному элементу <xref:System.Windows.Controls.ListBox>в, а `Command` свойство привязано к `ColorChangeCommand`.</span><span class="sxs-lookup"><span data-stu-id="86e74-135">In each case, the `CommandParameter` property is bound to the selected item in the <xref:System.Windows.Controls.ListBox>, and the `Command` property is bound to the `ColorChangeCommand`.</span></span> <span data-ttu-id="86e74-136">Свойства <xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=nameWithType> `SimpleDelegateCommand` , <xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=nameWithType>и привязаныксоответствующимсвойствамкласса<xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=nameWithType> .</span><span class="sxs-lookup"><span data-stu-id="86e74-136">The <xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=nameWithType>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=nameWithType>, and <xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=nameWithType> properties are bound to the corresponding properties on the `SimpleDelegateCommand` class.</span></span>  
  
 [!code-xaml[InputCommandBinding#UI](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml#ui)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.UIElement.InputBindings" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="86e74-137">Инициализирует новый экземпляр класса <see cref="T:System.Windows.Input.InputBinding" />.</span><span class="sxs-lookup"><span data-stu-id="86e74-137">Initializes a new instance of the <see cref="T:System.Windows.Input.InputBinding" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InputBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; InputBinding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="86e74-138">Предоставляет базовую инициализацию для производных от <see cref="T:System.Windows.Input.InputBinding" /> классов.</span><span class="sxs-lookup"><span data-stu-id="86e74-138">Provides base initialization for classes derived from <see cref="T:System.Windows.Input.InputBinding" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86e74-139"><xref:System.Windows.Input.InputBinding>не технически является абстрактным классом, но конструктор без параметров является намеренно защищенным доступом.</span><span class="sxs-lookup"><span data-stu-id="86e74-139"><xref:System.Windows.Input.InputBinding> is not technically an abstract class, but the parameterless constructor is deliberately protected access.</span></span> <span data-ttu-id="86e74-140">Это влияет на создание <xref:System.Windows.Input.InputBinding> "абстрактного" класса для XAML.</span><span class="sxs-lookup"><span data-stu-id="86e74-140">This has the effect of making <xref:System.Windows.Input.InputBinding> an "abstract" class for XAML.</span></span> <span data-ttu-id="86e74-141">Существуют свойства в [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] , которые используют XAML, которые предполагают объекты типа <xref:System.Windows.Input.InputBinding>, <xref:System.Windows.Input.InputBinding> но нельзя указать экземпляр в XAML.</span><span class="sxs-lookup"><span data-stu-id="86e74-141">There are existing properties in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] that have XAML usages that expect objects of type <xref:System.Windows.Input.InputBinding>, but you cannot specify an <xref:System.Windows.Input.InputBinding> instance in XAML.</span></span> <span data-ttu-id="86e74-142">Вместо этого можно указать один из конкретного устройства <xref:System.Windows.Input.InputBinding> производных классов как значения, например <xref:System.Windows.Input.KeyBinding> или <xref:System.Windows.Input.MouseBinding>.</span><span class="sxs-lookup"><span data-stu-id="86e74-142">Instead, you can specify one of the device-specific <xref:System.Windows.Input.InputBinding> derived classes as values, for instance <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="86e74-143">При реализации пользовательского <see cref="T:System.Windows.Input.InputBinding" /> класса, поддерживающего использование XAML, используйте этот конструктор для базовой инициализации.</span><span class="sxs-lookup"><span data-stu-id="86e74-143">If you implement a custom <see cref="T:System.Windows.Input.InputBinding" /> that supports a XAML usage, use this constructor for base initialization.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InputBinding (System.Windows.Input.ICommand command, System.Windows.Input.InputGesture gesture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.InputGesture gesture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, gesture As InputGesture)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InputBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::InputGesture ^ gesture);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.InputBinding : System.Windows.Input.ICommand * System.Windows.Input.InputGesture -&gt; System.Windows.Input.InputBinding" Usage="new System.Windows.Input.InputBinding (command, gesture)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="gesture" Type="System.Windows.Input.InputGesture" />
      </Parameters>
      <Docs>
        <param name="command"><span data-ttu-id="86e74-144">Команда, связываемая с <paramref name="gesture" />.</span><span class="sxs-lookup"><span data-stu-id="86e74-144">The command to associate with <paramref name="gesture" />.</span></span></param>
        <param name="gesture"><span data-ttu-id="86e74-145">Жест ввода, который необходимо связать с <paramref name="command" />.</span><span class="sxs-lookup"><span data-stu-id="86e74-145">The input gesture to associate with <paramref name="command" />.</span></span></param>
        <summary><span data-ttu-id="86e74-146">Инициализирует новый экземпляр класса <see cref="T:System.Windows.Input.InputBinding" /> с указанным именем команды и жестом ввода.</span><span class="sxs-lookup"><span data-stu-id="86e74-146">Initializes a new instance of the <see cref="T:System.Windows.Input.InputBinding" /> class with the specified command and input gesture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86e74-147">Если разработчик программного обеспечения использует существующие классы привязки входных данных, этот конструктор обычно не будет использоваться даже при определении пользовательских команд.</span><span class="sxs-lookup"><span data-stu-id="86e74-147">If you are a software developer using existing input binding classes, you generally will not use this constructor, even if you are defining custom commands.</span></span> <span data-ttu-id="86e74-148">Вместо этого вы будете использовать конструкторы производных классов (<xref:System.Windows.Input.KeyBinding> и <xref:System.Windows.Input.MouseBinding>) или этот конструктор будет использоваться как базовый экземпляр пользовательского класса.</span><span class="sxs-lookup"><span data-stu-id="86e74-148">Instead, you will either use constructors of derived classes (<xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>), or you will use this constructor as the base instantiation of a custom class.</span></span> <span data-ttu-id="86e74-149"><xref:System.Windows.Input.InputBinding> Хотя класс поддерживает различные входные устройства в принципе, на практике необходимо выбрать устройство, которое будет представлять входная привязка.</span><span class="sxs-lookup"><span data-stu-id="86e74-149">Although the <xref:System.Windows.Input.InputBinding> class supports different input devices in principle, in practice you must choose which device the input binding will represent.</span></span> <span data-ttu-id="86e74-150">Во входной привязке можно задать <xref:System.Windows.Input.InputBinding.Gesture%2A> только одно значение, а жесты — зависящие от устройства.</span><span class="sxs-lookup"><span data-stu-id="86e74-150">You only can set only one <xref:System.Windows.Input.InputBinding.Gesture%2A> value on the input binding, and gestures are device-specific.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86e74-151">В следующем примере показано, как использовать этот конструктор для связывания <xref:System.Windows.Input.KeyGesture> <xref:System.Windows.Input.RoutedCommand>с.</span><span class="sxs-lookup"><span data-stu-id="86e74-151">The following example shows how to use this constructor to associate a <xref:System.Windows.Input.KeyGesture> with a <xref:System.Windows.Input.RoutedCommand>.</span></span>  
  
 [!code-csharp[commandlibrarysnippets#InputBindingAddingCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#inputbindingaddingcommand)]
 [!code-vb[commandlibrarysnippets#InputBindingAddingCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#inputbindingaddingcommand)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="86e74-152">Значение параметра <paramref name="command" /> или <paramref name="gesture" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86e74-152"><paramref name="command" /> or <paramref name="gesture" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CloneCore">
      <MemberSignature Language="C#" Value="protected override void CloneCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CloneCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CloneCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="override this.CloneCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.CloneCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable"><span data-ttu-id="86e74-153">Объект, используемый для клонирования.</span><span class="sxs-lookup"><span data-stu-id="86e74-153">The object to clone.</span></span></param>
        <summary><span data-ttu-id="86e74-154">Копирует базовые (не анимационные) значения свойств заданного объекта.</span><span class="sxs-lookup"><span data-stu-id="86e74-154">Copies the base (non-animated) values of the properties of the specified object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneCurrentValueCore">
      <MemberSignature Language="C#" Value="protected override void CloneCurrentValueCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCurrentValueCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CloneCurrentValueCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CloneCurrentValueCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="override this.CloneCurrentValueCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.CloneCurrentValueCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable"><span data-ttu-id="86e74-155">Объект, используемый для клонирования.</span><span class="sxs-lookup"><span data-stu-id="86e74-155">The object to clone.</span></span></param>
        <summary><span data-ttu-id="86e74-156">Копирует текущие значения свойств заданного объекта.</span><span class="sxs-lookup"><span data-stu-id="86e74-156">Copies the current values of the properties of the specified object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.Command" />
      <MemberSignature Language="VB.NET" Value="Public Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); void set(System::Windows::Input::ICommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand with get, set" Usage="System.Windows.Input.InputBinding.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86e74-157">Возвращает или задает объект <see cref="T:System.Windows.Input.ICommand" />, связанный с этой входной привязкой.</span><span class="sxs-lookup"><span data-stu-id="86e74-157">Gets or sets the <see cref="T:System.Windows.Input.ICommand" /> associated with this input binding.</span></span></summary>
        <value><span data-ttu-id="86e74-158">Связанная команда.</span><span class="sxs-lookup"><span data-stu-id="86e74-158">The associated command.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86e74-159"><xref:System.Windows.Input.InputBinding> Класс не поддерживает использование XAML, поскольку он не предоставляет открытый конструктор без параметров (он имеет конструктор без параметров, но он защищен).</span><span class="sxs-lookup"><span data-stu-id="86e74-159">The <xref:System.Windows.Input.InputBinding> class does not support XAML usage because it does not expose a public parameterless constructor (it has a parameterless constructor, but it is protected).</span></span> <span data-ttu-id="86e74-160">Однако производные классы могут предоставлять открытый конструктор, поэтому могут использовать свойства, унаследованные от <xref:System.Windows.Input.InputBinding>.</span><span class="sxs-lookup"><span data-stu-id="86e74-160">However, derived classes can expose a public constructor and therefore, can use properties that are inherited from <xref:System.Windows.Input.InputBinding>.</span></span> <span data-ttu-id="86e74-161">Два существующих <xref:System.Windows.Input.InputBinding> производных класса, которые могут быть созданы в XAML, и могут устанавливать свойства с использованием XAML <xref:System.Windows.Input.KeyBinding> — <xref:System.Windows.Input.MouseBinding>и.</span><span class="sxs-lookup"><span data-stu-id="86e74-161">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties with XAML usages are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
 <span data-ttu-id="86e74-162"><xref:System.Windows.Input.ICommand>ссылается на преобразователь типов, который позволяет некоторым <xref:System.Windows.Input.ICommand> существовавшим ранее реализациям указывать значения в виде строки.</span><span class="sxs-lookup"><span data-stu-id="86e74-162"><xref:System.Windows.Input.ICommand> references a type converter that enables certain preexisting <xref:System.Windows.Input.ICommand> implementations to specify values in the form of a string.</span></span> <span data-ttu-id="86e74-163">Это поведение преобразования типа задает форму значения атрибута для этого свойства.</span><span class="sxs-lookup"><span data-stu-id="86e74-163">This type conversion behavior sets the attribute value form of this property.</span></span> <span data-ttu-id="86e74-164">Можно также привязать <xref:System.Windows.Input.InputBinding.Command%2A>свойства, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>и <xref:System.Windows.Input.InputBinding.CommandTarget%2A> к <xref:System.Windows.Input.ICommand> , которые определены для объекта.</span><span class="sxs-lookup"><span data-stu-id="86e74-164">You can also bind the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object.</span></span> <span data-ttu-id="86e74-165">Это позволяет определить пользовательскую команду и связать ее с введенными пользователем данными.</span><span class="sxs-lookup"><span data-stu-id="86e74-165">This enables you to define a custom command and associate it with user input.</span></span> <span data-ttu-id="86e74-166">Дополнительные сведения см. во втором примере в <xref:System.Windows.Input.InputBinding>разделе.</span><span class="sxs-lookup"><span data-stu-id="86e74-166">For more information, see the second example in <xref:System.Windows.Input.InputBinding>.</span></span>  
  
<a name="xamlAttributeUsage_Command"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="86e74-167">Использование атрибута XAML</span><span class="sxs-lookup"><span data-stu-id="86e74-167">XAML Attribute Usage</span></span>  
 <span data-ttu-id="86e74-168"><`inputBindingDerivedClass` `Command`="<xref:System.Windows.Input.ICommand>"/></span><span class="sxs-lookup"><span data-stu-id="86e74-168"><`inputBindingDerivedClass` `Command`="<xref:System.Windows.Input.ICommand>"/></span></span>  
  
<a name="xamlPropertyElementUsage_Command"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="86e74-169">Использование элемента свойства XAML</span><span class="sxs-lookup"><span data-stu-id="86e74-169">XAML Property Element Usage</span></span>  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.Command>  
    <iCommandImplementation/>  
  </inputBindingDerivedClass.Command>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_Command"></a>   
## <a name="xaml-values"></a><span data-ttu-id="86e74-170">Значения XAML</span><span class="sxs-lookup"><span data-stu-id="86e74-170">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="86e74-171">Производный класс <xref:System.Windows.Input.InputBinding> , который поддерживает синтаксис элементов объекта, <xref:System.Windows.Input.KeyBinding> например или <xref:System.Windows.Input.MouseBinding>.</span><span class="sxs-lookup"><span data-stu-id="86e74-171">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="86e74-172">См. заметки.</span><span class="sxs-lookup"><span data-stu-id="86e74-172">See Remarks.</span></span>  
  
 `iCommandImplementation`  
 <span data-ttu-id="86e74-173">Реализация <xref:System.Windows.Input.ICommand> объекта, поддерживающая синтаксис элемента объекта (имеет открытый конструктор без параметров).</span><span class="sxs-lookup"><span data-stu-id="86e74-173">An object implementation of <xref:System.Windows.Input.ICommand> that supports object element syntax (has a public parameterless constructor).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86e74-174">В следующем примере показано, как использовать <xref:System.Windows.Input.KeyBinding> для <xref:System.Windows.Input.KeyGesture> привязки <xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=nameWithType> к команде.</span><span class="sxs-lookup"><span data-stu-id="86e74-174">The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to the <xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=nameWithType> command.</span></span> <span data-ttu-id="86e74-175">При выполнении жеста клавиши вызывается команда Open.</span><span class="sxs-lookup"><span data-stu-id="86e74-175">When the key gesture is performed, the Open command is invoked.</span></span>  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewkeybinding)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewkeybinding)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="86e74-176">Значение <see cref="P:System.Windows.Input.InputBinding.Command" /> равно <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86e74-176">The <see cref="P:System.Windows.Input.InputBinding.Command" /> value is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
      </Docs>
    </Member>
    <Member MemberName="CommandParameter">
      <MemberSignature Language="C#" Value="public object CommandParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CommandParameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.CommandParameter" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandParameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CommandParameter { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandParameter : obj with get, set" Usage="System.Windows.Input.InputBinding.CommandParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86e74-177">Получает или задает специфические для команды данные для конкретной команды.</span><span class="sxs-lookup"><span data-stu-id="86e74-177">Gets or sets the command-specific data for a particular command.</span></span></summary>
        <value><span data-ttu-id="86e74-178">Связанные с командой данные.</span><span class="sxs-lookup"><span data-stu-id="86e74-178">The command-specific data.</span></span> <span data-ttu-id="86e74-179">Значение по умолчанию — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86e74-179">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86e74-180"><xref:System.Windows.Input.InputBinding.CommandParameter%2A> Свойство используется для передачи определенной информации команде при ее выполнении.</span><span class="sxs-lookup"><span data-stu-id="86e74-180">The <xref:System.Windows.Input.InputBinding.CommandParameter%2A> property is used to pass specific information to the command when it is executed.</span></span> <span data-ttu-id="86e74-181">Тип данных определяется командой.</span><span class="sxs-lookup"><span data-stu-id="86e74-181">The type of the data is defined by the command.</span></span> <span data-ttu-id="86e74-182">Многие команды не предполагают параметров команды; для этих команд переданные параметры команды будут игнорироваться.</span><span class="sxs-lookup"><span data-stu-id="86e74-182">Many commands do not expect command parameters; for these commands, any command parameters passed will be ignored.</span></span>  
  
 <span data-ttu-id="86e74-183">Если команда, с которой связана входная привязка, имеет значение <xref:System.Windows.Input.RoutedCommand>, то <xref:System.Windows.Input.InputBinding.CommandParameter%2A> входная <xref:System.Windows.Input.RoutedCommand> привязка передается обработчикам через <xref:System.Windows.Input.ExecutedRoutedEventArgs> и <xref:System.Windows.Input.CanExecuteRoutedEventArgs> данные события при обработке команды.</span><span class="sxs-lookup"><span data-stu-id="86e74-183">If the command that an input binding is associated with is a <xref:System.Windows.Input.RoutedCommand>, the <xref:System.Windows.Input.InputBinding.CommandParameter%2A> of the input binding is passed to the <xref:System.Windows.Input.RoutedCommand> handlers through the <xref:System.Windows.Input.ExecutedRoutedEventArgs> and the <xref:System.Windows.Input.CanExecuteRoutedEventArgs> event data when the command is processed.</span></span>  
  
 <span data-ttu-id="86e74-184">Тип данных и назначение параметра команды определяются по-разному для каждой команды и могут иметь `null`значение.</span><span class="sxs-lookup"><span data-stu-id="86e74-184">The data type and purpose of the command parameter are defined differently for each command and can be `null`.</span></span> <span data-ttu-id="86e74-185">Свойства <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>и <xref:System.Windows.Input.ICommand> можно привязать к объекту, определенному для объекта. <xref:System.Windows.Input.InputBinding.CommandTarget%2A></span><span class="sxs-lookup"><span data-stu-id="86e74-185">You can bind the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object.</span></span> <span data-ttu-id="86e74-186">Это позволяет определить пользовательскую команду и связать ее с введенными пользователем данными.</span><span class="sxs-lookup"><span data-stu-id="86e74-186">This enables you to define a custom command and associate it with user input.</span></span> <span data-ttu-id="86e74-187">Дополнительные сведения см. во втором примере в <xref:System.Windows.Input.InputBinding>разделе.</span><span class="sxs-lookup"><span data-stu-id="86e74-187">For more information, see the second example in <xref:System.Windows.Input.InputBinding>.</span></span>  
  
 <span data-ttu-id="86e74-188"><xref:System.Windows.Input.InputBinding> Класс не поддерживает использование XAML, поскольку он не предоставляет открытый конструктор без параметров (он имеет конструктор без параметров, но он защищен).</span><span class="sxs-lookup"><span data-stu-id="86e74-188">The <xref:System.Windows.Input.InputBinding> class does not support XAML usage because it does not expose a public parameterless constructor (it has a parameterless constructor, but it is protected).</span></span> <span data-ttu-id="86e74-189">Однако производные классы могут предоставлять открытый конструктор, поэтому могут устанавливать свойства, унаследованные от <xref:System.Windows.Input.InputBinding> использования XAML.</span><span class="sxs-lookup"><span data-stu-id="86e74-189">However, derived classes can expose a public constructor and therefore, can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with XAML usage.</span></span> <span data-ttu-id="86e74-190">Два существующих <xref:System.Windows.Input.InputBinding> производных класса, которые могут быть созданы в XAML, и могут задавать свойства в <xref:System.Windows.Input.KeyBinding> XAML <xref:System.Windows.Input.MouseBinding>— и.</span><span class="sxs-lookup"><span data-stu-id="86e74-190">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
<a name="xamlAttributeUsage_CommandParameter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="86e74-191">Использование атрибута XAML</span><span class="sxs-lookup"><span data-stu-id="86e74-191">XAML Attribute Usage</span></span>  
  
```  
<inputBindingDerivedClass CommandParameter="commandParameterString"/>  
```  
  
<a name="xamlPropertyElementUsage_CommandParameter"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="86e74-192">Использование элемента свойства XAML</span><span class="sxs-lookup"><span data-stu-id="86e74-192">XAML Property Element Usage</span></span>  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.CommandParameter>  
    <commandParameterObject/>  
  </inputBindingDerivedClass.CommandParameter>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_CommandParameter"></a>   
## <a name="xaml-values"></a><span data-ttu-id="86e74-193">Значения XAML</span><span class="sxs-lookup"><span data-stu-id="86e74-193">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="86e74-194">Производный класс <xref:System.Windows.Input.InputBinding> , который поддерживает синтаксис элементов объекта, <xref:System.Windows.Input.KeyBinding> например или <xref:System.Windows.Input.MouseBinding>.</span><span class="sxs-lookup"><span data-stu-id="86e74-194">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="86e74-195">См. заметки.</span><span class="sxs-lookup"><span data-stu-id="86e74-195">See Remarks.</span></span>  
  
 `commandParameterString`  
 <span data-ttu-id="86e74-196">Строка, обрабатываемая определенной командой.</span><span class="sxs-lookup"><span data-stu-id="86e74-196">A string that is processed by a particular command.</span></span> <span data-ttu-id="86e74-197">Строки — это общий тип, используемый для параметров команды, так как их можно легко задать в XAML.</span><span class="sxs-lookup"><span data-stu-id="86e74-197">Strings are the common type used for command parameters because they can be easily set in XAML.</span></span> <span data-ttu-id="86e74-198">Ожидаемый формат строки и его назначение см. в документации по определенной команде, с которой связана входная привязка.</span><span class="sxs-lookup"><span data-stu-id="86e74-198">For the expected string format and its purpose, see the documentation for the particular command that the input binding is associated with.</span></span> <span data-ttu-id="86e74-199">Многие команды не предполагают параметров.</span><span class="sxs-lookup"><span data-stu-id="86e74-199">Many commands do not expect parameters.</span></span>  
  
 `commandParameterObject`  
 <span data-ttu-id="86e74-200">Объект, обрабатываемый определенной командой.</span><span class="sxs-lookup"><span data-stu-id="86e74-200">An object that is processed by a particular command.</span></span> <span data-ttu-id="86e74-201">Все существующие [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] команды используют строки.</span><span class="sxs-lookup"><span data-stu-id="86e74-201">All existing [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] commands use strings.</span></span> <span data-ttu-id="86e74-202">Поэтому этот синтаксис элемента свойства относится только к сценариям пользовательской команды.</span><span class="sxs-lookup"><span data-stu-id="86e74-202">Therefore, this property element syntax is only relevant for custom command scenarios.</span></span> <span data-ttu-id="86e74-203">Для поддержки этого синтаксиса `commandParameterObject` объект должен также поддерживать синтаксис элемента объекта (должен иметь открытый конструктор без параметров).</span><span class="sxs-lookup"><span data-stu-id="86e74-203">In order to support this syntax, the `commandParameterObject` object must also support object element syntax (must have a public parameterless constructor).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandParameterProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandParameterProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandParameterProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandParameterProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandParameterProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandParameterProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandParameterProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.InputBinding.CommandParameterProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86e74-204">Идентифицирует свойство зависимостей <see cref="P:System.Windows.Input.InputBinding.CommandParameter" />.</span><span class="sxs-lookup"><span data-stu-id="86e74-204">Identifies the <see cref="P:System.Windows.Input.InputBinding.CommandParameter" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.InputBinding.CommandProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86e74-205">Идентифицирует свойство зависимостей <see cref="P:System.Windows.Input.InputBinding.Command" />.</span><span class="sxs-lookup"><span data-stu-id="86e74-205">Identifies the <see cref="P:System.Windows.Input.InputBinding.Command" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTarget">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement CommandTarget { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement CommandTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.CommandTarget" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandTarget As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ CommandTarget { System::Windows::IInputElement ^ get(); void set(System::Windows::IInputElement ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandTarget : System.Windows.IInputElement with get, set" Usage="System.Windows.Input.InputBinding.CommandTarget" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86e74-206">Получает или задает для команды целевой элемент.</span><span class="sxs-lookup"><span data-stu-id="86e74-206">Gets or sets the target element of the command.</span></span></summary>
        <value><span data-ttu-id="86e74-207">Целевой объект команды.</span><span class="sxs-lookup"><span data-stu-id="86e74-207">The target of the command.</span></span> <span data-ttu-id="86e74-208">Значение по умолчанию — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86e74-208">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86e74-209">В системе команд <xref:System.Windows.Input.InputBinding.CommandTarget%2A> Windows Presentation Foundation свойство <xref:System.Windows.Input.ICommandSource> объекта применяется, <xref:System.Windows.Input.RoutedCommand>только если <xref:System.Windows.Input.ICommand> имеет значение.</span><span class="sxs-lookup"><span data-stu-id="86e74-209">In the Windows Presentation Foundation commanding system, the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property on an <xref:System.Windows.Input.ICommandSource> object is applicable only when the <xref:System.Windows.Input.ICommand> is a <xref:System.Windows.Input.RoutedCommand>.</span></span> <span data-ttu-id="86e74-210">Если для <xref:System.Windows.Input.ICommandSource> задано значение <xref:System.Windows.Input.InputBinding.CommandTarget%2A>, и соответствующая команда — не <xref:System.Windows.Input.RoutedCommand>, целевой объект команды не учитывается.</span><span class="sxs-lookup"><span data-stu-id="86e74-210">If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> is set on an <xref:System.Windows.Input.ICommandSource> and the corresponding command is not a <xref:System.Windows.Input.RoutedCommand>, the command target is ignored.</span></span>  
  
 <span data-ttu-id="86e74-211">При использовании с <xref:System.Windows.Input.RoutedCommand>объектом целевой объект команды — это объект, для <xref:System.Windows.Input.CommandManager.Executed> которого вызываются <xref:System.Windows.Input.CommandManager.CanExecute> события и.</span><span class="sxs-lookup"><span data-stu-id="86e74-211">When used with a <xref:System.Windows.Input.RoutedCommand>, the command target is the object on which the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised.</span></span> <span data-ttu-id="86e74-212"><xref:System.Windows.Input.InputBinding.CommandTarget%2A> Если свойство не задано, то в качестве целевого объекта используется элемент с фокусом клавиатуры.</span><span class="sxs-lookup"><span data-stu-id="86e74-212">If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property is not set, the element with keyboard focus is used as the target.</span></span>  
  
 <span data-ttu-id="86e74-213">Сам <xref:System.Windows.Input.InputBinding> класс не поддерживает использование XAML, поскольку он не предоставляет открытый конструктор без параметров (есть конструктор без параметров, но он защищен).</span><span class="sxs-lookup"><span data-stu-id="86e74-213">The <xref:System.Windows.Input.InputBinding> class itself does not support XAML usage, because it does not expose a public parameterless constructor (there is a parameterless constructor, but it is protected).</span></span> <span data-ttu-id="86e74-214">Однако производные классы могут предоставлять открытый конструктор, поэтому могут устанавливать свойства, унаследованные от <xref:System.Windows.Input.InputBinding> , с использованием XAML.</span><span class="sxs-lookup"><span data-stu-id="86e74-214">However, derived classes can expose a public constructor and therefore can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a XAML usage.</span></span> <span data-ttu-id="86e74-215">Два существующих <xref:System.Windows.Input.InputBinding> производных класса, которые могут быть созданы в XAML, и могут задавать свойства в <xref:System.Windows.Input.KeyBinding> XAML <xref:System.Windows.Input.MouseBinding>— и.</span><span class="sxs-lookup"><span data-stu-id="86e74-215">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
<a name="xamlAttributeUsage_CommandTarget"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="86e74-216">Использование атрибута XAML</span><span class="sxs-lookup"><span data-stu-id="86e74-216">XAML Attribute Usage</span></span>  
  
```  
<inputBindingDerivedClass CommandTarget="bindingToTarget"/>  
```  
  
<a name="xamlValues_CommandTarget"></a>   
## <a name="xaml-values"></a><span data-ttu-id="86e74-217">Значения XAML</span><span class="sxs-lookup"><span data-stu-id="86e74-217">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="86e74-218">Производный класс <xref:System.Windows.Input.InputBinding> , который поддерживает синтаксис элементов объекта, <xref:System.Windows.Input.KeyBinding> например или <xref:System.Windows.Input.MouseBinding>.</span><span class="sxs-lookup"><span data-stu-id="86e74-218">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="86e74-219">См. заметки.</span><span class="sxs-lookup"><span data-stu-id="86e74-219">See Remarks.</span></span>  
  
 `bindingToTarget`  
 <span data-ttu-id="86e74-220">Строка, использующая тип синтаксиса привязки, который может возвращать ссылку на объект в существующем именованном элементе.</span><span class="sxs-lookup"><span data-stu-id="86e74-220">A string that uses a type of binding syntax that can return an object reference to an existing named element.</span></span> <span data-ttu-id="86e74-221">См. заметки.</span><span class="sxs-lookup"><span data-stu-id="86e74-221">See Remarks.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandTargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandTargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandTargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandTargetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandTargetProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandTargetProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.InputBinding.CommandTargetProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86e74-222">Идентифицирует свойство зависимостей <see cref="P:System.Windows.Input.InputBinding.CommandTarget" />.</span><span class="sxs-lookup"><span data-stu-id="86e74-222">Identifies the <see cref="P:System.Windows.Input.InputBinding.CommandTarget" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberSignature Language="F#" Value="override this.CreateInstanceCore : unit -&gt; System.Windows.Freezable" Usage="inputBinding.CreateInstanceCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="86e74-223">Создает экземпляр класса <see cref="T:System.Windows.Input.InputBinding" />.</span><span class="sxs-lookup"><span data-stu-id="86e74-223">Creates an instance of an <see cref="T:System.Windows.Input.InputBinding" />.</span></span></summary>
        <returns><span data-ttu-id="86e74-224">Новый объект.</span><span class="sxs-lookup"><span data-stu-id="86e74-224">The new object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gesture">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Input.InputGesture Gesture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGesture Gesture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.Gesture" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Gesture As InputGesture" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Input::InputGesture ^ Gesture { System::Windows::Input::InputGesture ^ get(); void set(System::Windows::Input::InputGesture ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Gesture : System.Windows.Input.InputGesture with get, set" Usage="System.Windows.Input.InputBinding.Gesture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGesture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86e74-225">Возвращает или задает объект <see cref="T:System.Windows.Input.InputGesture" />, связанный с этой входной привязкой.</span><span class="sxs-lookup"><span data-stu-id="86e74-225">Gets or sets the <see cref="T:System.Windows.Input.InputGesture" /> associated with this input binding.</span></span></summary>
        <value><span data-ttu-id="86e74-226">Связанный жест.</span><span class="sxs-lookup"><span data-stu-id="86e74-226">The associated gesture.</span></span> <span data-ttu-id="86e74-227">Значение по умолчанию — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86e74-227">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86e74-228">Жест ввода — это действие, вызывающее команду.</span><span class="sxs-lookup"><span data-stu-id="86e74-228">The input gesture is the action that invokes the command.</span></span> <span data-ttu-id="86e74-229">Примерами входных жестов в [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] являются <xref:System.Windows.Input.KeyGesture> и <xref:System.Windows.Input.MouseGesture>.</span><span class="sxs-lookup"><span data-stu-id="86e74-229">Examples of input gestures in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] are <xref:System.Windows.Input.KeyGesture> and <xref:System.Windows.Input.MouseGesture>.</span></span> <span data-ttu-id="86e74-230">— Это сочетание a <xref:System.Windows.Input.Key> и набора <xref:System.Windows.Input.ModifierKeys>. <xref:System.Windows.Input.KeyGesture></span><span class="sxs-lookup"><span data-stu-id="86e74-230">A <xref:System.Windows.Input.KeyGesture> is a combination of a <xref:System.Windows.Input.Key> and a set of <xref:System.Windows.Input.ModifierKeys>.</span></span> <span data-ttu-id="86e74-231">— Это сочетание a <xref:System.Windows.Input.MouseAction> и набора <xref:System.Windows.Input.ModifierKeys>. <xref:System.Windows.Input.MouseGesture></span><span class="sxs-lookup"><span data-stu-id="86e74-231">A <xref:System.Windows.Input.MouseGesture> is a combination of a <xref:System.Windows.Input.MouseAction> and a set of <xref:System.Windows.Input.ModifierKeys>.</span></span>  
  
 <span data-ttu-id="86e74-232">Сам <xref:System.Windows.Input.InputBinding> класс не поддерживает использование XAML, поскольку он не предоставляет открытый конструктор без параметров (есть конструктор без параметров, но он защищен).</span><span class="sxs-lookup"><span data-stu-id="86e74-232">The <xref:System.Windows.Input.InputBinding> class itself does not support XAML usage, because it does not expose a public parameterless constructor (there is a parameterless constructor, but it is protected).</span></span> <span data-ttu-id="86e74-233">Однако производные классы могут предоставлять открытый конструктор и, таким же, устанавливать свойства, унаследованные <xref:System.Windows.Input.InputBinding> от, с использованием XAML.</span><span class="sxs-lookup"><span data-stu-id="86e74-233">However, derived classes can expose a public constructor and thus can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a XAML usage.</span></span> <span data-ttu-id="86e74-234">Два существующих <xref:System.Windows.Input.InputBinding> производных класса, которые могут быть созданы в XAML, и могут задавать свойства в <xref:System.Windows.Input.KeyBinding> XAML <xref:System.Windows.Input.MouseBinding>— и.</span><span class="sxs-lookup"><span data-stu-id="86e74-234">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
<a name="xamlAttributeUsage_gesture"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="86e74-235">Использование атрибута XAML</span><span class="sxs-lookup"><span data-stu-id="86e74-235">XAML Attribute Usage</span></span>  
 <span data-ttu-id="86e74-236"><<xref:System.Windows.Input.KeyBinding> `Gesture`="<xref:System.Windows.Input.KeyGesture>"/></span><span class="sxs-lookup"><span data-stu-id="86e74-236"><<xref:System.Windows.Input.KeyBinding> `Gesture`="<xref:System.Windows.Input.KeyGesture>"/></span></span>  
  
<span data-ttu-id="86e74-237">- или -</span><span class="sxs-lookup"><span data-stu-id="86e74-237">-or-</span></span>
  
 <span data-ttu-id="86e74-238"><<xref:System.Windows.Input.MouseBinding> `Gesture`="<xref:System.Windows.Input.MouseGesture>"/></span><span class="sxs-lookup"><span data-stu-id="86e74-238"><<xref:System.Windows.Input.MouseBinding> `Gesture`="<xref:System.Windows.Input.MouseGesture>"/></span></span>  
  
<span data-ttu-id="86e74-239">-или-</span><span class="sxs-lookup"><span data-stu-id="86e74-239">-or-</span></span>
  
 <span data-ttu-id="86e74-240"><`inputBindingDerivedClass` `Gesture`="<xref:System.Windows.Input.InputGesture>"/></span><span class="sxs-lookup"><span data-stu-id="86e74-240"><`inputBindingDerivedClass` `Gesture`="<xref:System.Windows.Input.InputGesture>"/></span></span>  
  
<a name="xamlPropertyElementUsage_gesture"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="86e74-241">Использование элемента свойства XAML</span><span class="sxs-lookup"><span data-stu-id="86e74-241">XAML Property Element Usage</span></span>  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.Gesture>  
    <inputGestureImplementation/>  
  </inputBindingDerivedClass.Gesture>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_gesture"></a>   
## <a name="xaml-values"></a><span data-ttu-id="86e74-242">Значения XAML</span><span class="sxs-lookup"><span data-stu-id="86e74-242">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="86e74-243">Производный класс <xref:System.Windows.Input.InputBinding> , который поддерживает синтаксис элементов объекта, <xref:System.Windows.Input.KeyBinding> например или <xref:System.Windows.Input.MouseBinding>.</span><span class="sxs-lookup"><span data-stu-id="86e74-243">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="86e74-244">См. заметки.</span><span class="sxs-lookup"><span data-stu-id="86e74-244">See Remarks.</span></span>  
  
 `inputGestureImplementation`  
 <span data-ttu-id="86e74-245">Пользовательский производный класс <xref:System.Windows.Input.InputGesture> , поддерживающий синтаксис элемента объекта.</span><span class="sxs-lookup"><span data-stu-id="86e74-245">A custom derived class of <xref:System.Windows.Input.InputGesture> that supports object element syntax.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86e74-246">В следующем примере показано, как использовать <xref:System.Windows.Input.KeyBinding> для <xref:System.Windows.Input.KeyGesture> привязки <xref:System.Windows.Input.RoutedCommand>к.</span><span class="sxs-lookup"><span data-stu-id="86e74-246">The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to a <xref:System.Windows.Input.RoutedCommand>.</span></span> <span data-ttu-id="86e74-247">При нажатии <xref:System.Windows.Input.ApplicationCommands.Close%2A> клавиши ALT + L вызывается команда. <xref:System.Windows.Input.KeyGesture></span><span class="sxs-lookup"><span data-stu-id="86e74-247">When the <xref:System.Windows.Input.KeyGesture> ALT+L is pressed, the <xref:System.Windows.Input.ApplicationCommands.Close%2A> command is invoked.</span></span>  
  
 [!code-xaml[commandlibrarysnippets#KeyBindingWithKeyAndModifiersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml#keybindingwithkeyandmodifiersxaml)]  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
      </Docs>
    </Member>
    <Member MemberName="GetAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub GetAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="override this.GetAsFrozenCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.GetAsFrozenCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable"><span data-ttu-id="86e74-248">Объект, используемый для клонирования.</span><span class="sxs-lookup"><span data-stu-id="86e74-248">The object to clone.</span></span></param>
        <summary><span data-ttu-id="86e74-249">Создает экземпляр замороженной копии заданного объекта <see cref="T:System.Windows.Freezable" />, используя базовые (не анимационные) значения свойства.</span><span class="sxs-lookup"><span data-stu-id="86e74-249">Makes the instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" /> by using base (non-animated) property values.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentValueAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetCurrentValueAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetCurrentValueAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub GetCurrentValueAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetCurrentValueAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="override this.GetCurrentValueAsFrozenCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.GetCurrentValueAsFrozenCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable"><span data-ttu-id="86e74-250">Объект, используемый для клонирования.</span><span class="sxs-lookup"><span data-stu-id="86e74-250">The object to clone.</span></span></param>
        <summary><span data-ttu-id="86e74-251">Создает текущий экземпляр замороженной копии указанного объекта <see cref="T:System.Windows.Freezable" />.</span><span class="sxs-lookup"><span data-stu-id="86e74-251">Makes the current instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" />.</span></span> <span data-ttu-id="86e74-252">Если объект имеет анимированные свойства зависимостей, копируются их текущие анимированные значения.</span><span class="sxs-lookup"><span data-stu-id="86e74-252">If the object has animated dependency properties, their current animated values are copied.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>