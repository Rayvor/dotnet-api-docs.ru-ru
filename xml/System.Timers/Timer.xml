<Type Name="Timer" FullName="System.Timers.Timer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d712aa2927ec427952c14090738e1743f02a3e6d" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75158469" /></Metadata><TypeSignature Language="C#" Value="public class Timer : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends System.ComponentModel.Component implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.Timers.Timer" />
  <TypeSignature Language="VB.NET" Value="Public Class Timer&#xA;Inherits Component&#xA;Implements ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer : System::ComponentModel::Component, System::ComponentModel::ISupportInitialize" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit Component&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-3.0;netstandard-2.1;netcore-3.1">
      <AttributeName>System.ComponentModel.DefaultEvent("Elapsed")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-3.0;netstandard-2.1;netcore-3.1">
      <AttributeName>System.ComponentModel.DefaultProperty("Interval")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Создает событие после заданного интервала с возможностью создания повторяющихся событий.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Компонент <xref:System.Timers.Timer> является таймером на основе сервера, который вызывает событие <xref:System.Timers.Timer.Elapsed> в приложении после истечения времени ожидания в свойстве <xref:System.Timers.Timer.Interval%2A>. Можно настроить объект <xref:System.Timers.Timer> для вызова события только один раз или многократно с помощью свойства <xref:System.Timers.Timer.AutoReset%2A>. Как правило, объект <xref:System.Timers.Timer> объявляется на уровне класса, чтобы он оставался в области, пока он необходим. Затем можно обработать событие <xref:System.Timers.Timer.Elapsed>, чтобы обеспечить нормальную обработку. Например, предположим, что имеется важный сервер, который должен храниться 24 часа в день, 7 дней в неделю. Можно создать службу, которая использует объект <xref:System.Timers.Timer> для периодической проверки сервера и обеспечения работоспособности системы. Если система не отвечает, служба может попытаться перезапустить сервер или уведомить администратора.  
  
> [!IMPORTANT]
> Класс <xref:System.Timers.Timer> недоступен для всех реализаций и версий .NET, например .NET Standard 1,6 и более ранних версий.
> В этих случаях вместо этого можно использовать класс <xref:System.Threading.Timer?displayProperty=nameWithType>.
  
 Этот тип реализует интерфейс <xref:System.IDisposable>. По окончании использования выдаленную ему память следует прямо или косвенно освободить. Чтобы сделать это прямо, вызовите его метод <xref:System.IDisposable.Dispose%2A> в блоке `try`/`catch`. Чтобы сделать это косвенно, используйте языковые конструкции, такие как `using` (в C#) или `Using` (в Visual Basic). Дополнительные сведения см. в разделе "Использование объекта, реализующего IDisposable" в статье об интерфейсе <xref:System.IDisposable>.  
  
 Класс <xref:System.Timers.Timer?displayProperty=nameWithType> на основе сервера предназначен для использования с рабочими потоками в многопоточной среде. Серверные таймеры могут перемещаться между потоками, чтобы справиться с событием <xref:System.Timers.Timer.Elapsed>, что приводит к большей точности, чем таймеры Windows при возникновении события вовремя.  
  
 Компонент <xref:System.Timers.Timer?displayProperty=nameWithType> вызывает событие <xref:System.Timers.Timer.Elapsed> в зависимости от значения (в миллисекундах) свойства <xref:System.Timers.Timer.Interval%2A>. Это событие можно обработать для выполнения необходимой обработки. Например, предположим, что у вас есть интерактивное приложение для продаж, которое постоянно отправляет заказы на продажу в базу данных. Служба, которая компилирует инструкции для доставки, работает с пакетом заказов, вместо того чтобы обрабатывать каждый заказ по отдельности. Можно использовать <xref:System.Timers.Timer> для запуска пакетной обработки каждые 30 минут.  
  
> [!IMPORTANT]
>  Класс System. Timers. Timer имеет то же разрешение, что и системные часы. Это означает, что событие <xref:System.Timers.Timer.Elapsed> будет срабатывать через интервал, определенный разрешением системных часов, если свойство <xref:System.Timers.Timer.Interval%2A> меньше, чем разрешение системных часов. Дополнительные сведения см. в описании свойства <xref:System.Timers.Timer.Interval%2A>.  
  
 Если <xref:System.Timers.Timer.AutoReset%2A> имеет значение `false`, то <xref:System.Timers.Timer?displayProperty=nameWithType> объект вызывает событие <xref:System.Timers.Timer.Elapsed> только один раз, после истечения первого <xref:System.Timers.Timer.Interval%2A>. Чтобы регулярно вызывать событие <xref:System.Timers.Timer.Elapsed> с интервалом, определенным в <xref:System.Timers.Timer.Interval%2A>, задайте для <xref:System.Timers.Timer.AutoReset%2A> значение `true`, которое является значением по умолчанию.  
  
 Компонент <xref:System.Timers.Timer> перехватывает и подавляет все исключения, вызываемые обработчиками событий для события <xref:System.Timers.Timer.Elapsed>. Это поведение может быть изменено в будущих выпусках .NET Framework. Однако обратите внимание, что это не относится к обработчикам событий, которые выполняются асинхронно и включают оператор `await` ( C#в) или оператор `Await` (в Visual Basic). Исключения, возникающие в этих обработчиках событий, передаются обратно в вызывающий поток, как показано в следующем примере. Дополнительные сведения об исключениях, возникающих в асинхронных методах, см. в разделе [обработка исключений](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 Если свойство <xref:System.Timers.Timer.SynchronizingObject%2A> `null`, то в <xref:System.Threading.ThreadPool> потоке возникает событие <xref:System.Timers.Timer.Elapsed>. Если обработка события <xref:System.Timers.Timer.Elapsed> длится дольше, чем <xref:System.Timers.Timer.Interval%2A>, событие может возникать снова в другом <xref:System.Threading.ThreadPool>ом потоке. В этом случае обработчик событий должен быть повторным.  
  
> [!NOTE]
>  Метод обработки событий может выполняться в одном потоке в то же время, когда другой поток вызывает метод <xref:System.Timers.Timer.Stop%2A> или задает для свойства <xref:System.Timers.Timer.Enabled%2A> значение `false`. Это может привести к возникновению <xref:System.Timers.Timer.Elapsed> события после остановки таймера. В примере кода для метода <xref:System.Timers.Timer.Stop%2A> показан один из способов избежать этого состояния гонки.  
  
 Даже если <xref:System.Timers.Timer.SynchronizingObject%2A> не `null`, <xref:System.Timers.Timer.Elapsed> события могут возникать после вызова метода <xref:System.Timers.Timer.Dispose%2A> или <xref:System.Timers.Timer.Stop%2A> или после того, как свойство <xref:System.Timers.Timer.Enabled%2A> установлено в `false`, поскольку сигнал для вызова события <xref:System.Timers.Timer.Elapsed> всегда ставится в очередь для выполнения в потоке пула потоков. Одним из способов устранения этого состояния гонки является установка флага, сообщающего обработчику событий <xref:System.Timers.Timer.Elapsed> пропускать последующие события.  
  
 При использовании класса <xref:System.Timers.Timer?displayProperty=nameWithType> с элементом пользовательского интерфейса, например формой или элементом управления, без помещения таймера в этот элемент пользовательского интерфейса, назначьте форму или элемент управления, содержащий <xref:System.Timers.Timer>, в свойство <xref:System.Timers.Timer.SynchronizingObject%2A>, чтобы событие было упаковано в поток пользовательского интерфейса.  
  
 Список значений свойств по умолчанию для экземпляра <xref:System.Timers.Timer>см. в разделе Конструктор <xref:System.Timers.Timer.%23ctor%2A>.  
  
> [!TIP]
>  Имейте в виду, что в .NET есть четыре класса с именем `Timer`, каждый из которых предоставляет различные функциональные возможности:  
>   
> - <xref:System.Timers.Timer?displayProperty=nameWithType> (в этом разделе): запускает событие через регулярные интервалы. Класс предназначен для использования в качестве серверного компонента или компонент службы в многопоточной среде. Он не имеет пользовательского интерфейса и не отображается во время выполнения.  
> - <xref:System.Threading.Timer?displayProperty=nameWithType>: выполняет один метод обратного вызова в потоке пула потоков через регулярные интервалы. Метод обратного вызова определяется при создании экземпляра таймера и не может быть изменен. Как и класс <xref:System.Timers.Timer?displayProperty=nameWithType>, этот класс предназначен для использования в многопоточной среде в качестве серверного компонента или компонент службы. Он не имеет пользовательского интерфейса и не отображается во время выполнения.  
> - <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (только .NET Framework): компонент Windows Forms, который запускает событие через регулярные интервалы. У этого компонента нет интерфейса пользователя. Он предназначен для однопоточной среды.  
> - <xref:System.Web.UI.Timer?displayProperty=nameWithType> (только .NET Framework): компонент ASP.NET, выполняющий асинхронные или синхронные обратные передачи веб-страниц через равные промежутки времени.  

## Examples  
 В следующем примере создается экземпляр объекта `System.Timers.Timer`, который запускает событие <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> каждые две секунды (2 000 миллисекунд), настраивает обработчик событий для события и запускает таймер. Обработчик событий отображает значение свойства <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> при каждом его возникновении.  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Все открытые <see langword="static" /> членов этого типа являются потокобезопасными. Потокобезопасность членов экземпляров не гарантируется.</threadsafe>
    <altmember cref="P:System.Timers.Timer.AutoReset" />
    <altmember cref="P:System.Timers.Timer.Interval" />
    <altmember cref="E:System.Timers.Timer.Elapsed" />
    <altmember cref="M:System.Timers.Timer.#ctor" />
    <altmember cref="T:System.Threading.Timer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Timers.Timer" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Timers.Timer" /> и задает всем свойствам начальные значения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В следующей таблице показаны начальные значения свойств для экземпляра <xref:System.Timers.Timer>.  
  
|Свойство.|Исходное значение|  
|--------------|-------------------|  
|<xref:System.Timers.Timer.AutoReset%2A>|`true`|  
|<xref:System.Timers.Timer.Enabled%2A>|`false`|  
|<xref:System.Timers.Timer.Interval%2A>|100 мс|  
|<xref:System.Timers.Timer.SynchronizingObject%2A>|Пустая ссылка (`Nothing` в Visual Basic).|  
  
   
  
## Examples  
 В следующем примере создается экземпляр объекта <xref:System.Timers.Timer>, который запускает событие <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> каждые две секунды (2000 миллисекунд), настраивает обработчик событий для события и запускает таймер. Обработчик событий отображает значение свойства <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> при каждом его возникновении.  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.SynchronizingObject" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (double interval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 interval) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (interval As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(double interval);" />
      <MemberSignature Language="F#" Value="new System.Timers.Timer : double -&gt; System.Timers.Timer" Usage="new System.Timers.Timer interval" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="interval">Время между событиями в миллисекундах. Значение должно быть больше нуля и меньше или равно <see cref="F:System.Int32.MaxValue" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Timers.Timer" /> и задает свойству <see cref="P:System.Timers.Timer.Interval" /> указанное значение в миллисекундах.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор задает свойство <xref:System.Timers.Timer.Interval%2A> нового экземпляра Timer, но не включает таймер.  
  
   
  
## Examples  
 В следующем примере создается экземпляр объекта <xref:System.Timers.Timer>, который запускает событие <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> каждые две секунды (2000 миллисекунд), настраивает обработчик событий для события и запускает таймер. Обработчик событий отображает значение свойства <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> при каждом его возникновении.  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Значение параметра <paramref name="interval" /> меньше или равно нулю, или больше <see cref="F:System.Int32.MaxValue" />.</exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="AutoReset">
      <MemberSignature Language="C#" Value="public bool AutoReset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoReset" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.AutoReset" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoReset As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoReset { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoReset : bool with get, set" Usage="System.Timers.Timer.AutoReset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer will be restarted when it is enabled.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerAutoReset")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает логическое значение, определяющее, должен ли объект <see cref="T:System.Timers.Timer" /> вызывать событие <see cref="E:System.Timers.Timer.Elapsed" /> один раз (<see langword="false" />) или неоднократно (<see langword="true" />).</summary>
        <value>Значение <see langword="true" />, если объект <see cref="T:System.Timers.Timer" /> должен вызывать событие <see cref="E:System.Timers.Timer.Elapsed" /> каждый раз по истечении интервала времени; <see langword="false" />, если событие <see cref="E:System.Timers.Timer.Elapsed" /> следует вызвать только один раз, когда пройдет указанное время. Значение по умолчанию — <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если <xref:System.Timers.Timer> уже включено при вызове метода <xref:System.Timers.Timer.Start%2A>, интервал сбрасывается. Если <xref:System.Timers.Timer.AutoReset%2A> `false`, необходимо вызвать метод <xref:System.Timers.Timer.Start%2A> для повторного запуска счетчика.  
  
 Сброс интервала влияет на возникновение события <xref:System.Timers.Timer.Elapsed>. Например, если задать для интервала значение 5 секунд, а затем задать для свойства <xref:System.Timers.Timer.Enabled%2A> значение `true`, счетчик начнется с <xref:System.Timers.Timer.Enabled%2A> времени. Если вы переустанавливаете интервал на 10 секунд, когда значение счетчика составляет 3 секунды, <xref:System.Timers.Timer.Elapsed> событие возникает в первый раз за 13 секунд после того, как свойство <xref:System.Timers.Timer.Enabled%2A> было установлено в значение `true`.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Timers.Timer>, событие <xref:System.Timers.Timer.Elapsed> срабатывает через 1,5 секунд. Его обработчик событий затем отображает "Hello World!" в консоли.  
  
 [!code-cpp[Classic Timer.Timer1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer.Timer1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CS/source.cs#1)]
 [!code-vb[Classic Timer.Timer1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="timer.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Начинает во время выполнения инициализацию класса <see cref="T:System.Timers.Timer" />, используемого в форме или другим компонентом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Среда разработки [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] использует этот метод для запуска инициализации компонента, используемого в форме или другим компонентом. Метод <xref:System.Timers.Timer.EndInit%2A> завершает инициализацию. Использование методов <xref:System.Timers.Timer.BeginInit%2A> и <xref:System.Timers.Timer.EndInit%2A> предотвращает использование элемента управления до полной инициализации.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.EndInit" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="timer.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает ресурсы, используемые объектом <see cref="T:System.Timers.Timer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.Timers.Timer.Close%2A>, в свою очередь, вызывает метод `Dispose`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="timer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.</param>
        <summary>Освобождает все ресурсы, используемые текущим объектом <see cref="T:System.Timers.Timer" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public event System.Timers.ElapsedEventHandler Elapsed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Timers.ElapsedEventHandler Elapsed" />
      <MemberSignature Language="DocId" Value="E:System.Timers.Timer.Elapsed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Elapsed As ElapsedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Timers::ElapsedEventHandler ^ Elapsed;" />
      <MemberSignature Language="F#" Value="member this.Elapsed : System.Timers.ElapsedEventHandler " Usage="member this.Elapsed : System.Timers.ElapsedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("Occurs when the Interval has elapsed.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerIntervalElapsed")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Timers.ElapsedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит по истечении интервала времени.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Событие <xref:System.Timers.Timer.Elapsed> возникает, если свойство <xref:System.Timers.Timer.Enabled%2A> имеет значение `true` и интервал времени (в миллисекундах), определенный свойством <xref:System.Timers.Timer.Interval%2A>, истекает. Если свойство <xref:System.Timers.Timer.AutoReset%2A> `true`, событие вызывается несколько раз с интервалом, определенным свойством <xref:System.Timers.Timer.Interval%2A>. в противном случае событие вызывается только один раз, при первом истечении значения <xref:System.Timers.Timer.Interval%2A>.  
  
 Если <xref:System.Timers.Timer.Interval%2A> задается после запуска <xref:System.Timers.Timer>, счетчик сбрасывается. Например, если задать для интервала значение 5 секунд, а затем задать для параметра <xref:System.Timers.Timer.Enabled%2A> значение `true`, счетчик начнется с <xref:System.Timers.Timer.Enabled%2A> времени. Если значение параметра Count равно 3 секундам, то при установке интервала в 10 секунд событие <xref:System.Timers.Timer.Elapsed> будет вызвано в первый раз за 13 секунд после того, как <xref:System.Timers.Timer.Enabled%2A> был установлен в `true`.  
  
 Если свойство <xref:System.Timers.Timer.SynchronizingObject%2A> `null`, то в <xref:System.Threading.ThreadPool> потоке возникает событие <xref:System.Timers.Timer.Elapsed>. Если обработка события <xref:System.Timers.Timer.Elapsed> длится дольше, чем <xref:System.Timers.Timer.Interval%2A>, событие может возникать снова в другом <xref:System.Threading.ThreadPool>ом потоке. В этом случае обработчик событий должен быть повторным.  
  
> [!NOTE]
>  Метод обработки событий может выполняться в одном потоке в то же время, когда другой поток вызывает метод <xref:System.Timers.Timer.Stop%2A> или задает для свойства <xref:System.Timers.Timer.Enabled%2A> значение `false`. Это может привести к возникновению <xref:System.Timers.Timer.Elapsed> события после остановки таймера. В примере кода для метода <xref:System.Timers.Timer.Stop%2A> показан один из способов избежать этого состояния гонки.  
  
 Даже если <xref:System.Timers.Timer.SynchronizingObject%2A> не `null`, <xref:System.Timers.Timer.Elapsed> события могут возникать после вызова метода <xref:System.Timers.Timer.Dispose%2A> или <xref:System.Timers.Timer.Stop%2A> или после того, как свойство <xref:System.Timers.Timer.Enabled%2A> установлено в `false`, поскольку сигнал для вызова события <xref:System.Timers.Timer.Elapsed> всегда ставится в очередь для выполнения в потоке пула потоков. Одним из способов устранения этого состояния гонки является установка флага, сообщающего обработчику событий <xref:System.Timers.Timer.Elapsed> пропускать последующие события.  
  
 Компонент <xref:System.Timers.Timer> перехватывает и подавляет все исключения, вызываемые обработчиками событий для события <xref:System.Timers.Timer.Elapsed>. Это поведение может быть изменено в будущих выпусках .NET Framework.  
  
   
  
## Examples  
 В следующем примере создается экземпляр объекта <xref:System.Timers.Timer>, который запускает событие <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> каждые две секунды (2000 миллисекунд), настраивает обработчик событий для события и запускает таймер. Обработчик событий отображает значение свойства <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> при каждом его возникновении.  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
        <altmember cref="T:System.Timers.ElapsedEventArgs" />
        <altmember cref="T:System.Timers.ElapsedEventHandler" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Timers.Timer.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer is enabled to fire events at a defined interval.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerEnabled")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, определяющее, должен ли объект <see cref="T:System.Timers.Timer" /> вызывать событие <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
        <value>Значение <see langword="true" />, если объект <see cref="T:System.Timers.Timer" /> должен вызывать событие <see cref="E:System.Timers.Timer.Elapsed" />; в противном случае — <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Установка значения <xref:System.Timers.Timer.Enabled%2A> на `true` аналогично вызову <xref:System.Timers.Timer.Start%2A>, а <xref:System.Timers.Timer.Enabled%2A> `false` совпадает с вызовом <xref:System.Timers.Timer.Stop%2A>.  
  
> [!NOTE]
>  Сигнал для вызова события <xref:System.Timers.Timer.Elapsed> всегда находится в очереди на выполнение в потоке <xref:System.Threading.ThreadPool>. Это может привести к возникновению <xref:System.Timers.Timer.Elapsed> события после того, как свойство <xref:System.Timers.Timer.Enabled%2A> имеет значение `false`. В примере кода для метода <xref:System.Timers.Timer.Stop%2A> показан один из способов обхода этого состояния гонки.  
  
 Если для параметра <xref:System.Timers.Timer.Enabled%2A> задано значение `true` а для параметра <xref:System.Timers.Timer.AutoReset%2A> задано значение `false`, <xref:System.Timers.Timer> вызывает событие <xref:System.Timers.Timer.Elapsed> только один раз, когда истечет время первого интервала.  
  
 Если интервал задается после запуска <xref:System.Timers.Timer>, счетчик сбрасывается. Например, если задать для интервала значение 5 секунд, а затем задать для свойства <xref:System.Timers.Timer.Enabled%2A> значение `true`, счетчик начнется с <xref:System.Timers.Timer.Enabled%2A> времени. Если значение параметра Count равно 3 секундам, то при установке интервала в 10 секунд событие <xref:System.Timers.Timer.Elapsed> будет вызвано в первый раз за 13 секунд после того, как <xref:System.Timers.Timer.Enabled%2A> был установлен в `true`.  
  
> [!NOTE]
>  Некоторые визуальные конструкторы, например Microsoft Visual Studio, устанавливают для свойства <xref:System.Timers.Timer.Enabled%2A> значение `true` при вставке нового <xref:System.Timers.Timer>.  
  
   
  
## Examples  
 В следующем примере создается экземпляр объекта <xref:System.Timers.Timer>, который запускает событие <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> каждые две секунды (2000 миллисекунд), настраивает обработчик событий для события и запускает таймер. Обработчик событий отображает значение свойства <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> при каждом его возникновении.  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Данное свойство задать нельзя, так как таймер удален.</exception>
        <exception cref="T:System.ArgumentException">Перед включением таймера свойству <see cref="P:System.Timers.Timer.Interval" /> задано значение больше <see cref="F:System.Int32.MaxValue" />.</exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="timer.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Заканчивает во время выполнения инициализацию класса <see cref="T:System.Timers.Timer" />, используемого в форме или другим компонентом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Среда разработки [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] использует этот метод для завершения инициализации компонента, используемого в форме или другим компонентом. Метод <xref:System.Timers.Timer.BeginInit%2A> запускает инициализацию. Использование методов <xref:System.Timers.Timer.BeginInit%2A> и <xref:System.Timers.Timer.EndInit%2A> предотвращает использование элемента управления до полной инициализации.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Timers.Timer.BeginInit" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public double Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Interval { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : double with get, set" Usage="System.Timers.Timer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(100)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("The number of milliseconds between timer events.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerInterval")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает интервал в миллисекундах, по истечении которого возникает событие <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
        <value>Время между событиями <see cref="E:System.Timers.Timer.Elapsed" /> в миллисекундах. Значение должно быть больше нуля и меньше или равно <see cref="F:System.Int32.MaxValue" />. Значение по умолчанию — 100 миллисекунд.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.Timers.Timer.Interval%2A> используется для определения частоты срабатывания события <xref:System.Timers.Timer.Elapsed>. Поскольку класс <xref:System.Timers.Timer> зависит от системных часов, он имеет то же разрешение, что и системные часы. Это означает, что событие <xref:System.Timers.Timer.Elapsed> будет срабатывать через интервал, определенный разрешением системных часов, если свойство <xref:System.Timers.Timer.Interval%2A> меньше, чем разрешение системных часов. В следующем примере свойству <xref:System.Timers.Timer.Interval%2A> присваивается значение 5 миллисекунд. При запуске в [!INCLUDE[win7](~/includes/win7-md.md)] системе, системные часы которой имеют разрешение примерно 15 миллисекунд, это событие срабатывает примерно каждые 15 миллисекунд, а не каждые 5 миллисекунд.  
  
 [!code-csharp[System.Timers.Timer.Interval#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/interval2.cs#1)]
 [!code-vb[System.Timers.Timer.Interval#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/interval2.vb#1)]  
  
 Для определения разрешения системных часов в текущей системе можно использовать следующий код:  
  
 [!code-csharp[System.Timers.Timer.Interval#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/resolution1.cs#2)]
 [!code-vb[System.Timers.Timer.Interval#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/resolution1.vb#2)]  
  
 Если приложение требует более высокого разрешения, чем оно предлагается классу <xref:System.Timers.Timer> или системным часам, используйте таймеры мультимедиа с высоким разрешением. см. раздел [как использовать таймер высокого разрешения](https://msdn.microsoft.com/library/aa964692.aspx).  
  
 Если интервал задается после запуска <xref:System.Timers.Timer>, счетчик сбрасывается. Например, если задать для интервала значение 5 секунд, а затем задать для свойства <xref:System.Timers.Timer.Enabled%2A> значение `true`, счетчик начнется с <xref:System.Timers.Timer.Enabled%2A> времени. Если значение параметра Count равно 3 секундам, то при установке интервала в 10 секунд событие <xref:System.Timers.Timer.Elapsed> будет вызвано в первый раз за 13 секунд после того, как <xref:System.Timers.Timer.Enabled%2A> был установлен в `true`.  
  
 Если для параметра <xref:System.Timers.Timer.Enabled%2A> задано значение `true` а для параметра <xref:System.Timers.Timer.AutoReset%2A> задано значение `false`, <xref:System.Timers.Timer> вызывает событие <xref:System.Timers.Timer.Elapsed> только один раз, когда истечет время первого интервала. Затем для <xref:System.Timers.Timer.Enabled%2A> устанавливается значение `false`.  
  
> [!NOTE]
>  Если для свойств <xref:System.Timers.Timer.Enabled%2A> и <xref:System.Timers.Timer.AutoReset%2A> задано значение `false`и таймер уже включен, установка свойства <xref:System.Timers.Timer.Interval%2A> вызывает однократное создание события <xref:System.Timers.Timer.Elapsed>, как если бы для свойства <xref:System.Timers.Timer.Enabled%2A> было задано значение `true`. Чтобы задать интервал, не вызывая событие, можно временно присвоить свойству <xref:System.Timers.Timer.Enabled%2A> значение `true`, задать для свойства <xref:System.Timers.Timer.Interval%2A> требуемый интервал времени, а затем немедленно присвоить свойству <xref:System.Timers.Timer.Enabled%2A> значение `false`.  
  
   
  
## Examples  
 В следующем примере создается экземпляр объекта <xref:System.Timers.Timer>, который запускает событие <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> каждые две секунды (2000 миллисекунд), настраивает обработчик событий для события и запускает таймер. Обработчик событий отображает значение свойства <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> при каждом его возникновении.  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Интервал меньше или равен нулю.  
  
-или- 
Интервал больше, чем <see cref="F:System.Int32.MaxValue" />, а таймер в настоящий момент включен. (Если таймер в данный момент выключен, исключение не генерируется до его включения.)</exception>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Site : System.ComponentModel.ISite with get, set" Usage="System.Timers.Timer.Site" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает сайт, который привязывает <see cref="T:System.Timers.Timer" /> к его контейнеру в режиме конструктора.</summary>
        <value>Интерфейс <see cref="T:System.ComponentModel.ISite" />, представляющий сайт, который привязывает объект <see cref="T:System.Timers.Timer" /> к его контейнеру.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Сайты привязывают <xref:System.ComponentModel.Component> к <xref:System.ComponentModel.Container> и обеспечивают обмен данными между ними, а также предоставляют контейнеру способ управления его компонентами.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="timer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Начинает вызывать событие <see cref="E:System.Timers.Timer.Elapsed" />, задавая для свойства <see cref="P:System.Timers.Timer.Enabled" /> значение <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если <xref:System.Timers.Timer.Start%2A> вызывается, а <xref:System.Timers.Timer.AutoReset%2A> имеет значение `false`, то <xref:System.Timers.Timer> вызывает событие <xref:System.Timers.Timer.Elapsed> только один раз, когда истечет время первого интервала. Если <xref:System.Timers.Timer.Start%2A> вызывается и <xref:System.Timers.Timer.AutoReset%2A> является `true`, <xref:System.Timers.Timer> вызывает событие <xref:System.Timers.Timer.Elapsed> в первый раз, когда интервал истекает, и возобновляет событие в указанный интервал.  
  
 Время можно также запустить, задав для параметра <xref:System.Timers.Timer.Enabled%2A> значение `true`.  
  
> [!NOTE]
>  Если <xref:System.Timers.Timer.AutoReset%2A> `false`, необходимо вызвать метод <xref:System.Timers.Timer.Start%2A> для повторного запуска счетчика.  
  
 Вызов метода <xref:System.Timers.Timer.Start%2A>, когда таймер включен, не оказывает никакого влияния.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="T:System.Timers.Timer" /> создается с интервалом не меньше <see cref="F:System.Int32.MaxValue" />+1, либо задается интервал меньше нуля.</exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="timer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Прекращает вызывать событие <see cref="E:System.Timers.Timer.Elapsed" />, задавая для свойства <see cref="P:System.Timers.Timer.Enabled" /> значение <see langword="false" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вы также можете прерывать время, установив для <xref:System.Timers.Timer.Enabled%2A> значение `false`.  
  
> [!NOTE]
>  Сигнал для вызова события <xref:System.Timers.Timer.Elapsed> всегда находится в очереди на выполнение в потоке <xref:System.Threading.ThreadPool>, поэтому метод обработки событий может выполняться в одном потоке одновременно с вызовом метода <xref:System.Timers.Timer.Stop%2A> в другом потоке. Это может привести к возникновению <xref:System.Timers.Timer.Elapsed> события после вызова метода <xref:System.Timers.Timer.Stop%2A>. Во втором примере кода в разделе " [примеры](#examples) " показан один из способов обхода этого состояния гонки.  
  
   
  
## Examples  
 В следующем примере создается экземпляр объекта `System.Timers.Timer`, который запускает событие <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> каждые две секунды (2 000 миллисекунд), настраивает обработчик событий для события и запускает таймер. Обработчик событий отображает значение свойства <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> при каждом его возникновении. Когда пользователь нажимает клавишу ВВОД, приложение вызывает метод <xref:System.Timers.Timer.Stop%2A> перед завершением работы приложения.  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 В следующем примере кода показан один из способов предотвращения продолжения потока, вызывающего метод <xref:System.Timers.Timer.Stop%2A>, до окончания текущего события <xref:System.Timers.Timer.Elapsed>, а также предотвращения одновременного выполнения двух событий <xref:System.Timers.Timer.Elapsed> событиями (часто называемыми повторной записью).  
  
 В примере выполняется тестовый запуск 100. При каждом запуске теста таймер запускается с интервалом в 150 миллисекунд. Обработчик событий использует метод <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> для имитации задачи, которая случайным образом изменяется в диапазоне от 50 до 200 миллисекунд. Метод теста также запускает управляющий поток, который ожидает секунды, а затем останавливает таймер. Если событие обрабатывается, когда управляющий поток останавливает таймер, поток управления должен дождаться завершения события перед продолжением.  
  
 Перегрузка метода <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> используется, чтобы избежать повторного входа и предотвратить продолжение управляющего потока до окончания выполнения события. Обработчик событий использует метод <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> для установки управляющей переменной равным 1, но только в том случае, если значение равно нулю. Это атомарная операция. Если возвращаемое значение равно нулю, то Управляющая переменная имеет значение 1, а обработчик событий продолжает работу. Если возвращаемое значение не равно нулю, событие просто удаляется, чтобы избежать повторного входа. (Если бы требовалось выполнять каждое событие, класс <xref:System.Threading.Monitor> будет лучшим способом синхронизации событий.) Когда обработчик событий завершает работу, он устанавливает для переменной элемента управления значение 0. В этом примере записывается общее число выполненных событий, которые были отклонены из-за повторного входа и произошли после вызова метода <xref:System.Timers.Timer.Stop%2A>.  
  
 Управляющий поток использует метод <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> для задания управляющей переменной равным-1 (минус единица), но только в том случае, если значение равно нулю. Если атомарная операция возвращает ненулевое значение, в данный момент выполняется событие. Управляющий поток ожидает и пытается снова выполнить операцию. В примере записывается, сколько раз потоку управления пришлось ожидать завершения события.  
  
 [!code-csharp[Timer.Stop#1](~/samples/snippets/csharp/VS_Snippets_CLR/Timer.Stop/CS/source.cs#1)]
 [!code-vb[Timer.Stop#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Timer.Stop/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.SynchronizingObject" />
      <MemberSignature Language="VB.NET" Value="Public Property SynchronizingObject As ISynchronizeInvoke" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::ISynchronizeInvoke ^ SynchronizingObject { System::ComponentModel::ISynchronizeInvoke ^ get(); void set(System::ComponentModel::ISynchronizeInvoke ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizingObject : System.ComponentModel.ISynchronizeInvoke with get, set" Usage="System.Timers.Timer.SynchronizingObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("The object used to marshal the event handler calls issued when an interval has elapsed.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerSynchronizingObject")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает объект, используемый для маршалирования вызовов обработчика событий, осуществленных после истечения интервала времени.</summary>
        <value><see cref="T:System.ComponentModel.ISynchronizeInvoke" />, представляющий объект, используемый для маршалинга вызовов обработчика событий, осуществленных после истечения интервала времени. Значение по умолчанию — <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если <xref:System.Timers.Timer.SynchronizingObject%2A> `null`, метод, обрабатывающий событие <xref:System.Timers.Timer.Elapsed>, вызывается в потоке из пула системных потоков. Дополнительные сведения о пулах системных потоков см. в разделе <xref:System.Threading.ThreadPool>.  
  
 Если событие <xref:System.Timers.Timer.Elapsed> обрабатывается компонентом Visual Windows Forms, например кнопкой, доступ к компоненту через пул системных потоков может привести к исключению или просто не работать. Избегайте этого воздействия, установив <xref:System.Timers.Timer.SynchronizingObject%2A> в Windows Forms компоненте, который вызывает вызов метода, обрабатывающего событие <xref:System.Timers.Timer.Elapsed>, в том же потоке, в котором был создан компонент.  
  
> [!NOTE]
>  Даже если свойство <xref:System.Timers.Timer.SynchronizingObject%2A> не `null`, <xref:System.Timers.Timer.Elapsed> события могут возникать после вызова метода <xref:System.Timers.Timer.Dispose%2A> или <xref:System.Timers.Timer.Stop%2A> или после того, как для свойства <xref:System.Timers.Timer.Enabled%2A> установлено значение `false`, поскольку сигнал для вызова события <xref:System.Timers.Timer.Elapsed> всегда находится в очереди на выполнение в потоке пула потоков. Одним из способов устранения этого состояния гонки является установка флага, сообщающего обработчику событий <xref:System.Timers.Timer.Elapsed> пропускать последующие события.  
  
 Если <xref:System.Timers.Timer> используется в Visual Studio в конструкторе Windows Forms, <xref:System.Timers.Timer.SynchronizingObject%2A> автоматически устанавливается в элемент управления, содержащий <xref:System.Timers.Timer>. Например, если поместить <xref:System.Timers.Timer> в конструктор для `Form1` (который наследуется от <xref:System.Windows.Forms.Form>), свойству <xref:System.Timers.Timer.SynchronizingObject%2A> <xref:System.Timers.Timer> присваивается значение экземпляра `Form1`.  
  
   
  
## Examples  
 Ниже приведен пример приложения Windows Forms, которое служит очень простым редактором текстовых файлов. Если текст в текстовом поле не был сохранен, приложение запросит пользователя через одну минуту, независимо от того, нужно ли сохранить содержимое текстового поля.  Для этого свойство <xref:System.Timers.Timer.Interval%2A> задается равным одной минуте (60 000 миллисекундам), а свойству <xref:System.Timers.Timer.SynchronizingObject%2A> задается объект <xref:System.Windows.Forms.Form>.  
  
 [!code-csharp[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/cs/Form1.cs#1)]
 [!code-vb[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/vb/Form1.vb#1)]  
  
 Для этого примера необходимо добавить в форму следующие элементы управления:  
  
-   Элемент управления <xref:System.Windows.Forms.TextBox> с именем `TextBox1` (его имя по умолчанию).  
  
-   Элемент управления <xref:System.Windows.Forms.Button> с именем `Button1` (его имя по умолчанию).  
  
-   Элемент управления <xref:System.Windows.Forms.SaveFileDialog> с именем `SaveSaveFileDialog1` (его имя по умолчанию).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
        <altmember cref="T:System.ComponentModel.ISynchronizeInvoke" />
        <altmember cref="T:System.Threading.ThreadPool" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
  </Members>
</Type>
