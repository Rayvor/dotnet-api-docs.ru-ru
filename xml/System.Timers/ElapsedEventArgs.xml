<Type Name="ElapsedEventArgs" FullName="System.Timers.ElapsedEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="34d968e90d7840c0555513cbf932cf5d9a11f3c3" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75114711" /></Metadata><TypeSignature Language="C#" Value="public class ElapsedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ElapsedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Timers.ElapsedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class ElapsedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ElapsedEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type ElapsedEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет данные для события <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере создается экземпляр объекта <xref:System.Timers.Timer>, который запускает событие <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> каждые две секунды (2000 миллисекунд), настраивает обработчик событий для события и запускает таймер. Обработчик событий отображает значение свойства <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> при каждом его возникновении.  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SignalTime">
      <MemberSignature Language="C#" Value="public DateTime SignalTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime SignalTime" />
      <MemberSignature Language="DocId" Value="P:System.Timers.ElapsedEventArgs.SignalTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SignalTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime SignalTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.SignalTime : DateTime" Usage="System.Timers.ElapsedEventArgs.SignalTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает дату и время возникновения события <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
        <value>Время возникновения события <see cref="E:System.Timers.Timer.Elapsed" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Событие <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> возникает в потоке <xref:System.Threading.ThreadPool>, поэтому метод обработки событий может выполняться в одном потоке одновременно, когда вызов метода <xref:System.Timers.Timer.Stop%2A?displayProperty=nameWithType> выполняется в другом потоке. Это может привести к возникновению <xref:System.Timers.Timer.Elapsed> события после вызова метода <xref:System.Timers.Timer.Stop%2A>. Это условие состязания не может быть предотвращено простым сравнением свойства <xref:System.Timers.ElapsedEventArgs.SignalTime%2A> с временем вызова метода <xref:System.Timers.Timer.Stop%2A>, так как метод обработки событий может уже выполняться при вызове метода <xref:System.Timers.Timer.Stop%2A> или может начинаться с момента вызова метода <xref:System.Timers.Timer.Stop%2A> и до момента сохранения времени окончания. Если крайне важно предотвратить продолжение потока, вызывающего метод <xref:System.Timers.Timer.Stop%2A>, в то время как метод обработки событий все еще выполняется, используйте более надежный механизм синхронизации, такой как класс <xref:System.Threading.Monitor> или метод <xref:System.Threading.Interlocked.CompareExchange%2A>. Код, использующий метод <xref:System.Threading.Interlocked.CompareExchange%2A>, можно найти в примере для метода <xref:System.Timers.Timer.Stop%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В следующем примере создается экземпляр объекта <xref:System.Timers.Timer>, который запускает событие <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> каждые две секунды (2000 миллисекунд), настраивает обработчик событий для события и запускает таймер. Обработчик событий отображает значение свойства <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> при каждом его возникновении.  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Timers.Timer.Stop" />
      </Docs>
    </Member>
  </Members>
</Type>
