<Type Name="IQueryable&lt;T&gt;" FullName="System.Linq.IQueryable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ccde6b6dea6124df4d2707d9caf57d0392b3c9b7" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69277692" /></Metadata><TypeSignature Language="C#" Value="public interface IQueryable&lt;out T&gt; : System.Collections.Generic.IEnumerable&lt;out T&gt;, System.Linq.IQueryable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IQueryable`1&lt;+ T&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable, class System.Linq.IQueryable" />
  <TypeSignature Language="DocId" Value="T:System.Linq.IQueryable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IQueryable(Of Out T)&#xA;Implements IEnumerable(Of Out T), IQueryable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IQueryable : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Linq::IQueryable" />
  <TypeSignature Language="F#" Value="type IQueryable&lt;'T&gt; = interface&#xA;    interface seq&lt;'T&gt;&#xA;    interface IQueryable&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">Тип данных в источнике данных.</typeparam>
    <summary>Предоставляет функциональные возможности расчета запросов к конкретному источнику данных с известным типом данных.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Linq.IQueryable%601> Интерфейс предназначен для реализации поставщиками запросов.  
  
 Этот интерфейс наследует <xref:System.Collections.Generic.IEnumerable%601> интерфейс таким образом, чтобы, если он представляет запрос, можно перечислить результаты этого запроса. Перечисление вызывает принудительное выполнение дерева <xref:System.Linq.IQueryable%601> выражения, связанного с объектом. Запросы, не возвращающие перечислимые результаты, выполняются <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> при вызове метода.  
  
 Определение "выполнение дерева выражения" относится только к поставщику запросов. Например, он может содержать преобразование дерева выражения в язык запросов, соответствующий базовому источнику данных.  
  
 <xref:System.Linq.IQueryable%601> Интерфейс позволяет выполнять запросы с помощью полиморфизма. То есть, поскольку запрос к `IQueryable` источнику данных представлен в виде дерева выражения, его можно выполнить для различных типов источников данных.  
  
 <xref:System.Linq.Queryable.ThenBy%2A> <xref:System.Linq.Queryable> <xref:System.Linq.Queryable.ThenByDescending%2A> <xref:System.Linq.Queryable.AsQueryable%2A> <xref:System.Linq.IQueryable%601> Методы (вVisualBasic),определенныевклассе(заисключением,и),расширяютобъектытипов,реализующихинтерфейс.`Shared` `static`  
  
 Дополнительные сведения о создании собственного поставщика LINQ см. в разделе [LINQ: Создание поставщика](https://go.microsoft.com/fwlink/?LinkID=112370) IQueryable в блогах MSDN.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Linq.Queryable" />
  </Docs>
  <Members />
</Type>
