<Type Name="IProcessInitializer" FullName="System.EnterpriseServices.IProcessInitializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="53f02b0dca103a2278f68dfe7522f65b914e4d15" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70730949" /></Metadata><TypeSignature Language="C#" Value="public interface IProcessInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IProcessInitializer" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IProcessInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Interface IProcessInitializer" />
  <TypeSignature Language="C++ CLI" Value="public interface class IProcessInitializer" />
  <TypeSignature Language="F#" Value="type IProcessInitializer = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("1113f52d-dc7f-4943-aed6-88d04027e32a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Поддерживает методы, которые могут быть вызваны при запуске или завершении работы компонента COM.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Реализуйте <xref:System.EnterpriseServices.IProcessInitializer> методы интерфейса для обслуживаемых компонентов, если вы хотите выполнить код инициализации или завершения работы, когда серверный процесс (Dllhost. exe) запускается или завершается соответственно.  
  
 COM+ предоставляет `Startup` события `Shutdown` и, когда программа Dllhost. exe запускается и завершает работу. Эта функция позволяет выполнять пользовательскую инициализацию и очищать код с помощью любых компонентов COM+, установленных в серверном приложении COM+ (которые также называют компонентами сервера). Экземпляр каждого компонента, реализующего <xref:System.EnterpriseServices.IProcessInitializer> интерфейс, будет создан и сохранен в течение процесса и вызываться в методах интерфейса во время запуска и завершения работы. При реализации в <xref:System.EnterpriseServices.ServicedComponent>во время регистрации компонента `InitializesServerApplication` в параметре `COMAdminCatalogObject` в коллекции компонентов устанавливается значение `true`.  
  
 С помощью событий  `Shutdown` и можно инициализировать ресурсы, создавать подключения, инициализировать общие данные и выполнять код очистки. `Startup` Однако не следует получать доступ к состояниям, характерным для COM+, так как экземпляры компонентов сервера еще не созданы. Кроме того, код в `Startup` событиях и `Shutdown` должен возвращать как можно быстрее, так как система ожидает до 90 секунд, чтобы Dllhost. exe мог подготовиться к приему активаций после того, как система запустит процесс. Если программа Dllhost. exe не сообщает о том, что она готова в течение 90 секунд, система завершает процесс; Поэтому все процессы инициализации должны быть завершены в течение этого промежутка времени. Каждый серверный компонент, участвующий в инициализации, должен <xref:System.EnterpriseServices.IProcessInitializer> поддерживать интерфейс. При запуске Dllhost. exe COM+ создает все серверные компоненты, которые запросили эту `QueryInterface` службу, <xref:System.EnterpriseServices.IProcessInitializer> вызывает <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> интерфейс и вызывает функцию. Аналогично, когда процесс dllhost. exe завершает работу, он вызывает <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> функцию для этих ранее сохраненных указателей интерфейса.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Shutdown();" />
      <MemberSignature Language="F#" Value="abstract member Shutdown : unit -&gt; unit" Usage="iProcessInitializer.Shutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Выполняет действия для завершения работы. Вызывается при закрытии программы Dllhost.exe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A>не вызывается во время работы с FailFast или другими событиями аварийного завершения.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Startup">
      <MemberSignature Language="C#" Value="public void Startup (object punkProcessControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Startup([in]object punkProcessControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Startup (punkProcessControl As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Startup(System::Object ^ punkProcessControl);" />
      <MemberSignature Language="F#" Value="abstract member Startup : obj -&gt; unit" Usage="iProcessInitializer.Startup punkProcessControl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="punkProcessControl" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="punkProcessControl">В Microsoft Windows XP запускается указатель на интерфейс <see langword="IUnknown" /> компонента COM. В Microsoft Windows 2000 этот аргумент всегда имеет значение <see langword="null" />.</param>
        <summary>Выполняет инициализацию при запуске. Вызывается при запуске Dllhost.exe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект, на который `punkProcessControl` ссылается, <xref:System.EnterpriseServices.IProcessInitControl> реализует интерфейс. <xref:System.EnterpriseServices.IProcessInitControl>поддерживает один метод <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>.  
  
 Код инициализации в <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> может <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>вызывать, с интервалом ожидания, равным количеству секунд, оставшихся до истечения времени ожидания запуска компонента.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
