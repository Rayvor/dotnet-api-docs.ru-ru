<Type Name="Financial" FullName="Microsoft.VisualBasic.Financial">
  <Metadata><Meta Name="ms.openlocfilehash" Value="57d983ed1455c9ffc817c50bb44441942ca1e484" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69317633" /></Metadata><TypeSignature Language="C#" Value="public sealed class Financial" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Financial extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Financial" />
  <TypeSignature Language="VB.NET" Value="Public Module Financial" />
  <TypeSignature Language="C++ CLI" Value="public ref class Financial sealed" />
  <TypeSignature Language="F#" Value="type Financial = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>В модуле <see langword="Financial" /> содержатся процедуры, используемые для выполнения финансовых операций.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот модуль поддерживает Visual Basic элементы библиотеки времени выполнения, которые выполняют финансовые вычисления, такие как амортизация, существующие и будущие значения, процентные ставки, ставки возврата и платежи.  
  
   
  
## Examples  
 В этом примере `Rate` функция используется для вычисления процентной ставки ссуды с учетом общего числа платежей (`TotPmts`), суммы платежа (`Payment`), текущего значения или участника ссуды (`PVal`), будущего значение ссуды (`FVal`), число, указывающее, является ли оплата датой начала или окончания периода выплат (`PayType`), и приближением ожидаемой процентной ставки (`Guess`).  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Сводка по финансовым функциям</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Ключевые слова (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic элементов библиотеки времени выполнения</related>
  </Docs>
  <Members>
    <Member MemberName="DDB">
      <MemberSignature Language="C#" Value="public static double DDB (double Cost, double Salvage, double Life, double Period, double Factor = 2);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 DDB(float64 Cost, float64 Salvage, float64 Life, float64 Period, float64 Factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function DDB (Cost As Double, Salvage As Double, Life As Double, Period As Double, Optional Factor As Double = 2) As Double" />
      <MemberSignature Language="F#" Value="static member DDB : double * double * double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.DDB (Cost, Salvage, Life, Period, Factor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
        <Parameter Name="Factor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Обязательный. Начальная стоимость актива.</param>
        <param name="Salvage">Обязательный. Стоимость актива на момент окончания срока его эксплуатации.</param>
        <param name="Life">Обязательный. Срок эксплуатации актива.</param>
        <param name="Period">Обязательный. Период расчета амортизации актива.</param>
        <param name="Factor">Необязательный параметр. Коэффициент уменьшения остатка. Если значение не указано, то предполагается 2 (метод двойного уменьшения остатка).</param>
        <summary>Возвращает значение, определяющее амортизацию актива за указанный период времени с помощью метода двойного уменьшения остатка или другого указанного метода.</summary>
        <returns>Значение, определяющее амортизацию актива за указанный период времени с помощью метода двойного уменьшения остатка или другого указанного метода.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод двойного уменьшения остатка рассчитывает амортизацию с частотой ускорения. Амортизация является наибольшей в первом периоде и уменьшается в последующих периодах.  
  
 Аргументы `Life` и`Period` должны быть выражены в одних и тех же единицах. Например, если `Life` указано в месяцах, `Period` необходимо также указать в месяцах. Все аргументы должны быть положительными числами.  
  
 `DDB` Функция использует следующую формулу для вычисления амортизации за указанный период:  
  
 Амортизация/период = ((стоимость-остаточная_стоимость) * коэффициент)/жизнь  
  
   
  
## Examples  
 В этом примере `DDB` функция используется для возврата амортизации актива за указанный период с учетом начальной стоимости (`InitCost`), остаточной стоимости в конце срока службы актива (`SalvageVal`), общего времени существования актива в годах (`LifeTime`) и период в годах, для которого вычисляется амортизация (`Depr`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Factor" /> &lt;= 0, <paramref name="Salvage" /> &lt; 0, <paramref name="Period" /> &lt;= 0 или <paramref name="Period" /> &gt; <paramref name="Life." /></exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Сводка по финансовым функциям</related>
      </Docs>
    </Member>
    <Member MemberName="FV">
      <MemberSignature Language="C#" Value="public static double FV (double Rate, double NPer, double Pmt, double PV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 FV(float64 Rate, float64 NPer, float64 Pmt, float64 PV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function FV (Rate As Double, NPer As Double, Pmt As Double, Optional PV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member FV : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.FV (Rate, NPer, Pmt, PV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Обязательный. Процентная ставка за период. Например, при взятии ссуды на автомобиль под годовую процентную ставку (APR) размером 10% с ежемесячными выплатами ставка за период равна отношению 0,1/12 или 0,0083.</param>
        <param name="NPer">Обязательный. Общее количество периодов платежей аннуитета. Например, при ежемесячных выплатах ссуды за автомобиль на протяжении 4 лет общее количество периодов выплат будет равно 4 x 12 (или 48).</param>
        <param name="Pmt">Обязательный. Платеж за каждый период. Обычно платежи содержат основную сумму и проценты, которые не изменяются на протяжении периода действия аннуитета.</param>
        <param name="PV">Необязательный параметр. Приведенная (нынешняя) стоимость, или общая сумма, равноценная на данный момент серии будущих выплат. Например, если для покупки автомобиля взят заем, то эта сумма представляет собой текущее значение предстоящих ежемесячных платежей за автомобиль. Если этот аргумент опущен, используется значение 0.</param>
        <param name="Due">Необязательный параметр. Объект типа <see cref="T:Microsoft.VisualBasic.DueDate" />, указывающий время выплат. Этот аргумент должен равняться либо <see langword="DueDate.EndOfPeriod" />, если выплаты должны производиться в конце периода, либо <see langword="DueDate.BegOfPeriod" /> в случае оплаты в начале периода. Если этот аргумент опущен, используется <see langword="DueDate.EndOfPeriod" />.</param>
        <summary>Возвращает значение, указывающее будущее значение аннуитета, рассчитываемого на основе периодических фиксированных выплат и постоянной процентной ставки.</summary>
        <returns>Будущее значение аннуитета, рассчитываемое на основе периодических фиксированных выплат и постоянной процентной ставки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Аннуитет — это серия фиксированных денежных выплат, сделанных с течением времени. Аннуитет может быть ссудой (например, закладкой на дом) или инвестициями (например, планом экономии на месяц).  
  
 Аргументы `Rate` и`NPer` должны вычисляться с использованием периодов выплат, выраженных в одних и тех же единицах. Например, если `Rate` вычисляется с использованием месяцев, `NPer` необходимо также вычислить его с помощью месяцев.  
  
 Для всех аргументов выплачиваемая наличность (например, депозиты на экономию) представлена отрицательными числами; денежные поступления (например, дивидендные чеки) представлены положительными числами.  
  
   
  
## Examples  
 В этом примере `FV` функция возвращает будущее значение инвестиции с учетом процентной ставки, которая начисляется за период (`APR / 12`), общего числа платежей (`TotPmts`), платежа (`Payment`), текущего значения инвестиции (`PVal`) и число, указывающее, выполняется ли оплата в начале или в конце платежного периода (`PayType`). Обратите внимание `Payment` , что, поскольку представляет выплачиваемую денежную оплату, это отрицательное число.  
  
 [!code-vb[VbVbalrMath#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Сводка по финансовым функциям</related>
      </Docs>
    </Member>
    <Member MemberName="IPmt">
      <MemberSignature Language="C#" Value="public static double IPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function IPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member IPmt : double * double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.IPmt (Rate, Per, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Обязательный. Процентная ставка за период. Например, при взятии ссуды на автомобиль под годовую процентную ставку (APR) размером 10% с ежемесячными выплатами ставка за период равна отношению 0,1/12 или 0,0083.</param>
        <param name="Per">Обязательный. Расчетный период в интервале от 1 до <paramref name="NPer" />.</param>
        <param name="NPer">Обязательный. Общее количество периодов платежей аннуитета. Например, при ежемесячных выплатах ссуды за автомобиль на протяжении 4 лет общее количество периодов выплат будет равно 4 x 12 (или 48).</param>
        <param name="PV">Обязательный. Значение, задающее текущую сумму (или значение на сегодняшний день) серии будущих платежей или поступлений. Например, если для покупки автомобиля взят заем, то эта сумма представляет собой текущее значение предстоящих ежемесячных платежей за автомобиль.</param>
        <param name="FV">Необязательный параметр. Значение, задающее требуемую будущую сумму или баланс наличности после уплаты последнего платежа. Например, будущее значение ссуды равно $0, поcкольку такова будет ее величина после последней выплаты. Но если требуется собрать за 18 лет сумму в $50 000 на образование детей, то будущая сумма будет равна $50 000. Если этот аргумент опущен, используется значение 0.</param>
        <param name="Due">Необязательный параметр. Объект типа <see cref="T:Microsoft.VisualBasic.DueDate" />, указывающий время выплат. Этот аргумент должен равняться либо <c>DueDate.EndOfPeriod</c>, если выплаты должны производиться в конце периода, либо <c>DueDate.BegOfPeriod</c> в случае оплаты в начале периода. Если аргумент не задан, используется значение <c>DueDate.EndOfPeriod</c>.</param>
        <summary>Возвращает значение, определяющее процентный платеж аннуитета, рассчитываемый на основе периодических фиксированных выплат и постоянной процентной ставки.</summary>
        <returns>Процентный платеж аннуитета, рассчитываемый на основе периодических фиксированных выплат и постоянной процентной ставки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Аннуитет — это серия фиксированных денежных выплат, сделанных с течением времени. Аннуитет может быть ссудой (например, закладкой на дом) или инвестициями (например, планом экономии на месяц).  
  
 Аргументы `Rate` и`NPer` должны вычисляться с использованием периодов выплат, выраженных в одних и тех же единицах. Например, если `Rate` вычисляется с использованием месяцев, `NPer` необходимо также вычислить его с помощью месяцев.  
  
 Для всех аргументов выплачиваемая наличность (например, депозиты на экономию) представлена отрицательными числами; денежные поступления (например, дивидендные чеки) представлены положительными числами.  
  
   
  
## Examples  
 В этом примере `IPmt` функция используется для расчета объема оплаты, когда все платежи имеют одинаковое значение. `APR / 12`Заданные процентные ставки за период (), период оплаты, для которого требуется интересная часть (`Period`), общее число платежей (`TotPmts`), текущее значение или основной субъект ссуды (`PVal`), будущее значение ссуды (`FVal`) и число, которое указывает, является ли платеж оплаченным в начале или в конце платежного периода (`PayType`).  
  
 [!code-vb[VbVbalrMath#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Per" /> &lt;= 0 или <paramref name="Per" /> &gt; <paramref name="NPer" /></exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Сводка по финансовым функциям</related>
      </Docs>
    </Member>
    <Member MemberName="IRR">
      <MemberSignature Language="C#" Value="public static double IRR (ref double[] ValueArray, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IRR(float64[]&amp; ValueArray, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function IRR (ByRef ValueArray As Double(), Optional Guess As Double = 0.1) As Double" />
      <MemberSignature Language="F#" Value="static member IRR :  * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.IRR (ValueArray, Guess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">Обязательный. Массив значений типа <see langword="Double" />, определяющий значения денежных операций. Этот массив должен содержать по крайней мере одно отрицательное значение (платеж) и одно положительное значение (поступление).</param>
        <param name="Guess">Необязательный параметр. Объект, задающий значение, которое будет возвращено функцией <see langword="IRR" />. Если этот параметр опущен, используется значение <paramref name="Guess" />, равное 0,1 (10 процентам).</param>
        <summary>Возвращает значение, определяющее внутреннюю ставку доходности для ряда периодических денежных потоков (платежей и поступлений).</summary>
        <returns>Внутренняя ставка доходности для ряда периодических денежных потоков (платежей и поступлений).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Внутренняя ставка возврата — это процентная ставка, полученная для инвестиций, состоящих из выплат и поступлений, которые происходят через регулярные интервалы.  
  
 `IRR` Функция использует порядок значений в массиве для интерпретации порядка выплат и поступлений. Обязательно введите значения платежей и поступлений в правильном порядке. Поток денежных средств для каждого периода не обязательно исправлять, так как он предназначен для аннуитета.  
  
 `IRR`вычисляется по итерации. Начиная со значения `Guess`, выполняет циклическое вычисление, `IRR` пока результат не будет неточным в пределах 0,00001%. Если `IRR` не удается найти результат по истечении 20 попыток, происходит сбой.  
  
   
  
## Examples  
 В этом примере `IRR` функция возвращает внутреннюю ставку возврата для ряда из пяти денежных потоков, содержащихся в массиве `Values()`. Первый элемент массива является отрицательным денежным потоком, представляющим затраты на начало бизнеса. Оставшиеся четыре денежных потока представляют положительные денежные потоки для последующих четырех лет. `Guess`Предполагаемая внутренняя скорость возврата.  
  
 [!code-vb[VbVbalrMath#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Недопустимые значения аргументов массива, или <paramref name="Guess" /> &lt;= –1.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Сводка по финансовым функциям</related>
      </Docs>
    </Member>
    <Member MemberName="MIRR">
      <MemberSignature Language="C#" Value="public static double MIRR (ref double[] ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 MIRR(float64[]&amp; ValueArray, float64 FinanceRate, float64 ReinvestRate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function MIRR (ByRef ValueArray As Double(), FinanceRate As Double, ReinvestRate As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double MIRR(cli::array &lt;double&gt; ^ % ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="F#" Value="static member MIRR :  * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.MIRR (ValueArray, FinanceRate, ReinvestRate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
        <Parameter Name="FinanceRate" Type="System.Double" />
        <Parameter Name="ReinvestRate" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">Обязательный. Массив значений типа <see langword="Double" />, определяющий значения денежных операций. Этот массив должен содержать по крайней мере одно отрицательное значение (платеж) и одно положительное значение (поступление).</param>
        <param name="FinanceRate">Обязательный. Значение, определяющее процентную ставку оплаты как стоимость финансирования.</param>
        <param name="ReinvestRate">Обязательный. Значение, определяющее процентную ставку доходов от реинвестирования денежных средств.</param>
        <summary>Возвращает значение, определяющее внутреннюю ставку доходности для ряда периодических денежных потоков (платежей и поступлений).</summary>
        <returns>Измененная внутренняя ставка доходности для ряда периодических денежных потоков (платежей и поступлений).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Измененная внутренняя частота возврата — это внутренняя ставка возврата, когда платежи и поступления изменяются по разным тарифам. Функция учитывает как стоимость инвестиций (`FinanceRate`), так и процентную ставку, полученную при реинвестировании денежных средств`ReinvestRate`(). `MIRR`  
  
 Аргументы `FinanceRate` и`ReinvestRate` представляют собой процентные значения, выраженные в виде десятичных значений. Например, 12 процентов выражается как 0,12.  
  
 `MIRR` Функция использует порядок значений в массиве для интерпретации порядка выплат и поступлений. Обязательно введите значения платежей и поступлений в правильном порядке.  
  
   
  
## Examples  
 В этом примере `MIRR` функция используется для возврата измененной внутренней ставки возврата для ряда денежных потоков, содержащихся в массиве `Values()`. `LoanAPR`представляет интерес финансирования и `InvAPR` представляет процентную ставку, полученную на реинвестиций.  
  
 [!code-vb[VbVbalrMath#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ранг <paramref name="ValueArray" /> не равен 1, <paramref name="FinanceRate" /> =-1, или <paramref name="ReinvestRate" /> =-1</exception>
        <exception cref="T:System.DivideByZeroException">Произошло деление на ноль.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.DivideByZeroException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Сводка по финансовым функциям</related>
      </Docs>
    </Member>
    <Member MemberName="NPer">
      <MemberSignature Language="C#" Value="public static double NPer (double Rate, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPer(float64 Rate, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPer (Rate As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member NPer : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.NPer (Rate, Pmt, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Обязательный. Процентная ставка за период. Например, при взятии ссуды на автомобиль под годовую процентную ставку (APR) размером 10% с ежемесячными выплатами ставка за период равна отношению 0,1/12 или 0,0083.</param>
        <param name="Pmt">Обязательный. Платеж за каждый период. Обычно платежи содержат основную сумму и проценты, которые не изменяются на протяжении периода действия аннуитета.</param>
        <param name="PV">Обязательный. Значение, задающее текущую сумму (или значение на сегодняшний день) серии будущих платежей или поступлений. Например, если для покупки автомобиля взят заем, то эта сумма представляет собой текущее значение предстоящих ежемесячных платежей за автомобиль.</param>
        <param name="FV">Необязательный параметр. Значение, задающее требуемую будущую сумму или баланс наличности после уплаты последнего платежа. Например, будущее значение ссуды равно $0, поcкольку такова будет ее величина после последней выплаты. Но если требуется собрать за 18 лет сумму в $50 000 на образование детей, то будущая сумма будет равна $50 000. Если этот аргумент опущен, используется значение 0.</param>
        <param name="Due">Необязательный параметр. Объект типа <see cref="T:Microsoft.VisualBasic.DueDate" />, указывающий время выплат. Этот аргумент должен равняться либо <c>DueDate.EndOfPeriod</c>, если выплаты должны производиться в конце периода, либо <c>DueDate.BegOfPeriod</c> в случае оплаты в начале периода. Если аргумент не задан, используется значение <c>DueDate.EndOfPeriod</c>.</param>
        <summary>Возвращает значение, определяющее число периодов выплат аннуитета, рассчитываемое на основе периодических фиксированных платежей и постоянной процентной ставки.</summary>
        <returns>Число периодов выплат аннуитета, рассчитываемое на основе периодических фиксированных платежей и постоянной процентной ставки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Аннуитет — это серия фиксированных денежных выплат, сделанных за определенный период времени. Аннуитет может быть ссудой (например, закладкой на дом) или инвестициями (например, планом экономии на месяц).  
  
 Для всех аргументов выплачиваемая наличность (например, депозиты на экономию) представлена отрицательными числами; денежные поступления (например, дивидендные чеки) представлены положительными числами.  
  
   
  
## Examples  
 В этом примере `NPer` функция возвращает количество периодов, в течение которых необходимо оплатить платежи, значение которых содержится в `PVal`. Кроме того, здесь указаны процентная ставка за период`APR / 12`(), платеж (`Payment`), будущее значение ссуды (`FVal`) и число, которое указывает, является ли платеж причиной начала или окончания периода оплаты (`PayType`).  
  
 [!code-vb[VbVbalrMath#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Rate" /> = 0 и <paramref name="Pmt" /> = 0</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Сводка по финансовым функциям</related>
      </Docs>
    </Member>
    <Member MemberName="NPV">
      <MemberSignature Language="C#" Value="public static double NPV (double Rate, ref double[] ValueArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPV(float64 Rate, float64[]&amp; ValueArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPV (Rate As Double, ByRef ValueArray As Double()) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double NPV(double Rate, cli::array &lt;double&gt; ^ % ValueArray);" />
      <MemberSignature Language="F#" Value="static member NPV : double *  -&gt; double" Usage="Microsoft.VisualBasic.Financial.NPV (Rate, ValueArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="Rate">Обязательный. Представленное в виде десятичного числа значение, задающее размер учетной ставки за период времени.</param>
        <param name="ValueArray">Обязательный. Массив значений типа <see langword="Double" />, определяющий значения денежных операций. Этот массив должен содержать по крайней мере одно отрицательное значение (платеж) и одно положительное значение (поступление).</param>
        <summary>Возвращает значение, определяющее величину чистой приведенной стоимости инвестирования на основе ряда периодических денежных потоков (платежей и поступлений) и учетной ставки.</summary>
        <returns>Значение, определяющее величину чистой приведенной стоимости инвестирования на основе ряда периодических денежных потоков (платежей и поступлений) и учетной ставки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чистая текущая стоимость инвестиции — текущее значение будущих выплат и поступлений.  
  
 `NPV` Функция использует порядок значений в массиве для интерпретации порядка выплат и поступлений. Обязательно введите значения платежей и поступлений в правильном порядке.  
  
 `NPV` Инвестиции начинаются на один период до даты первого значения потока денежных средств и заканчиваются последним значением потока денежных средств в массиве.  
  
 Вычисление чистой представленной величины основано на будущих денежных потоках. Если первый денежный поток происходит в начале первого периода, то первое значение должно быть добавлено к значению, возвращаемому `NPV` , и не должно включаться в `ValueArray`значения потока денежных средств.  
  
 Функция аналогична `PV` функции (текущее `PV` значение), за исключением того, что функция позволяет денежным потокам начинаться либо в конце, либо в начале периода. `NPV` В отличие от значений `NPV` переменных денежных потоков `PV` , денежные потоки должны быть фиксированы на протяжении всего инвестиций.  
  
   
  
## Examples  
 В этом примере `NPV` функция используется для возврата чистой текущей величины для ряда денежных потоков, содержащихся в массиве `values()`. Возвращаемое значение, хранящееся в `FixedRetRate`, представляет фиксированную внутреннюю скорость возврата.  
  
 [!code-vb[VbVbalrMath#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Значение <paramref name="ValueArray" /> равно <see langword="Nothing" />, ранг <paramref name="ValueArray" /> &lt;&gt; 1, или <paramref name="Rate" /> = –1</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Сводка по финансовым функциям</related>
      </Docs>
    </Member>
    <Member MemberName="Pmt">
      <MemberSignature Language="C#" Value="public static double Pmt (double Rate, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Pmt(float64 Rate, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pmt (Rate As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member Pmt : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.Pmt (Rate, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Обязательный. Процентная ставка за период. Например, при взятии ссуды на автомобиль под годовую процентную ставку (APR) размером 10% с ежемесячными выплатами ставка за период равна отношению 0,1/12 или 0,0083.</param>
        <param name="NPer">Обязательный. Общее количество периодов платежей аннуитета. Например, при ежемесячных выплатах ссуды за автомобиль на протяжении 4 лет общее количество периодов выплат будет равно 4 * 12 (или 48).</param>
        <param name="PV">Обязательный. Значение, определяющее текущую стоимость (или общую сумму) платежей, которые должны быть уплачены в будущем. Например, если для покупки автомобиля взят заем, то эта сумма представляет собой текущее значение предстоящих ежемесячных платежей за автомобиль.</param>
        <param name="FV">Необязательный параметр. Значение, задающее требуемую будущую сумму или баланс наличности после уплаты последнего платежа. Например, будущее значение ссуды равно $0, поcкольку такова будет ее величина после последней выплаты. Но если требуется собрать за 18 лет сумму в $50 000 на образование детей, то будущая сумма будет равна $50 000. Если этот аргумент опущен, используется значение 0.</param>
        <param name="Due">Необязательный параметр. Объект типа <see cref="T:Microsoft.VisualBasic.DueDate" />, указывающий время выплат. Этот аргумент должен равняться либо <c>DueDate.EndOfPeriod</c>, если выплаты должны производиться в конце периода, либо <c>DueDate.BegOfPeriod</c> в случае оплаты в начале периода. Если аргумент не задан, используется значение <c>DueDate.EndOfPeriod</c>.</param>
        <summary>Возвращает значение, определяющее платеж по аннуитету на основе периодических фиксированных платежей и постоянной процентной ставки.</summary>
        <returns>Платеж по аннуитету на основе периодических фиксированных платежей и постоянной процентной ставки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Аннуитет — это серия фиксированных денежных выплат, сделанных в течение определенного периода времени. Аннуитет может быть ссудой (например, закладкой на дом) или инвестициями (например, планом экономии на месяц).  
  
 Аргументы `Rate` и`NPer` должны вычисляться с использованием периодов выплат, выраженных в одних и тех же единицах. Например, если `Rate` вычисляется с использованием месяцев, `NPer` необходимо также вычислить его с помощью месяцев.  
  
 Для всех аргументов выплачиваемая наличность (например, депозиты на экономию) представлена отрицательными числами; денежные поступления (например, дивидендные чеки) представлены положительными числами.  
  
   
  
## Examples  
 В этом примере `Pmt` функция используется для возврата ежемесячного платежа за кредит в течение фиксированного периода. Это процентная ставка за период (`APR / 12`), общее количество платежей (`TotPmts`), текущее значение`PVal`ссуды (), будущее значение ссуды`FVal`() и число, указывающее, является ли Оплата происходит в начале или в конце платежного периода`(PayType).`  
  
 [!code-vb[VbVbalrMath#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="NPer" /> = 0.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Сводка по финансовым функциям</related>
      </Docs>
    </Member>
    <Member MemberName="PPmt">
      <MemberSignature Language="C#" Value="public static double PPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member PPmt : double * double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.PPmt (Rate, Per, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Обязательный. Процентная ставка за период. Например, при взятии ссуды на автомобиль под годовую процентную ставку (APR) размером 10% с ежемесячными выплатами ставка за период равна отношению 0,1/12 или 0,0083.</param>
        <param name="Per">Обязательный. Расчетный период в интервале от 1 до <paramref name="NPer" />.</param>
        <param name="NPer">Обязательный. Общее количество периодов платежей аннуитета. Например, при ежемесячных выплатах ссуды за автомобиль на протяжении 4 лет общее количество периодов выплат будет равно 4 x 12 (или 48).</param>
        <param name="PV">Обязательный. Текущее значение из серии будущих платежей или поступлений. Например, если для покупки автомобиля взят заем, то эта сумма представляет собой текущее значение предстоящих ежемесячных платежей за автомобиль.</param>
        <param name="FV">Необязательный параметр. Значение, задающее требуемую будущую сумму или баланс наличности после уплаты последнего платежа. Например, будущее значение ссуды равно $0, поcкольку такова будет ее величина после последней выплаты. Но если требуется собрать за 18 лет сумму в $50 000 на образование детей, то будущая сумма будет равна $50 000. Если этот аргумент опущен, используется значение 0.</param>
        <param name="Due">Необязательный параметр. Объект типа <see cref="T:Microsoft.VisualBasic.DueDate" />, указывающий время выплат. Этот аргумент должен равняться либо <c>DueDate.EndOfPeriod</c>, если выплаты должны производиться в конце периода, либо <c>DueDate.BegOfPeriod</c> в случае оплаты в начале периода. Если аргумент не задан, используется значение <c>DueDate.EndOfPeriod</c>.</param>
        <summary>Возвращает значение, определяющее главный платеж аннуитета, рассчитываемый на основе периодических фиксированных выплат и постоянной процентной ставки.</summary>
        <returns>Главный платеж аннуитета, рассчитываемый на основе периодических фиксированных выплат и постоянной процентной ставки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Аннуитет — это серия фиксированных денежных выплат, сделанных за определенный период времени. Аннуитет может быть ссудой (например, закладкой на дом) или инвестициями (например, планом экономии на месяц).  
  
 Аргументы `Rate` и`NPer` должны вычисляться с использованием периодов выплат, выраженных в одних и тех же единицах. Например, если `Rate` вычисляется с использованием месяцев, `NPer` необходимо также вычислить его с помощью месяцев.  
  
 Для всех аргументов выплачиваемая наличность (например, депозиты на экономию) представлена отрицательными числами; денежные поступления (например, дивидендные чеки) представлены положительными числами.  
  
   
  
## Examples  
 В этом примере `PPmt` функция используется для вычисления того, какая часть платежа за определенный период является основным, если все платежи имеют одинаковое значение. `APR / 12`Это процентная ставка за период (), период платежа, для которого требуется основная часть (`Period`), общее количество платежей (`TotPmts`), текущее значение или основной субъект ссуды (`PVal`), будущее значение ссуды (`FVal`) и число, которое указывает, является ли платеж оплаченным в начале или в конце платежного периода (`PayType`).  
  
 [!code-vb[VbVbalrMath#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Per" /> &lt;=0 или <paramref name="Per" /> &gt; <paramref name="NPer" />.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Сводка по финансовым функциям</related>
      </Docs>
    </Member>
    <Member MemberName="PV">
      <MemberSignature Language="C#" Value="public static double PV (double Rate, double NPer, double Pmt, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PV(float64 Rate, float64 NPer, float64 Pmt, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PV (Rate As Double, NPer As Double, Pmt As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member PV : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.PV (Rate, NPer, Pmt, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Обязательный. Процентная ставка за период. Например, при взятии ссуды на автомобиль под годовую процентную ставку (APR) размером 10% с ежемесячными выплатами ставка за период равна отношению 0,1/12 или 0,0083.</param>
        <param name="NPer">Обязательный. Общее количество периодов платежей аннуитета. Например, при ежемесячных выплатах ссуды за автомобиль на протяжении 4 лет количество периодов выплат будет равно 4 * 12 (или 48).</param>
        <param name="Pmt">Обязательный. Платеж за каждый период. Обычно платежи содержат основную сумму и проценты, которые не изменяются на протяжении периода действия аннуитета.</param>
        <param name="FV">Необязательный параметр. Значение, задающее требуемую будущую сумму или баланс наличности после уплаты последнего платежа. Например, будущее значение ссуды равно $0, поcкольку такова будет ее величина после последней выплаты. Но если требуется собрать за 18 лет сумму в $50 000 на образование детей, то будущая сумма будет равна $50 000. Если этот аргумент опущен, используется значение 0.</param>
        <param name="Due">Необязательный параметр. Объект типа <see cref="T:Microsoft.VisualBasic.DueDate" />, указывающий время выплат. Этот аргумент должен равняться либо <c>DueDate.EndOfPeriod</c>, если выплаты должны производиться в конце периода, либо <c>DueDate.BegOfPeriod</c> в случае оплаты в начале периода. Если аргумент не задан, используется значение <c>DueDate.EndOfPeriod</c>.</param>
        <summary>Возвращает значение, определяющее текущее значение аннуитета на основе фиксированных периодических платежей и постоянной процентной ставки.</summary>
        <returns>Текущее значение аннуитета на основе фиксированных периодических платежей и постоянной процентной ставки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Аннуитет — это серия фиксированных денежных выплат, сделанных за определенный период времени. Аннуитет может быть ссудой (например, закладкой на дом) или инвестициями (например, планом экономии на месяц).  
  
 Аргументы `Rate` и`NPer` должны вычисляться с использованием периодов выплат, выраженных в одних и тех же единицах. Например, если `Rate` вычисляется с использованием месяцев, `NPer` необходимо также вычислить его с помощью месяцев.  
  
 Для всех аргументов выплачиваемая наличность (например, депозиты на экономию) представлена отрицательными числами; денежные поступления (например, дивидендные чеки) представлены положительными числами.  
  
   
  
## Examples  
 В этом примере `PV` функция возвращает текущее значение $1 000 000 ренты, которое будет предоставлять $50 000 в течение следующих 20 лет. Указаны ожидаемая годовая процентная ставка`APR`(), общее число выплат (`TotPmts`), сумма каждого платежа (`YrIncome`), общее будущее значение инвестиции (`FVal`) и число, указывающее, все ли Оплата выполняется в начале или в конце платежного периода (`PayType`). Обратите `YrIncome` внимание, что является отрицательным числом, так как оно представляет оплату денежных средств по аннуитету каждый год.  
  
 [!code-vb[VbVbalrMath#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Сводка по финансовым функциям</related>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public static double Rate (double NPer, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Rate(float64 NPer, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rate (NPer As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod, Optional Guess As Double = 0.1) As Double" />
      <MemberSignature Language="F#" Value="static member Rate : double * double * double * double * Microsoft.VisualBasic.DueDate * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.Rate (NPer, Pmt, PV, FV, Due, Guess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="NPer">Обязательный. Общее количество периодов платежей аннуитета. Например, при ежемесячных выплатах ссуды за автомобиль на протяжении 4 лет общее количество периодов оплаты будет равно 4 x 12 (или 48).</param>
        <param name="Pmt">Обязательный. Платеж за каждый период. Обычно платежи содержат основную сумму и проценты, которые не изменяются на протяжении периода действия аннуитета.</param>
        <param name="PV">Обязательный. Значение, задающее текущую сумму (или значение на сегодняшний день) серии будущих платежей или поступлений. Например, если для покупки автомобиля взят заем, то эта сумма представляет собой текущее значение предстоящих ежемесячных платежей за автомобиль.</param>
        <param name="FV">Необязательный параметр. Значение, задающее требуемую будущую сумму или баланс наличности после уплаты последнего платежа. Например, будущее значение ссуды равно $0, поcкольку такова будет ее величина после последней выплаты. Но если требуется собрать за 18 лет сумму в $50 000 на образование детей, то будущая сумма будет равна $50 000. Если этот аргумент опущен, используется значение 0.</param>
        <param name="Due">Необязательный параметр. Объект типа <see cref="T:Microsoft.VisualBasic.DueDate" />, указывающий время выплат. Этот аргумент должен равняться либо <c>DueDate.EndOfPeriod</c>, если выплаты должны производиться в конце периода, либо <c>DueDate.BegOfPeriod</c> в случае оплаты в начале периода. Если аргумент не задан, используется значение <c>DueDate.EndOfPeriod</c>.</param>
        <param name="Guess">Необязательный параметр. Оцениваемое значение, возвращаемое функцией <see langword="Rate" />. Если этот параметр опущен, используется значение <paramref name="Guess" />, равное 0,1 (10 процентам).</param>
        <summary>Возвращает значение, определяющее процентную ставку за период для аннуитета.</summary>
        <returns>Процентная ставка за период для аннуитета.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Аннуитет — это серия фиксированных денежных выплат, сделанных за определенный период времени. Аннуитет может быть ссудой (например, закладкой на дом) или инвестициями (например, планом экономии на месяц).  
  
 Для всех аргументов выплачиваемая наличность (например, депозиты на экономию) представлена отрицательными числами; денежные поступления (например, дивидендные чеки) представлены положительными числами.  
  
 `Rate`вычисляется по итерации. Начиная со значения `Guess`, выполняет циклическое вычисление, `Rate` пока результат не будет неточным в пределах 0,00001%. Если `Rate` не удается найти результат по истечении 20 попыток, происходит сбой. Если предположение составляет 10 процентов и `Rate` завершается сбоем, попробуйте использовать другое `Guess`значение для.  
  
   
  
## Examples  
 В этом примере `Rate` функция используется для вычисления процентной ставки по ссуде с учетом общего числа платежей (`TotPmts`), суммы платежа (`Payment`), текущего значения или участника ссуды (`PVal`), будущего значение ссуды (`FVal`), число, указывающее, является ли оплата датой начала или окончания периода выплат (`PayType`), и приближением ожидаемой процентной ставки (`Guess`).  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="NPer" /> &lt;= 0.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Сводка по финансовым функциям</related>
      </Docs>
    </Member>
    <Member MemberName="SLN">
      <MemberSignature Language="C#" Value="public static double SLN (double Cost, double Salvage, double Life);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SLN(float64 Cost, float64 Salvage, float64 Life) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SLN (Cost As Double, Salvage As Double, Life As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SLN(double Cost, double Salvage, double Life);" />
      <MemberSignature Language="F#" Value="static member SLN : double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.SLN (Cost, Salvage, Life)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Обязательный. Начальная стоимость актива.</param>
        <param name="Salvage">Обязательный. Стоимость актива на момент окончания срока его эксплуатации.</param>
        <param name="Life">Обязательный. Срок эксплуатации актива.</param>
        <summary>Возвращает значение, определяющее равномерную амортизацию актива за один период времени.</summary>
        <returns>Равномерная амортизация актива за один период времени.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Период амортизации должен быть выражен в той же единице, что `Life` и аргумент. Все аргументы должны быть положительными числами.  
  
   
  
## Examples  
 В этом примере `SLN` функция используется для возврата линейной амортизации актива за один период с учетом первоначальной стоимости ресурса (`InitCost`), остаточной стоимости в конце полезного жизненного цикла актива (`SalvageVal`) и общего срока ресурс в годах (`LifeTime`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Life" /> = 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Сводка по финансовым функциям</related>
      </Docs>
    </Member>
    <Member MemberName="SYD">
      <MemberSignature Language="C#" Value="public static double SYD (double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SYD(float64 Cost, float64 Salvage, float64 Life, float64 Period) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SYD (Cost As Double, Salvage As Double, Life As Double, Period As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SYD(double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="F#" Value="static member SYD : double * double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.SYD (Cost, Salvage, Life, Period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Обязательный. Начальная стоимость актива.</param>
        <param name="Salvage">Обязательный. Стоимость актива на момент окончания срока его эксплуатации.</param>
        <param name="Life">Обязательный. Срок эксплуатации актива.</param>
        <param name="Period">Обязательный. Период расчета амортизации актива.</param>
        <summary>Возвращает значение, определяющее величину ускоренной амортизации актива за указанный период времени.</summary>
        <returns>Величина ускоренной амортизации актива за указанный период времени.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Аргументы `Life` и`Period` должны быть выражены в одних и тех же единицах. Например, если `Life` указано в месяцах, `Period` необходимо также указать в месяцах. Все аргументы должны быть положительными числами.  
  
   
  
## Examples  
 В этом примере `SYD` функция используется для возврата амортизации актива за указанный период с учетом начальной стоимости ресурса (`InitCost`), остаточной стоимости в конце полезного жизненного цикла актива (`SalvageVal`) и общего времени существования актива в years`LifeTime`().  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Salvage" /> &lt; 0, <paramref name="Period" /> &gt; <paramref name="Life" />, или <paramref name="Period" /> &lt;= 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Сводка по финансовым функциям</related>
      </Docs>
    </Member>
  </Members>
</Type>
