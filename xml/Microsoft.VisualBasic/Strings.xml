<Type Name="Strings" FullName="Microsoft.VisualBasic.Strings">
  <Metadata><Meta Name="ms.openlocfilehash" Value="55b8e873a26c9d2e0bbbdfd649eab50236389e84" /><Meta Name="ms.sourcegitcommit" Value="95e24aee1283af2f120fc5da4b0bdc0712ab698f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="05/06/2019" /><Meta Name="ms.locfileid" Value="65156329" /></Metadata><TypeSignature Language="C#" Value="public sealed class Strings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Strings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Strings" />
  <TypeSignature Language="VB.NET" Value="Public Module Strings" />
  <TypeSignature Language="C++ CLI" Value="public ref class Strings sealed" />
  <TypeSignature Language="F#" Value="type Strings = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see langword="Strings" /> Модуль содержит процедуры, используемые для выполнения операций со строками.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот модуль поддерживает ключевые слова языка Visual Basic и члены библиотеки времени выполнения, которые управляют строками.  
  
   
  
## Examples  
 В следующем примере показано, как для разбиения строки относительно пробелов.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Ключевые слова (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Члены библиотеки времени выполнения Visual Basic</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="Asc">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает целочисленное значение, представляющее код заданного символа.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(char String);" />
      <MemberSignature Language="F#" Value="static member Asc : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="String">Обязательный. Любое допустимое <see langword="Char" /> или <see langword="String" /> выражение. Если <paramref name="String" /> — <see langword="String" /> выражение, только первый символ строки используется для входных данных. Если <paramref name="String" /> — <see langword="Nothing" /> или не содержит знаков, <see cref="T:System.ArgumentException" /> возникает ошибка.</param>
        <summary>Возвращает целочисленное значение, представляющее код заданного символа.</summary>
        <returns>Код символа, соответствующий символу.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Возвращает *кодовую точку*, или код символа, для входного символа. Это может быть от 0 до 255 для однобайтовых символов кодировки (SBCS) и значения от -32768 до 32767 для значений двухбайтовой кодировки (DBCS).  
  
 `AscW` Возвращает кодовую точку Юникода для входного символа. Это может быть от 0 до 65535. Возвращаемое значение не зависит от языка и региональных параметров и параметров кодовой страницы для текущего потока.  
  
> [!NOTE]
>  `AscB` Функции более ранних версиях Visual Basic возвращает код для байта, а не символ. Он используется главным образом для преобразования строк в приложениях двухбайтовой кодировки (DBCS). Все строки Visual Basic 2005, в формате Юникод, и `AscB` больше не поддерживается.  
  
   
  
## Examples  
 В следующем примере используется `Asc` функция, возвращающая `Integer` символов коды, соответствующее первой буквой в каждой строке.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">Функции (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member Asc : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="String">Обязательный. Любое допустимое <see langword="Char" /> или <see langword="String" /> выражение. Если <paramref name="String" /> — <see langword="String" /> выражение, только первый символ строки используется для входных данных. Если <paramref name="String" /> — <see langword="Nothing" /> или не содержит знаков, <see cref="T:System.ArgumentException" /> возникает ошибка.</param>
        <summary>Возвращает целочисленное значение, представляющее код заданного символа.</summary>
        <returns>Код символа, соответствующий символу.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Возвращает *кодовую точку*, или код символа, для входного символа. Это может быть от 0 до 255 для однобайтовых символов кодировки (SBCS) и значения от -32768 до 32767 для значений двухбайтовой кодировки (DBCS).  
  
 `AscW` Возвращает кодовую точку Юникода для входного символа. Это может быть от 0 до 65535. Возвращаемое значение не зависит от языка и региональных параметров и параметров кодовой страницы для текущего потока.  
  
> [!NOTE]
>  `AscB` Функции более ранних версиях Visual Basic возвращает код для байта, а не символ. Он используется главным образом для преобразования строк в приложениях двухбайтовой кодировки (DBCS). Все строки Visual Basic 2005, в формате Юникод, и `AscB` больше не поддерживается.  
  
   
  
## Examples  
 В следующем примере используется `Asc` функция, возвращающая `Integer` символов коды, соответствующее первой буквой в каждой строке.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">Функции (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AscW">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает целочисленное значение, представляющее код заданного символа.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function AscW (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(char String);" />
      <MemberSignature Language="F#" Value="static member AscW : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">Обязательный. Любое допустимое <see langword="Char" /> или <see langword="String" /> выражение. Если <paramref name="String" /> — <see langword="String" /> выражение, только первый символ строки используется для входных данных. Если <paramref name="String" /> — <see langword="Nothing" /> или не содержит знаков, <see cref="T:System.ArgumentException" /> возникает ошибка.</param>
        <summary>Возвращает целочисленное значение, представляющее код заданного символа.</summary>
        <returns>Код символа, соответствующий символу.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Возвращает *кодовую точку*, или код символа, для входного символа. Это может быть от 0 до 255 для однобайтовых символов кодировки (SBCS) и значения от -32768 до 32767 для значений двухбайтовой кодировки (DBCS).  
  
 `AscW` Возвращает кодовую точку Юникода для входного символа. Это может быть от 0 до 65535. Возвращаемое значение не зависит от языка и региональных параметров и параметров кодовой страницы для текущего потока.  
  
> [!NOTE]
>  `AscB` Функции более ранних версиях Visual Basic возвращает код для байта, а не символ. Он используется главным образом для преобразования строк в приложениях двухбайтовой кодировки (DBCS). Все строки Visual Basic 2005, в формате Юникод, и `AscB` больше не поддерживается.  
  
   
  
## Examples  
 В следующем примере используется `Asc` функция, возвращающая `Integer` символов коды, соответствующее первой буквой в каждой строке.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">Функции (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member AscW : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">Обязательный. Любое допустимое <see langword="Char" /> или <see langword="String" /> выражение. Если <paramref name="String" /> — <see langword="String" /> выражение, только первый символ строки используется для входных данных. Если <paramref name="String" /> — <see langword="Nothing" /> или не содержит знаков, <see cref="T:System.ArgumentException" /> возникает ошибка.</param>
        <summary>Возвращает целочисленное значение, представляющее код заданного символа.</summary>
        <returns>Код символа, соответствующий символу.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Возвращает *кодовую точку*, или код символа, для входного символа. Это может быть от 0 до 255 для однобайтовых символов кодировки (SBCS) и значения от -32768 до 32767 для значений двухбайтовой кодировки (DBCS).  
  
 `AscW` Возвращает кодовую точку Юникода для входного символа. Это может быть от 0 до 65535. Возвращаемое значение не зависит от языка и региональных параметров и параметров кодовой страницы для текущего потока.  
  
> [!NOTE]
>  `AscB` Функции более ранних версиях Visual Basic возвращает код для байта, а не символ. Он используется главным образом для преобразования строк в приложениях двухбайтовой кодировки (DBCS). Все строки Visual Basic 2005, в формате Юникод, и `AscB` больше не поддерживается.  
  
   
  
## Examples  
 В следующем примере используется `Asc` функция, возвращающая `Integer` символов коды, соответствующее первой буквой в каждой строке.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">Функции (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Chr">
      <MemberSignature Language="C#" Value="public static char Chr (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char Chr(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Chr (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Chr(int CharCode);" />
      <MemberSignature Language="F#" Value="static member Chr : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.Chr CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="CharCode">Обязательный. Выражение <see langword="Integer" />, представляющее <c>кодовую точку</c> (код символа) для символа.</param>
        <summary>Возвращает символ, связанный с указанным кодом знака.</summary>
        <returns>Знак, связанный с указанным кодом знака.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Асимметричный диапазон, принятых для `CharCode` компенсирует различия в хранении `Short` и `Integer`. Например, 29183 является `Short` но 36353 `Integer`. Это также способствует совместимости с Visual Basic 6.0.  
  
 `Chr` использует <xref:System.Text.Encoding> в класс <xref:System.Text?displayProperty=nameWithType> пространства имен, чтобы определить, использует ли текущий поток набора однобайтовых символов (SBCS) или двухбайтовый символ задайте (DBCS). Затем он берет `CharCode` качестве кода, выберите из соответствующего набора. Диапазон может быть от 0 до 255 символов SBCS и от -32768 до 65535 символов (DBCS).  
  
 Возвращаемое значение зависит от кодовой страницы для текущего потока, который содержится в <xref:System.Globalization.TextInfo.ANSICodePage%2A> свойство <xref:System.Globalization.TextInfo> в класс <xref:System.Globalization> пространства имен. Вы можете получить <xref:System.Globalization.TextInfo.ANSICodePage%2A> , указав `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.  
  
 `ChrW` принимает `CharCode` как Юникода кодовую точку. Диапазон не зависит от языка и региональных параметров и параметров кодовой страницы для текущего потока. Значения от -32768 до-1 интерпретируется как значения в диапазоне от + 32768 до + 65535.  
  
 Числа в диапазоне от 0 до 31 являются так же, как стандартные непечатаемые коды ASCII. Например `Chr(10)` возвращает символ перевода строки.  
  
> [!NOTE]
>  `ChrB` В более ранних версиях Visual Basic функция возвращает один байт. Он используется главным образом для преобразования строк в приложениях двухбайтовой кодировки (DBCS). Все строки в Visual Basic и .NET Framework, хранятся в формате Юникод, и `ChrB` больше не поддерживается.  
  
   
  
## Examples  
 В следующем примере используется `Chr` функция возвращает символ, связанный с указанным кодом знака.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="CharCode" /> &lt; 0 или &gt; 255 для <see langword="Chr" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="ChrW">
      <MemberSignature Language="C#" Value="public static char ChrW (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char ChrW(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChrW (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ChrW(int CharCode);" />
      <MemberSignature Language="F#" Value="static member ChrW : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.ChrW CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">Обязательный. Выражение <see langword="Integer" />, представляющее <c>кодовую точку</c> (код символа) для символа.</param>
        <summary>Возвращает символ, связанный с указанным кодом знака.</summary>
        <returns>Знак, связанный с указанным кодом знака.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Асимметричный диапазон, принятых для `CharCode` компенсирует различия в хранении `Short` и `Integer`. Например, 29183 является `Short` но 36353 `Integer`. Это также способствует совместимости с Visual Basic 6.0.  
  
 `Chr` использует <xref:System.Text.Encoding> в класс <xref:System.Text?displayProperty=nameWithType> пространства имен, чтобы определить, использует ли текущий поток набора однобайтовых символов (SBCS) или двухбайтовый символ задайте (DBCS). Затем он берет `CharCode` качестве кода, выберите из соответствующего набора. Диапазон может быть от 0 до 255 символов SBCS и от -32768 до 65535 символов (DBCS).  
  
 Возвращаемое значение зависит от кодовой страницы для текущего потока, который содержится в <xref:System.Globalization.TextInfo.ANSICodePage%2A> свойство <xref:System.Globalization.TextInfo> в класс <xref:System.Globalization> пространства имен. Вы можете получить <xref:System.Globalization.TextInfo.ANSICodePage%2A> , указав `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.  
  
 `ChrW` принимает `CharCode` как Юникода кодовую точку. Диапазон не зависит от языка и региональных параметров и параметров кодовой страницы для текущего потока. Значения от -32768 до-1 интерпретируется как значения в диапазоне от + 32768 до + 65535.  
  
 Числа в диапазоне от 0 до 31 являются так же, как стандартные непечатаемые коды ASCII. Например `Chr(10)` возвращает символ перевода строки.  
  
> [!NOTE]
>  `ChrB` В более ранних версиях Visual Basic функция возвращает один байт. Он используется главным образом для преобразования строк в приложениях двухбайтовой кодировки (DBCS). Все строки в Visual Basic и .NET Framework, хранятся в формате Юникод, и `ChrB` больше не поддерживается.  
  
   
  
## Examples  
 В следующем примере используется `Chr` функция возвращает символ, связанный с указанным кодом знака.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="CharCode" /> &lt; –32768 или &gt; 65535 для <see langword="ChrW" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Filter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает отсчитываемый от нуля массив, содержащий подмножество <see langword="String" /> выделяемое согласно указанным условиям фильтрации.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As Object(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : obj[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.Object[]" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Match" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Include" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Обязательный. Одномерный массив строк, в котором необходимо выполнить поиск.</param>
        <param name="Match">Обязательный. Строка для поиска.</param>
        <param name="Include">Необязательный параметр. <see langword="Boolean" /> значение, указывающее, следует ли включить или исключить подстроки требуется возвращать <paramref name="Match" />. Если <paramref name="Include" /> — <see langword="True" />, <see langword="Filter" /> функция возвращает подмножество строк массива, содержащего <paramref name="Match" /> виде подстроки. Если <paramref name="Include" /> — <see langword="False" />, <see langword="Filter" /> функция возвращает подмножество строк массива, не содержащих <paramref name="Match" /> виде подстроки.</param>
        <param name="Compare">Необязательный параметр. Числовое значение, показывающее вид сравнения строк. Сведения о значениях см. в разделе "Параметры".</param>
        <summary>Возвращает отсчитываемый от нуля массив, содержащий подмножество <see langword="String" /> выделяемое согласно указанным условиям фильтрации.</summary>
        <returns>Массив с индексацией от нуля, который содержит подмножество массива типа <see langword="String" />, выделяемое согласно указанным условиям фильтрации.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если нет совпадений `Match` находятся в пределах `Source`, `Filter` функция возвращает пустой массив. Если возникает ошибка `Source` присваивается `Nothing` или не является одномерным массивом.  
  
 Массив, возвращаемый `Filter` функция содержит ровно столько элементов, которые может содержать число соответствующих элементов.  
  
 `Compare` Аргумент может иметь следующие значения.  
  
|Константа|Описание|  
|-|-|  
|Константа|Описание|  
|`CompareMethod.Binary`|Выполняется двоичное сравнение|  
|`CompareMethod.Text`|Выполняется текстовое сравнение|  
  
   
  
## Examples  
 В этом примере демонстрируется использование `Filter` функции.  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Source" /> — <see langword="Nothing" /> или не является одномерным массивом.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As String(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : string[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String[]" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Match" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Include" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Обязательный. Одномерный массив строк, в котором необходимо выполнить поиск.</param>
        <param name="Match">Обязательный. Строка для поиска.</param>
        <param name="Include">Необязательный параметр. <see langword="Boolean" /> значение, указывающее, следует ли включить или исключить подстроки требуется возвращать <paramref name="Match" />. Если <paramref name="Include" /> — <see langword="True" />, <see langword="Filter" /> функция возвращает подмножество строк массива, содержащего <paramref name="Match" /> виде подстроки. Если <paramref name="Include" /> — <see langword="False" />, <see langword="Filter" /> функция возвращает подмножество строк массива, не содержащих <paramref name="Match" /> виде подстроки.</param>
        <param name="Compare">Необязательный параметр. Числовое значение, показывающее вид сравнения строк. Сведения о значениях см. в разделе "Параметры".</param>
        <summary>Возвращает отсчитываемый от нуля массив, содержащий подмножество <see langword="String" /> выделяемое согласно указанным условиям фильтрации.</summary>
        <returns>Массив с индексацией от нуля, который содержит подмножество массива типа <see langword="String" />, выделяемое согласно указанным условиям фильтрации.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если нет совпадений `Match` находятся в пределах `Source`, `Filter` функция возвращает пустой массив. Если возникает ошибка `Source` присваивается `Nothing` или не является одномерным массивом.  
  
 Массив, возвращаемый `Filter` функция содержит ровно столько элементов, которые может содержать число соответствующих элементов.  
  
 `Compare` Аргумент может иметь следующие значения.  
  
|Константа|Описание|  
|-|-|  
|`CompareMethod.Binary`|Выполняется двоичное сравнение|  
|`CompareMethod.Text`|Выполняется текстовое сравнение|  
  
   
  
## Examples  
 В этом примере демонстрируется использование `Filter` функции.  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Source" /> — <see langword="Nothing" /> или не является одномерным массивом.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (object Expression, string Style = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Format(object Expression, string Style) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (Expression As Object, Optional Style As String = &quot;&quot;) As String" />
      <MemberSignature Language="F#" Value="static member Format : obj * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Format (Expression, Style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Style" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Обязательный. Любое допустимое выражение.</param>
        <param name="Style">Необязательный параметр. Недопустимый формат именованный или определенный пользователем <see langword="String" /> выражение.</param>
        <summary>Возвращает строку, отформатированную в соответствии с инструкциями, содержащимися в формате <see langword="String" /> выражение.</summary>
        <returns>Строка, отформатированная в соответствии с инструкциями, содержащимися в формате выражения <see langword="String" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.String.Format%2A?displayProperty=nameWithType> Метод также предоставляет аналогичную функциональность.  
  
 При форматировании нелокализованное числа в строковом формате, что позволит добиться желаемого эффекта следует использовать числового формата, определяемых пользователем.  
  
 При попытке форматирования числа без указания `Style`, `Format` функция предоставляет функциональность, аналогичную `Str` работать, несмотря на то, что учетом региональных стандартов. Тем не менее, положительных чисел в формате строк с помощью `Format` функция не включайте начальный пробел для знака значения; их преобразуются с помощью `Str` функцию сохранение начальным пробелом.  
  
## <a name="different-formats-for-different-numeric-values"></a>Различные форматы для различных числовых значений  
 Выражение определяемого пользователем формата для чисел может содержать от одного до трех разделов, разделенных точкой с запятой. Если `Style` аргумент `Format` функция содержит один из стандартных числовых форматов, допускается только один раздел.  
  
|Если вы используете|Это результат|  
|-|-|  
|Только один раздел|Выражение форматирования применяется ко всем значениям.|  
|Две секции|Первый раздел распространяется на положительные значения и нули; второй применяется для отрицательных значений.|  
|Три секции|Первый раздел распространяется на положительные значения, второй применяется для отрицательных значений и третий — к нулевым.|  
  
 В следующем примере имеется два раздела: первая определяет формат для положительных значений и нулей; Во втором разделе определяет формат отрицательных значений. Так как `Style` аргумент `Format` функция принимает строку, она заключена в кавычки.  
  
 [!code-vb[VbVbalrStrings#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#18)]  
  
 При включении запятой с между которыми ничего нет, пропущенный раздел выводится в формате положительного значения. Например, следующий формат отображает положительные и отрицательные значения форматируются в первом разделе и отображает `Zero` Если значение равно нулю.  
  
 [!code-vb[VbVbalrStrings#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#19)]  
  
## <a name="predefined-numeric-formats"></a>Предопределенные числовые форматы  
 В следующей таблице перечислены имена стандартных числовых форматов. Их можно использовать с именем, что `Style` аргумент для `Format` функции:  
  
|Название формата|Описание|  
|-|-|  
|`General Number`, `G`или `g`|Отображает число без разделителя групп разрядов.<br /><br /> Например `Format(&H3FA, "g")` возвращает `1018`.|  
|`Currency`, `C`или `c`|Отображает число с разделителя групп разрядов, если это необходимо; Отображает две цифры справа от десятичного разделителя. Вывод основан на параметрах локали системы.<br /><br /> Например `Format(1234567, "c")` возвращает `$1,234,567.00`.|  
|`Fixed`, `F`или `f`|Отображает по крайней мере одной цифры слева и две цифры справа от десятичного разделителя.<br /><br /> Например `Format(1234567, "f")` возвращает `1234567.00`.|  
|`Standard`, `N`или `n`|Отображает число с разделителя групп разрядов, менее одной цифры слева и две цифры справа от десятичного разделителя.<br /><br /> Например `Format(1234567, "n")` возвращает `1,234,567.00`.|  
|`Percent`|Отображает число, умноженное на 100, с помощью знака процента (%) немедленно добавлением справа; всегда отображает две цифры справа от десятичного разделителя.<br /><br /> Например `Format(0.4744, "Percent")` возвращает `47.44%`.|  
|`P`, или `p`|Отображает число с разделителем тысяч, умноженное на 100, с помощью знака процента (%) стоящим справа и отделенным от одного пробела; всегда отображает две цифры справа от десятичного разделителя.<br /><br /> Например `Format(0.80345, "p")` возвращает `80.35 %`.|  
|`Scientific`|Использует стандартное научное обозначение с двумя значащими разрядами.<br /><br /> Например `Format(1234567, "Scientific")` возвращает `1.23E+06`.|  
|`E`, или `e`|Использует стандартное научное обозначение с шестью значащими разрядами.<br /><br /> Например `Format(1234567, "e")` возвращает `1.234567e+006`.|  
|`D`, или `d`|Отображает число в виде строка, содержащая значение числа в формате десятичным (основание 10). Этот параметр поддерживается для целочисленных типов (`Byte`, `Short`, `Integer`, `Long`) только.<br /><br /> Например `Format(&H7F, "d")` возвращает `127`.|  
|`X`, или `x`|Отображает число в виде строка, содержащая значение числа в формате шестнадцатеричным (основание 16). Этот параметр поддерживается для целочисленных типов (`Byte`, `Short`, `Integer`, `Long`) только.<br /><br /> Например `Format(127, "x")` возвращает `7f`.|  
|`Yes/No`|Отображает `No` Если число равно 0; в противном случае — значение, `Yes`.<br /><br /> Например `Format(0, "Yes/No")` возвращает `No`.|  
|`True/False`|Отображает `False` Если число равно 0; в противном случае — значение, `True`.<br /><br /> Например `Format(1, "True/False")` возвращает `True`.|  
|`On/Off`|Отображает `Off` Если число равно 0; в противном случае — значение, `On`.<br /><br /> Например `Format(1, "On/Off")` возвращает `On`.|  
  
### <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 `Yes/No`, `True/False`, И `On/Off` форматы, не поддерживаются.  
  
## <a name="user-defined-numeric-formats"></a>Пользовательские числовые форматы  
 В следующей таблице указаны символы, которые можно использовать для создания определяемых пользователем числовые форматы. Их можно использовать для построения `Style` аргумент для `Format` функции:  
  
|Знак|Описание|  
|-|-|  
|Нет|Отображает число без форматирования.|  
|(`0`)|Заполнитель для цифр. Отображает цифру или ноль. Если выражение содержит цифру в позиции, где в строке формата стоит ноль, отобразите ее; в противном случае выводится ноль в этой позиции.<br /><br /> Если число имеет меньше разрядов, чем задано нулей (с обеих сторон от десятичного разделителя) в выражении форматирования, отображаются начальные или конечные нули. Если число имеет больше разрядов справа от десятичного разделителя, чем нулей справа от десятичного разделителя в выражении форматирования, округление до количества десятичных разрядов, сколько нулей. Если число имеет больше цифр слева от десятичного разделителя, чем нулей слева от десятичного разделителя в выражении форматирования, лишние цифры без изменения отображаются.|  
|(`#`)|Заполнитель для цифр. Отображает цифра или пустое. Если выражение содержит цифру в позиции, где `#` символ встречается в строке формата, отображается; в противном случае ничего не отображается в этой позиции.<br /><br /> Этот символ работает подобно `0` заполнитель для цифр, за исключением того, что начальные и конечные нули не отображаются, если число имеет меньше разрядов, чем `#` с обеих сторон от десятичного разделителя в выражении форматирования.|  
|(`.`)|Заполнитель десятичного разделителя. Он определяет, сколько разрядов отображается слева и справа от десятичного разделителя. Если выражение формата содержит только `#` символов слева от этого символа; числа меньше 1 начинаются с десятичного разделителя. Чтобы отобразить нулем в начале дробных числах, укажите ноль в качестве первого заполнителя цифры слева от десятичного разделителя. В некоторых языковых стандартах в качестве десятичного разделителя используется запятая. Фактический символ, используемый в качестве десятичного заполнителя в отформатированном зависит от числового формата, распознаваемого системой. Таким образом следует использовать период в качестве десятичного заполнителя в собственных форматах даже если вы находитесь в языковом стандарте, использующих запятую в качестве десятичного заполнителя. Отформатированная строка будет выводиться в формате для языкового стандарта.|  
|(`%`)|Заполнитель процента. Умножает выражение на 100. Символ процента (`%`) вставляется там, где он отображается в строке формата.|  
|(`,`)|Разделитель групп разрядов. Разделитель групп разрядов отделяет тысячи от сотен в числе с четырьмя или более разрядами слева от десятичного разделителя. Указан стандартном использовании разделителя групп разрядов Если формат разделителя групп разрядов, заполнители цифр (`0` или `#`).<br /><br /> Разделитель групп разрядов слева от десятичного разделителя (ли задано десятичное число) или крайним правым символ в строке, это означает «масштабирование числа путем деления 1000, округления при необходимости.» Числа меньше 1000, но меньше 500 отображаются как `1`, а числа меньше 500 представляются в милливаттах `0`. Два смежных разделителя групп разрядов в этой позиции масштабировать с помощью коэффициентом 1 миллион и дополнительный фактор 1 000 за каждый дополнительный разделитель.<br /><br /> Несколько разделителей групп разрядов в любой позиции, кроме позиции непосредственно слева от десятичного разделителя или конечной позиции в строке обрабатываются просто как разделители групп разрядов. В некоторых языковых стандартах как разделитель групп разрядов используется точка. Фактический символ, используемый в качестве разделителя групп разрядов в отформатированном зависит от числового формата, распознаваемого системой. Таким образом следует использовать запятую как разделитель групп разрядов в собственных форматах даже если вы находитесь в языковой стандарт, который используется период в качестве разделителя тысяч. Отформатированная строка будет выводиться в формате для языкового стандарта.<br /><br /> Например рассмотрим следующие три строки форматирования:<br /><br /> -   `"#,0."`, который использует разделитель тысяч для форматирования числа 100 миллионов как строки «100,000,000».<br />-   `"#0,."`, которая использует деление на тысячу для форматирования числа 100 миллионов строки «100000».<br />-   `"#,0,."`, который использует разделитель тысяч и деление на тысячу для форматирования числа 100 миллионов как строки «100,000».|  
|(`:`)|Разделитель компонентов времени. В некоторых языковых стандартах разделителя времени могут использоваться другие символы. Разделитель компонентов времени разделяет часы, минуты и секунды при форматировании значений времени. Фактический символ, используемый в качестве разделителя времени в отформатированном значении, определяется параметрами системы.|  
|(`/`)|Разделитель компонентов даты. В некоторых языковых стандартах в качестве разделителя дат использоваться другие символы. Разделитель компонентов даты разделяет день, месяц и год при форматировании значений даты. Фактический символ, используемый в качестве разделителя дат в отформатированном значении, определяется параметрами системы.|  
|(`E-``E+``e-``e+`)|Экспоненциальный формат. Если выражение формата содержит минимум один цифровой заполнитель (`0` или `#`) слева от `E-`, `E+`, `e-`, или `e+`, то число выводится в экспоненциальном формате и `E` или `e` между числом и показателем степени вставляется. Количество заполнителей цифр слева определяет число цифр экспоненты определяется. Используйте `E-` или `e-` для размещения минус отрицательных показателей степени. Используйте `E+` или `e+` минус отрицательных показателей степени и знак "плюс" рядом с положительными. Необходимо также включить заполнители цифр справа от этого символа, для правильного форматирования.|  
|`-` `+` `$` ( )|Литеральные символы. Эти символы выводятся так же, как в строке формата. Чтобы вывести символ, которого нет в списке, укажите перед ним обратную косую черту (`\`) либо заключите его в двойные кавычки (» «).|  
|(`\`)|Отображает следующий символ в строке формата. Чтобы вывести символ, который имеет особое значение как буквенный символ, укажите перед ним обратную косую черту (`\`). Сама обратная косая черта не отображается. Обратная косая черта используется аналогично заключению выводимого символа в двойные кавычки. Чтобы отобразить обратную косую черту, укажите две черты подряд (`\\`).<br /><br /> Примеры символов, которые не может отображаться как литеральные символы и символы форматирования дат и времени, форматирование (`a`, `c`, `d`, `h`, `m`, `n`, `p`, `q`, `s`, `t`, `w`, `y`, `/`, и `:`), символы форматирования чисел (`#`, `0`, `%`, `E`, `e`, точки и запятой), а также символы форматирования строк (`@`, `&`, `<`, `>`, и `!`).|  
|(`"``ABC``"`)|Отображает строку, заключенную в двойные кавычки (» «). Чтобы включить строку в аргумент стиля из кода, необходимо использовать `Chr(34)` текст в кавычки (`34` — код символа кавычки ("«)).|  
  
### <a name="legacy-code-example"></a>Старый пример кода  
 Следующая таблица содержит некоторые образцы выражений форматирования для чисел. (Предполагается, что параметр языкового стандарта системы является английский (США)) Первый столбец содержит строки форматирования для `Style` аргумент `Format` функции; в других столбцов, которые содержат полученный результат, если форматируемые данные имеют значение, заданное в заголовке столбца.  
  
|Формат (`Style`)|«5» в формате|в формате «-5»|«0,5» в формате|  
|-|-|-|-|  
|`Zero-length string ("")`|`5`|`-5`|`0.5`|  
|`0`|`5`|`-5`|`1`|  
|`0.00`|`5.00`|`-5.00`|`0.50`|  
|`#,##0`|`5`|`-5`|`1`|  
|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  
|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  
|`0%`|`500%`|`-500%`|`50%`|  
|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  
|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  
|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  
  
## <a name="predefined-datetime-formats"></a>Форматы предопределенных даты и времени  
 Следующая таблица определяет предопределенной даты и имен форматов времени. Их можно использовать по имени в качестве аргумента стиля для `Format` функции:  
  
|Название формата|Описание|  
|-|-|  
|`General Date`, или `G`|Отображает дату и время. Например, `3/12/2008 11:07:31 AM`. Отображение даты определяется текущим значением культуры в приложении.|  
|`Long Date`, `Medium Date`или `D`|Отображает дату в соответствии с форматом даты в текущей культуре. Например, `Wednesday, March 12, 2008`.|  
|`Short Date`, или `d`|Отображает дату в формате короткой даты текущей культуре. Например, `3/12/2008`.<br /><br /> `d` Символ отображает день в формате даты, определяемые пользователем.|  
|`Long Time`, `Medium Time`или `T`|Отображает время в формате текущей культуре много времени; обычно включает часы, минуты и секунды. Например, `11:07:31 AM`.|  
|`Short Time` или `t`|Отображает время текущей культуре краткий формат времени. Например, `11:07 AM`.<br /><br /> `t` Символов отображает `AM` или `PM` значения для языков, использующих 12-часовом формате в виде определяемых пользователем время.|  
|`f`|Отображает длинный формат даты и короткое время в соответствии с форматом в текущей культуре. Например, `Wednesday, March 12, 2008 11:07 AM`.|  
|`F`|Отображение даты и время в соответствии с форматом в текущей культуре. Например, `Wednesday, March 12, 2008 11:07:31 AM`.|  
|`g`|Отображает краткий формат даты и краткий формат времени в соответствии с форматом в текущей культуре. Например, `3/12/2008 11:07 AM`.|  
|`M`, `m`|Отображает месяц и день даты. Например, `March 12`.<br /><br /> `M` Символ отображает месяц в формате даты, определяемые пользователем. `m` Символ Отображает минуты в формате времени, определяемые пользователем.|  
|`R`, `r`|Форматирует дату в соответствии с <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> свойство. Например, `Wed, 12 Mar 2008 11:07:31 GMT`. Форматированные даты не изменяется значение даты и времени. Перед вызовом необходимо скорректировать значение даты и времени по Гринвичу `Format` функции.|  
|`s`|Форматирует дату и время в виде сортируемого индекса. Например, `2008-03-12T11:07:31`.<br /><br /> `s` Символ Отображает секунды в виде определяемых пользователем время.|  
|`u`|Форматирует дату и время в виде сортируемого индекса GMT. Например, `2008-03-12 11:07:31Z`.|  
|`U`|Форматирует дату и время с помощью полный формат даты и время в формате GMT. Например, `Wednesday, March 12, 2008 6:07:31 PM`.|  
|`Y`, `y`|Форматирует дату в виде года и месяца. Например, `March, 2008`.<br /><br /> `Y` И `y` символов Отображение года в формате даты, определяемые пользователем.|  
  
 Дополнительные сведения о данные для текущего языка и региональных параметров приложения, см. в разделе [как языка и региональных параметров влияет на строки в Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
## <a name="user-defined-datetime-formats"></a>Форматы даты и времени, определяемые пользователем  
 В следующей таблице показаны символы, вы можете использовать для создания форматов даты и времени, определяемые пользователем. В отличие от более ранних версий Visual Basic, эти символы форматирования учитывается регистр.  
  
|Знак|Описание|  
|-|-|  
|(`:`)|Разделитель компонентов времени. В некоторых языковых стандартах разделителя времени могут использоваться другие символы. Разделитель компонентов времени разделяет часы, минуты и секунды при форматировании значений времени. Фактический символ, используемый в качестве разделителя времени в отформатированном значении, определяется текущее значение языка и региональных параметров приложения.|  
|(`/`)|Разделитель компонентов даты. В некоторых языковых стандартах в качестве разделителя дат использоваться другие символы. Разделитель компонентов даты разделяет день, месяц и год при форматировании значений даты. Фактический символ, используемый в качестве разделителя дат в отформатированном значении, определяется язык и региональные параметры текущего приложения.|  
|(`%`)|Используется для указания, что следующий символ следует рассматривать так однобуквенный формат вне зависимости от букв. Также используется для указания, что однобуквенный формат считывается как определяемом пользователем формате. См. в разделе ниже для получения дополнительных сведений.|  
|`d`|Отображает день месяца в виде числа без нуля в начале (например, `1`). Используйте `%d` Если это только один символ в определяемых пользователем числовом формате.|  
|`dd`|Отображает день месяца в виде числа с ведущими нулями (например, `01`).|  
|`ddd`|Отображает сокращенное название дня (например, `Sun`).|  
|`dddd`|Отображает полное название дня (например, `Sunday`).|  
|`M`|Отображает месяц в виде числа без нуля в начале (например, январь представляется `1`). Используйте `%M` Если это только один символ в определяемых пользователем числовом формате.|  
|`MM`|Отображает месяц в виде числа с ведущими нулями (например, `01/12/01`).|  
|`MMM`|Отображает сокращенное название месяца (например, `Jan`).|  
|`MMMM`|Отображает месяц в виде полное название месяца (например, `January`).|  
|`gg`|Отображает строку эры (например, `A.D.`).|  
|`h`|Выводит часы в виде числа без ведущих нулей в 12-часовом формате (например, `1:15:15 PM`). Используйте `%h` Если это только один символ в определяемых пользователем числовом формате.|  
|`hh`|Выводит часы в виде числа с ведущими нулями в 12-часовом формате (например, `01:15:15 PM`).|  
|`H`|Выводит часы в виде числа без ведущих нулей в 24-часовом формате (например, `1:15:15`). Используйте `%H` Если это только один символ в определяемых пользователем числовом формате.|  
|`HH`|Выводит часы в виде числа с ведущими нулями в 24-часовом формате (например, `01:15:15`).|  
|`m`|Отображает минуты в виде числа без ведущих нулей (например, `12:1:15`). Используйте `%m` Если это только один символ в определяемых пользователем числовом формате.|  
|`mm`|Отображает минуты в виде числа с ведущими нулями (например, `12:01:15`).|  
|`s`|Отображает секунды в виде числа без ведущих нулей (например, `12:15:5`). Используйте `%s` Если это только один символ в определяемых пользователем числовом формате.|  
|`ss`|Отображает секунды в виде числа с ведущими нулями (например, `12:15:05`).|  
|`f`|Отображает доли секунды. Например `ff` сотым долям секунды, тогда как `ffff` десятитысячные доли секунды. Вы можете использовать семь `f` символы в в определяемом пользователем формате. Используйте `%f` Если это только один символ в определяемых пользователем числовом формате.|  
|`t`|Используется 12-часовой формат времени и отображает `A` для времени до полудня; Вывод заглавных букв `P` для времени от полудня до 23:59. Используйте `%t` Если это только один символ в определяемых пользователем числовом формате.|  
|`tt`|Вывод заглавных букв для языков, использующих 12-часовом формате, `AM` времени до полудня; Вывод заглавных букв `PM` времени от полудня до 23:59.<br /><br /> Для языков, использующих 24-часовом формате не отображает ничего.|  
|`y`|Отображает номер года (0-9) без предшествующих нулей. Используйте `%y` Если это только один символ в определяемых пользователем числовом формате.|  
|`yy`|Отображает год в числовом формате из двух цифр с нулем, если применимо.|  
|`yyy`|Отображает год в числовом формате из четырех цифр.|  
|`yyyy`|Отображает год в числовом формате из четырех цифр.|  
|`z`|Выводит Сдвиг часового пояса без ведущих нулей (например, `-8`). Используйте `%z` Если это только один символ в определяемых пользователем числовом формате.|  
|`zz`|Выводит Сдвиг часового пояса с ведущими нулями (например, `-08`)|  
|`zzz`|Выводит полный Сдвиг часового пояса (например, `-08:00`)|  
  
### <a name="legacy-code-example"></a>Старый пример кода  
 Ниже приведены примеры пользовательских форматов даты и времени для `December 7, 1958, 8:50 PM, 35 seconds`:  
  
|Формат|Отображение|  
|-|-|  
|`M/d/yy`|`12/7/58`|  
|`d-MMM`|`7-Dec`|  
|`d-MMMM-yy`|`7-December-58`|  
|`d MMMM`|`7 December`|  
|`MMMM yy`|`December 58`|  
|`hh:mm tt`|`08:50 PM`|  
|`h:mm:ss t`|`8:50:35 P`|  
|`H:mm`|`20:50`|  
|`H:mm:ss`|`20:50:35`|  
|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  
  
### <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 Минимальное время разрешение для устройства определяется производителем устройства. Если разрешение по времени устройства достаточно, велик `f` символ формата возвращает 0 при запуске на этом устройстве.  
  
   
  
## Examples  
 В этом примере показаны различные способы использования `Format` функция для форматирования значений с помощью обоих `String` форматы и определенных пользователем форматов. В качестве разделителя даты (`/`), разделителя времени (`:`) и индикаторов AM/PM (`t` и `tt`), Фактическое отображение системой зависит от параметров языкового стандарта, используя код. Если времени и даты будут выводиться в среде разработки, используются краткий формат времени и даты региональных установок кода.  
  
> [!NOTE]
>  Для языков, использующих 24-часовом формате, индикаторы AM/PM (`t` и `tt`) не отображаются.  
  
 [!code-vb[VbVbalrStrings#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="FormatCurrency">
      <MemberSignature Language="C#" Value="public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatCurrency (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatCurrency : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatCurrency (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Обязательный. Форматируемое выражение.</param>
        <param name="NumDigitsAfterDecimal">Необязательный параметр. Числовое значение, указывающее, отображаются количество цифр справа от десятичного разделителя. По умолчанию используется значение –1, указывающее на использование региональных настроек компьютера.</param>
        <param name="IncludeLeadingDigit">Необязательный параметр. <see cref="T:Microsoft.VisualBasic.TriState" /> Перечисление, указывающее, отображается ли нуля в начале дробных значений. См. в разделе «Примечания» для значений.</param>
        <param name="UseParensForNegativeNumbers">Необязательный параметр. <see cref="T:Microsoft.VisualBasic.TriState" /> Перечисление, которое указывает, следует ли заключать отрицательные значения в скобки. См. в разделе «Примечания» для значений.</param>
        <param name="GroupDigits">Необязательный параметр. <see cref="T:Microsoft.VisualBasic.TriState" /> Перечисление, указывающее, сгруппированы ли значения с использованием разделителя, указанного в для компьютера региональными параметрами. См. в разделе «Примечания» для значений.</param>
        <summary>Возвращает выражение, отформатированное в виде значения валюты с использованием символа валюты, определенного в системной панели управления.</summary>
        <returns>Выражение в формате денежной единицы с использованием символа денежной единицы, определенного в системной панели управления.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если один или несколько необязательных аргументов опущены, вместо них используются соответствующие значения региональных параметров компьютера.  
  
 Положение символа валюты относительно значения валюты определяется региональные параметры системы.  
  
> [!NOTE]
>  Все данные параметры можно получить от национальной настройки приложения. По умолчанию, которые будут языковому стандарту, установленному на панели управления. Тем не менее, она может изменяться программно с помощью .NET Framework, за исключением нулем в начале, происходящий из `Number` вкладки.  
  
 `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, И `GroupDigits` аргументы принимать следующие значения перечисления три состояния.  
  
|Значение|Описание|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|Для компьютера региональными параметрами|  
  
   
  
## Examples  
 В следующем примере показано применение функции `FormatCurrency`.  
  
 [!code-vb[VbVbalrStrings#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Количество цифр после десятичной запятой превышает 99.</exception>
        <exception cref="T:System.InvalidCastException">Тип не является числовым.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Управление строками</related>
      </Docs>
    </Member>
    <Member MemberName="FormatDateTime">
      <MemberSignature Language="C#" Value="public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatDateTime (Expression As DateTime, Optional NamedFormat As DateFormat = Microsoft.VisualBasic.DateFormat.GeneralDate) As String" />
      <MemberSignature Language="F#" Value="static member FormatDateTime : DateTime * Microsoft.VisualBasic.DateFormat -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatDateTime (Expression, NamedFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="NamedFormat" Type="Microsoft.VisualBasic.DateFormat" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Обязательный. <see langword="Date" /> выражение для форматирования.</param>
        <param name="NamedFormat">Необязательный параметр. Использовать числовое значение, указывающее формат даты и времени. Если этот параметр опущен, <see langword="DateFormat.GeneralDate" /> используется.</param>
        <summary>Возвращает строковое выражение, представляющее значение даты и времени.</summary>
        <returns>Строковое выражение, представляющее значение даты и времени.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Date` Тип данных всегда содержит сведения о дате и времени. В целях преобразования типов Visual Basic рассматривает 1/1/1 (1 января 1 года) могла быть нейтральным значением даты и 00:00:00 (полночь) могла быть нейтральным значением времени. При форматировании `Date` значение в виде строки даты и времени, `FormatDateTime` не включает нейтральные значения в результирующую строку. Например, если преобразование #1/1/0001 9:30:00 # в строку, а результат — «9:30:00 AM»; Дата отбрасывается. Тем не менее, сведения о дате по-прежнему присутствует в исходном `Date` значение и могут быть извлечены с помощью функции например `DatePart`.  
  
> [!NOTE]
>  Если передать `Expression` аргумент как `String` литерал, `FormatDateTime` интерпретирует его согласно <xref:System.Globalization.CultureInfo.CurrentCulture%2A> параметр приложения. Тем не менее если передать его как `Date` литерал, используйте формат #mm/дд/гггг #, так как `FormatDateTime` всегда интерпретирует `Date` литерала в соответствии с английского языка (США) язык и региональные параметры. Это необходимо, поскольку, если приложение разрабатывается и кодируется с использованием `Date` литералы из одного языка и региональных параметров, но затем выполняется на платформе с другой язык и региональные параметры `Date` разбор литералов может быть неверно.  
  
 `NamedFormat` Аргумент имеет следующие параметры.  
  
|Константа|Описание|  
|-|-|  
|`DateFormat.GeneralDate`|Отображает дату и время. Отображает часть даты в кратком формате. Если компонент времени, отображается много времени. Если он имеется, отображаются обе части.|  
|`DateFormat.LongDate`|Отображает дату в формате даты, определяется региональными параметрами компьютера.|  
|`DateFormat.ShortDate`|Отображает дату в формате короткой даты, определяется региональными параметрами компьютера.|  
|`DateFormat.LongTime`|Отображает время в формате, который определяется региональными параметрами компьютера.|  
|`DateFormat.ShortTime`|Отображает время в 24-часовом формате (чч: мм).|  
  
   
  
## Examples  
 В этом примере демонстрируется использование `FormatDateTime` функции.  
  
 [!code-vb[VbVbalrStrings#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="NamedFormat" /> параметр не является допустимым.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="FormatNumber">
      <MemberSignature Language="C#" Value="public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatNumber (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatNumber : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatNumber (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Обязательный. Форматируемое выражение.</param>
        <param name="NumDigitsAfterDecimal">Необязательный параметр. Числовое значение, указывающее, отображаются количество цифр справа от десятичного разделителя. По умолчанию используется значение –1, указывающее на использование региональных настроек компьютера.</param>
        <param name="IncludeLeadingDigit">Необязательный параметр. <see cref="T:Microsoft.VisualBasic.TriState" /> Константа, которая указывает, отображается ли 0 в начале дробных значений. Сведения о значениях см. в разделе "Параметры".</param>
        <param name="UseParensForNegativeNumbers">Необязательный параметр. <see cref="T:Microsoft.VisualBasic.TriState" /> Константа, указывающая, следует ли заключать отрицательные значения в скобки. Сведения о значениях см. в разделе "Параметры".</param>
        <param name="GroupDigits">Необязательный параметр. Константа <see cref="T:Microsoft.VisualBasic.TriState" />, указывающая, группируются ли значения с использованием разделителя, указанного в настройках языкового стандарта. Сведения о значениях см. в разделе "Параметры".</param>
        <summary>Возвращает выражение, отформатированное как число.</summary>
        <returns>Выражение в формате числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда один или несколько необязательных аргументов опущены значения задаются с помощью параметров языкового стандарта.  
  
> [!NOTE]
>  Все данные параметры можно получить от национальной настройки приложения. По умолчанию, которые будут языковому стандарту, установленному на панели управления. Тем не менее его можно изменить программно с помощью .NET Framework.  
  
 `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, И `GroupDigits` аргументы имеют следующие параметры.  
  
|Константа|Описание|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|Для компьютера региональными параметрами|  
  
   
  
## Examples  
 В этом примере показано `FormatNumber` функции.  
  
 [!code-vb[VbVbalrStrings#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Тип не является числовым.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="FormatPercent">
      <MemberSignature Language="C#" Value="public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatPercent (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatPercent : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatPercent (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Обязательный. Форматируемое выражение.</param>
        <param name="NumDigitsAfterDecimal">Необязательный параметр. Числовое значение, указывающее количество отображаемых цифр справа от десятичной запятой. По умолчанию используется значение –1, указывающее на использование настроек языкового стандарта.</param>
        <param name="IncludeLeadingDigit">Необязательный параметр. Константа <see cref="T:Microsoft.VisualBasic.TriState" />, указывающая, отображается ли ноль в дробных значениях. Сведения о значениях см. в разделе "Параметры".</param>
        <param name="UseParensForNegativeNumbers">Необязательный параметр. Константа <see cref="T:Microsoft.VisualBasic.TriState" />, указывающая, нужно ли заключать отрицательные значения в скобки. Сведения о значениях см. в разделе "Параметры".</param>
        <param name="GroupDigits">Необязательный параметр. Константа <see cref="T:Microsoft.VisualBasic.TriState" />, указывающая, группируются ли значения с использованием разделителя, указанного в настройках языкового стандарта. Сведения о значениях см. в разделе "Параметры".</param>
        <summary>Возвращает выражение в виде процента (умноженное на 100) с символом % в конце.</summary>
        <returns>Выражение в виде процента (умноженное на 100) с символом % в конце.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда один или несколько необязательных аргументов опущены, значения задаются с помощью параметров языкового стандарта.  
  
> [!NOTE]
>  Все данные параметры можно получить от национальной настройки приложения. По умолчанию, которые будут языковому стандарту, установленному на панели управления. Тем не менее его можно изменить программно с помощью .NET Framework.  
  
 `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, И `GroupDigits` аргументы имеют следующие параметры.  
  
|Константа|Описание|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.Default`|Для компьютера региональными параметрами|  
  
   
  
## Examples  
 В этом примере показано использование `FormatPercent` функции.  
  
 [!code-vb[VbVbalrStrings#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Тип не является числовым.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public static char GetChar (string str, int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public static char GetChar(string str, int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChar (str As String, Index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char GetChar(System::String ^ str, int Index);" />
      <MemberSignature Language="F#" Value="static member GetChar : string * int -&gt; char" Usage="Microsoft.VisualBasic.Strings.GetChar (str, Index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Index" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Обязательный. Любое допустимое выражение типа <see langword="String" />.</param>
        <param name="Index">Обязательный. <see langword="Integer" /> выражение. (1) индекс символа в <paramref name="str" /> должны быть возвращены.</param>
        <summary>Возвращает <see langword="Char" /> значение, представляющее знак из указанного индекса в предоставленной строке.</summary>
        <returns><see langword="Char" /> значение, представляющее знак из указанного индекса в предоставленной строке.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `Index` меньше 1 или больше индекса последнего символа в `str`, `ArgumentException` возникает исключение.  
  
   
  
## Examples  
 В этом примере показано, как использовать `GetChar` функция возвращает символ из указанного индекса в `String`.  
  
 [!code-vb[VbVbalrStrings#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="str" /> равен <see langword="Nothing" />, параметр <paramref name="Index" /> &lt; 1, или параметр <paramref name="Index" /> больше индекса последнего символа в <paramref name="str" />.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="InStr">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает целое число, указывающее начальную позицию первого вхождения одной строки в другую.  Целое число представляет собой от единицы индекс, если найдено совпадение.  Если совпадений не найдено, функция возвращает ноль.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStr : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="String2" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Обязательный. <see langword="String" /> искомое выражение.</param>
        <param name="String2">Обязательный. <see langword="String" /> искомое выражение.</param>
        <param name="Compare">Необязательный параметр. Указывает тип выполняемого сравнения строк. Если <paramref name="Compare" /> опущен, <see langword="Option Compare" /> параметр определяет тип сравнения.</param>
        <summary>Возвращает целое число, указывающее начальную позицию первого вхождения одной строки в другую.</summary>
        <returns><list type="table">
            <item>
              <term> If 
 </term>
              <description> InStr возвращает 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> имеет нулевую длину или <see langword="Nothing" /></term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> имеет нулевую длину или <see langword="Nothing" /></term>
              <description> Начальная позиция для поиска, значение по умолчанию — первая позиция символа.  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> не найден 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> найдено в <paramref name="String1" /></term>
              <description> Позиция, где начинается соответствие 
 </description>
            </item>
            <item>
              <term></term>
              <description></description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило `InStr` функция используется при синтаксическом анализе строки.  
  
> [!NOTE]
>  `InStrB` В предыдущих версиях Visual Basic функция возвращает число байтов, а не на позицию символа. Он используется главным образом для преобразования строк в приложениях двухбайтовой кодировки (DBCS). Все строки Visual Basic 2005, в формате Юникод, и `InStrB` больше не поддерживается.  
  
 Параметры аргумента `Compare`:  
  
|Константа|Значение|Описание|  
|-|-|-|  
|`Binary`|0|Выполняется двоичное сравнение|  
|`Text`|1|Выполняет сравнение текста|  
  
   
  
## Examples  
 В этом примере используется `InStr` функцию для возврата позиции первого вхождения одной строки в другую.  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Строки в Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Знакомство со строками в Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-compare-statement.md">Оператор Option Compare</related>
      </Docs>
    </Member>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (Start As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member InStr : int * string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (Start, String1, String2, Compare)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public static int InStr (int StartPos, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 InStr(int32 StartPos, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (StartPos As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" FrameworkAlternate="netcore-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="StartPos" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="String1" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="String2" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Start">Необязательный параметр. Числовое выражение, задающее начальную позицию для каждого поиска. Если этот параметр опущен, поиск начинается с позиции первого символа. Начальный индекс отсчитывается от 1.</param>
        <param name="StartPos">To be added.</param>
        <param name="String1">Обязательный. <see langword="String" /> искомое выражение.</param>
        <param name="String2">Обязательный. <see langword="String" /> искомое выражение.</param>
        <param name="Compare">Необязательный параметр. Указывает тип выполняемого сравнения строк. Если <paramref name="Compare" /> опущен, <see langword="Option Compare" /> параметр определяет тип сравнения.</param>
        <summary>Возвращает целое число, указывающее начальную позицию первого вхождения одной строки в другую.</summary>
        <returns><list type="table">
            <item>
              <term> If 
 </term>
              <description> InStr возвращает 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> имеет нулевую длину или <see langword="Nothing" /></term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> имеет нулевую длину или <see langword="Nothing" /></term>
              <description>
                <paramref name="start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> не найден 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> найдено в <paramref name="String1" /></term>
              <description> Позиция, где начинается соответствие 
 </description>
            </item>
            <item>
              <term>Длина 
                <paramref name="Start" /> &gt; параметра <paramref name="String1" /></term>
              <description> 0 
 </description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило `InStr` функция используется при синтаксическом анализе строки.  
  
> [!NOTE]
>  `InStrB` В предыдущих версиях Visual Basic функция возвращает число байтов, а не на позицию символа. Он используется главным образом для преобразования строк в приложениях двухбайтовой кодировки (DBCS). Все строки Visual Basic 2005, в формате Юникод, и `InStrB` больше не поддерживается.  
  
 Параметры аргумента `Compare`:  
  
|Константа|Значение|Описание|  
|-|-|-|  
|`Binary`|0|Выполняется двоичное сравнение|  
|`Text`|1|Выполняет сравнение текста|  
  
   
  
## Examples  
 В этом примере используется `InStr` функцию для возврата позиции первого вхождения одной строки в другую.  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt; 1.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Строки в Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Знакомство со строками в Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-compare-statement.md">Оператор Option Compare</related>
      </Docs>
    </Member>
    <Member MemberName="InStrRev">
      <MemberSignature Language="C#" Value="public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStrRev (StringCheck As String, StringMatch As String, Optional Start As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStrRev : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStrRev (StringCheck, StringMatch, Start, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringCheck" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="StringMatch" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Start" Type="System.Int32" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="StringCheck">Обязательный. Искомое выражение типа строки.</param>
        <param name="StringMatch">Обязательный. Строковое выражение, которое требуется найти.</param>
        <param name="Start">Необязательный параметр. Числовое выражение, устанавливающее начальную позицию для каждого поиска, начиная с левой стороны строки. Если параметр <paramref name="Start" /> не указан, то используется значение –1, означающее, что поиск начинается с позиции последнего символа. После этого строка просматривается справа налево.</param>
        <param name="Compare">Необязательный параметр. Числовое значение, показывающее вид сравнения, используемый при оценке подстрок. Если не указано, выполняется двоичное сравнение. Значения см.</param>
        <summary>Возвращает позицию первого вхождения одной строки в другую, начиная с правой стороны строки.</summary>
        <returns><list type="table">
            <item>
              <term> If 
 </term>
              <description> Функция InStrRev возвращает 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringCheck" /> имеет нулевую длину 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> имеет нулевую длину 
 </term>
              <description>
                <paramref name="Start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> не найден 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> найдено в <paramref name="StringCheck" /></term>
              <description> Позиция, в которой найдено первое сравнение, начиная с правой стороны строки.  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> больше, чем длина <paramref name="StringMatch" /></term>
              <description> 0 
 </description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обратите внимание, что синтаксис `InStrRev` функция не является таким же, как синтаксис `InStr` функции.  
  
 `Compare` Аргумент может иметь следующие значения.  
  
|Константа|Описание|  
|-|-|  
|`Binary`|Выполняется двоичное сравнение.|  
|`Text`|Выполняется текстовое сравнение.|  
  
   
  
## Examples  
 В этом примере демонстрируется использование `InStrRev` функции.  
  
 [!code-vb[VbVbalrStrings#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> = 0 или <paramref name="Start" /> &lt; –1.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Строки в Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Знакомство со строками в Visual Basic</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает строку, образуемую путем соединения нескольких подстрок, содержащихся в массиве.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (object[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(object[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As Object(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : obj[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.Object[]" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Delimiter" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Обязательный. Одномерный массив, содержащий подстроки для объединения.</param>
        <param name="Delimiter">Необязательный параметр. Строка, используемая для разделения подстрок в возвращаемую строку. Если не указано, то символ пробела (» «) используется. Если <paramref name="Delimiter" /> представляет собой строку нулевой длины ("») или <see langword="Nothing" />, все элементы списка объединяются без разделителей.</param>
        <summary>Возвращает строку, образуемую путем соединения нескольких подстрок, содержащихся в массиве.</summary>
        <returns>Строка, созданная путем соединения нескольких подстрок, содержащихся в массиве.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Имеется соответствие между `Join` и `Split` функции. `Join` Функция принимает массив строк и объединяет их, используя разделитель строк, чтобы вернуть одну строку. `Split` Функция принимает строку и разделяет ее по разделителям, чтобы вернуть массив строк. Тем не менее, основное различие состоит `Join` может объединять строки с любой строкой-разделителем, `Split` может разделять строки с помощью одного символа-разделителя.  
  
   
  
## Examples  
 Следующий пример демонстрирует, как использовать `Join` функции для создания списка из нескольких строк.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="SourceArray" /> не является одномерным.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(string[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As String(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : string[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.String[]" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Delimiter" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Обязательный. Одномерный массив, содержащий подстроки для объединения.</param>
        <param name="Delimiter">Необязательный параметр. Строка, используемая для разделения подстрок в возвращаемую строку. Если не указано, то символ пробела (» «) используется. Если <paramref name="Delimiter" /> представляет собой строку нулевой длины ("») или <see langword="Nothing" />, все элементы списка объединяются без разделителей.</param>
        <summary>Возвращает строку, образуемую путем соединения нескольких подстрок, содержащихся в массиве.</summary>
        <returns>Строка, созданная путем соединения нескольких подстрок, содержащихся в массиве.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Имеется соответствие между `Join` и `Split` функции. `Join` Функция принимает массив строк и объединяет их, используя разделитель строк, чтобы вернуть одну строку. `Split` Функция принимает строку и разделяет ее по разделителям, чтобы вернуть массив строк. Тем не менее, основное различие состоит `Join` может объединять строки с любой строкой-разделителем, `Split` может разделять строки с помощью одного символа-разделителя.  
  
   
  
## Examples  
 Следующий пример демонстрирует, как использовать `Join` функции для создания списка из нескольких строк.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="SourceArray" /> не является одномерным.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="LCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает строку или символ, преобразованную в нижний регистр.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static char LCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char LCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char LCase(char Value);" />
      <MemberSignature Language="F#" Value="static member LCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Value">Обязательный. Любое допустимое <see langword="String" /> или <see langword="Char" /> выражение.</param>
        <summary>Возвращает строку или символ, преобразованную в нижний регистр.</summary>
        <returns>Строка или символ, преобразованные в нижний регистр.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Только прописные буквы будут преобразованы в нижний регистр; Все строчные буквы и символы nonletter остаются неизменными.  
  
 Эта функция использует сведения о языке и региональных параметрах приложения при обработке строки, чтобы изменения регистра подходят для языкового стандарта, в котором используется приложение.  
  
> [!IMPORTANT]
>  Если приложение принимает решения относительно безопасности, на основе результата сравнения или операциями изменения регистра, то следует использовать операцию <xref:System.String.Compare%2A?displayProperty=nameWithType> и передайте <xref:System.StringComparison.Ordinal> или <xref:System.StringComparison.OrdinalIgnoreCase> для `comparisonType` аргумент. Дополнительные сведения см. в разделе [как языка и региональных параметров влияет на строки в Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 В этом примере используется `LCase` функция, возвращающая версия строки в нижний регистр.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Строки в Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Знакомство со строками в Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static string LCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member LCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Value">Обязательный. Любое допустимое <see langword="String" /> или <see langword="Char" /> выражение.</param>
        <summary>Возвращает строку или символ, преобразованную в нижний регистр.</summary>
        <returns>Строка или символ, преобразованные в нижний регистр.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Только прописные буквы будут преобразованы в нижний регистр; Все строчные буквы и символы nonletter остаются неизменными.  
  
 Эта функция использует сведения о языке и региональных параметрах приложения при обработке строки, чтобы изменения регистра подходят для языкового стандарта, в котором используется приложение.  
  
> [!IMPORTANT]
>  Если приложение принимает решения относительно безопасности, на основе результата сравнения или операциями изменения регистра, то следует использовать операцию <xref:System.String.Compare%2A?displayProperty=nameWithType> и передайте <xref:System.StringComparison.Ordinal> или <xref:System.StringComparison.OrdinalIgnoreCase> для `comparisonType` аргумент. Дополнительные сведения см. в разделе [как языка и региональных параметров влияет на строки в Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 В этом примере используется `LCase` функция, возвращающая версия строки в нижний регистр.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Строки в Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Знакомство со строками в Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public static string Left (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Left(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Left (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Left(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Left : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Left (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Обязательный. <see langword="String" /> выражение, из которого возвращаются крайние левые знаки.</param>
        <param name="Length">Обязательный. <see langword="Integer" /> выражение. Числовое выражение, указывающее, как число возвращаемых знаков. Если значение равно 0, строка нулевой длины ("») возвращается. Если больше или равно числу символов в <paramref name="str" />, возвращается вся строка.</param>
        <summary>Возвращает строку, содержащую указанное число знаков с левой стороны строки.</summary>
        <returns>Строка, содержащая указанное число знаков с левой стороны строки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы определить количество символов в `str`, использовать `Len` функции. При использовании в приложении Windows Forms или любому другому классу, который имеет `Left` свойства, необходимо полностью определить функцию с `Microsoft.VisualBasic.Left`.  
  
> [!NOTE]
>  `LeftB` Функция в предыдущих версиях Visual Basic возвращает строку, в байтах, а не символы. Он используется главным образом для преобразования строк в приложениях двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic, в формате Юникод, и `LeftB` больше не поддерживается.  
  
   
  
## Examples  
 В этом примере демонстрируется использование `Left` функция возвращает подстроку заданной `String`. В классе, который имеет `Left` свойство, может потребоваться полные `Left` функции.  
  
 [!code-vb[VbVbalrStrings#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Len">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимое для хранения переменной.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (bool Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(bool Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(bool Expression);" />
      <MemberSignature Language="F#" Value="static member Len : bool -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое <see langword="String" /> выражение или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, <see langword="Len" /> функция возвращает размер сразу будет записан в файл функцией <see langword="FilePut" /> функции.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимое для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменные, `Len` функция возвращает размер сразу будет записан в файл функцией `FilePut` функции. Если `Object` содержит `String`, он возвращает длину строки. Если `Object` содержит другой тип, то возвращается размер объекта, который будет записан в файл функцией `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться для строковых полей, чтобы определить размер строки, в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибут, если он доступен, при определении размера `Object` переменные.  
  
> [!NOTE]
>  `Len` Функция не может иметь возможность определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определяемые пользователем типы данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic, в формате Юникод, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, он возвращает длину `String`. Если значение параметра равно NULL `Object` ссылку, функция возвращает нуль. Если `Object` содержит другой тип, возникает исключение.  
  
   
  
## Examples  
 В этом примере используется `Len` для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (byte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Byte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Byte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : byte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Byte" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое <see langword="String" /> выражение или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, <see langword="Len" /> функция возвращает размер сразу будет записан в файл функцией <see langword="FilePut" /> функции.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимое для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменные, `Len` функция возвращает размер сразу будет записан в файл функцией `FilePut` функции. Если `Object` содержит `String`, он возвращает длину строки. Если `Object` содержит другой тип, то возвращается размер объекта, который будет записан в файл функцией `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться для строковых полей, чтобы определить размер строки, в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибут, если он доступен, при определении размера `Object` переменные.  
  
> [!NOTE]
>  `Len` Функция не может иметь возможность определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определяемые пользователем типы данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic, в формате Юникод, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, он возвращает длину `String`. Если значение параметра равно NULL `Object` ссылку, функция возвращает нуль. Если `Object` содержит другой тип, возникает исключение.  
  
   
  
## Examples  
 В этом примере используется `Len` для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(char Expression);" />
      <MemberSignature Language="F#" Value="static member Len : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое <see langword="String" /> выражение или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, <see langword="Len" /> функция возвращает размер сразу будет записан в файл функцией <see langword="FilePut" /> функции.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимое для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменные, `Len` функция возвращает размер сразу будет записан в файл функцией `FilePut` функции. Если `Object` содержит `String`, он возвращает длину строки. Если `Object` содержит другой тип, то возвращается размер объекта, который будет записан в файл функцией `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться для строковых полей, чтобы определить размер строки, в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибут, если он доступен, при определении размера `Object` переменные.  
  
> [!NOTE]
>  `Len` Функция не может иметь возможность определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определяемые пользователем типы данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic, в формате Юникод, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, он возвращает длину `String`. Если значение параметра равно NULL `Object` ссылку, функция возвращает нуль. Если `Object` содержит другой тип, возникает исключение.  
  
   
  
## Examples  
 В этом примере используется `Len` для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (DateTime Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.DateTime Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(DateTime Expression);" />
      <MemberSignature Language="F#" Value="static member Len : DateTime -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое <see langword="String" /> выражение или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, <see langword="Len" /> функция возвращает размер сразу будет записан в файл функцией <see langword="FilePut" /> функции.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимое для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменные, `Len` функция возвращает размер сразу будет записан в файл функцией `FilePut` функции. Если `Object` содержит `String`, он возвращает длину строки. Если `Object` содержит другой тип, то возвращается размер объекта, который будет записан в файл функцией `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться для строковых полей, чтобы определить размер строки, в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибут, если он доступен, при определении размера `Object` переменные.  
  
> [!NOTE]
>  `Len` Функция не может иметь возможность определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определяемые пользователем типы данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic, в формате Юникод, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, он возвращает длину `String`. Если значение параметра равно NULL `Object` ссылку, функция возвращает нуль. Если `Object` содержит другой тип, возникает исключение.  
  
   
  
## Examples  
 В этом примере используется `Len` для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (decimal Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.Decimal Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Decimal Expression);" />
      <MemberSignature Language="F#" Value="static member Len : decimal -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Decimal" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое <see langword="String" /> выражение или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, <see langword="Len" /> функция возвращает размер сразу будет записан в файл функцией <see langword="FilePut" /> функции.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимое для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменные, `Len` функция возвращает размер сразу будет записан в файл функцией `FilePut` функции. Если `Object` содержит `String`, он возвращает длину строки. Если `Object` содержит другой тип, то возвращается размер объекта, который будет записан в файл функцией `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться для строковых полей, чтобы определить размер строки, в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибут, если он доступен, при определении размера `Object` переменные.  
  
> [!NOTE]
>  `Len` Функция не может иметь возможность определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определяемые пользователем типы данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic, в формате Юникод, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, он возвращает длину `String`. Если значение параметра равно NULL `Object` ссылку, функция возвращает нуль. Если `Object` содержит другой тип, возникает исключение.  
  
   
  
## Examples  
 В этом примере используется `Len` для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (double Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(double Expression);" />
      <MemberSignature Language="F#" Value="static member Len : double -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Double" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое <see langword="String" /> выражение или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, <see langword="Len" /> функция возвращает размер сразу будет записан в файл функцией <see langword="FilePut" /> функции.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимое для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменные, `Len` функция возвращает размер сразу будет записан в файл функцией `FilePut` функции. Если `Object` содержит `String`, он возвращает длину строки. Если `Object` содержит другой тип, то возвращается размер объекта, который будет записан в файл функцией `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться для строковых полей, чтобы определить размер строки, в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибут, если он доступен, при определении размера `Object` переменные.  
  
> [!NOTE]
>  `Len` Функция не может иметь возможность определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определяемые пользователем типы данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic, в формате Юникод, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, он возвращает длину `String`. Если значение параметра равно NULL `Object` ссылку, функция возвращает нуль. Если `Object` содержит другой тип, возникает исключение.  
  
   
  
## Examples  
 В этом примере используется `Len` для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (short Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(short Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int16" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое <see langword="String" /> выражение или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, <see langword="Len" /> функция возвращает размер сразу будет записан в файл функцией <see langword="FilePut" /> функции.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимое для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменные, `Len` функция возвращает размер сразу будет записан в файл функцией `FilePut` функции. Если `Object` содержит `String`, он возвращает длину строки. Если `Object` содержит другой тип, то возвращается размер объекта, который будет записан в файл функцией `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться для строковых полей, чтобы определить размер строки, в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибут, если он доступен, при определении размера `Object` переменные.  
  
> [!NOTE]
>  `Len` Функция не может иметь возможность определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определяемые пользователем типы данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic, в формате Юникод, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, он возвращает длину `String`. Если значение параметра равно NULL `Object` ссылку, функция возвращает нуль. Если `Object` содержит другой тип, возникает исключение.  
  
   
  
## Examples  
 В этом примере используется `Len` для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(int Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое <see langword="String" /> выражение или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, <see langword="Len" /> функция возвращает размер сразу будет записан в файл функцией <see langword="FilePut" /> функции.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимое для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменные, `Len` функция возвращает размер сразу будет записан в файл функцией `FilePut` функции. Если `Object` содержит `String`, он возвращает длину строки. Если `Object` содержит другой тип, то возвращается размер объекта, который будет записан в файл функцией `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться для строковых полей, чтобы определить размер строки, в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибут, если он доступен, при определении размера `Object` переменные.  
  
> [!NOTE]
>  `Len` Функция не может иметь возможность определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определяемые пользователем типы данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic, в формате Юникод, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, он возвращает длину `String`. Если значение параметра равно NULL `Object` ссылку, функция возвращает нуль. Если `Object` содержит другой тип, возникает исключение.  
  
   
  
## Examples  
 В этом примере используется `Len` для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (long Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(long Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int64" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое <see langword="String" /> выражение или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, <see langword="Len" /> функция возвращает размер сразу будет записан в файл функцией <see langword="FilePut" /> функции.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимое для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменные, `Len` функция возвращает размер сразу будет записан в файл функцией `FilePut` функции. Если `Object` содержит `String`, он возвращает длину строки. Если `Object` содержит другой тип, то возвращается размер объекта, который будет записан в файл функцией `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться для строковых полей, чтобы определить размер строки, в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибут, если он доступен, при определении размера `Object` переменные.  
  
> [!NOTE]
>  `Len` Функция не может иметь возможность определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определяемые пользователем типы данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic, в формате Юникод, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, он возвращает длину `String`. Если значение параметра равно NULL `Object` ссылку, функция возвращает нуль. Если `Object` содержит другой тип, возникает исключение.  
  
   
  
## Examples  
 В этом примере используется `Len` для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : obj -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое <see langword="String" /> выражение или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, <see langword="Len" /> функция возвращает размер сразу будет записан в файл функцией <see langword="FilePut" /> функции.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимое для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменные, `Len` функция возвращает размер сразу будет записан в файл функцией `FilePut` функции. Если `Object` содержит `String`, он возвращает длину строки. Если `Object` содержит другой тип, то возвращается размер объекта, который будет записан в файл функцией `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться для строковых полей, чтобы определить размер строки, в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибут, если он доступен, при определении размера `Object` переменные.  
  
> [!NOTE]
>  `Len` Функция не может иметь возможность определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определяемые пользователем типы данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic, в формате Юникод, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, он возвращает длину `String`. Если значение параметра равно NULL `Object` ссылку, функция возвращает нуль. Если `Object` содержит другой тип, возникает исключение.  
  
   
  
## Examples  
 В этом примере используется `Len` для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (sbyte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::SByte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : sbyte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое <see langword="String" /> выражение или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, <see langword="Len" /> функция возвращает размер сразу будет записан в файл функцией <see langword="FilePut" /> функции.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимое для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменные, `Len` функция возвращает размер сразу будет записан в файл функцией `FilePut` функции. Если `Object` содержит `String`, он возвращает длину строки. Если `Object` содержит другой тип, то возвращается размер объекта, который будет записан в файл функцией `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться для строковых полей, чтобы определить размер строки, в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибут, если он доступен, при определении размера `Object` переменные.  
  
> [!NOTE]
>  `Len` Функция не может иметь возможность определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определяемые пользователем типы данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic, в формате Юникод, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, он возвращает длину `String`. Если значение параметра равно NULL `Object` ссылку, функция возвращает нуль. Если `Object` содержит другой тип, возникает исключение.  
  
   
  
## Examples  
 В этом примере используется `Len` для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (float Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(float Expression);" />
      <MemberSignature Language="F#" Value="static member Len : single -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое <see langword="String" /> выражение или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, <see langword="Len" /> функция возвращает размер сразу будет записан в файл функцией <see langword="FilePut" /> функции.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимое для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменные, `Len` функция возвращает размер сразу будет записан в файл функцией `FilePut` функции. Если `Object` содержит `String`, он возвращает длину строки. Если `Object` содержит другой тип, то возвращается размер объекта, который будет записан в файл функцией `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться для строковых полей, чтобы определить размер строки, в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибут, если он доступен, при определении размера `Object` переменные.  
  
> [!NOTE]
>  `Len` Функция не может иметь возможность определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определяемые пользователем типы данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic, в формате Юникод, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, он возвращает длину `String`. Если значение параметра равно NULL `Object` ссылку, функция возвращает нуль. Если `Object` содержит другой тип, возникает исключение.  
  
   
  
## Examples  
 В этом примере используется `Len` для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое <see langword="String" /> выражение или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, <see langword="Len" /> функция возвращает размер сразу будет записан в файл функцией <see langword="FilePut" /> функции.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимое для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменные, `Len` функция возвращает размер сразу будет записан в файл функцией `FilePut` функции. Если `Object` содержит `String`, он возвращает длину строки. Если `Object` содержит другой тип, то возвращается размер объекта, который будет записан в файл функцией `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться для строковых полей, чтобы определить размер строки, в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибут, если он доступен, при определении размера `Object` переменные.  
  
> [!NOTE]
>  `Len` Функция не может иметь возможность определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определяемые пользователем типы данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic, в формате Юникод, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, он возвращает длину `String`. Если значение параметра равно NULL `Object` ссылку, функция возвращает нуль. Если `Object` содержит другой тип, возникает исключение.  
  
   
  
## Examples  
 В этом примере используется `Len` для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ushort Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UShort) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt16 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое <see langword="String" /> выражение или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, <see langword="Len" /> функция возвращает размер сразу будет записан в файл функцией <see langword="FilePut" /> функции.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимое для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменные, `Len` функция возвращает размер сразу будет записан в файл функцией `FilePut` функции. Если `Object` содержит `String`, он возвращает длину строки. Если `Object` содержит другой тип, то возвращается размер объекта, который будет записан в файл функцией `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться для строковых полей, чтобы определить размер строки, в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибут, если он доступен, при определении размера `Object` переменные.  
  
> [!NOTE]
>  `Len` Функция не может иметь возможность определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определяемые пользователем типы данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic, в формате Юникод, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, он возвращает длину `String`. Если значение параметра равно NULL `Object` ссылку, функция возвращает нуль. Если `Object` содержит другой тип, возникает исключение.  
  
   
  
## Examples  
 В этом примере используется `Len` для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (uint Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt32 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint32 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое <see langword="String" /> выражение или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, <see langword="Len" /> функция возвращает размер сразу будет записан в файл функцией <see langword="FilePut" /> функции.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимое для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменные, `Len` функция возвращает размер сразу будет записан в файл функцией `FilePut` функции. Если `Object` содержит `String`, он возвращает длину строки. Если `Object` содержит другой тип, то возвращается размер объекта, который будет записан в файл функцией `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться для строковых полей, чтобы определить размер строки, в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибут, если он доступен, при определении размера `Object` переменные.  
  
> [!NOTE]
>  `Len` Функция не может иметь возможность определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определяемые пользователем типы данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic, в формате Юникод, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, он возвращает длину `String`. Если значение параметра равно NULL `Object` ссылку, функция возвращает нуль. Если `Object` содержит другой тип, возникает исключение.  
  
   
  
## Examples  
 В этом примере используется `Len` для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ulong Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt64 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое <see langword="String" /> выражение или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, <see langword="Len" /> функция возвращает размер сразу будет записан в файл функцией <see langword="FilePut" /> функции.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимое для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменные, `Len` функция возвращает размер сразу будет записан в файл функцией `FilePut` функции. Если `Object` содержит `String`, он возвращает длину строки. Если `Object` содержит другой тип, то возвращается размер объекта, который будет записан в файл функцией `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться для строковых полей, чтобы определить размер строки, в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибут, если он доступен, при определении размера `Object` переменные.  
  
> [!NOTE]
>  `Len` Функция не может иметь возможность определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определяемые пользователем типы данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic, в формате Юникод, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, он возвращает длину `String`. Если значение параметра равно NULL `Object` ссылку, функция возвращает нуль. Если `Object` содержит другой тип, возникает исключение.  
  
   
  
## Examples  
 В этом примере используется `Len` для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="LSet">
      <MemberSignature Language="C#" Value="public static string LSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member LSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.LSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Source">Обязательный. <see langword="String" /> выражение. Имя строковой переменной.</param>
        <param name="Length">Обязательный. <see langword="Integer" /> выражение. Длина возвращаемой строки.</param>
        <summary>Возвращает строку с выравниванием по левому краю, которая содержит указанную строку, приведенную к заданной длине.</summary>
        <returns>Выровненная по левому краю строка запрашиваемой длины, содержащая указанную строку.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если указанная строка длиннее, чем указанной длины, возвращается строка укорачивается до указанной длины. Если указанная строка короче указанной длины, добавляются символы пробела справа возвращаемой строки для достижения соответствующей длины.  
  
   
  
## Examples  
 В этом примере демонстрируется использование `LSet` функции.  
  
 [!code-vb[VbVbalrStrings#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md">Эффективное использование типов данных</related>
      </Docs>
    </Member>
    <Member MemberName="LTrim">
      <MemberSignature Language="C#" Value="public static string LTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member LTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Обязательный. Любое допустимое выражение типа <see langword="String" />.</param>
        <summary>Возвращает строку, содержащую копию указанной строки без начальных пробелов (<see langword="LTrim" />), без конечных пробелов (<see langword="RTrim" />), либо не начальные или конечные пробелы (<see langword="Trim" />).</summary>
        <returns>Строка, содержащая копию указанной строки без начальных пробелов (<see langword="LTrim" />), замыкающих пробелов (<see langword="RTrim" />) или без тех и других (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`, `RTrim`, И `Trim` функции удалить пробелы в конце строки.  
  
   
  
## Examples  
 В этом примере используется `LTrim` функции, чтобы убрать пробелы в начале и `RTrim` функция, чтобы убрать конечные пробелы из строковой переменной. Она использует `Trim` функцию для удаления обоих типов пробелов.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Mid">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает строку, содержащую символы из указанной строки.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Start" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Обязательный. <see langword="String" /> выражение, из которого возвращаются знаки.</param>
        <param name="Start">Обязательный. <see langword="Integer" /> выражение. Начальная позиция возвращаемых знаков. Если <paramref name="Start" /> больше, чем количество символов в <paramref name="str" />, <see langword="Mid" /> функция возвращает строку нулевой длины (»»). <paramref name="Start" /> отсчитывается от единицы.</param>
        <summary>Возвращает строку, содержащую все символы, начиная с указанной позиции в строке.</summary>
        <returns>Строка, состоящая из всех символов, начиная с указанной позиции в строке.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы определить количество символов в `str`, использовать `Len` функции.  
  
 Visual Basic имеет `Mid` функции и `Mid` инструкции. Эти элементы, которые работают на указанное число знаков в строке, но `Mid` функция возвращает символов при `Mid` инструкция заменяет символы. Дополнительные сведения см. в разделе [оператор Mid](~/docs/visual-basic/language-reference/statements/mid-statement.md).  
  
> [!NOTE]
>  `MidB` Функция в предыдущих версиях Visual Basic возвращает строку, в байтах, а не символы. Он используется главным образом для преобразования строк в приложениях двухбайтовой кодировки (DBCS). Все строки Visual Basic, в формате Юникод, и `MidB` больше не поддерживается.  
  
   
  
## Examples  
 Последняя строка в этом примере используется перегрузка метода `Mid` функции для получения пятого и последующих символов из строки.  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt;= 0 или <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Строки в Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Знакомство со строками в Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/mid-statement.md">Оператор Mid</related>
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start, int Length);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Start" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Length" Type="System.Int32" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Обязательный. <see langword="String" /> выражение, из которого возвращаются знаки.</param>
        <param name="Start">Обязательный. <see langword="Integer" /> выражение. Начальная позиция возвращаемых знаков. Если <paramref name="Start" /> больше, чем количество символов в <paramref name="str" />, <see langword="Mid" /> функция возвращает строку нулевой длины (»»). <paramref name="Start" /> отсчитывается.</param>
        <param name="Length">Необязательный параметр. <see langword="Integer" /> выражение. Число возвращаемых символов. Если этот параметр опущен или количество меньше, чем <paramref name="Length" /> знаков в тексте (включая символ в позиции <paramref name="Start" />), возвращаются все знаки от начальной позиции до конца строки.</param>
        <summary>Возвращает строку, содержащую указанное число символов, начиная с указанной позиции в строке.</summary>
        <returns>Строка, состоящая из указанное количество символов, начиная с указанной позиции в строке.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы определить количество символов в `str`, использовать `Len` функции.  
  
 Visual Basic имеет `Mid` функции и `Mid` инструкции. Эти элементы, которые работают на указанное число знаков в строке, но `Mid` функция возвращает символов при `Mid` инструкция заменяет символы. Дополнительные сведения см. в разделе [оператор Mid](~/docs/visual-basic/language-reference/statements/mid-statement.md).  
  
> [!NOTE]
>  `MidB` Функция в предыдущих версиях Visual Basic возвращает строку, в байтах, а не символы. Он используется главным образом для преобразования строк в приложениях двухбайтовой кодировки (DBCS). Все строки Visual Basic, в формате Юникод, и `MidB` больше не поддерживается.  
  
   
  
## Examples  
 Первые два `Mid` функции в этом примере возвращают указанное количество символов из строки, начиная с заданной позиции. (Последняя функция иллюстрирует <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> перегружать и только указывает начальную точку для извлечения строки.)  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt;= 0 или <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Строки в Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Знакомство со строками в Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/mid-statement.md">Оператор Mid</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Expression As String, Find As String, Replacement As String, Optional Start As Integer = 1, Optional Count As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * string * int * int * Microsoft.VisualBasic.CompareMethod -&gt; string" Usage="Microsoft.VisualBasic.Strings.Replace (Expression, Find, Replacement, Start, Count, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Find" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Replacement" Type="System.String" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Start" Type="System.Int32" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Count" Type="System.Int32" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="5" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Обязательный. Строковое выражение, содержащее замещаемую подстроку.</param>
        <param name="Find">Обязательный. Подстрока, поиск которого выполняется.</param>
        <param name="Replacement">Обязательный. Подстрока для замены.</param>
        <param name="Start">Необязательный параметр. Позиция в <paramref name="Expression" /> которой начинается подстрока, используемая для замены. Возвращаемое значение <see langword="Replace" /> представляет собой строку, которая начинается с <paramref name="Start" />, с соответствующими заменами. Если этот аргумент не указан, используется значение 1.</param>
        <param name="Count">Необязательный параметр. Число выполняемых замен подстроки. Если этот аргумент опущен, по умолчанию принимается значение –1, указывающее, что следует "выполнить все возможные замены".</param>
        <param name="Compare">Необязательный параметр. Числовое значение, показывающее вид сравнения, используемый при оценке подстрок. Значения см.</param>
        <summary>Возвращает строку, в которой указанная подстрока заменена другой подстрокой заданное число раз.</summary>
        <returns><see langword="Replace" /> Возвращает следующие значения.  
  
 <list type="table"><item><term> If 
 </term><description> Функция REPLACE возвращает 
 </description></item><item><term><paramref name="Find" /> имеет нулевую длину или <see langword="Nothing" /></term><description> Копия <paramref name="Expression" /></description></item><item><term><paramref name="Replace" /> имеет нулевую длину 
 </term><description> Копия <paramref name="Expression" /> без вхождений строки <paramref name="Find" /></description></item><item><term><paramref name="Expression" /> имеет нулевую длину или <see langword="Nothing" />, или <paramref name="Start" /> больше, чем длина <paramref name="Expression" /></term><description><see langword="Nothing" /></description></item><item><term><paramref name="Count" /> имеет значение 0 
 </term><description> Копия <paramref name="Expression" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Возвращаемое значение `Replace` функция представляет собой строку, которая начинается с позиции, заданной параметром `Start` и завершается в конце `Expression` строка со сделанными подстановками виде, заданном параметрами `Find` и `Replace` значения.  
  
 `Compare` Аргумент может иметь следующие значения.  
  
|Константа|Описание|  
|-|-|  
|`Binary`|Выполняется двоичное сравнение|  
|`Text`|Выполняется текстовое сравнение|  
  
   
  
## Examples  
 В этом примере показано `Replace` функции.  
  
```vb  
Dim TestString As String = "Shopping List"  
' Returns "Shipping List".  
Dim aString As String = Replace(TestString, "o", "i")  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Count" /> &lt; –1 или <paramref name="Start" /> &lt;= 0.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Filter" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public static string Right (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Right(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Right (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Right(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Right : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Right (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Обязательный. <see langword="String" /> выражение, из которого возвращаются крайние правые знаки.</param>
        <param name="Length">Обязательный. <see langword="Integer" />. Числовое выражение, указывающее, как число возвращаемых знаков. Если значение равно 0, строка нулевой длины ("») возвращается. Если больше или равно числу символов в <paramref name="str" />, возвращается вся строка.</param>
        <summary>Возвращает строку, содержащую указанное число знаков с правой стороны строки.</summary>
        <returns>Строка, содержащая указанное число знаков с правой стороны строки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы определить количество символов в `str`, использовать `Len` функции. При использовании в форму Windows или любому другому классу, который имеет `Right` свойства, необходимо полностью определить функцию с `Microsoft.VisualBasic.Strings.Right`.  
  
> [!NOTE]
>  `RightB` Функция в более ранних версиях Visual Basic возвращает строку, в байтах, а не символы. Он используется главным образом для преобразования строк в приложениях двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic, в формате Юникод, и `RightB` больше не поддерживается.  
  
   
  
## Examples  
 В этом примере демонстрируется использование `Right` функция возвращает подстроку заданной `String`. В классе, который имеет `Right` свойство, может потребоваться полные `Right` функции.  
  
 [!code-vb[VbVbalrStrings#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="RSet">
      <MemberSignature Language="C#" Value="public static string RSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member RSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.RSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Source">Обязательный. <see langword="String" /> выражение. Имя строковой переменной.</param>
        <param name="Length">Обязательный. <see langword="Integer" /> выражение. Длина возвращаемой строки.</param>
        <summary>Возвращает по правому краю строку, содержащую указанную строку, приведенную к заданной длине.</summary>
        <returns>Выровненная по правому краю строка, содержащая указанную строку, настроенную под указанную длину.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `Source` длиннее, чем `Length`, `RSet` помещает только крайние левые знаки, вплоть до этого `Source`, в возвращаемой строке. Если указанная строка короче указанной длины, добавляются символы пробела в левый конец string для получения соответствующей длины. Если указанная строка длиннее, чем указанной длины, он укорачивается до указанной длины.  
  
   
  
## Examples  
 В этом примере демонстрируется использование `RSet` функции.  
  
 [!code-vb[VbVbalrStrings#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md">Эффективное использование типов данных</related>
      </Docs>
    </Member>
    <Member MemberName="RTrim">
      <MemberSignature Language="C#" Value="public static string RTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member RTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.RTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Обязательный. Любое допустимое выражение типа <see langword="String" />.</param>
        <summary>Возвращает строку, содержащую копию указанной строки без начальных пробелов (<see langword="LTrim" />), без конечных пробелов (<see langword="RTrim" />), либо не начальные или конечные пробелы (<see langword="Trim" />).</summary>
        <returns>Строка, содержащая копию указанной строки без начальных пробелов (<see langword="LTrim" />), замыкающих пробелов (<see langword="RTrim" />) или без тех и других (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`, `RTrim`, И `Trim` функции удалить пробелы в конце строки.  
  
   
  
## Examples  
 В этом примере используется `LTrim` функции, чтобы убрать пробелы в начале и `RTrim` функция, чтобы убрать конечные пробелы из строковой переменной. Она использует `Trim` функцию для удаления обоих типов пробелов.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="Space">
      <MemberSignature Language="C#" Value="public static string Space (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Space(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Space (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Space(int Number);" />
      <MemberSignature Language="F#" Value="static member Space : int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Space Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. <see langword="Integer" /> выражение. Число пробелов в строке.</param>
        <summary>Возвращает строку, состоящую из указанного числа пробелов.</summary>
        <returns>Строка, состоящая из указанного числа пробелов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Space` Функция может быть полезна для форматирования выходных данных и очистки данных в строки фиксированной длины.  
  
   
  
## Examples  
 В этом примере используется `Space` функция возвращает строку, состоящую из указанного числа пробелов.  
  
 [!code-vb[VbVbalrStrings#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string Expression, string Delimiter = &quot; &quot;, int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (Expression As String, Optional Delimiter As String = &quot; &quot;, Optional Limit As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Split : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Split (Expression, Delimiter, Limit, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Delimiter" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Limit" Type="System.Int32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Обязательный. <see langword="String" /> выражение, содержащее подстроки и разделители.</param>
        <param name="Delimiter">Необязательный параметр. Любой одиночный символ, используемый для обозначения границ подстроки. Если <paramref name="Delimiter" /> опущен, символ пробела (» «) предполагается, что разделитель.</param>
        <param name="Limit">Необязательный параметр. Максимальное число подстрок, на которые должна быть разделена входная строка. Значение по умолчанию –1 указывает, что входная строка должна быть разбита в местах каждого из вхождений строки <paramref name="Delimiter" />.</param>
        <param name="Compare">Необязательный параметр. Числовое значение, указывающее, сравнения, выполняемого при оценке подстрок. Сведения о значениях см. в разделе "Параметры".</param>
        <summary>Возвращает отсчитываемый от нуля одномерный массив, содержащий указанное число подстрок.</summary>
        <returns>Массив<see langword="String" /> . Если <paramref name="Expression" /> представляет собой строку нулевой длины ("»), <see langword="Split" /> возвращает одноэлементный массив, содержащий строку нулевой длины. Если <paramref name="Delimiter" /> является строкой нулевой длины, или если он не отображается в любом месте в <paramref name="Expression" />, <see langword="Split" /> возвращает одноэлементный массив, содержащий всю <paramref name="Expression" /> строка.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию или когда `Limit` равно -1, `Split` функция разбивает входной строке все вхождения строки разделителя и возвращает подстроки в массиве. Когда `Limit` параметра не равно нулю, `Split` функция разбивает строку на первой `Limit`-1 вхождений разделителя и возвращает массив с подстроками. Например `Split("a:b:c", ":")` возвращает массив `{"a", "b", "c"}`, хотя `Split("a:b:c", ":", 2)` возвращает массив `{"a", "b:c"}`.  
  
 Когда `Split` функция обнаруживает два разделителя в строке или разделитель в начале или конце строки, он интерпретирует их как окружающие пустую строку (»»). Например `Split("xx", "x")` возвращает массив, содержащий три пустые строки: одну от начала строки и первого «x», другую между двумя строками «x» и одну от последнее «x» и в конце строки.  
  
 В этой таблице показано, как необязательный `Delimiter`, `Limit`, и `Compare` параметры можно изменить поведение `Split` функции.  
  
|Вызов разделителя|Возвращаемое значение|  
|-|-|  
|`Split("42, 12, 19")`|{"42," , "12," , "19"}|  
|`Split("42, 12, 19", ", ")`|{"42", "12", "19"}|  
|`Split("42, 12, 19", ", ", 2)`|{"42", "12, 19"}|  
|`Split("192.168.0.1", ".")`|{"192", "168", "0", "1"}|  
|`Split("Alice and Bob", " AND ")`|{«Алиса и Боб»}|  
|`Split("Alice and Bob", " AND ", ,CompareMethod.Text)`|{«Алиса», «Bob»}|  
|`Split("someone@example.com", "@",1)`|{"someone@example.com"}|  
|`Split("someone@example.com", "@",2)`|{«someone», «example.com»}|  
  
 `Compare` Аргумент может иметь следующие значения.  
  
|Константа|Описание|Значение|  
|-|-|-|  
|`CompareMethod.Binary`|Выполняется двоичное сравнение|0|  
|`CompareMethod.Text`|Выполняется текстовое сравнение|1|  
  
   
  
## Examples  
 В следующем примере показано, как для разбиения строки относительно пробелов.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 Ниже приведен пример Разделение строк с помощью нескольких разделителей в строке и фильтрация пустых строк.  
  
 [!code-vb[VbVbalrStrings#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Join" />
        <altmember cref="T:Microsoft.VisualBasic.CompareMethod" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="StrComp">
      <MemberSignature Language="C#" Value="public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrComp (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member StrComp : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.StrComp (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="String2" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Обязательный. Любое допустимое выражение типа <see langword="String" />.</param>
        <param name="String2">Обязательный. Любое допустимое выражение типа <see langword="String" />.</param>
        <param name="Compare">Необязательный параметр. Указывает тип выполняемого сравнения строк. Если <paramref name="Compare" /> опущен, <see langword="Option Compare" /> параметр определяет тип сравнения.</param>
        <summary>Возвращает значение -1, 0 или 1, в зависимости от результата сравнения строк.</summary>
        <returns><see langword="StrComp" /> Функция имеет следующие возвращаемые значения.  
  
 <list type="table"><item><term> If 
 </term><description> StrComp возвращает 
 </description></item><item><term><paramref name="String1" /> Сортирует перед <paramref name="String2" /></term><description> -1 
 </description></item><item><term><paramref name="String1" /> равно <paramref name="String2" />.</term><description> 0 
 </description></item><item><term><paramref name="String1" /> Сортирует после <paramref name="String2" /></term><description> 1 
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Сравнения строк по значениям буквенно-цифровой сортировки, начиная с первого символа. Дополнительные сведения о двоичные сравнения значений, текстовые сравнения и порядок сортировки, см. в разделе [оператор Option Compare](~/docs/visual-basic/language-reference/statements/option-compare-statement.md).  
  
 Параметры аргумента `Compare`:  
  
|Константа|Описание|  
|-|-|  
|`Binary`|Выполняется двоичное сравнение, на основе порядка сортировки, производного от внутренних двоичных представлений символов.|  
|`Text`|Выполняет сравнение текста, на основе порядка сортировки текста без учета регистра, определяется системы `LocaleID` значение.|  
  
   
  
## Examples  
 В этом примере используется `StrComp` Функция вернула результат сравнения строк.  
  
 [!code-vb[VbVbalrStrings#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Недопустимое значение параметра <paramref name="Compare" />.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Строки в Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Знакомство со строками в Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="StrConv">
      <MemberSignature Language="C#" Value="public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrConv (str As String, Conversion As VbStrConv, Optional LocaleID As Integer = 0) As String" />
      <MemberSignature Language="F#" Value="static member StrConv : string * Microsoft.VisualBasic.VbStrConv * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrConv (str, Conversion, LocaleID)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Conversion" Type="Microsoft.VisualBasic.VbStrConv" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="LocaleID" Type="System.Int32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Обязательный. <see langword="String" /> выражение для преобразования.</param>
        <param name="Conversion">Обязательный. <see cref="T:Microsoft.VisualBasic.VbStrConv" /> член. Значение перечисления, указывающее тип выполняемого преобразования.</param>
        <param name="LocaleID">Необязательный параметр. <see langword="LocaleID" /> Значение, если оно отличается от системы <see langword="LocaleID" /> значение. (Система <see langword="LocaleID" /> значение по умолчанию.)</param>
        <summary>Возвращает строку, преобразованную указанным образом.</summary>
        <returns>Строка, преобразованная как указано.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Константы `VbStrConv.Wide`, `VbStrConv.Narrow`, `VbStrConv.SimplifiedChinese`, `VbStrConv.TraditionalChinese`, `VbStrConv.Katakana`, и `VbStrConv.Hiragana` может привести к ошибкам во время выполнения при использовании в регионах, где они не применяются, но не всегда: константы `VbStrConv.Katakana` и `VbStrConv.Hiragana`может использоваться в других языковых системе с японский языковой пакет установлен. Кроме того, использование констант `VbStrConv.Wide` и `VbStrConv.Narrow` поддерживается на любой системе с восточно-азиатского языка установки.  
  
 Эта функция использует сведения о языке и региональных параметрах приложения при обработке строки, чтобы изменения регистра подходят для языкового стандарта, в котором используется приложение.  
  
> [!IMPORTANT]
>  Если приложение принимает решения относительно безопасности, на основе результата сравнения или операциями изменения регистра, то следует использовать операцию <xref:System.String.Compare%2A?displayProperty=nameWithType> и передайте <xref:System.StringComparison.Ordinal> или <xref:System.StringComparison.OrdinalIgnoreCase> для `comparisonType` аргумент. Дополнительные сведения см. в разделе [как языка и региональных параметров влияет на строки в Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
 Параметры аргумента `Conversion`:  
  
|Элемент перечисления|Описание|  
|-|-|  
|`VbStrConv.None`|Не выполняет преобразование|  
|`VbStrConv.LinguisticCasing`|Использует лингвистические правила для учета регистра, а не в файловой системе (по умолчанию). Действителен в `VbStrConv.UpperCase` и `VbStrConv.LowerCase` только.|  
|`VbStrConv.UpperCase`|Преобразует строку в верхний регистр.|  
|`VbStrConv.LowerCase`|Преобразует строку в нижний регистр.|  
|`VbStrConv.ProperCase`|Преобразует первую букву каждого слова в строке в верхний регистр.|  
|`VbStrConv.Wide` <sup>*</sup>|Преобразует все узкие (с половиной ширины) символы в строке (с полной шириной) расширенных символов. [!INCLUDE[vbstrconv-wide](~/includes/vbstrconv-wide-md.md)]|  
|`VbStrConv.Narrow` <sup>*</sup>|Преобразует широкие (с полной шириной) знаки в строке символов (с половиной ширины).|  
|`VbStrConv.Katakana` <sup>**</sup>|Преобразует все символы хирагана в символы катакана.|  
|`VbStrConv.Hiragana` <sup>**</sup>|Преобразует все символы катакана в символы хирагана.|  
|`VbStrConv.SimplifiedChinese` <sup>*</sup>|Преобразует символы традиционного китайского языка (упрощенное письмо).|  
|`VbStrConv.TraditionalChinese` <sup>*</sup>|Преобразует символы упрощенного китайского письма в китайском (традиционном).|  
  
 <sup>*</sup> Используется с азиатскими языками.  
  
 <sup>**</sup> Только для японского языка.  
  
> [!NOTE]
>  Эти константы указываются в общеязыковой среде выполнения .NET Framework. Как следствие они могут использоваться в любом месте кода вместо фактических значений. Большинство могут объединяться (например, `UpperCase + Wide`), за исключением случаев, когда они являются взаимоисключающими (например, `VbStrConv.Wide + VbStrConv.Narrow`).  
  
 Ниже приведены допустимые разделители слов для указываться с учетом регистра. NULL (`Chr$(0)`), символ горизонтальной табуляции (`Chr$(9)`), перевод строки (`Chr$(10)`), вертикальной табуляции (`Chr$(11)`), перевод (`Chr$(12)`), символ возврата каретки (`Chr$(13)`), пробел (однобайтовый набор) (`Chr$(32)`). Фактическое значение для пробела, который может быть полной или половинной ширины, зависит от страны или региона для восточноазиатских языков и региональных параметров.  
  
   
  
## Examples  
 В этом примере преобразует текст в нижнем регистре.  
  
 [!code-vb[VbVbalrStrings#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Значение <paramref name="LocaleID" /> не поддерживается, <paramref name="Conversion" /> &lt; 0 или &gt; 2048, либо конверсия не поддерживается для указанного языкового стандарта.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="StrDup">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает строку или объект, состоящий из указанного знака, повторенного указанное число раз.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, char Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, char Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, char Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * char -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Character" Type="System.Char" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. <see langword="Integer" /> выражение. Длина возвращаемой строки.</param>
        <param name="Character">Обязательный. Любое допустимое <see langword="Char" />, <see langword="String" />, или <see langword="Object" /> выражение. Будет использоваться только первый знак выражения. Если параметр Character относится к типу <see langword="Object" />, он должен содержать значение <see langword="Char" /> или <see langword="String" />.</param>
        <summary>Возвращает строку или объект, состоящий из указанного знака, повторенного указанное число раз.</summary>
        <returns>Строка или объект, состоящие из указанного знака, повторенного определенное количество раз.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта функция возвращает `String` состоит из повторяющихся символов. Символ, который делает строку является первым символом в `Character` повторяющийся аргумент и его `Number` раз.  
  
   
  
## Examples  
 В этом примере используется `StrDup` функция, возвращающая строки дублируются символов.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> меньше 0 или <paramref name="Character" /> тип не является допустимым.</exception>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="Character" /> имеет значение <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static object StrDup (int Number, object Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static object StrDup(int32 Number, object Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ StrDup(int Number, System::Object ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * obj -&gt; obj" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Character" Type="System.Object" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. <see langword="Integer" /> выражение. Длина возвращаемой строки.</param>
        <param name="Character">Обязательный. Любое допустимое <see langword="Char" />, <see langword="String" />, или <see langword="Object" /> выражение. Будет использоваться только первый знак выражения. Если параметр Character относится к типу <see langword="Object" />, он должен содержать значение <see langword="Char" /> или <see langword="String" />.</param>
        <summary>Возвращает строку или объект, состоящий из указанного знака, повторенного указанное число раз.</summary>
        <returns>Строка или объект, состоящие из указанного знака, повторенного определенное количество раз.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта функция возвращает `String` состоит из повторяющихся символов. Символ, который делает строку является первым символом в `Character` повторяющийся аргумент и его `Number` раз.  
  
   
  
## Examples  
 В этом примере используется `StrDup` функция, возвращающая строки дублируются символов.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> меньше 0 или <paramref name="Character" /> тип не является допустимым.</exception>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="Character" /> имеет значение <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, string Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, string Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, System::String ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Character" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. <see langword="Integer" /> выражение. Длина возвращаемой строки.</param>
        <param name="Character">Обязательный. Любое допустимое <see langword="Char" />, <see langword="String" />, или <see langword="Object" /> выражение. Будет использоваться только первый знак выражения. Если параметр Character относится к типу <see langword="Object" />, он должен содержать значение <see langword="Char" /> или <see langword="String" />.</param>
        <summary>Возвращает строку или объект, состоящий из указанного знака, повторенного указанное число раз.</summary>
        <returns>Строка или объект, состоящие из указанного знака, повторенного определенное количество раз.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта функция возвращает `String` состоит из повторяющихся символов. Символ, который делает строку является первым символом в `Character` повторяющийся аргумент и его `Number` раз.  
  
   
  
## Examples  
 В этом примере используется `StrDup` функция, возвращающая строки дублируются символов.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> меньше 0 или <paramref name="Character" /> тип не является допустимым.</exception>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="Character" /> имеет значение <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="StrReverse">
      <MemberSignature Language="C#" Value="public static string StrReverse (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrReverse(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrReverse (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrReverse(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member StrReverse : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrReverse Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">Обязательный. Строковое выражение, символы которой являются резервируется. Если <paramref name="Expression" /> представляет собой строку нулевой длины ("»), возвращается строка нулевой длины.</param>
        <summary>Возвращает строку, в котором изменяется порядок следования символов в указанной строке.</summary>
        <returns>Строка, содержащая те же знаки, что и в заданной строке, но в противоположном порядке.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `StrReverse` Функция возвращает строку, содержащую те же символы, что `Expression`, но в обратном порядке.  
  
   
  
## Examples  
 [!code-vb[VbVbalrStrings#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static string Trim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Trim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Trim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Trim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Trim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Обязательный. Любое допустимое выражение типа <see langword="String" />.</param>
        <summary>Возвращает строку, содержащую копию указанной строки без начальных пробелов (<see langword="LTrim" />), без конечных пробелов (<see langword="RTrim" />), либо не начальные или конечные пробелы (<see langword="Trim" />).</summary>
        <returns>Строка, содержащая копию указанной строки без начальных пробелов (<see langword="LTrim" />), замыкающих пробелов (<see langword="RTrim" />) или без тех и других (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`, `RTrim`, И `Trim` функции удалить пробелы в конце строки.  
  
   
  
## Examples  
 В этом примере используется `LTrim` функции, чтобы убрать пробелы в начале и `RTrim` функция, чтобы убрать конечные пробелы из строковой переменной. Она использует `Trim` функцию для удаления обоих типов пробелов.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="UCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает строку или символ, содержащий указанную строку, преобразованную в верхний регистр.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static char UCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char UCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char UCase(char Value);" />
      <MemberSignature Language="F#" Value="static member UCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Value">Обязательный. Любое допустимое <see langword="String" /> или <see langword="Char" /> выражение.</param>
        <summary>Возвращает строку или символ, содержащий указанную строку, преобразованную в верхний регистр.</summary>
        <returns>Строка или знак, содержащие указанную строку, преобразованную в верхний регистр.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Преобразуются только строчные буквы в прописные буквы; Все прописные буквы и символы nonletter остаются неизменными.  
  
 Эта функция использует сведения о языке и региональных параметрах приложения при обработке строки, чтобы изменения регистра подходят для языкового стандарта, в котором используется приложение.  
  
> [!IMPORTANT]
>  Если приложение принимает решения относительно безопасности, на основе результата сравнения или операциями изменения регистра, то следует использовать операцию <xref:System.String.Compare%2A?displayProperty=nameWithType> и передайте <xref:System.StringComparison.Ordinal> или <xref:System.StringComparison.OrdinalIgnoreCase> для `comparisonType` аргумент. Дополнительные сведения см. в разделе [как языка и региональных параметров влияет на строки в Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 В этом примере используется `UCase` функцию для возврата версии строки в верхнем регистре.  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Строки в Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Знакомство со строками в Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static string UCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string UCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member UCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Value">Обязательный. Любое допустимое <see langword="String" /> или <see langword="Char" /> выражение.</param>
        <summary>Возвращает строку или символ, содержащий указанную строку, преобразованную в верхний регистр.</summary>
        <returns>Строка или знак, содержащие указанную строку, преобразованную в верхний регистр.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Преобразуются только строчные буквы в прописные буквы; Все прописные буквы и символы nonletter остаются неизменными.  
  
 Эта функция использует сведения о языке и региональных параметрах приложения при обработке строки, чтобы изменения регистра подходят для языкового стандарта, в котором используется приложение.  
  
> [!IMPORTANT]
>  Если приложение принимает решения относительно безопасности, на основе результата сравнения или операциями изменения регистра, то следует использовать операцию <xref:System.String.Compare%2A?displayProperty=nameWithType> и передайте <xref:System.StringComparison.Ordinal> или <xref:System.StringComparison.OrdinalIgnoreCase> для `comparisonType` аргумент. Дополнительные сведения см. в разделе [как языка и региональных параметров влияет на строки в Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 В этом примере используется `UCase` функцию для возврата версии строки в верхнем регистре.  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Строки в Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Знакомство со строками в Visual Basic</related>
      </Docs>
    </Member>
  </Members>
</Type>