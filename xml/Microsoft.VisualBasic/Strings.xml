<Type Name="Strings" FullName="Microsoft.VisualBasic.Strings">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e93e5b6b26ce449accd7945b0ddc8d55385fc6f4" /><Meta Name="ms.sourcegitcommit" Value="a22d0855bbf24d893f43605f8b7e3a44bd9551a5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70345269" /></Metadata><TypeSignature Language="C#" Value="public sealed class Strings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Strings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Strings" />
  <TypeSignature Language="VB.NET" Value="Public Module Strings" />
  <TypeSignature Language="C++ CLI" Value="public ref class Strings sealed" />
  <TypeSignature Language="F#" Value="type Strings = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>В модуле <see langword="Strings" /> содержатся процедуры, используемые для выполнения операций над строками.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот модуль поддерживает ключевые слова языка Visual Basic и элементы библиотеки времени выполнения, которые обрабатывают строки.  
  
   
  
## Examples  
 В следующем примере показано, как разделить строку в своих пробелах.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Ключевые слова (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic элементов библиотеки времени выполнения</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="Asc">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает целочисленное значение, представляющее код заданного символа.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Asc(char String) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(char String);" />
      <MemberSignature Language="F#" Value="static member Asc : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(char String) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="String">Обязательный. Любое допустимое значение <see langword="Char" /> или выражение <see langword="String" />. Если параметр <paramref name="String" /> — выражение типа <see langword="String" />, в качестве входного значения используется только первый знак строки. Если параметр <paramref name="String" /> равен <see langword="Nothing" /> или не содержит знаков, возникает ошибка <see cref="T:System.ArgumentException" />.</param>
        <summary>Возвращает целочисленное значение, представляющее код заданного символа.</summary>
        <returns>Код символа, соответствующий символу.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc`Возвращает кодовую *точку*или код символа для входного символа. Это может быть от 0 до 255 для значений однобайтовой кодировки (SBCS) и-32768 до 32767 для двухбайтовых значений кодировки (DBCS).  
  
 `AscW`Возвращает кодовую точку Юникода для входного символа. Это может быть от 0 до 65535. Возвращаемое значение не зависит от языка и региональных параметров и параметров кодовой страницы для текущего потока.  
  
> [!NOTE]
>  `AscB` Функция более ранних версий Visual Basic возвращает код для байта, а не для символа. Он используется в основном для преобразования строк в приложениях с двухбайтовой кодировкой (DBCS). Все строки Visual Basic 2005 в Юникоде и `AscB` больше не поддерживаются.  
  
   
  
## Examples  
 В следующем примере `Asc` функция используется для возврата `Integer` кодов символов, соответствующих первой букве в каждой строке.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">Функции (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Asc(string String) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member Asc : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(string String) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="String">Обязательный. Любое допустимое значение <see langword="Char" /> или выражение <see langword="String" />. Если параметр <paramref name="String" /> — выражение типа <see langword="String" />, в качестве входного значения используется только первый знак строки. Если параметр <paramref name="String" /> равен <see langword="Nothing" /> или не содержит знаков, возникает ошибка <see cref="T:System.ArgumentException" />.</param>
        <summary>Возвращает целочисленное значение, представляющее код заданного символа.</summary>
        <returns>Код символа, соответствующий символу.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc`Возвращает кодовую *точку*или код символа для входного символа. Это может быть от 0 до 255 для значений однобайтовой кодировки (SBCS) и-32768 до 32767 для двухбайтовых значений кодировки (DBCS).  
  
 `AscW`Возвращает кодовую точку Юникода для входного символа. Это может быть от 0 до 65535. Возвращаемое значение не зависит от языка и региональных параметров и параметров кодовой страницы для текущего потока.  
  
> [!NOTE]
>  `AscB` Функция более ранних версий Visual Basic возвращает код для байта, а не для символа. Он используется в основном для преобразования строк в приложениях с двухбайтовой кодировкой (DBCS). Все строки Visual Basic 2005 в Юникоде и `AscB` больше не поддерживаются.  
  
   
  
## Examples  
 В следующем примере `Asc` функция используется для возврата `Integer` кодов символов, соответствующих первой букве в каждой строке.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">Функции (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AscW">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает целочисленное значение, представляющее код заданного символа.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 AscW(char String) cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function AscW (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(char String);" />
      <MemberSignature Language="F#" Value="static member AscW : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(char String) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">Обязательный. Любое допустимое значение <see langword="Char" /> или выражение <see langword="String" />. Если параметр <paramref name="String" /> — выражение типа <see langword="String" />, в качестве входного значения используется только первый знак строки. Если параметр <paramref name="String" /> равен <see langword="Nothing" /> или не содержит знаков, возникает ошибка <see cref="T:System.ArgumentException" />.</param>
        <summary>Возвращает целочисленное значение, представляющее код заданного символа.</summary>
        <returns>Код символа, соответствующий символу.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc`Возвращает кодовую *точку*или код символа для входного символа. Это может быть от 0 до 255 для значений однобайтовой кодировки (SBCS) и-32768 до 32767 для двухбайтовых значений кодировки (DBCS).  
  
 `AscW`Возвращает кодовую точку Юникода для входного символа. Это может быть от 0 до 65535. Возвращаемое значение не зависит от языка и региональных параметров и параметров кодовой страницы для текущего потока.  
  
> [!NOTE]
>  `AscB` Функция более ранних версий Visual Basic возвращает код для байта, а не для символа. Он используется в основном для преобразования строк в приложениях с двухбайтовой кодировкой (DBCS). Все строки Visual Basic 2005 в Юникоде и `AscB` больше не поддерживаются.  
  
   
  
## Examples  
 В следующем примере `Asc` функция используется для возврата `Integer` кодов символов, соответствующих первой букве в каждой строке.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">Функции (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 AscW(string String) cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member AscW : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(string String) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">Обязательный. Любое допустимое значение <see langword="Char" /> или выражение <see langword="String" />. Если параметр <paramref name="String" /> — выражение типа <see langword="String" />, в качестве входного значения используется только первый знак строки. Если параметр <paramref name="String" /> равен <see langword="Nothing" /> или не содержит знаков, возникает ошибка <see cref="T:System.ArgumentException" />.</param>
        <summary>Возвращает целочисленное значение, представляющее код заданного символа.</summary>
        <returns>Код символа, соответствующий символу.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc`Возвращает кодовую *точку*или код символа для входного символа. Это может быть от 0 до 255 для значений однобайтовой кодировки (SBCS) и-32768 до 32767 для двухбайтовых значений кодировки (DBCS).  
  
 `AscW`Возвращает кодовую точку Юникода для входного символа. Это может быть от 0 до 65535. Возвращаемое значение не зависит от языка и региональных параметров и параметров кодовой страницы для текущего потока.  
  
> [!NOTE]
>  `AscB` Функция более ранних версий Visual Basic возвращает код для байта, а не для символа. Он используется в основном для преобразования строк в приложениях с двухбайтовой кодировкой (DBCS). Все строки Visual Basic 2005 в Юникоде и `AscB` больше не поддерживаются.  
  
   
  
## Examples  
 В следующем примере `Asc` функция используется для возврата `Integer` кодов символов, соответствующих первой букве в каждой строке.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">Функции (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Chr">
      <MemberSignature Language="C#" Value="public static char Chr (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char Chr(int32 CharCode) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Chr (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Chr(int CharCode);" />
      <MemberSignature Language="F#" Value="static member Chr : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.Chr CharCode" />
      <MemberSignature Language="ILAsm" Value=".method public static char Chr(int32 CharCode) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="CharCode">Обязательный. Выражение <see langword="Integer" />, представляющее <c>кодовую точку</c> (код символа) для символа.</param>
        <summary>Возвращает знак, связанный с указанным кодом знака.</summary>
        <returns>Знак, связанный с указанным кодом знака.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Асимметричный диапазон, принятый для `CharCode` компенсации различий в хранилище `Short` между и `Integer`. Например,-29183 — a `Short` , а + 36353 `Integer`—. Это также обеспечивает совместимость с Visual Basic 6,0.  
  
 `Chr`<xref:System.Text.Encoding> использует класс<xref:System.Text?displayProperty=nameWithType> в пространстве имен, чтобы определить, использует ли текущий поток однобайтовую кодировку (SBCS) или двухбайтовый набор символов (DBCS). Затем он принимает `CharCode` в качестве кодовой точки в соответствующем наборе. Диапазон может быть от 0 до 255 для символов SBCS и от-32768 до 65535 для символов DBCS.  
  
 Возвращаемое значение зависит от кодовой страницы текущего потока, который содержится в <xref:System.Globalization.TextInfo.ANSICodePage%2A> свойстве <xref:System.Globalization.TextInfo> класса в <xref:System.Globalization> пространстве имен. Можно получить <xref:System.Globalization.TextInfo.ANSICodePage%2A> , указав `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.  
  
 `ChrW`принимает `CharCode` в качестве кодовой точки Юникода. Диапазон не зависит от языка и региональных параметров и параметров кодовой страницы для текущего потока. Значения от-32768 до-1 обрабатываются так же, как значения в диапазоне + 32768 – + 65535.  
  
 Числа от 0 до 31 совпадают со стандартными непечатаемыми кодами ASCII. Например, `Chr(10)` возвращает символ перевода строки.  
  
> [!NOTE]
>  `ChrB` Функция в более ранних версиях Visual Basic возвращает один байт. Он используется в основном для преобразования строк в приложениях с двухбайтовой кодировкой (DBCS). Все строки в Visual Basic и .NET Framework находятся в Юникоде и `ChrB` больше не поддерживаются.  
  
   
  
## Examples  
 В следующем примере `Chr` функция используется для возврата символа, связанного с указанным кодом символа.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="CharCode" /> &lt; 0 или &gt; 255 для <see langword="Chr" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="ChrW">
      <MemberSignature Language="C#" Value="public static char ChrW (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ChrW(int32 CharCode) cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChrW (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ChrW(int CharCode);" />
      <MemberSignature Language="F#" Value="static member ChrW : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.ChrW CharCode" />
      <MemberSignature Language="ILAsm" Value=".method public static char ChrW(int32 CharCode) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">Обязательный. Выражение <see langword="Integer" />, представляющее <c>кодовую точку</c> (код символа) для символа.</param>
        <summary>Возвращает знак, связанный с указанным кодом знака.</summary>
        <returns>Знак, связанный с указанным кодом знака.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Асимметричный диапазон, принятый для `CharCode` компенсации различий в хранилище `Short` между и `Integer`. Например,-29183 — a `Short` , а + 36353 `Integer`—. Это также обеспечивает совместимость с Visual Basic 6,0.  
  
 `Chr`<xref:System.Text.Encoding> использует класс<xref:System.Text?displayProperty=nameWithType> в пространстве имен, чтобы определить, использует ли текущий поток однобайтовую кодировку (SBCS) или двухбайтовый набор символов (DBCS). Затем он принимает `CharCode` в качестве кодовой точки в соответствующем наборе. Диапазон может быть от 0 до 255 для символов SBCS и от-32768 до 65535 для символов DBCS.  
  
 Возвращаемое значение зависит от кодовой страницы текущего потока, который содержится в <xref:System.Globalization.TextInfo.ANSICodePage%2A> свойстве <xref:System.Globalization.TextInfo> класса в <xref:System.Globalization> пространстве имен. Можно получить <xref:System.Globalization.TextInfo.ANSICodePage%2A> , указав `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.  
  
 `ChrW`принимает `CharCode` в качестве кодовой точки Юникода. Диапазон не зависит от языка и региональных параметров и параметров кодовой страницы для текущего потока. Значения от-32768 до-1 обрабатываются так же, как значения в диапазоне + 32768 – + 65535.  
  
 Числа от 0 до 31 совпадают со стандартными непечатаемыми кодами ASCII. Например, `Chr(10)` возвращает символ перевода строки.  
  
> [!NOTE]
>  `ChrB` Функция в более ранних версиях Visual Basic возвращает один байт. Он используется в основном для преобразования строк в приложениях с двухбайтовой кодировкой (DBCS). Все строки в Visual Basic и .NET Framework находятся в Юникоде и `ChrB` больше не поддерживаются.  
  
   
  
## Examples  
 В следующем примере `Chr` функция используется для возврата символа, связанного с указанным кодом символа.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="CharCode" /> &lt; –32768 или &gt; 65535 для <see langword="ChrW" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Filter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает массив (с индексацией от нуля), который содержит подмножество массива типа <see langword="String" />, выделяемое согласно указанным условиям фильтрации.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As Object(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : obj[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.Object[]" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Match" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Include" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Обязательный. Одномерный массив строк, в котором необходимо выполнить поиск.</param>
        <param name="Match">Обязательный. Строка, которую требуется найти.</param>
        <param name="Include">Необязательный параметр. Значение типа <see langword="Boolean" />, указывающее, какие подстроки требуется возвращать: содержащие или не содержащие строку <paramref name="Match" />. Если параметр <paramref name="Include" /> равен <see langword="True" />, функция <see langword="Filter" /> возвращает подмножество строк массива, содержащих <paramref name="Match" /> в виде подстроки. Если параметр <paramref name="Include" /> равен <see langword="False" />, функция <see langword="Filter" /> возвращает подмножество строк массива, не содержащих <paramref name="Match" /> в виде подстроки.</param>
        <param name="Compare">Необязательный параметр. Числовое значение, указывающее вид выполняемого сравнения строк. Сведения о значениях см. в разделе "Параметры".</param>
        <summary>Возвращает массив (с индексацией от нуля), который содержит подмножество массива типа <see langword="String" />, выделяемое согласно указанным условиям фильтрации.</summary>
        <returns>Массив с индексацией от нуля, который содержит подмножество массива типа <see langword="String" />, выделяемое согласно указанным условиям фильтрации.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если в `Match` `Source`не найдено совпадений, `Filter` функция возвращает пустой массив. Если `Source` параметр имеет `Nothing` значение или не является одномерным массивом, возникает ошибка.  
  
 Массив, возвращаемый `Filter` функцией, содержит достаточно элементов, чтобы вместить количество сопоставленных элементов.  
  
 `Compare` Аргумент может иметь следующие значения.  
  
|Константа|Описание|  
|-|-|  
|Константа|Описание|  
|`CompareMethod.Binary`|Выполняет двоичное сравнение|  
|`CompareMethod.Text`|Выполняет текстовое сравнение|  
  
   
  
## Examples  
 В этом примере демонстрируется использование `Filter` функции.  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Source" /> является <see langword="Nothing" /> или не является одномерным массивом.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As String(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : string[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String[]" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Match" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Include" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Обязательный. Одномерный массив строк, в котором необходимо выполнить поиск.</param>
        <param name="Match">Обязательный. Строка, которую требуется найти.</param>
        <param name="Include">Необязательный параметр. Значение типа <see langword="Boolean" />, указывающее, какие подстроки требуется возвращать: содержащие или не содержащие строку <paramref name="Match" />. Если параметр <paramref name="Include" /> равен <see langword="True" />, функция <see langword="Filter" /> возвращает подмножество строк массива, содержащих <paramref name="Match" /> в виде подстроки. Если параметр <paramref name="Include" /> равен <see langword="False" />, функция <see langword="Filter" /> возвращает подмножество строк массива, не содержащих <paramref name="Match" /> в виде подстроки.</param>
        <param name="Compare">Необязательный параметр. Числовое значение, указывающее вид выполняемого сравнения строк. Сведения о значениях см. в разделе "Параметры".</param>
        <summary>Возвращает массив (с индексацией от нуля), который содержит подмножество массива типа <see langword="String" />, выделяемое согласно указанным условиям фильтрации.</summary>
        <returns>Массив с индексацией от нуля, который содержит подмножество массива типа <see langword="String" />, выделяемое согласно указанным условиям фильтрации.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если в `Match` `Source`не найдено совпадений, `Filter` функция возвращает пустой массив. Если `Source` параметр имеет `Nothing` значение или не является одномерным массивом, возникает ошибка.  
  
 Массив, возвращаемый `Filter` функцией, содержит достаточно элементов, чтобы вместить количество сопоставленных элементов.  
  
 `Compare` Аргумент может иметь следующие значения.  
  
|Константа|Описание|  
|-|-|  
|`CompareMethod.Binary`|Выполняет двоичное сравнение|  
|`CompareMethod.Text`|Выполняет текстовое сравнение|  
  
   
  
## Examples  
 В этом примере демонстрируется использование `Filter` функции.  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Source" /> является <see langword="Nothing" /> или не является одномерным массивом.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (object Expression, string Style = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(object Expression, string Style) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (Expression As Object, Optional Style As String = &quot;&quot;) As String" />
      <MemberSignature Language="F#" Value="static member Format : obj * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Format (Expression, Style)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Format(object Expression, string Style) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Style" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">Обязательный. Любое допустимое выражение.</param>
        <param name="Style">Необязательный параметр. Правильно именованное или определенное пользователем выражение формата <see langword="String" />.</param>
        <summary>Возвращает строку, отформатированную в соответствии с инструкциями, содержащимися в формате выражения <see langword="String" />.</summary>
        <returns>Строка, отформатированная в соответствии с инструкциями, содержащимися в формате выражения <see langword="String" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.String.Format%2A?displayProperty=nameWithType> Метод также предоставляет аналогичные функции.  
  
 При форматировании нелокализованной числовой строки следует использовать определенный пользователем числовой формат, чтобы убедиться, что вы хотите получить нужный вид.  
  
 Если вы попытаетесь отформатировать число `Style`без указания `Format` функции, функция `Str` предоставляет функциональные возможности, аналогичные функции, хотя это Международная осведомленность. Однако положительные числа, отформатированные как строки `Format` с помощью функции, не включают в себя начальное пространство, зарезервированное для знака значения `Str` ; преобразования, преобразованные с помощью функции, содержат начальное пространство.  
  
## <a name="different-formats-for-different-numeric-values"></a>Различные форматы для различных числовых значений  
 Определяемое пользователем выражение формата для чисел может содержать от одного до трех разделов, разделенных точкой с запятой. `Style` Если аргумент `Format` функции содержит один из стандартных числовых форматов, допускается только один раздел.  
  
|При использовании|Это результат|  
|-|-|  
|Только один раздел|Выражение формата применяется ко всем значениям.|  
|Две секции|Первый раздел применяется к положительным и нулевым значениям; второй применяется к отрицательным значениям.|  
|Три секции|Первый раздел применяется к положительным значениям, а второй применяется к отрицательным значениям, а третья — к нулю.|  
  
 Следующий пример содержит два раздела: первый определяет формат для положительных и нулевых значений; во втором разделе определяется формат отрицательных значений. `Style` Поскольку аргумент `Format` функции принимает строку, он заключен в кавычки.  
  
 [!code-vb[VbVbalrStrings#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#18)]  
  
 Если в символах точки с запятой нет ничего, то раздел Missing будет распечатан с использованием формата положительного значения. Например, следующий формат отображает положительные и отрицательные значения, используя формат в первом разделе, и отображает `Zero` , является ли значение нулевым.  
  
 [!code-vb[VbVbalrStrings#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#19)]  
  
## <a name="predefined-numeric-formats"></a>Предопределенные числовые форматы  
 В следующей таблице приведены стандартные имена числовых форматов. Они могут использоваться именем в качестве `Style` аргумента `Format` функции:  
  
|Название формата|Описание|  
|-|-|  
|`General Number`, `G`или `g`|Отображает число без разделителя тысяч.<br /><br /> Например, `Format(&H3FA, "g")` возвращает `1018`.|  
|`Currency`, `C`или `c`|При необходимости отображает число с разделителем тысяч. отображает две цифры справа от десятичного разделителя. Выходные данные основываются на параметрах национальной настройки системы.<br /><br /> Например, `Format(1234567, "c")` возвращает `$1,234,567.00`.|  
|`Fixed`, `F`или `f`|Отображает по крайней мере одну цифру слева и две цифры справа от десятичного разделителя.<br /><br /> Например, `Format(1234567, "f")` возвращает `1234567.00`.|  
|`Standard`, `N`или `n`|Отображает число с разделителем тысяч, по крайней мере одну цифру слева и две цифры справа от десятичного разделителя.<br /><br /> Например, `Format(1234567, "n")` возвращает `1,234,567.00`.|  
|`Percent`|Отображает число, умноженное на 100 со знаком процента (%) немедленное Добавление вправо; всегда отображает две цифры справа от десятичного разделителя.<br /><br /> Например, `Format(0.4744, "Percent")` возвращает `47.44%`.|  
|`P`, или`p`|Отображает число с разделителем тысяч, умноженное на 100 со знаком процента (%) добавляется вправо и отделяется одним пробелом; всегда отображает две цифры справа от десятичного разделителя.<br /><br /> Например, `Format(0.80345, "p")` возвращает `80.35 %`.|  
|`Scientific`|Использует стандартное экспоненциальное представление, предоставляя две значащие цифры.<br /><br /> Например, `Format(1234567, "Scientific")` возвращает `1.23E+06`.|  
|`E`, или`e`|Использует стандартное экспоненциальное представление, предоставляя шесть значащих цифр.<br /><br /> Например, `Format(1234567, "e")` возвращает `1.234567e+006`.|  
|`D`, или`d`|Отображает число в виде строки, содержащей значение числа в десятичном формате (основание 10). Этот параметр поддерживается только для целочисленных типов`Byte`( `Short`, `Integer`, `Long`,).<br /><br /> Например, `Format(&H7F, "d")` возвращает `127`.|  
|`X`, или`x`|Отображает число в виде строки, содержащей значение числа в шестнадцатеричном (основание 16) формате. Этот параметр поддерживается только для целочисленных типов`Byte`( `Short`, `Integer`, `Long`,).<br /><br /> Например, `Format(127, "x")` возвращает `7f`.|  
|`Yes/No`|Отображает `No` , если число равно 0; в противном случае отображает `Yes`.<br /><br /> Например, `Format(0, "Yes/No")` возвращает `No`.|  
|`True/False`|Отображает `False` , если число равно 0; в противном случае отображает `True`.<br /><br /> Например, `Format(1, "True/False")` возвращает `True`.|  
|`On/Off`|Отображает `Off` , если число равно 0; в противном случае отображает `On`.<br /><br /> Например, `Format(1, "On/Off")` возвращает `On`.|  
  
### <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 Форматы `Yes/No`, `True/False` и`On/Off` не поддерживаются.  
  
## <a name="user-defined-numeric-formats"></a>Определяемые пользователем числовые форматы  
 В следующей таблице приведены символы, которые можно использовать для создания числовых форматов, определяемых пользователем. Они могут использоваться для создания `Style` аргумента `Format` функции:  
  
|Знак|Описание|  
|-|-|  
|Нет|Отображает число без форматирования.|  
|(`0`)|Заполнитель цифры. Отображает цифру или нуль. Если выражение содержит цифру в позиции, где ноль отображается в строке формата, отобразите его. в противном случае в этой должности отображается ноль.<br /><br /> Если число содержит меньше цифр, чем количество нулей (с обеих сторон десятичного разделителя) в выражении формата, отображает начальные или конечные нули. Если число содержит больше цифр справа от десятичного разделителя, чем нулей справа от десятичного разделителя в выражении формата, Округляет число до числа десятичных разрядов, равного нулю. Если число содержит больше цифр слева от десятичного разделителя, чем нулей слева от десятичного разделителя в выражении формата, отображает лишние цифры без изменения.|  
|(`#`)|Заполнитель цифры. Отображает цифру или ничего. Если выражение содержит цифру в позиции, где `#` символ отображается в строке формата, отображает его; в противном случае не отображает ничего в этой позиции.<br /><br /> Этот символ работает как `0` заполнитель цифры, за исключением того, что ведущие и замыкающие нули не отображаются, если число содержит меньше цифр, чем `#` символы с любой стороны десятичного разделителя в выражении формата.|  
|(`.`)|Десятичный заполнитель. Десятичный заполнитель определяет, сколько цифр отображается слева и справа от десятичного разделителя. Если выражение формата содержит только `#` символы слева от этого символа, числа меньше 1 начинаются с десятичного разделителя. Чтобы отобразить ведущие нули с дробными числами, используйте ноль в качестве первого заполнителя цифры слева от десятичного разделителя. В некоторых языковых стандартах в качестве десятичного разделителя используется запятая. Фактический символ, используемый в качестве десятичного заполнителя в форматированном выводе, зависит от числового формата, распознаваемого системой. Таким образом, следует использовать период в качестве десятичного заполнителя в форматах, даже если вы используете языковой стандарт, в котором используется запятая в качестве десятичного заполнителя. Отформатированная строка будет отображаться в формате, правильно соответствующем языковому стандарту.|  
|(`%`)|Заполнитель процентов. Умножает выражение на 100. Символ процента (`%`) вставляется в позицию, где она отображается в строке формата.|  
|(`,`)|Разделитель групп разрядов. Разделитель тысяч разделяет тысячи от сотен в числе с четырьмя или более разрядами слева от десятичного разделителя. Стандартное использование разделителя тысяч указывается, если формат содержит десятичный разделитель, окруженный заполнителями цифр (`0` или `#`).<br /><br /> Разделитель тысяч, расположенный непосредственно слева от десятичного разделителя (указывается, задан ли десятичный знак) или как правый символ в строке означает "масштабировать число, разделив его на 1 000, округляя по мере необходимости". Числа меньше 1 000, но больше или равно 500 отображаются в виде `1`, а числа меньше 500 отображаются как. `0` Два смежных разделителя тысяч в этой ячейке масштабируются с коэффициентом 1 000 000 и дополнительным фактором 1 000 для каждого дополнительного разделителя.<br /><br /> Несколько разделителей в любой точке, отличной от непосредственно слева от десятичного разделителя или крайней правой точки в строке, обрабатываются просто, как указано использование разделителя тысяч. В некоторых языковых стандартах точка используется в качестве разделителя тысяч. Фактический символ, используемый в качестве разделителя тысяч в форматированном выводе, зависит от числового формата, распознаваемого системой. Таким образом, следует использовать запятую в качестве разделителя тысяч в форматах, даже если используется языковой стандарт, в котором точка является разделителем тысяч. Отформатированная строка будет отображаться в формате, правильно соответствующем языковому стандарту.<br /><br /> Например, рассмотрим три следующие строки формата:<br /><br /> -   `"#,0."`, который использует разделитель тысяч для форматирования числа 100 000 000 в виде строки "100 000 000".<br />-   `"#0,."`, который использует масштабирование с коэффициентом 1000, чтобы отформатировать число 100 000 000 как строку "100000".<br />-   `"#,0,."`, в котором для форматирования числа 100 000 000 в виде строки "100 000" используется разделитель групп разрядов и масштабирование на 1000.|  
|(`:`)|Разделитель времени. В некоторых языковых стандартах для представления разделителя времени могут использоваться другие символы. Разделитель времени разделяет часы, минуты и секунды при форматировании значений времени. Фактический символ, используемый в качестве разделителя времени в отформатированном выводе, определяется параметрами системы.|  
|(`/`)|Разделитель компонентов даты. В некоторых языковых стандартах для представления разделителя дат могут использоваться другие символы. Разделитель дат разделяет день, месяц и год при форматировании значений даты. Фактический символ, используемый в качестве разделителя дат в форматированных выходных данных, определяется параметрами системы.|  
|(`E-``E+``e-``e+`)|Экспоненциальный формат. Если выражение формата содержит по крайней мере одну цифру`0` - `#`заполнитель (или) `E-`слева `E+`от `e-`,, `e+`или, число отображается в экспоненциальном формате и `E` или `e` вставляется между числом и его экспонентой. Число заполнителей для цифр слева определяет количество цифр в экспоненте. Используйте `E-` или`e-` для размещения знака минус рядом с отрицательной экспонентой. Используйте `E+` или`e+` , чтобы поместить знак "минус" рядом с отрицательной экспонентой и знак плюса рядом с положительной экспонентой. Чтобы получить правильное форматирование, необходимо также включить заполнители цифр справа от этого символа.|  
|`-` `+` `$` ( )|Литеральные символы. Эти символы отображаются в точности так, как они введены в строке формата. Для вывода символа, отличного от одного из перечисленных выше, перед ним следует указать обратную`\`косую черту () или заключить его в двойные кавычки ("").|  
|(`\`)| Отображает следующий символ в строке формата. Чтобы отобразить символ, который имеет специальное значение в виде литерального символа, перед ним следует указать обратную`\`косую черту (). Сама обратная косая черта не отображается. Использование обратной косой черты аналогично заключению следующего символа в двойные кавычки. Чтобы отобразить обратную косую черту, используйте две`\\`обратные косые черты ().<br /><br /> Примерами символов, которые не могут быть показаны в виде литеральных символов, являются символы форматирования даты и времени`a`( `c` `d`,, `h`, `m`, `n`, `p`,, `q`, ,`s` ,,`y`,и),`#`числовые символы форматирования ( ,`0`, ,`%` `w` `t` `/` `:` `E`, `>` `<``@` `!` `&`, запятая и точка) и символы форматирования строк (,,, и). `e`|  
|(`"``ABC``"`)|Отображает строку в двойных кавычках (""). Чтобы включить строку в аргумент Style из кода, необходимо использовать `Chr(34)` для заключения текста (`34` это код символа для кавычек (")).|  
  
### <a name="legacy-code-example"></a>Старый пример кода  
 В следующей таблице приведены некоторые примеры выражений форматирования для чисел. (В этих примерах предполагается, что параметр языкового стандарта системы — Английский-U. S.) Первый столбец содержит строки формата для `Style` аргумента `Format` функции. остальные столбцы содержат итоговый результат, если форматированные данные имеют значение, заданное в заголовках столбцов.  
  
|Format (`Style`)|"5" в формате|"-5" в формате|"0,5" в формате|  
|-|-|-|-|  
|`Zero-length string ("")`|`5`|`-5`|`0.5`|  
|`0`|`5`|`-5`|`1`|  
|`0.00`|`5.00`|`-5.00`|`0.50`|  
|`#,##0`|`5`|`-5`|`1`|  
|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  
|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  
|`0%`|`500%`|`-500%`|`50%`|  
|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  
|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  
|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  
  
## <a name="predefined-datetime-formats"></a>Стандартные форматы даты и времени  
 В следующей таблице приведены стандартные имена форматов даты и времени. Они могут использоваться именем в качестве аргумента Style для `Format` функции:  
  
|Название формата|Описание|  
|-|-|  
|`General Date`, или`G`|Отображает дату и/или время. Например, `3/12/2008 11:07:31 AM`. Отображение даты определяется текущим значением языка и региональных параметров приложения.|  
|`Long Date`, `Medium Date`или `D`|Отображает дату в соответствии с длинным форматом даты текущего языка и региональных параметров. Например, `Wednesday, March 12, 2008`.|  
|`Short Date`, или`d`|Отображает дату, используя краткий формат даты текущего языка и региональных параметров. Например, `3/12/2008`.<br /><br /> `d` Символ отображает день в определяемом пользователем формате даты.|  
|`Long Time`, `Medium Time`или `T`|Отображает время с использованием длинного формата времени текущего языка и региональных параметров; обычно включает часы, минуты, секунды. Например, `11:07:31 AM`.|  
|`Short Time` или `t`|Отображает время с использованием краткого формата времени текущего языка и региональных параметров. Например, `11:07 AM`.<br /><br /> Символ отображает `AM` или`PM` значения для языковых стандартов, которые используют 12-часовой формат времени в определенном пользователем формате. `t`|  
|`f`|Отображает длинные и короткие сроки в соответствии с форматом текущего языка и региональных параметров. Например, `Wednesday, March 12, 2008 11:07 AM`.|  
|`F`|Отображает длинные и длинные даты в соответствии с форматом текущего языка и региональных параметров. Например, `Wednesday, March 12, 2008 11:07:31 AM`.|  
|`g`|Отображение краткой даты и краткого времени в соответствии с форматом текущего языка и региональных параметров. Например, `3/12/2008 11:07 AM`.|  
|`M`, `m`|Отображает месяц и день даты. Например, `March 12`.<br /><br /> `M` Символ отображает месяц в определяемом пользователем формате даты. `m` Символ отображает минуты в определенном пользователем формате времени.|  
|`R`, `r`|Форматирует дату в соответствии <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> со свойством. Например, `Wed, 12 Mar 2008 11:07:31 GMT`. Отформатированная Дата не корректирует значение даты и времени. Необходимо изменить значение даты и времени на GMT перед вызовом `Format` функции.|  
|`s`|Форматирует дату и время в виде индекса, допускающего сортировку. Например, `2008-03-12T11:07:31`.<br /><br /> `s` Символ отображает секунды в определенном пользователем формате времени.|  
|`u`|Форматирует дату и время в виде индекса, допускающего сортировку по ГРИНВИЧу. Например, `2008-03-12 11:07:31Z`.|  
|`U`|Форматирует дату и время с длинными и длинными датами по ГРИНВИЧу. Например, `Wednesday, March 12, 2008 6:07:31 PM`.|  
|`Y`, `y`|Форматирует дату как год и месяц. Например, `March, 2008`.<br /><br /> Символы `Y` и`y` отображают год в определяемом пользователем формате даты.|  
  
 Дополнительные сведения о текущем языке и региональных параметрах приложения см. [в разделе влияние языка и региональных параметров на строки в Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
## <a name="user-defined-datetime-formats"></a>Пользовательские форматы даты и времени  
 В следующей таблице показаны символы, которые можно использовать для создания пользовательских форматов даты и времени. В отличие от более ранних версий Visual Basic, в этих символах формата учитывается регистр.  
  
|Знак|Описание|  
|-|-|  
|(`:`)|Разделитель времени. В некоторых языковых стандартах для представления разделителя времени могут использоваться другие символы. Разделитель времени разделяет часы, минуты и секунды при форматировании значений времени. Фактический символ, используемый в качестве разделителя времени в форматированных выходных данных, определяется текущим значением языка и региональных параметров приложения.|  
|(`/`)|Разделитель компонентов даты. В некоторых языковых стандартах для представления разделителя дат могут использоваться другие символы. Разделитель дат разделяет день, месяц и год при форматировании значений даты. Фактический символ, используемый в качестве разделителя даты в форматированном выводе, определяется текущим языком и региональными параметрами приложения.|  
|(`%`)|Используется для обозначения того, что следующий символ должен считаться однобуквенным форматом без учета конечных букв. Также используется для указания того, что однобуквенный формат читается как пользовательский формат. Дополнительные сведения см. в следующем разделе.|  
|`d`|Выводит день в виде числа без нуля в начале (например, `1`). Используйте `%d` , если это единственный символ в определяемом пользователем числовом формате.|  
|`dd`|Выводит день в виде числа с нулем в начале (например, `01`).|  
|`ddd`|Выводит день в виде аббревиатуры (например, `Sun`).|  
|`dddd`|Отображает день в виде полного имени (например, `Sunday`).|  
|`M`|Выводит месяц в виде числа без нуля в начале (например, Январь представлен как `1`). Используйте `%M` , если это единственный символ в определяемом пользователем числовом формате.|  
|`MM`|Выводит месяц в виде числа с нулем в начале (например, `01/12/01`).|  
|`MMM`|Выводит месяц в виде аббревиатуры (например, `Jan`).|  
|`MMMM`|Отображает месяц в виде полного названия месяца (например, `January`).|  
|`gg`|Отображает строку периода или эры (например, `A.D.`).|  
|`h`|Отображает часы в виде числа без начальных нулей, используя 12-часовой формат (например, `1:15:15 PM`). Используйте `%h` , если это единственный символ в определяемом пользователем числовом формате.|  
|`hh`|Отображает час в виде числа с начальными нулями в 12-часовом формате (например, `01:15:15 PM`).|  
|`H`|Отображает час в виде числа без начальных нулей, используя 24-часовой формат времени (например, `1:15:15`). Используйте `%H` , если это единственный символ в определяемом пользователем числовом формате.|  
|`HH`|Отображает часы в виде числа с начальными нулями, используя 24-часовой формат (например, `01:15:15`).|  
|`m`|Отображает минуты в виде числа без ведущих нулей (например, `12:1:15`). Используйте `%m` , если это единственный символ в определяемом пользователем числовом формате.|  
|`mm`|Отображает минуты в виде числа с нулями в начале (например, `12:01:15`).|  
|`s`|Отображает секунды в виде числа без ведущих нулей (например, `12:15:5`). Используйте `%s` , если это единственный символ в определяемом пользователем числовом формате.|  
|`ss`|Отображает секунды в виде числа с нулями в начале (например, `12:15:05`).|  
|`f`|Отображает доли секунды. Например `ff` , выводит сотые доли секунды, `ffff` тогда как отображает в секундах десять тысяч. В пользовательском формате можно использовать до `f` семи символов. Используйте `%f` , если это единственный символ в определяемом пользователем числовом формате.|  
|`t`|Использует 12-часовой формат времени и отображает прописные буквы `A` для любого часа до полудня; в `P` верхнем регистре для любого часа в диапазоне от полудня до 11:59 вечера. Используйте `%t` , если это единственный символ в определяемом пользователем числовом формате.|  
|`tt`|Для языковых стандартов, использующих 12-часовое время, отображает `AM` прописные буквы с любыми часами, предшествующие `PM` полудню и 11:59 вечера.<br /><br /> Для национальных настроек, в которых используется 24-часовой формат времени, не отображает ничего.|  
|`y`|Отображает номер года (0-9) без начальных нулей. Используйте `%y` , если это единственный символ в определяемом пользователем числовом формате.|  
|`yy`|Отображает год в числовом формате из двух цифр с нулем в начале, если применимо.|  
|`yyy`|Отображает год в числовом формате из четырех цифр.|  
|`yyyy`|Отображает год в числовом формате из четырех цифр.|  
|`z`|Отображает смещение часового пояса без нуля в начале (например, `-8`). Используйте `%z` , если это единственный символ в определяемом пользователем числовом формате.|  
|`zz`|Отображает смещение часового пояса с нулем в начале (например, `-08`).|  
|`zzz`|Отображает полное смещение часового пояса (например, `-08:00`).|  
  
### <a name="legacy-code-example"></a>Старый пример кода  
 Ниже приведены примеры определяемых пользователем форматов даты и времени для `December 7, 1958, 8:50 PM, 35 seconds`.  
  
|Формат|Отображение|  
|-|-|  
|`M/d/yy`|`12/7/58`|  
|`d-MMM`|`7-Dec`|  
|`d-MMMM-yy`|`7-December-58`|  
|`d MMMM`|`7 December`|  
|`MMMM yy`|`December 58`|  
|`hh:mm tt`|`08:50 PM`|  
|`h:mm:ss t`|`8:50:35 P`|  
|`H:mm`|`20:50`|  
|`H:mm:ss`|`20:50:35`|  
|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  
  
### <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 Минимальное разрешение времени для устройства определяется производителем устройства. Если разрешающее время для устройства достаточно велика, `f` символ форматирования возвращает 0 при запуске на этом устройстве.  
  
   
  
## Examples  
 В данном примере показаны различные способы использования функции `Format` для форматирования значений с применением как форматов `String`, так и определенных пользователем форматов. Фактическое отображение системой разделителя даты (`/`), разделителя времени (`:` и индикаторов AM/PM (`t` и `tt`) зависит от региональных параметров, применяемых кодом. При отображении времени и даты в среде разработки используется короткий формат времени и даты региональных установок кода.  
  
> [!NOTE]
>  Для языков, использующих 24-часовой формат, индикаторы AM/PM (`t` и `tt`) не отображаются.  
  
 [!code-vb[VbVbalrStrings#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="FormatCurrency">
      <MemberSignature Language="C#" Value="public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatCurrency (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatCurrency : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatCurrency (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">Обязательный. Форматируемое выражение.</param>
        <param name="NumDigitsAfterDecimal">Необязательный параметр. Числовое значение, указывающее количество цифр, которые должны быть отображены справа от десятичного разделителя. По умолчанию используется значение –1, указывающее на использование региональных настроек компьютера.</param>
        <param name="IncludeLeadingDigit">Необязательный параметр. Перечисление <see cref="T:Microsoft.VisualBasic.TriState" />, указывающее, следует ли отображать ноль в начале дробных значений. Значения см. в разделе "Примечания".</param>
        <param name="UseParensForNegativeNumbers">Необязательный параметр. Перечисление <see cref="T:Microsoft.VisualBasic.TriState" />, указывающее, следует ли заключать отрицательные значения в скобки. Значения см. в разделе "Примечания".</param>
        <param name="GroupDigits">Необязательный параметр. Перечисление <see cref="T:Microsoft.VisualBasic.TriState" />, указывающее, следует ли объединять разряды чисел в группы, используя разделитель групп, определенный в региональных параметрах компьютера. Значения см. в разделе "Примечания".</param>
        <summary>Возвращает выражение в формате денежной единицы с использованием символа денежной единицы, определенного в системной панели управления.</summary>
        <returns>Выражение в формате денежной единицы с использованием символа денежной единицы, определенного в системной панели управления.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если один или несколько необязательных аргументов опущены, вместо них используются соответствующие значения региональных параметров компьютера.  
  
 Расположение символа валюты относительно значения валюты определяется региональными параметрами системы.  
  
> [!NOTE]
>  Все сведения о параметрах берутся из языкового стандарта приложения. По умолчанию это будет языковой стандарт, заданный на панели управления. Однако его можно изменить программным путем, используя .NET Framework, за исключением начального нуля, который поступает `Number` из вкладки.  
  
 Аргументы `IncludeLeadingDigit`, `UseParensForNegativeNumbers` и`GroupDigits` принимают следующие значения перечисления Tristate.  
  
|Значение|Описание|  
|-|-|  
|`TriState.True`|Да|  
|`TriState.False`|False|  
|`TriState.UseDefault`|Региональные параметры компьютера|  
  
   
  
## Examples  
 В следующем примере показано, как используется функция `FormatCurrency`.  
  
 [!code-vb[VbVbalrStrings#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Число цифр после десятичного разделителя превышает 99.</exception>
        <exception cref="T:System.InvalidCastException">Тип не является числовым.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Управление строками</related>
      </Docs>
    </Member>
    <Member MemberName="FormatDateTime">
      <MemberSignature Language="C#" Value="public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatDateTime (Expression As DateTime, Optional NamedFormat As DateFormat = Microsoft.VisualBasic.DateFormat.GeneralDate) As String" />
      <MemberSignature Language="F#" Value="static member FormatDateTime : DateTime * Microsoft.VisualBasic.DateFormat -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatDateTime (Expression, NamedFormat)" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="NamedFormat" Type="Microsoft.VisualBasic.DateFormat" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">Обязательный. Форматируемое выражение <see langword="Date" />.</param>
        <param name="NamedFormat">Необязательный параметр. Числовое значение, указывающее используемый формат даты/времени. Если опущен, используется <see langword="DateFormat.GeneralDate" />.</param>
        <summary>Возвращает строковое выражение, представляющее значение даты и времени.</summary>
        <returns>Строковое выражение, представляющее значение даты и времени.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Тип `Date` данных всегда содержит сведения о дате и времени. В целях преобразования типов Visual Basic учитывает 1/1/1 (1 января 1 года) как нейтральное значение для даты, а 00:00:00 (полночь) — как нейтральное значение времени. Если вы отформатируете `Date` значение как строку даты и времени, `FormatDateTime` не включает нейтральные значения в результирующую строку. Например, если преобразовать #1/1/0001 9:30:00 # в строку, результатом будет "9:30:00 AM"; сведения о дате подавляются. Однако сведения о дате по-прежнему содержатся в исходном `Date` значении и могут быть восстановлены с помощью таких функций, как. `DatePart`  
  
> [!NOTE]
>  Если `Expression` аргумент передается `String` как литерал, `FormatDateTime` интерпретирует его в соответствии <xref:System.Globalization.CultureInfo.CurrentCulture%2A> с настройкой приложения. Однако, если вы передаете его `Date` как литерал, используйте формат #mm/дд/ИИИИ #, поскольку `FormatDateTime` всегда интерпретирует `Date` литерал в соответствии с языком и региональными параметрами "Английский (США)". Это необходимо, поскольку, если приложение разрабатывается и кодируется `Date` с использованием литералов из одного языка и региональных параметров, а затем выполняется на платформе с другим языком `Date` и региональными параметрами, литералы могут быть проанализированы неверно.  
  
 `NamedFormat` Аргумент имеет следующие параметры.  
  
|Константа|Описание|  
|-|-|  
|`DateFormat.GeneralDate`|Отображение даты и (или) времени. Отображение части даты в виде краткой даты. Если имеется часть времени, отобразите ее в течение длительного времени. При наличии обеих частей отображается.|  
|`DateFormat.LongDate`|Отображение даты с использованием длинного формата даты, указанного в региональных параметрах компьютера.|  
|`DateFormat.ShortDate`|Отображение даты с использованием краткого формата даты, указанного в региональных параметрах компьютера.|  
|`DateFormat.LongTime`|Отображение времени с использованием формата времени, указанного в региональных параметрах компьютера.|  
|`DateFormat.ShortTime`|Отображать время в 24-часовом формате (чч: мм).|  
  
   
  
## Examples  
 В этом примере демонстрируется использование `FormatDateTime` функции.  
  
 [!code-vb[VbVbalrStrings#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="NamedFormat" /> недопустим.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="FormatNumber">
      <MemberSignature Language="C#" Value="public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatNumber (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatNumber : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatNumber (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">Обязательный. Форматируемое выражение.</param>
        <param name="NumDigitsAfterDecimal">Необязательный параметр. Числовое значение, указывающее количество цифр, которые должны быть отображены справа от десятичного разделителя. По умолчанию используется значение –1, указывающее на использование региональных настроек компьютера.</param>
        <param name="IncludeLeadingDigit">Необязательный параметр. Константа <see cref="T:Microsoft.VisualBasic.TriState" />, указывающая, следует ли отображать 0 в начале дробных значений. Сведения о значениях см. в разделе "Параметры".</param>
        <param name="UseParensForNegativeNumbers">Необязательный параметр. Константа <see cref="T:Microsoft.VisualBasic.TriState" />, указывающая, следует ли заключать отрицательные значения в скобки. Сведения о значениях см. в разделе "Параметры".</param>
        <param name="GroupDigits">Необязательный параметр. Константа <see cref="T:Microsoft.VisualBasic.TriState" />, указывающая, группируются ли значения с использованием разделителя, указанного в настройках языкового стандарта. Сведения о значениях см. в разделе "Параметры".</param>
        <summary>Возвращает выражение в формате числа.</summary>
        <returns>Выражение в формате числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если пропущен один или несколько необязательных аргументов, значения для пропущенных аргументов предоставляются параметрами языкового стандарта.  
  
> [!NOTE]
>  Все сведения о параметрах берутся из языкового стандарта приложения. По умолчанию это будет языковой стандарт, заданный на панели управления. Однако его можно изменить программно с помощью .NET Framework.  
  
 Аргументы `IncludeLeadingDigit`, `UseParensForNegativeNumbers` и`GroupDigits` имеют следующие параметры.  
  
|Константа|Описание|  
|-|-|  
|`TriState.True`|Да|  
|`TriState.False`|False|  
|`TriState.UseDefault`|Региональные параметры компьютера|  
  
   
  
## Examples  
 В `FormatNumber` этом примере демонстрируется функция.  
  
 [!code-vb[VbVbalrStrings#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Тип не является числовым.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="FormatPercent">
      <MemberSignature Language="C#" Value="public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatPercent (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatPercent : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatPercent (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">Обязательный. Форматируемое выражение.</param>
        <param name="NumDigitsAfterDecimal">Необязательный параметр. Числовое значение, указывающее количество отображаемых цифр справа от десятичной запятой. По умолчанию используется значение –1, указывающее на использование настроек языкового стандарта.</param>
        <param name="IncludeLeadingDigit">Необязательный параметр. Константа <see cref="T:Microsoft.VisualBasic.TriState" />, указывающая, отображается ли ноль в дробных значениях. Сведения о значениях см. в разделе "Параметры".</param>
        <param name="UseParensForNegativeNumbers">Необязательный параметр. Константа <see cref="T:Microsoft.VisualBasic.TriState" />, указывающая, нужно ли заключать отрицательные значения в скобки. Сведения о значениях см. в разделе "Параметры".</param>
        <param name="GroupDigits">Необязательный параметр. Константа <see cref="T:Microsoft.VisualBasic.TriState" />, указывающая, группируются ли значения с использованием разделителя, указанного в настройках языкового стандарта. Сведения о значениях см. в разделе "Параметры".</param>
        <summary>Возвращает выражение в виде процента (умноженное на 100) с символом % в конце.</summary>
        <returns>Выражение в виде процента (умноженное на 100) с символом % в конце.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При пропуске одного или нескольких необязательных аргументов значения пропущенных аргументов предоставляются параметрами языкового стандарта.  
  
> [!NOTE]
>  Все сведения о параметрах берутся из языкового стандарта приложения. По умолчанию это будет языковой стандарт, заданный на панели управления. Однако его можно изменить программно с помощью .NET Framework.  
  
 Аргументы `IncludeLeadingDigit`, `UseParensForNegativeNumbers` и`GroupDigits` имеют следующие параметры.  
  
|Константа|Описание|  
|-|-|  
|`TriState.True`|Да|  
|`TriState.False`|False|  
|`TriState.Default`|Региональные параметры компьютера|  
  
   
  
## Examples  
 В этом примере показано использование `FormatPercent` функции.  
  
 [!code-vb[VbVbalrStrings#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Тип не является числовым.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public static char GetChar (string str, int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char GetChar(string str, int32 Index) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChar (str As String, Index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char GetChar(System::String ^ str, int Index);" />
      <MemberSignature Language="F#" Value="static member GetChar : string * int -&gt; char" Usage="Microsoft.VisualBasic.Strings.GetChar (str, Index)" />
      <MemberSignature Language="ILAsm" Value=".method public static char GetChar(string str, int32 Index) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Index" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="str">Обязательный. Любое допустимое выражение типа <see langword="String" />.</param>
        <param name="Index">Обязательный. Выражение <see langword="Integer" />. Возвращаемый индекс знака (основанный на 1) в <paramref name="str" />.</param>
        <summary>Возвращает значение типа <see langword="Char" />, представляющее знак из указанной позиции в предоставленной строке.</summary>
        <returns>Значение типа <see langword="Char" />, представляющее знак из указанного индекса в предоставленной строке.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `Index` значение параметра меньше 1 или больше индекса последнего символа в `str`, `ArgumentException` создается исключение.  
  
   
  
## Examples  
 В этом примере показано, как использовать `GetChar` функцию для возврата символа из указанного индекса `String`в.  
  
 [!code-vb[VbVbalrStrings#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="str" /> равен <see langword="Nothing" />, параметр <paramref name="Index" /> &lt; 1, или параметр <paramref name="Index" /> больше индекса последнего символа в <paramref name="str" />.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="InStr">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает целое число, указывающее начальную позицию первого вхождения одной строки в другую.  Целое число представляет собой отсчитываемый от единицы индекс, если совпадение найдено.  Если совпадение не найдено, функция возвращает нуль.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStr : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (String1, String2, Compare)" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="String2" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Обязательный. Искомое выражение типа <see langword="String" />.</param>
        <param name="String2">Обязательный. Искомое выражение <see langword="String" />.</param>
        <param name="Compare">Необязательный параметр. Указывает тип сравнения строк. Если параметр <paramref name="Compare" /> не задан, параметр <see langword="Option Compare" /> определяет тип сравнения.</param>
        <summary>Возвращает целое число, указывающее начальную позицию первого вхождения одной строки в другую.</summary>
        <returns><list type="table">
            <item>
              <term> If 
 </term>
              <description> InStr возвращает 
 </description>
            </item>
            <item>
              <term>Параметр 
                <paramref name="String1" /> является пустой строкой или значением <see langword="Nothing" /></term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>Параметр 
                <paramref name="String2" /> является пустой строкой или значением <see langword="Nothing" /></term>
              <description> Начальная позиция диапазона для поиска, которая по умолчанию в первом положении символа.  
  
 </description>
            </item>
            <item>
              <term>Параметр 
                <paramref name="String2" /> не найден. 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> находится в пределах <paramref name="String1" /></term>
              <description> Позиция, где начинается соответствие 
 </description>
            </item>
            <item>
              <term>
              </term>
              <description>
              </description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило, `InStr` функция используется при анализе строк.  
  
> [!NOTE]
>  `InStrB` Функция в предыдущих версиях Visual Basic возвращает число байтов, а не позиции символа. Он используется в основном для преобразования строк в приложениях с двухбайтовой кодировкой (DBCS). Все строки Visual Basic 2005 в Юникоде и `InStrB` больше не поддерживаются.  
  
 Параметры аргумента `Compare`:  
  
|Константа|Значение|Описание|  
|-|-|-|  
|`Binary`|0|Выполняет двоичное сравнение|  
|`Text`|1|Выполняет сравнение текста|  
  
   
  
## Examples  
 В данном примере функция `InStr` используется для возврата позиции первого вхождения одной строки в другую.  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Строки в Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Знакомство со строками в Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-compare-statement.md">Оператор Option Compare</related>
      </Docs>
    </Member>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (int StartPos, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 InStr(int32 StartPos, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (StartPos As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="F#" Value="static member InStr : int * string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (StartPos, String1, String2, Compare)" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="C#" Value="public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (Start As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member InStr : int * string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (Start, String1, String2, Compare)" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-2.0" />
        <Parameter Name="StartPos" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="String1" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-2.0" />
        <Parameter Name="String2" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-2.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-2.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Start">Необязательный параметр. Числовое выражение, задающее начальную позицию для каждого поиска. Если это выражение опущено, поиск начинается с позиции первого знака. Начальный индекс равен 1.</param>
        <param name="StartPos">To be added.</param>
        <param name="String1">Обязательный. Искомое выражение типа <see langword="String" />.</param>
        <param name="String2">Обязательный. Искомое выражение <see langword="String" />.</param>
        <param name="Compare">Необязательный параметр. Указывает тип сравнения строк. Если параметр <paramref name="Compare" /> не задан, параметр <see langword="Option Compare" /> определяет тип сравнения.</param>
        <summary>Возвращает целое число, указывающее начальную позицию первого вхождения одной строки в другую.</summary>
        <returns><list type="table">
            <item>
              <term> If 
 </term>
              <description> InStr возвращает 
 </description>
            </item>
            <item>
              <term>Параметр 
                <paramref name="String1" /> является пустой строкой или значением <see langword="Nothing" /></term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>Параметр 
                <paramref name="String2" /> является пустой строкой или значением <see langword="Nothing" /></term>
              <description>
                <paramref name="start" />
              </description>
            </item>
            <item>
              <term>Параметр 
                <paramref name="String2" /> не найден. 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> находится в пределах <paramref name="String1" /></term>
              <description> Позиция, где начинается соответствие 
 </description>
            </item>
            <item>
              <term>Длина 
                <paramref name="Start" /> &gt; параметра <paramref name="String1" /></term>
              <description> 0 
 </description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило, `InStr` функция используется при анализе строк.  
  
> [!NOTE]
>  `InStrB` Функция в предыдущих версиях Visual Basic возвращает число байтов, а не позиции символа. Он используется в основном для преобразования строк в приложениях с двухбайтовой кодировкой (DBCS). Все строки Visual Basic 2005 в Юникоде и `InStrB` больше не поддерживаются.  
  
 Параметры аргумента `Compare`:  
  
|Константа|Значение|Описание|  
|-|-|-|  
|`Binary`|0|Выполняет двоичное сравнение|  
|`Text`|1|Выполняет сравнение текста|  
  
   
  
## Examples  
 В данном примере функция `InStr` используется для возврата позиции первого вхождения одной строки в другую.  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt; 1.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Строки в Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Знакомство со строками в Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-compare-statement.md">Оператор Option Compare</related>
      </Docs>
    </Member>
    <Member MemberName="InStrRev">
      <MemberSignature Language="C#" Value="public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStrRev (StringCheck As String, StringMatch As String, Optional Start As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStrRev : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStrRev (StringCheck, StringMatch, Start, Compare)" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringCheck" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="StringMatch" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Start" Type="System.Int32" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="StringCheck">Обязательный. Строковое выражение, в котором ведется поиск.</param>
        <param name="StringMatch">Обязательный. Строковое выражение, которое требуется найти.</param>
        <param name="Start">Необязательный параметр. Числовое выражение, устанавливающее начальную позицию, начиная с 1, для каждой операции поиска, начиная с левого края строки. Если параметр <paramref name="Start" /> не указан, то используется значение –1, означающее, что поиск начинается с позиции последнего символа. После этого строка просматривается справа налево.</param>
        <param name="Compare">Необязательный параметр. Числовое значение, показывающее вид сравнения, используемое при оценке подстрок. Если этот аргумент опущен, то выполняется двоичное сравнение. См. значения в разделе "Параметры".</param>
        <summary>Возвращает позицию первого вхождения одной строки в другую, начиная с правого конца строки.</summary>
        <returns><list type="table">
            <item>
              <term> If 
 </term>
              <description> InStrRev возвращает 
 </description>
            </item>
            <item>
              <term>Параметр 
                <paramref name="StringCheck" /> имеет нулевую длину 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>Параметр 
                <paramref name="StringMatch" /> имеет нулевую длину 
 </term>
              <description>
                <paramref name="Start" />
              </description>
            </item>
            <item>
              <term>Параметр 
                <paramref name="StringMatch" /> не найден. 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> находится в пределах <paramref name="StringCheck" /></term>
              <description> Позиция, в которой найдено первое сравнение, начиная с правого конца строки.  
  
 </description>
            </item>
            <item>
              <term>Значение параметра 
                <paramref name="Start" /> больше, чем длина параметра <paramref name="StringMatch" /></term>
              <description> 0 
 </description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обратите внимание, что синтаксис `InStrRev` функции не совпадает `InStr` с синтаксисом функции.  
  
 `Compare` Аргумент может иметь следующие значения.  
  
|Константа|Описание|  
|-|-|  
|`Binary`|Выполняется двоичное сравнение.|  
|`Text`|Выполняется текстовое сравнение.|  
  
   
  
## Examples  
 В этом примере демонстрируется использование `InStrRev` функции.  
  
 [!code-vb[VbVbalrStrings#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> = 0 или <paramref name="Start" /> &lt; –1.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Строки в Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Знакомство со строками в Visual Basic</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает строку, образуемую путем соединения нескольких подстрок, содержащихся в массиве.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (object[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(object[] SourceArray, string Delimiter) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As Object(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : obj[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(object[] SourceArray, string Delimiter) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.Object[]" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Delimiter" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Обязательный. Одномерный массив подстрок, подлежащих объединению.</param>
        <param name="Delimiter">Необязательный параметр. Любая строка, используемая для разделения подстрок в составе возвращаемой строки. Если этот аргумент опущен, используется знак пробела (" "). Если в качестве <paramref name="Delimiter" /> задана строка нулевой длины ("") или ключевое слово <see langword="Nothing" />, все элементы списка объединяются без разделителей.</param>
        <summary>Возвращает строку, образуемую путем соединения нескольких подстрок, содержащихся в массиве.</summary>
        <returns>Строка, созданная путем соединения нескольких подстрок, содержащихся в массиве.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Существует четность между `Join` функциями и `Split` . `Join` Функция принимает массив строк и соединяет их с помощью строки разделителя, чтобы получить одну строку. `Split` Функция принимает строку и отделяет ее от разделителя, чтобы получить массив строк. Однако ключевое различие заключается в том `Join` , что может объединять строки с любой строкой- `Split` разделителем, разделив строки только с помощью одного символа-разделителя.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование `Join` функции для создания списка из нескольких строк.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="SourceArray" /> не является одномерным.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string[] SourceArray, string Delimiter) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As String(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : string[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(string[] SourceArray, string Delimiter) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.String[]" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Delimiter" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Обязательный. Одномерный массив подстрок, подлежащих объединению.</param>
        <param name="Delimiter">Необязательный параметр. Любая строка, используемая для разделения подстрок в составе возвращаемой строки. Если этот аргумент опущен, используется знак пробела (" "). Если в качестве <paramref name="Delimiter" /> задана строка нулевой длины ("") или ключевое слово <see langword="Nothing" />, все элементы списка объединяются без разделителей.</param>
        <summary>Возвращает строку, образуемую путем соединения нескольких подстрок, содержащихся в массиве.</summary>
        <returns>Строка, созданная путем соединения нескольких подстрок, содержащихся в массиве.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Существует четность между `Join` функциями и `Split` . `Join` Функция принимает массив строк и соединяет их с помощью строки разделителя, чтобы получить одну строку. `Split` Функция принимает строку и отделяет ее от разделителя, чтобы получить массив строк. Однако ключевое различие заключается в том `Join` , что может объединять строки с любой строкой- `Split` разделителем, разделив строки только с помощью одного символа-разделителя.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование `Join` функции для создания списка из нескольких строк.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="SourceArray" /> не является одномерным.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="LCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает строку или символ, преобразованные в нижний регистр.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static char LCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char LCase(char Value) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char LCase(char Value);" />
      <MemberSignature Language="F#" Value="static member LCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberSignature Language="ILAsm" Value=".method public static char LCase(char Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Value">Обязательный. Любое допустимое значение <see langword="String" /> или выражение <see langword="Char" />.</param>
        <summary>Возвращает строку или символ, преобразованные в нижний регистр.</summary>
        <returns>Строка или символ, преобразованные в нижний регистр.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Только прописные буквы преобразуются в нижний регистр; Все строчные буквы и небуквенные символы остаются без изменений.  
  
 Эта функция использует сведения о языке и региональных параметрах приложения при обработке строки, чтобы изменения регистра соответствовали языковому стандарту, в котором используется приложение.  
  
> [!IMPORTANT]
>  Если приложение принимает решения по обеспечению безопасности на основе результатов операции сравнения или <xref:System.String.Compare%2A?displayProperty=nameWithType> изменения регистра, то операция должна использовать метод и передать <xref:System.StringComparison.Ordinal> или <xref:System.StringComparison.OrdinalIgnoreCase> для `comparisonType` аргумента. Дополнительные сведения см. [в разделе влияние языка и региональных параметров на строки в Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 В этом примере `LCase` функция используется для возвращения версии строки в нижнем регистре.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Строки в Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Знакомство со строками в Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static string LCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string LCase(string Value) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member LCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberSignature Language="ILAsm" Value=".method public static string LCase(string Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Value">Обязательный. Любое допустимое значение <see langword="String" /> или выражение <see langword="Char" />.</param>
        <summary>Возвращает строку или символ, преобразованные в нижний регистр.</summary>
        <returns>Строка или символ, преобразованные в нижний регистр.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Только прописные буквы преобразуются в нижний регистр; Все строчные буквы и небуквенные символы остаются без изменений.  
  
 Эта функция использует сведения о языке и региональных параметрах приложения при обработке строки, чтобы изменения регистра соответствовали языковому стандарту, в котором используется приложение.  
  
> [!IMPORTANT]
>  Если приложение принимает решения по обеспечению безопасности на основе результатов операции сравнения или <xref:System.String.Compare%2A?displayProperty=nameWithType> изменения регистра, то операция должна использовать метод и передать <xref:System.StringComparison.Ordinal> или <xref:System.StringComparison.OrdinalIgnoreCase> для `comparisonType` аргумента. Дополнительные сведения см. [в разделе влияние языка и региональных параметров на строки в Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 В этом примере `LCase` функция используется для возвращения версии строки в нижнем регистре.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Строки в Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Знакомство со строками в Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public static string Left (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Left(string str, int32 Length) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Left (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Left(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Left : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Left (str, Length)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Left(string str, int32 Length) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Обязательный. Выражение типа <see langword="String" />, из которого возвращаются крайние левые знаки.</param>
        <param name="Length">Обязательный. Выражение <see langword="Integer" />. Числовое выражение, показывающее необходимое число возвращаемых знаков. Если выражение равно 0, возвращается строка нулевой длины (""). Если выражение больше или равно числу знаков в <paramref name="str" />, то возвращается вся строка.</param>
        <summary>Возвращает строку, содержащую указанное число знаков с левой стороны строки.</summary>
        <returns>Строка, содержащая указанное число знаков с левой стороны строки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы определить количество символов в `str`, `Len` используйте функцию. Если используется в Windows Forms приложении или любом другом классе, имеющем `Left` свойство, необходимо полностью определить функцию с помощью. `Microsoft.VisualBasic.Left`  
  
> [!NOTE]
>  `LeftB` Функция в предыдущих версиях Visual Basic возвращает строку в байтах, а не в символах. Он используется в основном для преобразования строк в приложениях с двухбайтовой кодировкой (DBCS). Все текущие Visual Basic строки находятся в Юникоде и `LeftB` больше не поддерживаются.  
  
   
  
## Examples  
 В этом примере демонстрируется использование `Left` функции для возврата подстроки заданного `String`объекта. В классе, имеющем `Left` свойство, может потребоваться полностью `Left` определить функцию.  
  
 [!code-vb[VbVbalrStrings#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Len">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (bool Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(bool Expression) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(bool Expression);" />
      <MemberSignature Language="F#" Value="static member Len : bool -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(bool Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта, как при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При использовании определяемых пользователем типов `Object` и переменных `Len` функция возвращает размер, который будет записываться `FilePut` в файл функцией. Если объект `Object` `String`содержит, он возвращает длину строки. Если объект `Object` содержит любой другой тип, он будет возвращать размер объекта, который будет записан в файл `FilePut` функцией.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объектах для указания размера строки в байтах при запись на диск. Функция использует атрибут, `VBFixedString` если он доступен, `Object` при определении размера переменных. `Len`  
  
> [!NOTE]
>  `Len` Функция может не иметь возможности определить фактическое число байтов хранилища, необходимое при использовании строк переменной длины в определяемых пользователем типах данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не в символах. Он используется в основном для преобразования строк в приложениях с двухбайтовой кодировкой (DBCS). Все текущие Visual Basic строки находятся в Юникоде и `LenB` больше не поддерживаются.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 Функция принимает только `String` переменные и `Object` в качестве параметров. `Len` Если объект `Object` `String`содержит, он `String`возвращает длину. Если параметр является пустой `Object` ссылкой, функция возвращает ноль. Если объект `Object` содержит любой другой тип, возникает исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (byte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(unsigned int8 Expression) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Byte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Byte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : byte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int8 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Byte" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта, как при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При использовании определяемых пользователем типов `Object` и переменных `Len` функция возвращает размер, который будет записываться `FilePut` в файл функцией. Если объект `Object` `String`содержит, он возвращает длину строки. Если объект `Object` содержит любой другой тип, он будет возвращать размер объекта, который будет записан в файл `FilePut` функцией.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объектах для указания размера строки в байтах при запись на диск. Функция использует атрибут, `VBFixedString` если он доступен, `Object` при определении размера переменных. `Len`  
  
> [!NOTE]
>  `Len` Функция может не иметь возможности определить фактическое число байтов хранилища, необходимое при использовании строк переменной длины в определяемых пользователем типах данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не в символах. Он используется в основном для преобразования строк в приложениях с двухбайтовой кодировкой (DBCS). Все текущие Visual Basic строки находятся в Юникоде и `LenB` больше не поддерживаются.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 Функция принимает только `String` переменные и `Object` в качестве параметров. `Len` Если объект `Object` `String`содержит, он `String`возвращает длину. Если параметр является пустой `Object` ссылкой, функция возвращает ноль. Если объект `Object` содержит любой другой тип, возникает исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(char Expression) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(char Expression);" />
      <MemberSignature Language="F#" Value="static member Len : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(char Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта, как при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При использовании определяемых пользователем типов `Object` и переменных `Len` функция возвращает размер, который будет записываться `FilePut` в файл функцией. Если объект `Object` `String`содержит, он возвращает длину строки. Если объект `Object` содержит любой другой тип, он будет возвращать размер объекта, который будет записан в файл `FilePut` функцией.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объектах для указания размера строки в байтах при запись на диск. Функция использует атрибут, `VBFixedString` если он доступен, `Object` при определении размера переменных. `Len`  
  
> [!NOTE]
>  `Len` Функция может не иметь возможности определить фактическое число байтов хранилища, необходимое при использовании строк переменной длины в определяемых пользователем типах данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не в символах. Он используется в основном для преобразования строк в приложениях с двухбайтовой кодировкой (DBCS). Все текущие Visual Basic строки находятся в Юникоде и `LenB` больше не поддерживаются.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 Функция принимает только `String` переменные и `Object` в качестве параметров. `Len` Если объект `Object` `String`содержит, он `String`возвращает длину. Если параметр является пустой `Object` ссылкой, функция возвращает ноль. Если объект `Object` содержит любой другой тип, возникает исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (DateTime Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(valuetype System.DateTime Expression) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(DateTime Expression);" />
      <MemberSignature Language="F#" Value="static member Len : DateTime -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.DateTime Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта, как при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При использовании определяемых пользователем типов `Object` и переменных `Len` функция возвращает размер, который будет записываться `FilePut` в файл функцией. Если объект `Object` `String`содержит, он возвращает длину строки. Если объект `Object` содержит любой другой тип, он будет возвращать размер объекта, который будет записан в файл `FilePut` функцией.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объектах для указания размера строки в байтах при запись на диск. Функция использует атрибут, `VBFixedString` если он доступен, `Object` при определении размера переменных. `Len`  
  
> [!NOTE]
>  `Len` Функция может не иметь возможности определить фактическое число байтов хранилища, необходимое при использовании строк переменной длины в определяемых пользователем типах данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не в символах. Он используется в основном для преобразования строк в приложениях с двухбайтовой кодировкой (DBCS). Все текущие Visual Basic строки находятся в Юникоде и `LenB` больше не поддерживаются.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 Функция принимает только `String` переменные и `Object` в качестве параметров. `Len` Если объект `Object` `String`содержит, он `String`возвращает длину. Если параметр является пустой `Object` ссылкой, функция возвращает ноль. Если объект `Object` содержит любой другой тип, возникает исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (decimal Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(valuetype System.Decimal Expression) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Decimal Expression);" />
      <MemberSignature Language="F#" Value="static member Len : decimal -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.Decimal Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Decimal" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта, как при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При использовании определяемых пользователем типов `Object` и переменных `Len` функция возвращает размер, который будет записываться `FilePut` в файл функцией. Если объект `Object` `String`содержит, он возвращает длину строки. Если объект `Object` содержит любой другой тип, он будет возвращать размер объекта, который будет записан в файл `FilePut` функцией.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объектах для указания размера строки в байтах при запись на диск. Функция использует атрибут, `VBFixedString` если он доступен, `Object` при определении размера переменных. `Len`  
  
> [!NOTE]
>  `Len` Функция может не иметь возможности определить фактическое число байтов хранилища, необходимое при использовании строк переменной длины в определяемых пользователем типах данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не в символах. Он используется в основном для преобразования строк в приложениях с двухбайтовой кодировкой (DBCS). Все текущие Visual Basic строки находятся в Юникоде и `LenB` больше не поддерживаются.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 Функция принимает только `String` переменные и `Object` в качестве параметров. `Len` Если объект `Object` `String`содержит, он `String`возвращает длину. Если параметр является пустой `Object` ссылкой, функция возвращает ноль. Если объект `Object` содержит любой другой тип, возникает исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (double Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(float64 Expression) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(double Expression);" />
      <MemberSignature Language="F#" Value="static member Len : double -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float64 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Double" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта, как при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При использовании определяемых пользователем типов `Object` и переменных `Len` функция возвращает размер, который будет записываться `FilePut` в файл функцией. Если объект `Object` `String`содержит, он возвращает длину строки. Если объект `Object` содержит любой другой тип, он будет возвращать размер объекта, который будет записан в файл `FilePut` функцией.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объектах для указания размера строки в байтах при запись на диск. Функция использует атрибут, `VBFixedString` если он доступен, `Object` при определении размера переменных. `Len`  
  
> [!NOTE]
>  `Len` Функция может не иметь возможности определить фактическое число байтов хранилища, необходимое при использовании строк переменной длины в определяемых пользователем типах данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не в символах. Он используется в основном для преобразования строк в приложениях с двухбайтовой кодировкой (DBCS). Все текущие Visual Basic строки находятся в Юникоде и `LenB` больше не поддерживаются.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 Функция принимает только `String` переменные и `Object` в качестве параметров. `Len` Если объект `Object` `String`содержит, он `String`возвращает длину. Если параметр является пустой `Object` ссылкой, функция возвращает ноль. Если объект `Object` содержит любой другой тип, возникает исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (short Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(int16 Expression) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(short Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int16 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int16" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта, как при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При использовании определяемых пользователем типов `Object` и переменных `Len` функция возвращает размер, который будет записываться `FilePut` в файл функцией. Если объект `Object` `String`содержит, он возвращает длину строки. Если объект `Object` содержит любой другой тип, он будет возвращать размер объекта, который будет записан в файл `FilePut` функцией.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объектах для указания размера строки в байтах при запись на диск. Функция использует атрибут, `VBFixedString` если он доступен, `Object` при определении размера переменных. `Len`  
  
> [!NOTE]
>  `Len` Функция может не иметь возможности определить фактическое число байтов хранилища, необходимое при использовании строк переменной длины в определяемых пользователем типах данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не в символах. Он используется в основном для преобразования строк в приложениях с двухбайтовой кодировкой (DBCS). Все текущие Visual Basic строки находятся в Юникоде и `LenB` больше не поддерживаются.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 Функция принимает только `String` переменные и `Object` в качестве параметров. `Len` Если объект `Object` `String`содержит, он `String`возвращает длину. Если параметр является пустой `Object` ссылкой, функция возвращает ноль. Если объект `Object` содержит любой другой тип, возникает исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(int32 Expression) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(int Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int32 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта, как при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При использовании определяемых пользователем типов `Object` и переменных `Len` функция возвращает размер, который будет записываться `FilePut` в файл функцией. Если объект `Object` `String`содержит, он возвращает длину строки. Если объект `Object` содержит любой другой тип, он будет возвращать размер объекта, который будет записан в файл `FilePut` функцией.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объектах для указания размера строки в байтах при запись на диск. Функция использует атрибут, `VBFixedString` если он доступен, `Object` при определении размера переменных. `Len`  
  
> [!NOTE]
>  `Len` Функция может не иметь возможности определить фактическое число байтов хранилища, необходимое при использовании строк переменной длины в определяемых пользователем типах данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не в символах. Он используется в основном для преобразования строк в приложениях с двухбайтовой кодировкой (DBCS). Все текущие Visual Basic строки находятся в Юникоде и `LenB` больше не поддерживаются.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 Функция принимает только `String` переменные и `Object` в качестве параметров. `Len` Если объект `Object` `String`содержит, он `String`возвращает длину. Если параметр является пустой `Object` ссылкой, функция возвращает ноль. Если объект `Object` содержит любой другой тип, возникает исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (long Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(int64 Expression) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(long Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int64 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int64" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта, как при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При использовании определяемых пользователем типов `Object` и переменных `Len` функция возвращает размер, который будет записываться `FilePut` в файл функцией. Если объект `Object` `String`содержит, он возвращает длину строки. Если объект `Object` содержит любой другой тип, он будет возвращать размер объекта, который будет записан в файл `FilePut` функцией.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объектах для указания размера строки в байтах при запись на диск. Функция использует атрибут, `VBFixedString` если он доступен, `Object` при определении размера переменных. `Len`  
  
> [!NOTE]
>  `Len` Функция может не иметь возможности определить фактическое число байтов хранилища, необходимое при использовании строк переменной длины в определяемых пользователем типах данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не в символах. Он используется в основном для преобразования строк в приложениях с двухбайтовой кодировкой (DBCS). Все текущие Visual Basic строки находятся в Юникоде и `LenB` больше не поддерживаются.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 Функция принимает только `String` переменные и `Object` в качестве параметров. `Len` Если объект `Object` `String`содержит, он `String`возвращает длину. Если параметр является пустой `Object` ссылкой, функция возвращает ноль. Если объект `Object` содержит любой другой тип, возникает исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(object Expression) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : obj -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(object Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта, как при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При использовании определяемых пользователем типов `Object` и переменных `Len` функция возвращает размер, который будет записываться `FilePut` в файл функцией. Если объект `Object` `String`содержит, он возвращает длину строки. Если объект `Object` содержит любой другой тип, он будет возвращать размер объекта, который будет записан в файл `FilePut` функцией.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объектах для указания размера строки в байтах при запись на диск. Функция использует атрибут, `VBFixedString` если он доступен, `Object` при определении размера переменных. `Len`  
  
> [!NOTE]
>  `Len` Функция может не иметь возможности определить фактическое число байтов хранилища, необходимое при использовании строк переменной длины в определяемых пользователем типах данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не в символах. Он используется в основном для преобразования строк в приложениях с двухбайтовой кодировкой (DBCS). Все текущие Visual Basic строки находятся в Юникоде и `LenB` больше не поддерживаются.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 Функция принимает только `String` переменные и `Object` в качестве параметров. `Len` Если объект `Object` `String`содержит, он `String`возвращает длину. Если параметр является пустой `Object` ссылкой, функция возвращает ноль. Если объект `Object` содержит любой другой тип, возникает исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (sbyte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(int8 Expression) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::SByte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : sbyte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int8 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта, как при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При использовании определяемых пользователем типов `Object` и переменных `Len` функция возвращает размер, который будет записываться `FilePut` в файл функцией. Если объект `Object` `String`содержит, он возвращает длину строки. Если объект `Object` содержит любой другой тип, он будет возвращать размер объекта, который будет записан в файл `FilePut` функцией.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объектах для указания размера строки в байтах при запись на диск. Функция использует атрибут, `VBFixedString` если он доступен, `Object` при определении размера переменных. `Len`  
  
> [!NOTE]
>  `Len` Функция может не иметь возможности определить фактическое число байтов хранилища, необходимое при использовании строк переменной длины в определяемых пользователем типах данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не в символах. Он используется в основном для преобразования строк в приложениях с двухбайтовой кодировкой (DBCS). Все текущие Visual Basic строки находятся в Юникоде и `LenB` больше не поддерживаются.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 Функция принимает только `String` переменные и `Object` в качестве параметров. `Len` Если объект `Object` `String`содержит, он `String`возвращает длину. Если параметр является пустой `Object` ссылкой, функция возвращает ноль. Если объект `Object` содержит любой другой тип, возникает исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (float Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(float32 Expression) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(float Expression);" />
      <MemberSignature Language="F#" Value="static member Len : single -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float32 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта, как при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При использовании определяемых пользователем типов `Object` и переменных `Len` функция возвращает размер, который будет записываться `FilePut` в файл функцией. Если объект `Object` `String`содержит, он возвращает длину строки. Если объект `Object` содержит любой другой тип, он будет возвращать размер объекта, который будет записан в файл `FilePut` функцией.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объектах для указания размера строки в байтах при запись на диск. Функция использует атрибут, `VBFixedString` если он доступен, `Object` при определении размера переменных. `Len`  
  
> [!NOTE]
>  `Len` Функция может не иметь возможности определить фактическое число байтов хранилища, необходимое при использовании строк переменной длины в определяемых пользователем типах данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не в символах. Он используется в основном для преобразования строк в приложениях с двухбайтовой кодировкой (DBCS). Все текущие Visual Basic строки находятся в Юникоде и `LenB` больше не поддерживаются.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 Функция принимает только `String` переменные и `Object` в качестве параметров. `Len` Если объект `Object` `String`содержит, он `String`возвращает длину. Если параметр является пустой `Object` ссылкой, функция возвращает ноль. Если объект `Object` содержит любой другой тип, возникает исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(string Expression) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(string Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта, как при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При использовании определяемых пользователем типов `Object` и переменных `Len` функция возвращает размер, который будет записываться `FilePut` в файл функцией. Если объект `Object` `String`содержит, он возвращает длину строки. Если объект `Object` содержит любой другой тип, он будет возвращать размер объекта, который будет записан в файл `FilePut` функцией.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объектах для указания размера строки в байтах при запись на диск. Функция использует атрибут, `VBFixedString` если он доступен, `Object` при определении размера переменных. `Len`  
  
> [!NOTE]
>  `Len` Функция может не иметь возможности определить фактическое число байтов хранилища, необходимое при использовании строк переменной длины в определяемых пользователем типах данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не в символах. Он используется в основном для преобразования строк в приложениях с двухбайтовой кодировкой (DBCS). Все текущие Visual Basic строки находятся в Юникоде и `LenB` больше не поддерживаются.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 Функция принимает только `String` переменные и `Object` в качестве параметров. `Len` Если объект `Object` `String`содержит, он `String`возвращает длину. Если параметр является пустой `Object` ссылкой, функция возвращает ноль. Если объект `Object` содержит любой другой тип, возникает исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ushort Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(unsigned int16 Expression) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UShort) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt16 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int16 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта, как при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При использовании определяемых пользователем типов `Object` и переменных `Len` функция возвращает размер, который будет записываться `FilePut` в файл функцией. Если объект `Object` `String`содержит, он возвращает длину строки. Если объект `Object` содержит любой другой тип, он будет возвращать размер объекта, который будет записан в файл `FilePut` функцией.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объектах для указания размера строки в байтах при запись на диск. Функция использует атрибут, `VBFixedString` если он доступен, `Object` при определении размера переменных. `Len`  
  
> [!NOTE]
>  `Len` Функция может не иметь возможности определить фактическое число байтов хранилища, необходимое при использовании строк переменной длины в определяемых пользователем типах данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не в символах. Он используется в основном для преобразования строк в приложениях с двухбайтовой кодировкой (DBCS). Все текущие Visual Basic строки находятся в Юникоде и `LenB` больше не поддерживаются.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 Функция принимает только `String` переменные и `Object` в качестве параметров. `Len` Если объект `Object` `String`содержит, он `String`возвращает длину. Если параметр является пустой `Object` ссылкой, функция возвращает ноль. Если объект `Object` содержит любой другой тип, возникает исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (uint Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(unsigned int32 Expression) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt32 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint32 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int32 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта, как при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При использовании определяемых пользователем типов `Object` и переменных `Len` функция возвращает размер, который будет записываться `FilePut` в файл функцией. Если объект `Object` `String`содержит, он возвращает длину строки. Если объект `Object` содержит любой другой тип, он будет возвращать размер объекта, который будет записан в файл `FilePut` функцией.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объектах для указания размера строки в байтах при запись на диск. Функция использует атрибут, `VBFixedString` если он доступен, `Object` при определении размера переменных. `Len`  
  
> [!NOTE]
>  `Len` Функция может не иметь возможности определить фактическое число байтов хранилища, необходимое при использовании строк переменной длины в определяемых пользователем типах данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не в символах. Он используется в основном для преобразования строк в приложениях с двухбайтовой кодировкой (DBCS). Все текущие Visual Basic строки находятся в Юникоде и `LenB` больше не поддерживаются.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 Функция принимает только `String` переменные и `Object` в качестве параметров. `Len` Если объект `Object` `String`содержит, он `String`возвращает длину. Если параметр является пустой `Object` ссылкой, функция возвращает ноль. Если объект `Object` содержит любой другой тип, возникает исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ulong Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(unsigned int64 Expression) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt64 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int64 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта, как при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При использовании определяемых пользователем типов `Object` и переменных `Len` функция возвращает размер, который будет записываться `FilePut` в файл функцией. Если объект `Object` `String`содержит, он возвращает длину строки. Если объект `Object` содержит любой другой тип, он будет возвращать размер объекта, который будет записан в файл `FilePut` функцией.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объектах для указания размера строки в байтах при запись на диск. Функция использует атрибут, `VBFixedString` если он доступен, `Object` при определении размера переменных. `Len`  
  
> [!NOTE]
>  `Len` Функция может не иметь возможности определить фактическое число байтов хранилища, необходимое при использовании строк переменной длины в определяемых пользователем типах данных.  
  
> [!NOTE]
>  `LenB` Функция в более ранних версиях Visual Basic возвращает число байтов в строке, а не в символах. Он используется в основном для преобразования строк в приложениях с двухбайтовой кодировкой (DBCS). Все текущие Visual Basic строки находятся в Юникоде и `LenB` больше не поддерживаются.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков смарт-устройств  
 Функция принимает только `String` переменные и `Object` в качестве параметров. `Len` Если объект `Object` `String`содержит, он `String`возвращает длину. Если параметр является пустой `Object` ссылкой, функция возвращает ноль. Если объект `Object` содержит любой другой тип, возникает исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="LSet">
      <MemberSignature Language="C#" Value="public static string LSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string LSet(string Source, int32 Length) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member LSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.LSet (Source, Length)" />
      <MemberSignature Language="ILAsm" Value=".method public static string LSet(string Source, int32 Length) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Source">Обязательный. Выражение <see langword="String" />. Имя строковой переменной.</param>
        <param name="Length">Обязательный. Выражение <see langword="Integer" />. Длина возвращаемой строки.</param>
        <summary>Возвращает выровненную по левому краю строку запрашиваемой длины, содержащую указанную строку.</summary>
        <returns>Выровненная по левому краю строка запрашиваемой длины, содержащая указанную строку.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если длина указанной строки превышает указанную длину, возвращаемая строка укорачивается до указанной длины. Если указанная строка короче заданной длины, то в правый конец возвращаемой строки добавляются пробелы для получения соответствующей длины.  
  
   
  
## Examples  
 В этом примере демонстрируется использование `LSet` функции.  
  
 [!code-vb[VbVbalrStrings#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md">Эффективное использование типов данных</related>
      </Docs>
    </Member>
    <Member MemberName="LTrim">
      <MemberSignature Language="C#" Value="public static string LTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string LTrim(string str) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member LTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LTrim str" />
      <MemberSignature Language="ILAsm" Value=".method public static string LTrim(string str) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Обязательный. Любое допустимое выражение типа <see langword="String" />.</param>
        <summary>Возвращает строку, содержащую копию указанной строки без начальных пробелов (<see langword="LTrim" />), замыкающих пробелов (<see langword="RTrim" />) или без тех и других (<see langword="Trim" />).</summary>
        <returns>Строка, содержащая копию указанной строки без начальных пробелов (<see langword="LTrim" />), замыкающих пробелов (<see langword="RTrim" />) или без тех и других (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Функции `LTrim`, `RTrim` и`Trim` удаляют пробелы из концов строк.  
  
   
  
## Examples  
 В данном примере функция `LTrim` используется, чтобы убрать пробелы в начале, а функция `RTrim` — чтобы убрать пробелы в конце строковой переменной. Функция `Trim` в примере используется для удаления обоих типов пробелов.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Mid">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает строку, содержащую символы из указанной строки.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Mid(string str, int32 Start) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Start" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Обязательный. Выражение <see langword="String" />, из которого возвращаются знаки.</param>
        <param name="Start">Обязательный. Выражение <see langword="Integer" />. Начальная позиция возвращаемых знаков. Если параметр <paramref name="Start" /> больше, чем количество символов в параметре <paramref name="str" />, функция <see langword="Mid" /> возвращает пустую строку (""). Значение параметра <paramref name="Start" /> отсчитывается с единицы.</param>
        <summary>Возвращает строку, содержащую все символы начиная с указанной позиции в строке.</summary>
        <returns>Строка, состоящая из всех символов начиная с указанной позиции в строке.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы определить количество символов в `str`, `Len` используйте функцию.  
  
 Visual Basic содержит `Mid` функцию `Mid` и оператор. Эти элементы работают с указанным числом символов в строке, но `Mid` функция возвращает символы, `Mid` пока оператор заменяет символы. Дополнительные сведения см. в разделе [оператор Mid](~/docs/visual-basic/language-reference/statements/mid-statement.md).  
  
> [!NOTE]
>  `MidB` Функция в предыдущих версиях Visual Basic возвращает строку в байтах, а не в символах. Он используется в основном для преобразования строк в приложениях с двухбайтовой кодировкой (DBCS). Все строки Visual Basic в Юникоде и `MidB` больше не поддерживаются.  
  
   
  
## Examples  
 Последняя строка в этом примере использует эту перегрузку `Mid` функции для возврата пятого и последующих символов из строки.  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt;= 0 или <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Строки в Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Знакомство со строками в Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/mid-statement.md">Оператор Mid</related>
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Mid(string str, int32 Start, int32 Length) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start, int Length);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start, Length)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start, int32 Length) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Start" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Length" Type="System.Int32" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Обязательный. Выражение <see langword="String" />, из которого возвращаются знаки.</param>
        <param name="Start">Обязательный. Выражение <see langword="Integer" />. Начальная позиция возвращаемых знаков. Если параметр <paramref name="Start" /> больше, чем количество символов в параметре <paramref name="str" />, функция <see langword="Mid" /> возвращает пустую строку (""). Значение параметра <paramref name="Start" /> отсчитывается с единицы.</param>
        <param name="Length">Необязательный параметр. Выражение <see langword="Integer" />. Число возвращаемых знаков. Если этот параметр опущен или количество знаков в тексте меньше значения <paramref name="Length" /> (включая знак на позиции <paramref name="Start" />), возвращаются все знаки от начальной позиции до конца строки.</param>
        <summary>Возвращает строку, содержащую указанное число символов начиная с указанной позиции в строке.</summary>
        <returns>Строка, состоящая из указанного числа символов начиная с указанной позиции в строке.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы определить количество символов в `str`, `Len` используйте функцию.  
  
 Visual Basic содержит `Mid` функцию `Mid` и оператор. Эти элементы работают с указанным числом символов в строке, но `Mid` функция возвращает символы, `Mid` пока оператор заменяет символы. Дополнительные сведения см. в разделе [оператор Mid](~/docs/visual-basic/language-reference/statements/mid-statement.md).  
  
> [!NOTE]
>  `MidB` Функция в предыдущих версиях Visual Basic возвращает строку в байтах, а не в символах. Он используется в основном для преобразования строк в приложениях с двухбайтовой кодировкой (DBCS). Все строки Visual Basic в Юникоде и `MidB` больше не поддерживаются.  
  
   
  
## Examples  
 Первые две `Mid` функции в этом примере возвращают указанное количество символов из строки, начиная с заданных позиций. (Последняя функция иллюстрирует <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> перегрузку и указывает только начальную точку для извлечения строки.)  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt;= 0 или <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Строки в Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Знакомство со строками в Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/mid-statement.md">Оператор Mid</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Expression As String, Find As String, Replacement As String, Optional Start As Integer = 1, Optional Count As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * string * int * int * Microsoft.VisualBasic.CompareMethod -&gt; string" Usage="Microsoft.VisualBasic.Strings.Replace (Expression, Find, Replacement, Start, Count, Compare)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Find" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Replacement" Type="System.String" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Start" Type="System.Int32" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Count" Type="System.Int32" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="5" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Обязательный. Строковое выражение, содержащее замещаемую подстроку.</param>
        <param name="Find">Обязательный. Подстрока, которую требуется найти.</param>
        <param name="Replacement">Обязательный. Подстрока для замены.</param>
        <param name="Start">Необязательный параметр. Позиция в <paramref name="Expression" />, с которой начинается подстрока, используемая для замены. Возвращаемое значение <see langword="Replace" /> представляет собой строку, начинающуюся с <paramref name="Start" /> с соответствующими заменами. Если этот аргумент не указан, используется значение 1.</param>
        <param name="Count">Необязательный параметр. Число выполняемых замен подстроки. Если этот аргумент опущен, по умолчанию принимается значение –1, указывающее, что следует "выполнить все возможные замены".</param>
        <param name="Compare">Необязательный параметр. Числовое значение, показывающее вид сравнения, используемое при оценке подстрок. См. значения в разделе "Параметры".</param>
        <summary>Возвращает строку, в которой указанная подстрока заданное число раз заменена другой подстрокой.</summary>
        <returns>Метод <see langword="Replace" /> возвращает следующие значения.  
  
 <list type="table"><item><term> If 
 </term><description> Функция Replace возвращает 
 </description></item><item><term>Параметр <paramref name="Find" /> является пустой строкой или значением <see langword="Nothing" /></term><description> Копия выражения <paramref name="Expression" /></description></item><item><term>Параметр <paramref name="Replace" /> имеет нулевую длину 
 </term><description> Копия выражения <paramref name="Expression" /> без вхождений строки <paramref name="Find" /></description></item><item><term>Строка <paramref name="Expression" /> является пустой строкой или значением <see langword="Nothing" />, или значение <paramref name="Start" /> больше длины выражения <paramref name="Expression" /></term><description><see langword="Nothing" /></description></item><item><term><paramref name="Count" /> равно 0 
 </term><description> Копия выражения <paramref name="Expression" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Возвращаемое `Replace` значение функции — это строка, которая начинается с позиции, заданной параметром `Start` , и завершается `Expression` в конце строки с подстановкой, заданной `Find` значениями и `Replace` .  
  
 `Compare` Аргумент может иметь следующие значения.  
  
|Константа|Описание|  
|-|-|  
|`Binary`|Выполняет двоичное сравнение|  
|`Text`|Выполняет текстовое сравнение|  
  
   
  
## Examples  
 В `Replace` этом примере демонстрируется функция.  
  
```vb  
Dim TestString As String = "Shopping List"  
' Returns "Shipping List".  
Dim aString As String = Replace(TestString, "o", "i")  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Count" /> &lt; –1 или <paramref name="Start" /> &lt;= 0.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Filter" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public static string Right (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Right(string str, int32 Length) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Right (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Right(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Right : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Right (str, Length)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Right(string str, int32 Length) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Обязательный. Выражение типа <see langword="String" />, из которого возвращаются крайние правые знаки.</param>
        <param name="Length">Обязательный. <see langword="Integer" />. Числовое выражение, показывающее необходимое число возвращаемых знаков. Если выражение равно 0, возвращается строка нулевой длины (""). Если выражение больше или равно числу знаков в <paramref name="str" />, то возвращается вся строка.</param>
        <summary>Возвращает строку, содержащую указанное число знаков с правой стороны строки.</summary>
        <returns>Строка, содержащая указанное число знаков с правой стороны строки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы определить количество символов в `str`, `Len` используйте функцию. При использовании в Windows Form или любом другом классе, имеющем `Right` свойство, необходимо полностью определить функцию с помощью. `Microsoft.VisualBasic.Strings.Right`  
  
> [!NOTE]
>  `RightB` Функция в более ранних версиях Visual Basic возвращает строку в байтах, а не в символах. Он используется в основном для преобразования строк в приложениях с двухбайтовой кодировкой (DBCS). Все текущие Visual Basic строки находятся в Юникоде и `RightB` больше не поддерживаются.  
  
   
  
## Examples  
 В этом примере демонстрируется использование `Right` функции для возврата подстроки заданного `String`объекта. В классе, имеющем `Right` свойство, может потребоваться полностью `Right` определить функцию.  
  
 [!code-vb[VbVbalrStrings#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="RSet">
      <MemberSignature Language="C#" Value="public static string RSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string RSet(string Source, int32 Length) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member RSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.RSet (Source, Length)" />
      <MemberSignature Language="ILAsm" Value=".method public static string RSet(string Source, int32 Length) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Source">Обязательный. Выражение <see langword="String" />. Имя строковой переменной.</param>
        <param name="Length">Обязательный. Выражение <see langword="Integer" />. Длина возвращаемой строки.</param>
        <summary>Возвращает выровненную по правому краю строку, содержащую указанную строку, настроенную под указанную длину.</summary>
        <returns>Выровненная по правому краю строка, содержащая указанную строку, настроенную под указанную длину.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `Source` длиннее`RSet`,то в возвращаемой строке помещается только `Source`крайние левые символы, вплоть до длины. `Length` Если указанная строка короче заданной длины, в левый конец строки добавляются пробелы для получения соответствующей длины. Если длина указанной строки превышает указанную длину, она сокращается до указанной длины.  
  
   
  
## Examples  
 В этом примере демонстрируется использование `RSet` функции.  
  
 [!code-vb[VbVbalrStrings#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md">Эффективное использование типов данных</related>
      </Docs>
    </Member>
    <Member MemberName="RTrim">
      <MemberSignature Language="C#" Value="public static string RTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string RTrim(string str) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member RTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.RTrim str" />
      <MemberSignature Language="ILAsm" Value=".method public static string RTrim(string str) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Обязательный. Любое допустимое выражение типа <see langword="String" />.</param>
        <summary>Возвращает строку, содержащую копию указанной строки без начальных пробелов (<see langword="LTrim" />), замыкающих пробелов (<see langword="RTrim" />) или без тех и других (<see langword="Trim" />).</summary>
        <returns>Строка, содержащая копию указанной строки без начальных пробелов (<see langword="LTrim" />), замыкающих пробелов (<see langword="RTrim" />) или без тех и других (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Функции `LTrim`, `RTrim` и`Trim` удаляют пробелы из концов строк.  
  
   
  
## Examples  
 В данном примере функция `LTrim` используется, чтобы убрать пробелы в начале, а функция `RTrim` — чтобы убрать пробелы в конце строковой переменной. Функция `Trim` в примере используется для удаления обоих типов пробелов.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="Space">
      <MemberSignature Language="C#" Value="public static string Space (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Space(int32 Number) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Space (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Space(int Number);" />
      <MemberSignature Language="F#" Value="static member Space : int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Space Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Space(int32 Number) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Выражение <see langword="Integer" />. Нужное количество пробелов в строке.</param>
        <summary>Возвращает строку, состоящую из указанного числа пробелов.</summary>
        <returns>Строка, состоящая из указанного числа пробелов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Space` Функция полезна для форматирования вывода и очистки данных в строках фиксированной длины.  
  
   
  
## Examples  
 В этом примере используется `Space` функция для возврата строки, состоящей из указанного числа пробелов.  
  
 [!code-vb[VbVbalrStrings#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string Expression, string Delimiter = &quot; &quot;, int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (Expression As String, Optional Delimiter As String = &quot; &quot;, Optional Limit As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Split : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Split (Expression, Delimiter, Limit, Compare)" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Delimiter" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Limit" Type="System.Int32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Обязательный. Выражение типа <see langword="String" />, содержащее подстроки и разделители.</param>
        <param name="Delimiter">Необязательный параметр. Одиночный знак, используемый для обозначения границ подстроки. Если аргумент <paramref name="Delimiter" /> опущен, в качестве разделителя используется знак пробела (" ").</param>
        <param name="Limit">Необязательный параметр. Максимальное число подстрок, на которые должна быть разделена входная строка. Значение по умолчанию –1 указывает, что входная строка должна быть разбита в местах каждого из вхождений строки <paramref name="Delimiter" />.</param>
        <param name="Compare">Необязательный параметр. Числовое значение, которое указывает вид сравнения, выполняемого при оценке подстрок. Сведения о значениях см. в разделе "Параметры".</param>
        <summary>Возвращает одномерный массив (с индексацией от нуля), содержащий указанное число подстрок.</summary>
        <returns>Массив<see langword="String" /> . Если <paramref name="Expression" /> является строкой нулевой длины (""), функция <see langword="Split" /> возвращает одноэлементный массив, содержащий строку нулевой длины. Если <paramref name="Delimiter" /> является строкой нулевой длины, или он нигде не найден в параметре <paramref name="Expression" />, функция <see langword="Split" /> возвращает одноэлементный массив, содержащий всю строку <paramref name="Expression" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию или, `Limit` когда Equals-1 `Split` , функция разделяет входную строку на каждое вхождение строки разделителя и возвращает подстроки в массиве. Если значение `Limit` параметра больше нуля `Split` , функция разделяет строку по первым `Limit`1 вхождениям разделителя и возвращает массив с результирующими подстроками. Например, `Split("a:b:c", ":")` возвращает массив `{"a", "b", "c"}`, а `Split("a:b:c", ":", 2)` возвращает массив `{"a", "b:c"}`.  
  
 `Split` Если функция встречает два разделителя в строке или разделитель в начале или в конце строки, он интерпретирует их как окружающую пустую строку (""). Например, `Split("xx", "x")` возвращает массив, содержащий три пустые строки: один из между началом строки и первый "x", один из между двумя строками "x", а второй — между последним "x" и концом строки.  
  
 В этой таблице показано, как `Delimiter`необязательные `Compare` параметры, `Limit`и могут изменить поведение `Split` функции.  
  
|Вызов Split|Возвращаемое значение|  
|-|-|  
|`Split("42, 12, 19")`|{"42," , "12," , "19"}|  
|`Split("42, 12, 19", ", ")`|{"42", "12", "19"}|  
|`Split("42, 12, 19", ", ", 2)`|{"42", "12, 19"}|  
|`Split("192.168.0.1", ".")`|{"192", "168", "0", "1"}|  
|`Split("Alice and Bob", " AND ")`|{"Алиса и Боб"}|  
|`Split("Alice and Bob", " AND ", ,CompareMethod.Text)`|{"Алиса", "Bob"}|  
|`Split("someone@example.com", "@",1)`|{"someone@example.com"}|  
|`Split("someone@example.com", "@",2)`|{"кто", "example.com"}|  
  
 `Compare` Аргумент может иметь следующие значения.  
  
|Константа|Описание|Значение|  
|-|-|-|  
|`CompareMethod.Binary`|Выполняет двоичное сравнение|0|  
|`CompareMethod.Text`|Выполняет текстовое сравнение|1|  
  
   
  
## Examples  
 В следующем примере показано, как разделить строку в своих пробелах.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 В следующем примере показано, как разделить строки с несколькими разделителями в строке и отфильтровать пустые строки.  
  
 [!code-vb[VbVbalrStrings#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Join" />
        <altmember cref="T:Microsoft.VisualBasic.CompareMethod" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="StrComp">
      <MemberSignature Language="C#" Value="public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrComp (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member StrComp : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.StrComp (String1, String2, Compare)" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="String2" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Обязательный. Любое допустимое выражение типа <see langword="String" />.</param>
        <param name="String2">Обязательный. Любое допустимое выражение типа <see langword="String" />.</param>
        <param name="Compare">Необязательный параметр. Указывает тип сравнения строк. Если параметр <paramref name="Compare" /> не задан, параметр <see langword="Option Compare" /> определяет тип сравнения.</param>
        <summary>Возвращает -1, 0 или 1 в зависимости от результата сравнения строк.</summary>
        <returns>Метод <see langword="StrComp" /> возвращает следующие значения.  
  
 <list type="table"><item><term> If 
 </term><description> StrComp возвращает 
 </description></item><item><term><paramref name="String1" /> при сортировке помещается перед <paramref name="String2" /></term><description> -1 
 </description></item><item><term><paramref name="String1" /> равно <paramref name="String2" />.</term><description> 0 
 </description></item><item><term><paramref name="String1" /> при сортировке помещается после <paramref name="String2" /></term><description> 1 
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Строки сравниваются по буквенно-цифровым значениям сортировки, начиная с первого символа. Дополнительные сведения о двоичных сравнениях, текстовых сравнениях и порядке сортировки см. в разделе [Option Compare](~/docs/visual-basic/language-reference/statements/option-compare-statement.md).  
  
 Параметры аргумента `Compare`:  
  
|Константа|Описание|  
|-|-|  
|`Binary`|Выполняет двоичное сравнение на основе порядка сортировки, полученного из внутренних двоичных представлений символов.|  
|`Text`|Выполняет сравнение текста на основе порядка сортировки текста без учета регистра, определенного `LocaleID` значением системы.|  
  
   
  
## Examples  
 В этом примере используется `StrComp` функция для возврата результатов сравнения строк.  
  
 [!code-vb[VbVbalrStrings#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Недопустимое значение параметра <paramref name="Compare" />.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Строки в Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Знакомство со строками в Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="StrConv">
      <MemberSignature Language="C#" Value="public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrConv (str As String, Conversion As VbStrConv, Optional LocaleID As Integer = 0) As String" />
      <MemberSignature Language="F#" Value="static member StrConv : string * Microsoft.VisualBasic.VbStrConv * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrConv (str, Conversion, LocaleID)" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Conversion" Type="Microsoft.VisualBasic.VbStrConv" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="LocaleID" Type="System.Int32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="str">Обязательный. Преобразуемое выражение <see langword="String" />.</param>
        <param name="Conversion">Обязательный. Член <see cref="T:Microsoft.VisualBasic.VbStrConv" />. Значение перечисления, задающее тип выполняемого преобразования.</param>
        <param name="LocaleID">Необязательный параметр. Значение <see langword="LocaleID" />, если оно отличается от системного значения <see langword="LocaleID" />. (Системное значение <see langword="LocaleID" /> является значением по умолчанию.)</param>
        <summary>Возвращает строку, преобразованную как указано.</summary>
        <returns>Строка, преобразованная как указано.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Константы `VbStrConv.Wide` `VbStrConv.Narrow` ,,`VbStrConv.Hiragana` ,, и могут вызвать ошибки времени выполнения при использовании в языковых стандартах, где они не применяются, но не всегда: константы `VbStrConv.Katakana`и `VbStrConv.SimplifiedChinese` `VbStrConv.TraditionalChinese` `VbStrConv.Katakana` `VbStrConv.Hiragana`может использоваться в неяпонской системе с установленным японским языковым пакетом. Кроме того, использование констант `VbStrConv.Wide` и `VbStrConv.Narrow` поддерживается в любой системе с установленным восточно-азиатским языком.  
  
 Эта функция использует сведения о языке и региональных параметрах приложения при обработке строки, чтобы изменения регистра соответствовали языковому стандарту, в котором используется приложение.  
  
> [!IMPORTANT]
>  Если приложение принимает решения по обеспечению безопасности на основе результатов операции сравнения или <xref:System.String.Compare%2A?displayProperty=nameWithType> изменения регистра, то операция должна использовать метод и передать <xref:System.StringComparison.Ordinal> или <xref:System.StringComparison.OrdinalIgnoreCase> для `comparisonType` аргумента. Дополнительные сведения см. [в разделе влияние языка и региональных параметров на строки в Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
 Параметры аргумента `Conversion`:  
  
|Элемент перечисления|Описание|  
|-|-|  
|`VbStrConv.None`|Преобразование не выполняется|  
|`VbStrConv.LinguisticCasing`|Использует лингвистические правила для регистра, а не для файловой системы (по умолчанию). Допускается только `VbStrConv.UpperCase` с `VbStrConv.LowerCase` и.|  
|`VbStrConv.UpperCase`|Преобразует строку в верхний регистр.|  
|`VbStrConv.LowerCase`|Преобразует строку в нижний регистр.|  
|`VbStrConv.ProperCase`|Преобразует первую букву каждого слова в строке в верхний регистр.|  
|`VbStrConv.Wide` <sup>*</sup>|Преобразует узкие (полуширинные) символы в строке в широкие (полноширинные) символы. [!INCLUDE[vbstrconv-wide](~/includes/vbstrconv-wide-md.md)]|  
|`VbStrConv.Narrow` <sup>*</sup>|Преобразует широкие (полноширинные) символы в строке для узких символов (половинной ширины).|  
|`VbStrConv.Katakana` <sup>**</sup>|Преобразует все символы хирагана в символы катакана.|  
|`VbStrConv.Hiragana` <sup>**</sup>|Преобразует все символы катакана в символы хирагана.|  
|`VbStrConv.SimplifiedChinese` <sup>*</sup>|Преобразует традиционные китайские иероглифы в упрощенный китайский.|  
|`VbStrConv.TraditionalChinese` <sup>*</sup>|Преобразует символы упрощенного китайского языка в традиционный китайский.|  
  
 <sup>*</sup>Применяется к азиатским языкам.  
  
 <sup>**</sup>Применяется только к Японии.  
  
> [!NOTE]
>  Эти константы указываются в .NET Framework среде CLR. В результате их можно использовать в любом месте кода вместо фактических значений. Большинство можно объединить (например, `UpperCase + Wide`), за исключением случаев, когда они являются взаимоисключающими (например, `VbStrConv.Wide + VbStrConv.Narrow`).  
  
 Ниже приведены допустимые разделители слов для правильного регистра: NULL (`Chr$(0)`), горизонтальная табуляция (`Chr$(9)`), перевод`Chr$(10)`строки (), вертикальная табуляция (`Chr$(11)`)`Chr$(12)`, веб-канал формы`Chr$(13)`(), возврат каретки (), пробел (`Chr$(32)`однобайтовый набор символов) (). Фактическое значение пробела, которое может быть полной или половинной ширины, зависит от страны или региона для восточноазиатских языков и региональных параметров.  
  
   
  
## Examples  
 В этом примере текст преобразуется во все строчные буквы.  
  
 [!code-vb[VbVbalrStrings#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Значение <paramref name="LocaleID" /> не поддерживается, <paramref name="Conversion" /> &lt; 0 или &gt; 2048, либо конверсия не поддерживается для указанного языкового стандарта.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="StrDup">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает строку или объект, состоящие из указанного знака, повторенного определенное количество раз.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, char Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string StrDup(int32 Number, char Character) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, char Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * char -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, char Character) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Character" Type="System.Char" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Выражение <see langword="Integer" />. Длина возвращаемой строки.</param>
        <param name="Character">Обязательный. Любое допустимое выражение <see langword="Char" />, <see langword="String" /> или <see langword="Object" />. Используется только первый знак выражения. Если параметр Character относится к типу <see langword="Object" />, он должен содержать значение <see langword="Char" /> или <see langword="String" />.</param>
        <summary>Возвращает строку или объект, состоящие из указанного знака, повторенного определенное количество раз.</summary>
        <returns>Строка или объект, состоящие из указанного знака, повторенного определенное количество раз.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта функция возвращает, `String` состоящие из повторяющихся символов. Символ, составляющий строку, является первым символом в `Character` аргументе и `Number` повторяется число раз.  
  
   
  
## Examples  
 В этом примере `StrDup` функция используется для возврата строки повторяющихся символов.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Недопустимо значение <paramref name="Number" /> меньшее 0 или типа <paramref name="Character" />.</exception>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="Character" /> имеет значение <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static object StrDup (int Number, object Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object StrDup(int32 Number, object Character) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ StrDup(int Number, System::Object ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * obj -&gt; obj" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberSignature Language="ILAsm" Value=".method public static object StrDup(int32 Number, object Character) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Character" Type="System.Object" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Выражение <see langword="Integer" />. Длина возвращаемой строки.</param>
        <param name="Character">Обязательный. Любое допустимое выражение <see langword="Char" />, <see langword="String" /> или <see langword="Object" />. Используется только первый знак выражения. Если параметр Character относится к типу <see langword="Object" />, он должен содержать значение <see langword="Char" /> или <see langword="String" />.</param>
        <summary>Возвращает строку или объект, состоящие из указанного знака, повторенного определенное количество раз.</summary>
        <returns>Строка или объект, состоящие из указанного знака, повторенного определенное количество раз.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта функция возвращает, `String` состоящие из повторяющихся символов. Символ, составляющий строку, является первым символом в `Character` аргументе и `Number` повторяется число раз.  
  
   
  
## Examples  
 В этом примере `StrDup` функция используется для возврата строки повторяющихся символов.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Недопустимо значение <paramref name="Number" /> меньшее 0 или типа <paramref name="Character" />.</exception>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="Character" /> имеет значение <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, string Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string StrDup(int32 Number, string Character) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, System::String ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, string Character) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Character" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Выражение <see langword="Integer" />. Длина возвращаемой строки.</param>
        <param name="Character">Обязательный. Любое допустимое выражение <see langword="Char" />, <see langword="String" /> или <see langword="Object" />. Используется только первый знак выражения. Если параметр Character относится к типу <see langword="Object" />, он должен содержать значение <see langword="Char" /> или <see langword="String" />.</param>
        <summary>Возвращает строку или объект, состоящие из указанного знака, повторенного определенное количество раз.</summary>
        <returns>Строка или объект, состоящие из указанного знака, повторенного определенное количество раз.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта функция возвращает, `String` состоящие из повторяющихся символов. Символ, составляющий строку, является первым символом в `Character` аргументе и `Number` повторяется число раз.  
  
   
  
## Examples  
 В этом примере `StrDup` функция используется для возврата строки повторяющихся символов.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Недопустимо значение <paramref name="Number" /> меньшее 0 или типа <paramref name="Character" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="Character" /> — <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="StrReverse">
      <MemberSignature Language="C#" Value="public static string StrReverse (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string StrReverse(string Expression) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrReverse (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrReverse(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member StrReverse : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrReverse Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrReverse(string Expression) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">Обязательный. Строковое выражение, знаки которого следует переставить в обратном порядке. Если параметр <paramref name="Expression" /> является строкой нулевой длины (""), то возвращается строка нулевой длины.</param>
        <summary>Возвращает строку, содержащую те же знаки, что и в заданной строке, но в противоположном порядке.</summary>
        <returns>Строка, содержащая те же знаки, что и в заданной строке, но в противоположном порядке.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Функция возвращает строку, содержащую те же `Expression`символы, что и, но в обратном порядке. `StrReverse`  
  
   
  
## Examples  
 [!code-vb[VbVbalrStrings#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static string Trim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Trim(string str) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Trim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Trim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Trim str" />
      <MemberSignature Language="ILAsm" Value=".method public static string Trim(string str) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Обязательный. Любое допустимое выражение типа <see langword="String" />.</param>
        <summary>Возвращает строку, содержащую копию указанной строки без начальных пробелов (<see langword="LTrim" />), замыкающих пробелов (<see langword="RTrim" />) или без тех и других (<see langword="Trim" />).</summary>
        <returns>Строка, содержащая копию указанной строки без начальных пробелов (<see langword="LTrim" />), замыкающих пробелов (<see langword="RTrim" />) или без тех и других (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Функции `LTrim`, `RTrim` и`Trim` удаляют пробелы из концов строк.  
  
   
  
## Examples  
 В данном примере функция `LTrim` используется, чтобы убрать пробелы в начале, а функция `RTrim` — чтобы убрать пробелы в конце строковой переменной. Функция `Trim` в примере используется для удаления обоих типов пробелов.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="UCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает строку или знак, содержащий указанную строку, преобразованную в верхний регистр.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static char UCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char UCase(char Value) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char UCase(char Value);" />
      <MemberSignature Language="F#" Value="static member UCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberSignature Language="ILAsm" Value=".method public static char UCase(char Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Value">Обязательный. Любое допустимое значение <see langword="String" /> или выражение <see langword="Char" />.</param>
        <summary>Возвращает строку или знак, содержащий указанную строку, преобразованную в верхний регистр.</summary>
        <returns>Строка или знак, содержащие указанную строку, преобразованную в верхний регистр.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Только строчные буквы преобразуются в верхний регистр; Все прописные буквы и небуквенные символы остаются без изменений.  
  
 Эта функция использует сведения о языке и региональных параметрах приложения при обработке строки, чтобы изменения регистра соответствовали языковому стандарту, в котором используется приложение.  
  
> [!IMPORTANT]
>  Если приложение принимает решения по обеспечению безопасности на основе результатов операции сравнения или <xref:System.String.Compare%2A?displayProperty=nameWithType> изменения регистра, то операция должна использовать метод и передать <xref:System.StringComparison.Ordinal> или <xref:System.StringComparison.OrdinalIgnoreCase> для `comparisonType` аргумента. Дополнительные сведения см. [в разделе влияние языка и региональных параметров на строки в Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 В данном примере функция `UCase` используется для возврата строки в верхнем регистре.  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Строки в Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Знакомство со строками в Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static string UCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UCase(string Value) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member UCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberSignature Language="ILAsm" Value=".method public static string UCase(string Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Value">Обязательный. Любое допустимое значение <see langword="String" /> или выражение <see langword="Char" />.</param>
        <summary>Возвращает строку или знак, содержащий указанную строку, преобразованную в верхний регистр.</summary>
        <returns>Строка или знак, содержащие указанную строку, преобразованную в верхний регистр.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Только строчные буквы преобразуются в верхний регистр; Все прописные буквы и небуквенные символы остаются без изменений.  
  
 Эта функция использует сведения о языке и региональных параметрах приложения при обработке строки, чтобы изменения регистра соответствовали языковому стандарту, в котором используется приложение.  
  
> [!IMPORTANT]
>  Если приложение принимает решения по обеспечению безопасности на основе результатов операции сравнения или <xref:System.String.Compare%2A?displayProperty=nameWithType> изменения регистра, то операция должна использовать метод и передать <xref:System.StringComparison.Ordinal> или <xref:System.StringComparison.OrdinalIgnoreCase> для `comparisonType` аргумента. Дополнительные сведения см. [в разделе влияние языка и региональных параметров на строки в Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 В данном примере функция `UCase` используется для возврата строки в верхнем регистре.  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Сводка по работе со строками</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Строки в Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Знакомство со строками в Visual Basic</related>
      </Docs>
    </Member>
  </Members>
</Type>
