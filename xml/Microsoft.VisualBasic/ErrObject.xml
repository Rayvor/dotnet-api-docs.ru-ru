<Type Name="ErrObject" FullName="Microsoft.VisualBasic.ErrObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="67203d2e3262083e36b5d156d1c448b2571fa2ce" /><Meta Name="ms.sourcegitcommit" Value="95e24aee1283af2f120fc5da4b0bdc0712ab698f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="05/06/2019" /><Meta Name="ms.locfileid" Value="65156373" /></Metadata><TypeSignature Language="C#" Value="public sealed class ErrObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ErrObject extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ErrObject" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ErrObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ErrObject sealed" />
  <TypeSignature Language="F#" Value="type ErrObject = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see langword="ErrObject" /> Модуль содержит свойства и процедуры, используемые для идентификации и обработки ошибок времени выполнения, с помощью <see langword="Err" /> объекта.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ErrObject` Модуль поддерживает `Err` объекта. Дополнительные сведения см. в разделе <xref:Microsoft.VisualBasic.Information.Err%2A>.  
  
   
  
## Examples  
 В этом примере используется свойства `Err` объекта при конструировании в диалоговом окне сообщения об ошибке. Обратите внимание на то, что происходит при использовании `Clear` метод первого: При создании ошибки Visual Basic с `Raise` метод, Visual Basic по умолчанию значения становятся свойства `Err` объекта.  
  
```vb  
Dim Msg As String  
' If an error occurs, construct an error message.  
On Error Resume Next   ' Defer error handling.  
Err.Clear  
Err.Raise(6)   ' Generate an "Overflow" error.  
' Check for error, then show message.  
If Err.Number <> 0 Then  
    Msg = "Error # " & Str(Err.Number) & " was generated by " _  
        & Err.Source & ControlChars.CrLf & Err.Description  
    MsgBox(Msg, MsgBoxStyle.Information, "Error")  
End If  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
    <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">Оператор On Error (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md">Оператор Try... Catch... Finally (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Ключевые слова (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Члены библиотеки времени выполнения Visual Basic</related>
  </Docs>
  <Members>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="errObject.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Очищает все значения свойств объекта <see langword="Err" /> объекта.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте `Clear` для явной очистки `Err` объекта после обработки ошибки, например, при использовании отложенной обработки ошибок с помощью `On Error Resume Next`. `Clear` Метод вызывается автоматически при выполнении любого из следующих инструкций:  
  
-   Любой тип `Resume` инструкции  
  
-   `Exit Sub`, `Exit Function`или `Exit Property`  
  
-   Любой `On Error` инструкции  
  
-   Любой `Try...Catch...Finally` инструкции  
  
    > [!NOTE]
    >  `On Error Resume Next` Конструкция может оказаться предпочтительнее `On Error GoTo` при обработке ошибок, возникших во время доступа к другим объектам. Проверка `Err` после каждого взаимодействия с объектом устраняет неоднозначность, о том, какие обращения к объекту с помощью кода: Вы можете быть уверены, какой объект поместил код ошибки в `Err.Number`, а также какой объект вызвавшего ошибку (объект, указанный в `Err.Source`).  
  
   
  
## Examples  
 В этом примере используется `Err` объекта `Clear` метод, чтобы сбросить числовые свойства `Err` объекта и строковых свойств в строки нулевой длины. Без вызова `Clear`, второй вызов `MsgBox` будет отображаться такое сообщение об ошибке.  
  
 [!code-vb[VbVbalrErrorHandling#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">Оператор On Error (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает <see langword="String" /> выражение, содержащее строку описания, связанную с ошибкой. Чтение и запись.</summary>
        <value>Возвращает или задает <see langword="String" /> выражение, содержащее строку описания, связанную с ошибкой. Чтение и запись.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Description` Значение свойства содержит краткое описание ошибки. Это свойство используется для оповещения пользователя об ошибке, который нельзя или нежелательно для обработки. При создании пользовательской ошибки, присвойте краткое описание ошибки для `Description` свойство. Если `Description` свойство не заполнено и значение <xref:Microsoft.VisualBasic.ErrObject.Number%2A> свойства соответствует ошибке времени выполнения Visual Basic, то строка, возвращаемая <xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A> функция задается в `Description` свойства, если происходит ошибка.  
  
   
  
## Examples  
 В этом примере назначает определенное пользователем сообщение, чтобы `Description` свойство `Err` объекта.  
  
 [!code-vb[VbVbalrErrorHandling#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public int Erl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Erl" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Erl As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Erl { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Erl : int" Usage="Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает целое число, указывающее номер строки последнего выполненного оператора.</summary>
        <value>Номер строки последнего выполненного оператора.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если Visual Basic не обнаруживает номера строки, она возвращает 0.  
  
   
  
## Examples  
 В этом примере используется `Erl` свойство, указывающее номер строки.  
  
```  
10:     On Error Resume Next  
20:     Err.Raise(60000)  
' Returns 20.  
30:     MsgBox(Erl())  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="GetException">
      <MemberSignature Language="C#" Value="public Exception GetException ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Exception GetException() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.GetException" />
      <MemberSignature Language="VB.NET" Value="Public Function GetException () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception ^ GetException();" />
      <MemberSignature Language="F#" Value="member this.GetException : unit -&gt; Exception" Usage="errObject.GetException " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает исключение, представляющее возникшую ошибку.</summary>
        <returns>Исключение, представляющее возникшую ошибку.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `GetException` Функция доступна только из `Err` класса объектов. Она работает с `Exception` свойство `Err` объект для отображения возникшей ошибки.  
  
   
  
## Examples  
 Следующий код отображает сообщение, связанное с исключением в `Err` объекта:  
  
 [!code-vb[VbVbalrCatRef#66](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#66)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpContext">
      <MemberSignature Language="C#" Value="public int HelpContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HelpContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpContext As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HelpContext { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.HelpContext : int with get, set" Usage="Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает <see langword="Integer" /> содержащее идентификатор контекста для раздела в файле справки. Чтение и запись.</summary>
        <value>Возвращает или задает <see langword="Integer" /> содержащее идентификатор контекста для раздела в файле справки. Чтение и запись.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `HelpContext` Свойство используется для отображения контекстной справки для приложения. Если указан файл справки в `HelpFile`, `HelpContext` свойство используется для автоматического отображения определенного файла справки. Если оба `HelpFile` и `HelpContext` свойства пусты, значение <xref:Microsoft.VisualBasic.ErrObject.Number%2A> свойство проверяется. Если значение `Number` свойство соответствует значению ошибки времени выполнения Visual Basic, то используется идентификатор контекста справки Visual Basic для ошибки. Если значение `Number` свойства не соответствует ошибки Visual Basic, появится экран содержимое файла справки Visual Basic.  
  
> [!NOTE]
>  В приложении для обработки типичных ошибок следует написать процедуры. При программировании с использованием объекта, можно использовать файл справки объекта для повышения качества обработки ошибок, или для отображения значимые сообщения, если ошибки не может быть восстановлен.  
  
   
  
## Examples  
 В этом примере используется `HelpContext` свойство `Err` объекта для отображения раздела справки Visual Basic для `Overflow` ошибки.  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpFile">
      <MemberSignature Language="C#" Value="public string HelpFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpFile" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HelpFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HelpFile : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает <see langword="String" /> выражение, содержащее полный путь к файлу справки. Чтение и запись.</summary>
        <value>Возвращает или задает <see langword="String" /> выражение, содержащее полный путь к файлу справки. Чтение и запись.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если файл справки, задана `HelpFile` свойство, он вызывается автоматически при нажатии клавиши справки (или клавишу F1) в диалоговом окне сообщения об ошибке. Если `HelpContext` свойство содержит допустимый контекст идентификатора для указанного файла, этот раздел отображается автоматически. Если нет `HelpFile` указано, отображается в файле справки Visual Basic.  
  
> [!NOTE]
>  В приложении для обработки типичных ошибок следует написать процедуры. При программировании с использованием объекта, можно использовать файл справки объекта для повышения качества обработки ошибок, или для отображения значимые сообщения, если ошибки не может быть восстановлен.  
  
   
  
## Examples  
 В этом примере используется `HelpFile` свойство `Err` объект для запуска справочной системы. По умолчанию `HelpFile` свойство содержит имя файла справки Visual Basic.  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="LastDllError">
      <MemberSignature Language="C#" Value="public int LastDllError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LastDllError" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastDllError As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LastDllError { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LastDllError : int" Usage="Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает код системной ошибки, полученной при вызове библиотеки DLL.</summary>
        <value>Код системной ошибки, полученной при вызове библиотеки динамической компоновки (DLL).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> Свойство применимо только к библиотеке DLL, вызовы из кода Visual Basic. При такой вызов, вызываемая функция обычно возвращает код, указывающий успешное или неуспешное завершение и <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> указано свойство. Обратитесь к документации для функций DLL определить возвращаемые значения, указывающие на успех или сбой. Каждый раз, когда возвращается код ошибки, приложение Visual Basic немедленно проверьте <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> свойство. Исключение не вызывается при <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> свойству.  
  
> [!NOTE]
>  <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> Свойство защищен <xref:System.Security.Permissions.SecurityAction.LinkDemand>, который помогает препятствовать его доступу к от ненадежного кода. Тем не менее <xref:System.Security.Permissions.SecurityAction.LinkDemand> требует только непосредственного вызывающего объекта, чтобы <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A> разрешение. Если ваш код может вызываться из частично доверенного кода, предоставляя значение <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> без проверки представляет угрозу безопасности.  
>   
>  О важных ограничениях по использованию <xref:System.Security.Permissions.SecurityAction.LinkDemand> член, см. в разделе [Demand и. LinkDemand](https://msdn.microsoft.com/library/1ab877f2-70f4-4e0d-8116-943999dfe8f5). Дополнительные сведения о разрешениях см. в разделе <xref:System.Security.Permissions.SecurityPermission> и [разрешений доступа к коду](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
 Примечание для смарт-устройств, это свойство всегда возвращает ноль.  
  
   
  
## Examples  
 В следующем примере показано, как можно использовать `LastDllError` свойства после вызова функции в Windows API. `PrintWindowCoordinates` Процедура принимает дескриптор окна и вызовы `GetWindowRect` функции. `GetWindowRect` заполняет структуру данных RECT длины сторон прямоугольника, образующих окна. Если передается недопустимый дескриптор, возникает ошибка, и номер ошибки, который доступен через `LastDllError` свойство.  
  
 [!code-vb[VbVbalrErrorHandling#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#8)]  
[!code-vb[VbVbalrErrorHandling#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#9)]  
[!code-vb[VbVbalrErrorHandling#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#10)]  
  
 [!code-vb[VbVbalrErrorHandling#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Number">
      <MemberSignature Language="C#" Value="public int Number { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Number" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Number" />
      <MemberSignature Language="VB.NET" Value="Public Property Number As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Number { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Number : int with get, set" Usage="Microsoft.VisualBasic.ErrObject.Number" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает численное значение, определяющее ошибку. Чтение и запись.</summary>
        <value>Возвращает или задает численное значение, определяющее ошибку. Чтение и запись.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Все `Raise` аргументы, кроме `Number` являются необязательными. Если опустить необязательные аргументы и параметры свойства `Err` объекта содержит значения, которые не были очищены, эти значения являются значениями ошибки.  
  
 Так как `Err` объект предоставляется больше данных, чем при генерации ошибок с `Error` инструкции `Raise` можно применять для создания ошибок при написании модулей класса. Например, с помощью `Raise` метод, можно указать источник, создавший ошибку в `Source` свойство, интерактивной справки для ошибки можно ссылаться и т. д.  
  
 При возврате ошибок, определенные пользователем объектом, задать `Err.Number` путем сложения, выбранный в код ошибки для `VbObjectError` константы. Например вы используйте следующий код для возврата количества 1051 с кодом ошибки:  
  
 [!code-vb[VbVbalrErrorHandling#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#13)]  
  
   
  
## Examples  
 В этом примере демонстрируется типичное использование `Number` свойства в процедуре обработки ошибок.  
  
 [!code-vb[VbVbalrErrorHandling#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#12)]  
  
 В этом примере используется `Err` объекта `Raise` метод для создания исходной ошибки внутри функции, написанной на Visual Basic. Вызывающая функция можно перехватить ошибку и сообщите о ней пользователю. Обратите внимание, что процедура `CallingProcedure` противопоставляет тип данных, которые могут быть производными от `Err` объекта со сведениями, можно получить из `Exception` объекта.  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> больше 65535.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Raise">
      <MemberSignature Language="C#" Value="public void Raise (int Number, object Source = null, object Description = null, object HelpFile = null, object HelpContext = null);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Raise(int32 Number, object Source, object Description, object HelpFile, object HelpContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Raise (Number As Integer, Optional Source As Object = null, Optional Description As Object = null, Optional HelpFile As Object = null, Optional HelpContext As Object = null)" />
      <MemberSignature Language="F#" Value="member this.Raise : int * obj * obj * obj * obj -&gt; unit" Usage="errObject.Raise (Number, Source, Description, HelpFile, HelpContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Source" Type="System.Object" />
        <Parameter Name="Description" Type="System.Object" />
        <Parameter Name="HelpFile" Type="System.Object" />
        <Parameter Name="HelpContext" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. <see langword="Long" /> целое число, обозначающее характер ошибки. Ошибки Visual Basic обозначаются числами в диапазоне 0-65535; диапазон 0-512 зарезервирован для системных ошибок; диапазон 513-65535 отводится для ошибок, определяемых пользователем. При задании <see langword="Number" /> свойство собственный код ошибки в модуле класса, добавьте номер пользовательского кода ошибки для <see langword="vbObjectError" /> константы. Например, чтобы создать номер ошибки 513, нужно присвоить свойству <see langword="Number" /> значение <c>vbObjectError + 513</c>.</param>
        <param name="Source">Необязательный параметр. <see langword="String" /> выражение, содержащее имя объекта или приложения, вызвавшего ошибку. При задании этого свойства для объекта используется формат <c>проект</c>.<c>класс</c>. Если <paramref name="Source" /> не указан, используется идентификатор процесса текущего проекта Visual Basic.</param>
        <param name="Description">Необязательный параметр. <see langword="String" /> выражение, описывающее ошибку. Если не указан, значение в <see langword="Number" /> свойство проверяется. Если он может быть сопоставлен ошибки времени выполнения Visual Basic, строка кода, которые возвращаются по <see langword="Error" /> функция используется в качестве <see langword="Description" /> свойство. Если отсутствуют ошибки Visual Basic, соответствующее <see langword="Number" /> используется свойство, сообщение «определяемые приложением или объектом ошибка».</param>
        <param name="HelpFile">Необязательный параметр. Полный путь к файлу справки, в котором можно найти справку по этой ошибке. Если не указан, Visual Basic использует полное имя диска, путь и имя файла справки Visual Basic.</param>
        <param name="HelpContext">Необязательный параметр. Идентификатор контекста, определяющий раздел в <paramref name="HelpFile" /> , предоставляющий справки для ошибки. Если этот параметр опущен, идентификатор контекста файла справки Visual Basic для ошибки, соответствующий <see langword="Number" /> свойство используется, если он существует.</param>
        <summary>Вызывает ошибку времени выполнения; может использоваться вместо <see langword="Error" /> инструкции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Все `Raise` аргументы, кроме `Number` являются необязательными. Если опустить необязательные аргументы и параметры свойства `Err` объекта содержит значения, которые не были очищены, эти значения являются значениями ошибки.  
  
 Так как `Err` объект предоставляется больше данных, чем при генерации ошибок с `Error` инструкции `Raise` можно применять для создания ошибок при написании модулей класса. Например, с помощью `Raise` метод, можно указать источник, создавший ошибку в `Source` свойство, интерактивной справки для ошибки можно ссылаться и т. д.  
  
   
  
## Examples  
 В этом примере используется `Err` объекта `Raise` метод для создания ошибки внутри функции, написанной на Visual Basic. Вызывающей функции можно перехватить ошибку и сообщит его пользователю в окне сообщения.  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/error-statement.md">Оператор Error</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">Оператор On Error (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает <see langword="String" /> выражение, указывающее имя объекта или приложения, вызвавшего ошибку. Чтение и запись.</summary>
        <value>Возвращает или задает <see langword="String" /> выражение, указывающее имя объекта или приложения, вызвавшего ошибку. Чтение и запись.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Source` Указывает свойство `String` выражение, представляющее объект, создавший ошибку; выражение обычно имеет имя класса объекта или идентификатор процесса. Используйте `Source` свойство для предоставления сведений, если код не может обработать ошибку, сформированную в объекте, к которому осуществляется доступ. Например, если вы получить доступ к Microsoft Excel и создает `Division by zero` задает ошибки, Microsoft Excel `Err.Number` для его код ошибки для этой ошибки и наборов `Source` для «Excel.Application».  
  
 Когда приложение создает ошибку из кода, `Source` — это программный идентификатор вашего приложения. В классе `Source` должен содержать имя в форме *проекта*. *Класс*. При возникновении непредвиденной ошибки в коде, `Source` свойство заполняется автоматически. Для ошибок в модуле `Source` содержит имя проекта.  
  
   
  
## Examples  
 В этом примере демонстрируется использование `Source` свойство в типичной процедуре обработки ошибок. При возникновении ошибки из `Class1`, строка `"Class1"` назначается `Source` свойство `Err` объекта. Эта строка отображается в сообщении, указывающем источник и номер ошибки.  
  
 [!code-vb[VbVbalrErrorHandling#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">Оператор On Error (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>