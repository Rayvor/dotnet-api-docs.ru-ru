<Type Name="ErrObject" FullName="Microsoft.VisualBasic.ErrObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="67203d2e3262083e36b5d156d1c448b2571fa2ce" /><Meta Name="ms.sourcegitcommit" Value="95e24aee1283af2f120fc5da4b0bdc0712ab698f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="05/06/2019" /><Meta Name="ms.locfileid" Value="65156373" /></Metadata><TypeSignature Language="C#" Value="public sealed class ErrObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ErrObject extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ErrObject" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ErrObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ErrObject sealed" />
  <TypeSignature Language="F#" Value="type ErrObject = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>В модуле <see langword="ErrObject" /> содержатся свойства и процедуры, используемые для идентификации и обработки ошибок времени выполнения с помощью объекта <see langword="Err" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ErrObject` Модуль`Err` поддерживает объект. Для получения дополнительной информации см. <xref:Microsoft.VisualBasic.Information.Err%2A>.  
  
   
  
## Examples  
 В этом примере используются свойства `Err` объекта при формировании диалогового окна сообщения об ошибке. Обратите внимание, что происходит при `Clear` использовании метода в первую очередь: При последующем создании Visual Basic ошибки с помощью `Raise` метода Visual Basic значения по умолчанию становятся свойствами `Err` объекта.  
  
```vb  
Dim Msg As String  
' If an error occurs, construct an error message.  
On Error Resume Next   ' Defer error handling.  
Err.Clear  
Err.Raise(6)   ' Generate an "Overflow" error.  
' Check for error, then show message.  
If Err.Number <> 0 Then  
    Msg = "Error # " & Str(Err.Number) & " was generated by " _  
        & Err.Source & ControlChars.CrLf & Err.Description  
    MsgBox(Msg, MsgBoxStyle.Information, "Error")  
End If  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
    <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">Оператор On Error (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md">Оператор Try... Catch... Finally (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Ключевые слова (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic элементов библиотеки времени выполнения</related>
  </Docs>
  <Members>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="errObject.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Удаляет все значения свойств объекта <see langword="Err" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используется `Clear` для явного `Err` очистки объекта после обработки ошибки, например при использовании отложенной обработки ошибок с `On Error Resume Next`. `Clear` Метод вызывается автоматически при выполнении любой из следующих инструкций:  
  
-   Любой тип `Resume` оператора  
  
-   `Exit Sub`, `Exit Function`или `Exit Property`  
  
-   Любой `On Error` оператор  
  
-   Любой `Try...Catch...Finally` оператор  
  
    > [!NOTE]
    >  Конструкция может быть предпочтительнее `On Error GoTo` при обработке ошибок, формируемых во время доступа к другим объектам. `On Error Resume Next` Проверка `Err` после каждого взаимодействия с объектом устраняет неоднозначность того, к какому объекту был получен код: Можно убедиться, какой объект поместил код `Err.Number`ошибки, а также какой объект изначально сгенерировал ошибку (объект, указанный в `Err.Source`).  
  
   
  
## Examples  
 В этом примере используется `Err` `Clear` метод объекта для сброса числовых свойств `Err` объекта в нулевое значение и его строкового свойства в строки нулевой длины. Если не вызвать `Clear`, то во втором `MsgBox` вызове будет отображаться то же сообщение об ошибке.  
  
 [!code-vb[VbVbalrErrorHandling#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">Оператор On Error (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает выражение <see langword="String" />, содержащее строку описания, связанную с ошибкой. Чтение и запись.</summary>
        <value>Возвращает или задает выражение <see langword="String" />, содержащее строку описания, связанную с ошибкой. Чтение и запись.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Параметр `Description` свойства состоит из краткого описания ошибки. Используйте это свойство, чтобы предупредить пользователя об ошибке, которую вы не можете или не хотите выполнять. При создании пользовательской ошибки присвойте `Description` свойству краткое описание ошибки. Если свойство не заполнено и значение <xref:Microsoft.VisualBasic.ErrObject.Number%2A> свойства соответствует Visual Basic ошибке времени выполнения, то строка, возвращаемая <xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A> функцией, задается в `Description` свойстве при формировании ошибки. `Description`  
  
   
  
## Examples  
 В этом примере определяемое пользователем сообщение `Description` присваивается свойству `Err` объекта.  
  
 [!code-vb[VbVbalrErrorHandling#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public int Erl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Erl" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Erl As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Erl { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Erl : int" Usage="Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает целое число, указывающее номер строки последнего выполненного оператора.</summary>
        <value>Номер строки последней выполненной инструкции.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если Visual Basic не встречает номера строк, возвращается 0.  
  
   
  
## Examples  
 В этом примере `Erl` свойство используется для указания номера строки.  
  
```  
10:     On Error Resume Next  
20:     Err.Raise(60000)  
' Returns 20.  
30:     MsgBox(Erl())  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="GetException">
      <MemberSignature Language="C#" Value="public Exception GetException ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Exception GetException() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.GetException" />
      <MemberSignature Language="VB.NET" Value="Public Function GetException () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception ^ GetException();" />
      <MemberSignature Language="F#" Value="member this.GetException : unit -&gt; Exception" Usage="errObject.GetException " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает исключение, представляющее возникшую ошибку.</summary>
        <returns>Исключение, представляющее возникшую ошибку.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Функция доступна только `Err` из класса Object. `GetException` Он работает со `Exception` свойством `Err` объекта, чтобы отобразить возникшую ошибку.  
  
   
  
## Examples  
 Следующий код отображает сообщение, назначенное исключению в `Err` объекте:  
  
 [!code-vb[VbVbalrCatRef#66](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#66)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpContext">
      <MemberSignature Language="C#" Value="public int HelpContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HelpContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpContext As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HelpContext { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.HelpContext : int with get, set" Usage="Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение <see langword="Integer" />, содержащее идентификатор контекста для раздела в файле справки. Чтение и запись.</summary>
        <value>Возвращает или задает значение <see langword="Integer" />, содержащее идентификатор контекста для раздела в файле справки. Чтение и запись.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `HelpContext` Свойство используется для вывода контекстной справки для приложения. Если файл справки указан в `HelpFile` `HelpContext` , свойство используется для автоматического вывода указанного файла справки. Если оба `HelpFile` свойства и `HelpContext` пусты <xref:Microsoft.VisualBasic.ErrObject.Number%2A> , то проверяется значение свойства. Если значение `Number` свойства соответствует значению ошибки времени выполнения Visual Basic, то используется Visual Basic идентификатор контекста справки для ошибки. Если значение `Number` свойства не соответствует Visual Basic ошибке, отображается экран содержимого Visual Basic файла справки.  
  
> [!NOTE]
>  Чтобы обрабатывались типичные ошибки, необходимо написать подпрограммы в приложении. При программировании с помощью объекта можно использовать файл справки объекта, чтобы улучшить качество обработки ошибок, или отобразить значимое сообщение для пользователя, если ошибка не может быть восстановлена.  
  
   
  
## Examples  
 В этом примере `HelpContext` свойство `Err` объекта используется для отображения `Overflow` Visual Basic раздела справки об ошибке.  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpFile">
      <MemberSignature Language="C#" Value="public string HelpFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpFile" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HelpFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HelpFile : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает выражение <see langword="String" />, содержащее полный путь к файлу справки. Чтение и запись.</summary>
        <value>Возвращает или задает выражение <see langword="String" />, содержащее полный путь к файлу справки. Чтение и запись.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если файл справки задан `HelpFile` свойством, он автоматически вызывается, когда пользователь нажимает клавишу «Справка» (или клавишу F1) в диалоговом окне сообщения об ошибке. `HelpContext` Если свойство содержит допустимый идентификатор контекста для указанного файла, этот раздел автоматически отображается. Если параметр `HelpFile` не указан, отображается файл справки Visual Basic.  
  
> [!NOTE]
>  Чтобы обрабатывались типичные ошибки, необходимо написать подпрограммы в приложении. При программировании с помощью объекта можно использовать файл справки объекта, чтобы улучшить качество обработки ошибок, или отобразить значимое сообщение для пользователя, если ошибка не может быть восстановлена.  
  
   
  
## Examples  
 В этом примере используется `HelpFile` свойство `Err` объекта для запуска справочной системы. По умолчанию `HelpFile` свойство содержит имя файла справки Visual Basic.  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="LastDllError">
      <MemberSignature Language="C#" Value="public int LastDllError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LastDllError" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastDllError As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LastDllError { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LastDllError : int" Usage="Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает код системной ошибки, полученной при вызове библиотеки DLL.</summary>
        <value>Код системной ошибки, вызванный вызовом библиотеки динамической компоновки (DLL).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> Свойство применяется только к вызовам DLL, сделанным из кода Visual Basic. При таком вызове вызываемая функция обычно возвращает код, указывающий на успешное выполнение или ошибку, <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> и свойство заполняется. Проверьте документацию по функциям библиотеки DLL, чтобы определить возвращаемые значения, указывающие на успешное выполнение или сбой. При возвращении кода ошибки приложение Visual Basic должно сразу же проверить <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> свойство. Если свойство задано, <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> исключение не возникает.  
  
> [!NOTE]
>  Свойство защищено с помощью <xref:System.Security.Permissions.SecurityAction.LinkDemand>, что помогает предотвратить доступ к нему из ненадежного кода. <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> <xref:System.Security.Permissions.SecurityAction.LinkDemand> Однако дляразрешениятребуетсятольконепосредственный<xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A> вызывающий объект. Если код может быть вызван из частично доверенного кода, предоставление значения <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> без проверки является угрозой безопасности.  
>   
>  Важные ограничения использования <xref:System.Security.Permissions.SecurityAction.LinkDemand> элемента см. в разделе [спрос и LinkDemand](https://msdn.microsoft.com/library/1ab877f2-70f4-4e0d-8116-943999dfe8f5). Дополнительные сведения о разрешениях см <xref:System.Security.Permissions.SecurityPermission> . в разделе и [разрешения на доступ к коду](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
 Примечание. для смарт-устройств это свойство всегда возвращает ноль.  
  
   
  
## Examples  
 В следующем примере показано, как можно использовать `LastDllError` свойство после вызова функции в API Windows. Процедура принимает в окно маркер и `GetWindowRect` вызывает функцию. `PrintWindowCoordinates` `GetWindowRect`заполняет структуру данных RECT значениями длины сторон прямоугольника, которые составляют окно. При передаче недопустимого маркера возникает ошибка, и номер ошибки доступен через `LastDllError` свойство.  
  
 [!code-vb[VbVbalrErrorHandling#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#8)]  
[!code-vb[VbVbalrErrorHandling#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#9)]  
[!code-vb[VbVbalrErrorHandling#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#10)]  
  
 [!code-vb[VbVbalrErrorHandling#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Number">
      <MemberSignature Language="C#" Value="public int Number { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Number" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Number" />
      <MemberSignature Language="VB.NET" Value="Public Property Number As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Number { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Number : int with get, set" Usage="Microsoft.VisualBasic.ErrObject.Number" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает численное значение, определяющее ошибку. Чтение и запись.</summary>
        <value>Возвращает или задает численное значение, определяющее ошибку. Чтение и запись.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Все аргументы, кроме `Number` , являются необязательными. `Raise` Если пропущены необязательные аргументы, а параметры `Err` свойств объекта содержат значения, которые не были удалены, то эти значения будут служить в качестве значений для ошибки.  
  
 Поскольку объект предоставляет более широкие сведения, чем при формировании ошибок `Error` с помощью инструкции, `Raise` полезно для создания ошибок при записи модулей класса. `Err` Например, `Raise` в методе источник, создавший ошибку, может быть указан `Source` в свойстве, можно ссылаться на интерактивную справку по ошибке и т. д.  
  
 При возврате определяемой пользователем ошибки из объекта установите `Err.Number` , добавив выбранное число в качестве кода ошибки `VbObjectError` в константу. Например, используйте следующий код, чтобы вернуть число 1051 в качестве кода ошибки:  
  
 [!code-vb[VbVbalrErrorHandling#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#13)]  
  
   
  
## Examples  
 В этом примере показано типичное использование `Number` свойства в подпрограммы обработки ошибок.  
  
 [!code-vb[VbVbalrErrorHandling#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#12)]  
  
 В этом примере используется `Err` `Raise` метод объекта для создания исходной ошибки в функции, написанной на Visual Basic. Вызывающая функция может перехватить ошибку и сообщить о ней пользователю. Обратите внимание `CallingProcedure` , что процедура отличается от типа данных, которые могут быть производными `Err` от объекта, с информацией, которая `Exception` может быть производной от объекта.  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> больше 65535.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Raise">
      <MemberSignature Language="C#" Value="public void Raise (int Number, object Source = null, object Description = null, object HelpFile = null, object HelpContext = null);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Raise(int32 Number, object Source, object Description, object HelpFile, object HelpContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Raise (Number As Integer, Optional Source As Object = null, Optional Description As Object = null, Optional HelpFile As Object = null, Optional HelpContext As Object = null)" />
      <MemberSignature Language="F#" Value="member this.Raise : int * obj * obj * obj * obj -&gt; unit" Usage="errObject.Raise (Number, Source, Description, HelpFile, HelpContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Source" Type="System.Object" />
        <Parameter Name="Description" Type="System.Object" />
        <Parameter Name="HelpFile" Type="System.Object" />
        <Parameter Name="HelpContext" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Целое число типа <see langword="Long" />, определяющее тип ошибки. Ошибки Visual Basic обозначаются числами в диапазоне 0-65535; диапазон 0-512 зарезервирован для системных ошибок; диапазон 513-65535 отводится для ошибок, определяемых пользователем. При задании свойства <see langword="Number" /> для кода создания ошибки в модуле класса к константе <see langword="vbObjectError" /> необходимо добавить номер пользовательского кода ошибки. Например, чтобы создать номер ошибки 513, нужно присвоить свойству <see langword="Number" /> значение <c>vbObjectError + 513</c>.</param>
        <param name="Source">Необязательный параметр. Выражение типа <see langword="String" />, содержащее имя объекта или приложения, вызвавшего ошибку. При задании этого свойства для объекта используется формат <c>проект</c>.<c>класс</c>. Если <paramref name="Source" /> не указан, используется идентификатор процесса текущего проекта Visual Basic.</param>
        <param name="Description">Необязательный параметр. Выражение типа <see langword="String" />, описывающее ошибку. Если это значение не задано, то проверяется значение свойства <see langword="Number" />. Если данное значение может быть сопоставлено с кодом ошибки во время выполнения Visual Basic, то в качестве свойства <see langword="Error" /> используется строка, возвращаемая функцией <see langword="Description" />. Если не существует ошибки Visual Basic, соответствующей свойству <see langword="Number" />, то используется сообщение "Application-defined or object-defined error" ("Ошибка, определенная приложением или объектом").</param>
        <param name="HelpFile">Необязательный параметр. Полный путь к файлу справки, в котором может содержаться справка о данной ошибке. Если данный аргумент не указан, то используется полный путь (содержащий имя устройства, путь и имя файла) к файлу справки Visual Basic.</param>
        <param name="HelpContext">Необязательный параметр. Идентификатор контекста, определяющий для данной ошибки раздел справки в файле <paramref name="HelpFile" />. Если данный параметр опущен, то используется идентификатор контекста файла справки Visual Basic, соответствующий свойству <see langword="Number" />.</param>
        <summary>Генерирует ошибку во время выполнения, может использоваться вместо оператора <see langword="Error" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Все аргументы, кроме `Number` , являются необязательными. `Raise` Если пропущены необязательные аргументы, а параметры `Err` свойств объекта содержат значения, которые не были удалены, то эти значения будут служить в качестве значений для ошибки.  
  
 Поскольку объект предоставляет более широкие сведения, чем при формировании ошибок `Error` с помощью инструкции, `Raise` полезно для создания ошибок при записи модулей класса. `Err` Например, `Raise` в методе источник, создавший ошибку, может быть указан `Source` в свойстве, можно ссылаться на интерактивную справку по ошибке и т. д.  
  
   
  
## Examples  
 В этом примере используется `Err` `Raise` метод объекта для создания ошибки в функции, написанной на Visual Basic. Вызывающая функция может перехватить ошибку и сообщить ее пользователю с помощью окна сообщения.  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/error-statement.md">Оператор Error</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">Оператор On Error (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает выражение <see langword="String" />, определяющее имя объекта или приложения, вызвавшего ошибку. Чтение и запись.</summary>
        <value>Возвращает или задает выражение <see langword="String" />, определяющее имя объекта или приложения, вызвавшего ошибку. Чтение и запись.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Source` Свойство`String` задает выражение, представляющее объект, вызвавший ошибку; выражение обычно является именем класса или идентификатором процесса объекта. `Source` Используйте свойство для предоставления сведений, если коду не удается выполнить обработку ошибки, сформированной в объекте, к которому осуществляется доступ. Например, если вы обращаетесь к Microsoft Excel и создаете `Division by zero` ошибку, Microsoft Excel устанавливает `Err.Number` для этой ошибки код ошибки и присваивает свойству `Source` значение "Excel. Application".  
  
 Когда приложение создает ошибку из кода, `Source` это программный идентификатор приложения. Внутри класса должен содержать `Source` имя, имеющее *проект*формы. *класс*. При возникновении непредвиденной ошибки в коде `Source` свойство заполняется автоматически. Для ошибок в модуле `Source` содержит имя проекта.  
  
   
  
## Examples  
 В этом примере показано использование `Source` свойства в обычной процедуре обработки ошибок. При `Class1`возникновении ошибки из строка `"Class1"` присваивается `Source` свойству `Err` объекта. Эта строка затем отображается в информативном сообщении с указанием источника и номера ошибки.  
  
 [!code-vb[VbVbalrErrorHandling#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">Оператор On Error (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>