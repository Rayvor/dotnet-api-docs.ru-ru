<Type Name="Information" FullName="Microsoft.VisualBasic.Information">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8ae76229b66a7a71d521a64a406df63f7e7cf230" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69317489" /></Metadata><TypeSignature Language="C#" Value="public sealed class Information" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Information extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Information" />
  <TypeSignature Language="VB.NET" Value="Public Module Information" />
  <TypeSignature Language="C++ CLI" Value="public ref class Information sealed" />
  <TypeSignature Language="F#" Value="type Information = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>В модуле <see langword="Information" /> содержатся процедуры, используемые для возврата, тестирования и проверки информации.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот модуль поддерживает ключевые слова языка Visual Basic и члены библиотеки времени выполнения, предоставляющие сведения об ошибках, проверку данных, определение границ массива и получение сведений о типах данных и цветах.  
  
   
  
## Examples  
 В следующем примере `VbTypeName` функция используется для возврата имен типов данных для нескольких переменных.  
  
```vb  
Dim sysDateName As String = "System.DateTime"  
Dim sysShortName As String = "Int16"  
Dim sysBadName As String = "Nonsense"  
Dim testVbName As String  
testVbName = VbTypeName(sysDateName)   
' Returns "Date".  
testVbName = VbTypeName(sysShortName)   
' Returns "Short".  
testVbName = VbTypeName(sysBadName)   
' Returns Nothing.  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/information-and-interaction-summary.md">Сводка по сведениям и взаимодействию</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/data-types-summary.md">Data Types Summary</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/declarations-and-constants-summary.md">Сводка по объявлениям и константам</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Ключевые слова (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic элементов библиотеки времени выполнения</related>
  </Docs>
  <Members>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public static int Erl ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Erl() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Erl" />
      <MemberSignature Language="VB.NET" Value="Public Function Erl () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Erl();" />
      <MemberSignature Language="F#" Value="static member Erl : unit -&gt; int" Usage="Microsoft.VisualBasic.Information.Erl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает целое число, указывающее номер строки последнего выполненного оператора. Только для чтения.</summary>
        <returns>Возвращает целое число, указывающее номер строки последнего выполненного оператора. Только для чтения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если Visual Basic не встречает номера строк, возвращается 0.  
  
   
  
## Examples  
 В этом примере `Erl` свойство используется для указания номера строки.  
  
 [!code-vb[VbVbalrErrorHandling#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Err">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.ErrObject Err ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.ErrObject Err() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Err" />
      <MemberSignature Language="VB.NET" Value="Public Function Err () As ErrObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::ErrObject ^ Err();" />
      <MemberSignature Language="F#" Value="static member Err : unit -&gt; Microsoft.VisualBasic.ErrObject" Usage="Microsoft.VisualBasic.Information.Err " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ErrObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Содержит сведения об ошибках во время выполнения.</summary>
        <returns>Содержит сведения об ошибках во время выполнения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойства `Err` объекта задаются генератором ошибок, Visual Basic, объектом или программистом.  
  
 При возникновении ошибки во время выполнения свойства `Err` объекта заполняются сведениями, которые однозначно идентифицируют ошибку и могут быть использованы для ее устранения. Чтобы создать ошибку времени выполнения в коде, используйте `Raise` метод.  
  
 `Resume Next` `Exit Property` `Exit Function` `Exit Sub`Свойства объекта сбрасываются до нуля или строки нулевой длины ("") после оператора,, или в подпрограммы обработки ошибок. `Err` Использование любой формы `Resume` оператора за пределами подпрограммы обработки ошибок не приведет к `Err` сбросу свойств объекта. Для явного сброса `Err`можно `Clear` использовать метод.  
  
 Используйте метод вместо `Error` инструкции для создания ошибок времени выполнения для системных ошибок и модулей классов. `Raise` Решение о том, следует ли использовать `Raise` метод в другом коде, зависит от полноты информации, которую вы хотите вернуть.  
  
 `Err` Объект является внутренним объектом с глобальной областью видимости. Поэтому не нужно создавать его экземпляр в коде.  
  
   
  
## Examples  
 В этом примере используются свойства `Err` объекта при формировании диалогового окна сообщения об ошибке. Обратите внимание, что если `Clear` сначала используется метод, то при возникновении ошибки Visual Basic `Raise` с методом Visual Basic значения по умолчанию `Err` становятся свойствами объекта.  
  
 [!code-vb[VbVbalrErrorHandling#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/error-statement.md">Оператор Error</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">Оператор On Error (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/exit-statement.md">Оператор Exit (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/resume-statement.md">Оператор Resume</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/error-messages/index.md">Сообщения об ошибке (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md">Оператор Try... Catch... Finally (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public static bool IsArray (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsArray(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsArray (VarName As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsArray(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member IsArray : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsArray VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">Обязательный. Переменная <see langword="Object" />.</param>
        <summary>Возвращает значение типа <see langword="Boolean" />, показывающее, указывает ли переменная на массив.</summary>
        <returns>Возвращает значение типа <see langword="Boolean" />, показывающее, указывает ли переменная на массив.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsArray`Возвращает `True` значение, если переменная указывает на массив; в противном случае `False`возвращается значение. `IsArray`особенно полезен для объектов, которые могут содержать массивы.  
  
   
  
## Examples  
 В этом примере `IsArray` функция используется для проверки того, ссылаются ли несколько переменных на массив.  
  
 [!code-vb[VbVbalrFunctions#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/arrays/index.md">Массивы в Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="IsDate">
      <MemberSignature Language="C#" Value="public static bool IsDate (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDate(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDate (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDate(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDate : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDate Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Обязательный. Выражение <see langword="Object" />.</param>
        <summary>Возвращает значение <see langword="Boolean" />, показывающее, представляет ли выражение допустимое значение <see langword="Date" />.</summary>
        <returns>Возвращает значение <see langword="Boolean" />, показывающее, представляет ли выражение допустимое значение <see langword="Date" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsDate`Возвращает `True` , `Expression` если имеет `False`тип данных или может быть преобразован в него; в противном случае возвращается значение. <xref:System.DateTime>  
  
 Тип <xref:System.DateTime> данных содержит как значение даты, так и значение времени. `IsDate`Возвращает `True` значение `Expression` , если представляет допустимую дату, допустимое время или допустимую дату и время.  
  
   
  
## Examples  
 В следующем примере `IsDate` функция используется для определения того, представляют ли несколько переменных <xref:System.DateTime> допустимые значения.  
  
 [!code-vb[VbVbalrFunctions#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#35)]  
  
 В предыдущем примере `IsDate` возвращает `True` для первых четырех вызовов и `False` для последнего вызова.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDBNull">
      <MemberSignature Language="C#" Value="public static bool IsDBNull (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDBNull(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDBNull (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDBNull(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDBNull : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDBNull Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Обязательный. Выражение <see langword="Object" />.</param>
        <summary>Возвращает значение <see langword="Boolean" />, показывающее, относится ли выражение к классу <see cref="T:System.DBNull" />.</summary>
        <returns>Возвращает значение <see langword="Boolean" />, показывающее, относится ли выражение к классу <see cref="T:System.DBNull" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsDBNull`Возвращает `True` , <xref:System.DBNull> `Expression` `False`если тип данных вычисляется как тип; в противном случае возвращает. `IsDBNull`  
  
 <xref:System.DBNull?displayProperty=nameWithType> Значение указывает `Object` , что представляет отсутствующие или несуществующие данные. `DBNull`не совпадает с `Nothing`, что означает, что переменная еще не инициализирована. `DBNull`также не совпадает со строкой нулевой длины (`""`), которую иногда называют пустой строкой.  
  
   
  
## Examples  
 В этом примере `IsDBNull` функция используется для определения, имеет `DBNull`ли переменная значение.  
  
 [!code-vb[VbVbalrFunctions#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#36)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DBNull" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public static bool IsError (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsError(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsError(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsError : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsError Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Обязательный. Выражение <see langword="Object" />.</param>
        <summary>Возвращает значение типа <see langword="Boolean" />, указывающее, является ли выражение типом исключения.</summary>
        <returns>Возвращает значение типа <see langword="Boolean" />, указывающее, является ли выражение типом исключения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsError`Возвращает `True` `Object` ,если<xref:System> выражение представляет переменную, производную от классавпространствеимен.<xref:System.Exception>  
  
 Исключение, производное от <xref:System.Exception?displayProperty=nameWithType> , может быть перехвачено `Try...Catch...Finally` инструкциями.  
  
   
  
## Examples  
 В следующем примере `IsError` функция используется для проверки того, представляет ли выражение Системное исключение.  
  
 [!code-vb[VbVbalrFunctions#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNothing">
      <MemberSignature Language="C#" Value="public static bool IsNothing (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNothing(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNothing (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNothing(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNothing : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNothing Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Обязательный. Выражение <see langword="Object" />.</param>
        <summary>Возвращает значение <see langword="Boolean" />, показывающее отсутствует ли для выражения назначенный объект.</summary>
        <returns>Возвращает значение <see langword="Boolean" />, показывающее отсутствует ли для выражения назначенный объект.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsNothing`Возвращает `True` , если выражение представляет объектную переменную, которой не назначен объект, в противном случае возвращается значение `False`.  
  
 `IsNothing`предназначен для работы со ссылочными типами. Тип значения не может содержать значение [Nothing](~/docs/visual-basic/language-reference/nothing.md) и при назначении `Nothing` ему возвращается значение по умолчанию. Если указать тип значения в `Expression`, `IsNothing` всегда возвращает `False`.  
  
   
  
## Examples  
 В следующем примере `IsNothing` функция используется для определения, связана ли объектная переменная с каким-либо экземпляром объекта.  
  
 [!code-vb[VbVbalrFunctions#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md">Value Types and Reference Types</related>
      </Docs>
    </Member>
    <Member MemberName="IsNumeric">
      <MemberSignature Language="C#" Value="public static bool IsNumeric (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNumeric(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumeric (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumeric(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNumeric : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNumeric Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Обязательный. Выражение <see langword="Object" />.</param>
        <summary>Возвращает значение типа <see langword="Boolean" />, указывающее, может ли выражение обрабатываться как число.</summary>
        <returns>Возвращает значение типа <see langword="Boolean" />, указывающее, может ли выражение обрабатываться как число.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsNumeric`Возвращает `True` , если `Expression` тип данных `Byte` `Decimal` —`Double` ,,`UInteger` ,, ,`SByte`,, ,`Short`, `Long` `Boolean` `Integer` `Single` , `ULong`или .`UShort` Он также возвращает `True` `Char`, `Expression` если имеет значение `String`, или `Object` , которое может быть успешно преобразовано в число. `Expression`может содержать нечисловые символы. `IsNumeric`Возвращает `True` значение `Expression` , если — строка, которая содержит допустимое шестнадцатеричное или восьмеричное число. `IsNumeric`также возвращает `True` значение `Expression` , если содержит допустимое числовое выражение, которое начинается с символа + или-или содержит запятые.  
  
 `IsNumeric`Возвращает `False` , `Expression` если имеет тип `Date`данных. Он возвращает `False` `Char`, `Expression` если является, `String` или`Object` не может быть успешно преобразован в число.  
  
   
  
## Examples  
 В следующем примере `IsNumeric` функция используется для определения, может ли содержимое переменной оцениваться как число.  
  
 [!code-vb[VbVbalrFunctions#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#39)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public static bool IsReference (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsReference(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReference (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsReference(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsReference : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsReference Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Обязательный. Выражение <see langword="Object" />.</param>
        <summary>Возвращает значение <see langword="Boolean" />, показывающее, относится ли выражение к ссылочному типу.</summary>
        <returns>Возвращает значение <see langword="Boolean" />, показывающее, относится ли выражение к ссылочному типу.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsReference`Возвращает `True` значение `Expression` , если представляет ссылочный тип, например экземпляр класса, `String` тип или массив любого типа; в противном случае возвращается `False`значение.  
  
 Ссылочный тип содержит указатель на данные, хранящиеся в любом расположении в памяти. Тип значения содержит собственные данные.  
  
   
  
## Examples  
 В этом примере `IsReference` функция используется для проверки того, ссылаются ли несколько переменных на ссылочные типы.  
  
 [!code-vb[VbVbalrFunctions#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#40)]  
  
 В предыдущем примере первые три `IsReference` возвращаемых вызова возвращают. `True` Последний вызов возвращает `False`, поскольку `Integer` является типом значения, а не ссылочным типом.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md">Value Types and Reference Types</related>
      </Docs>
    </Member>
    <Member MemberName="LBound">
      <MemberSignature Language="C#" Value="public static int LBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 LBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member LBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.LBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">Обязательный. Массив данных любого типа. Массив, в котором осуществляется поиск минимального индекса измерения.</param>
        <param name="Rank">Необязательный параметр. <see langword="Integer" />. Измерение, для которого возвращается минимальный индекс. Используйте 1 для первого измерения, 2 — для второго и т. д. Если параметр <paramref name="Rank" /> опущен, используется значение 1.</param>
        <summary>Возвращает наименьший доступный индекс для указанного измерения массива.</summary>
        <returns><see langword="Integer" />. Наименьшее значение, которое может содержать нижний индекс для указанного измерения. После инициализации массива <paramref name="Array" /> метод <see langword="LBound" /> всегда возвращает значение 0, даже если массив не содержит элементов (например, является строкой нулевой длины). Если параметр <paramref name="Array" /> равен <see langword="Nothing" />, <see langword="LBound" /> вызывает исключение <see cref="T:System.ArgumentNullException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Поскольку значения индексов массива начинаются с 0, минимальный доступный индекс для любой размерности всегда равен 0.  
  
 Для массива со следующими измерениями возвращает значения `LBound` , приведенные в следующей таблице:  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|Вызов функции LBound|Возвращаемое значение|  
|--------------------|------------------|  
|`LBound(a, 1)`|0|  
|`LBound(a, 2)`|0|  
|`LBound(a, 3)`|0|  
  
   
  
## Examples  
 В следующем примере `LBound` функция используется для определения наименьшего доступного индекса для указанного измерения массива.  
  
 [!code-vb[VbVbalrFunctions#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Array" /> — <see langword="Nothing" />.</exception>
        <exception cref="T:System.RankException">Параметр <paramref name="Rank" /> меньше 1 или <paramref name="Rank" /> превышает ранг <paramref name="Array" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md">Оператор Dim (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/redim-statement.md">Оператор ReDim (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="QBColor">
      <MemberSignature Language="C#" Value="public static int QBColor (int Color);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 QBColor(int32 Color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function QBColor (Color As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int QBColor(int Color);" />
      <MemberSignature Language="F#" Value="static member QBColor : int -&gt; int" Usage="Microsoft.VisualBasic.Information.QBColor Color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Color" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Color">Обязательный. Целое число от 0 до 15.</param>
        <summary>Возвращает значение типа <see langword="Integer" />, представляющее RGB-код цвета, соответствующего указанному номеру цвета.</summary>
        <returns>Возвращает значение типа <see langword="Integer" />, представляющее RGB-код цвета, соответствующего указанному номеру цвета.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Начиная с наименее значимого байта, возвращаемое значение задает красный, зеленый и синий значения, используемые для задания соответствующего цвета в системе RGB, используемой языком Visual Basic.  
  
 `Color` Аргумент имеет эти параметры.  
  
|Число|Цвет|Число|Цвет|  
|------------|-----------|------------|-----------|  
|0|Черный|8|Серый|  
|1|Синий|9|Светло-синий|  
|2|Зеленый|10|Светло-зеленый|  
|3|Цвет|11|Светло-голубой|  
|4|Красный|12|Светло-красный|  
|5|Цвет|13|Светло-пурпурный|  
|6|Желтый|14|Светло-желтый|  
|7|Белый|15|Светлое белое|  
  
   
  
## Examples  
 В этом примере `QBColor` функция используется для изменения цвета, `colorInteger`указанного в. `QBColor`принимает целочисленные значения от 0 до 15.  
  
 [!code-vb[VbVbalrCatRef#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="Color" /> находится вне диапазона от 0 до 15 включительно.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RGB">
      <MemberSignature Language="C#" Value="public static int RGB (int Red, int Green, int Blue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 RGB(int32 Red, int32 Green, int32 Blue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RGB (Red As Integer, Green As Integer, Blue As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int RGB(int Red, int Green, int Blue);" />
      <MemberSignature Language="F#" Value="static member RGB : int * int * int -&gt; int" Usage="Microsoft.VisualBasic.Information.RGB (Red, Green, Blue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Red" Type="System.Int32" />
        <Parameter Name="Green" Type="System.Int32" />
        <Parameter Name="Blue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Red">Обязательный. Значение типа <see langword="Integer" /> в диапазоне 0–255 включительно, представляющее интенсивность красного компонента цвета.</param>
        <param name="Green">Обязательный. Значение типа <see langword="Integer" /> в диапазоне 0–255 включительно, представляющее интенсивность зеленого компонента цвета.</param>
        <param name="Blue">Обязательный. Значение типа <see langword="Integer" /> в диапазоне 0–255 включительно, представляющее интенсивность синего компонента цвета.</param>
        <summary>Возвращает значение типа <see langword="Integer" />, представляющее RGB-значение цвета, состоящее из набора красного, зеленого и синего компонентов цвета.</summary>
        <returns>Возвращает значение типа <see langword="Integer" />, представляющее RGB-значение цвета, состоящее из набора красного, зеленого и синего компонентов цвета.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Методы и свойства приложения, принимающие спецификацию цвета, предполагают, что спецификация является числом, представляющим значение цвета RGB. Значение цвета RGB определяет относительную интенсивность красного, зеленого и синего цветов, что приводит к отображению определенного цвета.  
  
 Если значение любого аргумента в `RGB` больше 255, то используется 255.  
  
 В следующей таблице перечислены некоторые стандартные цвета и значения красного, зеленого и синего, которые они включают.  
  
|Цвет|Красное значение|Зеленое значение|Синее значение|  
|-----------|---------------|-----------------|----------------|  
|Черный|0|0|0|  
|Синий|0|0|255|  
|Зеленый|0|255|0|  
|Цвет|0|255|255|  
|Красный|255|0|0|  
|Цвет|255|0|255|  
|Желтый|255|255|0|  
|Белый|255|255|255|  
  
   
  
## Examples  
 В этом примере показано, `RGB` как функция используется для возврата целого числа, `RGB` представляющего значение цвета.  
  
 [!code-vb[VbVbalrCatRef#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Green" />, <paramref name="Blue" /> или <paramref name="Red" /> находятся вне диапазона от 0 до 255 включительно.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SystemTypeName">
      <MemberSignature Language="C#" Value="public static string SystemTypeName (string VbName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string SystemTypeName(string VbName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SystemTypeName (VbName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ SystemTypeName(System::String ^ VbName);" />
      <MemberSignature Language="F#" Value="static member SystemTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.SystemTypeName VbName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VbName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="VbName">Обязательный. Переменная типа <see langword="String" />, содержащая имя типа Visual Basic.</param>
        <summary>Возвращает значение типа <see langword="String" />, содержащее имя системного типа данных переменной.</summary>
        <returns>Возвращает значение типа <see langword="String" />, содержащее имя системного типа данных переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `SystemTypeName`Возвращает полное имя типа среды CLR, соответствующее имени типа Visual Basic. Например, если `VbName` содержит "Date", `SystemTypeName` функция возвращает "System. DateTime". Если `SystemTypeName` не распознает `VbName`значение, возвращается `Nothing` (а не строка Nothing).  
  
   
  
## Examples  
 В следующем примере `SystemTypeName` функция используется для возврата имен типов данных для нескольких переменных.  
  
 [!code-vb[VbVbalrFunctions#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#49)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public static string TypeName (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string TypeName(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TypeName (VarName As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ TypeName(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member TypeName : obj -&gt; string" Usage="Microsoft.VisualBasic.Information.TypeName VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">Обязательный. Переменная <see langword="Object" />. Если <see langword="Option Strict" /> имеет значение <see langword="Off" />, разрешается передача переменной с любым типом данных, за исключением структуры.</param>
        <summary>Возвращает значение типа <see langword="String" />, содержащее сведения о типе данных переменной.</summary>
        <returns>Возвращает значение типа <see langword="String" />, содержащее сведения о типе данных переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В следующей таблице приведены `String` значения, возвращаемые функцией `TypeName` для другого содержимого `VarName`.  
  
|`VarName`содержимое|Возвращаемая строка|  
|------------------------|---------------------|  
|16- `True` разрядный `False` или тип значения|Логическая|  
|8-разрядный двоичный тип значения|Двухбайтовых|  
|16-разрядный символьный тип значения|Типа|  
|64-разрядный тип значения даты и времени|Дата|  
|Ссылочный тип, указывающий на отсутствующие или несуществующие данные|DBNull|  
|128-разрядный тип числового значения с фиксированной запятой|Десятич|  
|64-разрядный тип числового значения с плавающей запятой|Дважды|  
|32-разрядный целочисленный тип значения|Цело|  
|Ссылочный тип, указывающий на неспециализированный объект|Объектами|  
|Ссылочный тип, указывающий на специализированный объект, созданный из класса *objectClass*|"*objectClass*"|  
|64-разрядный целочисленный тип значения|Поддерживаем|  
|Ссылочный тип без объекта, который сейчас назначен ему|Возмож|  
|8-разрядный целочисленный тип значения со знаком|SByte|  
|16-разрядный целочисленный тип значения|Промежуток|  
|32-разрядный тип числового значения с плавающей запятой|Один|  
|Ссылочный тип, указывающий на строку из 16-разрядных символов|Строка|  
|32-разрядный тип целочисленного значения без знака|UInteger|  
|64-разрядный тип целочисленного значения без знака|ULong|  
|16-разрядный целочисленный тип значений без знака|UShort|  
  
 Если `VarName` является массивом, возвращаемая строка может быть любой строкой в предыдущей таблице с добавленными пустыми скобками. Например, если `VarName` указывает на массив целых чисел, `TypeName` возвращает «Integer ()».  
  
 Если `TypeName` метод возвращает имя ссылочного типа, например класса, он возвращает только само имя, а не полное имя. Например, если `VarName` указывает на объект класса <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>, `TypeName` возвращает «паперсаурце». Обратите внимание, что если переменная объявлена как имеющая определенный тип класса, но ей не назначен объект, `TypeName` функция возвращает значение Nothing.  
  
   
  
## Examples  
 В следующем примере `TypeName` функция используется для возврата сведений о типе данных о нескольких переменных.  
  
 [!code-vb[VbVbalrFunctions#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="UBound">
      <MemberSignature Language="C#" Value="public static int UBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 UBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member UBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.UBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">Обязательный. Массив данных любого типа. Массив, в котором осуществляется поиск наибольшего индекса измерения.</param>
        <param name="Rank">Необязательный параметр. <see langword="Integer" />. Измерение, для которого возвращается максимальный индекс. Используйте 1 для первого измерения, 2 — для второго и т. д. Если параметр <paramref name="Rank" /> опущен, используется значение 1.</param>
        <summary>Возвращает наибольший доступный индекс для указанной размерности массива.</summary>
        <returns><see langword="Integer" />. Может содержать самое большое значение нижнего индекса для указанного измерения. Если массив <paramref name="Array" /> содержит ровно один элемент, метод <see langword="UBound" /> возвращает значение 0. Если массив <paramref name="Array" /> не содержит элементов (например, является строкой нулевой длины), метод <see langword="UBound" /> возвращает значение -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Так как индексы массива начинаются с 0, длина измерения больше, чем максимальный доступный индекс для этого измерения.  
  
 Для массива со следующими измерениями возвращает значения `UBound` , приведенные в следующей таблице:  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|Вызов функции UBound|Возвращаемое значение|  
|--------------------|------------------|  
|`UBound(a, 1)`|100|  
|`UBound(a, 2)`|5|  
|`UBound(a, 3)`|4|  
  
 Можно использовать `UBound` для определения общего количества элементов в массиве, но необходимо скорректировать возвращаемое значение, чтобы учесть тот факт, что индексы начинаются с 0. В следующем примере вычисляется общий размер массива `a` в предыдущем примере:  
  
```vb  
Dim total As Integer  
total = (UBound(A, 1) + 1) * (UBound(A, 2) + 1) * (UBound(A, 3) + 1)  
```  
  
 Значение, вычисленное `total` для, — 3030, то есть 101 * 6 * 5.  
  
   
  
## Examples  
 В следующем примере `UBound` функция используется для определения наибольшего доступного индекса для указанного измерения массива.  
  
 [!code-vb[VbVbalrFunctions#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Array" /> — <see langword="Nothing" />.</exception>
        <exception cref="T:System.RankException">Параметр <paramref name="Rank" /> меньше 1 или <paramref name="Rank" /> превышает ранг <paramref name="Array" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md">Оператор Dim (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/redim-statement.md">Оператор ReDim (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="VarType">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.VariantType VarType (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.VariantType VarType(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarType (VarName As Object) As VariantType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::VariantType VarType(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member VarType : obj -&gt; Microsoft.VisualBasic.VariantType" Usage="Microsoft.VisualBasic.Information.VarType VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">Обязательный. Переменная <see langword="Object" />. Если <see langword="Option Strict" /> имеет значение <see langword="Off" />, разрешается передача переменной с любым типом данных, за исключением структуры.</param>
        <summary>Возвращает значение типа <see langword="Integer" />, содержащее классификацию типа данных переменной.</summary>
        <returns>Возвращает значение типа <see langword="Integer" />, содержащее классификацию типа данных переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Целочисленное значение, возвращаемое, `VarType` является членом. <xref:Microsoft.VisualBasic.VariantType>  
  
 В следующей таблице приведены значения, возвращаемые `VarType` в, в особых `VarName`случаях.  
  
|Тип данных, представленный`VarName`|Значение, возвращаемое`VarType`|  
|----------------------------------------|---------------------------------|  
|[Nothing](~/docs/visual-basic/language-reference/nothing.md)|`VariantType.Object`|  
|<xref:System.DBNull>|`VariantType.Null`|  
|Перечисление|Базовый тип данных (`SByte` `Byte` `UShort` ,,`Integer`,, ,`UInteger` ,`ULong`или) `Short` `Long`|  
|Массив|Побитовое или для типа элемента массива и`VariantType.Array`|  
|Массив массивов|Побитовое `VariantType.Object` или из и`VariantType.Array`|  
|Structure (<xref:System.ValueType?displayProperty=nameWithType>)|`VariantType.UserDefinedType`|  
|<xref:System.Exception>|`VariantType.Error`|  
|Неизвестно|`VariantType.Object`|  
  
   
  
## Examples  
 В следующем примере `VarType` функция используется для возврата сведений о классификации типов данных о нескольких переменных.  
  
 [!code-vb[VbVbalrFunctions#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="VbTypeName">
      <MemberSignature Language="C#" Value="public static string VbTypeName (string UrtName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string VbTypeName(string UrtName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function VbTypeName (UrtName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VbTypeName(System::String ^ UrtName);" />
      <MemberSignature Language="F#" Value="static member VbTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.VbTypeName UrtName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="UrtName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="UrtName">Обязательный. Переменная типа <see langword="String" />, содержащая имя типа, используемое средой CLR.</param>
        <summary>Возвращает значение типа <see langword="String" />, содержащее имя типа данных Visual Basic для переменной.</summary>
        <returns>Возвращает значение типа <see langword="String" />, содержащее имя типа данных Visual Basic для переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `VbTypeName`Возвращает имя типа Visual Basic, соответствующее имени типа среды CLR. Например, если `UrtName` содержит "Int32" или "System. Int32", `VbTypeName` возвращает "integer". Если `VbTypeName` не распознает `UrtName`значение, возвращается `Nothing` (а не строка Nothing).  
  
 Имя типа в `UrtName` может быть получено из различных источников, например <xref:System.Reflection.MemberInfo.Name%2A> из свойства <xref:System.Type> в <xref:System.Reflection.MemberInfo> массиве класса.  
  
   
  
## Examples  
 В следующем примере `VbTypeName` функция используется для возврата имен типов данных для нескольких переменных.  
  
 [!code-vb[VbVbalrFunctions#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>
