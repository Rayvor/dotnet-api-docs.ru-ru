<Type Name="Interaction" FullName="Microsoft.VisualBasic.Interaction">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3db2ebd669db6d0e1f12be28a90e1a8e5a863ed0" /><Meta Name="ms.sourcegitcommit" Value="74239f3977d28923e5020663db2c4e91601bea79" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="07/24/2019" /><Meta Name="ms.locfileid" Value="68437533" /></Metadata><TypeSignature Language="C#" Value="public sealed class Interaction" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Interaction extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Interaction" />
  <TypeSignature Language="VB.NET" Value="Public Module Interaction" />
  <TypeSignature Language="C++ CLI" Value="public ref class Interaction sealed" />
  <TypeSignature Language="F#" Value="type Interaction = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>В модуле <see langword="Interaction" /> содержатся процедуры, используемые для взаимодействия с объектами, приложениями и системами.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот модуль поддерживает ключевые слова языка Visual Basic и элементы библиотеки времени выполнения, которые запускают другие программы, вызывают метод или свойство, выдают звуковой сигнал от компьютера, предоставляют строку командной строки, манипулируя объектами COM и диалоговыми окнами управления.  
  
## Examples  
 В следующем примере `Shell` функция используется для запуска приложения, указанного пользователем. При <xref:Microsoft.VisualBasic.AppWinStyle.NormalFocus?displayProperty=nameWithType> указании в качестве второго аргумента приложение открывается в нормальном размере и передается фокусу.  
  
```vb  
Dim procID As Integer  
' Run calculator.  
procID = Shell("C:\Windows\system32\calc.exe", AppWinStyle.NormalFocus)  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/information-and-interaction-summary.md">Сводка по сведениям и взаимодействию</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Ключевые слова (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic элементов библиотеки времени выполнения</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="AppActivate">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Активирует приложение, которое уже выполняется.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppActivate">
      <MemberSignature Language="C#" Value="public static void AppActivate (int ProcessId);" />
      <MemberSignature Language="ILAsm" Value=".method public static void AppActivate(int32 ProcessId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.AppActivate(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppActivate (ProcessId As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AppActivate(int ProcessId);" />
      <MemberSignature Language="F#" Value="static member AppActivate : int -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.AppActivate ProcessId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ProcessId" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="ProcessId">Значение типа <see langword="Integer" />, задающее номер идентификатора процесса Win32, назначенного процессу. Можно использовать идентификатор, который возвращает <see cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" />, если он не равен нулю.</param>
        <summary>Активирует приложение, которое уже выполняется.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используется `AppActivate` для переноса активного окна приложения в фокус. Возможно, у вас нет маркера или ссылки на активное окно, или даже не известно, какое окно активно в данный момент. В этом случае нельзя использовать <xref:System.Windows.Forms.Control.Focus%2A> метод.  
  
 `AppActivate` Функция изменяет фокус на именованное приложение или окно, но не влияет на его разворачивание или уменьшение. Фокус перемещается из окна активированного приложения, когда пользователь выполняет определенное действие для изменения фокуса или закрытия окна. `Shell` Функцию можно использовать для запуска приложения и установки стиля окна.  
  
 При использовании `Title` `AppActivate` параметра использует сравнение без учета регистра, но в противном случае требуется точное совпадение с содержимым заголовка окна. Сначала он просматривает окна верхнего уровня, а затем через дочерние окна. Если не удается найти совпадение, создается исключение <xref:System.ArgumentException>.  
  
 Можно использовать `AppActivate` только с процессами, владеющими Windows. Большинство консольных приложений не владеет Windows, а это означает, что они не отображаются в списке процессов, выполняющих `AppActivate` Поиск. При запуске из консольного приложения система создает отдельный процесс для запуска приложения и возвращает выходные данные в процесс консоли. Следовательно, при запросе идентификатора текущего процесса вы получаете идентификатор процесса этого отдельного процесса, а не идентификатор процесса консольного приложения.  
  
 Во время `AppActivate` выполнения функция активирует любое работающее приложение с заголовком, совпадающим `Title` с идентификатором процесса, который соответствует `ProcessId`. Если точного соответствия нет, активируется любое приложение, строка заголовка которого заканчивается на `Title`. Если имеется более одного приложения с именем `Title` `AppActivate` , функция произвольно выбирает одну из них для активации.  
  
> [!NOTE]
>  Функция требует `UIPermission` на<xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows> уровне, что может повлиять на ее выполнение в ситуациях частичного доверия. `AppActivate` Дополнительные сведения см. в разделе <xref:System.Security.Permissions.UIPermission>.  
  
   
  
## Examples  
 В этом примере показаны различные способы использования `AppActivate` функции для активации окна приложения. Если процесс «Блокнот» не выполняется, в примере создается исключение <xref:System.ArgumentException>. `Shell` Процедура предполагает, что приложения находятся в указанных путях.  
  
 [!code-vb[VbVbalrCatRef#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="AppActivate">
      <MemberSignature Language="C#" Value="public static void AppActivate (string Title);" />
      <MemberSignature Language="ILAsm" Value=".method public static void AppActivate(string Title) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.AppActivate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppActivate (Title As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AppActivate(System::String ^ Title);" />
      <MemberSignature Language="F#" Value="static member AppActivate : string -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.AppActivate Title" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Title" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Title">Выражение типа <see langword="String" />, задающее заголовок для строки заголовка активируемого окна приложения. Можно использовать название, присваимое приложению при запуске.</param>
        <summary>Активирует приложение, которое уже выполняется.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используется `AppActivate` для переноса активного окна приложения в фокус. Возможно, у вас нет маркера или ссылки на активное окно, или даже не известно, какое окно активно в данный момент. В этом случае нельзя использовать <xref:System.Windows.Forms.Control.Focus%2A> метод.  
  
 `AppActivate` Функция изменяет фокус на именованное приложение или окно, но не влияет на его разворачивание или уменьшение. Фокус перемещается из окна активированного приложения, когда пользователь выполняет определенное действие для изменения фокуса или закрытия окна. `Shell` Функцию можно использовать для запуска приложения и установки стиля окна.  
  
 При использовании `Title` `AppActivate` параметра использует сравнение без учета регистра, но в противном случае требуется точное совпадение с содержимым заголовка окна. Сначала он просматривает окна верхнего уровня, а затем через дочерние окна. Если не удается найти совпадение, создается исключение <xref:System.ArgumentException>.  
  
 Можно использовать `AppActivate` только с процессами, владеющими Windows. Большинство консольных приложений не владеет Windows, а это означает, что они не отображаются в списке процессов, выполняющих `AppActivate` Поиск. При запуске из консольного приложения система создает отдельный процесс для запуска приложения и возвращает выходные данные в процесс консоли. Следовательно, при запросе идентификатора текущего процесса вы получаете идентификатор процесса этого отдельного процесса, а не идентификатор процесса консольного приложения.  
  
 Во время `AppActivate` выполнения функция активирует любое работающее приложение с заголовком, совпадающим `Title` с идентификатором процесса, который соответствует `ProcessId`. Если точного соответствия нет, активируется любое приложение, строка заголовка которого заканчивается на `Title`. Если имеется более одного приложения с именем `Title` `AppActivate` , функция произвольно выбирает одну из них для активации.  
  
> [!NOTE]
>  Функция требует `UIPermission` на<xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows> уровне, что может повлиять на ее выполнение в ситуациях частичного доверия. `AppActivate` Дополнительные сведения см. в разделе <xref:System.Security.Permissions.UIPermission>.  
  
   
  
## Examples  
 В этом примере показаны различные способы использования `AppActivate` функции для активации окна приложения. Если процесс «Блокнот» не выполняется, в примере создается исключение <xref:System.ArgumentException>. `Shell` Процедура предполагает, что приложения находятся в указанных путях.  
  
 [!code-vb[VbVbalrCatRef#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Beep">
      <MemberSignature Language="C#" Value="public static void Beep ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Beep() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Beep" />
      <MemberSignature Language="VB.NET" Value="Public Sub Beep ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Beep();" />
      <MemberSignature Language="F#" Value="static member Beep : unit -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.Beep " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Издает звуковой сигнал с помощью встроенного динамика компьютера.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Тон и длительность звукового сигнала зависят от аппаратного и системного программного обеспечения и, соответственно, от компьютеров.  
  
> [!NOTE]
>  Функция требует `UIPermission` на<xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows> уровне, что может повлиять на ее выполнение в ситуациях частичного доверия. `Beep` Для получения дополнительной информации см. <xref:System.Security.Permissions.UIPermission>.  
  
   
  
## Examples  
 В этом примере `Beep` функция используется для озвучивания сигнала на динамике компьютера.  
  
 [!code-vb[VbVbalrCatRef#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic элементов библиотеки времени выполнения</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/playing-sounds.md">Воспроизведение звуков</related>
      </Docs>
    </Member>
    <Member MemberName="CallByName">
      <MemberSignature Language="C#" Value="public static object CallByName (object ObjectRef, string ProcName, Microsoft.VisualBasic.CallType UseCallType, params object[] Args);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CallByName(object ObjectRef, string ProcName, valuetype Microsoft.VisualBasic.CallType UseCallType, object[] Args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CallByName (ObjectRef As Object, ProcName As String, UseCallType As CallType, ParamArray Args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CallByName(System::Object ^ ObjectRef, System::String ^ ProcName, Microsoft::VisualBasic::CallType UseCallType, ... cli::array &lt;System::Object ^&gt; ^ Args);" />
      <MemberSignature Language="F#" Value="static member CallByName : obj * string * Microsoft.VisualBasic.CallType * obj[] -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.CallByName (ObjectRef, ProcName, UseCallType, Args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ObjectRef" Type="System.Object" />
        <Parameter Name="ProcName" Type="System.String" />
        <Parameter Name="UseCallType" Type="Microsoft.VisualBasic.CallType" />
        <Parameter Name="Args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ObjectRef">Обязательный. <see langword="Object" />. Указатель на объект, к которому относится данное свойство или метод.</param>
        <param name="ProcName">Обязательный. <see langword="String" />. Строковое выражение, содержащее имя свойства или метода объекта.</param>
        <param name="UseCallType">Обязательный. Член перечисления типа <see cref="T:Microsoft.VisualBasic.CallType" />, представляющий тип вызываемой процедуры. Значением <see langword="CallType" /> может быть <see langword="Method" />, <see langword="Get" /> или <see langword="Set" />.</param>
        <param name="Args">Необязательный параметр. <see langword="ParamArray" />. Массив параметров, который содержит аргументы, передаваемые в вызываемый метод или свойство.</param>
        <summary>Выполняет метод объекта или устанавливает/возвращает значение свойства объекта.</summary>
        <returns>Выполняет метод объекта или устанавливает/возвращает значение свойства объекта.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CallByName` Функция используется во время выполнения для получения свойства, задания свойства или вызова метода.  
  
   
  
## Examples  
 В следующем примере первая строка `CallByName` использует для `Text` задания свойства текстового поля, вторая строка `Text` извлекает значение свойства `Move` , а третья строка вызывает метод для перемещения текстового поля.  
  
 [!code-vb[VbVbalrFunctions#99](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#99)]  
  
 [!code-vb[VbVbalrFunctions#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#20)]  
  
 В следующем примере `CallByName` функция используется для `Add` вызова методов и `Item` объекта коллекции.  
  
 [!code-vb[VbVbalrFunctions#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Недопустимое значение <paramref name="UseCallType" />; должно быть <see langword="Method" />, <see langword="Get" /> или <see langword="Set" />.</exception>
        <altmember cref="T:Microsoft.VisualBasic.CallType" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/parameter-arrays.md">Массивы параметров</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/calling-a-property-or-method-using-a-string-name.md">Вызов свойства или метода с помощью строкового имени</related>
      </Docs>
    </Member>
    <Member MemberName="Choose">
      <MemberSignature Language="C#" Value="public static object Choose (double Index, params object[] Choice);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Choose(float64 Index, object[] Choice) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose (Index As Double, ParamArray Choice As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Choose(double Index, ... cli::array &lt;System::Object ^&gt; ^ Choice);" />
      <MemberSignature Language="F#" Value="static member Choose : double * obj[] -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.Choose (Index, Choice)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Double" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Choice" Type="System.Object[]" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Index">Обязательный. <see langword="Double" />. Числовое выражение, результатом которого является значение между 1 и числом элементов, переданных в аргументе <paramref name="Choice" />.</param>
        <param name="Choice">Обязательный. Массив параметров <see langword="Object" />. Можно передать либо одну переменную, либо выражение, которое вычисляется как выражение типа <see langword="Object" />, как список переменных типа <see langword="Object" /> или список выражений, разделенных запятыми, либо как одномерный массив элементов типа <see langword="Object" />.</param>
        <summary>Выбирает и возвращает значение из списка аргументов.</summary>
        <returns>Выбирает и возвращает значение из списка аргументов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Функция возвращает член переданного списка в `Choice()` `Index`зависимости от значения. `Choose` Первый член списка выбирается, когда `Index` имеет значение 1. Последний элемент списка выбирается, когда `Index` имеет значение `UBound`(`Choice()`). Если `Index` находится за пределами `Choose` этих `Nothing`ограничений, функция возвращает.  
  
 Если `Index` не является целым числом, то перед вычислением оно округляется до ближайшего целого числа.  
  
 Можно использовать `Choose` для поиска значения в списке возможностей.  
  
> [!NOTE]
>  Выражения в списке аргументов могут включать вызовы функций. В процессе подготовки списка аргументов для вызова метод `Choose`Visual Basic компилятор вызывает каждую функцию в каждом выражении. Это означает, что нельзя полагаться на конкретную функцию, если выбрано `Index`другое выражение.  
  
   
  
## Examples  
 В этом примере `Choose` функция используется для вывода имени в ответ на индекс, переданный в процедуру `Ind` в параметре.  
  
 [!code-vb[VbVbalrFunctions#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Switch(System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/select-case-statement.md">Оператор Select...Case (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public static string Command ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Command() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Command" />
      <MemberSignature Language="VB.NET" Value="Public Function Command () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Command();" />
      <MemberSignature Language="F#" Value="static member Command : unit -&gt; string" Usage="Microsoft.VisualBasic.Interaction.Command " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает набор аргументов командной строки, которая используется для запуска Visual Basic или выполняемой программы, разработанной с помощью Visual Basic. Возможность <see langword="My" /> обеспечивает большую производительность и быстродействие, чем функция <see langword="Command" />. Для получения дополнительной информации см. <see cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />.</summary>
        <returns>Набор аргументов командной строки, которая используется для запуска Visual Basic или выполняемой программы, разработанной с помощью Visual Basic.  
  
Возможность <see langword="My" /> обеспечивает большую производительность и быстродействие, чем функция <see langword="Command" />. Для получения дополнительной информации см. <see cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 После того как аргументы будут возвращены, можно выполнить поиск общих разделителей, таких как пробелы, обратные косые черты, дефисы или кавычки, для разбиения или поиска в строке отдельных параметров.  
  
 Для приложений, разработанных с Visual Basic и скомпилированных в exe файл, `Command` функция возвращает все аргументы, которые появляются после имени приложения в командной строке, в следующей форме:. `MyApp(cmdlineargs)`  
  
   
  
## Examples  
 В этом примере `Command` функция используется для возврата аргументов командной строки в объект, содержащий массив.  
  
 [!code-vb[VbVbalrCatRef#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#58)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Environment.GetCommandLineArgs" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />
        <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic элементов библиотеки времени выполнения</related>
        <related type="Article" href="~/docs/visual-basic/reference/command-line-compiler/index.md">Компилятор командной строки Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/program-structure/structure-of-a-visual-basic-program.md">Структура программы Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public static object CreateObject (string ProgId, string ServerName = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CreateObject(string ProgId, string ServerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObject (ProgId As String, Optional ServerName As String = &quot;&quot;) As Object" />
      <MemberSignature Language="F#" Value="static member CreateObject : string * string -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.CreateObject (ProgId, ServerName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ProgId" Type="System.String" />
        <Parameter Name="ServerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ProgId">Обязательный. <see langword="String" />. Программный идентификатор создаваемого объекта.</param>
        <param name="ServerName">Необязательный параметр. <see langword="String" />. Имя сетевого сервера, на котором будет создан объект. Если параметр <paramref name="ServerName" /> равен пустой строке (""), то используется локальный компьютер.</param>
        <summary>Создает и возвращает ссылку на COM-объект. Функция <see langword="CreateObject" /> не может использоваться для создания экземпляров классов в Visual Basic, если эти классы явным образом не представлены как COM-компоненты.</summary>
        <returns>Создает и возвращает ссылку на COM-объект. Функция <see langword="CreateObject" /> не может использоваться для создания экземпляров классов в Visual Basic, если эти классы явным образом не представлены как COM-компоненты.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы создать экземпляр COM-компонента, назначьте объект, возвращаемый, `CreateObject` в переменную объекта:  
  
```vb  
Sub CreateADODB()  
   Dim adoApp As Object  
   adoApp = CreateObject("ADODB.Connection")  
End Sub  
```  
  
 Тип объектной переменной, используемой для хранения возвращаемого объекта, может повлиять на производительность приложения. Объявление объектной переменной с помощью `As Object` предложения создает переменную, которая может содержать ссылку на любой тип объекта. Однако доступ к объекту через эту переменную имеет *позднюю*привязку, то есть привязка происходит при выполнении программы. Существует множество причин избегать позднего связывания, в том числе более низкой производительности приложения.  
  
 Можно создать объектную переменную, которая приводит к ранней привязке, то есть привязке при компиляции программы. Для этого добавьте ссылку на библиотеку типов для объекта на вкладке **com** диалогового окна **Добавление ссылки** в меню **проект** . Затем объявите объектную переменную для конкретного типа объекта. В большинстве случаев более эффективно использовать `Dim` инструкцию и основную сборку взаимодействия для создания объектов, чем `CreateObject` использовать функцию.  
  
## <a name="interacting-with-unmanaged-code"></a>Взаимодействие с неуправляемым кодом  
 Еще одна ошибка заключается в том, что COM-объекты используют неуправляемый код без преимуществ среды CLR. Смешивание управляемого кода Visual Basic с неуправляемым кодом из COM является достаточной степенью сложности. При добавлении ссылки на COM-объект Visual Basic выполняет поиск основной сборки взаимодействия (PIA) для этой библиотеки; Если он найден, то он используется. Если основная сборка взаимодействия не найдена, она создает сборку взаимодействия, которая содержит локальные классы взаимодействия для каждого класса в библиотеке COM. Дополнительные сведения см. [в разделе COM-взаимодействие в .NET Framework приложениях](~/docs/visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md).  
  
 При возможности обычно следует использовать строго привязанные объекты и основные сборки взаимодействия. В приведенных ниже примерах используется `CreateObject` функция с Microsoft Office объектами только в демонстрационных целях. Однако эти объекты проще в использовании и более надежны при использовании с соответствующей основной сборкой взаимодействия.  
  
## <a name="creating-an-object-on-a-remote-computer"></a>Создание объекта на удаленном компьютере  
 Можно создать объект на удаленном сетевом компьютере, передав имя компьютера в `ServerName` аргумент `CreateObject` функции. Это имя совпадает с именем компьютера в имени общего ресурса: для общего ресурса с именем «\\\мисервер\публик `ServerName` » — «MyServer».  
  
> [!NOTE]
>  Дополнительные сведения о том, как сделать приложение доступным на удаленном сетевом компьютере, см. в документации по COM (см. раздел Microsoft Developer Network). Может потребоваться добавить раздел реестра для приложения.  
  
 Следующий код возвращает номер версии экземпляра Excel, выполняющегося на удаленном компьютере с именем `MyServer`:  
  
```vb  
Sub CreateRemoteExcelObj()  
    Dim xlApp As Object  
    ' Replace string "\\MyServer" with name of the remote computer.  
    xlApp = CreateObject("Excel.Application", "\\MyServer")  
    MsgBox(xlApp.Version)  
End Sub  
```  
  
 Если имя удаленного сервера неверно или недоступно, возникает ошибка времени выполнения.  
  
> [!NOTE]
>  Используется `CreateObject` при отсутствии текущего экземпляра объекта. Если экземпляр объекта уже выполняется, запускается новый экземпляр и создается объект указанного типа. Чтобы использовать текущий экземпляр или запустить приложение и загрузить файл, используйте `GetObject` функцию. Если объект зарегистрировался как объект с одним экземпляром, то создается только один экземпляр объекта, независимо от того, сколько раз `CreateObject` выполняется.  
  
## <a name="creating-framework-objects"></a>Создание объектов платформы  
 `CreateObject` Функцию можно использовать только для создания com-объекта. Хотя отсутствует точный эквивалентный механизм для создания объекта .NET Framework, <xref:System.Activator> <xref:System> в пространстве имен содержатся методы для создания локальных или удаленных объектов. В частности, <xref:System.Activator.CreateInstance%2A> метод <xref:System.Activator.CreateInstanceFrom%2A> или метод могут оказаться полезными.  
  
> [!IMPORTANT]
>  `CreateObject` Функции требуется разрешение на неуправляемый код, что может повлиять на его выполнение в ситуациях частичного доверия. Дополнительные сведения см. в <xref:System.Security.Permissions.SecurityPermission> разделе и [разрешения на доступ к коду](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 В следующем примере используется `CreateObject` функция для создания листа Microsoft Excel и сохранения листа в файл. Чтобы использовать этот пример, необходимо установить Excel на компьютере, где выполняется эта программа. Кроме того, необходимо добавить ссылку на библиотеку типов на вкладке **com** диалогового окна **Добавление ссылки** в меню **проект** . Имя библиотеки типов зависит от версии Excel, установленной на компьютере. Например, Библиотека типов для Microsoft Excel 2002 называется « **Библиотека объектов Microsoft Excel 10,0**».  
  
 [!code-vb[VbVbalrExcelObject#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Сервер недоступен.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Объект указанного типа не существует.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)" />
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.Activator" />
        <altmember cref="Overload:System.Activator.CreateInstance" />
        <altmember cref="Overload:System.Activator.CreateInstanceFrom" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md">Оператор Dim (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/declare-statement.md">Declare Statement</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md">COM-взаимодействие в приложениях .NET Framework</related>
        <related type="Article" href="~/docs/framework/interop/index.md">Взаимодействие с неуправляемым кодом</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteSetting">
      <MemberSignature Language="C#" Value="public static void DeleteSetting (string AppName, string Section = null, string Key = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static void DeleteSetting(string AppName, string Section, string Key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteSetting (AppName As String, Optional Section As String = null, Optional Key As String = null)" />
      <MemberSignature Language="F#" Value="static member DeleteSetting : string * string * string -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.DeleteSetting (AppName, Section, Key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Section" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Key" Type="System.String" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="AppName">Обязательный. Выражение типа <see langword="String" />, содержащее имя приложения или проекта, к которому применяется настройка раздела или параметра.</param>
        <param name="Section">Обязательный. Значение типа <see langword="String" />, содержащее имя раздела, из которого удаляется настройка параметра. Если заданы только <paramref name="AppName" /> и <paramref name="Section" />, указанный раздел удаляется вместе со всеми относящимися к нему настройками параметров.</param>
        <param name="Key">Необязательный параметр. Выражение типа <see langword="String" />, содержащее имя удаляемой настройки параметра.</param>
        <summary>Удаляет раздел или настройку параметра из записи приложения в реестре Windows. Возможность <see langword="My" /> предоставляет большую производительность и быстродействие в операциях с реестром, чем функция <see langword="DeleteSetting" />. Дополнительные сведения см. в разделе <see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если указаны все аргументы, указанный параметр удаляется. Ошибка времени выполнения возникает при попытке использовать `DeleteSetting` несуществующий раздел или параметр ключа.  
  
 `DeleteSetting`требует, чтобы пользователь вошел в систему, так как он работает `HKEY_LOCAL_USER` в разделе реестра, который неактивен до тех пор, пока пользователь не войдет в систему в интерактивном режиме.  
  
 Параметры реестра, доступ к которым осуществляется из неинтерактивного процесса (например, MTX. exe), должны храниться в `HKEY_LOCAL_MACHINE\Software\` разделах `HKEY_USER\DEFAULT\Software` реестра или.  
  
   
  
## Examples  
 В следующем примере сначала используется `SaveSetting` процедура `DeleteSetting` , чтобы сделать записи в реестре Windows `MyApp` для приложения, а затем с помощью функции удалить их. Поскольку аргумент `Key` не указан, удаляется весь `Startup` раздел, включая имя раздела и все его ключи.  
  
 [!code-vb[VbVbalrCatRef#45](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#45)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Пользователь не выполнил вход в систему.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Environ">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает строку, связанную с переменной среды операционной системы.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Environ">
      <MemberSignature Language="C#" Value="public static string Environ (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Environ(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Environ(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Environ (Expression As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Environ(int Expression);" />
      <MemberSignature Language="F#" Value="static member Environ : int -&gt; string" Usage="Microsoft.VisualBasic.Interaction.Environ Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Обязательный. Значение, которое вычисляется либо как строка, содержащая имя переменной среды, либо как целое число, соответствующее порядковому номеру строки в таблице строк среды.</param>
        <summary>Возвращает строку, связанную с переменной среды операционной системы.</summary>
        <returns>Строка, связанная с переменной среды операционной системы.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `Expression` содержит строку <xref:Microsoft.VisualBasic.Interaction.Environ%2A> , функция возвращает текст, назначенный указанной строке окружения, то есть текст, следующий за знаком равенства (=) в таблице строк окружения для этой переменной среды. Если строка в `Expression` не найдена в таблице строк окружения, то возвращается строка нулевой длины ("").  
  
 Если `Expression` аргумент содержит целое число, возвращается строка, которая занимает эту числовую точку в таблице строк окружения. В этом случае <xref:Microsoft.VisualBasic.Interaction.Environ%2A> возвращает весь текст, включая имя переменной среды. Если в указанной должности нет строки среды, <xref:Microsoft.VisualBasic.Interaction.Environ%2A> возвращает строку нулевой длины.  
  
> [!IMPORTANT]
>  <xref:Microsoft.VisualBasic.Interaction.Environ%2A> Функции требуется разрешение окружения, которое может повлиять на ее выполнение в ситуациях частичного доверия. Дополнительные сведения см. в <xref:System.Security.Permissions.SecurityPermission> разделе и [разрешения на доступ к коду](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 В этом примере <xref:Microsoft.VisualBasic.Interaction.Environ%2A> функция используется для предоставления номера записи и длины `PATH` инструкции из таблицы строки среды.  
  
 [!code-vb[VbVbalrCatRef#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Expression" /> отсутствует.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic элементов библиотеки времени выполнения</related>
      </Docs>
    </Member>
    <Member MemberName="Environ">
      <MemberSignature Language="C#" Value="public static string Environ (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Environ(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Environ(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Environ (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Environ(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Environ : string -&gt; string" Usage="Microsoft.VisualBasic.Interaction.Environ Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Обязательный. Значение, которое вычисляется либо как строка, содержащая имя переменной среды, либо как целое число, соответствующее порядковому номеру строки в таблице строк среды.</param>
        <summary>Возвращает строку, связанную с переменной среды операционной системы.</summary>
        <returns>Строка, связанная с переменной среды операционной системы.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `Expression` содержит строку <xref:Microsoft.VisualBasic.Interaction.Environ%2A> , функция возвращает текст, назначенный указанной строке окружения, то есть текст, следующий за знаком равенства (=) в таблице строк окружения для этой переменной среды. Если строка в `Expression` не найдена в таблице строк окружения, то возвращается строка нулевой длины ("").  
  
 Если `Expression` аргумент содержит целое число, возвращается строка, которая занимает эту числовую точку в таблице строк окружения. В этом случае <xref:Microsoft.VisualBasic.Interaction.Environ%2A> возвращает весь текст, включая имя переменной среды. Если в указанной должности нет строки среды, <xref:Microsoft.VisualBasic.Interaction.Environ%2A> возвращает строку нулевой длины.  
  
> [!IMPORTANT]
>  <xref:Microsoft.VisualBasic.Interaction.Environ%2A> Функции требуется разрешение окружения, которое может повлиять на ее выполнение в ситуациях частичного доверия. Дополнительные сведения см. в <xref:System.Security.Permissions.SecurityPermission> разделе и [разрешения на доступ к коду](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 В этом примере <xref:Microsoft.VisualBasic.Interaction.Environ%2A> функция используется для предоставления номера записи и длины `PATH` инструкции из таблицы строки среды.  
  
 [!code-vb[VbVbalrCatRef#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Expression" /> отсутствует.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic элементов библиотеки времени выполнения</related>
      </Docs>
    </Member>
    <Member MemberName="GetAllSettings">
      <MemberSignature Language="C#" Value="public static string[,] GetAllSettings (string AppName, string Section);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[,] GetAllSettings(string AppName, string Section) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllSettings (AppName As String, Section As String) As String(,)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^, 2&gt; ^ GetAllSettings(System::String ^ AppName, System::String ^ Section);" />
      <MemberSignature Language="F#" Value="static member GetAllSettings : string * string -&gt; string[,]" Usage="Microsoft.VisualBasic.Interaction.GetAllSettings (AppName, Section)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[,]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Section" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="AppName">Обязательный. Выражение типа <see langword="String" />, содержащее имя приложения или проекта, для которого запрашиваются настройки параметров.</param>
        <param name="Section">Обязательный. Выражение <see langword="String" />, содержащее имя раздела, параметры которого запрашиваются. Функция <see langword="GetAllSettings" /> возвращает объект, содержащий двухмерный массив строк. Строки содержат все настройки параметров в указанном разделе плюс соответствующие значения.</param>
        <summary>Возвращает список параметров разделов и соответствующих значений (первоначально созданных с помощью функции <see langword="SaveSetting" />) из записи приложения в реестре Windows. Использование возможности <see langword="My" /> предоставляет большие производительность и быстродействие в операциях файлового ввода-вывода, чем <see langword="GetAllSettings" />. Для получения дополнительной информации см. <see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />.</summary>
        <returns>Список параметров разделов и соответствующих значений (первоначально созданных с помощью функции <see langword="SaveSetting" />) из записи приложения в реестре Windows.  
  
Использование возможности <see langword="My" /> предоставляет большие производительность и быстродействие в операциях файлового ввода-вывода, чем <see langword="GetAllSettings" />. Для получения дополнительной информации см. <see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `GetAllSettings`Возвращает неинициализированное `Object` значение, `AppName` если объект `Section` или не существует.  
  
 Так как он работает в `HKEY_LOCAL_USER` разделе реестра, который неактивен до тех пор, пока пользователь не войдет в `GetAllSettings` систему в интерактивном режиме, пользователь должен войти в систему.  
  
 Параметры реестра, доступ к которым осуществляется из неинтерактивного процесса (например, MTX. exe), должны храниться в `HKEY_LOCAL_MACHINE\Software\` разделах `HKEY_USER\DEFAULT\Software` реестра или.  
  
   
  
## Examples  
 В этом примере сначала используется `SaveSetting` функция, чтобы сделать записи в реестре Windows для приложения, указанного `AppName`как, а затем `GetAllSettings` использует функцию для вывода параметров. Обратите внимание, что `Section` имена и имена приложений не `GetAllSettings`могут быть получены с помощью. Наконец, `DeleteSetting` функция удаляет записи приложения.  
  
 [!code-vb[VbVbalrCatRef#68](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Пользователь не выполнил вход в систему.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry.md">Чтение данных из реестра и запись в реестр (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public static object GetObject (string PathName = null, string Class = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static object GetObject(string PathName, string Class) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetObject (Optional PathName As String = null, Optional Class As String = null) As Object" />
      <MemberSignature Language="F#" Value="static member GetObject : string * string -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.GetObject (PathName, Class)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Class" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="PathName">Необязательный параметр. <see langword="String" />. Полный путь и имя файла, в котором содержится извлекаемый объект. Если параметр <paramref name="PathName" /> опущен, необходим параметр <paramref name="Class" />.</param>
        <param name="Class">Обязательный параметр, если отсутствует <paramref name="PathName" />. <see langword="String" />. Строка, представляющая класс объекта. Каждый аргумент <paramref name="Class" /> имеет следующие синтаксис и составляющие: 
 <c>appname</c><c>.</c><c>objecttype</c>  
  
[1|1] параметр 
[1|2] описание 
[2|1] <c>appname</c>  
  
[2|2] обязательный. <see langword="String" />. Имя приложения, предоставляющего объект.  
  
[3|1] <c>objecttype</c>  
  
[3|2] обязательный. <see langword="String" />. Тип или класс создаваемого объекта.</param>
        <summary>Возвращает ссылку на объект, предоставленную COM-компонентом.</summary>
        <returns>Ссылка на объект, предоставленная компонентом COM.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `GetObject` Используйте функцию для загрузки экземпляра COM-компонента из файла. Это показано в следующем примере.  
  
```vb  
Dim CADObject As Object  
CADObject = GetObject("C:\CAD\schema.cad")  
```  
  
 При выполнении этого кода запускается приложение, связанное с указанным `PathName` заданным, и активируется объект в указанном файле.  
  
## <a name="default-cases"></a>Варианты по умолчанию  
 Если `PathName` является строкой нулевой длины (`""`), `GetObject` возвращает новый экземпляр объекта указанного типа класса. Если аргумент опущен, `GetObject` функция возвращает текущий активный объект типа класса, указанного в `Class`. `PathName` Если объект указанного типа не существует, возникает ошибка.  
  
## <a name="accessing-a-subobject"></a>Доступ к подобъекту  
 Некоторые приложения позволяют активировать подобъект, связанный с файлом. Для этого добавьте восклицательный знак (`!`) в конец имени файла и поместите его в строку, определяющую часть файла, который необходимо активировать. Сведения о том, как создать эту строку, см. в документации для приложения, создавшего объект.  
  
 Например, в приложении для рисования может быть несколько слоев для рисунка, хранящегося в файле. Можно использовать следующий код для активации слоя внутри рисунка с именем `schema.cad`.  
  
```vb  
layerObject = GetObject("C:\CAD\schema.cad!Layer3")  
```  
  
## <a name="specifying-a-class"></a>Указание класса  
 Если объект `Class`не указан, Автоматизация определяет приложение, которое нужно запустить, и объект для активации на основе указанного имени файла. Однако некоторые файлы могут поддерживать более одного класса объекта. Например, Рисование может поддерживать три различных типа объектов: `Application` объект `Drawing` , объект и `Toolbar` объект, все из которых являются частью одного файла. Чтобы указать, какой объект в файле необходимо активировать, используйте необязательный `Class` аргумент. Это показано в следующем примере.  
  
```vb  
Dim drawObj As Object  
drawObj = GetObject("C:\Drawings\sample.drw", "Figment.Drawing")  
```  
  
 В предыдущем примере `Figment` — это имя `Drawing` приложения для рисования, которое является одним из типов объектов, которые он поддерживает.  
  
## <a name="using-the-object"></a>Использование объекта  
 После активации объекта вы ссылаетесь на него в коде, используя объявленную объектную переменную. В предыдущем примере вы обращаетесь к свойствам и методам нового объекта, используя переменную `drawObj`объекта. Это показано в следующем примере.  
  
```vb  
drawObj.Line(9, 90)  
drawObj.InsertText(9, 100, "Hello, world.")  
drawObj.SaveAs("C:\Drawings\sample.drw")  
```  
  
> [!NOTE]
>  `GetObject` Используйте функцию при наличии текущего экземпляра объекта или при необходимости создать объект с загруженным файлом. Если текущего экземпляра нет и вы не хотите, чтобы объект начинался с загруженного файла, используйте <xref:Microsoft.VisualBasic.Interaction.CreateObject%2A> функцию.  
>   
>  Если объект зарегистрировался как объект ActiveX с одним экземпляром, то создается только один экземпляр объекта, независимо от того, сколько раз `CreateObject` вызывается. При использовании объекта `GetObject` с одним экземпляром всегда возвращает тот же экземпляр при вызове с синтаксисом строки нулевой`""`длины () и `PathName` вызывает ошибку, если аргумент опущен. Нельзя использовать `GetObject` для получения ссылки на класс, созданный с помощью Visual Basic.  
  
> [!IMPORTANT]
>  `GetObject` Функции требуется разрешение на неуправляемый код, что может повлиять на его выполнение в ситуациях частичного доверия. Дополнительные сведения см. в <xref:System.Security.Permissions.SecurityPermission> разделе и [разрешения на доступ к коду](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 В следующем примере `GetObject` функция используется для получения ссылки на конкретный лист Microsoft Excel (`excelObj`). Он использует `Application` свойство листа, чтобы сделать Excel видимым, закрыть и выполнить другие действия. При использовании двух вызовов `detectExcel` API процедура ищет Excel, и, если они выполняются, вводит их в таблицу выполняемых объектов. Первый вызов метода `GetObject` вызывает ошибку, если Excel еще не запущен, что в этом примере `excelWasNotRunning` приводит к установке флага в `True`значение. Второй вызов метода для `GetObject` указания открываемого файла. Если Excel еще не запущен, второй вызов запускает его и возвращает ссылку на лист, `test.xls`представленный указанным файлом. Файл должен находиться в указанном расположении. в противном случае Visual Basic <xref:System.IO.FileNotFoundException>создает исключение. Далее в примере кода выполняется отображение как Excel, так и окна, содержащего указанный лист.  
  
 В этом примере `Option Strict Off` требуется, поскольку он использует позднее связывание, где объекты назначаются переменным типа. `Object` Можно `Option Strict On` указывать и объявлять объекты конкретных типов объектов при добавлении ссылки на библиотеку типов Excel с вкладки **com** диалогового окна **Добавление ссылки** в меню **проект** в Visual Studio.  
  
 [!code-vb[VbVbalrExcelObject#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#2)]  
  
 [!code-vb[VbVbalrExcelObject#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#4)]  
  
 [!code-vb[VbVbalrExcelObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#5)]  
  
 При вызове `getExcel` функции выполняется проверка того, выполняется ли уже Excel. Если это не так, то создается экземпляр.  
  
> [!IMPORTANT]
>  Для простоты в предыдущем примере предполагается, что любое `XLMAIN` окно, вызываемое, принадлежит экземпляру Microsoft Excel. Если другой объект, возможно, запустился незаконным вмешательством, создает окно с таким именем, оно получит все сообщения, которые вы предполагали для Excel. В приложении, которое будет использоваться для рабочей среды, следует включить более строгое тестирование, чтобы убедиться `XLMAIN` , что оно действительно принадлежит к Excel.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Объект указанного класса не существует.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Объект с указанным путем и именем файла не существует.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)" />
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/declare-statement.md">Declare Statement</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-strict-statement.md">Option Strict Statement</related>
      </Docs>
    </Member>
    <Member MemberName="GetSetting">
      <MemberSignature Language="C#" Value="public static string GetSetting (string AppName, string Section, string Key, string Default = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string GetSetting(string AppName, string Section, string Key, string Default) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSetting (AppName As String, Section As String, Key As String, Optional Default As String = &quot;&quot;) As String" />
      <MemberSignature Language="F#" Value="static member GetSetting : string * string * string * string -&gt; string" Usage="Microsoft.VisualBasic.Interaction.GetSetting (AppName, Section, Key, Default)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Section" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Key" Type="System.String" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Default" Type="System.String" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="AppName">Обязательный. Выражение типа <see langword="String" />, содержащее имя приложения или проекта, для которого запрашиваются настройки параметров.</param>
        <param name="Section">Обязательный. Выражение типа <see langword="String" />, содержащее имя раздела, в котором обнаружена настройка параметра.</param>
        <param name="Key">Обязательный. Выражение <see langword="String" />, содержащее имя настройки ключа, которое следует вернуть.</param>
        <param name="Default">Необязательный параметр. Выражение, содержащее значение, которое следует вернуть, если в настройках <paramref name="Key" /> значение отсутствует. Если этот параметр опущен, то предполагается, что <paramref name="Default" /> является строкой нулевой длины ("").</param>
        <summary>Возвращает значение настройки параметра из записи приложения в реестре Windows. Возможность <see langword="My" /> предоставляет большую производительность и быстродействие в операциях реестра, чем функция <see langword="GetAllSettings" />. Для получения дополнительной информации см. <see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />.</summary>
        <returns>Значение настройки параметра из записи приложения в реестре Windows.  
  
Возможность <see langword="My" /> предоставляет большую производительность и быстродействие в операциях реестра, чем функция <see langword="GetAllSettings" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если какой-либо из элементов, названных в `GetSetting` аргументах, не существует, `GetSetting` возвращает `Default`значение.  
  
 Так как он работает в `HKEY_LOCAL_USER` разделе реестра, который неактивен до тех пор, пока пользователь не войдет в `GetSetting` систему в интерактивном режиме, пользователь должен войти в систему.  
  
 Параметры реестра, доступ к которым осуществляется из неинтерактивного процесса (например, MTX. exe), должны храниться в `HKEY_LOCAL_MACHINE\Software\` разделах `HKEY_USER\DEFAULT\Software` реестра или.  
  
 `GetSetting`требуется `Read` .<xref:System.Security.Permissions.RegistryPermission>  
  
   
  
## Examples  
 В этом примере сначала используется `SaveSetting` функция `GetSetting` , чтобы сделать записи в реестре Windows для приложения, указанного `AppName`как, а затем использует функцию для вывода одного из параметров. `Default` Поскольку аргумент указан, возвращается некоторое значение. Обратите `Section` внимание, что имена не `GetSetting`могут быть получены с помощью. Наконец, `DeleteSetting` функция удаляет все записи приложения.  
  
 [!code-vb[VbVbalrCatRef#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#61)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Один или несколько аргументов не являются выражениями <see langword="String" />, или пользователь не вошел в систему.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.Security.Permissions.RegistryPermission" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry.md">Чтение данных из реестра и запись в реестр (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="IIf">
      <MemberSignature Language="C#" Value="public static object IIf (bool Expression, object TruePart, object FalsePart);" />
      <MemberSignature Language="ILAsm" Value=".method public static object IIf(bool Expression, object TruePart, object FalsePart) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IIf (Expression As Boolean, TruePart As Object, FalsePart As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ IIf(bool Expression, System::Object ^ TruePart, System::Object ^ FalsePart);" />
      <MemberSignature Language="F#" Value="static member IIf : bool * obj * obj -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.IIf (Expression, TruePart, FalsePart)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" />
        <Parameter Name="TruePart" Type="System.Object" />
        <Parameter Name="FalsePart" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Обязательный. <see langword="Boolean" />. Вычисляемое выражение.</param>
        <param name="TruePart">Обязательный. <see langword="Object" />. Возвращается, если значение <paramref name="Expression" /> равно <see langword="True" />.</param>
        <param name="FalsePart">Обязательный. <see langword="Object" />. Возвращается, если значение <paramref name="Expression" /> равно <see langword="False" />.</param>
        <summary>Возвращает один из двух объектов, в зависимости от результата вычисления выражения.</summary>
        <returns>Возвращает один из двух объектов, в зависимости от результата вычисления выражения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Функция предоставляет аналог для условного оператора ternary [:?:](https://msdn.microsoft.com/library/88643ee8-7100-4f86-880a-705ec22b6271) в Visual C++ `IIf`  
  
   
  
## Examples  
 В этом примере `IIf` функция используется для `testMe` вычисления параметра `checkIt` процедуры и возвращает слово «Large», если сумма больше 1000; в противном случае возвращается слово «малый».  
  
 [!code-vb[VbVbalrFunctions#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#33)]  
  
 Обратите внимание `Option Strict` , `On`что если имеет значение `CStr` , необходимо использовать ключевое слово для явного `Object` преобразования `String`возврата из в.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Switch(System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-strict-statement.md">Option Strict Statement</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/if-then-else-statement.md">Оператор If...Then...Else (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/select-case-statement.md">Оператор Select...Case (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="InputBox">
      <MemberSignature Language="C#" Value="public static string InputBox (string Prompt, string Title = &quot;&quot;, string DefaultResponse = &quot;&quot;, int XPos = -1, int YPos = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputBox(string Prompt, string Title, string DefaultResponse, int32 XPos, int32 YPos) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputBox (Prompt As String, Optional Title As String = &quot;&quot;, Optional DefaultResponse As String = &quot;&quot;, Optional XPos As Integer = -1, Optional YPos As Integer = -1) As String" />
      <MemberSignature Language="F#" Value="static member InputBox : string * string * string * int * int -&gt; string" Usage="Microsoft.VisualBasic.Interaction.InputBox (Prompt, Title, DefaultResponse, XPos, YPos)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Prompt" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Title" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="DefaultResponse" Type="System.String" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="XPos" Type="System.Int32" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="YPos" Type="System.Int32" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Prompt">Требуется выражение типа <see langword="String" />, отображаемое в диалоговом окне в виде сообщения. Максимальная длина параметра <paramref name="Prompt" /> составляет примерно 1024 знака и зависит от ширины используемых знаков. Если <paramref name="Prompt" /> состоит из нескольких строк, то строки можно разделить с помощью знака возврата каретки (<see langword="Chr(" />13<see langword=")" />), знака перевода строки (<see langword="Chr(" />10<see langword=")" />) или сочетания возврата каретки и перевода строки (<see langword="Chr(" />13<see langword=")" /> &amp; <see langword="Chr(" />10<see langword=")" />) после каждой строки.</param>
        <param name="Title">Необязательный параметр. Выражение типа <see langword="String" />, отображаемое в строке заголовка диалогового окна. Если параметр <paramref name="Title" /> опущен, в строку заголовка помещается имя приложения.</param>
        <param name="DefaultResponse">Необязательный параметр. Выражение типа <see langword="String" />, отображаемое в качестве ответного сообщения по умолчанию, если ничего другого не было введено. Если параметр <paramref name="DefaultResponse" /> опущен, отображаемое текстовое поле будет пустым.</param>
        <param name="XPos">Необязательный параметр. Числовое выражение, которое задает расстояние в твипах между левым краем диалогового окна и левым краем экрана. Если параметр <paramref name="XPos" /> опущен, то диалоговое окно центрируется по горизонтали.</param>
        <param name="YPos">Необязательный параметр. Числовое выражение, которое задает расстояние в твипах между верхним краем диалогового окна и верхним краем экрана. Если параметр <paramref name="YPos" /> опущен, то диалоговое окно располагается на уровне, составляющем примерно треть высоты экрана.</param>
        <summary>Отображает приглашение в диалоговом окне, ожидает ввода текста или нажатия кнопки и возвращает строку, являющуюся содержимым текстового поля.</summary>
        <returns>Отображает приглашение в диалоговом окне, ожидает ввода текста или нажатия кнопки и возвращает строку, являющуюся содержимым текстового поля.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если пользователь нажимает кнопку **Отмена**, возвращается строка нулевой длины.  
  
 Чтобы указать больше первого аргумента, необходимо использовать `InputBox` функцию в выражении. Если вы не пропускаете какие либо аргументы, то должны быть сохранены соответствующие разделители.  
  
> [!NOTE]
>  Функция требует `UIPermission` на<xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows> уровне, что может повлиять на ее выполнение в ситуациях частичного доверия. `InputBox` Дополнительные сведения см. в разделе [запрос разрешений](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/yd267cce(v%3dvs.100)) и <xref:System.Security.Permissions.UIPermission> .  
  
   
  
## Examples  
 В этом примере показаны различные способы использования `InputBox` функции для запроса ввода значения пользователем. Если позиции x и y опущены, то диалоговое окно автоматически выравнивается по соответствующим осям. Переменная `MyValue` содержит значение, введенное пользователем, если пользователь нажмет кнопку ОК или нажмет клавишу ВВОД.  
  
 [!code-vb[VbVbalrCatRef#67](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#67)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="MsgBox">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.MsgBoxResult MsgBox (object Prompt, Microsoft.VisualBasic.MsgBoxStyle Buttons = Microsoft.VisualBasic.MsgBoxStyle.ApplicationModal, object Title = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.MsgBoxResult MsgBox(object Prompt, valuetype Microsoft.VisualBasic.MsgBoxStyle Buttons, object Title) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MsgBox (Prompt As Object, Optional Buttons As MsgBoxStyle = Microsoft.VisualBasic.MsgBoxStyle.ApplicationModal, Optional Title As Object = null) As MsgBoxResult" />
      <MemberSignature Language="F#" Value="static member MsgBox : obj * Microsoft.VisualBasic.MsgBoxStyle * obj -&gt; Microsoft.VisualBasic.MsgBoxResult" Usage="Microsoft.VisualBasic.Interaction.MsgBox (Prompt, Buttons, Title)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Prompt" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Buttons" Type="Microsoft.VisualBasic.MsgBoxStyle" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Title" Type="System.Object" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Prompt">Обязательный. Выражение типа <see langword="String" />, отображаемое в диалоговом окне в виде сообщения. Максимальная длина параметра <paramref name="Prompt" /> составляет примерно 1024 знака и зависит от ширины используемых знаков. Если <paramref name="Prompt" /> состоит из нескольких строк, то строки можно разделить с помощью знака возврата каретки (<see langword="Chr(" />13<see langword=")" />), знака перевода строки (<see langword="Chr(" />10<see langword=")" />) или сочетания возврата каретки и перевода строки (<see langword="Chr(" />13<see langword=")" /> &amp; <see langword="Chr(" />10<see langword=")" />) после каждой строки.</param>
        <param name="Buttons">Необязательный параметр. Числовое выражение, являющееся суммой значений, задающих номер и тип отображаемых кнопок, стиль используемого значка, тип кнопки по умолчанию и признак модальности окна сообщения. Если параметр <paramref name="Buttons" /> опущен, по умолчанию используется нулевое значение.</param>
        <param name="Title">Необязательный параметр. Выражение типа <see langword="String" />, отображаемое в строке заголовка диалогового окна. Если параметр <paramref name="Title" /> опущен, в строку заголовка помещается имя приложения.</param>
        <summary>Отображает сообщение в диалоговом окне, ожидает нажатия кнопки и возвращает целое число, показывающее, какая кнопка была нажата.</summary>
        <returns><list type="table">
            <item>
              <term> Константа 
 </term>
              <description> Значение 
 </description>
            </item>
            <item>
              <term>
                <see langword="OK" />
              </term>
              <description> 1 
 </description>
            </item>
            <item>
              <term>
                <see langword="Cancel" />
              </term>
              <description> 2 
 </description>
            </item>
            <item>
              <term>
                <see langword="Abort" />
              </term>
              <description> 3 
 </description>
            </item>
            <item>
              <term>
                <see langword="Retry" />
              </term>
              <description> 4 
 </description>
            </item>
            <item>
              <term>
                <see langword="Ignore" />
              </term>
              <description> 5 
 </description>
            </item>
            <item>
              <term>
                <see langword="Yes" />
              </term>
              <description> 6 
 </description>
            </item>
            <item>
              <term>
                <see langword="No" />
              </term>
              <description> 7 
 </description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если вы не пропускаете какие либо аргументы, то должны быть сохранены соответствующие разделители.  
  
 Если в диалоговом окне отображается кнопка **Отмена** , нажатие клавиши Esc приведет к тому же результату, что и при нажатии кнопки **Отмена** .  
  
 Если диалоговое окно содержит кнопку **Справка** , для диалогового окна предоставляется контекстная справка. Однако значение не возвращается до тех пор, пока не будет выбрана одна из других кнопок. В приложениях Windows Forms при нажатии кнопки " **Справка** " <xref:System.Windows.Forms.Control.HelpRequested> выполняется событие для формы.  
  
> [!NOTE]
>  Функция требует `UIPermission` на<xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows> уровне, что может повлиять на ее выполнение в ситуациях частичного доверия. `MsgBox` Для получения дополнительной информации см. <xref:System.Security.Permissions.UIPermission>.  
  
 Значения `MsgBoxStyle` перечисления перечислены в следующей таблице.  
  
|Член|Значение|Описание|  
|-|-|-|  
|Член|Значение|Описание|  
|`OKOnly`|0|Отображает только кнопку ОК.|  
|`OKCancel`|1|Отображает кнопки ОК и Отмена.|  
|`AbortRetryIgnore`|2|Отображает кнопки прервать, повторить и пропустить.|  
|`YesNoCancel`|3|Отображает кнопки Да, нет и Отмена.|  
|`YesNo`|4|Отображает кнопки Да и нет.|  
|`RetryCancel`|5|Отображает кнопки повторить и Отмена.|  
|`Critical`|16|Отображается значок критического сообщения.|  
|`Question`|32|Отображается значок запроса предупреждения.|  
|`Exclamation`|48|Отображается значок сообщения с предупреждением.|  
|`Information`|64|Отображает значок информационного сообщения.|  
|`DefaultButton1`|0|По умолчанию используется первая кнопка.|  
|`DefaultButton2`|256|По умолчанию используется вторая кнопка.|  
|`DefaultButton3`|512|По умолчанию используется третья кнопка.|  
|`ApplicationModal`|0|Приложение является модальным. Перед продолжением работы в текущем приложении пользователь должен ответить на окно сообщения.|  
|`SystemModal`|4096|Система является модальной. Все приложения приостанавливаются до тех пор, пока пользователь не ответит на окно сообщения.|  
|`MsgBoxSetForeground`|65536|Задает окно сообщения в качестве окна переднего плана.|  
|`MsgBoxRight`|524288|Текст выровняйтеся по правому краю.|  
|`MsgBoxRtlReading`|1048576|Указывает, что текст должен отображаться как чтение справа налево в системах на иврите и арабском языке.|  
  
 Первая группа значений (0-5) описывает число и тип кнопок, отображаемых в диалоговом окне. Вторая группа (16, 32, 48, 64) описывает стиль значка. Третья группа (0, 256, 512) определяет, какая кнопка является кнопкой по умолчанию. Четвертая группа (0, 4096) определяет модальность окна сообщения, а пятая группа указывает, является ли окно сообщения окном переднего плана вместе с выравниванием и направлением текста. При добавлении чисел для создания окончательного значения `Buttons` аргумента используйте только одно число из каждой группы.  
  
   
  
## Examples  
 В этом примере `MsgBox` функция используется для вывода сообщения о критической ошибке в диалоговом окне с кнопками Да и нет. В качестве ответа по умолчанию указана кнопка нет. Это делается путем объединения `MsgBox` константных значений в одно числовое выражение. В этом случае добавление 4 (сочетание кнопки Да/нет) и 16 (окно критическое **сообщение** ) и 256 (кнопка по умолчанию) дает сумму 276. Значение, возвращаемое `MsgBox` функцией, зависит от выбранной пользователем кнопки: Да возвращает значение 6; No возвращает значение 7.  
  
 [!code-vb[VbVbalrCatRef#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Либо <paramref name="Prompt" /> — это не выражение типа <see langword="String" />, либо параметр <paramref name="Title" /> имеет недопустимое значение.</exception>
        <exception cref="T:System.InvalidOperationException">Процесс не выполняется в режиме интерактивного взаимодействия с пользователем.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Один или несколько параметров не являются членами перечислений <see langword="MsgBoxResult" /> или <see langword="MsgBoxStyle" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.MessageBox.Show(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Partition">
      <MemberSignature Language="C#" Value="public static string Partition (long Number, long Start, long Stop, long Interval);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Partition(int64 Number, int64 Start, int64 Stop, int64 Interval) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Partition(System.Int64,System.Int64,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Partition (Number As Long, Start As Long, Stop As Long, Interval As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Partition(long Number, long Start, long Stop, long Interval);" />
      <MemberSignature Language="F#" Value="static member Partition : int64 * int64 * int64 * int64 -&gt; string" Usage="Microsoft.VisualBasic.Interaction.Partition (Number, Start, Stop, Interval)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Start" Type="System.Int64" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Stop" Type="System.Int64" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Interval" Type="System.Int64" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. <see langword="Long" />. Целое значение, которое нудно разместить в одном из вычисленных диапазонов.</param>
        <param name="Start">Обязательный. <see langword="Long" />. Целое значение, которое обозначает начало набора вычисленных диапазонов. Значение параметра <paramref name="Start" /> не может быть меньше 0.</param>
        <param name="Stop">Обязательный. <see langword="Long" />. Целое значение, которое обозначает конец набора вычисленных диапазонов. Значение <paramref name="Stop" /> не может быть меньше или равно значению <paramref name="Start" />.</param>
        <param name="Interval">Обязательный. <see langword="Long" />. Целое значение, которое обозначает размер каждого вычисленного диапазона между значениями <paramref name="Start" /> и <paramref name="Stop" />. Значение параметра <paramref name="Interval" /> не может быть меньше 1.</param>
        <summary>Возвращает строку, предоставляющую вычисленный диапазон, содержащий число.</summary>
        <returns>Строка, предоставляющая вычисляемый диапазон, содержащий число.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Функция вычисляет набор числовых диапазонов, каждый из которых содержит количество значений, заданных параметром `Interval`. `Partition` Первый диапазон начинается с `Start`, а последний диапазон заканчивается на. `Stop` Затем функция определяет, какой диапазон содержит `Number` , и возвращает строку, описывающую этот диапазон. `Partition` Диапазон представлен в строке как "*ловервалуе*:*уппервалуе*", где нижняя часть диапазона (*ловервалуе*) отделяется от верхнего конца (*уппервалуе*) двоеточием (:).  
  
 При необходимости `Partition` функция вставляет начальные пробелы перед *ловервалуе* и *уппервалуе* , чтобы они имели то же количество символов, что и строковое представление значения (`Stop` + 1). Это гарантирует, что если вы используете выходные данные `Partition` функции с несколькими `Number`значениями, полученный текст будет обрабатываться должным образом во время любой последующей операции сортировки.  
  
 В следующей таблице приведены примеры строк для диапазонов `Start`, вычисленных с помощью трех наборов:, `Stop`и `Interval`. В столбцах "первый диапазон" и "последний диапазон" показаны наименьшие и максимальные диапазоны с учетом `Stop`значений `Start` и. Столбцы «перед первым диапазоном» и «после последнего диапазона» отображают строки `Number` `Stop`, возвращаемые для значений « `Start` меньше» и «больше» соответственно.  
  
|`Start`|`Stop`|`Interval`|Перед первым диапазоном|Первый диапазон|Последний диапазон|После последнего диапазона|  
|-|-|-|-|-|-|-|  
|0|99|5|":-1"|0,0  четырех|"95: 99 "|"100:"|  
|20|199|10|"   : стр|20 29|"190:199"|"200:"|  
|100|1010|20|"    : 99 "|"100: 119 "|"1000:1010"|"1011:"|  
  
 В предыдущей таблице третья строка показывает результат, когда `Start` и `Stop` определяет набор чисел, которые не могут `Interval`быть равномерно разделены. Последний диапазон завершается в `Stop`, что делает его только 11 числами, `Interval` хотя имеет значение 20.  
  
 Если `Interval` значение равно 1, то диапазон будет`Number`иметь`Number`значение ":" независимо от `Start` аргументов `Stop` и. Например, если `Number` значение равно 267, `Stop` то значение равно 1000 `Interval` , а равно `Partition` 1, возвращает значение "267: 267.  
  
 `Partition`может быть полезен при построении запросов к базе данных. Можно создать запрос SELECT, который показывает, сколько заказов происходит в различных диапазонах значений, например со значениями счета от 1 до 1000, 1001 до 2000 и т. д.  
  
   
  
## Examples  
 В следующем примере настраивается ряд диапазонов для десятилетий от 1950 до 2049. Он находит значение `year` в соответствующем диапазоне и `String` возвращает значение, показывающее диапазон. Если `year` имеет значение 1984, например, `Partition` возвращает "1980:1989".  
  
 [!code-vb[VbVbalrFunctions#45](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#45)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt; 0, <paramref name="Stop" /> &lt;= <paramref name="Start" /> или <paramref name="Interval" /> &lt; 1.</exception>
      </Docs>
    </Member>
    <Member MemberName="SaveSetting">
      <MemberSignature Language="C#" Value="public static void SaveSetting (string AppName, string Section, string Key, string Setting);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SaveSetting(string AppName, string Section, string Key, string Setting) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveSetting (AppName As String, Section As String, Key As String, Setting As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SaveSetting(System::String ^ AppName, System::String ^ Section, System::String ^ Key, System::String ^ Setting);" />
      <MemberSignature Language="F#" Value="static member SaveSetting : string * string * string * string -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.SaveSetting (AppName, Section, Key, Setting)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Section" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Key" Type="System.String" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Setting" Type="System.String" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="AppName">Обязательный. Выражение типа <see langword="String" />, содержащее имя приложения или проекта, в котором применяется этот параметр.</param>
        <param name="Section">Обязательный. Выражение типа <see langword="String" />, содержащее имя раздела, в котором сохраняется настройка параметра реестра.</param>
        <param name="Key">Обязательный. Выражение типа <see langword="String" />, содержащее имя сохраняемой настройки параметра реестра.</param>
        <param name="Setting">Обязательный. Выражение, содержащее значение, которое устанавливается для параметра <paramref name="Key" />.</param>
        <summary>Сохраняет или создает запись приложения в реестре Windows. Возможность <see langword="My" /> предоставляет большую производительность и быстродействие в операциях реестра, чем функция <see langword="SaveSetting" />. Для получения дополнительной информации см. <see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Функция добавляет ключ в `HKEY_CURRENT_USER\Software\VB and VBA Program Settings`. `SaveSetting`  
  
 Если ключевое значение не может быть сохранено по какой бы то ни было причине, возникает ошибка.  
  
 `SaveSetting`требует, чтобы пользователь вошел в систему, так как он работает `HKEY_LOCAL_USER` в разделе реестра, который неактивен до тех пор, пока пользователь не войдет в систему в интерактивном режиме.  
  
 Параметры реестра, доступ к которым осуществляется из неинтерактивного процесса (например, MTX. exe), должны храниться в `HKEY_LOCAL_MACHINE\Software\` разделах `HKEY_USER\DEFAULT\Software` реестра или.  
  
 `SaveSetting`требует `Write` и `Create` . <xref:System.Security.Permissions.RegistryPermission>  
  
   
  
## Examples  
 В следующем примере сначала используется `SaveSetting` функция `DeleteSetting` , чтобы сделать записи в реестре Windows `MyApp` для приложения, а затем с помощью функции удалить их.  
  
 [!code-vb[VbVbalrCatRef#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Реестр ключа не может быть создан, или пользователь не выполнил вход в систему.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.Security.Permissions.RegistryPermission" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry.md">Чтение данных из реестра и запись в реестр (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Shell">
      <MemberSignature Language="C#" Value="public static int Shell (string Pathname, Microsoft.VisualBasic.AppWinStyle Style = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, bool Wait = false, int Timeout = -1);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Shell(string Pathname, valuetype Microsoft.VisualBasic.AppWinStyle Style, bool Wait, int32 Timeout) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" FrameworkAlternate="netframework-2.0;netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Public Function Shell (Pathname As String, Optional Style As AppWinStyle = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, Optional Wait As Boolean = false, Optional Timeout As Integer = -1) As Integer" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C#" Value="public static int Shell (string PathName, Microsoft.VisualBasic.AppWinStyle Style = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, bool Wait = false, int Timeout = -1);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Shell(string PathName, valuetype Microsoft.VisualBasic.AppWinStyle Style, bool Wait, int32 Timeout) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function Shell (PathName As String, Optional Style As AppWinStyle = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, Optional Wait As Boolean = false, Optional Timeout As Integer = -1) As Integer" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Shell : string * Microsoft.VisualBasic.AppWinStyle * bool * int -&gt; int" Usage="Microsoft.VisualBasic.Interaction.Shell (PathName, Style, Wait, Timeout)" FrameworkAlternate="netframework-2.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Shell : string * Microsoft.VisualBasic.AppWinStyle * bool * int -&gt; int" Usage="Microsoft.VisualBasic.Interaction.Shell (PathName, Style, Wait, Timeout)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Style" Type="Microsoft.VisualBasic.AppWinStyle" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Wait" Type="System.Boolean" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Timeout" Type="System.Int32" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Pathname">Обязательный. <see langword="String" />. Имя программы для выполнения, а также все обязательные аргументы и параметры командной строки. <paramref name="PathName" /> также может включать диск и путь к каталогу или папку.
Если путь к программе неизвестен, для ее поиска можно использовать <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles" />. Например, можно вызвать функцию <c>My.Computer.FileSystem.GetFiles("C:\", True, "testFile.txt")</c>, которая возвращает полный путь для каждого файла с именем <c>testFile.txt</c> в любом месте на диске C:\\.</param>
        <param name="PathName">Обязательный. <see langword="String" />. Имя программы для выполнения, а также все обязательные аргументы и параметры командной строки. <paramref name="PathName" /> также может включать диск и путь к каталогу или папку.  
 Если путь к программе неизвестен, для ее поиска можно использовать <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles" />. Например, можно вызвать функцию <c>My.Computer.FileSystem.GetFiles("C:\", True, "testFile.txt")</c>, которая возвращает полный путь для каждого файла с именем <c>testFile.txt</c> в любом месте на диске C:\\.</param>
        <param name="Style">Необязательный параметр. <see langword="AppWinStyle" />. Значение, выбранное из перечисления <see cref="T:Microsoft.VisualBasic.AppWinStyle" /> и задающее стиль окна, в котором запускается программа. Если параметр <paramref name="Style" /> опущен, <see langword="Shell" /> использует стиль <see langword="AppWinStyle.MinimizedFocus" />, запуская программу в свернутом состоянии и с установленным фокусом.</param>
        <param name="Wait">Необязательный параметр. <see langword="Boolean" />. Значение, показывающее должна ли функция <see langword="Shell" /> ожидать завершения программы. Если параметр <paramref name="Wait" /> опущен, <see langword="Shell" /> использует значение <see langword="False" />.</param>
        <param name="Timeout">Необязательный параметр. <see langword="Integer" />. Число миллисекунд ожидания завершения, если значение <paramref name="Wait" /> равно <see langword="True" />. Если параметр <paramref name="Timeout" /> опущен, функция <see langword="Shell" /> использует значение -1, которое означает, что таймаут не используется, и <see langword="Shell" /> ожидает завершения выполнения программы. Таким образом, если опустить параметр <paramref name="Timeout" /> или установить его равным -1, существует возможность, что функция <see langword="Shell" /> никогда не возвратит управление в программу.</param>
        <summary>Запускает исполняемую программу и возвращает целочисленное значение, содержащее идентификатор процесса программы, если программа в данный момент все еще выполняется.</summary>
        <returns>Целое число, содержащее идентификатор процесса программы, если она все еще выполняется. 0, если выполнение программы уже завершено.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Возвращаемое значение `Shell` функции зависит от того, выполняется ли программа с именем `PathName` в при `Shell` возврате. Если задано `Wait` значение `True` и программа завершается до истечения времени ожидания `Shell` , возвращает ноль. Если время ожидания истекает или если `Wait` значение параметра `False`не указано, `Shell` возвращает идентификатор процесса программы. Идентификатор процесса — это уникальный номер, идентифицирующий выполняемую программу.  
  
## <a name="failure-to-start"></a>Не удалось запустить  
 Если функция не может запустить именованную программу <xref:System.IO.FileNotFoundException> , возникает ошибка. `Shell` Это может произойти, например, при попытке запустить 16-разрядную программу, например `command.com`, из приложения, использующего. <xref:System.Windows.Forms?displayProperty=nameWithType> Для решения этой проблемы можно запустить 32-разрядную программу, которая вызывает нужную 16-разрядную программу. В случае `command.com`можно использовать `cmd.exe` в качестве альтернативы.  
  
## <a name="waiting-for-completion"></a>Ожидание завершения  
 По умолчанию `Shell` функция выполняет программу асинхронно. Это означает, что программа, запущенная `Shell` с функцией, может не завершить выполнение до выполнения инструкций `Shell` , следующих за функцией. Если вы хотите дождаться завершения программы, прежде чем продолжить, задайте для `Wait` `True`параметра значение.  
  
## <a name="determining-the-exit-code"></a>Определение кода выхода  
 Процесс может вернуть *код выхода* после его завершения. Однако нельзя использовать `Shell` для получения этого кода выхода, поскольку `Shell` возвращает нуль, если он ожидает завершения, а также потому, что процесс выполняется в другом объекте из `Shell`.  
  
 Чтобы получить код выхода из процесса, необходимо написать собственный код для инициации процесса и ожидания завершения. В следующем примере показано, как запустить процесс, дождаться его завершения и получить его код выхода.  
  
```vb  
Dim procID As Integer  
Dim newProc As Diagnostics.Process  
newProc = Diagnostics.Process.Start("C:\WINDOWS\NOTEPAD.EXE")  
procID = newProc.Id  
newProc.WaitForExit()  
Dim procEC As Integer = -1  
If newProc.HasExited Then  
    procEC = newProc.ExitCode  
End If  
MsgBox("Process with ID " & CStr(ProcID) & _  
    " terminated with exit code " & CStr(procEC))  
```  
  
## <a name="protecting-the-file-specification"></a>Защита спецификации файла  
 Всегда следует заключать весь путь и спецификацию файла в кавычки, как показано в следующем примере.  
  
```vb  
ID = Shell("""C:\Program Files\display.exe"" -a -q", , True, 100000)  
```  
  
 Каждая пара соседних двойных кавычек (`" "`) в строковом литерале интерпретируется как одна двойная кавычка в строке. Поэтому в приведенном выше примере `Shell` функция представляет следующую строку:  
  
```console  
"C:\Program Files\display.exe" -a -q  
```  
  
 Если путь не заключен в кавычки, Windows будет искать файл, вызываемый `Program.exe` в файле C:\ Каталог, а не `display.exe` каталог C:\Program Files.  
  
> [!IMPORTANT]
>  Если не заключать путь и спецификацию файла в кавычки, существует угроза безопасности, если имя файла или узла пути содержат пробелы. В предыдущем примере узел `\Program Files` path содержит пробел. Если спецификация не заключена в кавычки и программа `Program.exe` была установлена в C:\\, например в случае незаконного изменения, Windows выполнит ее вместо `display.exe`.  
  
> [!IMPORTANT]
>  `Shell` Функции требуется разрешение на неуправляемый код, что может повлиять на его выполнение в ситуациях частичного доверия. Дополнительные сведения см. в <xref:System.Security.Permissions.SecurityPermission> разделе и [разрешения на доступ к коду](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 В следующем примере `Shell` функция используется для запуска приложения, указанного пользователем. При <xref:Microsoft.VisualBasic.AppWinStyle.NormalFocus?displayProperty=nameWithType> указании в качестве второго аргумента приложение открывается в нормальном размере и передается фокусу.  
  
 [!code-vb[VbVbalrFunctions#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#47)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Style" /> вне диапазона от 0 до 9 включительно.</exception>
        <exception cref="T:System.IO.FileNotFoundException"><see langword="Shell" /> не удается найти файл <paramref name="PathName" />.</exception>
        <exception cref="T:System.NullReferenceException">Свойство <paramref name="PathName" /> имеет значение <see langword="Nothing" />.</exception>
        <altmember cref="T:Microsoft.VisualBasic.AppWinStyle" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.NullReferenceException" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles" />
        <altmember cref="Overload:Microsoft.VisualBasic.Interaction.AppActivate" />
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static object Switch (params object[] VarExpr);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Switch(object[] VarExpr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Switch(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Switch (ParamArray VarExpr As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Switch(... cli::array &lt;System::Object ^&gt; ^ VarExpr);" />
      <MemberSignature Language="F#" Value="static member Switch : obj[] -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.Switch VarExpr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarExpr" Type="System.Object[]" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="VarExpr">Обязательный. Массив параметров <see langword="Object" />. Должен содержать четное количество элементов. Можно передать список переменных типа <see langword="Object" /> или выражений, разделенных запятыми, либо одномерный массив элементов типа <see langword="Object" />.</param>
        <summary>Вычисляет значения выражений из списка и возвращает значение <see langword="Object" />, соответствующее первому выражению в списке, которое равно <see langword="True" />.</summary>
        <returns>Вычисляет значения выражений из списка и возвращает значение <see langword="Object" />, соответствующее первому выражению в списке, которое равно <see langword="True" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Аргумент, передаваемый `VarExpr` в, состоит из парных выражений и значений. Функция вычисляет нечетные числа в выражении от нижнего до высшего индекса в `VarExpr`и возвращает четное значение, связанное с первым `True`выражением, результатом которого является. `Switch` Например, `VarExpr(0)` если имеет значение `True`, `Switch` функция `VarExpr(1)`возвращает значение, `VarExpr(0)` а `False` если `VarExpr(2)` имеет значение`Switch` , а возвращает`VarExpr(3)`и т. д. `True`  
  
 Если `VarExpr` аргумент не указан, `Switch` функция возвращает `Nothing`.  
  
> [!NOTE]
>  Выражения в списке аргументов могут включать вызовы функций. В процессе подготовки списка аргументов для вызова метод `Switch`Visual Basic компилятор вызывает каждую функцию в каждом выражении. Это означает, что нельзя полагаться на конкретную функцию, если выражение ранее в списке аргументов имеет значение `True`.  
  
   
  
## Examples  
 В следующем примере `Switch` функция используется для возврата имени языка, совпадающего с названием города. `Option Strict` Для`Off`этого требуется.  
  
 [!code-vb[VbVbalrFunctions#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#48)]  
  
 Так как <xref:System.Diagnostics.Switch> `Switch` <xref:Microsoft.VisualBasic> пространство имен также содержит класс с именем, вызов функции должен уточняться пространством имен. <xref:System.Diagnostics>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Число элементов нечетно.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/select-case-statement.md">Оператор Select...Case (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/parameter-arrays.md">Массивы параметров</related>
      </Docs>
    </Member>
  </Members>
</Type>