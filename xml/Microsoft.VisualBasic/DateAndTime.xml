<Type Name="DateAndTime" FullName="Microsoft.VisualBasic.DateAndTime">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4870e1d7c6e4d0f45956d92f828b79ffb634ac0e" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69317853" /></Metadata><TypeSignature Language="C#" Value="public sealed class DateAndTime" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DateAndTime extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.DateAndTime" />
  <TypeSignature Language="VB.NET" Value="Public Module DateAndTime" />
  <TypeSignature Language="C++ CLI" Value="public ref class DateAndTime sealed" />
  <TypeSignature Language="F#" Value="type DateAndTime = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>В модуле <see langword="DateAndTime" /> содержатся процедуры и свойства, используемые в операциях, связанных с датой и временем.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот модуль поддерживает ключевые слова языка Visual Basic и элементы библиотеки времени выполнения, которые получают текущую дату или время, выполняют вычисления дат, возвращают дату или время, задают дату или время, а также время выполнения процесса.  
  
   
  
## Examples  
 В этом примере `Today` свойство используется для возврата текущей системной даты.  
  
```vb  
Dim thisDate As Date  
thisDate = Today   
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/dates-and-times-summary.md">Сводка элементов для работы со значениями дат и времени</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Ключевые слова (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic элементов библиотеки времени выполнения</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="DateAdd">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает значение <see langword="Date" />, содержащее дату и время, к которым был добавлен заданный период времени.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DateAdd">
      <MemberSignature Language="C#" Value="public static DateTime DateAdd (Microsoft.VisualBasic.DateInterval Interval, double Number, DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateAdd(valuetype Microsoft.VisualBasic.DateInterval Interval, float64 Number, valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateAdd (Interval As DateInterval, Number As Double, DateValue As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateAdd(Microsoft::VisualBasic::DateInterval Interval, double Number, DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member DateAdd : Microsoft.VisualBasic.DateInterval * double * DateTime -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateAdd (Interval, Number, DateValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="Number" Type="System.Double" />
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Interval">Обязательный. Значение перечисления <see cref="T:Microsoft.VisualBasic.DateInterval" /> или строковое выражение, представляющее добавляемый период времени.</param>
        <param name="Number">Обязательный. Выражение с плавающей запятой, представляющее количество добавляемых интервалов. Может иметь как положительное (для получения значений даты и времени в будущем), так и отрицательное значение (для получения значений даты и времени в прошлом). Выражение может содержать дробную часть, если в параметре <paramref name="Interval" /> заданы часы, минуты или секунды. Для других значений параметра <paramref name="Interval" /> дробная часть значения <paramref name="Number" /> не обрабатывается.</param>
        <param name="DateValue">Обязательный. Выражение, представляющее дату и время, к которым добавляется интервал. Само значение <paramref name="DateValue" /> в вызывающей программе не изменяется.</param>
        <summary>Возвращает значение, содержащее дату и время, к которым был добавлен заданный период времени.</summary>
        <returns>Значение, содержащее дату и время, к которым был добавлен заданный период времени.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DateAdd` Функцию можно использовать для добавления или вычитания указанного интервала времени из даты. Например, вы можете вычислить дату в 30 дней с сегодняшнего дня или через 45 минут до сегодняшнего периода.  
  
 Чтобы добавить дни в `DateValue`, можно использовать `DateInterval.Day`, `DateInterval.DayOfYear`или `DateInterval.Weekday`. Они считаются эквивалентными, поскольку `DayOfYear` и `Weekday` не являются значимыми интервалами времени.  
  
 `DateAdd` Функция никогда не возвращает недопустимую дату. При необходимости день в результирующей дате корректируется вниз до последнего дня итогового месяца в итоговом году. В следующем примере один месяц добавляется к 31 января:  
  
```vb  
Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)  
```  
  
 В этом примере `DateAdd` возвращает `#2/28/1995#`, а не `#2/31/1995#`. Если `DateValue` имеет `#1/31/1996#`значение, возвращается `#2/29/1996#` значение, поскольку 1996 является високосным годом.  
  
> [!NOTE]
>  `DateAdd`использует текущий параметр календаря из <xref:System.Globalization.CultureInfo.CurrentCulture%2A> свойства <xref:System.Globalization.CultureInfo> класса в <xref:System.Globalization> пространстве имен. Значения по <xref:System.Globalization.CultureInfo.CurrentCulture%2A> умолчанию определяются параметрами **панели управления** .  
  
 Поскольку все `Date` значения поддерживаются <xref:System.DateTime> структурой, ее методы предоставляют дополнительные возможности для добавления интервалов времени. Например, можно добавить дробное число дней, округленное до ближайшей миллисекунды, в `Date` переменную следующим образом:  
  
```vb  
Dim NextTime As Date = Now        ' Current date and time.  
NextTime = NextTime.AddDays(3.4)  ' Increment by 3 2/5 days.  
```  
  
 `Interval` Аргумент может иметь один из следующих параметров.  
  
|Значение перечисления|String|Единица измерения времени для добавления|  
|-----------------------|------------|----------------------------------|  
|`DateInterval.Day`|d|Ежедневные усечено до целого значения|  
|`DateInterval.DayOfYear`|y|Ежедневные усечено до целого значения|  
|`DateInterval.Hour`|h|Отображение округлено до ближайшей миллисекунды|  
|`DateInterval.Minute`|n|Интервал округлено до ближайшей миллисекунды|  
|`DateInterval.Month`|m|Месяц усечено до целого значения|  
|`DateInterval.Quarter`|q|Выплат усечено до целого значения|  
|`DateInterval.Second`|s|Секунды округлено до ближайшей миллисекунды|  
|`DateInterval.Weekday`|если|Ежедневные усечено до целого значения|  
|`DateInterval.WeekOfYear`|НН|Дней усечено до целого значения|  
|`DateInterval.Year`|yyyy|Год усечено до целого значения|  
  
   
  
## Examples  
 Этот пример принимает дату и, используя `DateAdd` функцию, отображает соответствующую дату в указанном количестве месяцев в будущем.  
  
 [!code-vb[VbVbalrFunctions#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" /> не может быть приведен к <see langword="Date" />.</exception>
        <exception cref="T:System.ArgumentException">Недопустимый параметр <paramref name="Interval" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Вычисленная дата приходится на период до 00:00:00 1 января 1 года или позже 23:59:59 31 декабря 9999 года.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateAdd">
      <MemberSignature Language="C#" Value="public static DateTime DateAdd (string Interval, double Number, object DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateAdd(string Interval, float64 Number, object DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateAdd (Interval As String, Number As Double, DateValue As Object) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateAdd(System::String ^ Interval, double Number, System::Object ^ DateValue);" />
      <MemberSignature Language="F#" Value="static member DateAdd : string * double * obj -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateAdd (Interval, Number, DateValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="Number" Type="System.Double" />
        <Parameter Name="DateValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Interval">Обязательный. Значение перечисления <see cref="T:Microsoft.VisualBasic.DateInterval" /> или строковое выражение, представляющее добавляемый период времени.</param>
        <param name="Number">Обязательный. Выражение с плавающей запятой, представляющее количество добавляемых интервалов. Параметр <paramref name="Number" /> может иметь как положительное (для получения значений даты и времени в будущем), так и отрицательное значение (для получения значений даты и времени в прошлом). Выражение может содержать дробную часть, если в параметре <paramref name="Interval" /> заданы часы, минуты или секунды. Для других значений параметра <paramref name="Interval" /> дробная часть значения <paramref name="Number" /> не обрабатывается.</param>
        <param name="DateValue">Обязательный. Выражение, представляющее дату и время, к которым добавляется интервал. Само значение <paramref name="DateValue" /> в вызывающей программе не изменяется.</param>
        <summary>Возвращает значение, содержащее дату и время, к которым был добавлен заданный период времени.</summary>
        <returns>Значение, содержащее дату и время, к которым был добавлен заданный период времени.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DateAdd` Функцию можно использовать для добавления или вычитания указанного интервала времени из даты. Например, вы можете вычислить дату в 30 дней с сегодняшнего дня или через 45 минут до сегодняшнего периода.  
  
 Чтобы добавить дни в `DateValue`, можно использовать `DateInterval.Day`, `DateInterval.DayOfYear`или `DateInterval.Weekday`. Они считаются эквивалентными, поскольку `DayOfYear` и `Weekday` не являются значимыми интервалами времени.  
  
 `DateAdd` Функция никогда не возвращает недопустимую дату. При необходимости день в результирующей дате корректируется вниз до последнего дня итогового месяца в итоговом году. В следующем примере один месяц добавляется к 31 января:  
  
```vb  
Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)  
```  
  
 В этом примере `DateAdd` возвращает `#2/28/1995#`, а не `#2/31/1995#`. Если `DateValue` имеет `#1/31/1996#`значение, возвращается `#2/29/1996#` значение, поскольку 1996 является високосным годом.  
  
> [!NOTE]
>  `DateAdd`использует текущий параметр календаря из <xref:System.Globalization.CultureInfo.CurrentCulture%2A> свойства <xref:System.Globalization.CultureInfo> класса в <xref:System.Globalization> пространстве имен. Значения по <xref:System.Globalization.CultureInfo.CurrentCulture%2A> умолчанию определяются параметрами **панели управления** .  
  
 Поскольку все `Date` значения поддерживаются <xref:System.DateTime> структурой, ее методы предоставляют дополнительные возможности для добавления интервалов времени. Например, можно добавить дробное число дней, округленное до ближайшей миллисекунды, в `Date` переменную следующим образом:  
  
```vb  
Dim NextTime As Date = Now        ' Current date and time.  
NextTime = NextTime.AddDays(3.4)  ' Increment by 3 2/5 days.  
```  
  
 `Interval` Аргумент может иметь один из следующих параметров.  
  
|Значение перечисления|String|Единица измерения времени для добавления|  
|-----------------------|------------|----------------------------------|  
|`DateInterval.Day`|d|Ежедневные усечено до целого значения|  
|`DateInterval.DayOfYear`|y|Ежедневные усечено до целого значения|  
|`DateInterval.Hour`|h|Отображение округлено до ближайшей миллисекунды|  
|`DateInterval.Minute`|n|Интервал округлено до ближайшей миллисекунды|  
|`DateInterval.Month`|m|Месяц усечено до целого значения|  
|`DateInterval.Quarter`|q|Выплат усечено до целого значения|  
|`DateInterval.Second`|s|Секунды округлено до ближайшей миллисекунды|  
|`DateInterval.Weekday`|если|Ежедневные усечено до целого значения|  
|`DateInterval.WeekOfYear`|НН|Дней усечено до целого значения|  
|`DateInterval.Year`|yyyy|Год усечено до целого значения|  
  
   
  
## Examples  
 Этот пример принимает дату и, используя `DateAdd` функцию, отображает соответствующую дату в указанном количестве месяцев в будущем.  
  
 [!code-vb[VbVbalrFunctions#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" /> не может быть приведен к <see langword="Date" />.</exception>
        <exception cref="T:System.ArgumentException">Недопустимый параметр <paramref name="Interval" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Вычисленная дата приходится на период до 00:00:00 1 января 1 года или позже 23:59:59 31 декабря 9999 года.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DateDiff">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает значение, указывающее количество интервалов времени между двумя значениями <see langword="Date" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DateDiff">
      <MemberSignature Language="C#" Value="public static long DateDiff (Microsoft.VisualBasic.DateInterval Interval, DateTime Date1, DateTime Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 DateDiff(valuetype Microsoft.VisualBasic.DateInterval Interval, valuetype System.DateTime Date1, valuetype System.DateTime Date2, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateDiff (Interval As DateInterval, Date1 As DateTime, Date2 As DateTime, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Long" />
      <MemberSignature Language="F#" Value="static member DateDiff : Microsoft.VisualBasic.DateInterval * DateTime * DateTime * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int64" Usage="Microsoft.VisualBasic.DateAndTime.DateDiff (Interval, Date1, Date2, DayOfWeek, WeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="Date1" Type="System.DateTime" />
        <Parameter Name="Date2" Type="System.DateTime" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Обязательный. Значение перечисления <see cref="T:Microsoft.VisualBasic.DateInterval" /> или строковое выражение, представляющее интервал времени, используемый в качестве единицы измерения разницы между <paramref name="Date1" /> и <paramref name="Date2" />.</param>
        <param name="Date1">Обязательный. Первое значение даты/времени для использования в расчете.</param>
        <param name="Date2">Обязательный. Второе значение даты/времени для использования в расчете.</param>
        <param name="DayOfWeek">Необязательный параметр. Значение, выбранное из перечисления <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" />, указывающее первый день недели. Если этот параметр не задан, используется значение <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" />.</param>
        <param name="WeekOfYear">Необязательный параметр. Значение, выбранное из перечисления <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" />, указывающее первую неделю года. Если этот параметр не задан, используется значение <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" />.</param>
        <summary>Возвращает значение типа long, указывающее количество интервалов времени между двумя значениями <see langword="Date" />.</summary>
        <returns>Значение типа long, указывающее количество интервалов времени между двумя значениями <see langword="Date" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DateDiff` Функцию можно использовать для определения того, сколько заданных интервалов времени существует между двумя значениями даты и времени. Например, можно использовать `DateDiff` , чтобы вычислить количество дней между двумя датами или число недель между сегодняшней и концом года.  
  
## <a name="behavior"></a>Поведение  
  
-   **Обработка параметров.** `DateDiff`Вычитает значение `Date1` из `Date2` значения, чтобы получить разницу. В вызывающей программе не изменяется ни одно из значений.  
  
-   **Возвращаемые значения.** Поскольку `Date1` и `Date2` имеют`Date` тип данных, они содержат точные значения даты и времени в 100-наносекундных тактах в системном таймере. Однако всегда возвращает количество интервалов времени в `Long` виде значения. `DateDiff`  
  
     Если `Date1` представляет более позднюю дату и время, `Date2`чем `DateDiff` , возвращает отрицательное число.  
  
-   **Интервалы дня.** Если `Interval` параметр имеет `DateInterval.DayOfYear`значение, то он обрабатывается так же `DateInterval.Day`, как `DayOfYear` и, поскольку не является значимым единицей для интервала времени.  
  
-   **Интервалы недели.** Если `Interval` параметр имеет `DateInterval.WeekOfYear`значение, возвращаемое значение представляет число недель между первым `Date1` днем недели и первым днем недели, содержащим `Date2`. В следующем примере показано `DateInterval.Weekday`, как это приводит к получению различных результатов.  
  
     [!code-vb[VbVbalrFunctions#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]  
  
     В предыдущем примере `DateDiff` возвращает значение `wD` 0, так как разница между двумя датами составляет менее семи дней, `wY` но возвращает 1, поскольку существует разница в семь дней между первыми днями соответствующего календаря. неделю.  
  
-   **Более крупные интервалы.** Если `Interval` параметр имеет `DateInterval.Year`значение, возвращаемое значение вычисляется исключительно `Date1` из частей года и `Date2`. Аналогичным образом возвращаемое значение `DateInterval.Month` для вычисляется исключительно из частей года и месяца аргументов и для `DateInterval.Quarter` из кварталов, содержащих две даты.  
  
     Например, при сравнении 31 декабря с `DateDiff` 1 января в следующем году возвращается значение 1 для `DateInterval.Year`, `DateInterval.Quarter`или `DateInterval.Month`, несмотря на то, что прошло не более одного дня.  
  
     Для языков и региональных параметров, таких как японский, которые `DateDiff` имеют несколько эр, метод не возвращает разницы в годах, если разница охватывает две или более Эр. Вместо этого можно вычислить разницу в значениях, возвращаемых <xref:System.DateTime.Year%2A> свойством, как показано в следующем примере:. `date2.Year - date1.Year`  
  
-   **Другие интервалы.** Поскольку все `Date` значения поддерживаются <xref:System.DateTime> структурой, ее методы предоставляют дополнительные возможности для поиска интервалов времени. Например, `Subtract` метод можно использовать в любой из его перегруженных форм: <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> `Date` вычитает объект <xref:System.TimeSpan> из переменной, чтобы вернуть другое `Date` значение, и <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> вычитает `Date` значение. для возврата <xref:System.TimeSpan>. Вы можете узнать, сколько миллисекунд занимает время выполнения, как показано в следующем примере.  
  
     [!code-vb[VbVbalrFunctions#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]  
  
 `Interval` Аргумент может иметь один из следующих параметров.  
  
|Значение перечисления|Строковое значение|Единица разницы во времени|  
|-----------------------|------------------|-----------------------------|  
|`DateInterval.Day`|"d"|Day|  
|`DateInterval.DayOfYear`|"y"|Day|  
|`DateInterval.Hour`|"h"|Hour|  
|`DateInterval.Minute`|\n|Minute|  
|`DateInterval.Month`|"m"|Месяц.|  
|`DateInterval.Quarter`|формате|Выплат|  
|`DateInterval.Second`|"s"|Second|  
|`DateInterval.Weekday`|"w"|Неделя|  
|`DateInterval.WeekOfYear`|НН|Календарная неделя|  
|`DateInterval.Year`|"yyyy"|Year|  
  
 `DayOfWeek` Аргумент может иметь один из следующих параметров.  
  
|Значение перечисления|Значение|Описание|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Первый день недели, указанный в параметрах системы|  
|`FirstDayOfWeek.Sunday`|1|Воскресенье (по умолчанию)|  
|`FirstDayOfWeek.Monday`|2|Понедельник (соответствует стандарту ISO 8601, раздел 3,17)|  
|`FirstDayOfWeek.Tuesday`|3|Вторник|  
|`FirstDayOfWeek.Wednesday`|4|среда|  
|`FirstDayOfWeek.Thursday`|5|Четверг|  
|`FirstDayOfWeek.Friday`|6|пятница|  
|`FirstDayOfWeek.Saturday`|7|Суббота|  
  
 `WeekOfYear` Аргумент может иметь один из следующих параметров.  
  
|Значение перечисления|Значение|Описание|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Первая неделя года, указанная в параметрах системы|  
|`FirstWeekOfYear.Jan1`|1|Неделя, в которой происходит 1 января (по умолчанию)|  
|`FirstWeekOfYear.FirstFourDays`|2|Неделя, в которой в новом году по крайней мере четыре дня (соответствует стандарту ISO 8601, раздел 3,17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Первая полная неделя в новом году|  
  
   
  
## Examples  
 В этом примере `DateDiff` функция используется для вывода количества дней между заданной и текущей датами.  
  
 [!code-vb[VbVbalrFunctions#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Значение <paramref name="Date1" />, <paramref name="Date2" /> или <paramref name="DayofWeek" /> выходит за пределы допустимого диапазона.</exception>
        <exception cref="T:System.InvalidCastException">Значение <paramref name="Date1" /> или <paramref name="Date2" /> имеет недопустимый тип.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateDiff">
      <MemberSignature Language="C#" Value="public static long DateDiff (string Interval, object Date1, object Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 DateDiff(string Interval, object Date1, object Date2, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateDiff (Interval As String, Date1 As Object, Date2 As Object, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Long" />
      <MemberSignature Language="F#" Value="static member DateDiff : string * obj * obj * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int64" Usage="Microsoft.VisualBasic.DateAndTime.DateDiff (Interval, Date1, Date2, DayOfWeek, WeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="Date1" Type="System.Object" />
        <Parameter Name="Date2" Type="System.Object" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Обязательный. Значение перечисления <see cref="T:Microsoft.VisualBasic.DateInterval" /> или строковое выражение, представляющее интервал времени, используемый в качестве единицы измерения разницы между <paramref name="Date1" /> и <paramref name="Date2" />.</param>
        <param name="Date1">Обязательный. Первое значение даты/времени для использования в расчете.</param>
        <param name="Date2">Обязательный. Второе значение даты/времени для использования в расчете.</param>
        <param name="DayOfWeek">Необязательный параметр. Значение, выбранное из перечисления <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" />, указывающее первый день недели. Если этот параметр не задан, используется значение <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" />.</param>
        <param name="WeekOfYear">Необязательный параметр. Значение, выбранное из перечисления <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" />, указывающее первую неделю года. Если этот параметр не задан, используется значение <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" />.</param>
        <summary>Возвращает значение типа long, указывающее количество интервалов времени между двумя значениями <see langword="Date" />.</summary>
        <returns>Значение типа long, указывающее количество интервалов времени между двумя значениями <see langword="Date" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DateDiff` Функцию можно использовать для определения того, сколько заданных интервалов времени существует между двумя значениями даты и времени. Например, можно использовать `DateDiff` , чтобы вычислить количество дней между двумя датами или число недель между сегодняшней и концом года.  
  
## <a name="behavior"></a>Поведение  
  
-   **Обработка параметров.** `DateDiff`Вычитает значение `Date1` из `Date2` значения, чтобы получить разницу. В вызывающей программе не изменяется ни одно из значений.  
  
-   **Возвращаемые значения.** Поскольку `Date1` и `Date2` имеют`Date` тип данных, они содержат точные значения даты и времени в 100-наносекундных тактах в системном таймере. Однако всегда возвращает количество интервалов времени в `Long` виде значения. `DateDiff`  
  
     Если `Date1` представляет более позднюю дату и время, `Date2`чем `DateDiff` , возвращает отрицательное число.  
  
-   **Интервалы дня.** Если `Interval` параметр имеет `DateInterval.DayOfYear`значение, то он обрабатывается так же `DateInterval.Day`, как `DayOfYear` и, поскольку не является значимым единицей для интервала времени.  
  
-   **Интервалы недели.** Если `Interval` параметр имеет `DateInterval.WeekOfYear`значение, возвращаемое значение представляет число недель между первым `Date1` днем недели и первым днем недели, содержащим `Date2`. В следующем примере показано `DateInterval.Weekday`, как это приводит к получению различных результатов.  
  
     [!code-vb[VbVbalrFunctions#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]  
  
     В предыдущем примере `DateDiff` возвращает значение `wD` 0, так как разница между двумя датами составляет менее семи дней, `wY` но возвращает 1, поскольку существует разница в семь дней между первыми днями соответствующего календаря. неделю.  
  
-   **Более крупные интервалы.** Если `Interval` параметр имеет `DateInterval.Year`значение, возвращаемое значение вычисляется исключительно `Date1` из частей года и `Date2`. Аналогичным образом возвращаемое значение `DateInterval.Month` для вычисляется исключительно из частей года и месяца аргументов и для `DateInterval.Quarter` из кварталов, содержащих две даты.  
  
     Например, при сравнении 31 декабря с `DateDiff` 1 января в следующем году возвращается значение 1 для `DateInterval.Year`, `DateInterval.Quarter`или `DateInterval.Month`, несмотря на то, что прошло не более одного дня.  
  
     Для языков и региональных параметров, таких как японский, которые `DateDiff` имеют несколько эр, метод не возвращает разницы в годах, если разница охватывает две или более Эр. Вместо этого можно вычислить разницу в значениях, возвращаемых <xref:System.DateTime.Year%2A> свойством, как показано в следующем примере:. `date2.Year - date1.Year`  
  
-   **Другие интервалы.** Поскольку все `Date` значения поддерживаются <xref:System.DateTime> структурой, ее методы предоставляют дополнительные возможности для поиска интервалов времени. Например, `Subtract` метод можно использовать в любой из его перегруженных форм: <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> `Date` вычитает объект <xref:System.TimeSpan> из переменной, чтобы вернуть другое `Date` значение, и <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> вычитает `Date` значение. для возврата <xref:System.TimeSpan>. Вы можете узнать, сколько миллисекунд занимает время выполнения, как показано в следующем примере.  
  
     [!code-vb[VbVbalrFunctions#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]  
  
 `Interval` Аргумент может иметь один из следующих параметров.  
  
|Значение перечисления|Строковое значение|Единица разницы во времени|  
|-----------------------|------------------|-----------------------------|  
|`DateInterval.Day`|"d"|Day|  
|`DateInterval.DayOfYear`|"y"|Day|  
|`DateInterval.Hour`|"h"|Hour|  
|`DateInterval.Minute`|\n|Minute|  
|`DateInterval.Month`|"m"|Месяц.|  
|`DateInterval.Quarter`|формате|Выплат|  
|`DateInterval.Second`|"s"|Second|  
|`DateInterval.Weekday`|"w"|Неделя|  
|`DateInterval.WeekOfYear`|НН|Календарная неделя|  
|`DateInterval.Year`|"yyyy"|Year|  
  
 `DayOfWeek` Аргумент может иметь один из следующих параметров.  
  
|Значение перечисления|Значение|Описание|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Первый день недели, указанный в параметрах системы|  
|`FirstDayOfWeek.Sunday`|1|Воскресенье (по умолчанию)|  
|`FirstDayOfWeek.Monday`|2|Понедельник (соответствует стандарту ISO 8601, раздел 3,17)|  
|`FirstDayOfWeek.Tuesday`|3|Вторник|  
|`FirstDayOfWeek.Wednesday`|4|среда|  
|`FirstDayOfWeek.Thursday`|5|Четверг|  
|`FirstDayOfWeek.Friday`|6|пятница|  
|`FirstDayOfWeek.Saturday`|7|Суббота|  
  
 `WeekOfYear` Аргумент может иметь один из следующих параметров.  
  
|Значение перечисления|Значение|Описание|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Первая неделя года, указанная в параметрах системы|  
|`FirstWeekOfYear.Jan1`|1|Неделя, в которой происходит 1 января (по умолчанию)|  
|`FirstWeekOfYear.FirstFourDays`|2|Неделя, в которой в новом году по крайней мере четыре дня (соответствует стандарту ISO 8601, раздел 3,17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Первая полная неделя в новом году|  
  
   
  
## Examples  
 В этом примере `DateDiff` функция используется для вывода количества дней между заданной и текущей датами.  
  
 [!code-vb[VbVbalrFunctions#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Значение <paramref name="Date1" />, <paramref name="Date2" /> или <paramref name="DayofWeek" /> выходит за пределы допустимого диапазона.</exception>
        <exception cref="T:System.InvalidCastException">Значение <paramref name="Date1" /> или <paramref name="Date2" /> имеет недопустимый тип.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DatePart">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает целочисленное значение, содержащее указанный компонент данного значения типа <see langword="Date" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DatePart">
      <MemberSignature Language="C#" Value="public static int DatePart (Microsoft.VisualBasic.DateInterval Interval, DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 DatePart(valuetype Microsoft.VisualBasic.DateInterval Interval, valuetype System.DateTime DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue, valuetype Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DatePart (Interval As DateInterval, DateValue As DateTime, Optional FirstDayOfWeekValue As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional FirstWeekOfYearValue As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Integer" />
      <MemberSignature Language="F#" Value="static member DatePart : Microsoft.VisualBasic.DateInterval * DateTime * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.DatePart (Interval, DateValue, FirstDayOfWeekValue, FirstWeekOfYearValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="DateValue" Type="System.DateTime" />
        <Parameter Name="FirstDayOfWeekValue" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="FirstWeekOfYearValue" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Обязательный. Значение перечисления <see cref="T:Microsoft.VisualBasic.DateInterval" /> или строковое выражение, представляющие возвращаемую часть даты или времени.</param>
        <param name="DateValue">Обязательный. Значение <see langword="Date" />, которое требуется вычислить.</param>
        <param name="FirstDayOfWeekValue">Необязательный параметр. Значение, выбранное из перечисления <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" />, указывающее первый день недели. Если этот параметр не задан, используется значение <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" />.</param>
        <param name="FirstWeekOfYearValue">Необязательный параметр. Значение, выбранное из перечисления <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" />, указывающее первую неделю года. Если этот параметр не задан, используется значение <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" />.</param>
        <summary>Возвращает целочисленное значение, содержащее указанный компонент данного значения типа <see langword="Date" />.</summary>
        <returns>Целочисленное значение, содержащее указанный компонент данного значения типа <see langword="Date" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DatePart` Функцию можно использовать для вычисления значения даты и времени и возврата определенного компонента. Например, можно использовать `DatePart` для вычисления дня недели или текущего часа.  
  
 При выборе `DateInterval.Weekday` `Interval` аргумента возвращаемое значение согласуется `FirstDayOfWeek` со значениями перечисления. `DateInterval.WeekOfYear`При выборе `DatePart` параметра использует <xref:System.Globalization.Calendar> классы<xref:System.Globalization.CultureInfo> и пространстваимендляопределениятекущихпараметров.<xref:System.Globalization>  
  
 Аргумент влияет на вычисления, в `DateInterval.Weekday` которых используются `DateInterval.WeekOfYear` параметры и. `Interval` `FirstDayOfWeekValue` Аргумент влияет на вычисления, заданное `Interval` `DateInterval.WeekOfYear`для. `FirstWeekOfYearValue`  
  
 Поскольку все `Date` значения поддерживаются <xref:System.DateTime> структурой, ее методы предоставляют дополнительные возможности для получения частей даты и времени. Например, можно получить все значение `Date` даты переменной со значением времени, установленным в полночь, следующим образом:  
  
```vb  
Dim CurrDatTim As Date = Now   ' Current date and time.  
Dim LastMidnight As Date = CurrDatTim.Date   ' At midnight.  
```  
  
 `Interval` Аргумент может иметь один из следующих параметров.  
  
|Значение перечисления|String|Часть значения даты и времени для возврата|  
|-----------------------|------------|----------------------------------------|  
|`DateInterval.Day`|d|День месяца (от 1 до 31)|  
|`DateInterval.DayOfYear`|y|День года (от 1 до 366)|  
|`DateInterval.Hour`|h|Hour|  
|`DateInterval.Minute`|n|Minute|  
|`DateInterval.Month`|m|Месяц.|  
|`DateInterval.Quarter`|q|Выплат|  
|`DateInterval.Second`|s|Second|  
|`DateInterval.Weekday`|если|День недели (от 1 до 7)|  
|`DateInterval.WeekOfYear`|НН|Неделя года (от 1 до 53)|  
|`DateInterval.Year`|yyyy|Year|  
  
 `FirstDayOfWeekValue` Аргумент может иметь один из следующих параметров.  
  
|Значение перечисления|Значение|Описание|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Первый день недели, указанный в параметрах системы|  
|`FirstDayOfWeek.Sunday`|1|Воскресенье (по умолчанию)|  
|`FirstDayOfWeek.Monday`|2|Понедельник (соответствует стандарту ISO 8601, раздел 3,17)|  
|`FirstDayOfWeek.Tuesday`|3|Вторник|  
|`FirstDayOfWeek.Wednesday`|4|среда|  
|`FirstDayOfWeek.Thursday`|5|Четверг|  
|`FirstDayOfWeek.Friday`|6|пятница|  
|`FirstDayOfWeek.Saturday`|7|Суббота|  
  
 `FirstWeekOfYearValue` Аргумент может иметь один из следующих параметров.  
  
|Значение перечисления|Значение|Описание|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Первая неделя года, указанная в параметрах системы|  
|`FirstWeekOfYear.Jan1`|1|Неделя, в которой происходит 1 января (по умолчанию)|  
|`FirstWeekOfYear.FirstFourDays`|2|Неделя, в которой в новом году по крайней мере четыре дня (соответствует стандарту ISO 8601, раздел 3,17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Первая полная неделя в новом году|  
  
   
  
## Examples  
 Этот пример принимает дату и, используя `DatePart` функцию, отображает квартал года, в котором он встречается.  
  
 [!code-vb[VbVbalrFunctions#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Недопустимый параметр <paramref name="Interval" />.</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" /> не может быть приведен к <see langword="Date" />.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DatePart">
      <MemberSignature Language="C#" Value="public static int DatePart (string Interval, object DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 DatePart(string Interval, object DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DatePart (Interval As String, DateValue As Object, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Integer" />
      <MemberSignature Language="F#" Value="static member DatePart : string * obj * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.DatePart (Interval, DateValue, DayOfWeek, WeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="DateValue" Type="System.Object" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Обязательный. Значение перечисления <see cref="T:Microsoft.VisualBasic.DateInterval" /> или строковое выражение, представляющие возвращаемую часть даты или времени.</param>
        <param name="DateValue">Обязательный. Значение <see langword="Date" />, которое требуется вычислить.</param>
        <param name="DayOfWeek">Необязательный параметр. Значение, выбранное из перечисления <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" />, указывающее первый день недели. Если этот параметр не задан, используется значение <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" />.</param>
        <param name="WeekOfYear">Необязательный параметр. Значение, выбранное из перечисления <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" />, указывающее первую неделю года. Если этот параметр не задан, используется значение <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" />.</param>
        <summary>Возвращает значение, содержащее указанный компонент заданного значения типа <see langword="Date" />.</summary>
        <returns>Целочисленное значение, содержащее указанный компонент данного значения типа <see langword="Date" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DatePart` Функцию можно использовать для вычисления значения даты и времени и возврата определенного компонента. Например, можно использовать `DatePart` для вычисления дня недели или текущего часа.  
  
 При выборе `DateInterval.Weekday` `Interval` аргумента возвращаемое значение согласуется `FirstDayOfWeek` со значениями перечисления. `DateInterval.WeekOfYear`При выборе `DatePart` параметра использует <xref:System.Globalization.Calendar> классы<xref:System.Globalization.CultureInfo> и пространстваимендляопределениятекущихпараметров.<xref:System.Globalization>  
  
 Аргумент влияет на вычисления, в `DateInterval.Weekday` которых используются `DateInterval.WeekOfYear` параметры и. `Interval` `FirstDayOfWeekValue` Аргумент влияет на вычисления, заданное `Interval` `DateInterval.WeekOfYear`для. `FirstWeekOfYearValue`  
  
 Поскольку все `Date` значения поддерживаются <xref:System.DateTime> структурой, ее методы предоставляют дополнительные возможности для получения частей даты и времени. Например, можно получить все значение `Date` даты переменной со значением времени, установленным в полночь, следующим образом:  
  
```vb  
Dim CurrDatTim As Date = Now   ' Current date and time.  
Dim LastMidnight As Date = CurrDatTim.Date   ' At midnight.  
```  
  
 `Interval` Аргумент может иметь один из следующих параметров.  
  
|Значение перечисления|String|Часть значения даты и времени для возврата|  
|-----------------------|------------|----------------------------------------|  
|`DateInterval.Day`|d|День месяца (от 1 до 31)|  
|`DateInterval.DayOfYear`|y|День года (от 1 до 366)|  
|`DateInterval.Hour`|h|Hour|  
|`DateInterval.Minute`|n|Minute|  
|`DateInterval.Month`|m|Месяц.|  
|`DateInterval.Quarter`|q|Выплат|  
|`DateInterval.Second`|s|Second|  
|`DateInterval.Weekday`|если|День недели (от 1 до 7)|  
|`DateInterval.WeekOfYear`|НН|Неделя года (от 1 до 53)|  
|`DateInterval.Year`|yyyy|Year|  
  
 `FirstDayOfWeekValue` Аргумент может иметь один из следующих параметров.  
  
|Значение перечисления|Значение|Описание|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Первый день недели, указанный в параметрах системы|  
|`FirstDayOfWeek.Sunday`|1|Воскресенье (по умолчанию)|  
|`FirstDayOfWeek.Monday`|2|Понедельник (соответствует стандарту ISO 8601, раздел 3,17)|  
|`FirstDayOfWeek.Tuesday`|3|Вторник|  
|`FirstDayOfWeek.Wednesday`|4|среда|  
|`FirstDayOfWeek.Thursday`|5|Четверг|  
|`FirstDayOfWeek.Friday`|6|пятница|  
|`FirstDayOfWeek.Saturday`|7|Суббота|  
  
 `FirstWeekOfYearValue` Аргумент может иметь один из следующих параметров.  
  
|Значение перечисления|Значение|Описание|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Первая неделя года, указанная в параметрах системы|  
|`FirstWeekOfYear.Jan1`|1|Неделя, в которой происходит 1 января (по умолчанию)|  
|`FirstWeekOfYear.FirstFourDays`|2|Неделя, в которой в новом году по крайней мере четыре дня (соответствует стандарту ISO 8601, раздел 3,17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Первая полная неделя в новом году|  
  
   
  
## Examples  
 Этот пример принимает дату и, используя `DatePart` функцию, отображает квартал года, в котором он встречается.  
  
 [!code-vb[VbVbalrFunctions#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" /> недопустим.</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" /> не может быть приведен к <see langword="Date" />.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateSerial">
      <MemberSignature Language="C#" Value="public static DateTime DateSerial (int Year, int Month, int Day);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateSerial(int32 Year, int32 Month, int32 Day) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateSerial (Year As Integer, Month As Integer, Day As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateSerial(int Year, int Month, int Day);" />
      <MemberSignature Language="F#" Value="static member DateSerial : int * int * int -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateSerial (Year, Month, Day)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Year" Type="System.Int32" />
        <Parameter Name="Month" Type="System.Int32" />
        <Parameter Name="Day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Year">Обязательный. Целочисленное выражение со значениями от 1 до 9999. Однако значения, которые меньше этого диапазона, также являются допустимыми. Как объясняется ниже в разделе "Примечания", значение параметра <paramref name="Year" /> от 0 до 99 представляет соответствующий год в диапазоне от 1930 до 2029. Если значение параметра <paramref name="Year" /> меньше 1, оно вычитается из текущего года.</param>
        <param name="Month">Обязательный. Целочисленное выражение со значениями от 1 до 12. Однако значения, находящиеся за пределами этого диапазона, также являются допустимыми. Значение параметра <paramref name="Month" /> смещается на 1 и применяется к январю вычисляемого года. Другими словами, к январю добавляется значение (<paramref name="Month" /> - 1). При необходимости год вычисляется заново. Следующие результаты поясняют этот эффект. 
Если значение <paramref name="Month" /> равно 1, то результатом вычислений будет январь расчетного года.  
  
Если значение <paramref name="Month" /> равно 0, то результатом вычислений будет декабрь предыдущего года.  
  
Если значение <paramref name="Month" /> равно -1, то результатом вычислений будет ноябрь предыдущего года.  
  
Если значение <paramref name="Month" /> равно 13, то результатом является январь следующего года.</param>
        <param name="Day">Обязательный. Целочисленное выражение со значениями от 1 до 31. Однако значения, находящиеся за пределами этого диапазона, также являются допустимыми. Значение аргумента <paramref name="Day" /> смещается на 1 и применяется к первому дню расчетного месяца. Другими словами, к первому дню месяца добавляется значение (<paramref name="Day" /> - 1). При необходимости месяц и год вычисляются заново. Следующие результаты поясняют этот эффект. 
Если значение <paramref name="Day" /> равно 1, то результатом вычислений будет первый день расчетного месяца.  
  
Если значение <paramref name="Day" /> равно 0, то результатом вычислений будет последний день предыдущего месяца.  
  
Если значение <paramref name="Day" /> равно -1, то результатом вычислений будет предпоследний день предыдущего месяца.  
  
Если значение аргумента <paramref name="Day" /> превышает число дней текущего месяца, результатом вычислений будет соответствующий день следующего месяца. Например, если значение параметра <paramref name="Month" /> равно 4, а значение <paramref name="Day" /> равно 31, результатом вычислений будет 1 мая.</param>
        <summary>Возвращает значение типа <see langword="Date" />, представляющее заданный год, месяц и день с временем, установленным на полночь (00:00:00).</summary>
        <returns>Значение типа <see langword="Date" />, представляющее заданный год, месяц и день со временем, установленным на полночь (00:00:00).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В Windows 98 или Windows 2000 двузначные цифры года для `Year` аргумента обрабатываются на основе определяемых пользователем параметров компьютера. Параметры по умолчанию: значения от 0 до 29 обрабатываются как годы 2000-2029, а значения от 30 до 99 — как годы 1930-1999. Для всех остальных `Year` аргументов используйте четырехзначный год, например 1924.  
  
 В более ранних версиях Windows годы двух цифр обрабатываются на основе значений по умолчанию, описанных выше. Чтобы убедиться, что функция возвращает правильное значение, используйте четыре цифры `Year`.  
  
 В следующем примере показаны отрицательные, нулевые и положительные значения аргументов. Здесь функция возвращает значение `Date` , представляющее день до первого дня марта в течение 10 лет, предшествующий текущему году; иными словами, последний день из десяти лет назад. `DateSerial`  
  
```vb  
Dim EndFeb As Date = DateSerial(-10, 3, 0)  
```  
  
 Если значение `Month` или `Day` превышает нормальный диапазон, оно применяется к следующей более крупной единице, если это необходимо. Например, если указать 32 дней, оно вычисляется как один месяц и от одного до четырех дней в зависимости от значения `Month`. Если `Year` значение больше 9999 или аргумент находится вне диапазона от-2 147 483 648 до 2 147 483 647 <xref:System.ArgumentException> , возникает ошибка. Если дата, заданная тремя аргументами, предшествует 00:00:00 1 января 1 года или более поздней, чем 23:59:59, в течение 31 декабря 9999, <xref:System.ArgumentOutOfRangeException> возникнет ошибка.  
  
 Тип `Date` данных включает компоненты времени. `DateSerial`устанавливает все эти значения равными 0, поэтому возвращаемое значение представляет начало расчетного дня.  
  
 Поскольку все `Date` значения поддерживаются <xref:System.DateTime> структурой, ее методы предоставляют дополнительные `Date` возможности при сборке значения. Например, можно использовать один из перегруженных <xref:System.DateTime.%23ctor%2A> конструкторов для заполнения `Date` переменной с помощью требуемого сочетания компонентов. В следующем примере устанавливается `NewDateTime` значение 6 мая 1978 в десятую часть секунды до 8:30 в утро:  
  
```vb  
Dim NewDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)  
```  
  
   
  
## Examples  
 В этом примере `DateSerial` функция возвращает дату для указанного года, месяца и дня.  
  
 [!code-vb[VbVbalrFunctions#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateString">
      <MemberSignature Language="C#" Value="public static string DateString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string DateString" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.DateString" />
      <MemberSignature Language="VB.NET" Value="Public Property DateString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ DateString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DateString : string with get, set" Usage="Microsoft.VisualBasic.DateAndTime.DateString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает строковое значение, представляющее текущую дату по часам компьютера.</summary>
        <value>Возвращает или задает строковое значение, представляющее текущую дату по часам компьютера.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DateString`Возвращает системную дату в формате мм-дд-гггг, которая использует сокращенное название месяца. Допустимые форматы даты: M-d-гггг, M-d-y, M/d/гггг и M/d/y. Это справедливо для всех национальных настроек системы, за исключением тех, которые используют двухбайтовую кодировку (DBCS). Если в национальной настройке системы используется двухбайтовая кодировка, `DateString` возвращает системную дату в формате гггг-мм-дд. Языковой стандарт системы задается с помощью элемента **часы, язык и регион** на **панели управления**.  
  
 **Примечание** . Свойство возвращает системную дату только в формате гггг-мм-дд `zh` для языковых стандартов (упрощенное письмо) `ko` , (корейский) и `ja` (японский), если вы используете Visual Basic в Silverlight. `DateString`  
  
 Чтобы получить или задать текущее системное время как `String`, <xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A> используйте свойство.  
  
 Чтобы получить текущую системную дату или время в формате языкового стандарта или в пользовательском формате, укажите <xref:Microsoft.VisualBasic.DateAndTime.Now%2A> <xref:Microsoft.VisualBasic.Strings.Format%2A> для функции свойство, указав предопределенный или определяемый пользователем формат даты и времени. В следующем примере это показано.  
  
```vb  
MsgBox("The formatted date is " & Format(Now, "dddd, d MMM yyyy"))  
```  
  
 Чтобы получить доступ к текущей системной дате как `Date`, <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> используйте свойство.  
  
> [!IMPORTANT]
>  Установка системной даты или времени требует разрешения на неуправляемый код, что может повлиять на его выполнение в ситуациях частичного доверия. Дополнительные сведения см. в <xref:System.Security.Permissions.SecurityPermission> разделе и [разрешения на доступ к коду](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 В следующем примере `DateString` свойство используется для вывода текущей системной даты.  
  
 [!code-vb[VbVbalrDateProperties#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Недопустимый формат используется для задания значения <see cref="T:Microsoft.VisualBasic.DateAndTime.DateString" />.</exception>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeString" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Today" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="DateValue">
      <MemberSignature Language="C#" Value="public static DateTime DateValue (string StringDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateValue(string StringDate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateValue (StringDate As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateValue(System::String ^ StringDate);" />
      <MemberSignature Language="F#" Value="static member DateValue : string -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateValue StringDate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringDate" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="StringDate">Обязательный. Строковое выражение, представляющее значение даты и времени в диапазоне от 00:00:00 1 января 1 года до 23:59:59 31 декабря 9999 года.</param>
        <summary>Возвращает значение типа <see langword="Date" />, содержащее строковое представление даты с временем, установленным на полночь (00:00:00).</summary>
        <returns>Значение типа <see langword="Date" />, содержащее строковое представление даты с временем, установленным на полночь (00:00:00).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `StringDate` содержит только числа от 1 до 12, разделенные допустимыми разделителями `DateValue` дат, распознает порядок для месяца, дня и года в соответствии с кратким форматом даты, указанным для системы. `DateValue`использует текущий параметр календаря из <xref:System.Globalization.CultureInfo.CurrentCulture%2A> свойства <xref:System.Globalization.CultureInfo> класса в <xref:System.Globalization> пространстве имен. Значения по <xref:System.Globalization.CultureInfo.CurrentCulture%2A> умолчанию определяются параметрами **панели управления** . Короткий формат даты можно переопределить, задав <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> свойство <xref:System.Globalization.DateTimeFormatInfo> класса в <xref:System.Globalization> пространстве имен.  
  
 `DateValue`распознает названия месяцев в длинном, сокращенном и числовом формате. Например, помимо распознавания 12/30/1991 и 12/30/91, `DateValue` также распознает 30 декабря 1991 и 30 декабря 1991.  
  
 Если часть `StringDate` года не указана, `DateValue` использует текущий год из системной даты компьютера.  
  
 Если аргумент содержит сведения о времени, `DateValue` не включает его в возвращаемое значение. `StringDate` Однако если `StringDate` содержит недопустимые сведения о времени, например "89:98" <xref:System.InvalidCastException> , возникает ошибка.  
  
   
  
## Examples  
 В этом примере `DateValue` функция используется для преобразования строки в дату. Можно также использовать литералы даты для непосредственного присвоения даты `Object` `oldDate = #2/12/69#`переменной или `Date` , например.  
  
 [!code-vb[VbVbalrFunctions#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Параметр <paramref name="StringDate" /> содержит недопустимое значение времени.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public static int Day (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Day(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Day (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Day(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Day : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Day DateValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">Обязательный. Значение типа <see langword="Date" />, из которого нужно извлечь день.</param>
        <summary>Возвращает целочисленное значение в диапазоне от 1 до 31, представляющее день месяца.</summary>
        <returns>Целочисленное значение в диапазоне от 1 до 31, представляющее день месяца.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если вы используете `Day` функцию, возможно, потребуется уточнить ее `Microsoft.VisualBasic` с помощью пространства имен, поскольку <xref:System.Windows.Forms> пространство имен определяет <xref:System.Windows.Forms.Day> как перечисление. В следующем примере показано, как уточнение `Day` устраняет эту неоднозначность:  
  
```vb  
Dim thisDay As Integer = Microsoft.VisualBasic.DateAndTime.Day(Now)  
```  
  
 Можно также получить день месяца, вызвав метод `DatePart` и указав `DateInterval.Day` аргумент *Interval* .  
  
   
  
## Examples  
 В следующем примере `Day` функция используется для получения дня месяца из указанной даты. В среде разработки литерал даты отображается в стандартном коротком формате (например, "02/12/1969") с использованием параметров языкового стандарта кода.  
  
 [!code-vb[VbVbalrFunctions#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#30)]  
  
 `Day`является полным, чтобы отличать его от <xref:System.Windows.Forms.Day?displayProperty=nameWithType> перечисления.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public static int Hour (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Hour(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hour (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Hour(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Hour : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Hour TimeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">Обязательный. Значение типа <see langword="Date" />, из которого нужно извлечь час.</param>
        <summary>Возвращает целочисленное значение в диапазоне от 0 до 23, представляющее час суток.</summary>
        <returns>Целочисленное значение в диапазоне от 0 до 23, представляющее час суток.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно также получить час дня, вызвав метод `DatePart` и указав `DateInterval.Hour` для `Interval` аргумента.  
  
   
  
## Examples  
 В этом примере `Hour` функция используется для получения часа из указанного времени. В среде разработки литерал времени отображается в кратком формате времени с использованием параметров языкового стандарта кода.  
  
 [!code-vb[VbVbalrFunctions#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public static int Minute (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Minute(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Minute (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Minute(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Minute : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Minute TimeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">Обязательный. Значение типа <see langword="Date" />, из которого нужно извлечь минуты.</param>
        <summary>Возвращает целочисленное значение в диапазоне от 0 до 59, представляющее минуту часа.</summary>
        <returns>Целочисленное значение в диапазоне от 0 до 59, представляющее минуту часа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно также получить минуты часа, вызвав метод `DatePart` и указав `DateInterval.Minute` для `Interval` аргумента.  
  
   
  
## Examples  
 В этом примере `Minute` функция используется для получения минуты часа из указанного времени. В среде разработки литерал времени отображается в кратком формате времени с использованием параметров языкового стандарта кода.  
  
 [!code-vb[VbVbalrFunctions#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public static int Month (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Month(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Month (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Month(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Month : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Month DateValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">Обязательный. Значение типа <see langword="Date" />, из которого нужно извлечь месяц.</param>
        <summary>Возвращает целочисленное значение в диапазоне от 1 до 12, представляющее месяц года.</summary>
        <returns>Целочисленное значение в диапазоне от 1 до 12, представляющее месяц года.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно также получить месяц года, вызвав метод `DatePart` и указав `DateInterval.Month` для `Interval` аргумента.  
  
   
  
## Examples  
 В этом примере `Month` функция используется для получения месяца из указанной даты. В среде разработки литерал даты отображается в кратком формате даты с использованием параметров языкового стандарта кода.  
  
 [!code-vb[VbVbalrFunctions#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#43)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="MonthName">
      <MemberSignature Language="C#" Value="public static string MonthName (int Month, bool Abbreviate = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static string MonthName(int32 Month, bool Abbreviate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function MonthName (Month As Integer, Optional Abbreviate As Boolean = false) As String" />
      <MemberSignature Language="F#" Value="static member MonthName : int * bool -&gt; string" Usage="Microsoft.VisualBasic.DateAndTime.MonthName (Month, Abbreviate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Month" Type="System.Int32" />
        <Parameter Name="Abbreviate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Month">Обязательный. Числовое представление месяца со значениями от 1 до 13; 1 обозначает январь, 12 — декабрь. Можно использовать значение 13 в 13-месячном календаре. Если в системе используется 12-месячный календарь, а значение <paramref name="Month" /> равно 13, функция <c>MonthName</c> возвращает пустую строку.</param>
        <param name="Abbreviate">Необязательный параметр. Значение <see langword="True" />, чтобы сократить имя месяца; в противном случае значение <see langword="False" />. Значение по умолчанию — <see langword="False" />.</param>
        <summary>Возвращает строковое значение, содержащее название указанного месяца.</summary>
        <returns>Строковое значение, содержащее название указанного месяца.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Строка, возвращаемая `MonthName` , зависит не только от входных аргументов, но и от **региональных** параметров, заданных на **панели управления**Windows.  
  
> [!NOTE]
>  `MonthName`использует текущий параметр календаря из <xref:System.Globalization.CultureInfo.CurrentCulture%2A> свойства <xref:System.Globalization.CultureInfo> класса в <xref:System.Globalization> пространстве имен. Значения по <xref:System.Globalization.CultureInfo.CurrentCulture%2A> умолчанию определяются параметрами **панели управления** .  
  
   
  
## Examples  
 В этом примере `MonthName` функция используется для определения названия месяца, заданного целым числом. Логическое значение определит, будет ли отображаться полное имя (`False`) или сокращенное имя (`True`).  
  
 [!code-vb[VbVbalrFunctions#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#44)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Month" /> меньше 1 или больше 13.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="N:System" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Now" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Now As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Now { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTime" Usage="Microsoft.VisualBasic.DateAndTime.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, содержащее текущие системные значения даты и времени.</summary>
        <value>Текущие дата и время в соответствии с вашей системой.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы задать системную дату, используйте <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> свойство. Чтобы задать системное время, используйте <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> свойство.  
  
   
  
## Examples  
 В следующем примере `Now` свойство используется для возврата текущей системной даты и времени.  
  
 [!code-vb[VbVbalrDateProperties#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public static int Second (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Second(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Second (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Second(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Second : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Second TimeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">Обязательный. Значение типа <see langword="Date" />, из которого нужно извлечь секунды.</param>
        <summary>Возвращает целочисленное значение в диапазоне от 0 до 59, представляющее секунду в минуте.</summary>
        <returns>Целочисленное значение в диапазоне от 0 до 59, представляющее секунду в минуте.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно также получить вторую пару минут, вызвав метод `DatePart` и указав `DateInterval.Second` `Interval` аргумент.  
  
   
  
## Examples  
 В следующем примере `Second` функция используется для получения второй минуты из указанного времени. В среде разработки литерал времени отображается в кратком формате времени с использованием параметров языкового стандарта кода.  
  
 [!code-vb[VbVbalrFunctions#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public static DateTime TimeOfDay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeOfDay As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime TimeOfDay { DateTime get(); void set(DateTime value); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : DateTime with get, set" Usage="Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение типа <see langword="Date" />, содержащее текущее время суток (системное).</summary>
        <value>Возвращает или задает значение типа <see langword="Date" />, содержащее текущее время суток (системное).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Тип `Date` данных включает компоненты даты. При возврате системного времени `TimeOfDay` все эти значения устанавливаются в 1, поэтому возвращаемое значение представляет первый день года 1. При установке системного времени `TimeOfDay` игнорирует компоненты даты.  
  
 Чтобы получить доступ к текущему системному `String`времени как, <xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A> используйте свойство.  
  
 Чтобы получить или задать текущую системную дату, используйте <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> свойство.  
  
> [!IMPORTANT]
>  Установка системной даты или времени требует разрешения на неуправляемый код, что может повлиять на его выполнение в ситуациях частичного доверия. Дополнительные сведения см. в <xref:System.Security.Permissions.SecurityPermission> разделе и [разрешения на доступ к коду](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 В этом примере `TimeOfDay` свойство используется для возврата текущего системного времени.  
  
 [!code-vb[VbVbalrDateProperties#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Timer" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Timer">
      <MemberSignature Language="C#" Value="public static double Timer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property float64 Timer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Timer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Timer As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property double Timer { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Timer : double" Usage="Microsoft.VisualBasic.DateAndTime.Timer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение типа <see cref="T:System.Double" />, представляющее число секунд, прошедших после полуночи.</summary>
        <value>Значение, представляющее число секунд, истекших с полуночи.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Timer` Свойство возвращает секунды и миллисекунды с момента последнего полуночи. Секунды находятся в целой части возвращаемого значения, а миллисекунды — в дробной части.  
  
   
  
## Examples  
 В этом примере `Timer` свойство используется для приостановки работы приложения. Она может выполнять другую обработку во время паузы.  
  
 [!code-vb[VbVbalrTimerProperty#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTimerProperty/VB/Form1.vb#1)]  
  
 Обратите внимание, `Timer` что свойство необходимо квалифицировать <xref:Microsoft.VisualBasic?displayProperty=nameWithType> с помощью пространства имен `Timer` , поскольку также является определенным классом <xref:System.Threading?displayProperty=nameWithType>в <xref:System.Timers?displayProperty=nameWithType>пространствах <xref:System.Windows.Forms?displayProperty=nameWithType> имен, и.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.VBMath.Randomize" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Today" />
        <altmember cref="N:System" />
        <altmember cref="N:System.Windows.Forms" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="TimeSerial">
      <MemberSignature Language="C#" Value="public static DateTime TimeSerial (int Hour, int Minute, int Second);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime TimeSerial(int32 Hour, int32 Minute, int32 Second) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TimeSerial (Hour As Integer, Minute As Integer, Second As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime TimeSerial(int Hour, int Minute, int Second);" />
      <MemberSignature Language="F#" Value="static member TimeSerial : int * int * int -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.TimeSerial (Hour, Minute, Second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Hour" Type="System.Int32" />
        <Parameter Name="Minute" Type="System.Int32" />
        <Parameter Name="Second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Hour">Обязательный. Целочисленное выражение со значениями от 0 до 23. Однако значения, находящиеся за пределами этого диапазона, также являются допустимыми.</param>
        <param name="Minute">Обязательный. Целочисленное выражение со значениями от 0 до 59. Однако значения, находящиеся за пределами этого диапазона, также являются допустимыми. Значение параметра <paramref name="Minute" /> добавляется к расчетному часу, и отрицательное значение указывает минуты до наступления этого часа.</param>
        <param name="Second">Обязательный. Целочисленное выражение со значениями от 0 до 59. Однако значения, находящиеся за пределами этого диапазона, также являются допустимыми. Значение параметра <paramref name="Second" /> добавляется к вычисленным минутам, поэтому отрицательное значение указывает секунды до наступления этой минуты.</param>
        <summary>Возвращает значение типа <see langword="Date" />, представляющее заданный час, минуту и секунду, при этом дата установлена относительно 1 января 1 года.</summary>
        <returns>Значение типа <see langword="Date" />, представляющее заданный час, минуту и секунду, при этом дата установлена относительно 1 января 1 года.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В следующем примере показаны отрицательные, нулевые и положительные значения аргументов. `TimeSerial` Функция возвращает время, представляющее 15 минут до полудня, или 8:45:00 AM.  
  
```vb  
Dim alarmTime As Date = TimeSerial(12 - 3, -15, 0)  
```  
  
 Если значение `Minute` или `Second` превышает нормальный диапазон, оно применяется к следующей более крупной единице, если это необходимо. Например, если указать 75 минут, оно будет оцениваться как один час и 15 минут.  
  
 `TimeSerial`сокращает общее число секунд по модулю 86 400, которое представляет собой количество секунд в дне. Таким образом, возвращенное время всегда находится в диапазоне от 00:00:00 до 23:59:59.  
  
 Тип `Date` данных включает компоненты даты. `TimeSerial`устанавливает все эти значения в 1, поэтому возвращаемое значение представляет первый день года 1. Однако если значения аргументов приводят к вычисленному времени более 24 часов, при необходимости день увеличивается. В следующем примере значения `Hour` и `Minute` приводят к Объединенному времени более 24 часов.  
  
```vb  
MsgBox(TimeSerial(23, 75, 0))   
' The preceding statement displays "1/2/0001 12:15:00 AM".  
```  
  
 Если значения аргументов приводят к отрицательному расчетному времени, то сведения о дате устанавливаются в 1/1/0001, а сведения о времени — в диапазоне от 00:00:00 до 23:59:59. Однако если вычисленное время меньше числа 24 часов, <xref:System.ArgumentOutOfRangeException> возникает ошибка.  
  
 Поскольку все `Date` значения поддерживаются <xref:System.DateTime?displayProperty=nameWithType> структурой, ее методы предоставляют дополнительные `Date` возможности при сборке значения. Например, можно использовать один из перегруженных <xref:System.DateTime.%23ctor%2A> конструкторов для заполнения `Date` переменной с помощью требуемого сочетания компонентов. В следующем примере устанавливается `newDateTime` значение 6 мая 1978 в десятую часть секунды до 8:30 в утро:  
  
```vb  
Dim newDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)  
```  
  
   
  
## Examples  
 В следующем примере `TimeSerial` функция используется для возврата времени для указанного часа, минуты и секунды.  
  
 [!code-vb[VbVbalrFunctions#50](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Значение аргумента находится вне диапазона от -2147483648 до 2147483647</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Вычисленное время меньше, чем –24 (отрицательное значение) часа.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TimeString">
      <MemberSignature Language="C#" Value="public static string TimeString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string TimeString" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.TimeString" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ TimeString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TimeString : string with get, set" Usage="Microsoft.VisualBasic.DateAndTime.TimeString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или устанавливает строковое значение, которое представляет текущее время дня по часам компьютера.</summary>
        <value>Возвращает или устанавливает строковое значение, которое представляет текущее время дня по часам компьютера.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `TimeString`всегда возвращает системное время в формате "чч: мм: СС", который представляет собой 24-часовой формат. Этот формат инвариантен, т. е. он не изменяется даже при изменении **региональных параметров** на **панели управления**.  
  
 Чтобы получить или установить текущую системную дату как `String`, <xref:Microsoft.VisualBasic.DateAndTime.DateString%2A> используйте свойство.  
  
 Чтобы получить текущую системную дату или время в формате языкового стандарта или в пользовательском формате, укажите <xref:Microsoft.VisualBasic.DateAndTime.Now%2A> <xref:Microsoft.VisualBasic.Strings.Format%2A> для функции свойство, указав предопределенный или определяемый пользователем формат даты и времени. В следующем примере это показано.  
  
```vb  
MsgBox("The formatted time is " & Format(Now, "hh.mm.ss.fff tt"))  
```  
  
 Чтобы получить доступ к текущему системному `Date`времени как, <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> используйте свойство.  
  
> [!IMPORTANT]
>  Установка системной даты или времени требует разрешения на неуправляемый код, что может повлиять на его выполнение в ситуациях с частичным доверием. Дополнительные сведения см. в <xref:System.Security.Permissions.SecurityPermission> разделе и [разрешения на доступ к коду](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 В этом примере `TimeString` свойство используется для вывода текущего системного времени.  
  
 [!code-vb[VbVbalrDateProperties#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Недопустимый формат используется для задания значения <see langword="TimeString" />.</exception>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.DateString" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="TimeValue">
      <MemberSignature Language="C#" Value="public static DateTime TimeValue (string StringTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime TimeValue(string StringTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function TimeValue (StringTime As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime TimeValue(System::String ^ StringTime);" />
      <MemberSignature Language="F#" Value="static member TimeValue : string -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.TimeValue StringTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringTime" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="StringTime">Обязательный. Строковое выражение, представляющее значение даты и времени в диапазоне от 00:00:00 1 января 1 года до 23:59:59 31 декабря 9999 года.</param>
        <summary>Возвращает значение типа <see langword="Date" />, содержащее строковое представление времени с датой, установленной на 1 января 1 года.</summary>
        <returns>Значение типа <see langword="Date" />, содержащее строковое представление времени с датой, установленной на 1 января 1 года.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вы можете ввести допустимое время с помощью 12-часового или 24-часового времени. Например, `"2:24 P.M."` и `"14:24"` являются допустимыми `StringTime` аргументами.  
  
 Если аргумент содержит сведения о дате, `TimeValue` не включает его в возвращаемое значение. `StringTime` Однако если `StringTime` содержит недопустимые сведения о датах, например "Январь 32 <xref:System.InvalidCastException> ", возникает ошибка.  
  
   
  
## Examples  
 В следующем примере `TimeValue` функция используется для преобразования строки в время. Можно также использовать литералы даты, чтобы непосредственно назначить время `Date` переменной.  
  
 [!code-vb[VbVbalrFunctions#51](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="StringTime" /> содержит недопустимое значение даты.</exception>
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Today" />
      <MemberSignature Language="VB.NET" Value="Public Property Today As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Today { DateTime get(); void set(DateTime value); };" />
      <MemberSignature Language="F#" Value="member this.Today : DateTime with get, set" Usage="Microsoft.VisualBasic.DateAndTime.Today" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение <see langword="Date" />, содержащее текущую системную дату.</summary>
        <value>Возвращает или задает значение <see langword="Date" />, содержащее текущую системную дату.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Тип `Date` данных включает компоненты времени. При возврате системной даты `Today` устанавливает все эти значения равными 0, поэтому возвращаемое значение представляет полночь (00:00:00). При задании системной даты `Today` игнорирует компоненты времени.  
  
 Чтобы получить доступ к текущей системной дате как `String`, <xref:Microsoft.VisualBasic.DateAndTime.DateString%2A> используйте свойство.  
  
 Чтобы получить или задать текущее системное время, используйте <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> свойство.  
  
> [!IMPORTANT]
>  Установка системной даты или времени требует разрешения на неуправляемый код, что может повлиять на его выполнение в ситуациях частичного доверия. Дополнительные сведения см. в <xref:System.Security.Permissions.SecurityPermission> разделе и [разрешения на доступ к коду](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 В этом примере `Today` свойство используется для возврата текущей системной даты.  
  
 [!code-vb[VbVbalrDateProperties#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Weekday">
      <MemberSignature Language="C#" Value="public static int Weekday (DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Weekday(valuetype System.DateTime DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weekday (DateValue As DateTime, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday) As Integer" />
      <MemberSignature Language="F#" Value="static member Weekday : DateTime * Microsoft.VisualBasic.FirstDayOfWeek -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Weekday (DateValue, DayOfWeek)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
      </Parameters>
      <Docs>
        <param name="DateValue">Обязательный. Значение типа <see langword="Date" />, для которого требуется определить день недели.</param>
        <param name="DayOfWeek">Необязательный параметр. Значение, выбранное из перечисления <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" />, указывающее первый день недели. Если этот параметр не задан, используется значение <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" />.</param>
        <summary>Возвращает целочисленное значение, которое содержит число, представляющее день недели.</summary>
        <returns>Целочисленное значение, которое содержит число, представляющее день недели.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение, возвращаемое `Weekday` функцией, соответствует значениям `FirstDayOfWeek` перечисления, т. е. 1 обозначает воскресенье, а 7 — субботу.  
  
> [!NOTE]
>  `Weekday`использует текущий параметр календаря из <xref:System.Globalization.CultureInfo.CurrentCulture%2A> свойства <xref:System.Globalization.CultureInfo> класса в <xref:System.Globalization> пространстве имен. Значения по <xref:System.Globalization.CultureInfo.CurrentCulture%2A> умолчанию определяются параметрами **панели управления** .  
  
 `DayOfWeek` Аргумент может иметь один из следующих параметров.  
  
|Значение перечисления|Значение|Описание|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Первый день недели, указанный в параметрах системы|  
|`FirstDayOfWeek.Sunday`|1|Воскресенье (по умолчанию)|  
|`FirstDayOfWeek.Monday`|2|Понедельник (соответствует стандарту ISO 8601, раздел 3,17)|  
|`FirstDayOfWeek.Tuesday`|3|Вторник|  
|`FirstDayOfWeek.Wednesday`|4|среда|  
|`FirstDayOfWeek.Thursday`|5|Четверг|  
|`FirstDayOfWeek.Friday`|6|пятница|  
|`FirstDayOfWeek.Saturday`|7|Суббота|  
  
   
  
## Examples  
 В следующем примере `Weekday` функция используется для получения дня недели из указанной даты.  
  
 [!code-vb[VbVbalrFunctions#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#57)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Значение параметра <paramref name="DayOfWeek" /> меньше 0 или больше 7.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="WeekdayName">
      <MemberSignature Language="C#" Value="public static string WeekdayName (int Weekday, bool Abbreviate = false, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.System);" />
      <MemberSignature Language="ILAsm" Value=".method public static string WeekdayName(int32 Weekday, bool Abbreviate, valuetype Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
      <MemberSignature Language="VB.NET" Value="Public Function WeekdayName (Weekday As Integer, Optional Abbreviate As Boolean = false, Optional FirstDayOfWeekValue As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.System) As String" />
      <MemberSignature Language="F#" Value="static member WeekdayName : int * bool * Microsoft.VisualBasic.FirstDayOfWeek -&gt; string" Usage="Microsoft.VisualBasic.DateAndTime.WeekdayName (Weekday, Abbreviate, FirstDayOfWeekValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Weekday" Type="System.Int32" />
        <Parameter Name="Abbreviate" Type="System.Boolean" />
        <Parameter Name="FirstDayOfWeekValue" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
      </Parameters>
      <Docs>
        <param name="Weekday">Обязательный. Integer. Числовое обозначение дня недели со значениями от 1 до 7: 1 обозначает первый день недели, а 7 — последний. Первый и последний дни недели определяются значением параметра <paramref name="FirstDayOfWeekValue" />.</param>
        <param name="Abbreviate">Необязательный параметр. Значение типа <see langword="Boolean" />, указывающее, должно ли название дня недели быть представлено в сокращенном виде. Если параметр опущен, по умолчанию используется значение <see langword="False" />, определяющее, что имя дня недели представляется не в сокращенном виде.</param>
        <param name="FirstDayOfWeekValue">Необязательный параметр. Значение, выбранное из перечисления <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" />, указывающее первый день недели. Если этот параметр не задан, используется значение <see langword="FirstDayOfWeek.System" />.</param>
        <summary>Возвращает строковое значение, содержащее название указанного дня недели.</summary>
        <returns>Строковое значение, содержащее название указанного дня недели.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Строка, возвращаемая `WeekdayName` , зависит не только от входных аргументов, но и от **региональных** параметров, заданных на **панели управления**Windows.  
  
> [!NOTE]
>  `WeekdayName`использует текущий параметр календаря из <xref:System.Globalization.CultureInfo.CurrentCulture%2A> свойства <xref:System.Globalization.CultureInfo> класса в <xref:System.Globalization> пространстве имен. Значения по <xref:System.Globalization.CultureInfo.CurrentCulture%2A> умолчанию определяются параметрами **панели управления** .  
  
 `FirstDayOfWeekValue` Аргумент может иметь один из следующих параметров.  
  
|Значение перечисления|Значение|Описание|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Первый день недели, указанный в параметрах системы (по умолчанию)|  
|`FirstDayOfWeek.Sunday`|1|Воскресенье|  
|`FirstDayOfWeek.Monday`|2|Понедельник (соответствует стандарту ISO 8601, раздел 3,17)|  
|`FirstDayOfWeek.Tuesday`|3|Вторник|  
|`FirstDayOfWeek.Wednesday`|4|среда|  
|`FirstDayOfWeek.Thursday`|5|Четверг|  
|`FirstDayOfWeek.Friday`|6|пятница|  
|`FirstDayOfWeek.Saturday`|7|Суббота|  
  
   
  
## Examples  
 В следующем примере `Weekday` функция используется для получения дня недели из указанной даты, а `WeekDayName` затем функция возвращает имя дня недели из ее номера.  
  
 [!code-vb[VbVbalrFunctions#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Weekday" /> меньше 1 или больше 7 или <paramref name="FirstDayOfWeekValue" /> меньше 0 или больше 7.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public static int Year (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Year(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Year (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Year(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Year : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Year DateValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">Обязательный. Значение типа <see langword="Date" />, из которого нужно извлечь год.</param>
        <summary>Возвращает целочисленное значение в диапазоне от 1 до 9999, представляющее год.</summary>
        <returns>Целочисленное значение в диапазоне от 1 до 9999, представляющее год.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вы также можете получить год, вызвав `DatePart` метод и `DateInterval.Year` указав `Interval` аргумент.  
  
   
  
## Examples  
 В следующем примере `Year` функция используется для получения года из указанной даты. В среде разработки литерал даты отображается в кратком формате даты с использованием параметров языкового стандарта кода.  
  
 [!code-vb[VbVbalrFunctions#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
  </Members>
</Type>
