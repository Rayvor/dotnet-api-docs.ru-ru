<Type Name="Collection" FullName="Microsoft.VisualBasic.Collection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3588ff13fe448286520feaf805b4881898ea54a7" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70614536" /></Metadata><TypeSignature Language="C#" Value="public sealed class Collection : System.Collections.IList, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed Collection extends System.Object implements class System.Collections.ICollection, class System.Collections.IList, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Collection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Collection&#xA;Implements IDeserializationCallback, IList, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Collection sealed : System::Collections::IList, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type Collection = class&#xA;    interface ICollection&#xA;    interface IList&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(Microsoft.VisualBasic.Collection/CollectionDebugView))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="5f8ab-101">Коллекция <see langword="Collection" /> в Visual Basic — это упорядоченный набор элементов, на который можно ссылаться как на единое целое.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-101">A Visual Basic <see langword="Collection" /> is an ordered set of items that can be referred to as a unit.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="5f8ab-102">Везде, где это возможно, следует использовать универсальные коллекции <xref:System.Collections.Generic?displayProperty=nameWithType> в пространстве имен <xref:System.Collections.Concurrent> или пространстве имен вместо Visual Basic `Collection`.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-102">Whenever possible, you should use the generic collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace or the <xref:System.Collections.Concurrent> namespace instead of a Visual Basic `Collection`.</span></span> <span data-ttu-id="5f8ab-103">Дополнительные сведения см. в разделе [коллекции](https://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b).</span><span class="sxs-lookup"><span data-stu-id="5f8ab-103">For more information, see [Collections](https://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b).</span></span>  
  
 <span data-ttu-id="5f8ab-104">Объект Visual Basic `Collection` предоставляет удобный способ ссылки на связанную группу элементов в виде одного объекта.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-104">The Visual Basic `Collection` object provides a convenient way to refer to a related group of items as a single object.</span></span> <span data-ttu-id="5f8ab-105">Элементы или *элементы*в коллекции должны быть связаны только тем фактом, что они существуют в коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-105">The items, or *elements*, in a collection need only be related by the fact that they exist in the collection.</span></span> <span data-ttu-id="5f8ab-106">Элементы коллекции не должны совместно использовать один и тот же тип данных.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-106">Elements of a collection do not have to share the same data type.</span></span>  
  
 <span data-ttu-id="5f8ab-107">Коллекцию можно создать таким же образом, как и другие объекты, как показано в следующем примере.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-107">You can create a collection the same way you create other objects, as the following example illustrates.</span></span>  
  
```vb  
Dim coll As New Microsoft.VisualBasic.Collection()  
```  
  
 <span data-ttu-id="5f8ab-108">После создания коллекции можно выполнить любое из следующих действий.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-108">Once you have created a collection, you can do any of the following:</span></span>  
  
-   <span data-ttu-id="5f8ab-109">Добавьте элемент с помощью <xref:Microsoft.VisualBasic.Collection.Add%2A> метода.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-109">Add an element with the <xref:Microsoft.VisualBasic.Collection.Add%2A> method.</span></span>  
  
-   <span data-ttu-id="5f8ab-110">Удалите элемент с помощью <xref:Microsoft.VisualBasic.Collection.Remove%2A> метода.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-110">Remove an element with the <xref:Microsoft.VisualBasic.Collection.Remove%2A> method.</span></span>  
  
-   <span data-ttu-id="5f8ab-111">Удалите все элементы с помощью <xref:Microsoft.VisualBasic.Collection.Clear%2A> метода.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-111">Remove all elements with the <xref:Microsoft.VisualBasic.Collection.Clear%2A> method.</span></span>  
  
-   <span data-ttu-id="5f8ab-112">Определение количества элементов, содержащихся в коллекции, с <xref:Microsoft.VisualBasic.Collection.Count%2A> помощью свойства.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-112">Find out how many elements the collection contains with the <xref:Microsoft.VisualBasic.Collection.Count%2A> property.</span></span>  
  
-   <span data-ttu-id="5f8ab-113">Проверьте, имеется <xref:Microsoft.VisualBasic.Collection.Contains%2A> ли в методе конкретный элемент.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-113">Check whether a specific element is present with the <xref:Microsoft.VisualBasic.Collection.Contains%2A> method.</span></span>  
  
-   <span data-ttu-id="5f8ab-114">Возврат определенного элемента из коллекции со <xref:Microsoft.VisualBasic.Collection.Item%2A> свойством.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-114">Return a specific element from the collection with the <xref:Microsoft.VisualBasic.Collection.Item%2A> property.</span></span>  
  
-   <span data-ttu-id="5f8ab-115">Выполнить итерацию всей коллекции с помощью цикла [For Each... Следующий оператор](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span><span class="sxs-lookup"><span data-stu-id="5f8ab-115">Iterate through the entire collection with the [For Each...Next Statement](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="5f8ab-116">Хотя объект Visual Basic `Collection` имеет функции, идентичные `Collection` объекту в Visual Basic 6,0, эти два не могут взаимодействовать в среде com.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-116">Although the Visual Basic `Collection` object has functionality identical to the `Collection` object in Visual Basic 6.0, the two cannot interoperate in a COM environment.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="5f8ab-117">Итерация по Visual Basic `Collection` не является потокобезопасной процедурой.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-117">Iterating through a Visual Basic `Collection` is not a thread-safe procedure.</span></span> <span data-ttu-id="5f8ab-118">Даже если коллекция синхронизирована, другие потоки по-прежнему могут изменить коллекцию, в результате чего перечислитель создаст исключение.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-118">Even if the collection is synchronized, other threads can still modify the collection, causing the enumerator to throw an exception.</span></span> <span data-ttu-id="5f8ab-119">Чтобы гарантировать потокобезопасность при перечислении, заблокируйте коллекцию или перехватите исключения, полученные в результате изменений, внесенных другими потоками.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-119">To guarantee thread safety during enumeration, either lock the collection or catch the exceptions resulting from changes made by other threads.</span></span> <span data-ttu-id="5f8ab-120">Дополнительные сведения о блокировке программного элемента см. в разделе [оператор SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md).</span><span class="sxs-lookup"><span data-stu-id="5f8ab-120">For more information on locking a programming element, see [SyncLock Statement](~/docs/visual-basic/language-reference/statements/synclock-statement.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5f8ab-121">В следующем примере создается `Collection` объект `names` и диалоговое окно, с помощью которого пользователь может добавлять объекты (имена) в коллекцию.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-121">The following example creates the `Collection` object `names` and a dialog box with which a user can add objects (names) to the collection.</span></span> <span data-ttu-id="5f8ab-122">Затем он отображает имена в коллекции и, наконец, очищает коллекцию без удаления `Collection` самого объекта.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-122">It then displays the names in the collection, and finally empties the collection without disposing of the `Collection` object itself.</span></span>  
  
 <span data-ttu-id="5f8ab-123">Чтобы увидеть, как это работает, выберите команду **Добавить класс** в меню **проект** и объявите открытую переменную `instanceName` с именем на уровне `nameClass` модуля (Type `Public instanceName`) для хранения имен каждого экземпляра.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-123">To see how this works, choose the **Add Class** command from the **Project** menu and declare a public variable called `instanceName` at the module level of `nameClass` (type `Public instanceName`) to hold the names of each instance.</span></span> <span data-ttu-id="5f8ab-124">Оставьте имя `nameClass`по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-124">Leave the default name as `nameClass`.</span></span> <span data-ttu-id="5f8ab-125">Скопируйте и вставьте следующий код в раздел **Общие** другого модуля, а затем запустите его с помощью инструкции `classNamer` в другой процедуре.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-125">Copy and paste the following code into the **General** section of another module, and then start it with the statement `classNamer` in another procedure.</span></span> <span data-ttu-id="5f8ab-126">(Этот пример работает только с ведущими приложениями, которые поддерживают классы.)</span><span class="sxs-lookup"><span data-stu-id="5f8ab-126">(This example works only with host applications that support classes.)</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Collection ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Collection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5f8ab-127">Создает и возвращает новый объект <see cref="T:Microsoft.VisualBasic.Collection" /> в Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-127">Creates and returns a new Visual Basic <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f8ab-128">Коллекция Visual Basic, возвращенная этим конструктором, пуста и не имеет выделенной начальной емкости.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-128">The Visual Basic collection returned by this constructor is empty and does not have any initial capacity allocated.</span></span>  
  
 <span data-ttu-id="5f8ab-129">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] Visual Basic коллекции несовместимы с коллекциями <xref:System.Collections?displayProperty=nameWithType>, доступными в пространствах <xref:System.Collections.Generic?displayProperty=nameWithType>имен, <xref:System.Collections.Specialized?displayProperty=nameWithType> и.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-129">Visual Basic collections are not compatible with the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] collections available in the <xref:System.Collections?displayProperty=nameWithType>, <xref:System.Collections.Generic?displayProperty=nameWithType>, and <xref:System.Collections.Specialized?displayProperty=nameWithType> namespaces.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5f8ab-130">В следующем примере создается новая коллекция Visual Basic и назначается переменной `coll`:</span><span class="sxs-lookup"><span data-stu-id="5f8ab-130">The following example creates a new Visual Basic collection and assigns it to the variable `coll`:</span></span>  
  
```vb  
Dim coll As New Microsoft.VisualBasic.Collection()  
```  
  
 <span data-ttu-id="5f8ab-131">Этот `Collection` объект основан на единицах, что означает, что значения индекса элементов находятся в диапазоне от 1 до значения `Count` свойства.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-131">This `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property.</span></span> <span data-ttu-id="5f8ab-132">Visual Basic коллекции содержат элементы типа <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-132">Visual Basic collections hold elements of type <xref:System.Object>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (object Item, string Key = null, object Before = null, object After = null);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Add(object Item, string Key, object Before, object After) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (Item As Object, Optional Key As String = null, Optional Before As Object = null, Optional After As Object = null)" />
      <MemberSignature Language="F#" Value="member this.Add : obj * string * obj * obj -&gt; unit" Usage="collection.Add (Item, Key, Before, After)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Item" Type="System.Object" />
        <Parameter Name="Key" Type="System.String" />
        <Parameter Name="Before" Type="System.Object" />
        <Parameter Name="After" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Item"><span data-ttu-id="5f8ab-133">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-133">Required.</span></span> <span data-ttu-id="5f8ab-134">Объект любого типа, определяющий добавляемый в коллекцию элемент.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-134">An object of any type that specifies the element to add to the collection.</span></span></param>
        <param name="Key"><span data-ttu-id="5f8ab-135">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-135">Optional.</span></span> <span data-ttu-id="5f8ab-136">Уникальное выражение типа <see langword="String" />, задающее ключевую строку, которая может использоваться для доступа к этому элементу коллекции вместо индекса позиции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-136">A unique <see langword="String" /> expression that specifies a key string that can be used instead of a positional index to access this new element in the collection.</span></span></param>
        <param name="Before"><span data-ttu-id="5f8ab-137">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-137">Optional.</span></span> <span data-ttu-id="5f8ab-138">Выражение, задающее относительную позицию в коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-138">An expression that specifies a relative position in the collection.</span></span> <span data-ttu-id="5f8ab-139">Добавляемый элемент помещается в коллекцию перед элементом, определяемым аргументом <paramref name="Before" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-139">The element to be added is placed in the collection before the element identified by the <paramref name="Before" /> argument.</span></span> <span data-ttu-id="5f8ab-140">Если параметр <paramref name="Before" /> является числовым выражением, то он должен быть числом от 1 до значения <see cref="P:Microsoft.VisualBasic.Collection.Count" /> коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-140">If <paramref name="Before" /> is a numeric expression, it must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span></span> <span data-ttu-id="5f8ab-141">Если параметр <paramref name="Before" /> является выражением типа <see langword="String" />, то оно должно соответствовать ключевой строке, заданной при добавлении элемента в коллекцию.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-141">If <paramref name="Before" /> is a <see langword="String" /> expression, it must correspond to the key string specified when the element being referred to was added to the collection.</span></span> <span data-ttu-id="5f8ab-142">Нельзя указать одновременно и <paramref name="Before" />, и <paramref name="After" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-142">You cannot specify both <paramref name="Before" /> and <paramref name="After" />.</span></span></param>
        <param name="After"><span data-ttu-id="5f8ab-143">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-143">Optional.</span></span> <span data-ttu-id="5f8ab-144">Выражение, задающее относительную позицию в коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-144">An expression that specifies a relative position in the collection.</span></span> <span data-ttu-id="5f8ab-145">Добавляемый элемент помещается в коллекцию после элемента, определяемого аргументом <paramref name="After" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-145">The element to be added is placed in the collection after the element identified by the <paramref name="After" /> argument.</span></span> <span data-ttu-id="5f8ab-146">Если параметр <paramref name="After" /> является числовым выражением, то он должен быть числом от 1 до значения <see langword="Count" /> коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-146">If <paramref name="After" /> is a numeric expression, it must be a number from 1 through the value of the collection's <see langword="Count" /> property.</span></span> <span data-ttu-id="5f8ab-147">Если параметр <paramref name="After" /> является выражением типа <see langword="String" />, то он должно соответствовать ключевой строке, заданной при добавлении элемента в коллекцию.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-147">If <paramref name="After" /> is a <see langword="String" /> expression, it must correspond to the key string specified when the element referred to was added to the collection.</span></span> <span data-ttu-id="5f8ab-148">Нельзя указать одновременно и <paramref name="Before" />, и <paramref name="After" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-148">You cannot specify both <paramref name="Before" /> and <paramref name="After" />.</span></span></param>
        <summary><span data-ttu-id="5f8ab-149">Добавляет элемент в объект <see langword="Collection" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-149">Adds an element to a <see langword="Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f8ab-150">Аргумент `Before` или `After`  должен ссылаться на существующий элемент коллекции; в противном случае возникает ошибка.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-150">The `Before` or `After` argument must refer to an existing element of the collection; otherwise, an error occurs.</span></span>  
  
 <span data-ttu-id="5f8ab-151">Если оба `Before` аргумента `After` и опущены, новый объект добавляется в конец коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-151">If both the `Before` and `After` arguments are omitted, the new object is added to the end of the collection.</span></span>  
  
 <span data-ttu-id="5f8ab-152">Ошибка также возникает, если указанное `Key` значение соответствует ключу для существующего элемента коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-152">An error also occurs if a specified `Key` value matches the key for an existing element of the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5f8ab-153">`Add` В следующем примере метод используется для добавления `child` объектов — экземпляров класса с именем `child` , `Public` содержащих свойство `name` , в коллекцию с именем `family`.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-153">The following example uses the `Add` method to add `child` objects - instances of a class called `child` containing a `Public` property `name` - to a collection called `family`.</span></span> <span data-ttu-id="5f8ab-154">Чтобы увидеть, как это работает, создайте <xref:System.Windows.Forms.Form> с помощью <xref:System.Windows.Forms.Button> двух элементов управления и <xref:System.Windows.Forms.Control.Text%2A> задайте для `Add` них `List`свойства и.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-154">To see how this works, create a <xref:System.Windows.Forms.Form> with two <xref:System.Windows.Forms.Button> controls and set their <xref:System.Windows.Forms.Control.Text%2A> properties to `Add` and `List`.</span></span> <span data-ttu-id="5f8ab-155">Добавьте определение `family` класса и объявление в код формы. `child`</span><span class="sxs-lookup"><span data-stu-id="5f8ab-155">Add the `child` class definition and the `family` declaration to the form code.</span></span> <span data-ttu-id="5f8ab-156">Измените обработчики \*\*\*\* \*\*\*\* событий для кнопок Добавить и список, как показано ниже. `_Click`</span><span class="sxs-lookup"><span data-stu-id="5f8ab-156">Modify the `_Click` event handlers for the **Add** and **List** buttons as shown.</span></span> <span data-ttu-id="5f8ab-157">Кнопка **Добавить** позволяет добавлять дочерние элементы.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-157">The **Add** button allows you to add children.</span></span> <span data-ttu-id="5f8ab-158">На кнопке **список** отображаются имена всех дочерних элементов.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-158">The **List** button displays the names of all the children.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="collection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5f8ab-159">Удаляет все элементы объекта <see langword="Collection" /> Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-159">Deletes all elements of a Visual Basic <see langword="Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f8ab-160">Метод очищает коллекцию и сбрасывает ее <xref:Microsoft.VisualBasic.Collection.Count%2A> свойство в 0. `Clear`</span><span class="sxs-lookup"><span data-stu-id="5f8ab-160">The `Clear` method empties the collection and resets its <xref:Microsoft.VisualBasic.Collection.Count%2A> property to 0.</span></span>  
  
   
  
## Examples  
 [!code-vb[VbVbalrCollectionObject#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string Key);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool Contains(string Key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (Key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ Key);" />
      <MemberSignature Language="F#" Value="member this.Contains : string -&gt; bool" Usage="collection.Contains Key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Key"><span data-ttu-id="5f8ab-161">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-161">Required.</span></span> <span data-ttu-id="5f8ab-162">Выражение типа <see langword="String" />, которое задает ключ для поиска элемента в коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-162">A <see langword="String" /> expression that specifies the key for which to search the elements of the collection.</span></span></param>
        <summary><span data-ttu-id="5f8ab-163">Возвращает значение, показывающее, содержит ли объект Visual Basic <see langword="Collection" /> элемент с указанным ключом.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-163">Returns a value that indicates whether a Visual Basic <see langword="Collection" /> object contains an element with a specific key.</span></span></summary>
        <returns><span data-ttu-id="5f8ab-164">Значение <see langword="true" />, если объект Visual Basic <see langword="Collection" /> содержит элемент с указанным ключом; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-164"><see langword="true" /> if Visual Basic <see langword="Collection" /> object contains an element with a specific key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f8ab-165">`Contains`Возвращает `True` значение, если коллекция содержит элемент с точно совпадающим `Key`ключом.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-165">`Contains` returns `True` if the collection contains an element with a key exactly matching `Key`.</span></span> <span data-ttu-id="5f8ab-166">В противном случае `Contains` возвращает значение `False`.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-166">Otherwise, `Contains` returns `False`.</span></span> <span data-ttu-id="5f8ab-167">Регистр игнорируется при сопоставлении значений ключей.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-167">Case is ignored when matching key values.</span></span>  
  
 <span data-ttu-id="5f8ab-168">Visual Basic `Collection` может содержать некоторые элементы, имеющие ключи и другие элементы без ключей.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-168">A Visual Basic `Collection` can hold some elements that have keys and other elements without keys.</span></span> <span data-ttu-id="5f8ab-169">Это зависит от того, предоставляет ли вызов <xref:Microsoft.VisualBasic.Collection.Add%2A> метода аргумент необязательному `Key` параметру.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-169">This depends on whether the call to the <xref:Microsoft.VisualBasic.Collection.Add%2A> method supplies an argument to the optional `Key` parameter.</span></span>  
  
   
  
## Examples  
 [!code-vb[VbVbalrCollectionObject#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#4)]  
  
 <span data-ttu-id="5f8ab-170">Если вы собираетесь искать элементы в коллекции, используя их ключи, не забудьте указать `Key` аргумент при каждом `Add` вызове метода.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-170">If you intend to search the collection for elements using their keys, remember to supply the `Key` argument every time you call the `Add` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="Microsoft.VisualBasic.Collection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5f8ab-171">Получает число элементов в коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-171">Gets the number of elements in a collection.</span></span></summary>
        <value><span data-ttu-id="5f8ab-172">Количество элементов в коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-172">The number of elements in a collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f8ab-173">Используйте свойство, чтобы определить количество элементов `Collection` в объекте. `Count`</span><span class="sxs-lookup"><span data-stu-id="5f8ab-173">Use the `Count` property to determine the number of elements in a `Collection` object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5f8ab-174">В этом примере показано использование `Count` свойства для вывода числа элементов <xref:Microsoft.VisualBasic.Collection> в объекте в переменной `birthdays`.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-174">This example illustrates the use of the `Count` property to display the number of elements in a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#6)]  
  
 <span data-ttu-id="5f8ab-175">Объект является основанным на единицах, что означает, что значения индекса элементов находятся в диапазоне от 1 до значения `Count` свойства. `Collection`</span><span class="sxs-lookup"><span data-stu-id="5f8ab-175">The `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="collection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5f8ab-176">Возвращает перечислитель, выполняющий перебор элементов в коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-176">Returns an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="5f8ab-177">Перечислитель, который можно использовать для итерации по коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-177">An enumerator that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f8ab-178">[Для каждого... Оператор Next](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) вызывает `GetEnumerator` метод, чтобы получить объект перечислителя для поддержки итерации элементов коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-178">The [For Each...Next Statement](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) calls `GetEnumerator` to obtain an enumerator object to support iteration over a collection's elements.</span></span> <span data-ttu-id="5f8ab-179">Обычно используется `For Each`... цикл для прохода по коллекции или массиву, и вам не нужно вызывать `GetEnumerator` явно. `Next`</span><span class="sxs-lookup"><span data-stu-id="5f8ab-179">Normally, you use a `For Each`...`Next` loop to traverse a collection or array, and you do not need to call `GetEnumerator` explicitly.</span></span>  
  
 <span data-ttu-id="5f8ab-180">Если требуется более близкий контроль над итерацией, `For Each`чем... операторы предоставляют, для выполнения настраиваемого `GetEnumerator` обхода можно использовать метод. `Next`</span><span class="sxs-lookup"><span data-stu-id="5f8ab-180">If you need closer control over the iteration than the `For Each`...`Next` statements provide, you can use the `GetEnumerator` method to perform a customized traversal.</span></span> <span data-ttu-id="5f8ab-181">Ниже приведены некоторые случаи, в которых это может потребоваться.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-181">The following are some cases in which you might need to do this.</span></span>  
  
-   <span data-ttu-id="5f8ab-182">Возможно, потребуется вернуться к началу коллекции и запустить итерацию еще раз, прежде чем она будет завершена.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-182">You might want to return to the beginning of the collection and start the iteration again before it is finished.</span></span>  
  
-   <span data-ttu-id="5f8ab-183">Может потребоваться пропустить один или несколько элементов по ряду причин.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-183">You might want to skip over one or more elements for a variety of reasons.</span></span>  
  
-   <span data-ttu-id="5f8ab-184">Может потребоваться изменить элементы коллекции в середине обхода.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-184">You might need to change the elements of the collection in the middle of a traversal.</span></span> <span data-ttu-id="5f8ab-185">В этом случае необходимо получить новый объект перечислителя, так как предыдущий элемент становится недействительным.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-185">In this case you must obtain a new enumerator object because the previous one is invalidated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5f8ab-186">В следующем примере показано, как использовать `GetEnumerator` для извлечения всех элементов `Collection` объекта.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-186">The following example shows how to use `GetEnumerator` to retrieve all the elements of a `Collection` object.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#7)]  
  
 <span data-ttu-id="5f8ab-187">`GetEnumerator`создает и возвращает объект перечислителя, который реализует <xref:System.Collections.IEnumerator> интерфейс <xref:System.Collections> пространства имен.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-187">`GetEnumerator` constructs and returns an enumerator object, which implements the <xref:System.Collections.IEnumerator> interface of the <xref:System.Collections> namespace.</span></span> <span data-ttu-id="5f8ab-188">Объект перечислителя предоставляет <xref:System.Collections.IEnumerator.Current%2A> свойство <xref:System.Collections.IEnumerator.MoveNext%2A> и методы и <xref:System.Collections.IEnumerator.Reset%2A> .</span><span class="sxs-lookup"><span data-stu-id="5f8ab-188">The enumerator object exposes the <xref:System.Collections.IEnumerator.Current%2A> property and the <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Reset%2A> methods.</span></span> <span data-ttu-id="5f8ab-189">Дополнительные сведения см. в разделе [For Each... Следующий оператор](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span><span class="sxs-lookup"><span data-stu-id="5f8ab-189">For more information, see [For Each...Next Statement](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5f8ab-190">Получает определенный элемент объекта <see langword="Collection" /> по номеру позиции или ключу.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-190">Gets a specific element of a <see langword="Collection" /> object either by position or by key.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[int Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[int] { System::Object ^ get(int Index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : obj" Usage="Microsoft.VisualBasic.Collection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Index"><span data-ttu-id="5f8ab-191">Числовое выражение, задающее позицию элемента коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-191">A numeric expression that specifies the position of an element of the collection.</span></span> <span data-ttu-id="5f8ab-192">Значение <paramref name="Index" /> должно быть числом от 1 до значения свойства <see cref="P:Microsoft.VisualBasic.Collection.Count" /> коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-192"><paramref name="Index" /> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span></span> <span data-ttu-id="5f8ab-193">Или (Б) выражение типа <see langword="Object" />, задающее позицию или ключевую строку элемента в коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-193">Or (B) An <see langword="Object" /> expression that specifies the position or key string of an element of the collection.</span></span></param>
        <summary><span data-ttu-id="5f8ab-194">Получает определенный элемент объекта <see langword="Collection" /> по номеру позиции или ключу.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-194">Gets a specific element of a <see langword="Collection" /> object either by position or by key.</span></span></summary>
        <value><span data-ttu-id="5f8ab-195">Конкретный элемент <see langword="Collection" /> объекта либо по положению, либо по ключу.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-195">A specific element of a <see langword="Collection" /> object either by position or by key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f8ab-196">Если `Index` имеет тип, `Object` `String` `Char` `Char` свойство пытается обработать его как значение типа,, массив или целое число. `Item`</span><span class="sxs-lookup"><span data-stu-id="5f8ab-196">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="5f8ab-197">Если `Item` не удается `Index` преобразовать `String` в или `Integer` , вызывается <xref:System.ArgumentException> исключение.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-197">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="5f8ab-198">`Item` Свойство является свойством по умолчанию для коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-198">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="5f8ab-199">Поэтому следующие строки кода эквивалентны.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-199">Therefore, the following lines of code are equivalent.</span></span>  
  
```vb
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="5f8ab-200">В следующем примере `Item` свойство используется для получения ссылки на объект в коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-200">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="5f8ab-201">Он создается `birthdays` `Index` как объект, а затем извлекает объект, представляющий день рождения счета, с использованием ключа `"Bill"` в качестве аргумента. `Collection`</span><span class="sxs-lookup"><span data-stu-id="5f8ab-201">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="5f8ab-202">Обратите внимание, что первый вызов явным `Item` образом указывает свойство, а второе — нет.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-202">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="5f8ab-203">Оба вызова работают, так `Item` как свойство является свойством по умолчанию `Collection` для объекта.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-203">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[object Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Index As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ Index); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : obj" Usage="Microsoft.VisualBasic.Collection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Index"><span data-ttu-id="5f8ab-204">Числовое выражение, задающее позицию элемента коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-204">A numeric expression that specifies the position of an element of the collection.</span></span> <span data-ttu-id="5f8ab-205">Значение <paramref name="Index" /> должно быть числом от 1 до значения свойства <see cref="P:Microsoft.VisualBasic.Collection.Count" /> коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-205"><paramref name="Index" /> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span></span> <span data-ttu-id="5f8ab-206">Или (Б) выражение типа <see langword="Object" />, задающее позицию или ключевую строку элемента в коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-206">Or (B) An <see langword="Object" /> expression that specifies the position or key string of an element of the collection.</span></span></param>
        <summary><span data-ttu-id="5f8ab-207">Получает определенный элемент объекта <see langword="Collection" /> по номеру позиции или ключу.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-207">Gets a specific element of a <see langword="Collection" /> object either by position or by key.</span></span></summary>
        <value><span data-ttu-id="5f8ab-208">Конкретный элемент <see langword="Collection" /> объекта либо по положению, либо по ключу.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-208">A specific element of a <see langword="Collection" /> object either by position or by key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f8ab-209">Если `Index` имеет тип, `Object` `String` `Char` `Char` свойство пытается обработать его как значение типа,, массив или целое число. `Item`</span><span class="sxs-lookup"><span data-stu-id="5f8ab-209">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="5f8ab-210">Если `Item` не удается `Index` преобразовать `String` в или `Integer` , вызывается <xref:System.ArgumentException> исключение.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-210">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="5f8ab-211">`Item` Свойство является свойством по умолчанию для коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-211">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="5f8ab-212">Поэтому следующие строки кода эквивалентны.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-212">Therefore, the following lines of code are equivalent.</span></span>  
  
```vb
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="5f8ab-213">В следующем примере `Item` свойство используется для получения ссылки на объект в коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-213">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="5f8ab-214">Он создается `birthdays` `Index` как объект, а затем извлекает объект, представляющий день рождения счета, с использованием ключа `"Bill"` в качестве аргумента. `Collection`</span><span class="sxs-lookup"><span data-stu-id="5f8ab-214">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="5f8ab-215">Обратите внимание, что первый вызов явным `Item` образом указывает свойство, а второе — нет.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-215">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="5f8ab-216">Оба вызова работают, так `Item` как свойство является свойством по умолчанию `Collection` для объекта.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-216">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[string Key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Key As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::String ^] { System::Object ^ get(System::String ^ Key); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : obj" Usage="Microsoft.VisualBasic.Collection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Key"><span data-ttu-id="5f8ab-217">Уникальное выражение типа <see langword="String" />, задающее строку ключа, которая может использоваться для доступа к элементу коллекции вместо индекса позиции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-217">A unique <see langword="String" /> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</span></span> <span data-ttu-id="5f8ab-218">Значение <paramref name="Key" /> должно соответствовать аргументу <paramref name="Key" />, заданному при добавлении элемента в коллекцию.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-218"><paramref name="Key" /> must correspond to the <paramref name="Key" /> argument specified when the element was added to the collection.</span></span></param>
        <summary><span data-ttu-id="5f8ab-219">Получает определенный элемент объекта <see langword="Collection" /> по номеру позиции или ключу.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-219">Gets a specific element of a <see langword="Collection" /> object either by position or by key.</span></span></summary>
        <value><span data-ttu-id="5f8ab-220">Конкретный элемент <see langword="Collection" /> объекта либо по положению, либо по ключу.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-220">A specific element of a <see langword="Collection" /> object either by position or by key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f8ab-221">Если `Index` имеет тип, `Object` `String` `Char` `Char` свойство пытается обработать его как значение типа,, массив или целое число. `Item`</span><span class="sxs-lookup"><span data-stu-id="5f8ab-221">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="5f8ab-222">Если `Item` не удается `Index` преобразовать `String` в или `Integer` , вызывается <xref:System.ArgumentException> исключение.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-222">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="5f8ab-223">`Item` Свойство является свойством по умолчанию для коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-223">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="5f8ab-224">Поэтому следующие строки кода эквивалентны.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-224">Therefore, the following lines of code are equivalent.</span></span>  
  
```vb
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="5f8ab-225">В следующем примере `Item` свойство используется для получения ссылки на объект в коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-225">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="5f8ab-226">Он создается `birthdays` `Index` как объект, а затем извлекает объект, представляющий день рождения счета, с использованием ключа `"Bill"` в качестве аргумента. `Collection`</span><span class="sxs-lookup"><span data-stu-id="5f8ab-226">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="5f8ab-227">Обратите внимание, что первый вызов явным `Item` образом указывает свойство, а второе — нет.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-227">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="5f8ab-228">Оба вызова работают, так `Item` как свойство является свойством по умолчанию `Collection` для объекта.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-228">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5f8ab-229">Удаляет объект из коллекции <see langword="Collection" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-229">Removes an element from a <see langword="Collection" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (Index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(int Index);" />
      <MemberSignature Language="F#" Value="member this.Remove : int -&gt; unit" Usage="collection.Remove Index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Index"><span data-ttu-id="5f8ab-230">Числовое выражение, задающее позицию элемента коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-230">A numeric expression that specifies the position of an element of the collection.</span></span> <span data-ttu-id="5f8ab-231">Значение <paramref name="Index" /> должно быть числом от 1 до значения свойства <see cref="P:Microsoft.VisualBasic.Collection.Count" /> коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-231"><paramref name="Index" /> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span></span></param>
        <summary><span data-ttu-id="5f8ab-232">Удаляет объект из коллекции <see langword="Collection" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-232">Removes an element from a <see langword="Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f8ab-233">При `Remove` удалении элемента из коллекции он уменьшает <xref:Microsoft.VisualBasic.Collection.Count%2A> свойство коллекции на единицу.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-233">When `Remove` deletes an element from a collection, it decrements the collection's <xref:Microsoft.VisualBasic.Collection.Count%2A> property by one.</span></span> <span data-ttu-id="5f8ab-234">Он также уменьшает `Index` значение каждого элемента, который ранее использовал удаленный элемент в коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-234">It also decrements the `Index` value of every element that formerly followed the deleted element in the collection.</span></span>  
  
 <span data-ttu-id="5f8ab-235">Если элемент был добавлен в коллекцию без `Key`, необходимо использовать его `Index` для удаления.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-235">If an element was added to the collection without a `Key`, you must use its `Index` to remove it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5f8ab-236">В этом примере показано использование `Remove` метода для удаления объектов <xref:Microsoft.VisualBasic.Collection> из объекта в переменной `birthdays`.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-236">This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#9)]  
  
 <span data-ttu-id="5f8ab-237">После четырех вызовов `Add` метода `Count` свойство содержит 4, элемент `"Bill"` имеет значение индекса 1, а элемент `"Pete"` имеет значение индекса 4.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-237">Following the four calls to the `Add` method, the `Count` property contains 4, element `"Bill"` has index value 1, and element `"Pete"` has index value 4.</span></span>  
  
 <span data-ttu-id="5f8ab-238">`Remove`После первого вызова метода `Count` значение равно 3, элемент `"Bill"` удален, а элемент `"Pete"` имеет значение индекса 3.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-238">Following the first call to `Remove`, `Count` is 3, element `"Bill"` is deleted, and element `"Pete"` has index value 3.</span></span>  
  
 <span data-ttu-id="5f8ab-239">После второго вызова `Remove`, `Count` равного 2, элемент `"Mike"` удален, а элемент `"Pete"` имеет значение индекса 2.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-239">Following the second call to `Remove`, `Count` is 2, element `"Mike"` is deleted, and element `"Pete"` has index value 2.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string Key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string Key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (Key As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ Key);" />
      <MemberSignature Language="F#" Value="member this.Remove : string -&gt; unit" Usage="collection.Remove Key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Key"><span data-ttu-id="5f8ab-240">Уникальное выражение типа <see langword="String" />, задающее строку ключа, которая может использоваться для доступа к элементу коллекции вместо индекса позиции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-240">A unique <see langword="String" /> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</span></span> <span data-ttu-id="5f8ab-241">Значение <paramref name="Key" /> должно соответствовать аргументу <paramref name="Key" />, заданному при добавлении элемента в коллекцию.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-241"><paramref name="Key" /> must correspond to the <paramref name="Key" /> argument specified when the element was added to the collection.</span></span></param>
        <summary><span data-ttu-id="5f8ab-242">Удаляет объект из коллекции <see langword="Collection" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-242">Removes an element from a <see langword="Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f8ab-243">При `Remove` удалении элемента из коллекции он уменьшает <xref:Microsoft.VisualBasic.Collection.Count%2A> свойство коллекции на единицу.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-243">When `Remove` deletes an element from a collection, it decrements the collection's <xref:Microsoft.VisualBasic.Collection.Count%2A> property by one.</span></span> <span data-ttu-id="5f8ab-244">Он также уменьшает `Index` значение каждого элемента, который ранее использовал удаленный элемент в коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-244">It also decrements the `Index` value of every element that formerly followed the deleted element in the collection.</span></span>  
  
 <span data-ttu-id="5f8ab-245">Если элемент был добавлен в коллекцию без `Key`, необходимо использовать его `Index` для удаления.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-245">If an element was added to the collection without a `Key`, you must use its `Index` to remove it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5f8ab-246">В этом примере показано использование `Remove` метода для удаления объектов <xref:Microsoft.VisualBasic.Collection> из объекта в переменной `birthdays`.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-246">This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#9)]  
  
 <span data-ttu-id="5f8ab-247">После четырех вызовов `Add` метода `Count` свойство содержит 4, элемент `"Bill"` имеет значение индекса 1, а элемент `"Pete"` имеет значение индекса 4.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-247">Following the four calls to the `Add` method, the `Count` property contains 4, element `"Bill"` has index value 1, and element `"Pete"` has index value 4.</span></span>  
  
 <span data-ttu-id="5f8ab-248">`Remove`После первого вызова метода `Count` значение равно 3, элемент `"Bill"` удален, а элемент `"Pete"` имеет значение индекса 3.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-248">Following the first call to `Remove`, `Count` is 3, element `"Bill"` is deleted, and element `"Pete"` has index value 3.</span></span>  
  
 <span data-ttu-id="5f8ab-249">После второго вызова `Remove`, `Count` равного 2, элемент `"Mike"` удален, а элемент `"Pete"` имеет значение индекса 2.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-249">Following the second call to `Remove`, `Count` is 2, element `"Mike"` is deleted, and element `"Pete"` has index value 2.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo" ExplicitInterfaceMemberName="ICollectionCopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void ICollectionCopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void ICollectionCopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="5f8ab-250">Одномерный массив класса <see cref="T:System.Array" />, который является целевым массивом для элементов, копируемых из объекта <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-250">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span> <span data-ttu-id="5f8ab-251">Массив <see cref="T:System.Array" /> должен иметь индексацию, начинающуюся с нуля.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-251">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="5f8ab-252">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-252">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="5f8ab-253">Копирует элементы коллекции <see cref="T:Microsoft.VisualBasic.Collection" /> в массив <see cref="T:System.Array" />, начиная с указанного индекса массива <see cref="T:System.Array" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-253">Copies the elements of the <see cref="T:Microsoft.VisualBasic.Collection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f8ab-254">Элементы копируются <xref:System.Array> в в том же порядке, в котором перечислитель перебирает <xref:Microsoft.VisualBasic.Collection> объект.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-254">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 <span data-ttu-id="5f8ab-255">Этот метод является операцией O`n`(), где `n` извлекается из <xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count>.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-255">This method is an O(`n`) operation, where `n` is obtained from the <xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5f8ab-256"><paramref name="array" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-256"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5f8ab-257">Значение параметра <paramref name="index" /> меньше нуля.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-257"><paramref name="index" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5f8ab-258">Массив <paramref name="array" /> является многомерным.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-258"><paramref name="array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="5f8ab-259">- или -</span><span class="sxs-lookup"><span data-stu-id="5f8ab-259">-or-</span></span> 
<span data-ttu-id="5f8ab-260">Количество элементов в исходном объекте <see cref="T:Microsoft.VisualBasic.Collection" /> превышает размер доступного места, начиная с индекса массива <paramref name="index" /> и до конца массива назначения <paramref name="array" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-260">The number of elements in the source <see cref="T:Microsoft.VisualBasic.Collection" /> object is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="5f8ab-261">Тип исходного объекта <see cref="T:Microsoft.VisualBasic.Collection" /> нельзя автоматически привести к типу массива назначения <paramref name="array" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-261">The type of the source <see cref="T:Microsoft.VisualBasic.Collection" /> object cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />
        <altmember cref="T:System.Array" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.Count" ExplicitInterfaceMemberName="ICollectionCount">
      <MemberSignature Language="C#" Value="int System.Collections.ICollection.Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ICollectionCount" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionCount" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionCount As Integer Implements ICollection.Count" />
      <MemberSignature Language="C++ CLI" Value="property int System::Collections::ICollection::Count { int get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5f8ab-262">Возвращает число элементов в этой коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-262">Gets the number of items in this collection.</span></span></summary>
        <value><span data-ttu-id="5f8ab-263">Число элементов в этой коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-263">The number of items in this collection.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized" ExplicitInterfaceMemberName="ICollectionIsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ICollectionIsSynchronized" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionIsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionIsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5f8ab-264">Получает значение, указывающее, является ли доступ к объекту <see cref="T:Microsoft.VisualBasic.Collection" /> синхронизированным (потокобезопасным).</span><span class="sxs-lookup"><span data-stu-id="5f8ab-264">Gets a value that indicates whether access to the <see cref="T:Microsoft.VisualBasic.Collection" /> object is synchronized (thread-safe).</span></span></summary>
        <value><span data-ttu-id="5f8ab-265"><see langword="true" />значение, <see cref="T:Microsoft.VisualBasic.Collection" /> <see langword="false" />если доступ к объекту синхронизирован; в противном случае —.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-265"><see langword="true" /> if access to the <see cref="T:Microsoft.VisualBasic.Collection" /> object is synchronized; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot" ExplicitInterfaceMemberName="ICollectionSyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ICollectionSyncRoot" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionSyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionSyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5f8ab-266">Возвращает объект, который позволяет синхронизировать доступ к объекту <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-266">Gets an object that can be used to synchronize access to the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <value><span data-ttu-id="5f8ab-267">Объект, который позволяет синхронизировать доступ к объекту <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-267">An object that can be used to synchronize access to the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator" ExplicitInterfaceMemberName="ICollectionGetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance class System.Collections.IEnumerator ICollectionGetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function ICollectionGetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ ICollectionGetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5f8ab-268">Получает перечислитель, выполняющий итерацию элементов в коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-268">Gets an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="5f8ab-269">Объект <see cref="T:System.Collections.IEnumerator" />, который используется для прохода по коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-269">An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f8ab-270">[Visual Basic, C#]</span><span class="sxs-lookup"><span data-stu-id="5f8ab-270">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="5f8ab-271">Инструкция `foreach` языка C# (`for each` в Visual Basic) позволяет скрыть сложный механизм перечислителей.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-271">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="5f8ab-272">Поэтому рекомендуется вместо непосредственного использования перечислителя применять ключевое слово `foreach`.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-272">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="5f8ab-273">Перечислители могут использоваться для чтения данных в коллекции, но не для ее изменения.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-273">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="5f8ab-274">Изначально перечислитель располагается перед первым элементом коллекции.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-274">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="5f8ab-275"><xref:System.Collections.IEnumerator.Reset%2A> Метод также переводит перечислитель обратно в эту точку.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-275">The <xref:System.Collections.IEnumerator.Reset%2A> method also brings the enumerator back to this position.</span></span> <span data-ttu-id="5f8ab-276">В этой позиции <xref:System.Collections.IEnumerator.Current%2A> свойство не определено.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-276">At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined.</span></span> <span data-ttu-id="5f8ab-277">Поэтому необходимо вызвать <xref:System.Collections.IEnumerator.MoveNext%2A> метод, чтобы переместить перечислитель к первому элементу коллекции перед считыванием <xref:System.Collections.IEnumerator.Current%2A>значения.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-277">Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="5f8ab-278"><xref:System.Collections.IEnumerator.Current%2A> возвращает тот же объект, пока не будет вызван метод <xref:System.Collections.IEnumerator.MoveNext%2A> или <xref:System.Collections.IEnumerator.Reset%2A>.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-278"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="5f8ab-279"><xref:System.Collections.IEnumerator.MoveNext%2A> задает <xref:System.Collections.IEnumerator.Current%2A> в качестве значения для следующего элемента.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-279"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="5f8ab-280">Если <xref:System.Collections.IEnumerator.MoveNext%2A> передает конец коллекции, перечислитель располагается после последнего элемента в коллекции и <xref:System.Collections.IEnumerator.MoveNext%2A> возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-280">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="5f8ab-281">Если перечислитель находится в этой позиции, последующие вызовы <xref:System.Collections.IEnumerator.MoveNext%2A> также возвращают. `false`</span><span class="sxs-lookup"><span data-stu-id="5f8ab-281">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="5f8ab-282">Если последний вызов метода <xref:System.Collections.IEnumerator.MoveNext%2A> возвращает `false`, <xref:System.Collections.IEnumerator.Current%2A> значение не определено.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-282">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="5f8ab-283">Чтобы снова задать в качестве значения свойства <xref:System.Collections.IEnumerator.Current%2A> первый элемент коллекции, можно последовательно вызвать методы <xref:System.Collections.IEnumerator.Reset%2A> и<xref:System.Collections.IEnumerator.MoveNext%2A>.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-283">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="5f8ab-284">Перечислитель остается действительным, пока коллекция не изменяется.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-284">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="5f8ab-285">Если в коллекцию вносятся изменения, например добавляются, изменяются или удаляются элементы, перечислитель становится недействительным без возможности восстановление, а его поведение не определено.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-285">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="5f8ab-286">У перечислителя нет эксклюзивного доступа к коллекции, поэтому перечисление коллекции не является потокобезопасной процедурой.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-286">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="5f8ab-287">Чтобы гарантировать потокобезопасность, можно заблокировать коллекцию на время всего перечисления.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-287">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span> <span data-ttu-id="5f8ab-288">Чтобы разрешить доступ к коллекции из нескольких потоков для чтения и записи, необходимо реализовать собственную синхронизацию.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-288">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="T:System.Collections.IEnumerable" />
        <altmember cref="M:System.Collections.IEnumerable.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add" ExplicitInterfaceMemberName="IListAdd">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance int32 IListAdd(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListAdd (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int IListAdd(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear" ExplicitInterfaceMemberName="IListClear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListClear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListClear" />
      <MemberSignature Language="VB.NET" Value="Sub IListClear () Implements IList.Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListClear() = System::Collections::IList::Clear;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5f8ab-289">Удаляет все элементы из объекта <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-289">Removes all items from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f8ab-290">Этот метод удаляет все элементы из <xref:Microsoft.VisualBasic.Collection> объекта.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-290">This method removes all items from the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5f8ab-291">Объект <see cref="T:System.Collections.IList" /> доступен только для чтения.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-291">The <see cref="T:System.Collections.IList" /> is read-only.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.Hashtable.Clear" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains" ExplicitInterfaceMemberName="IListContains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance bool IListContains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListContains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool IListContains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5f8ab-292">Объект <see cref="T:System.Object" /> для поиска в объекте <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-292">The <see cref="T:System.Object" /> to locate in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="5f8ab-293">Определяет, содержит ли объект <see cref="T:Microsoft.VisualBasic.Collection" /> указанное значение.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-293">Determines whether the <see cref="T:Microsoft.VisualBasic.Collection" /> object contains a specific value.</span></span></summary>
        <returns><span data-ttu-id="5f8ab-294">Возвращает значение <see langword="True" />, если объект <see cref="T:System.Object" /> находится в объекте <see cref="T:Microsoft.VisualBasic.Collection" />, в противном случае возвращается значение <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-294">Returns <see langword="True" /> if the <see cref="T:System.Object" /> is found in the <see cref="T:Microsoft.VisualBasic.Collection" /> object; otherwise, <see langword="False" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f8ab-295">Этот метод определяет, <xref:Microsoft.VisualBasic.Collection> содержит ли объект определенное значение.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-295">This method determines whether the <xref:Microsoft.VisualBasic.Collection> object contains a specific value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf" ExplicitInterfaceMemberName="IListIndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance int32 IListIndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListIndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int IListIndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5f8ab-296">Объект <see cref="T:System.Object" /> для поиска в объекте <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-296">The <see cref="T:System.Object" /> to locate in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="5f8ab-297">Определяет индекс конкретного элемента в объекте <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-297">Determines the index of a specific item in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <returns><span data-ttu-id="5f8ab-298">Индекс параметра <paramref name="value" />, если оно найдено в коллекции, в противном случае — -1.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-298">The index of <paramref name="value" /> if found in the collection; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f8ab-299">Этот метод определяет индекс определенного элемента в <xref:Microsoft.VisualBasic.Collection> объекте.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-299">This method determines the index of a specific item in the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.IndexOf(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert" ExplicitInterfaceMemberName="IListInsert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListInsert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub IListInsert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListInsert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="5f8ab-300">Отсчитываемый от нуля индекс, по которому следует вставить элемент <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-300">The zero-based index at which <paramref name="value" /> should be inserted.</span></span></param>
        <param name="value"><span data-ttu-id="5f8ab-301">Объект <see cref="T:System.Object" /> для вставки в объект <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-301">The <see cref="T:System.Object" /> to insert into the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="5f8ab-302">Вставляет элемент в объект <see cref="T:Microsoft.VisualBasic.Collection" /> по указанному индексу.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-302">Inserts an item to the <see cref="T:Microsoft.VisualBasic.Collection" /> object at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f8ab-303">Если `index` равно количеству элементов <xref:Microsoft.VisualBasic.Collection> в объекте, то `value` добавляется к концу.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-303">If `index` equals the number of items in the <xref:Microsoft.VisualBasic.Collection> object, then `value` is appended to the end.</span></span>  
  
 <span data-ttu-id="5f8ab-304">В коллекциях с непрерывным набором элементов, таких как списки, чтобы выделить место новому элементу, следующие за точкой вставки элементы перемещаются вниз.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-304">In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element.</span></span> <span data-ttu-id="5f8ab-305">Если коллекция индексируется, индексы перемещенных элементов также обновляются.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-305">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="5f8ab-306">Такое поведение не реализуется в коллекциях, в которых элементы логически сгруппированы, например в хэш-таблицах.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-306">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5f8ab-307">Значение параметра <paramref name="index" /> не является допустимым индексом для объекта <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-307"><paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5f8ab-308">Объект <see cref="T:Microsoft.VisualBasic.Collection" /> доступен только для чтения.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-308">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span></span>  
  
<span data-ttu-id="5f8ab-309">- или -</span><span class="sxs-lookup"><span data-stu-id="5f8ab-309">-or-</span></span> 
<span data-ttu-id="5f8ab-310">Объект <see cref="T:Microsoft.VisualBasic.Collection" /> имеет фиксированный размер.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-310">The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="5f8ab-311">Параметр <paramref name="value" /> является пустой ссылкой в объекте <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-311"><paramref name="value" /> is null reference in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize" ExplicitInterfaceMemberName="IListIsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IListIsFixedSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListIsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IListIsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5f8ab-312">Получает значение, указывающее, имеет ли объект <see cref="T:Microsoft.VisualBasic.Collection" /> фиксированный размер.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-312">Gets a value that indicates whether the <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span></span></summary>
        <value><span data-ttu-id="5f8ab-313"><see langword="true" />, если объект <see cref="T:Microsoft.VisualBasic.Collection" /> имеет фиксированный размер, в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-313"><see langword="true" /> if the <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly" ExplicitInterfaceMemberName="IListIsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IListIsReadOnly" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListIsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IListIsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5f8ab-314">Получает значение, которое указывает, доступен ли объект <see cref="T:Microsoft.VisualBasic.Collection" /> только для чтения.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-314">Gets a value that indicates whether the <see cref="T:Microsoft.VisualBasic.Collection" /> object is.</span></span></summary>
        <value><span data-ttu-id="5f8ab-315">Значение <see langword="true" />, если объект <see cref="T:Microsoft.VisualBasic.Collection" /> доступен только для чтения; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-315"><see langword="true" /> if the <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item" ExplicitInterfaceMemberName="IListItem">
      <MemberSignature Language="C#" Value="object System.Collections.IList.IListItem[int Index] { get; set; }" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.System#Collections#IList#Item(System.Int32)" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="VB.NET" Value=" Property IListItem(Index As Integer) As Object Implements IList.IListItem" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.IListItem[int] { System::Object ^ get(int Index); void set(int Index, System::Object ^ value); };" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Usage="Microsoft.VisualBasic.Collection.IListItem" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C#" Value="object System.Collections.IList.IListItem[int index] { get; set; }" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="VB.NET" Value=" Property IListItem(index As Integer) As Object Implements IList.IListItem" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.IListItem[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="F#" Usage="Microsoft.VisualBasic.Collection.IListItem" FrameworkAlternate="netframework-2.0" />
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int Index] { get; set; }" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".property instance object IListItem(int32)" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListItem(System.Int32)" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value=" Property IListItem(Index As Integer) As Object Implements IList.Item" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int Index); void set(int Index, System::Object ^ value); };" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.Item" FrameworkAlternate="netframework-1.1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Index" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="Index"><span data-ttu-id="5f8ab-316">Отсчитываемый от нуля индекс элемента, который требуется возвратить или задать.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-316">The zero-based index of the element to get or set.</span></span></param>
        <param name="index">To be added.</param>
        <summary><span data-ttu-id="5f8ab-317">Возвращает или задает элемент по указанному индексу.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-317">Gets or sets the element at the specified index.</span></span></summary>
        <value><span data-ttu-id="5f8ab-318">Элемент, расположенный по указанному индексу.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-318">The element at the specified index.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5f8ab-319">Значение параметра <paramref name="index" /> не является допустимым индексом для объекта <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-319"><paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5f8ab-320">Свойство задано, и объект <see cref="T:Microsoft.VisualBasic.Collection" /> доступен только для чтения.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-320">The property is set and the <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove" ExplicitInterfaceMemberName="IListRemove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListRemove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub IListRemove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListRemove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5f8ab-321">Объект <see cref="T:System.Object" />, удаляемый из коллекции <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-321">The <see cref="T:System.Object" /> to remove from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="5f8ab-322">Удаляет первое вхождение определенного объекта из объекта <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-322">Removes the first occurrence of a specific object from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f8ab-323">В коллекциях с непрерывным набором элементов, таких как списки, элементы, следующие за удаленным элементом, перемещаются вверх, занимая освободившуюся позицию.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-323">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="5f8ab-324">Если коллекция индексируется, индексы перемещенных элементов также обновляются.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-324">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="5f8ab-325">Такое поведение не реализуется в коллекциях, в которых элементы логически сгруппированы, например в хэш-таблицах.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-325">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span> <span data-ttu-id="5f8ab-326">Если `value` объект не найден <xref:Microsoft.VisualBasic.Collection> в объекте, <xref:Microsoft.VisualBasic.Collection> объект остается неизменным и исключение не создается.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-326">If `value` is not found in the <xref:Microsoft.VisualBasic.Collection> object, the <xref:Microsoft.VisualBasic.Collection> object remains unchanged and no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5f8ab-327">Объект <see cref="T:Microsoft.VisualBasic.Collection" /> доступен только для чтения.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-327">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span></span>  
  
<span data-ttu-id="5f8ab-328">- или -</span><span class="sxs-lookup"><span data-stu-id="5f8ab-328">-or-</span></span> 
<span data-ttu-id="5f8ab-329">Объект <see cref="T:Microsoft.VisualBasic.Collection" /> имеет фиксированный размер.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-329">The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Remove(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt" ExplicitInterfaceMemberName="IListRemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListRemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub IListRemoveAt (index As Integer) Implements IList.RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListRemoveAt(int index) = System::Collections::IList::RemoveAt;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="5f8ab-330">Отсчитываемый от нуля индекс удаляемого элемента.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-330">The zero-based index of the item to remove.</span></span></param>
        <summary><span data-ttu-id="5f8ab-331">Удаляет элемент объекта <see cref="T:Microsoft.VisualBasic.Collection" /> по заданному индексу.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-331">Removes the <see cref="T:Microsoft.VisualBasic.Collection" /> object item at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f8ab-332">В коллекциях с непрерывным набором элементов, таких как списки, элементы, следующие за удаленным элементом, перемещаются вверх, занимая освободившуюся позицию.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-332">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="5f8ab-333">Если коллекция индексируется, индексы перемещенных элементов также обновляются.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-333">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="5f8ab-334">Такое поведение не реализуется в коллекциях, в которых элементы логически сгруппированы, например в хэш-таблицах.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-334">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5f8ab-335">Значение параметра <paramref name="index" /> не является допустимым индексом для объекта <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-335"><paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5f8ab-336">Объект <see cref="T:Microsoft.VisualBasic.Collection" /> доступен только для чтения.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-336">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span></span>  
  
<span data-ttu-id="5f8ab-337">-или-</span><span class="sxs-lookup"><span data-stu-id="5f8ab-337">-or-</span></span> 
<span data-ttu-id="5f8ab-338">Объект <see cref="T:Microsoft.VisualBasic.Collection" /> имеет фиксированный размер.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-338">The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization" ExplicitInterfaceMemberName="OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="5f8ab-339">Объект, который инициализирует обратный вызов.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-339">The object that initiated the callback.</span></span></param>
        <summary><span data-ttu-id="5f8ab-340">Выполняется после полностью десериализации графа объекта <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-340">Runs after the entire <see cref="T:Microsoft.VisualBasic.Collection" /> object graph has been deserialized.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f8ab-341">Этот метод вызывается после десериализации <xref:Microsoft.VisualBasic.Collection> всего графа объектов.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-341">This method is called after the entire <xref:Microsoft.VisualBasic.Collection> object graph has been deserialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Runtime.Serialization.IDeserializationCallback" />
        <altmember cref="M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData" ExplicitInterfaceMemberName="GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="5f8ab-342">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, содержащий сведения, которые требуются для сериализации объекта <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-342">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the information required to serialize the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <param name="context"><span data-ttu-id="5f8ab-343">Объект <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий исходный объект и объект назначения для сериализованного потока, связанного с объектом <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-343">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object containing the source and destination of the serialized stream associated with the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="5f8ab-344">Возвращает данные, необходимые для сериализации объекта <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-344">Returns the data needed to serialize the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f8ab-345">Этот метод возвращает данные, необходимые для сериализации <xref:Microsoft.VisualBasic.Collection> объекта.</span><span class="sxs-lookup"><span data-stu-id="5f8ab-345">This method returns the data needed to serialize the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="M:System.Collections.Hashtable.OnDeserialization(System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>
