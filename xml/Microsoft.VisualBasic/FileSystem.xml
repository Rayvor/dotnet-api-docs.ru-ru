<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d1a87892d6931450c1a1f82402af9d73dfe93b57" /><Meta Name="ms.sourcegitcommit" Value="f55040f35c19a83c85beb55243330558f6e369be" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="06/10/2019" /><Meta Name="ms.locfileid" Value="66817942" /></Metadata><TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="38170-101">В модуле <see langword="FileSystem" /> содержатся процедуры, используемые для выполнения операций с файлами, папками или каталогами и системой.</span><span class="sxs-lookup"><span data-stu-id="38170-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span></span> <span data-ttu-id="38170-102">Возможность <see langword="My" /> обеспечивает улучшенные производительность и быстродействие в операциях файлового ввода-вывода по сравнению с модулем <see langword="FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span></span> <span data-ttu-id="38170-103">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-104">Этот модуль поддерживает ключевые слова языка Visual Basic и элементы библиотеки времени выполнения, с доступом к файлам и папкам.</span><span class="sxs-lookup"><span data-stu-id="38170-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-105">В этом примере используется `GetAttr` функцию, чтобы определить атрибуты файла, каталога или папки.</span><span class="sxs-lookup"><span data-stu-id="38170-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/directories-and-files-summary.md"><span data-ttu-id="38170-106">Сводка по каталогам и файлам</span><span class="sxs-lookup"><span data-stu-id="38170-106">Directories and Files Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/input-and-output-summary.md"><span data-ttu-id="38170-107">Сводка по вводу и выводу</span><span class="sxs-lookup"><span data-stu-id="38170-107">Input and Output Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="38170-108">Ключевые слова (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="38170-108">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="38170-109">Члены библиотеки времени выполнения Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-109">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="38170-110">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-110">Required.</span></span> <span data-ttu-id="38170-111">Строковое выражение, определяющее, какая папка или каталог становятся новым каталогом или папкой по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="38170-111">A string expression that identifies which directory or folder becomes the new default directory or folder.</span></span> <span data-ttu-id="38170-112">Параметр <paramref name="Path" /> может содержать метку диска.</span><span class="sxs-lookup"><span data-stu-id="38170-112"><paramref name="Path" /> may include the drive.</span></span> <span data-ttu-id="38170-113">Если диск не указан, функция <see langword="ChDir" /> меняет каталог или папку по умолчанию на текущем диске.</span><span class="sxs-lookup"><span data-stu-id="38170-113">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span></span></param>
        <summary><span data-ttu-id="38170-114">Изменяет текущую папку или каталог.</span><span class="sxs-lookup"><span data-stu-id="38170-114">Changes the current directory or folder.</span></span> <span data-ttu-id="38170-115">Возможность <see langword="My" /> обеспечивает улучшенные производительность и быстродействие операций файлового ввода-вывода по сравнению с функциями <see langword="ChDir" />.</span><span class="sxs-lookup"><span data-stu-id="38170-115">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span></span> <span data-ttu-id="38170-116">Дополнительные сведения см. в разделе <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="38170-116">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-117">`ChDir` Функция меняет каталог по умолчанию, но не диск по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="38170-117">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="38170-118">Например, если по умолчанию это диск C, следующая инструкция изменяет каталог по умолчанию на диске D, но C остается диском по умолчанию:</span><span class="sxs-lookup"><span data-stu-id="38170-118">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="38170-119">Может быть сделан относительным изменения каталога является путем ввода двух точек, следующим образом:</span><span class="sxs-lookup"><span data-stu-id="38170-119">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-120">`ChDir` Функция требует разрешение неуправляемого кода, что может повлиять на выполнение в ситуациях частичного доверия.</span><span class="sxs-lookup"><span data-stu-id="38170-120">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="38170-121">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.SecurityPermission> и.</span><span class="sxs-lookup"><span data-stu-id="38170-121">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-122">В этом примере используется `ChDir` функции для изменения текущего каталога или папки.</span><span class="sxs-lookup"><span data-stu-id="38170-122">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-123">Параметр <paramref name="Path" /> пуст.</span><span class="sxs-lookup"><span data-stu-id="38170-123"><paramref name="Path" /> is empty.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="38170-124">Указан несуществующий диск или диск недоступен.</span><span class="sxs-lookup"><span data-stu-id="38170-124">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md"><span data-ttu-id="38170-125">Практическое руководство. Анализ путей к файлам в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-125">How to: Parse File Paths in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md"><span data-ttu-id="38170-126">Создание, удаление и перемещение файлов и папок в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-126">Creating, Deleting, and Moving Files and Directories in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="38170-127">Изменяет текущий диск.</span><span class="sxs-lookup"><span data-stu-id="38170-127">Changes the current drive.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="38170-128">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-128">Required.</span></span> <span data-ttu-id="38170-129">Строковое выражение, задающее существующий диск.</span><span class="sxs-lookup"><span data-stu-id="38170-129">String expression that specifies an existing drive.</span></span> <span data-ttu-id="38170-130">Если указать пустую строку (""), текущий диск не изменится.</span><span class="sxs-lookup"><span data-stu-id="38170-130">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="38170-131">Если аргумент <paramref name="Drive" /> содержит строку из нескольких знаков, функция <see langword="ChDrive" /> использует только первую букву.</span><span class="sxs-lookup"><span data-stu-id="38170-131">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="38170-132">Изменяет текущий диск.</span><span class="sxs-lookup"><span data-stu-id="38170-132">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-133">`ChDrive` Функция требует разрешение неуправляемого кода, которое может повлиять на выполнение в ситуациях частичного доверия.</span><span class="sxs-lookup"><span data-stu-id="38170-133">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="38170-134">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.SecurityPermission> и [разрешений доступа к коду](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="38170-134">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-135">В этом примере используется `ChDrive` функции, чтобы изменить текущий диск.</span><span class="sxs-lookup"><span data-stu-id="38170-135">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="38170-136">Функция создает исключение, если диск не существует.</span><span class="sxs-lookup"><span data-stu-id="38170-136">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-137">Указан несуществующий диск или диск недоступен.</span><span class="sxs-lookup"><span data-stu-id="38170-137">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-138">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-138">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="38170-139">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-139">Required.</span></span> <span data-ttu-id="38170-140">Строковое выражение, задающее существующий диск.</span><span class="sxs-lookup"><span data-stu-id="38170-140">String expression that specifies an existing drive.</span></span> <span data-ttu-id="38170-141">Если указать пустую строку (""), текущий диск не изменится.</span><span class="sxs-lookup"><span data-stu-id="38170-141">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="38170-142">Если аргумент <paramref name="Drive" /> содержит строку из нескольких знаков, функция <see langword="ChDrive" /> использует только первую букву.</span><span class="sxs-lookup"><span data-stu-id="38170-142">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="38170-143">Изменяет текущий диск.</span><span class="sxs-lookup"><span data-stu-id="38170-143">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-144">`ChDrive` Функция требует разрешение неуправляемого кода, которое может повлиять на выполнение в ситуациях частичного доверия.</span><span class="sxs-lookup"><span data-stu-id="38170-144">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="38170-145">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.SecurityPermission> и [разрешений доступа к коду](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="38170-145">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-146">В этом примере используется `ChDrive` функции, чтобы изменить текущий диск.</span><span class="sxs-lookup"><span data-stu-id="38170-146">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="38170-147">Функция создает исключение, если диск не существует.</span><span class="sxs-lookup"><span data-stu-id="38170-147">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-148">Указан несуществующий диск или диск недоступен.</span><span class="sxs-lookup"><span data-stu-id="38170-148">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-149">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-149">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="38170-150">Возвращает строку, представляющую текущий путь.</span><span class="sxs-lookup"><span data-stu-id="38170-150">Returns a string representing the current path.</span></span> <span data-ttu-id="38170-151">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> предоставляет большую производительность и быстродействие в операциях файлового ввода-вывода по сравнению с функцией <see langword="CurDir" />.</span><span class="sxs-lookup"><span data-stu-id="38170-151">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="38170-152">Дополнительные сведения см. в разделе <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="38170-152">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="38170-153">Возвращает строку, представляющую текущий путь.</span><span class="sxs-lookup"><span data-stu-id="38170-153">Returns a string representing the current path.</span></span> <span data-ttu-id="38170-154">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> предоставляет большую производительность и быстродействие в операциях файлового ввода-вывода по сравнению с функцией <see langword="CurDir" />.</span><span class="sxs-lookup"><span data-stu-id="38170-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="38170-155">Дополнительные сведения см. в разделе <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="38170-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="38170-156">Строка, представляющая текущий путь.</span><span class="sxs-lookup"><span data-stu-id="38170-156">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="38170-157">В этом примере используется `CurDir` функция возвращает текущий путь.</span><span class="sxs-lookup"><span data-stu-id="38170-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="38170-158">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-158">Optional.</span></span> <span data-ttu-id="38170-159">Выражение типа <see langword="Char" />, задающее существующий диск.</span><span class="sxs-lookup"><span data-stu-id="38170-159"><see langword="Char" /> expression that specifies an existing drive.</span></span> <span data-ttu-id="38170-160">Если диск не указан или параметр <paramref name="Drive" /> является пустой строкой (""), функция <see langword="CurDir" /> возвращает путь для текущего диска.</span><span class="sxs-lookup"><span data-stu-id="38170-160">If no drive is specified, or if <paramref name="Drive" /> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span></span></param>
        <summary><span data-ttu-id="38170-161">Возвращает строку, представляющую текущий путь.</span><span class="sxs-lookup"><span data-stu-id="38170-161">Returns a string representing the current path.</span></span> <span data-ttu-id="38170-162">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> предоставляет большую производительность и быстродействие в операциях файлового ввода-вывода по сравнению с функцией <see langword="CurDir" />.</span><span class="sxs-lookup"><span data-stu-id="38170-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="38170-163">Дополнительные сведения см. в разделе <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="38170-163">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="38170-164">Строка, представляющая текущий путь.</span><span class="sxs-lookup"><span data-stu-id="38170-164">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="38170-165">В этом примере используется `CurDir` функция возвращает текущий путь.</span><span class="sxs-lookup"><span data-stu-id="38170-165">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="38170-166">Возвращает строку, представляющую имя файла, каталога или папки, соответствующую указанному шаблону, атрибуту файла или метке тома диска.</span><span class="sxs-lookup"><span data-stu-id="38170-166">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="38170-167">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> обеспечивает большие показатели производительности и быстродействия операций файлового ввода-вывода, чем функция <see langword="Dir" />.</span><span class="sxs-lookup"><span data-stu-id="38170-167">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="38170-168">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="38170-168">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="38170-169">Возвращает строку, представляющую имя файла, каталога или папки, соответствующую указанному шаблону, атрибуту файла или метке тома диска.</span><span class="sxs-lookup"><span data-stu-id="38170-169">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="38170-170">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> обеспечивает большие показатели производительности и быстродействия операций файлового ввода-вывода, чем функция <see langword="Dir" />.</span><span class="sxs-lookup"><span data-stu-id="38170-170">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="38170-171">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="38170-171">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="38170-172">Строка, представляющая имя файла, каталога или папки, соответствующее указанному шаблону, атрибуту файла или метке тома на диске.</span><span class="sxs-lookup"><span data-stu-id="38170-172">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-173">`Dir` Функция поддерживает использование нескольких знаков (`*`) и одиночные (`?`) можно указать несколько файлов.</span><span class="sxs-lookup"><span data-stu-id="38170-173">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="38170-174">`VbVolume` Возвращает метку тома для диска, а не имя файла.</span><span class="sxs-lookup"><span data-stu-id="38170-174">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="38170-175">Необходимо указать `PathName` при первом вызове `Dir` функции.</span><span class="sxs-lookup"><span data-stu-id="38170-175">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="38170-176">Для получения следующего элемента, может выполнять последующие вызовы `Dir` функции без параметров.</span><span class="sxs-lookup"><span data-stu-id="38170-176">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-177">Для корректной, `Dir` функции требуется <xref:System.Security.Permissions.FileIOPermissionAccess.Read> и <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> флаги из <xref:System.Security.Permissions.FileIOPermission> должны быть предоставлены для исполняемого кода.</span><span class="sxs-lookup"><span data-stu-id="38170-177">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="38170-178">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, и [разрешений доступа к коду](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="38170-178">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="38170-179">`Attributes` Используются значения перечисления аргументов следующим образом:</span><span class="sxs-lookup"><span data-stu-id="38170-179">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="38170-180">Значение</span><span class="sxs-lookup"><span data-stu-id="38170-180">Value</span></span>|<span data-ttu-id="38170-181">Константа</span><span class="sxs-lookup"><span data-stu-id="38170-181">Constant</span></span>|<span data-ttu-id="38170-182">Описание</span><span class="sxs-lookup"><span data-stu-id="38170-182">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="38170-183">По умолчанию.</span><span class="sxs-lookup"><span data-stu-id="38170-183">Default.</span></span> <span data-ttu-id="38170-184">Указывает файлы без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="38170-184">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="38170-185">Указывает файлы, доступные только для чтения, а также файлы без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="38170-185">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="38170-186">Задает скрытые файлы, а также файлы без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="38170-186">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="38170-187">Указывает, системные файлы и файлы без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="38170-187">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="38170-188">Указывает метку тома. Если любой другой атрибут указан, `vbVolume` учитывается.</span><span class="sxs-lookup"><span data-stu-id="38170-188">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="38170-189">Указывает каталоги или папки, а также файлы без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="38170-189">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="38170-190">Файл был изменен с момента создания последней резервной копии.</span><span class="sxs-lookup"><span data-stu-id="38170-190">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="38170-191">У файла другое имя.</span><span class="sxs-lookup"><span data-stu-id="38170-191">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="38170-192">Эти перечисления указаны в языке Visual Basic и может использоваться в любом месте в коде вместо фактических значений.</span><span class="sxs-lookup"><span data-stu-id="38170-192">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-193">В этом примере используется `Dir` функция для проверки существования определенных файлов и каталогов.</span><span class="sxs-lookup"><span data-stu-id="38170-193">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string Pathname, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir(string Pathname, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (Pathname As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" FrameworkAlternate="netframework-2.0" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" FrameworkAlternate="netframework-2.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" Index="1" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="38170-194">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-194">Optional.</span></span> <span data-ttu-id="38170-195">Строковое выражение, задающее имя файла, имя каталога или папки, либо метку тома диска.</span><span class="sxs-lookup"><span data-stu-id="38170-195">A string expression that specifies a file name, directory or folder name, or drive volume label.</span></span> <span data-ttu-id="38170-196">Если параметр <paramref name="PathName" /> не обнаруживается, возвращается строка нулевой длины (<see langword="&quot;&quot;" />).</span><span class="sxs-lookup"><span data-stu-id="38170-196">A zero-length string (<see langword="&quot;&quot;" />) is returned if <paramref name="PathName" /> is not found.</span></span></param>
        <param name="Pathname"><span data-ttu-id="38170-197">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-197">Optional.</span></span> <span data-ttu-id="38170-198">Строковое выражение, задающее имя файла, имя каталога или папки, либо метку тома диска.</span><span class="sxs-lookup"><span data-stu-id="38170-198">A string expression that specifies a file name, directory or folder name, or drive volume label.</span></span> <span data-ttu-id="38170-199">Если параметр <paramref name="Pathname" /> не обнаруживается, возвращается строка нулевой длины (<see langword="&quot;&quot;" />).</span><span class="sxs-lookup"><span data-stu-id="38170-199">A zero-length string (<see langword="&quot;&quot;" />) is returned if <paramref name="Pathname" /> is not found.</span></span></param>
        <param name="Attributes"><span data-ttu-id="38170-200">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-200">Optional.</span></span> <span data-ttu-id="38170-201">Перечисление или числовое выражение, значение которого задает атрибуты файла.</span><span class="sxs-lookup"><span data-stu-id="38170-201">Enumeration or numeric expression whose value specifies file attributes.</span></span> <span data-ttu-id="38170-202">Если этот параметр опущен, функция <see langword="Dir" /> возвращает файлы, соответствующие параметру <paramref name="Pathname" />, но не имеющие атрибутов.</span><span class="sxs-lookup"><span data-stu-id="38170-202">If omitted, <see langword="Dir" /> returns files that match <paramref name="Pathname" /> but have no attributes.</span></span></param>
        <summary><span data-ttu-id="38170-203">Возвращает строку, представляющую имя файла, каталога или папки, соответствующую указанному шаблону, атрибуту файла или метке тома диска.</span><span class="sxs-lookup"><span data-stu-id="38170-203">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="38170-204">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> обеспечивает большие показатели производительности и быстродействия операций файлового ввода-вывода, чем функция <see langword="Dir" />.</span><span class="sxs-lookup"><span data-stu-id="38170-204">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="38170-205">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="38170-205">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="38170-206">Строка, представляющая имя файла, каталога или папки, соответствующее указанному шаблону, атрибуту файла или метке тома на диске.</span><span class="sxs-lookup"><span data-stu-id="38170-206">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-207">`Dir` Функция поддерживает использование нескольких знаков (`*`) и одиночные (`?`) можно указать несколько файлов.</span><span class="sxs-lookup"><span data-stu-id="38170-207">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="38170-208">`VbVolume` Возвращает метку тома для диска, а не имя файла.</span><span class="sxs-lookup"><span data-stu-id="38170-208">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="38170-209">Необходимо указать `PathName` при первом вызове `Dir` функции.</span><span class="sxs-lookup"><span data-stu-id="38170-209">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="38170-210">Для получения следующего элемента, может выполнять последующие вызовы `Dir` функции без параметров.</span><span class="sxs-lookup"><span data-stu-id="38170-210">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-211">Для корректной, `Dir` функции требуется <xref:System.Security.Permissions.FileIOPermissionAccess.Read> и <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> флаги из <xref:System.Security.Permissions.FileIOPermission> должны быть предоставлены для исполняемого кода.</span><span class="sxs-lookup"><span data-stu-id="38170-211">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="38170-212">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, и [разрешений доступа к коду](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="38170-212">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="38170-213">`Attributes` Используются значения перечисления аргументов следующим образом:</span><span class="sxs-lookup"><span data-stu-id="38170-213">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="38170-214">Значение</span><span class="sxs-lookup"><span data-stu-id="38170-214">Value</span></span>|<span data-ttu-id="38170-215">Константа</span><span class="sxs-lookup"><span data-stu-id="38170-215">Constant</span></span>|<span data-ttu-id="38170-216">Описание</span><span class="sxs-lookup"><span data-stu-id="38170-216">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="38170-217">По умолчанию.</span><span class="sxs-lookup"><span data-stu-id="38170-217">Default.</span></span> <span data-ttu-id="38170-218">Указывает файлы, не имеющие атрибутов.</span><span class="sxs-lookup"><span data-stu-id="38170-218">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="38170-219">Указывает файлы только для чтения, в дополнение к файлам без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="38170-219">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="38170-220">Задает скрытые файлы, в дополнение к файлам без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="38170-220">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="38170-221">Определяет системные файлы, кроме файлов, не имеющие атрибутов.</span><span class="sxs-lookup"><span data-stu-id="38170-221">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="38170-222">Указывает метку тома. Если любой другой атрибут указан, `vbVolume` учитывается.</span><span class="sxs-lookup"><span data-stu-id="38170-222">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="38170-223">Указывает каталоги или папки в дополнение к файлам без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="38170-223">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="38170-224">Файл был изменен с момента создания последней резервной копии.</span><span class="sxs-lookup"><span data-stu-id="38170-224">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="38170-225">У файла другое имя.</span><span class="sxs-lookup"><span data-stu-id="38170-225">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="38170-226">Эти перечисления указаны в языке Visual Basic и может использоваться в любом месте кода вместо фактических значений.</span><span class="sxs-lookup"><span data-stu-id="38170-226">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-227">В этом примере используется `Dir` функция для проверки существования определенных файлов и каталогов.</span><span class="sxs-lookup"><span data-stu-id="38170-227">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-228">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-228">Required.</span></span> <span data-ttu-id="38170-229">Значение <see langword="Integer" />, содержащее любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-229">An <see langword="Integer" /> that contains any valid file number.</span></span></param>
        <summary><span data-ttu-id="38170-230">Возвращает логическое значение <see langword="True" /> при достижении конца файла, открытого в режиме <see langword="Random" /> или в режиме последовательного ввода (<see langword="Input" />).</span><span class="sxs-lookup"><span data-stu-id="38170-230">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></summary>
        <returns><span data-ttu-id="38170-231">Логическое значение <see langword="True" /> при достижении конца файла, открытого в режиме <see langword="Random" /> или в режиме последовательного ввода (<see langword="Input" />).</span><span class="sxs-lookup"><span data-stu-id="38170-231">A Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-232">Используйте `EOF` во избежание ошибки, возникшей при попытке получить данные за пределами файла.</span><span class="sxs-lookup"><span data-stu-id="38170-232">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="38170-233">`EOF` Возвращает `False` пока не будет достигнут конец файла.</span><span class="sxs-lookup"><span data-stu-id="38170-233">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="38170-234">В файлах, открытых для `Random` или `Binary` доступ, `EOF` возвращает `False` до последнего выполненного `FileGet` функции не удалось прочитать запись целиком.</span><span class="sxs-lookup"><span data-stu-id="38170-234">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="38170-235">В файлах, открытых для `Binary` получить доступ к, попытка прочитать файл с помощью `Input` функционировать до `EOF` возвращает `True` приводит к ошибке.</span><span class="sxs-lookup"><span data-stu-id="38170-235">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="38170-236">Используйте `LOF` и `Loc` функции вместо `EOF` при чтении двоичных файлов с `Input`, или использовать `Get` при использовании `EOF` функции.</span><span class="sxs-lookup"><span data-stu-id="38170-236">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="38170-237">В файлах, открытых для `Output`, `EOF` всегда возвращает `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-237">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-238">В этом примере используется `EOF` функции, чтобы определить конец файла.</span><span class="sxs-lookup"><span data-stu-id="38170-238">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="38170-239">В этом примере предполагается, что `Testfile` — текстовый файл, который содержит несколько строк текста.</span><span class="sxs-lookup"><span data-stu-id="38170-239">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-240">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-240">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-241">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-241">Required.</span></span> <span data-ttu-id="38170-242"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="38170-242"><see langword="Integer" />.</span></span> <span data-ttu-id="38170-243">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-243">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="38170-244">Возвращает перечисление, представляющее режим файла для файлов, открытых функцией <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="38170-244">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="38170-245">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> обеспечивает большие показатели производительности и быстродействия операций файлового ввода-вывода, чем функция <see langword="FileAttr" />.</span><span class="sxs-lookup"><span data-stu-id="38170-245">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span></span> <span data-ttu-id="38170-246">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="38170-246">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="38170-247">Следующие значения перечисления определяют режим доступа к файлу:</span><span class="sxs-lookup"><span data-stu-id="38170-247">The following enumeration values indicate the file access mode:</span></span> 
 <list type="table"><item><term> <span data-ttu-id="38170-248">Значение</span><span class="sxs-lookup"><span data-stu-id="38170-248">Value</span></span> 
 </term><description> <span data-ttu-id="38170-249">Режим</span><span class="sxs-lookup"><span data-stu-id="38170-249">Mode</span></span> 
 </description></item><item><term> <span data-ttu-id="38170-250">1</span><span class="sxs-lookup"><span data-stu-id="38170-250">1</span></span> 
 </term><description><see langword="OpenMode.Input" /></description></item><item><term> <span data-ttu-id="38170-251">2</span><span class="sxs-lookup"><span data-stu-id="38170-251">2</span></span> 
 </term><description><see langword="OpenMode.Output" /></description></item><item><term> <span data-ttu-id="38170-252">4</span><span class="sxs-lookup"><span data-stu-id="38170-252">4</span></span> 
 </term><description><see langword="OpenMode.Random" /></description></item><item><term> <span data-ttu-id="38170-253">8</span><span class="sxs-lookup"><span data-stu-id="38170-253">8</span></span> 
 </term><description><see langword="OpenMode.Append" /></description></item><item><term> <span data-ttu-id="38170-254">32</span><span class="sxs-lookup"><span data-stu-id="38170-254">32</span></span> 
 </term><description><see langword="OpenMode.Binary" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-255">Эта функция возвращает перечисление, представляющее режим файла для файлов, открытых `FileOpen` функции.</span><span class="sxs-lookup"><span data-stu-id="38170-255">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-256">В этом примере используется `FileAttr` функция, возвращающая файловый режим открытого файла.</span><span class="sxs-lookup"><span data-stu-id="38170-256">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-257">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-257">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers"><span data-ttu-id="38170-258">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-258">Optional.</span></span> <span data-ttu-id="38170-259">Массив параметров из 0 или нескольких каналов, которые должны быть закрыты.</span><span class="sxs-lookup"><span data-stu-id="38170-259">Parameter array of 0 or more channels to be closed.</span></span></param>
        <summary><span data-ttu-id="38170-260">Завершает операции ввода-вывода с файлом, открытым с помощью функции <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="38170-260">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="38170-261">Возможность <see langword="My" /> предоставляет лучшие показатели производительности и быстродействии в операциях файлового ввода-вывода.</span><span class="sxs-lookup"><span data-stu-id="38170-261"><see langword="My" /> gives you better productivity and performance in file I/O operations.</span></span> <span data-ttu-id="38170-262">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-262">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-263">`FileClose` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-263">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="38170-264">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-264">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="38170-265">Дополнительные сведения см. в разделе [Практическое руководство. Чтение текста из файлов с помощью StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md), [как: Запись текста в файлы с помощью StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), и [Пошаговое руководство: Операции с файлами и каталогами в Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span><span class="sxs-lookup"><span data-stu-id="38170-265">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md), [How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="38170-266">Если опустить `FileNumbers`, все активные файлы, открываемые `FileOpen` функция закрываются.</span><span class="sxs-lookup"><span data-stu-id="38170-266">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="38170-267">При закрытии файлов, открытых для `Output` или `Append`, последнее содержимое буфера выходных данных записывается в буфер операционной системы для этого файла.</span><span class="sxs-lookup"><span data-stu-id="38170-267">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="38170-268">Все буферное пространство, связанное с закрытого файл освобождается.</span><span class="sxs-lookup"><span data-stu-id="38170-268">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="38170-269">Когда `FileClose` функция выполняется, а связь файла с его файла заканчивается.</span><span class="sxs-lookup"><span data-stu-id="38170-269">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-270">В этом примере используется `FileClose` функцию, чтобы закрыть файл открыт для `Input`.</span><span class="sxs-lookup"><span data-stu-id="38170-270">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-271"><paramref name="FileNumber" /> — не существует.</span><span class="sxs-lookup"><span data-stu-id="38170-271"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md"><span data-ttu-id="38170-272">Оператор End</span><span class="sxs-lookup"><span data-stu-id="38170-272">End Statement</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/stop-statement.md"><span data-ttu-id="38170-273">Оператор Stop (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="38170-273">Stop Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-274">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-274">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="38170-275">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-275">Required.</span></span> <span data-ttu-id="38170-276">Строковое выражение, задающее имя копируемого файла.</span><span class="sxs-lookup"><span data-stu-id="38170-276">A string expression that specifies the name of the file to be copied.</span></span> <span data-ttu-id="38170-277">Параметр <paramref name="Source" /> может содержать имя каталога или папки, а также имя диска, где находится исходный файл.</span><span class="sxs-lookup"><span data-stu-id="38170-277"><paramref name="Source" /> may include the directory or folder, and drive, of the source file.</span></span></param>
        <param name="Destination"><span data-ttu-id="38170-278">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-278">Required.</span></span> <span data-ttu-id="38170-279">Строковое выражение, определяющее имя файла назначения.</span><span class="sxs-lookup"><span data-stu-id="38170-279">A string expression that specifies the destination file name.</span></span> <span data-ttu-id="38170-280">Параметр <paramref name="Destination" /> может содержать имя каталога или папки, а также имя диска, где находится файл назначения.</span><span class="sxs-lookup"><span data-stu-id="38170-280"><paramref name="Destination" /> may include the directory or folder, and drive, of the destination file.</span></span></param>
        <summary><span data-ttu-id="38170-281">Копирует файл.</span><span class="sxs-lookup"><span data-stu-id="38170-281">Copies a file.</span></span> <span data-ttu-id="38170-282">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> предоставляет большую производительность и быстродействие в операциях файлового ввода-вывода по сравнению с функцией <see langword="FileCopy" />.</span><span class="sxs-lookup"><span data-stu-id="38170-282">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span></span> <span data-ttu-id="38170-283">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="38170-283">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-284">Если вы попытаетесь использовать `FileCopy` работать на открытый файл, возникает ошибка.</span><span class="sxs-lookup"><span data-stu-id="38170-284">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="38170-285">`FileCopy` требует полного доверия для работы на локальном диске.</span><span class="sxs-lookup"><span data-stu-id="38170-285">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-286">В этом примере используется `FileCopy` функции для копирования одного файла в другой.</span><span class="sxs-lookup"><span data-stu-id="38170-286">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="38170-287">Для целей этого примера, предположим, что `SrcFile` — это файл, содержащий данные.</span><span class="sxs-lookup"><span data-stu-id="38170-287">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-288">Параметр <paramref name="Source" /> или <paramref name="Destination" /> недопустим или не указан.</span><span class="sxs-lookup"><span data-stu-id="38170-288"><paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-289">Этот файл уже открыт.</span><span class="sxs-lookup"><span data-stu-id="38170-289">File is already open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="38170-290">Файл не существует.</span><span class="sxs-lookup"><span data-stu-id="38170-290">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md"><span data-ttu-id="38170-291">Практическое руководство. Создание копии файла в другом каталоге в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-291">How to: Create a Copy of a File in a Different Directory in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md"><span data-ttu-id="38170-292">Практическое руководство. Создание копии файла в том же каталоге в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-292">How to: Create a Copy of a File in the Same Directory in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md"><span data-ttu-id="38170-293">Практическое руководство. Копирование каталога в другой каталог в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-293">How to: Copy a Directory to Another Directory in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="38170-294">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-294">Required.</span></span> <span data-ttu-id="38170-295">Строковое выражение, определяющее имя файла.</span><span class="sxs-lookup"><span data-stu-id="38170-295">A string expression that specifies a file name.</span></span> <span data-ttu-id="38170-296"><paramref name="PathName" /> — может включать каталог или папку, а также имя диска.</span><span class="sxs-lookup"><span data-stu-id="38170-296"><paramref name="PathName" /> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="38170-297">Возвращает значение типа <see langword="Date" />, которое указывает дату и время последней операции записи в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-297">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span></span> <span data-ttu-id="38170-298">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileDateTime" />.</span><span class="sxs-lookup"><span data-stu-id="38170-298">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span></span> <span data-ttu-id="38170-299">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="38170-299">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span></span></summary>
        <returns><span data-ttu-id="38170-300">Значение типа <see langword="Date" />, которое указывает дату и время создания или последнего изменения файла.</span><span class="sxs-lookup"><span data-stu-id="38170-300"><see langword="Date" /> value that indicates the date and time a file was created or last modified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="38170-301">В этом примере используется `FileDateTime` создания или последнего изменения функции для определения даты и времени файла.</span><span class="sxs-lookup"><span data-stu-id="38170-301">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="38170-302">Формат даты и времени зависит от параметров языкового стандарта системы.</span><span class="sxs-lookup"><span data-stu-id="38170-302">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-303">Параметр <paramref name="PathName" /> недопустим или содержит подстановочный знак.</span><span class="sxs-lookup"><span data-stu-id="38170-303"><paramref name="PathName" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="38170-304">Указанный файл не существует.</span><span class="sxs-lookup"><span data-stu-id="38170-304">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-305">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-305">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="38170-306">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="38170-306">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="38170-307">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="38170-307">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="38170-308">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-308">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-309">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-309">Required.</span></span> <span data-ttu-id="38170-310">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-310">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-311">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-311">Required.</span></span> <span data-ttu-id="38170-312">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="38170-312">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="38170-313">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-313">Optional.</span></span> <span data-ttu-id="38170-314">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="38170-314">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="38170-315">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="38170-315">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="38170-316">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="38170-316">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="38170-317">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-317">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-318">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="38170-318">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="38170-319">Данные, считанные с `FileGet` , обычно записываются в файл с `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="38170-319">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="38170-320">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-320">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="38170-321">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="38170-321">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-322">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="38170-322">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="38170-323">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="38170-323">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="38170-324">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="38170-324">Random Mode</span></span>  
 <span data-ttu-id="38170-325">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="38170-325">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="38170-326">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="38170-326">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="38170-327">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="38170-327">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="38170-328">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-328">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="38170-329">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-329">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="38170-330">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-330">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="38170-331">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-331">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="38170-332">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-332">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="38170-333">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="38170-333">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="38170-334">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-334">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="38170-335">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="38170-335">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="38170-336">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="38170-336">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="38170-337">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="38170-337">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="38170-338">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="38170-338">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="38170-339">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-339">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-340">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-340">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="38170-341">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-341">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="38170-342">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="38170-342">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="38170-343">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="38170-343">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="38170-344">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="38170-344">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="38170-345">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-345">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="38170-346">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-346">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="38170-347">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="38170-347">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="38170-348">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-348">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-349">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="38170-349">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="38170-350">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="38170-350">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="38170-351">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-351">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="38170-352">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="38170-352">Binary Mode</span></span>  
 <span data-ttu-id="38170-353">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="38170-353">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="38170-354">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="38170-354">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="38170-355">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="38170-355">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="38170-356">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="38170-356">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="38170-357">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="38170-357">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="38170-358">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="38170-358">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="38170-359">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="38170-359">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="38170-360">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="38170-360">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="38170-361">Чтение из файла с помощью`FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-361">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-362"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="38170-362"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-363">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-363">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="38170-364">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-364">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-365">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-365">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-366">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-366">Required.</span></span> <span data-ttu-id="38170-367">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-367">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-368">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-368">Required.</span></span> <span data-ttu-id="38170-369">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="38170-369">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="38170-370">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-370">Optional.</span></span> <span data-ttu-id="38170-371">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="38170-371">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="38170-372">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="38170-372">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="38170-373">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="38170-373">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="38170-374">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-374">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-375">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="38170-375">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="38170-376">Данные, считанные с `FileGet` , обычно записываются в файл с `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="38170-376">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="38170-377">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-377">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="38170-378">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="38170-378">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-379">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="38170-379">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="38170-380">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="38170-380">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="38170-381">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="38170-381">Random Mode</span></span>  
 <span data-ttu-id="38170-382">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="38170-382">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="38170-383">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="38170-383">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="38170-384">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="38170-384">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="38170-385">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-385">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="38170-386">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-386">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="38170-387">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-387">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="38170-388">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-388">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="38170-389">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-389">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="38170-390">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="38170-390">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="38170-391">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-391">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="38170-392">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="38170-392">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="38170-393">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="38170-393">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="38170-394">Если дескриптор не используется.</span><span class="sxs-lookup"><span data-stu-id="38170-394">If the descriptor is not used.</span></span> <span data-ttu-id="38170-395">Размер и границы массива, передан в `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="38170-395">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="38170-396">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="38170-396">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="38170-397">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-397">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-398">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-398">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="38170-399">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-399">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="38170-400">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="38170-400">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="38170-401">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="38170-401">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="38170-402">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="38170-402">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="38170-403">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-403">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="38170-404">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-404">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="38170-405">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="38170-405">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="38170-406">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-406">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-407">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="38170-407">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="38170-408">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="38170-408">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="38170-409">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-409">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="38170-410">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="38170-410">Binary Mode</span></span>  
 <span data-ttu-id="38170-411">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="38170-411">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="38170-412">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="38170-412">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="38170-413">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="38170-413">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="38170-414">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="38170-414">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="38170-415">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="38170-415">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="38170-416">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="38170-416">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="38170-417">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="38170-417">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="38170-418">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="38170-418">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="38170-419">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-419">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-420"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="38170-420"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-421">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-421">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="38170-422">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-422">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-423">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-423">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-424">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-424">Required.</span></span> <span data-ttu-id="38170-425">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-425">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-426">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-426">Required.</span></span> <span data-ttu-id="38170-427">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="38170-427">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="38170-428">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-428">Optional.</span></span> <span data-ttu-id="38170-429">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="38170-429">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="38170-430">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="38170-430">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="38170-431">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="38170-431">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="38170-432">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-432">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-433">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="38170-433">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="38170-434">Данные, считанные с `FileGet` , обычно записываются в файл с `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="38170-434">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="38170-435">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-435">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="38170-436">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="38170-436">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-437">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="38170-437">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="38170-438">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="38170-438">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="38170-439">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="38170-439">Random Mode</span></span>  
 <span data-ttu-id="38170-440">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="38170-440">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="38170-441">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="38170-441">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="38170-442">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="38170-442">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="38170-443">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-443">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="38170-444">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-444">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="38170-445">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-445">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="38170-446">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-446">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="38170-447">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-447">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="38170-448">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="38170-448">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="38170-449">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-449">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="38170-450">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="38170-450">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="38170-451">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="38170-451">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="38170-452">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="38170-452">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="38170-453">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="38170-453">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="38170-454">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-454">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-455">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-455">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="38170-456">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-456">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="38170-457">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="38170-457">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="38170-458">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="38170-458">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="38170-459">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="38170-459">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="38170-460">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-460">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="38170-461">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-461">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="38170-462">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="38170-462">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="38170-463">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-463">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-464">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="38170-464">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="38170-465">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="38170-465">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="38170-466">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-466">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="38170-467">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="38170-467">Binary Mode</span></span>  
 <span data-ttu-id="38170-468">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="38170-468">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="38170-469">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="38170-469">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="38170-470">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="38170-470">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="38170-471">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="38170-471">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="38170-472">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="38170-472">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="38170-473">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="38170-473">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="38170-474">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="38170-474">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="38170-475">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="38170-475">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="38170-476">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-476">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-477"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="38170-477"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-478">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-478">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="38170-479">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-479">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-480">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-480">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-481">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-481">Required.</span></span> <span data-ttu-id="38170-482">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-482">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-483">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-483">Required.</span></span> <span data-ttu-id="38170-484">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="38170-484">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="38170-485">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-485">Optional.</span></span> <span data-ttu-id="38170-486">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="38170-486">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="38170-487">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="38170-487">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="38170-488">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="38170-488">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="38170-489">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-489">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-490">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="38170-490">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="38170-491">Данные, считанные с `FileGet` , обычно записываются в файл с `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="38170-491">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="38170-492">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-492">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="38170-493">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="38170-493">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-494">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="38170-494">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="38170-495">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="38170-495">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="38170-496">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="38170-496">Random Mode</span></span>  
 <span data-ttu-id="38170-497">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="38170-497">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="38170-498">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции`FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="38170-498">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="38170-499">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="38170-499">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="38170-500">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-500">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="38170-501">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-501">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="38170-502">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-502">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="38170-503">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-503">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="38170-504">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-504">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="38170-505">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="38170-505">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="38170-506">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-506">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="38170-507">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="38170-507">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="38170-508">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="38170-508">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="38170-509">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="38170-509">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="38170-510">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="38170-510">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="38170-511">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-511">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-512">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-512">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="38170-513">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-513">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="38170-514">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="38170-514">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="38170-515">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="38170-515">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="38170-516">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="38170-516">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="38170-517">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-517">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="38170-518">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-518">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="38170-519">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="38170-519">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="38170-520">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-520">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-521">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="38170-521">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="38170-522">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="38170-522">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="38170-523">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-523">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="38170-524">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="38170-524">Binary Mode</span></span>  
 <span data-ttu-id="38170-525">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="38170-525">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="38170-526">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="38170-526">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="38170-527">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="38170-527">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="38170-528">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="38170-528">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="38170-529">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="38170-529">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="38170-530">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="38170-530">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="38170-531">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="38170-531">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="38170-532">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="38170-532">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="38170-533">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-533">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-534"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="38170-534"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-535">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-535">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="38170-536">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-536">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-537">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-537">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-538">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-538">Required.</span></span> <span data-ttu-id="38170-539">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-539">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-540">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-540">Required.</span></span> <span data-ttu-id="38170-541">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="38170-541">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="38170-542">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-542">Optional.</span></span> <span data-ttu-id="38170-543">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="38170-543">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="38170-544">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="38170-544">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="38170-545">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="38170-545">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="38170-546">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-546">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-547">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="38170-547">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="38170-548">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="38170-548">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="38170-549">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-549">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="38170-550">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="38170-550">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-551">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="38170-551">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="38170-552">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="38170-552">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="38170-553">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="38170-553">Random Mode</span></span>  
 <span data-ttu-id="38170-554">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="38170-554">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="38170-555">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="38170-555">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="38170-556">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="38170-556">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="38170-557">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-557">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="38170-558">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-558">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="38170-559">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-559">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="38170-560">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-560">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="38170-561">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-561">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="38170-562">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="38170-562">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="38170-563">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-563">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="38170-564">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="38170-564">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="38170-565">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="38170-565">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="38170-566">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="38170-566">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="38170-567">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="38170-567">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="38170-568">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-568">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-569">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-569">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="38170-570">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-570">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="38170-571">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="38170-571">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="38170-572">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="38170-572">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="38170-573">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="38170-573">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="38170-574">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-574">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="38170-575">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-575">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="38170-576">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="38170-576">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="38170-577">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-577">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-578">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="38170-578">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="38170-579">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="38170-579">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="38170-580">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-580">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="38170-581">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="38170-581">Binary Mode</span></span>  
 <span data-ttu-id="38170-582">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="38170-582">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="38170-583">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="38170-583">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="38170-584">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="38170-584">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="38170-585">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="38170-585">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="38170-586">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="38170-586">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="38170-587">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="38170-587">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="38170-588">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="38170-588">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="38170-589">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="38170-589">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="38170-590">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-590">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-591"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="38170-591"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-592">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-592">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="38170-593">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-593">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-594">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-594">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-595">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-595">Required.</span></span> <span data-ttu-id="38170-596">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-596">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-597">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-597">Required.</span></span> <span data-ttu-id="38170-598">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="38170-598">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="38170-599">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-599">Optional.</span></span> <span data-ttu-id="38170-600">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="38170-600">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="38170-601">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="38170-601">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="38170-602">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="38170-602">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="38170-603">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-603">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-604">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="38170-604">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="38170-605">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="38170-605">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="38170-606">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-606">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="38170-607">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="38170-607">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-608">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="38170-608">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="38170-609">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="38170-609">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="38170-610">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="38170-610">Random Mode</span></span>  
 <span data-ttu-id="38170-611">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="38170-611">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="38170-612">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="38170-612">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="38170-613">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="38170-613">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="38170-614">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-614">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="38170-615">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-615">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="38170-616">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-616">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="38170-617">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-617">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="38170-618">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-618">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="38170-619">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="38170-619">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="38170-620">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-620">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="38170-621">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="38170-621">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="38170-622">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="38170-622">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="38170-623">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="38170-623">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="38170-624">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="38170-624">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="38170-625">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-625">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-626">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-626">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="38170-627">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-627">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="38170-628">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="38170-628">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="38170-629">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="38170-629">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="38170-630">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="38170-630">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="38170-631">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-631">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="38170-632">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="38170-633">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="38170-633">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="38170-634">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-634">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-635">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="38170-635">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="38170-636">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="38170-636">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="38170-637">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-637">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="38170-638">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="38170-638">Binary Mode</span></span>  
 <span data-ttu-id="38170-639">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="38170-639">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="38170-640">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="38170-640">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="38170-641">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="38170-641">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="38170-642">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="38170-642">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="38170-643">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="38170-643">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="38170-644">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="38170-644">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="38170-645">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="38170-645">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="38170-646">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="38170-646">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="38170-647">Чтение из файла с помощью`FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-647">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-648"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="38170-648"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-649">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-649">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="38170-650">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-650">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-651">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-651">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-652">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-652">Required.</span></span> <span data-ttu-id="38170-653">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-653">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-654">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-654">Required.</span></span> <span data-ttu-id="38170-655">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="38170-655">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="38170-656">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-656">Optional.</span></span> <span data-ttu-id="38170-657">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="38170-657">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="38170-658">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="38170-658">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="38170-659">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="38170-659">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="38170-660">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-660">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-661">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="38170-661">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="38170-662">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="38170-662">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="38170-663">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-663">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="38170-664">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="38170-664">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-665">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="38170-665">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="38170-666">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="38170-666">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="38170-667">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="38170-667">Random Mode</span></span>  
 <span data-ttu-id="38170-668">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="38170-668">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="38170-669">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="38170-669">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="38170-670">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="38170-670">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="38170-671">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-671">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="38170-672">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-672">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="38170-673">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-673">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="38170-674">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-674">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="38170-675">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-675">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="38170-676">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="38170-676">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="38170-677">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-677">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="38170-678">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="38170-678">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="38170-679">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="38170-679">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="38170-680">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="38170-680">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="38170-681">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="38170-681">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="38170-682">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-682">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-683">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-683">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="38170-684">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-684">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="38170-685">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="38170-685">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="38170-686">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="38170-686">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="38170-687">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="38170-687">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="38170-688">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-688">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="38170-689">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="38170-690">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="38170-690">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="38170-691">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-691">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-692">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="38170-692">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="38170-693">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="38170-693">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="38170-694">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-694">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="38170-695">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="38170-695">Binary Mode</span></span>  
 <span data-ttu-id="38170-696">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="38170-696">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="38170-697">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="38170-697">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="38170-698">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="38170-698">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="38170-699">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="38170-699">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="38170-700">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="38170-700">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="38170-701">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="38170-701">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="38170-702">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="38170-702">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="38170-703">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="38170-703">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="38170-704">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-704">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-705"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="38170-705"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-706">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-706">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="38170-707">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-707">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-708">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-708">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-709">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-709">Required.</span></span> <span data-ttu-id="38170-710">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-710">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-711">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-711">Required.</span></span> <span data-ttu-id="38170-712">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="38170-712">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="38170-713">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-713">Optional.</span></span> <span data-ttu-id="38170-714">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="38170-714">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="38170-715">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="38170-715">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="38170-716">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="38170-716">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="38170-717">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-717">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-718">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="38170-718">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="38170-719">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="38170-719">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="38170-720">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-720">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="38170-721">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="38170-721">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-722">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="38170-722">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="38170-723">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="38170-723">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="38170-724">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="38170-724">Random Mode</span></span>  
 <span data-ttu-id="38170-725">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="38170-725">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="38170-726">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="38170-726">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="38170-727">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="38170-727">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="38170-728">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-728">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="38170-729">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-729">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="38170-730">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-730">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="38170-731">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-731">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="38170-732">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-732">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="38170-733">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="38170-733">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="38170-734">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-734">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="38170-735">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="38170-735">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="38170-736">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="38170-736">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="38170-737">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="38170-737">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="38170-738">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="38170-738">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="38170-739">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-739">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-740">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-740">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="38170-741">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-741">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="38170-742">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="38170-742">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="38170-743">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="38170-743">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="38170-744">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="38170-744">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="38170-745">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-745">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="38170-746">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="38170-747">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="38170-747">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="38170-748">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-748">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-749">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="38170-749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="38170-750">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="38170-750">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="38170-751">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-751">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="38170-752">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="38170-752">Binary Mode</span></span>  
 <span data-ttu-id="38170-753">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="38170-753">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="38170-754">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="38170-754">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="38170-755">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="38170-755">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="38170-756">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="38170-756">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="38170-757">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="38170-757">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="38170-758">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="38170-758">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="38170-759">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="38170-759">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="38170-760">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="38170-760">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="38170-761">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-761">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-762"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="38170-762"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-763">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-763">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="38170-764">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-764">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-765">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-765">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-766">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-766">Required.</span></span> <span data-ttu-id="38170-767">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-767">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-768">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-768">Required.</span></span> <span data-ttu-id="38170-769">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="38170-769">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="38170-770">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-770">Optional.</span></span> <span data-ttu-id="38170-771">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="38170-771">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="38170-772">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="38170-772">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="38170-773">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="38170-773">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="38170-774">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-774">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-775">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="38170-775">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="38170-776">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="38170-776">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="38170-777">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-777">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="38170-778">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="38170-778">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-779">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="38170-779">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="38170-780">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="38170-780">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="38170-781">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="38170-781">Random Mode</span></span>  
 <span data-ttu-id="38170-782">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="38170-782">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="38170-783">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="38170-783">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="38170-784">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="38170-784">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="38170-785">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-785">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="38170-786">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-786">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="38170-787">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-787">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="38170-788">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-788">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="38170-789">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-789">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="38170-790">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="38170-790">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="38170-791">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-791">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="38170-792">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="38170-792">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="38170-793">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="38170-793">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="38170-794">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="38170-794">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="38170-795">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="38170-795">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="38170-796">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-796">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-797">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-797">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="38170-798">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-798">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="38170-799">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="38170-799">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="38170-800">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="38170-800">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="38170-801">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="38170-801">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="38170-802">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-802">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="38170-803">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-803">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="38170-804">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="38170-804">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="38170-805">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-805">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-806">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="38170-806">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="38170-807">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="38170-807">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="38170-808">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-808">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="38170-809">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="38170-809">Binary Mode</span></span>  
 <span data-ttu-id="38170-810">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="38170-810">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="38170-811">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="38170-811">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="38170-812">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="38170-812">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="38170-813">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="38170-813">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="38170-814">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="38170-814">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="38170-815">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="38170-815">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="38170-816">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="38170-816">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="38170-817">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="38170-817">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="38170-818">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-818">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-819"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="38170-819"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-820">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-820">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="38170-821">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-821">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-822">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-822">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-823">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-823">Required.</span></span> <span data-ttu-id="38170-824">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-824">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-825">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-825">Required.</span></span> <span data-ttu-id="38170-826">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="38170-826">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="38170-827">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-827">Optional.</span></span> <span data-ttu-id="38170-828">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="38170-828">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="38170-829">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="38170-829">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="38170-830">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="38170-830">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="38170-831">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-831">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-832">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="38170-832">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="38170-833">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="38170-833">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="38170-834">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-834">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="38170-835">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="38170-835">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-836">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="38170-836">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="38170-837">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="38170-837">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="38170-838">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="38170-838">Random Mode</span></span>  
 <span data-ttu-id="38170-839">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="38170-839">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="38170-840">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="38170-840">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="38170-841">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="38170-841">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="38170-842">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-842">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="38170-843">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-843">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="38170-844">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-844">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="38170-845">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-845">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="38170-846">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-846">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="38170-847">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="38170-847">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="38170-848">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-848">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="38170-849">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="38170-849">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="38170-850">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="38170-850">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="38170-851">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="38170-851">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="38170-852">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="38170-852">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="38170-853">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-853">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-854">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-854">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="38170-855">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-855">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="38170-856">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="38170-856">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="38170-857">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="38170-857">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="38170-858">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="38170-858">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="38170-859">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-859">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="38170-860">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-860">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="38170-861">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="38170-861">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="38170-862">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-862">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-863">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="38170-863">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="38170-864">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="38170-864">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="38170-865">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-865">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="38170-866">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="38170-866">Binary Mode</span></span>  
 <span data-ttu-id="38170-867">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="38170-867">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="38170-868">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="38170-868">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="38170-869">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="38170-869">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="38170-870">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="38170-870">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="38170-871">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="38170-871">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="38170-872">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="38170-872">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="38170-873">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="38170-873">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="38170-874">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="38170-874">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="38170-875">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-875">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-876"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="38170-876"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-877">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-877">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="38170-878">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-878">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-879">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-879">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-880">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-880">Required.</span></span> <span data-ttu-id="38170-881">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-881">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-882">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-882">Required.</span></span> <span data-ttu-id="38170-883">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="38170-883">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="38170-884">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-884">Optional.</span></span> <span data-ttu-id="38170-885">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="38170-885">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="38170-886">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="38170-886">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="38170-887">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="38170-887">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="38170-888">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-888">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-889">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="38170-889">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="38170-890">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="38170-890">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="38170-891">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-891">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="38170-892">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="38170-892">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-893">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="38170-893">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="38170-894">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="38170-894">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="38170-895">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="38170-895">Random Mode</span></span>  
 <span data-ttu-id="38170-896">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="38170-896">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="38170-897">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="38170-897">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="38170-898">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="38170-898">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="38170-899">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-899">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="38170-900">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-900">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="38170-901">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-901">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="38170-902">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-902">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="38170-903">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-903">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="38170-904">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="38170-904">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="38170-905">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-905">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="38170-906">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="38170-906">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="38170-907">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="38170-907">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="38170-908">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="38170-908">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="38170-909">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="38170-909">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="38170-910">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-910">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-911">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-911">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="38170-912">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-912">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="38170-913">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="38170-913">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="38170-914">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="38170-914">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="38170-915">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="38170-915">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="38170-916">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-916">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="38170-917">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-917">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="38170-918">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="38170-918">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="38170-919">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-919">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-920">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="38170-920">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="38170-921">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="38170-921">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="38170-922">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-922">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="38170-923">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="38170-923">Binary Mode</span></span>  
 <span data-ttu-id="38170-924">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="38170-924">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="38170-925">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="38170-925">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="38170-926">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="38170-926">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="38170-927">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="38170-927">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="38170-928">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="38170-928">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="38170-929">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="38170-929">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="38170-930">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="38170-930">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="38170-931">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="38170-931">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="38170-932">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-932">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-933"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="38170-933"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-934">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-934">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="38170-935">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-935">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-936">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-936">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-937">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-937">Required.</span></span> <span data-ttu-id="38170-938">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-938">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-939">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-939">Required.</span></span> <span data-ttu-id="38170-940">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="38170-940">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="38170-941">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-941">Optional.</span></span> <span data-ttu-id="38170-942">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="38170-942">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="38170-943">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-943">Optional.</span></span> <span data-ttu-id="38170-944">Используется только при записи строки.</span><span class="sxs-lookup"><span data-stu-id="38170-944">Applies only when writing a string.</span></span> <span data-ttu-id="38170-945">Указывает, записывать ли двухбайтовый дескриптор длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-945">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="38170-946">Значение по умолчанию — <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="38170-946">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="38170-947">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="38170-947">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="38170-948">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="38170-948">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="38170-949">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-949">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-950">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="38170-950">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="38170-951">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="38170-951">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="38170-952">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-952">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="38170-953">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="38170-953">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-954">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="38170-954">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="38170-955">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="38170-955">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="38170-956">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="38170-956">Random Mode</span></span>  
 <span data-ttu-id="38170-957">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="38170-957">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="38170-958">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="38170-958">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="38170-959">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="38170-959">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="38170-960">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-960">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="38170-961">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-961">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="38170-962">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-962">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="38170-963">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-963">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="38170-964">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-964">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="38170-965">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="38170-965">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="38170-966">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-966">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="38170-967">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="38170-967">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="38170-968">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="38170-968">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="38170-969">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="38170-969">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="38170-970">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="38170-970">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="38170-971">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-971">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-972">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-972">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="38170-973">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-973">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="38170-974">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="38170-974">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="38170-975">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="38170-975">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="38170-976">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="38170-976">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="38170-977">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-977">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="38170-978">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-978">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="38170-979">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="38170-979">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="38170-980">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-980">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-981">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="38170-981">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="38170-982">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="38170-982">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="38170-983">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-983">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="38170-984">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="38170-984">Binary Mode</span></span>  
 <span data-ttu-id="38170-985">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="38170-985">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="38170-986">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="38170-986">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="38170-987">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="38170-987">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="38170-988">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="38170-988">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="38170-989">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="38170-989">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="38170-990">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="38170-990">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="38170-991">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="38170-991">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="38170-992">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="38170-992">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="38170-993">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-993">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-994"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="38170-994"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-995">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-995">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="38170-996">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-996">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-997">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-997">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-998">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-998">Required.</span></span> <span data-ttu-id="38170-999">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-999">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-1000">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1000">Required.</span></span> <span data-ttu-id="38170-1001">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1001">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="38170-1002">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-1002">Optional.</span></span> <span data-ttu-id="38170-1003">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="38170-1003">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="38170-1004">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-1004">Optional.</span></span> <span data-ttu-id="38170-1005">Применяется только при записи массива.</span><span class="sxs-lookup"><span data-stu-id="38170-1005">Applies only when writing an array.</span></span> <span data-ttu-id="38170-1006">Указывает, нужно ли обрабатывать массив как динамический, и обязательно ли записывать дескриптор массива, описывающий его длину и границы.</span><span class="sxs-lookup"><span data-stu-id="38170-1006">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="38170-1007">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-1007">Optional.</span></span> <span data-ttu-id="38170-1008">Используется только при записи строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1008">Applies only when writing a string.</span></span> <span data-ttu-id="38170-1009">Указывает, записывать ли двухбайтовый дескриптор длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1009">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="38170-1010">Значение по умолчанию — <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1010">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="38170-1011">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="38170-1011">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="38170-1012">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1012">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="38170-1013">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1013">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-1014">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="38170-1014">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="38170-1015">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="38170-1015">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="38170-1016">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-1016">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="38170-1017">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="38170-1017">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-1018">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1018">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="38170-1019">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="38170-1019">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="38170-1020">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="38170-1020">Random Mode</span></span>  
 <span data-ttu-id="38170-1021">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="38170-1021">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="38170-1022">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="38170-1022">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="38170-1023">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1023">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="38170-1024">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-1024">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="38170-1025">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1025">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="38170-1026">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1026">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="38170-1027">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-1027">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="38170-1028">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1028">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="38170-1029">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="38170-1029">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="38170-1030">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-1030">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="38170-1031">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="38170-1031">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="38170-1032">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="38170-1032">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="38170-1033">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="38170-1033">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="38170-1034">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="38170-1034">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="38170-1035">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-1035">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-1036">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-1036">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="38170-1037">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1037">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="38170-1038">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="38170-1038">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="38170-1039">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="38170-1039">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="38170-1040">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="38170-1040">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="38170-1041">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1041">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="38170-1042">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-1042">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="38170-1043">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="38170-1043">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="38170-1044">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-1044">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-1045">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="38170-1045">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="38170-1046">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="38170-1046">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="38170-1047">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1047">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="38170-1048">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="38170-1048">Binary Mode</span></span>  
 <span data-ttu-id="38170-1049">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="38170-1049">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="38170-1050">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="38170-1050">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="38170-1051">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="38170-1051">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="38170-1052">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="38170-1052">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="38170-1053">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1053">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="38170-1054">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="38170-1054">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="38170-1055">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="38170-1055">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="38170-1056">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="38170-1056">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="38170-1057">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-1057">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-1058"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="38170-1058"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-1059">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1059">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="38170-1060">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-1060">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-1061">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-1061">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-1062">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1062">Required.</span></span> <span data-ttu-id="38170-1063">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1063">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-1064">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1064">Required.</span></span> <span data-ttu-id="38170-1065">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1065">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="38170-1066">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-1066">Optional.</span></span> <span data-ttu-id="38170-1067">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="38170-1067">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="38170-1068">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="38170-1068">Reads data from an open disk file into a variable.</span></span>  <span data-ttu-id="38170-1069">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGetObject" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1069">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span></span> <span data-ttu-id="38170-1070">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1070">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-1071">`FileGetObject` Функции используется вместо `FileGet` во избежание неоднозначности во время компиляции, если тип `Object` возвращается вместо другого типа, таких как `Integer`, `Long`, `Short`, и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-1071">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="38170-1072">Если вы собираетесь записать `Variant` типа, `FileGetObject` является обязательным.</span><span class="sxs-lookup"><span data-stu-id="38170-1072">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="38170-1073">Если вы сомневаетесь, если вы используете объект для второго параметра, всегда рекомендуется использовать `FilePutObject` и `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="38170-1073">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="38170-1074">`FileGetObject` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="38170-1074">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="38170-1075">Данные, считанные с `FileGetObject` записываются с `FilePutObject`.</span><span class="sxs-lookup"><span data-stu-id="38170-1075">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="38170-1076">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-1076">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="38170-1077">Если опустить `RecordNumber`, `FileGetObject` считывает записи или единственного байта после последнего `FileGetObject` или `FilePutObject` функция (или на которые указывает последний `Seek` функции).</span><span class="sxs-lookup"><span data-stu-id="38170-1077">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="38170-1078">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="38170-1078">Random Mode</span></span>  
 <span data-ttu-id="38170-1079">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="38170-1079">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="38170-1080">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGetObject` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="38170-1080">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="38170-1081">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1081">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="38170-1082">Поскольку невозможно точно определить объем данных, заполнение, рекомендуется иметь совпадает с длиной данных длиной записи.</span><span class="sxs-lookup"><span data-stu-id="38170-1082">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="38170-1083">Если переменная представляет собой строку, по умолчанию `FileGetObject` считывает двухбайтовый дескриптор, содержащий длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1083">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="38170-1084">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1084">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="38170-1085">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины и при записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-1085">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="38170-1086">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1086">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="38170-1087">Если переменная, считываемых в массив, а затем записей длину, заданную `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-1087">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="38170-1088">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="38170-1088">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="38170-1089">Его длина равна 2 плюс 8, умноженное на количество измерений: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="38170-1089">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="38170-1090">Например, следующее объявление массива требуется 218 байтов при записи на диск:</span><span class="sxs-lookup"><span data-stu-id="38170-1090">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="38170-1091">218 байт распределяются следующим образом: 18 байт для дескриптора (2 + 8 \* 2) и 100 байт для данных (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="38170-1091">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="38170-1092">`FileGetObject` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="38170-1092">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="38170-1093">На диске, динамический массив в определяемый пользователем тип (с `FilePutObject`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="38170-1093">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="38170-1094">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для чтения отдельных элементов, включая массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="38170-1094">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="38170-1095"><xref:Microsoft.VisualBasic.VBFixedStringAttribute> Класс может быть применен к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1095">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="38170-1096">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="38170-1096">Binary Mode</span></span>  
 <span data-ttu-id="38170-1097">Для открытия файлов в `Binary` режим, все `Random` применяются правила, со следующими исключениями:</span><span class="sxs-lookup"><span data-stu-id="38170-1097">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="38170-1098">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="38170-1098">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="38170-1099">`FileGetObject` Считывает все переменные с диска непрерывно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="38170-1099">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="38170-1100">Для любого массива, кроме массива в виде структуры `FileGetObject` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1100">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="38170-1101">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="38170-1101">No descriptor is read.</span></span>  
  
 <span data-ttu-id="38170-1102">`FileGetObject` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="38170-1102">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="38170-1103">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="38170-1103">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-1104">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1104">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="38170-1105">Например файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="38170-1105">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-1106">В следующем примере выполняется запись в файл теста и затем получает его.</span><span class="sxs-lookup"><span data-stu-id="38170-1106">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="38170-1107">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-1107">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-1108">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-1108">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="38170-1109">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1109">Required.</span></span> <span data-ttu-id="38170-1110">Строковое выражение, которое определяет файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1110">A string expression that specifies a file.</span></span> <span data-ttu-id="38170-1111"><paramref name="PathName" /> — может включать каталог или папку, а также имя диска.</span><span class="sxs-lookup"><span data-stu-id="38170-1111"><paramref name="PathName" /> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="38170-1112">Возвращает значение, которое указывает длину файла в байтах.</span><span class="sxs-lookup"><span data-stu-id="38170-1112">Returns a value that specifies the length of a file in bytes.</span></span> <span data-ttu-id="38170-1113">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileLen" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1113">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span></span> <span data-ttu-id="38170-1114">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1114">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="38170-1115">Длина файла в байтах.</span><span class="sxs-lookup"><span data-stu-id="38170-1115">The length of a file in bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-1116">Если указанный файл открыт, когда `FileLen` вызывается функция, возвращаемое значение представляет размер файла на момент его открытия.</span><span class="sxs-lookup"><span data-stu-id="38170-1116">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38170-1117">Чтобы получить текущую длину открытого файла, используйте `LOF` функции.</span><span class="sxs-lookup"><span data-stu-id="38170-1117">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-1118">В этом примере используется `FileLen` функция возвращает длину файла в байтах.</span><span class="sxs-lookup"><span data-stu-id="38170-1118">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="38170-1119">Для целей этого примера, предположим, что `TestFile` — это файл, который содержит некоторые данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1119">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="38170-1120">Файл не существует.</span><span class="sxs-lookup"><span data-stu-id="38170-1120">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-1121">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-1121">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-1122">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1122">Required.</span></span> <span data-ttu-id="38170-1123">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1123">Any valid file number.</span></span> <span data-ttu-id="38170-1124">Для получения следующего свободного номера файла следует использовать функцию <see langword="FreeFile" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1124">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span></span></param>
        <param name="FileName"><span data-ttu-id="38170-1125">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1125">Required.</span></span> <span data-ttu-id="38170-1126">Строковое выражение, которое указывает имя файла. Может включать имя каталога или папки, а также имя диска.</span><span class="sxs-lookup"><span data-stu-id="38170-1126">A string expression that specifies a file name - may include directory or folder, and drive.</span></span></param>
        <param name="Mode"><span data-ttu-id="38170-1127">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1127">Required.</span></span> <span data-ttu-id="38170-1128">Перечисление, определяющее режим файла: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" /> или <see langword="Random" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1128">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span></span> <span data-ttu-id="38170-1129">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.OpenMode" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1129">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span></span></param>
        <param name="Access"><span data-ttu-id="38170-1130">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-1130">Optional.</span></span> <span data-ttu-id="38170-1131">Перечисление, определяющие операции, разрешенные для работы с открытым файлом: <see langword="Read" />, <see langword="Write" /> или <see langword="ReadWrite" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1131">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span></span> <span data-ttu-id="38170-1132">По умолчанию — <see langword="ReadWrite" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1132">Defaults to <see langword="ReadWrite" />.</span></span> <span data-ttu-id="38170-1133">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.OpenAccess" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1133">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span></span></param>
        <param name="Share"><span data-ttu-id="38170-1134">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-1134">Optional.</span></span> <span data-ttu-id="38170-1135">Перечисление операций, не разрешенных при работе с файлом, открытым другим процессом: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" /> и <see langword="Lock Read Write" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1135">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="38170-1136">По умолчанию — <see langword="Lock Read Write" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1136">Defaults to <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="38170-1137">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.OpenShare" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1137">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span></span></param>
        <param name="RecordLength"><span data-ttu-id="38170-1138">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-1138">Optional.</span></span> <span data-ttu-id="38170-1139">Число, не превышающее 32 767 (байт).</span><span class="sxs-lookup"><span data-stu-id="38170-1139">Number less than or equal to 32,767 (bytes).</span></span> <span data-ttu-id="38170-1140">Для файлов, открытых с произвольным доступом, это значение является длиной записи.</span><span class="sxs-lookup"><span data-stu-id="38170-1140">For files opened for random access, this value is the record length.</span></span> <span data-ttu-id="38170-1141">Для файлов с последовательным доступом — это число знаков в буфере.</span><span class="sxs-lookup"><span data-stu-id="38170-1141">For sequential files, this value is the number of characters buffered.</span></span></param>
        <summary><span data-ttu-id="38170-1142">Открывает файл для ввода или вывода.</span><span class="sxs-lookup"><span data-stu-id="38170-1142">Opens a file for input or output.</span></span> <span data-ttu-id="38170-1143">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1143">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span></span> <span data-ttu-id="38170-1144">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1144">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-1145">`FileOpen` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-1145">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="38170-1146">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-1146">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="38170-1147">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="38170-1147">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="38170-1148">Перед выполнением любой операции ввода-вывода на нем необходимо открыть файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1148">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="38170-1149">`FileOpen` выделяет буфер для ввода-вывода в файл и определяет режим доступа для использования с буфером.</span><span class="sxs-lookup"><span data-stu-id="38170-1149">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-1150">При записи в файл приложения может потребоваться создать файл, если файл, к которому он пытается получить запись не существует.</span><span class="sxs-lookup"><span data-stu-id="38170-1150">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="38170-1151">Чтобы сделать это, ему разрешения для каталога, в котором должен быть создан файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1151">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="38170-1152">Тем не менее если файл, заданный параметром `FileName` существует, приложению `Write` разрешение только на сам файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1152">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="38170-1153">Везде, где возможно, в целях повышения безопасности, создать файл во время развертывания и предоставить `Write` разрешение на этот файл только, а не для всего каталога.</span><span class="sxs-lookup"><span data-stu-id="38170-1153">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="38170-1154">В целях повышения безопасности, записывайте данные в каталоги пользователей, а не в корневом каталоге или каталоге Program Files.</span><span class="sxs-lookup"><span data-stu-id="38170-1154">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="38170-1155">Канал, чтобы открыть можно найти с помощью `FreeFile()` функции.</span><span class="sxs-lookup"><span data-stu-id="38170-1155">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-1156">`FileOpen` Функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления, который может повлиять на выполнение в ситуациях частичного доверия.</span><span class="sxs-lookup"><span data-stu-id="38170-1156">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="38170-1157">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-1157">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-1158">В этом примере показаны различные способы `FileOpen` функцию входные и выходные данные в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1158">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="38170-1159">Следующий код открывает файл `TestFile` в `Input` режиме.</span><span class="sxs-lookup"><span data-stu-id="38170-1159">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="38170-1160">Этот пример открывает файл в `Binary` режиме для записи только операции.</span><span class="sxs-lookup"><span data-stu-id="38170-1160">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="38170-1161">В следующем примере открывается файл в `Random` режиме.</span><span class="sxs-lookup"><span data-stu-id="38170-1161">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="38170-1162">Файл содержит записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="38170-1162">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="38170-1163">Данный пример кода открывает файл в `Output` режиме; любой процесс может прочитать или записать в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1163">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="38170-1164">Данный пример кода открывает файл в `Binary` режиме для чтения; другие процессы не удается прочитать файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1164">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-1165">Отрицательная длина записи (не равная –1).</span><span class="sxs-lookup"><span data-stu-id="38170-1165">Record length is negative (and not equal to -1).</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-1166">Файл <paramref name="FileName" /> уже открыт, или <paramref name="FileName" /> является недопустимым.</span><span class="sxs-lookup"><span data-stu-id="38170-1166"><paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="38170-1167">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-1167">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-1168">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-1168">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="38170-1169">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="38170-1169">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="38170-1170">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1170">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="38170-1171">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1171">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-1172">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1172">Required.</span></span> <span data-ttu-id="38170-1173">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1173">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-1174">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1174">Required.</span></span> <span data-ttu-id="38170-1175">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1175">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="38170-1176">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-1176">Optional.</span></span> <span data-ttu-id="38170-1177">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="38170-1177">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="38170-1178">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="38170-1178">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="38170-1179">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1179">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="38170-1180">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1180">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-1181">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="38170-1181">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="38170-1182">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="38170-1182">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="38170-1183">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-1183">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="38170-1184">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="38170-1184">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="38170-1185">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="38170-1185">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="38170-1186">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-1186">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="38170-1187">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="38170-1187">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="38170-1188">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="38170-1188">Random Mode</span></span>  
 <span data-ttu-id="38170-1189">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="38170-1189">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="38170-1190">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="38170-1190">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="38170-1191">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1191">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="38170-1192">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-1192">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="38170-1193">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="38170-1193">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="38170-1194">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1194">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="38170-1195">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1195">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="38170-1196">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="38170-1196">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="38170-1197">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1197">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="38170-1198">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1198">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="38170-1199">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1199">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="38170-1200">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1200">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="38170-1201">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1201">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="38170-1202">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="38170-1202">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="38170-1203">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="38170-1203">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="38170-1204">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-1204">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="38170-1205">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-1205">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="38170-1206">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-1206">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="38170-1207">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="38170-1207">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="38170-1208">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-1208">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-1209">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-1209">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="38170-1210">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1210">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="38170-1211">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1211">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="38170-1212">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-1212">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="38170-1213">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="38170-1213">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="38170-1214">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1214">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="38170-1215">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="38170-1215">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="38170-1216">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="38170-1216">Binary Mode</span></span>  
 <span data-ttu-id="38170-1217">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="38170-1217">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="38170-1218">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="38170-1218">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="38170-1219">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="38170-1219">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="38170-1220">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="38170-1220">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="38170-1221">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1221">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="38170-1222">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-1222">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="38170-1223">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="38170-1223">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="38170-1224">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="38170-1224">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="38170-1225">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="38170-1225">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="38170-1226">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-1226">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-1227">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1227">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="38170-1228">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1228">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-1229"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="38170-1229"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-1230">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1230">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-1231">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-1231">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-1232">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1232">Required.</span></span> <span data-ttu-id="38170-1233">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1233">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-1234">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1234">Required.</span></span> <span data-ttu-id="38170-1235">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1235">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="38170-1236">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-1236">Optional.</span></span> <span data-ttu-id="38170-1237">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="38170-1237">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="38170-1238">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="38170-1238">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="38170-1239">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1239">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="38170-1240">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1240">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-1241">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="38170-1241">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="38170-1242">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="38170-1242">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="38170-1243">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-1243">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="38170-1244">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="38170-1244">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="38170-1245">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="38170-1245">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="38170-1246">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-1246">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="38170-1247">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="38170-1247">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="38170-1248">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="38170-1248">Random Mode</span></span>  
 <span data-ttu-id="38170-1249">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="38170-1249">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="38170-1250">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="38170-1250">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="38170-1251">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1251">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="38170-1252">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-1252">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="38170-1253">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="38170-1253">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="38170-1254">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1254">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="38170-1255">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1255">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="38170-1256">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="38170-1256">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="38170-1257">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1257">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="38170-1258">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1258">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="38170-1259">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1259">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="38170-1260">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1260">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="38170-1261">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1261">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="38170-1262">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="38170-1262">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="38170-1263">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="38170-1263">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="38170-1264">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-1264">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="38170-1265">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-1265">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="38170-1266">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-1266">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="38170-1267">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="38170-1267">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="38170-1268">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-1268">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-1269">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-1269">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="38170-1270">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1270">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="38170-1271">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1271">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="38170-1272">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-1272">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="38170-1273">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="38170-1273">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="38170-1274">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1274">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="38170-1275">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="38170-1275">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="38170-1276">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="38170-1276">Binary Mode</span></span>  
 <span data-ttu-id="38170-1277">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="38170-1277">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="38170-1278">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="38170-1278">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="38170-1279">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="38170-1279">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="38170-1280">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="38170-1280">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="38170-1281">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1281">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="38170-1282">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-1282">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="38170-1283">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="38170-1283">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="38170-1284">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="38170-1284">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="38170-1285">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="38170-1285">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="38170-1286">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-1286">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-1287">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1287">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="38170-1288">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1288">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-1289"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="38170-1289"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-1290">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1290">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-1291">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-1291">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-1292">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1292">Required.</span></span> <span data-ttu-id="38170-1293">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1293">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-1294">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1294">Required.</span></span> <span data-ttu-id="38170-1295">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1295">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="38170-1296">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-1296">Optional.</span></span> <span data-ttu-id="38170-1297">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="38170-1297">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="38170-1298">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="38170-1298">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="38170-1299">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1299">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="38170-1300">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1300">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-1301">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="38170-1301">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="38170-1302">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="38170-1302">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="38170-1303">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-1303">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="38170-1304">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="38170-1304">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="38170-1305">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="38170-1305">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="38170-1306">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-1306">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="38170-1307">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="38170-1307">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="38170-1308">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="38170-1308">Random Mode</span></span>  
 <span data-ttu-id="38170-1309">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="38170-1309">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="38170-1310">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="38170-1310">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="38170-1311">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1311">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="38170-1312">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-1312">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="38170-1313">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="38170-1313">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="38170-1314">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1314">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="38170-1315">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1315">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="38170-1316">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="38170-1316">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="38170-1317">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1317">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="38170-1318">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1318">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="38170-1319">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1319">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="38170-1320">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1320">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="38170-1321">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1321">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="38170-1322">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="38170-1322">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="38170-1323">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="38170-1323">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="38170-1324">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-1324">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="38170-1325">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-1325">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="38170-1326">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-1326">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="38170-1327">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="38170-1327">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="38170-1328">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-1328">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-1329">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-1329">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="38170-1330">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1330">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="38170-1331">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1331">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="38170-1332">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-1332">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="38170-1333">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="38170-1333">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="38170-1334">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1334">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="38170-1335">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="38170-1335">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="38170-1336">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="38170-1336">Binary Mode</span></span>  
 <span data-ttu-id="38170-1337">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="38170-1337">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="38170-1338">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="38170-1338">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="38170-1339">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="38170-1339">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="38170-1340">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="38170-1340">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="38170-1341">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1341">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="38170-1342">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-1342">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="38170-1343">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="38170-1343">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="38170-1344">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="38170-1344">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="38170-1345">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="38170-1345">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="38170-1346">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-1346">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-1347">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1347">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="38170-1348">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1348">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-1349"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="38170-1349"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-1350">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1350">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-1351">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-1351">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-1352">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1352">Required.</span></span> <span data-ttu-id="38170-1353">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1353">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-1354">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1354">Required.</span></span> <span data-ttu-id="38170-1355">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1355">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="38170-1356">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-1356">Optional.</span></span> <span data-ttu-id="38170-1357">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="38170-1357">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="38170-1358">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="38170-1358">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="38170-1359">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1359">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="38170-1360">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1360">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-1361">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="38170-1361">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="38170-1362">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="38170-1362">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="38170-1363">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-1363">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="38170-1364">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="38170-1364">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="38170-1365">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="38170-1365">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="38170-1366">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-1366">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="38170-1367">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="38170-1367">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="38170-1368">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="38170-1368">Random Mode</span></span>  
 <span data-ttu-id="38170-1369">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="38170-1369">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="38170-1370">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="38170-1370">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="38170-1371">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1371">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="38170-1372">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-1372">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="38170-1373">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="38170-1373">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="38170-1374">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1374">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="38170-1375">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1375">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="38170-1376">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="38170-1376">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="38170-1377">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1377">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="38170-1378">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1378">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="38170-1379">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1379">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="38170-1380">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1380">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="38170-1381">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1381">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="38170-1382">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="38170-1382">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="38170-1383">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="38170-1383">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="38170-1384">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-1384">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="38170-1385">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-1385">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="38170-1386">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-1386">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="38170-1387">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="38170-1387">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="38170-1388">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-1388">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-1389">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-1389">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="38170-1390">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1390">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="38170-1391">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1391">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="38170-1392">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-1392">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="38170-1393">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="38170-1393">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="38170-1394">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1394">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="38170-1395">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="38170-1395">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="38170-1396">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="38170-1396">Binary Mode</span></span>  
 <span data-ttu-id="38170-1397">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="38170-1397">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="38170-1398">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="38170-1398">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="38170-1399">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="38170-1399">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="38170-1400">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="38170-1400">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="38170-1401">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1401">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="38170-1402">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-1402">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="38170-1403">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="38170-1403">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="38170-1404">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="38170-1404">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="38170-1405">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="38170-1405">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="38170-1406">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-1406">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-1407">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1407">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="38170-1408">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1408">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-1409"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="38170-1409"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-1410">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1410">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-1411">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-1411">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-1412">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1412">Required.</span></span> <span data-ttu-id="38170-1413">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1413">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-1414">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1414">Required.</span></span> <span data-ttu-id="38170-1415">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1415">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="38170-1416">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-1416">Optional.</span></span> <span data-ttu-id="38170-1417">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="38170-1417">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="38170-1418">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="38170-1418">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="38170-1419">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1419">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="38170-1420">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1420">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-1421">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="38170-1421">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="38170-1422">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="38170-1422">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="38170-1423">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-1423">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="38170-1424">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="38170-1424">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="38170-1425">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="38170-1425">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="38170-1426">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-1426">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="38170-1427">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="38170-1427">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="38170-1428">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="38170-1428">Random Mode</span></span>  
 <span data-ttu-id="38170-1429">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="38170-1429">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="38170-1430">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="38170-1430">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="38170-1431">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1431">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="38170-1432">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-1432">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="38170-1433">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="38170-1433">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="38170-1434">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1434">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="38170-1435">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1435">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="38170-1436">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="38170-1436">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="38170-1437">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1437">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="38170-1438">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1438">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="38170-1439">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1439">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="38170-1440">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1440">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="38170-1441">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1441">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="38170-1442">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="38170-1442">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="38170-1443">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="38170-1443">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="38170-1444">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-1444">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="38170-1445">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-1445">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="38170-1446">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-1446">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="38170-1447">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="38170-1447">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="38170-1448">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-1448">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-1449">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-1449">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="38170-1450">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1450">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="38170-1451">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1451">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="38170-1452">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-1452">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="38170-1453">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="38170-1453">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="38170-1454">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1454">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="38170-1455">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="38170-1455">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="38170-1456">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="38170-1456">Binary Mode</span></span>  
 <span data-ttu-id="38170-1457">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="38170-1457">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="38170-1458">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="38170-1458">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="38170-1459">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="38170-1459">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="38170-1460">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="38170-1460">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="38170-1461">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1461">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="38170-1462">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-1462">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="38170-1463">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="38170-1463">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="38170-1464">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="38170-1464">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="38170-1465">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="38170-1465">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="38170-1466">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-1466">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-1467">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1467">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="38170-1468">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1468">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-1469"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="38170-1469"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-1470">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1470">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-1471">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-1471">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-1472">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1472">Required.</span></span> <span data-ttu-id="38170-1473">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1473">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-1474">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1474">Required.</span></span> <span data-ttu-id="38170-1475">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1475">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="38170-1476">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-1476">Optional.</span></span> <span data-ttu-id="38170-1477">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="38170-1477">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="38170-1478">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="38170-1478">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="38170-1479">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1479">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="38170-1480">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1480">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-1481">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="38170-1481">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="38170-1482">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="38170-1482">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="38170-1483">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-1483">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="38170-1484">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="38170-1484">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="38170-1485">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="38170-1485">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="38170-1486">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-1486">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="38170-1487">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="38170-1487">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="38170-1488">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="38170-1488">Random Mode</span></span>  
 <span data-ttu-id="38170-1489">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="38170-1489">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="38170-1490">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="38170-1490">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="38170-1491">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1491">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="38170-1492">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-1492">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="38170-1493">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="38170-1493">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="38170-1494">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1494">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="38170-1495">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1495">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="38170-1496">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="38170-1496">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="38170-1497">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1497">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="38170-1498">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1498">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="38170-1499">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1499">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="38170-1500">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1500">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="38170-1501">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1501">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="38170-1502">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="38170-1502">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="38170-1503">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="38170-1503">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="38170-1504">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-1504">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="38170-1505">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-1505">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="38170-1506">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-1506">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="38170-1507">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="38170-1507">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="38170-1508">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-1508">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-1509">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-1509">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="38170-1510">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1510">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="38170-1511">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1511">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="38170-1512">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-1512">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="38170-1513">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="38170-1513">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="38170-1514">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1514">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="38170-1515">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="38170-1515">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="38170-1516">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="38170-1516">Binary Mode</span></span>  
 <span data-ttu-id="38170-1517">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="38170-1517">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="38170-1518">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="38170-1518">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="38170-1519">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="38170-1519">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="38170-1520">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="38170-1520">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="38170-1521">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1521">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="38170-1522">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-1522">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="38170-1523">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="38170-1523">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="38170-1524">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="38170-1524">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="38170-1525">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="38170-1525">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="38170-1526">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-1526">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-1527">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1527">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="38170-1528">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1528">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-1529"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="38170-1529"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-1530">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1530">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-1531">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-1531">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-1532">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1532">Required.</span></span> <span data-ttu-id="38170-1533">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1533">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-1534">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1534">Required.</span></span> <span data-ttu-id="38170-1535">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1535">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="38170-1536">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-1536">Optional.</span></span> <span data-ttu-id="38170-1537">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="38170-1537">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="38170-1538">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="38170-1538">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="38170-1539">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1539">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="38170-1540">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1540">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-1541">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="38170-1541">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="38170-1542">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="38170-1542">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="38170-1543">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-1543">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="38170-1544">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="38170-1544">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="38170-1545">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="38170-1545">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="38170-1546">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-1546">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="38170-1547">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="38170-1547">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="38170-1548">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="38170-1548">Random Mode</span></span>  
 <span data-ttu-id="38170-1549">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="38170-1549">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="38170-1550">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="38170-1550">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="38170-1551">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1551">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="38170-1552">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-1552">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="38170-1553">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="38170-1553">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="38170-1554">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1554">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="38170-1555">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1555">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="38170-1556">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="38170-1556">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="38170-1557">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1557">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="38170-1558">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1558">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="38170-1559">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор`VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1559">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="38170-1560">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1560">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="38170-1561">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1561">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="38170-1562">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="38170-1562">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="38170-1563">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="38170-1563">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="38170-1564">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-1564">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="38170-1565">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-1565">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="38170-1566">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-1566">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="38170-1567">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="38170-1567">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="38170-1568">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-1568">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-1569">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-1569">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="38170-1570">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1570">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="38170-1571">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1571">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="38170-1572">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-1572">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="38170-1573">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="38170-1573">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="38170-1574">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1574">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="38170-1575">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="38170-1575">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="38170-1576">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="38170-1576">Binary Mode</span></span>  
 <span data-ttu-id="38170-1577">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="38170-1577">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="38170-1578">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="38170-1578">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="38170-1579">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="38170-1579">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="38170-1580">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="38170-1580">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="38170-1581">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1581">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="38170-1582">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-1582">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="38170-1583">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="38170-1583">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="38170-1584">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="38170-1584">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="38170-1585">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="38170-1585">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="38170-1586">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-1586">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-1587">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1587">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="38170-1588">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1588">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-1589"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="38170-1589"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-1590">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1590">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-1591">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-1591">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-1592">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1592">Required.</span></span> <span data-ttu-id="38170-1593">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1593">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-1594">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1594">Required.</span></span> <span data-ttu-id="38170-1595">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1595">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="38170-1596">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-1596">Optional.</span></span> <span data-ttu-id="38170-1597">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="38170-1597">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="38170-1598">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="38170-1598">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="38170-1599">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1599">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="38170-1600">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1600">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-1601">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="38170-1601">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="38170-1602">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="38170-1602">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="38170-1603">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-1603">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="38170-1604">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="38170-1604">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="38170-1605">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="38170-1605">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="38170-1606">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-1606">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="38170-1607">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="38170-1607">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="38170-1608">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="38170-1608">Random Mode</span></span>  
 <span data-ttu-id="38170-1609">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="38170-1609">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="38170-1610">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="38170-1610">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="38170-1611">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1611">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="38170-1612">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-1612">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="38170-1613">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="38170-1613">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="38170-1614">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1614">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="38170-1615">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1615">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="38170-1616">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="38170-1616">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="38170-1617">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1617">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="38170-1618">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1618">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="38170-1619">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1619">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="38170-1620">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1620">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="38170-1621">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1621">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="38170-1622">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="38170-1622">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="38170-1623">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="38170-1623">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="38170-1624">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-1624">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="38170-1625">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-1625">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="38170-1626">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-1626">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="38170-1627">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="38170-1627">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="38170-1628">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-1628">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-1629">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-1629">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="38170-1630">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1630">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="38170-1631">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1631">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="38170-1632">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-1632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="38170-1633">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="38170-1633">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="38170-1634">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1634">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="38170-1635">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="38170-1635">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="38170-1636">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="38170-1636">Binary Mode</span></span>  
 <span data-ttu-id="38170-1637">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="38170-1637">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="38170-1638">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="38170-1638">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="38170-1639">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="38170-1639">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="38170-1640">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="38170-1640">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="38170-1641">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1641">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="38170-1642">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-1642">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="38170-1643">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="38170-1643">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="38170-1644">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="38170-1644">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="38170-1645">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="38170-1645">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="38170-1646">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-1646">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-1647">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1647">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="38170-1648">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1648">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-1649"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="38170-1649"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-1650">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1650">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-1651">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-1651">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-1652">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1652">Required.</span></span> <span data-ttu-id="38170-1653">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1653">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-1654">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1654">Required.</span></span> <span data-ttu-id="38170-1655">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1655">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="38170-1656">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-1656">Optional.</span></span> <span data-ttu-id="38170-1657">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="38170-1657">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="38170-1658">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="38170-1658">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="38170-1659">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1659">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="38170-1660">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1660">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-1661">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="38170-1661">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="38170-1662">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="38170-1662">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="38170-1663">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-1663">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="38170-1664">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="38170-1664">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="38170-1665">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="38170-1665">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="38170-1666">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-1666">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="38170-1667">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="38170-1667">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="38170-1668">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="38170-1668">Random Mode</span></span>  
 <span data-ttu-id="38170-1669">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="38170-1669">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="38170-1670">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="38170-1670">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="38170-1671">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1671">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="38170-1672">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-1672">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="38170-1673">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="38170-1673">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="38170-1674">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1674">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="38170-1675">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1675">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="38170-1676">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="38170-1676">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="38170-1677">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1677">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="38170-1678">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1678">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="38170-1679">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1679">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="38170-1680">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1680">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="38170-1681">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1681">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="38170-1682">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="38170-1682">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="38170-1683">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="38170-1683">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="38170-1684">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-1684">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="38170-1685">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-1685">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="38170-1686">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-1686">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="38170-1687">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="38170-1687">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="38170-1688">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-1688">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-1689">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-1689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="38170-1690">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1690">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="38170-1691">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1691">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="38170-1692">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-1692">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="38170-1693">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="38170-1693">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="38170-1694">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1694">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="38170-1695">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="38170-1695">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="38170-1696">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="38170-1696">Binary Mode</span></span>  
 <span data-ttu-id="38170-1697">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="38170-1697">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="38170-1698">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="38170-1698">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="38170-1699">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="38170-1699">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="38170-1700">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="38170-1700">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="38170-1701">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1701">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="38170-1702">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-1702">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="38170-1703">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="38170-1703">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="38170-1704">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="38170-1704">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="38170-1705">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="38170-1705">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="38170-1706">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-1706">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-1707">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1707">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="38170-1708">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1708">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-1709"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="38170-1709"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-1710">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1710">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-1711">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-1711">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-1712">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1712">Required.</span></span> <span data-ttu-id="38170-1713">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1713">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-1714">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1714">Required.</span></span> <span data-ttu-id="38170-1715">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1715">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="38170-1716">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-1716">Optional.</span></span> <span data-ttu-id="38170-1717">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="38170-1717">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="38170-1718">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="38170-1718">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="38170-1719">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1719">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="38170-1720">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1720">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-1721">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="38170-1721">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="38170-1722">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="38170-1722">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="38170-1723">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-1723">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="38170-1724">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="38170-1724">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="38170-1725">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="38170-1725">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="38170-1726">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-1726">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="38170-1727">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="38170-1727">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="38170-1728">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="38170-1728">Random Mode</span></span>  
 <span data-ttu-id="38170-1729">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="38170-1729">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="38170-1730">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="38170-1730">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="38170-1731">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1731">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="38170-1732">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-1732">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="38170-1733">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="38170-1733">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="38170-1734">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1734">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="38170-1735">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1735">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="38170-1736">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="38170-1736">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="38170-1737">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1737">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="38170-1738">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1738">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="38170-1739">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1739">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="38170-1740">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1740">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="38170-1741">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1741">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="38170-1742">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="38170-1742">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="38170-1743">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="38170-1743">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="38170-1744">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-1744">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="38170-1745">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-1745">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="38170-1746">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-1746">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="38170-1747">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="38170-1747">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="38170-1748">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-1748">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-1749">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-1749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="38170-1750">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1750">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="38170-1751">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1751">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="38170-1752">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-1752">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="38170-1753">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="38170-1753">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="38170-1754">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1754">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="38170-1755">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="38170-1755">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="38170-1756">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="38170-1756">Binary Mode</span></span>  
 <span data-ttu-id="38170-1757">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="38170-1757">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="38170-1758">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="38170-1758">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="38170-1759">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="38170-1759">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="38170-1760">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="38170-1760">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="38170-1761">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1761">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="38170-1762">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-1762">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="38170-1763">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="38170-1763">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="38170-1764">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="38170-1764">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="38170-1765">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="38170-1765">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="38170-1766">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-1766">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-1767">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1767">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="38170-1768">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1768">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-1769"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="38170-1769"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-1770">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1770">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-1771">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-1771">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-1772">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1772">Required.</span></span> <span data-ttu-id="38170-1773">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1773">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-1774">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1774">Required.</span></span> <span data-ttu-id="38170-1775">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1775">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="38170-1776">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-1776">Optional.</span></span> <span data-ttu-id="38170-1777">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="38170-1777">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="38170-1778">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="38170-1778">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="38170-1779">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1779">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="38170-1780">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1780">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-1781">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="38170-1781">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="38170-1782">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="38170-1782">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="38170-1783">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-1783">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="38170-1784">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="38170-1784">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="38170-1785">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="38170-1785">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="38170-1786">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-1786">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="38170-1787">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="38170-1787">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="38170-1788">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="38170-1788">Random Mode</span></span>  
 <span data-ttu-id="38170-1789">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="38170-1789">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="38170-1790">Если длина записываемых данных меньше, чем длина, указанная в`RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="38170-1790">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="38170-1791">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1791">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="38170-1792">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-1792">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="38170-1793">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="38170-1793">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="38170-1794">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1794">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="38170-1795">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1795">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="38170-1796">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="38170-1796">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="38170-1797">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1797">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="38170-1798">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1798">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="38170-1799">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1799">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="38170-1800">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1800">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="38170-1801">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1801">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="38170-1802">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="38170-1802">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="38170-1803">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="38170-1803">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="38170-1804">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-1804">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="38170-1805">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-1805">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="38170-1806">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-1806">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="38170-1807">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="38170-1807">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="38170-1808">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-1808">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-1809">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-1809">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="38170-1810">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1810">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="38170-1811">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1811">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="38170-1812">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-1812">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="38170-1813">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="38170-1813">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="38170-1814">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1814">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="38170-1815">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="38170-1815">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="38170-1816">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="38170-1816">Binary Mode</span></span>  
 <span data-ttu-id="38170-1817">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="38170-1817">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="38170-1818">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="38170-1818">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="38170-1819">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="38170-1819">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="38170-1820">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="38170-1820">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="38170-1821">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1821">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="38170-1822">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-1822">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="38170-1823">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="38170-1823">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="38170-1824">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="38170-1824">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="38170-1825">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="38170-1825">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="38170-1826">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-1826">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-1827">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1827">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="38170-1828">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1828">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-1829"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="38170-1829"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-1830">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1830">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-1831">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-1831">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("Use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-1832">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1832">Required.</span></span> <span data-ttu-id="38170-1833">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1833">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-1834">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1834">Required.</span></span> <span data-ttu-id="38170-1835">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1835">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="38170-1836">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-1836">Optional.</span></span> <span data-ttu-id="38170-1837">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="38170-1837">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="38170-1838">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="38170-1838">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="38170-1839">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1839">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="38170-1840">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1840">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-1841">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="38170-1841">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="38170-1842">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="38170-1842">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="38170-1843">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-1843">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="38170-1844">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="38170-1844">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="38170-1845">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="38170-1845">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="38170-1846">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-1846">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="38170-1847">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="38170-1847">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="38170-1848">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="38170-1848">Random Mode</span></span>  
 <span data-ttu-id="38170-1849">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="38170-1849">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="38170-1850">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="38170-1850">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="38170-1851">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1851">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="38170-1852">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-1852">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="38170-1853">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="38170-1853">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="38170-1854">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1854">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="38170-1855">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1855">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="38170-1856">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="38170-1856">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="38170-1857">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1857">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="38170-1858">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1858">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="38170-1859">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1859">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="38170-1860">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1860">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="38170-1861">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1861">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="38170-1862">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="38170-1862">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="38170-1863">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="38170-1863">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="38170-1864">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-1864">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="38170-1865">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-1865">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="38170-1866">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-1866">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="38170-1867">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="38170-1867">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="38170-1868">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-1868">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-1869">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-1869">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="38170-1870">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1870">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="38170-1871">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1871">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="38170-1872">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-1872">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="38170-1873">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="38170-1873">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="38170-1874">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1874">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="38170-1875">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="38170-1875">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="38170-1876">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="38170-1876">Binary Mode</span></span>  
 <span data-ttu-id="38170-1877">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="38170-1877">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="38170-1878">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="38170-1878">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="38170-1879">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="38170-1879">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="38170-1880">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="38170-1880">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="38170-1881">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1881">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="38170-1882">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-1882">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="38170-1883">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="38170-1883">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="38170-1884">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="38170-1884">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="38170-1885">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="38170-1885">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="38170-1886">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-1886">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-1887">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1887">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="38170-1888">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1888">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-1889"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="38170-1889"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-1890">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1890">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-1891">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-1891">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-1892">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1892">Required.</span></span> <span data-ttu-id="38170-1893">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1893">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-1894">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1894">Required.</span></span> <span data-ttu-id="38170-1895">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1895">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="38170-1896">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-1896">Optional.</span></span> <span data-ttu-id="38170-1897">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="38170-1897">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="38170-1898">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-1898">Optional.</span></span> <span data-ttu-id="38170-1899">Используется только при записи строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1899">Applies only when writing a string.</span></span> <span data-ttu-id="38170-1900">Указывает, записывать ли в файл двухбайтовый дескриптор длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1900">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="38170-1901">Значение по умолчанию — <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1901">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="38170-1902">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="38170-1902">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="38170-1903">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1903">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="38170-1904">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1904">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-1905">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="38170-1905">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="38170-1906">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="38170-1906">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="38170-1907">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-1907">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="38170-1908">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="38170-1908">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="38170-1909">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="38170-1909">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="38170-1910">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-1910">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="38170-1911">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="38170-1911">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="38170-1912">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="38170-1912">Random Mode</span></span>  
 <span data-ttu-id="38170-1913">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="38170-1913">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="38170-1914">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="38170-1914">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="38170-1915">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1915">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="38170-1916">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-1916">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="38170-1917">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="38170-1917">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="38170-1918">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1918">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="38170-1919">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1919">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="38170-1920">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="38170-1920">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="38170-1921">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1921">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="38170-1922">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1922">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="38170-1923">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1923">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="38170-1924">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1924">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="38170-1925">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1925">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="38170-1926">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="38170-1926">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="38170-1927">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="38170-1927">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="38170-1928">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-1928">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="38170-1929">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-1929">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="38170-1930">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-1930">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="38170-1931">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="38170-1931">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="38170-1932">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-1932">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-1933">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-1933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="38170-1934">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1934">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="38170-1935">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1935">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="38170-1936">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-1936">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="38170-1937">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="38170-1937">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="38170-1938">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1938">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="38170-1939">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="38170-1939">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="38170-1940">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="38170-1940">Binary Mode</span></span>  
 <span data-ttu-id="38170-1941">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="38170-1941">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="38170-1942">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="38170-1942">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="38170-1943">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="38170-1943">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="38170-1944">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="38170-1944">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="38170-1945">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1945">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="38170-1946">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-1946">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="38170-1947">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="38170-1947">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="38170-1948">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="38170-1948">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="38170-1949">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="38170-1949">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="38170-1950">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-1950">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-1951">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1951">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="38170-1952">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-1952">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-1953"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="38170-1953"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-1954">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1954">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-1955">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-1955">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-1956">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1956">Required.</span></span> <span data-ttu-id="38170-1957">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1957">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-1958">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-1958">Required.</span></span> <span data-ttu-id="38170-1959">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-1959">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="38170-1960">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-1960">Optional.</span></span> <span data-ttu-id="38170-1961">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="38170-1961">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="38170-1962">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-1962">Optional.</span></span> <span data-ttu-id="38170-1963">Применяется только при записи массива.</span><span class="sxs-lookup"><span data-stu-id="38170-1963">Applies only when writing an array.</span></span> <span data-ttu-id="38170-1964">Указывает, нужно ли обрабатывать массив как динамический, и записывать ли дескриптор массива для строки, определяющий ее длину.</span><span class="sxs-lookup"><span data-stu-id="38170-1964">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="38170-1965">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-1965">Optional.</span></span> <span data-ttu-id="38170-1966">Используется только при записи строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1966">Applies only when writing a string.</span></span> <span data-ttu-id="38170-1967">Указывает, записывать ли в файл двухбайтовый дескриптор длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1967">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="38170-1968">Значение по умолчанию — <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1968">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="38170-1969">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="38170-1969">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="38170-1970">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1970">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="38170-1971">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-1971">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-1972">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="38170-1972">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="38170-1973">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="38170-1973">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="38170-1974">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-1974">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="38170-1975">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="38170-1975">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="38170-1976">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="38170-1976">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="38170-1977">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-1977">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="38170-1978">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="38170-1978">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="38170-1979">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="38170-1979">Random Mode</span></span>  
 <span data-ttu-id="38170-1980">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="38170-1980">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="38170-1981">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="38170-1981">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="38170-1982">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="38170-1982">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="38170-1983">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-1983">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="38170-1984">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="38170-1984">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="38170-1985">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1985">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="38170-1986">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1986">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="38170-1987">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="38170-1987">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="38170-1988">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="38170-1988">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="38170-1989">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-1989">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="38170-1990">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1990">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="38170-1991">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1991">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="38170-1992">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-1992">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="38170-1993">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="38170-1993">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="38170-1994">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="38170-1994">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="38170-1995">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-1995">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="38170-1996">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-1996">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="38170-1997">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-1997">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="38170-1998">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="38170-1998">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="38170-1999">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-1999">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="38170-2000">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-2000">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="38170-2001">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-2001">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="38170-2002">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-2002">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="38170-2003">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-2003">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="38170-2004">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="38170-2004">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="38170-2005">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-2005">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="38170-2006">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="38170-2006">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="38170-2007">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="38170-2007">Binary Mode</span></span>  
 <span data-ttu-id="38170-2008">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="38170-2008">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="38170-2009">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="38170-2009">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="38170-2010">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="38170-2010">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="38170-2011">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="38170-2011">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="38170-2012">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="38170-2012">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="38170-2013">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-2013">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="38170-2014">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="38170-2014">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="38170-2015">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="38170-2015">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="38170-2016">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="38170-2016">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="38170-2017">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-2017">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2018">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-2018">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="38170-2019">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-2019">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-2020"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="38170-2020"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2021">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2021">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-2022">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2022">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-2023">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2023">Required.</span></span> <span data-ttu-id="38170-2024">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2024">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-2025">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2025">Required.</span></span> <span data-ttu-id="38170-2026">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="38170-2026">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="38170-2027">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-2027">Optional.</span></span> <span data-ttu-id="38170-2028">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="38170-2028">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="38170-2029">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="38170-2029">Writes data from a variable to a disk file.</span></span>  <span data-ttu-id="38170-2030">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePutObject" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2030">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span></span> <span data-ttu-id="38170-2031">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2031">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2032">`FilePutObject` Функции используется вместо `FilePut` во избежание неоднозначности во время компиляции, если тип `Object` передается вместо другого типа, например `Integer`, `Long`, `Short`, и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-2032">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="38170-2033">`FilePutObject` Записывает и читает дескрипторы, описывающие объект.</span><span class="sxs-lookup"><span data-stu-id="38170-2033">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="38170-2034">Если вы собираетесь записать `Variant` типа, `FilePutObject` является обязательным.</span><span class="sxs-lookup"><span data-stu-id="38170-2034">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="38170-2035">Если вы сомневаетесь, если вы используете объект для второго параметра, мы рекомендуем всегда использовать `FilePutObject` и `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="38170-2035">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="38170-2036">`FilePutObject` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="38170-2036">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="38170-2037">Данные, записанные с использованием `FilePutObject`, обычно считываются с помощью `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="38170-2037">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="38170-2038">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-2038">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="38170-2039">Если опустить `RecordNumber`, `FilePutObject` записывает Далее записи или единственного байта после последнего `FileGetObject` или `FilePutObject` функция (или записи или единственного байта, на которые указывают последнего `Seek` функции).</span><span class="sxs-lookup"><span data-stu-id="38170-2039">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="38170-2040">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="38170-2040">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="38170-2041">`FilePutObject` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="38170-2041">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="38170-2042">При использовании `StringIsFixedLength`  =  `True` с `FilePutObject`, что необходимо сделать то же самое с `FileGetObject`, а также необходимо убедиться в том, что строка инициализируется длина ожидалось.</span><span class="sxs-lookup"><span data-stu-id="38170-2042">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="38170-2043">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="38170-2043">Random Mode</span></span>  
 <span data-ttu-id="38170-2044">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="38170-2044">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="38170-2045">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePutObject` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="38170-2045">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="38170-2046">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2046">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="38170-2047">Поскольку невозможно точно определить объем данных, заполнение, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="38170-2047">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="38170-2048">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="38170-2048">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="38170-2049">Если записываемая переменная является объектом, содержащим числовой тип, `FilePutObject` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="38170-2049">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="38170-2050">Например, при написании объект, содержащий целое число, `FilePutObject` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="38170-2050">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="38170-2051">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-2051">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="38170-2052">Если записываемая переменная — это объект, который содержит строку, `FilePutObject` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="38170-2052">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="38170-2053">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="38170-2053">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="38170-2054">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="38170-2054">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="38170-2055">Если записываемая переменная является массивом, а затем записей длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="38170-2055">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="38170-2056">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="38170-2056">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="38170-2057">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="38170-2057">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="38170-2058">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="38170-2058">Binary Mode</span></span>  
 <span data-ttu-id="38170-2059">Для открытия файлов в `Binary` режим, все `Random` применяются правила режиме, за исключением:</span><span class="sxs-lookup"><span data-stu-id="38170-2059">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="38170-2060">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="38170-2060">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="38170-2061">`FilePutObject` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="38170-2061">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2062">В этом примере используется `FilePutObject` функцию для записи строки в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-2062">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-2063">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2063">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-2064">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2064">Required.</span></span> <span data-ttu-id="38170-2065">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2065">Any valid file number.</span></span></param>
        <param name="RecordWidth"><span data-ttu-id="38170-2066">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2066">Required.</span></span> <span data-ttu-id="38170-2067">Числовое выражение в диапазоне от 0 до 255 включительно, которое показывает, сколько знаков появится в строке перед началом новой строки.</span><span class="sxs-lookup"><span data-stu-id="38170-2067">Numeric expression in the range 0-255, inclusive, which indicates how many characters appear on a line before a new line is started.</span></span> <span data-ttu-id="38170-2068">Если параметр <paramref name="RecordWidth" /> равен 0, ограничения на длину строки не устанавливаются.</span><span class="sxs-lookup"><span data-stu-id="38170-2068">If <paramref name="RecordWidth" /> equals 0, there is no limit to the length of a line.</span></span> <span data-ttu-id="38170-2069">Значение по умолчанию для <paramref name="RecordWidth" /> равно 0.</span><span class="sxs-lookup"><span data-stu-id="38170-2069">The default value for <paramref name="RecordWidth" /> is 0.</span></span></param>
        <summary><span data-ttu-id="38170-2070">Присваивает ширину строки вывода в файле, открытом функцией <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2070">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="38170-2071">В этом примере используется `FileWidth` функцию для задания ширины строки вывода для файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2071">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2072">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2072">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-2073">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2073">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="38170-2074">Возвращает значение типа <see langword="Integer" />, представляющее следующий номер файла, доступный для использования функцией <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2074">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></summary>
        <returns><span data-ttu-id="38170-2075">Целочисленное значение, представляющее следующий номер файла, доступный для использования функцией <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2075">An integer value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2076">Используйте `FreeFile` для номера файла, который уже не используется.</span><span class="sxs-lookup"><span data-stu-id="38170-2076">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2077">В этом примере используется `FreeFile` функцию для возврата следующего свободного номера файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2077">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="38170-2078">Для вывода в цикле открывается пять файлов, и некоторые примеры данных записывается для каждого.</span><span class="sxs-lookup"><span data-stu-id="38170-2078">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2079">Используется больше 255 файлов.</span><span class="sxs-lookup"><span data-stu-id="38170-2079">More than 255 files are in use.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-2080">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2080">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="38170-2081">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2081">Required.</span></span> <span data-ttu-id="38170-2082">Строковое выражение, определяющее имя файла, каталога или папки.</span><span class="sxs-lookup"><span data-stu-id="38170-2082">A string expression that specifies a file, directory, or folder name.</span></span> <span data-ttu-id="38170-2083">Выражение <paramref name="PathName" /> может содержать имя каталога или папки и имя диска.</span><span class="sxs-lookup"><span data-stu-id="38170-2083"><paramref name="PathName" /> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="38170-2084">Возвращает значение <see langword="FileAttribute" />, представляющее атрибуты файла, каталога или папки.</span><span class="sxs-lookup"><span data-stu-id="38170-2084">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span></span> <span data-ttu-id="38170-2085">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2085">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span></span> <span data-ttu-id="38170-2086">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2086">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="38170-2087">Побитовое сочетание значений перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-2087">A bitwise combination of the enumeration values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2088">Чтобы определить, какие атрибуты имеют значения, используйте `And` оператор для выполнения побитовое сравнение значения, возвращенного `GetAttr` функции и значения атрибута файла необходимо.</span><span class="sxs-lookup"><span data-stu-id="38170-2088">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="38170-2089">Если результат не равен нулю, этот атрибут имеет значение для указанного файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2089">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="38170-2090">Например, возвращаемое значение из следующих `And` выражение является нуль, если `Archive` атрибут не задан:</span><span class="sxs-lookup"><span data-stu-id="38170-2090">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="38170-2091">Ненулевое значение возвращается в том случае, если `Archive` атрибут имеет значение.</span><span class="sxs-lookup"><span data-stu-id="38170-2091">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2092">В этом примере используется `GetAttr` функцию, чтобы определить атрибуты файла, каталога или папки.</span><span class="sxs-lookup"><span data-stu-id="38170-2092">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2093">Параметр <paramref name="Pathname" /> недопустим или содержит подстановочный знак.</span><span class="sxs-lookup"><span data-stu-id="38170-2093"><paramref name="Pathname" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="38170-2094">Указанный файл не существует.</span><span class="sxs-lookup"><span data-stu-id="38170-2094">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/and-operator.md"><span data-ttu-id="38170-2095">Оператор And (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="38170-2095">And Operator (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-2096">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2096">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="38170-2097">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="38170-2097">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-2098">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2098">Required.</span></span> <span data-ttu-id="38170-2099">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2099">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-2100">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2100">Required.</span></span> <span data-ttu-id="38170-2101">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-2101">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="38170-2102">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="38170-2102">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2103">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2103">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="38170-2104">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2104">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="38170-2105">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="38170-2105">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="38170-2106">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="38170-2106">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="38170-2107">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="38170-2107">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-2108">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2108">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="38170-2109">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="38170-2109">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="38170-2110">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="38170-2110">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="38170-2111">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="38170-2111">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="38170-2112">Данные</span><span class="sxs-lookup"><span data-stu-id="38170-2112">Data</span></span>|<span data-ttu-id="38170-2113">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="38170-2113">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="38170-2114">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="38170-2114">Delimiting comma or blank line</span></span>|<span data-ttu-id="38170-2115">Empty</span><span class="sxs-lookup"><span data-stu-id="38170-2115">Empty</span></span>|  
|<span data-ttu-id="38170-2116">NULL #</span><span class="sxs-lookup"><span data-stu-id="38170-2116">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="38170-2117">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="38170-2117">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="38170-2118">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="38170-2118">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="38170-2119">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="38170-2119">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="38170-2120">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="38170-2120">#ERROR `errornumber`#</span></span>|<span data-ttu-id="38170-2121">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="38170-2121">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="38170-2122">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="38170-2122">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38170-2123">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="38170-2123">The `Input` function is not localized.</span></span> <span data-ttu-id="38170-2124">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="38170-2124">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-2125">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-2125">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="38170-2126">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="38170-2126">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2127">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="38170-2127">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="38170-2128">В этом примере предполагается, что `TestFile` — это файл с несколькими строками данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="38170-2128">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2129">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2129">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="38170-2130">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2130">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-2131">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2131">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="38170-2132">Практическое руководство. Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="38170-2132">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-2133">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2133">Required.</span></span> <span data-ttu-id="38170-2134">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2134">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-2135">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2135">Required.</span></span> <span data-ttu-id="38170-2136">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-2136">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="38170-2137">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="38170-2137">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2138">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2138">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="38170-2139">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2139">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="38170-2140">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="38170-2140">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="38170-2141">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="38170-2141">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="38170-2142">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="38170-2142">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-2143">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2143">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="38170-2144">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="38170-2144">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="38170-2145">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="38170-2145">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="38170-2146">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="38170-2146">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="38170-2147">Данные</span><span class="sxs-lookup"><span data-stu-id="38170-2147">Data</span></span>|<span data-ttu-id="38170-2148">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="38170-2148">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="38170-2149">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="38170-2149">Delimiting comma or blank line</span></span>|<span data-ttu-id="38170-2150">Empty</span><span class="sxs-lookup"><span data-stu-id="38170-2150">Empty</span></span>|  
|<span data-ttu-id="38170-2151">NULL #</span><span class="sxs-lookup"><span data-stu-id="38170-2151">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="38170-2152">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="38170-2152">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="38170-2153">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="38170-2153">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="38170-2154">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="38170-2154">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="38170-2155">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="38170-2155">#ERROR `errornumber`#</span></span>|<span data-ttu-id="38170-2156">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="38170-2156">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="38170-2157">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="38170-2157">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38170-2158">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="38170-2158">The `Input` function is not localized.</span></span> <span data-ttu-id="38170-2159">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="38170-2159">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-2160">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-2160">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="38170-2161">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="38170-2161">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2162">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="38170-2162">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="38170-2163">В этом примере предполагается, что `TestFile` — это файл с несколькими строками данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="38170-2163">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2164">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2164">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="38170-2165">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2165">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-2166">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2166">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="38170-2167">Практическое руководство. Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="38170-2167">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-2168">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2168">Required.</span></span> <span data-ttu-id="38170-2169">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2169">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-2170">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2170">Required.</span></span> <span data-ttu-id="38170-2171">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-2171">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="38170-2172">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="38170-2172">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2173">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2173">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="38170-2174">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2174">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="38170-2175">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="38170-2175">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="38170-2176">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="38170-2176">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="38170-2177">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="38170-2177">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-2178">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2178">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="38170-2179">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="38170-2179">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="38170-2180">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="38170-2180">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="38170-2181">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="38170-2181">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="38170-2182">Данные</span><span class="sxs-lookup"><span data-stu-id="38170-2182">Data</span></span>|<span data-ttu-id="38170-2183">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="38170-2183">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="38170-2184">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="38170-2184">Delimiting comma or blank line</span></span>|<span data-ttu-id="38170-2185">Empty</span><span class="sxs-lookup"><span data-stu-id="38170-2185">Empty</span></span>|  
|<span data-ttu-id="38170-2186">NULL #</span><span class="sxs-lookup"><span data-stu-id="38170-2186">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="38170-2187">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="38170-2187">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="38170-2188">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="38170-2188">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="38170-2189">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="38170-2189">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="38170-2190">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="38170-2190">#ERROR `errornumber`#</span></span>|<span data-ttu-id="38170-2191">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="38170-2191">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="38170-2192">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="38170-2192">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38170-2193">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="38170-2193">The `Input` function is not localized.</span></span> <span data-ttu-id="38170-2194">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="38170-2194">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-2195">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-2195">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="38170-2196">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="38170-2196">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2197">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="38170-2197">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="38170-2198">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="38170-2198">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2199">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2199">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="38170-2200">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2200">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-2201">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2201">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="38170-2202">Практическое руководство. Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="38170-2202">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-2203">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2203">Required.</span></span> <span data-ttu-id="38170-2204">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2204">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-2205">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2205">Required.</span></span> <span data-ttu-id="38170-2206">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-2206">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="38170-2207">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="38170-2207">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2208">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2208">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="38170-2209">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2209">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="38170-2210">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="38170-2210">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="38170-2211">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="38170-2211">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="38170-2212">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="38170-2212">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-2213">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2213">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="38170-2214">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="38170-2214">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="38170-2215">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="38170-2215">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="38170-2216">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="38170-2216">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="38170-2217">Данные</span><span class="sxs-lookup"><span data-stu-id="38170-2217">Data</span></span>|<span data-ttu-id="38170-2218">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="38170-2218">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="38170-2219">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="38170-2219">Delimiting comma or blank line</span></span>|<span data-ttu-id="38170-2220">Empty</span><span class="sxs-lookup"><span data-stu-id="38170-2220">Empty</span></span>|  
|<span data-ttu-id="38170-2221">NULL #</span><span class="sxs-lookup"><span data-stu-id="38170-2221">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="38170-2222">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="38170-2222">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="38170-2223">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="38170-2223">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="38170-2224">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="38170-2224">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="38170-2225">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="38170-2225">#ERROR `errornumber`#</span></span>|<span data-ttu-id="38170-2226">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="38170-2226">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="38170-2227">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="38170-2227">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38170-2228">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="38170-2228">The `Input` function is not localized.</span></span> <span data-ttu-id="38170-2229">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="38170-2229">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-2230">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-2230">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="38170-2231">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="38170-2231">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2232">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="38170-2232">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="38170-2233">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="38170-2233">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2234">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2234">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="38170-2235">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2235">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-2236">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2236">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="38170-2237">Практическое руководство. Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="38170-2237">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-2238">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2238">Required.</span></span> <span data-ttu-id="38170-2239">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2239">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-2240">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2240">Required.</span></span> <span data-ttu-id="38170-2241">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-2241">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="38170-2242">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="38170-2242">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2243">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2243">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="38170-2244">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2244">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="38170-2245">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="38170-2245">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="38170-2246">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="38170-2246">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="38170-2247">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="38170-2247">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-2248">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2248">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="38170-2249">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="38170-2249">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="38170-2250">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="38170-2250">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="38170-2251">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="38170-2251">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="38170-2252">Данные</span><span class="sxs-lookup"><span data-stu-id="38170-2252">Data</span></span>|<span data-ttu-id="38170-2253">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="38170-2253">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="38170-2254">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="38170-2254">Delimiting comma or blank line</span></span>|<span data-ttu-id="38170-2255">Empty</span><span class="sxs-lookup"><span data-stu-id="38170-2255">Empty</span></span>|  
|<span data-ttu-id="38170-2256">NULL #</span><span class="sxs-lookup"><span data-stu-id="38170-2256">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="38170-2257">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="38170-2257">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="38170-2258">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="38170-2258">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="38170-2259">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="38170-2259">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="38170-2260">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="38170-2260">#ERROR `errornumber`#</span></span>|<span data-ttu-id="38170-2261">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="38170-2261">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="38170-2262">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="38170-2262">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38170-2263">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="38170-2263">The `Input` function is not localized.</span></span> <span data-ttu-id="38170-2264">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="38170-2264">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-2265">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-2265">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="38170-2266">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="38170-2266">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2267">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="38170-2267">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="38170-2268">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="38170-2268">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2269">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2269">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="38170-2270">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2270">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-2271">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2271">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="38170-2272">Практическое руководство. Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="38170-2272">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-2273">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2273">Required.</span></span> <span data-ttu-id="38170-2274">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2274">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-2275">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2275">Required.</span></span> <span data-ttu-id="38170-2276">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-2276">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="38170-2277">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="38170-2277">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2278">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2278">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="38170-2279">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2279">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="38170-2280">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="38170-2280">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="38170-2281">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="38170-2281">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="38170-2282">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="38170-2282">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-2283">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2283">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="38170-2284">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="38170-2284">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="38170-2285">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="38170-2285">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="38170-2286">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="38170-2286">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="38170-2287">Данные</span><span class="sxs-lookup"><span data-stu-id="38170-2287">Data</span></span>|<span data-ttu-id="38170-2288">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="38170-2288">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="38170-2289">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="38170-2289">Delimiting comma or blank line</span></span>|<span data-ttu-id="38170-2290">Empty</span><span class="sxs-lookup"><span data-stu-id="38170-2290">Empty</span></span>|  
|<span data-ttu-id="38170-2291">NULL #</span><span class="sxs-lookup"><span data-stu-id="38170-2291">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="38170-2292">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="38170-2292">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="38170-2293">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="38170-2293">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="38170-2294">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="38170-2294">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="38170-2295">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="38170-2295">#ERROR `errornumber`#</span></span>|<span data-ttu-id="38170-2296">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="38170-2296">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="38170-2297">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="38170-2297">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38170-2298">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="38170-2298">The `Input` function is not localized.</span></span> <span data-ttu-id="38170-2299">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="38170-2299">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-2300">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-2300">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="38170-2301">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="38170-2301">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2302">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="38170-2302">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="38170-2303">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="38170-2303">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2304">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2304">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="38170-2305">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2305">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-2306">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2306">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="38170-2307">Практическое руководство. Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="38170-2307">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-2308">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2308">Required.</span></span> <span data-ttu-id="38170-2309">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2309">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-2310">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2310">Required.</span></span> <span data-ttu-id="38170-2311">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-2311">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="38170-2312">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="38170-2312">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2313">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2313">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="38170-2314">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2314">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="38170-2315">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="38170-2315">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="38170-2316">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="38170-2316">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="38170-2317">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="38170-2317">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-2318">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2318">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="38170-2319">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="38170-2319">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="38170-2320">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="38170-2320">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="38170-2321">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="38170-2321">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="38170-2322">Данные</span><span class="sxs-lookup"><span data-stu-id="38170-2322">Data</span></span>|<span data-ttu-id="38170-2323">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="38170-2323">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="38170-2324">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="38170-2324">Delimiting comma or blank line</span></span>|<span data-ttu-id="38170-2325">Empty</span><span class="sxs-lookup"><span data-stu-id="38170-2325">Empty</span></span>|  
|<span data-ttu-id="38170-2326">NULL #</span><span class="sxs-lookup"><span data-stu-id="38170-2326">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="38170-2327">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="38170-2327">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="38170-2328">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="38170-2328">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="38170-2329">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="38170-2329">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="38170-2330">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="38170-2330">#ERROR `errornumber`#</span></span>|<span data-ttu-id="38170-2331">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="38170-2331">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="38170-2332">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="38170-2332">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38170-2333">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="38170-2333">The `Input` function is not localized.</span></span> <span data-ttu-id="38170-2334">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="38170-2334">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-2335">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-2335">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="38170-2336">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="38170-2336">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2337">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="38170-2337">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="38170-2338">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="38170-2338">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2339">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2339">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="38170-2340">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2340">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-2341">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2341">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="38170-2342">Практическое руководство. Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="38170-2342">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-2343">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2343">Required.</span></span> <span data-ttu-id="38170-2344">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2344">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-2345">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2345">Required.</span></span> <span data-ttu-id="38170-2346">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-2346">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="38170-2347">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="38170-2347">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2348">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2348">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="38170-2349">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2349">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="38170-2350">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="38170-2350">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="38170-2351">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="38170-2351">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="38170-2352">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="38170-2352">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-2353">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2353">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="38170-2354">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="38170-2354">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="38170-2355">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="38170-2355">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="38170-2356">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="38170-2356">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="38170-2357">Данные</span><span class="sxs-lookup"><span data-stu-id="38170-2357">Data</span></span>|<span data-ttu-id="38170-2358">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="38170-2358">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="38170-2359">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="38170-2359">Delimiting comma or blank line</span></span>|<span data-ttu-id="38170-2360">Empty</span><span class="sxs-lookup"><span data-stu-id="38170-2360">Empty</span></span>|  
|<span data-ttu-id="38170-2361">NULL #</span><span class="sxs-lookup"><span data-stu-id="38170-2361">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="38170-2362">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="38170-2362">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="38170-2363">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="38170-2363">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="38170-2364">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="38170-2364">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="38170-2365">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="38170-2365">#ERROR `errornumber`#</span></span>|<span data-ttu-id="38170-2366">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="38170-2366">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="38170-2367">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="38170-2367">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38170-2368">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="38170-2368">The `Input` function is not localized.</span></span> <span data-ttu-id="38170-2369">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая рассматривается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="38170-2369">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-2370">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-2370">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="38170-2371">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="38170-2371">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2372">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="38170-2372">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="38170-2373">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="38170-2373">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2374">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2374">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="38170-2375">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2375">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-2376">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2376">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="38170-2377">Практическое руководство. Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="38170-2377">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-2378">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2378">Required.</span></span> <span data-ttu-id="38170-2379">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2379">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-2380">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2380">Required.</span></span> <span data-ttu-id="38170-2381">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-2381">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="38170-2382">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="38170-2382">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2383">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2383">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="38170-2384">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2384">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="38170-2385">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="38170-2385">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="38170-2386">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="38170-2386">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="38170-2387">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="38170-2387">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-2388">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2388">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="38170-2389">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="38170-2389">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="38170-2390">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="38170-2390">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="38170-2391">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="38170-2391">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="38170-2392">Данные</span><span class="sxs-lookup"><span data-stu-id="38170-2392">Data</span></span>|<span data-ttu-id="38170-2393">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="38170-2393">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="38170-2394">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="38170-2394">Delimiting comma or blank line</span></span>|<span data-ttu-id="38170-2395">Empty</span><span class="sxs-lookup"><span data-stu-id="38170-2395">Empty</span></span>|  
|<span data-ttu-id="38170-2396">NULL #</span><span class="sxs-lookup"><span data-stu-id="38170-2396">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="38170-2397">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="38170-2397">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="38170-2398">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="38170-2398">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="38170-2399">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="38170-2399">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="38170-2400">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="38170-2400">#ERROR `errornumber`#</span></span>|<span data-ttu-id="38170-2401">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="38170-2401">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="38170-2402">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="38170-2402">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38170-2403">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="38170-2403">The `Input` function is not localized.</span></span> <span data-ttu-id="38170-2404">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="38170-2404">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-2405">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-2405">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="38170-2406">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="38170-2406">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2407">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="38170-2407">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="38170-2408">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="38170-2408">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2409">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2409">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="38170-2410">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2410">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-2411">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2411">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="38170-2412">Практическое руководство. Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="38170-2412">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-2413">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2413">Required.</span></span> <span data-ttu-id="38170-2414">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2414">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-2415">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2415">Required.</span></span> <span data-ttu-id="38170-2416">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-2416">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="38170-2417">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="38170-2417">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2418">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2418">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="38170-2419">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2419">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="38170-2420">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="38170-2420">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="38170-2421">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="38170-2421">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="38170-2422">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="38170-2422">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-2423">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2423">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="38170-2424">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="38170-2424">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="38170-2425">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="38170-2425">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="38170-2426">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="38170-2426">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="38170-2427">Данные</span><span class="sxs-lookup"><span data-stu-id="38170-2427">Data</span></span>|<span data-ttu-id="38170-2428">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="38170-2428">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="38170-2429">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="38170-2429">Delimiting comma or blank line</span></span>|<span data-ttu-id="38170-2430">Empty</span><span class="sxs-lookup"><span data-stu-id="38170-2430">Empty</span></span>|  
|<span data-ttu-id="38170-2431">NULL #</span><span class="sxs-lookup"><span data-stu-id="38170-2431">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="38170-2432">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="38170-2432">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="38170-2433">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="38170-2433">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="38170-2434">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="38170-2434">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="38170-2435">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="38170-2435">#ERROR `errornumber`#</span></span>|<span data-ttu-id="38170-2436">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="38170-2436">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="38170-2437">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="38170-2437">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38170-2438">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="38170-2438">The `Input` function is not localized.</span></span> <span data-ttu-id="38170-2439">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="38170-2439">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-2440">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-2440">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="38170-2441">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="38170-2441">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2442">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="38170-2442">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="38170-2443">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="38170-2443">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2444">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2444">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="38170-2445">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2445">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-2446">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2446">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="38170-2447">Практическое руководство. Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="38170-2447">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-2448">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2448">Required.</span></span> <span data-ttu-id="38170-2449">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2449">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-2450">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2450">Required.</span></span> <span data-ttu-id="38170-2451">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-2451">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="38170-2452">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="38170-2452">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2453">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2453">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="38170-2454">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2454">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="38170-2455">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="38170-2455">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="38170-2456">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="38170-2456">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="38170-2457">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="38170-2457">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-2458">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2458">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="38170-2459">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="38170-2459">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="38170-2460">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="38170-2460">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="38170-2461">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="38170-2461">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="38170-2462">Данные</span><span class="sxs-lookup"><span data-stu-id="38170-2462">Data</span></span>|<span data-ttu-id="38170-2463">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="38170-2463">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="38170-2464">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="38170-2464">Delimiting comma or blank line</span></span>|<span data-ttu-id="38170-2465">Empty</span><span class="sxs-lookup"><span data-stu-id="38170-2465">Empty</span></span>|  
|<span data-ttu-id="38170-2466">NULL #</span><span class="sxs-lookup"><span data-stu-id="38170-2466">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="38170-2467">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="38170-2467">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="38170-2468">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="38170-2468">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="38170-2469">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="38170-2469">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="38170-2470">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="38170-2470">#ERROR `errornumber`#</span></span>|<span data-ttu-id="38170-2471">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="38170-2471">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="38170-2472">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="38170-2472">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38170-2473">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="38170-2473">The `Input` function is not localized.</span></span> <span data-ttu-id="38170-2474">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="38170-2474">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-2475">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-2475">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="38170-2476">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="38170-2476">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2477">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="38170-2477">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="38170-2478">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="38170-2478">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2479">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2479">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="38170-2480">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2480">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-2481">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2481">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="38170-2482">Практическое руководство. Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="38170-2482">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-2483">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2483">Required.</span></span> <span data-ttu-id="38170-2484">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2484">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="38170-2485">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2485">Required.</span></span> <span data-ttu-id="38170-2486">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-2486">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="38170-2487">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="38170-2487">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2488">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2488">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="38170-2489">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2489">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="38170-2490">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="38170-2490">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="38170-2491">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="38170-2491">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="38170-2492">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="38170-2492">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-2493">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2493">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="38170-2494">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="38170-2494">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="38170-2495">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="38170-2495">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="38170-2496">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="38170-2496">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="38170-2497">Данные</span><span class="sxs-lookup"><span data-stu-id="38170-2497">Data</span></span>|<span data-ttu-id="38170-2498">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="38170-2498">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="38170-2499">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="38170-2499">Delimiting comma or blank line</span></span>|<span data-ttu-id="38170-2500">Empty</span><span class="sxs-lookup"><span data-stu-id="38170-2500">Empty</span></span>|  
|<span data-ttu-id="38170-2501">NULL #</span><span class="sxs-lookup"><span data-stu-id="38170-2501">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="38170-2502">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="38170-2502">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="38170-2503">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="38170-2503">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="38170-2504">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="38170-2504">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="38170-2505">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="38170-2505">#ERROR `errornumber`#</span></span>|<span data-ttu-id="38170-2506">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="38170-2506">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="38170-2507">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="38170-2507">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38170-2508">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="38170-2508">The `Input` function is not localized.</span></span> <span data-ttu-id="38170-2509">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="38170-2509">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-2510">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-2510">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="38170-2511">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="38170-2511">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2512">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="38170-2512">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="38170-2513">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="38170-2513">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2514">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2514">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="38170-2515">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2515">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-2516">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2516">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="38170-2517">Практическое руководство. Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="38170-2517">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-2518">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2518">Required.</span></span> <span data-ttu-id="38170-2519">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2519">Any valid file number.</span></span></param>
        <param name="CharCount"><span data-ttu-id="38170-2520">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2520">Required.</span></span> <span data-ttu-id="38170-2521">Любое допустимое числовое выражение, указывающее число знаков, которые надо прочитать.</span><span class="sxs-lookup"><span data-stu-id="38170-2521">Any valid numeric expression specifying the number of characters to read.</span></span></param>
        <summary><span data-ttu-id="38170-2522">Возвращает значение <see langword="String" />, содержащее знаки из файла, открытого в режиме <see langword="Input" /> или <see langword="Binary" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2522">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="38170-2523">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="InputString" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2523">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span> <span data-ttu-id="38170-2524">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2524">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="38170-2525">Строка, содержащая знаки из файла, открытого в режиме <see langword="Input" /> или <see langword="Binary" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2525">A string that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="38170-2526">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="InputString" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2526">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2527">`InputString` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2527">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="38170-2528">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2528">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="38170-2529">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="38170-2529">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="38170-2530">Данные, считанные с `InputString` функции, обычно записываются в файл с помощью `Print` или `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="38170-2530">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="38170-2531">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="38170-2531">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="38170-2532">В отличие от `Input` функции `InputString` функция возвращает все символы, которые считывает.</span><span class="sxs-lookup"><span data-stu-id="38170-2532">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="38170-2533">Сюда входят запятые, символы возврата каретки, перевода строки, кавычки и пробелы.</span><span class="sxs-lookup"><span data-stu-id="38170-2533">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="38170-2534">В файлах, открытых для `Binary` получить доступ к, попытка прочитать файл с помощью `InputString` функционировать до `EOF` возвращает `True` приводит к ошибке.</span><span class="sxs-lookup"><span data-stu-id="38170-2534">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="38170-2535">Используйте `LOF` и `Loc` функции вместо `EOF` при чтении двоичных файлов с помощью `InputString`, или использовать `FileGet` при использовании `EOF` функции.</span><span class="sxs-lookup"><span data-stu-id="38170-2535">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38170-2536">При считывании из файла решения по обеспечению безопасности содержимое файла, в зависимости от расширения имени файла не следует.</span><span class="sxs-lookup"><span data-stu-id="38170-2536">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="38170-2537">Например файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="38170-2537">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2538">В этом примере используется `InputString` функции считывают один символ за раз из файла и распечатать его, чтобы `Output` окна.</span><span class="sxs-lookup"><span data-stu-id="38170-2538">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="38170-2539">В этом примере предполагается, что `MyFile` — это текстовый файл, содержащий несколько строк данных выборки.</span><span class="sxs-lookup"><span data-stu-id="38170-2539">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2540"><paramref name="FileNumber" /> — не существует.</span><span class="sxs-lookup"><span data-stu-id="38170-2540"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-2541"><paramref name="CharCount" />&lt; 0 или &gt; 214.</span><span class="sxs-lookup"><span data-stu-id="38170-2541"><paramref name="CharCount" /> &lt; 0 or &gt; 214.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-2542">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2542">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="38170-2543">Практическое руководство. Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="38170-2543">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="38170-2544">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2544">How to: Write Text to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="38170-2545">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2545">Required.</span></span> <span data-ttu-id="38170-2546">Строковое выражение, определяющее файлы, которые должны быть удалены.</span><span class="sxs-lookup"><span data-stu-id="38170-2546">A string expression that specifies one or more file names to be deleted.</span></span> <span data-ttu-id="38170-2547">Выражение <paramref name="PathName" /> может содержать имя каталога или папки и имя диска.</span><span class="sxs-lookup"><span data-stu-id="38170-2547"><paramref name="PathName" /> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="38170-2548">Удаляет файлы с диска.</span><span class="sxs-lookup"><span data-stu-id="38170-2548">Deletes files from a disk.</span></span> <span data-ttu-id="38170-2549">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="Kill" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2549">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span></span> <span data-ttu-id="38170-2550">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2550">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2551">`Kill` поддерживает использование нескольких знаков (`*`) и одиночные (`?`) можно указать несколько файлов.</span><span class="sxs-lookup"><span data-stu-id="38170-2551">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="38170-2552">**Примечание по безопасности** для выполнения, `Kill` функции требуется `Read` и `PathDiscovery` флаги из <xref:System.Security.Permissions.FileIOPermission> должны быть предоставлены для исполняемого кода.</span><span class="sxs-lookup"><span data-stu-id="38170-2552">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="38170-2553">Дополнительные сведения см. в разделе <xref:System.Security.SecurityException> [разрешений доступа к коду](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="38170-2553">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2554">В этом примере используется `Kill` функции, чтобы удалить файл с диска.</span><span class="sxs-lookup"><span data-stu-id="38170-2554">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2555">Удаляемые файлы открыты.</span><span class="sxs-lookup"><span data-stu-id="38170-2555">Target file(s) open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="38170-2556">Удаляемые файлы не найдены.</span><span class="sxs-lookup"><span data-stu-id="38170-2556">Target file(s) not found.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="38170-2557">В разрешении отказано.</span><span class="sxs-lookup"><span data-stu-id="38170-2557">Permission denied.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-2558">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2558">Required.</span></span> <span data-ttu-id="38170-2559">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2559">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="38170-2560">Читает одну строку из открытого последовательного файла и присваивает ее переменной типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2560">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></summary>
        <returns><span data-ttu-id="38170-2561">Читает одну строку из открытого последовательного файла и присваивает ее переменной типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2561">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2562">`LineInput` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2562">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="38170-2563">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2563">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="38170-2564">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="38170-2564">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="38170-2565">Данные, считанные с `LineInput` , обычно записываются в файл с помощью `Print`.</span><span class="sxs-lookup"><span data-stu-id="38170-2565">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-2566">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2566">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="38170-2567">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="38170-2567">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="38170-2568">`LineInput` Функция считывает из файла одного символа во время, пока встретится символ возврата каретки (`Chr(13)`) или каретки и перевода строки веб-канал (`Chr(13) + Chr(10)`) последовательности.</span><span class="sxs-lookup"><span data-stu-id="38170-2568">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="38170-2569">Веб-канала последовательностей каретки и перевода строки, добавляемой в конце символьной строки, вместо пропускаются.</span><span class="sxs-lookup"><span data-stu-id="38170-2569">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-2570">Чтение из файла с помощью `LineInput` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-2570">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2571">В этом примере используется `LineInput` функция для чтения строки из последовательного файла и присвоить его переменной.</span><span class="sxs-lookup"><span data-stu-id="38170-2571">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="38170-2572">В этом примере предполагается, что `TestFile` — это текстовый файл, содержащий несколько строк данных выборки.</span><span class="sxs-lookup"><span data-stu-id="38170-2572">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="38170-2573">Достигнут конец файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2573">End of file reached.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2574"><paramref name="FileNumber" /> — не существует.</span><span class="sxs-lookup"><span data-stu-id="38170-2574"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-2575">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2575">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="38170-2576">Практическое руководство. Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="38170-2576">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="38170-2577">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2577">How to: Write Text to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-2578">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2578">Required.</span></span> <span data-ttu-id="38170-2579">Любой допустимый номер файла типа <see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2579">Any valid <see langword="Integer" /> file number.</span></span></param>
        <summary><span data-ttu-id="38170-2580">Возвращает значение, указывающее текущую позицию для ввода-вывода в открытом файле.</span><span class="sxs-lookup"><span data-stu-id="38170-2580">Returns a value that specifies the current read/write position in an open file.</span></span></summary>
        <returns><span data-ttu-id="38170-2581">Текущая позиция чтения или записи в открытом файле.</span><span class="sxs-lookup"><span data-stu-id="38170-2581">The current read/write position in an open file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2582">`Loc` Функция отсчитываются от нуля, использовании ее для получения первого байта в файле возвратит значение 0.</span><span class="sxs-lookup"><span data-stu-id="38170-2582">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="38170-2583">`Loc` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2583">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="38170-2584">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2584">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="38170-2585">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="38170-2585">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="38170-2586">Ниже описаны возвращаемое значение для каждого режима доступа к файлу.</span><span class="sxs-lookup"><span data-stu-id="38170-2586">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="38170-2587">Режим</span><span class="sxs-lookup"><span data-stu-id="38170-2587">Mode</span></span>|<span data-ttu-id="38170-2588">Возвращаемое значение</span><span class="sxs-lookup"><span data-stu-id="38170-2588">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="38170-2589">Номер последней записи, чтения или записи в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-2589">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="38170-2590">Текущая позиция байта в файле, деленная на 128.</span><span class="sxs-lookup"><span data-stu-id="38170-2590">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="38170-2591">Тем не менее, возвращаются сведения по `Loc` для последовательных файлов не используется и не требуется.</span><span class="sxs-lookup"><span data-stu-id="38170-2591">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="38170-2592">Позиция последнего байта чтения или записи.</span><span class="sxs-lookup"><span data-stu-id="38170-2592">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="38170-2593">В этом примере используется `Loc` функция, возвращающая текущую позицию чтения/записи в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-2593">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="38170-2594">В этом примере предполагается, что `MyFile` — это текстовый файл, содержащий несколько строк данных выборки.</span><span class="sxs-lookup"><span data-stu-id="38170-2594">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2595">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2595">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="38170-2596">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="38170-2596">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="38170-2597">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2597">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="38170-2598">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2598">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-2599">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2599">Required.</span></span> <span data-ttu-id="38170-2600">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2600">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="38170-2601">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="38170-2601">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="38170-2602">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2602">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="38170-2603">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2603">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2604">`Lock` И `Unlock` функции используются в средах, где несколько процессов может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="38170-2604">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="38170-2605">`Lock` и `Unlock` функций всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="38170-2605">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="38170-2606">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="38170-2606">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="38170-2607">Если `Record`, или `FromRecord` и `ToRecord` являются не указан, будет иметь блокировку для всего файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2607">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="38170-2608">Если `Record` отдельно указано одну запись будет заблокирована или разблокирована.</span><span class="sxs-lookup"><span data-stu-id="38170-2608">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="38170-2609">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` влияют на весь файл, независимо от того, диапазон, указанный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="38170-2609">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2610">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="38170-2610">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="38170-2611">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="38170-2611">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2612">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2612">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-2613">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2613">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-2614">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2614">Required.</span></span> <span data-ttu-id="38170-2615">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2615">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="38170-2616">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-2616">Optional.</span></span> <span data-ttu-id="38170-2617">Номер единственной записи или единственного байта для блокировки или разблокировки.</span><span class="sxs-lookup"><span data-stu-id="38170-2617">Number of the only record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="38170-2618">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="38170-2618">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="38170-2619">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2619">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="38170-2620">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2620">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2621">`Lock` И `Unlock` функции используются в средах, где несколько процессов может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="38170-2621">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="38170-2622">`Lock` и `Unlock` функций всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="38170-2622">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="38170-2623">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="38170-2623">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="38170-2624">Если `Record`, или `FromRecord` и `ToRecord` являются не указан, будет иметь блокировку для всего файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2624">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="38170-2625">Если `Record` отдельно указано одну запись будет заблокирована или разблокирована.</span><span class="sxs-lookup"><span data-stu-id="38170-2625">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="38170-2626">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` влияют на весь файл, независимо от того, диапазон, указанный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="38170-2626">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2627">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="38170-2627">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="38170-2628">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="38170-2628">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2629">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2629">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-2630">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2630">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-2631">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2631">Required.</span></span> <span data-ttu-id="38170-2632">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2632">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="38170-2633">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-2633">Optional.</span></span> <span data-ttu-id="38170-2634">Номер первой записи или первого байта, начиная с которого файл открывается или закрывается для доступа.</span><span class="sxs-lookup"><span data-stu-id="38170-2634">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="38170-2635">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-2635">Optional.</span></span> <span data-ttu-id="38170-2636">Номер последней записи или последнего байта, которыми заканчивается часть файла, открытая или закрытая для доступа.</span><span class="sxs-lookup"><span data-stu-id="38170-2636">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="38170-2637">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="38170-2637">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="38170-2638">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2638">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="38170-2639">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2639">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2640">`Lock` И `Unlock` функции используются в средах, где несколько процессов может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="38170-2640">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="38170-2641">`Lock` и `Unlock` функций всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="38170-2641">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="38170-2642">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="38170-2642">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="38170-2643">Если `Record`, или `FromRecord` и `ToRecord` являются не указан, будет иметь блокировку для всего файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2643">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="38170-2644">Если `Record` отдельно указано одну запись будет заблокирована или разблокирована.</span><span class="sxs-lookup"><span data-stu-id="38170-2644">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="38170-2645">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` влияют на весь файл, независимо от того, диапазон, указанный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="38170-2645">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2646">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="38170-2646">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="38170-2647">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="38170-2647">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2648">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2648">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-2649">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2649">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-2650">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2650">Required.</span></span> <span data-ttu-id="38170-2651">Целое число, содержащее допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2651">An integer that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="38170-2652">Возвращает размер (в байтах) файла, открытого функцией <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2652">Returns the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="38170-2653">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="LOF" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2653">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span> <span data-ttu-id="38170-2654">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2654">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="38170-2655">Размер (в байтах) файла, открытого функцией <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2655">The size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="38170-2656">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="LOF" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2656">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2657">Используйте `FileLen` функции для получения длины файла, не являющийся открытым.</span><span class="sxs-lookup"><span data-stu-id="38170-2657">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2658">В этом примере используется `LOF` функцию, чтобы определить размер открытого файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2658">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="38170-2659">В этом примере предполагается, что `TestFile` — это текстовый файл, содержащий данные образца.</span><span class="sxs-lookup"><span data-stu-id="38170-2659">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2660">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2660">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="38170-2661">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2661">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-2662">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2662">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="38170-2663">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2663">Required.</span></span> <span data-ttu-id="38170-2664">Строковое выражение, задающее создаваемый каталог.</span><span class="sxs-lookup"><span data-stu-id="38170-2664">A string expression that identifies the directory to be created.</span></span> <span data-ttu-id="38170-2665">Параметр <paramref name="Path" /> может содержать метку диска.</span><span class="sxs-lookup"><span data-stu-id="38170-2665">The <paramref name="Path" /> may include the drive.</span></span> <span data-ttu-id="38170-2666">Если диск не указан, <see langword="MkDir" /> создает каталог на текущем диске.</span><span class="sxs-lookup"><span data-stu-id="38170-2666">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="38170-2667">Создает каталог.</span><span class="sxs-lookup"><span data-stu-id="38170-2667">Creates a new directory.</span></span> <span data-ttu-id="38170-2668">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="MkDir" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2668">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span></span> <span data-ttu-id="38170-2669">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2669">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2670">Эта функция создает новый каталог.</span><span class="sxs-lookup"><span data-stu-id="38170-2670">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2671">В этом примере используется `MkDir` функции для создания каталога.</span><span class="sxs-lookup"><span data-stu-id="38170-2671">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="38170-2672">Если диск не указан, новый каталог создается на текущем диске.</span><span class="sxs-lookup"><span data-stu-id="38170-2672">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-2673"><paramref name="Path" /> не указан или пуст.</span><span class="sxs-lookup"><span data-stu-id="38170-2673"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="38170-2674">В разрешении отказано.</span><span class="sxs-lookup"><span data-stu-id="38170-2674">Permission denied.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2675">Каталог уже существует.</span><span class="sxs-lookup"><span data-stu-id="38170-2675">Directory already exists.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory.md"><span data-ttu-id="38170-2676">Практическое руководство. Создание каталога в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2676">How to: Create a Directory in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-2677">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2677">Required.</span></span> <span data-ttu-id="38170-2678">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2678">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="38170-2679">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2679">Optional.</span></span> <span data-ttu-id="38170-2680">Ноль или больше выражений с разделителями-запятыми для записи в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-2680">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
<span data-ttu-id="38170-2681">Параметры аргумента <paramref name="Output" />:</span><span class="sxs-lookup"><span data-stu-id="38170-2681">The <paramref name="Output" /> argument settings are:</span></span> 
 <span data-ttu-id="38170-2682"><see langword="T:System.IO.IOException" />: Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2682"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="38170-2683"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> не существует.</span><span class="sxs-lookup"><span data-stu-id="38170-2683"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span></span></param>
        <summary><span data-ttu-id="38170-2684">Записывает отформатированные данные в последовательный файл.</span><span class="sxs-lookup"><span data-stu-id="38170-2684">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2685">`Print` И `PrintLine` функции предоставляются для обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2685">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="38170-2686">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2686">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="38170-2687">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="38170-2687">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="38170-2688">`Print` не включает символ перевода строки в конце строки; Тем не менее `PrintLine` содержит символ перевода строки.</span><span class="sxs-lookup"><span data-stu-id="38170-2688">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="38170-2689">Данные, записанные с помощью `Print` обычно считываются из файла с помощью `LineInput` или `Input`.</span><span class="sxs-lookup"><span data-stu-id="38170-2689">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="38170-2690">Если опустить `Output` для `PrintLine`, пустая строка выводится в файл; для `Print`, ничего не выводится.</span><span class="sxs-lookup"><span data-stu-id="38170-2690">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="38170-2691">Несколько выражений, разделенных запятыми, будут выровнены по границам табуляции, но смешивание запятые и `TAB` может привести к несогласованным результатам.</span><span class="sxs-lookup"><span data-stu-id="38170-2691">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="38170-2692">Для `Boolean` данных, либо `True` или `False` печати.</span><span class="sxs-lookup"><span data-stu-id="38170-2692">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="38170-2693">`True` И `False` ключевые слова не преобразуются, вне зависимости от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="38170-2693">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="38170-2694">Дата данные записываются в файл с помощью стандартных краткий формат, распознаваемого системой.</span><span class="sxs-lookup"><span data-stu-id="38170-2694">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="38170-2695">Когда дата или время отсутствует или ноль, только часть условии записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-2695">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="38170-2696">Ничего не записывается в файл, если `Output` данных пуст.</span><span class="sxs-lookup"><span data-stu-id="38170-2696">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="38170-2697">Тем не менее если `Output` данные списка `DBNull`, `Null` записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-2697">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="38170-2698">Для `Error` данные, выходные данные отображаются как `Error errorcode`.</span><span class="sxs-lookup"><span data-stu-id="38170-2698">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="38170-2699">`Error` Ключевое слово не переводится языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="38170-2699">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="38170-2700">Все данные, записываемые в файл с помощью `Print` соответствуют региональным международным стандартам; то есть данные правильно отформатирован с помощью соответствующего десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="38170-2700">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="38170-2701">Если пользователь хочет выходные данные для использования в нескольких языковых стандартов, `Write` следует использовать.</span><span class="sxs-lookup"><span data-stu-id="38170-2701">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="38170-2702">Запись в файл с помощью `Print` или `PrintLine` функции требуется `Write` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-2702">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="38170-2703">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="38170-2703">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2704">В этом примере используется `Print` и `PrintLine` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-2704">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-2705">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2705">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="38170-2706">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2706">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="38170-2707">Практическое руководство. Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="38170-2707">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-2708">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2708">Required.</span></span> <span data-ttu-id="38170-2709">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2709">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="38170-2710">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2710">Optional.</span></span> <span data-ttu-id="38170-2711">Ноль или больше выражений с разделителями-запятыми для записи в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-2711">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
<span data-ttu-id="38170-2712">Параметры аргумента <paramref name="Output" />:</span><span class="sxs-lookup"><span data-stu-id="38170-2712">The <paramref name="Output" /> argument settings are:</span></span> 
 <span data-ttu-id="38170-2713"><see langword="T:System.IO.IOException" />: Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2713"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="38170-2714"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> не существует.</span><span class="sxs-lookup"><span data-stu-id="38170-2714"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span></span></param>
        <summary><span data-ttu-id="38170-2715">Записывает отформатированные данные в последовательный файл.</span><span class="sxs-lookup"><span data-stu-id="38170-2715">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2716">`Print` И `PrintLine` функции предоставляются для обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2716">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="38170-2717">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2717">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="38170-2718">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="38170-2718">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="38170-2719">`Print` не включает символ перевода строки в конце строки; Тем не менее`PrintLine` содержит символ перевода строки.</span><span class="sxs-lookup"><span data-stu-id="38170-2719">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="38170-2720">Данные, записанные с помощью `Print` обычно считываются из файла с помощью `LineInput` или `Input`.</span><span class="sxs-lookup"><span data-stu-id="38170-2720">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="38170-2721">Если опустить `Output` для `PrintLine`, пустая строка выводится в файл; для `Print`, ничего не выводится.</span><span class="sxs-lookup"><span data-stu-id="38170-2721">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="38170-2722">Несколько выражений, разделенных запятыми, будут выровнены по границам табуляции, но смешивание запятые и `TAB` может привести к несогласованным результатам.</span><span class="sxs-lookup"><span data-stu-id="38170-2722">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="38170-2723">Для `Boolean` данных, либо `True` или `False` печати.</span><span class="sxs-lookup"><span data-stu-id="38170-2723">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="38170-2724">`True` И `False` ключевые слова не преобразуются, вне зависимости от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="38170-2724">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="38170-2725">Дата данные записываются в файл с помощью стандартных короткого формата даты формата, распознаваемого системой.</span><span class="sxs-lookup"><span data-stu-id="38170-2725">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="38170-2726">Когда дата или время отсутствует или ноль, только часть условии записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-2726">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="38170-2727">Ничего не записывается в файл, если `Output` данных пуст.</span><span class="sxs-lookup"><span data-stu-id="38170-2727">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="38170-2728">Тем не менее если `Output` данные списка `DBNull`, `Null` записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-2728">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="38170-2729">Для `Error` данные, выходные данные отображаются как `Error errorcode`.</span><span class="sxs-lookup"><span data-stu-id="38170-2729">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="38170-2730">`Error` Ключевое слово не переводится языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="38170-2730">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="38170-2731">Все данные, записываемые в файл с помощью `Print` соответствуют региональным международным стандартам; то есть данные правильно отформатирован с помощью соответствующего десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="38170-2731">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="38170-2732">Если пользователь хочет выходные данные для использования в нескольких языковых стандартов, `Write` следует использовать.</span><span class="sxs-lookup"><span data-stu-id="38170-2732">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="38170-2733">Запись в файл с помощью `Print` или `PrintLine` функции требуется `Write` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-2733">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="38170-2734">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="38170-2734">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2735">В этом примере используется `Print` и `PrintLine` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-2735">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-2736">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2736">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="38170-2737">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2737">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="38170-2738">Практическое руководство. Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="38170-2738">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath"><span data-ttu-id="38170-2739">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2739">Required.</span></span> <span data-ttu-id="38170-2740">Строковое выражение, указывающее имя и расположение существующего файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2740">A string expression that specifies the existing file name and location.</span></span> <span data-ttu-id="38170-2741">Выражение <paramref name="OldPath" /> может содержать имя каталога и метку диска для файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2741"><paramref name="OldPath" /> may include the directory, and drive, of the file.</span></span></param>
        <param name="NewPath"><span data-ttu-id="38170-2742">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2742">Required.</span></span> <span data-ttu-id="38170-2743">Строковое выражение, указывающее имя и расположение нового файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2743">A string expression that specifies the new file name and location.</span></span> <span data-ttu-id="38170-2744">Параметр <paramref name="NewPath" /> может содержать имя каталога и метку диска для нового местонахождения файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2744"><paramref name="NewPath" /> may include directory and drive of the destination location.</span></span> <span data-ttu-id="38170-2745">Имя файла, заданного параметром <paramref name="NewPath" /> не может быть именем существующего файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2745">The file name specified by <paramref name="NewPath" /> cannot already exist.</span></span></param>
        <summary><span data-ttu-id="38170-2746">Переименовывает файл или каталог на диске.</span><span class="sxs-lookup"><span data-stu-id="38170-2746">Renames a disk file or directory.</span></span> <span data-ttu-id="38170-2747">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="Rename" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2747">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span></span> <span data-ttu-id="38170-2748">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2748">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2749">`Rename` Функция переименовывает файл и перемещает ее в другой каталог, если это необходимо.</span><span class="sxs-lookup"><span data-stu-id="38170-2749">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="38170-2750">`Rename` Функции можно переместить файл на дисках, но его можно только переименовать существующий каталог, если оба `NewPath` и `OldPath` расположены на одном диске.</span><span class="sxs-lookup"><span data-stu-id="38170-2750">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="38170-2751">`Rename` не удается создать новый файл или каталог.</span><span class="sxs-lookup"><span data-stu-id="38170-2751">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="38170-2752">С помощью `Rename` функции к открытому файлу выводит сообщение об ошибке.</span><span class="sxs-lookup"><span data-stu-id="38170-2752">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="38170-2753">Необходимо закрыть файл перед его переименованием.</span><span class="sxs-lookup"><span data-stu-id="38170-2753">You must close an open file before renaming it.</span></span> <span data-ttu-id="38170-2754">`Rename` аргументы не могут содержать знак (\*) и подстановочные знаки одного знака (?).</span><span class="sxs-lookup"><span data-stu-id="38170-2754">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="38170-2755">При использовании `Rename` чтобы скопировать файл из незащищенное место в защищенном месте, в файле сохраняются менее ограниченные права.</span><span class="sxs-lookup"><span data-stu-id="38170-2755">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="38170-2756">Проверьте, чтобы убедиться в том, что вы не представляете возможную угрозу безопасности.</span><span class="sxs-lookup"><span data-stu-id="38170-2756">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2757">В этом примере используется `Rename` функции, чтобы переименовать файл.</span><span class="sxs-lookup"><span data-stu-id="38170-2757">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="38170-2758">Для целей этого примера предполагается, что каталоги, которые указаны в уже существуют.</span><span class="sxs-lookup"><span data-stu-id="38170-2758">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-2759">Недопустимый путь.</span><span class="sxs-lookup"><span data-stu-id="38170-2759">Path is invalid.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="38170-2760">Файл <paramref name="OldPath" /> не существует.</span><span class="sxs-lookup"><span data-stu-id="38170-2760"><paramref name="OldPath" /> file does not exist.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2761">Нельзя переименовать с указанием другого диска.</span><span class="sxs-lookup"><span data-stu-id="38170-2761">Cannot rename to different device.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md"><span data-ttu-id="38170-2762">Практическое руководство. Переименование файла в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2762">How to: Rename a File in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="38170-2763">Закрывает все файлы на диске, открытые функцией <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2763">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="38170-2764">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="Reset" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2764">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span></span> <span data-ttu-id="38170-2765">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2765">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2766">`Reset` Функция закрывает все активные файлы, открываемые `FileOpen` функцию и делает то же самое `FileClose()` без параметров.</span><span class="sxs-lookup"><span data-stu-id="38170-2766">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2767">В этом примере используется `Reset` функцию, чтобы закрыть все открытые файлы и записи на диск содержимое всех буферов файлов.</span><span class="sxs-lookup"><span data-stu-id="38170-2767">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="38170-2768">Обратите внимание на использование `Object` переменной `FileNumber` как строка и номером.</span><span class="sxs-lookup"><span data-stu-id="38170-2768">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md"><span data-ttu-id="38170-2769">Оператор End</span><span class="sxs-lookup"><span data-stu-id="38170-2769">End Statement</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="38170-2770">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2770">Required.</span></span> <span data-ttu-id="38170-2771">Строковое выражение, определяющее удаляемый каталог или папку.</span><span class="sxs-lookup"><span data-stu-id="38170-2771">A string expression that identifies the directory or folder to be removed.</span></span> <span data-ttu-id="38170-2772">Параметр <paramref name="Path" /> может содержать метку диска.</span><span class="sxs-lookup"><span data-stu-id="38170-2772"><paramref name="Path" /> can include the drive.</span></span> <span data-ttu-id="38170-2773">Если диск не указан, <see langword="RmDir" /> удаляет каталог на текущем диске.</span><span class="sxs-lookup"><span data-stu-id="38170-2773">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="38170-2774">Удаляет существующий каталог.</span><span class="sxs-lookup"><span data-stu-id="38170-2774">Removes an existing directory.</span></span> <span data-ttu-id="38170-2775">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="RmDir" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2775">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span></span> <span data-ttu-id="38170-2776">Дополнительные сведения см. в разделе <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2776">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2777">Произошла ошибка при попытке использовать `RmDir` на каталог, содержащий файлы.</span><span class="sxs-lookup"><span data-stu-id="38170-2777">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="38170-2778">Используйте `Kill` функции, чтобы удалить все файлы, прежде чем пытаться удалить каталог.</span><span class="sxs-lookup"><span data-stu-id="38170-2778">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2779">В этом примере используется `RmDir` функцию для удаления существующего каталога.</span><span class="sxs-lookup"><span data-stu-id="38170-2779">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-2780"><paramref name="Path" /> не указан или пуст.</span><span class="sxs-lookup"><span data-stu-id="38170-2780"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2781">Удаляемый каталог содержит файлы.</span><span class="sxs-lookup"><span data-stu-id="38170-2781">Target directory contains files.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="38170-2782">Каталог не существует.</span><span class="sxs-lookup"><span data-stu-id="38170-2782">Directory does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="38170-2783">Возвращает значение типа <see langword="Long" />, указывающее текущую позицию ввода-вывода в файле, открытом функцией <see langword="FileOpen" />, или устанавливает позицию для следующей операции ввода-вывода в файле, открытом с помощью функции <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2783">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="38170-2784">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="Seek" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2784">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="38170-2785">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2785">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-2786">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2786">Required.</span></span> <span data-ttu-id="38170-2787">Значение <see langword="Integer" />, содержащее допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2787">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="38170-2788">Возвращает значение типа <see langword="Long" />, указывающее текущую позицию ввода-вывода в файле, открытом функцией <see langword="FileOpen" />, или устанавливает позицию для следующей операции ввода-вывода в файле, открытом с помощью функции <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2788">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="38170-2789">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="Seek" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2789">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="38170-2790">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2790">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="38170-2791">Значение типа <see langword="Long" />, указывающее текущую позицию ввода-вывода в файле, открытом функцией <see langword="FileOpen" />, или устанавливает позицию для следующей операции ввода-вывода в файле, открытом с помощью функции <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2791">A <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2792">`Seek` Возвращает значение от 1 до 2 147 483 647 (эквивалентно 2 ^ 31 - 1) включительно.</span><span class="sxs-lookup"><span data-stu-id="38170-2792">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 - 1), inclusive.</span></span>  
  
 <span data-ttu-id="38170-2793">Ниже описаны возвращаемые значения для каждого режима доступа к файлу.</span><span class="sxs-lookup"><span data-stu-id="38170-2793">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="38170-2794">Режим</span><span class="sxs-lookup"><span data-stu-id="38170-2794">Mode</span></span>|<span data-ttu-id="38170-2795">Возвращаемое значение</span><span class="sxs-lookup"><span data-stu-id="38170-2795">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="38170-2796">Номер следующей записи, чтения или записи</span><span class="sxs-lookup"><span data-stu-id="38170-2796">Number of the next record read or written</span></span>|  
|<span data-ttu-id="38170-2797">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="38170-2797">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="38170-2798">Позиция байта, в которой возникает при следующей операции.</span><span class="sxs-lookup"><span data-stu-id="38170-2798">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="38170-2799">Первый байт в файле находится в позиции 1, второй байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-2799">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="38170-2800">В этом примере используется `Seek` функция, возвращающая текущую позицию в файле.</span><span class="sxs-lookup"><span data-stu-id="38170-2800">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="38170-2801">В этом примере предполагается `TestFile` — это файл, содержащий записи структуры `Record`.</span><span class="sxs-lookup"><span data-stu-id="38170-2801">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="38170-2802">Для открытия файлов в `Random` режиме `Seek` возвращает номер следующей записи.</span><span class="sxs-lookup"><span data-stu-id="38170-2802">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="38170-2803">Для файлов, открытых в режимах, отличных от `Random` режиме `Seek` возвращает позицию байта, в которой возникает при следующей операции.</span><span class="sxs-lookup"><span data-stu-id="38170-2803">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="38170-2804">Предположим, `TestFile` — это файл, содержащий несколько строк текста.</span><span class="sxs-lookup"><span data-stu-id="38170-2804">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="38170-2805">В этом примере используется `Seek` функции для установки позиции следующего чтения или записи в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-2805">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="38170-2806">Для файлов, открытых в режимах, отличных от `Random` режиме `Seek` устанавливает позицию байта, в которой возникает при следующей операции.</span><span class="sxs-lookup"><span data-stu-id="38170-2806">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="38170-2807">Предположим, `TestFile` — это файл, содержащий несколько строк текста.</span><span class="sxs-lookup"><span data-stu-id="38170-2807">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2808">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2808">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="38170-2809">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2809">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-2810">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2810">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-2811">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2811">Required.</span></span> <span data-ttu-id="38170-2812">Значение <see langword="Integer" />, содержащее допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2812">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <param name="Position"><span data-ttu-id="38170-2813">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2813">Required.</span></span> <span data-ttu-id="38170-2814">Число в диапазоне от 1 до 2 147 483 647 включительно, определяющее место следующей операции чтения/записи.</span><span class="sxs-lookup"><span data-stu-id="38170-2814">Number in the range 1-2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span></span></param>
        <summary><span data-ttu-id="38170-2815">Возвращает значение типа <see langword="Long" />, указывающее текущую позицию ввода-вывода в файле, открытом функцией <see langword="FileOpen" />, или устанавливает позицию для следующей операции ввода-вывода в файле, открытом с помощью функции <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2815">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="38170-2816">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="Seek" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2816">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="38170-2817">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2817">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2818">`Seek` Возвращает значение от 1 до 2 147 483 647 (эквивалентно 2 ^ 31 - 1) включительно.</span><span class="sxs-lookup"><span data-stu-id="38170-2818">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 - 1), inclusive.</span></span>  
  
 <span data-ttu-id="38170-2819">Ниже описаны возвращаемые значения для каждого режима доступа к файлу.</span><span class="sxs-lookup"><span data-stu-id="38170-2819">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="38170-2820">Режим</span><span class="sxs-lookup"><span data-stu-id="38170-2820">Mode</span></span>|<span data-ttu-id="38170-2821">Возвращаемое значение</span><span class="sxs-lookup"><span data-stu-id="38170-2821">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="38170-2822">Номер следующей записи, чтения или записи</span><span class="sxs-lookup"><span data-stu-id="38170-2822">Number of the next record read or written</span></span>|  
|<span data-ttu-id="38170-2823">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="38170-2823">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="38170-2824">Позиция байта, в которой возникает при следующей операции.</span><span class="sxs-lookup"><span data-stu-id="38170-2824">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="38170-2825">Первый байт в файле находится в позиции 1, второй байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="38170-2825">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="38170-2826">В этом примере используется `Seek` функция, возвращающая текущую позицию в файле.</span><span class="sxs-lookup"><span data-stu-id="38170-2826">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="38170-2827">В этом примере предполагается `TestFile` — это файл, содержащий записи структуры `Record`.</span><span class="sxs-lookup"><span data-stu-id="38170-2827">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="38170-2828">Для открытия файлов в `Random` режиме `Seek` возвращает номер следующей записи.</span><span class="sxs-lookup"><span data-stu-id="38170-2828">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="38170-2829">Для файлов, открытых в режимах, отличных от `Random` режиме `Seek` возвращает позицию байта, в которой возникает при следующей операции.</span><span class="sxs-lookup"><span data-stu-id="38170-2829">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="38170-2830">Предположим, `TestFile` — это файл, содержащий несколько строк текста.</span><span class="sxs-lookup"><span data-stu-id="38170-2830">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="38170-2831">В этом примере используется `Seek` функции для установки позиции следующего чтения или записи в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-2831">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="38170-2832">Для файлов, открытых в режимах, отличных от `Random` режиме `Seek` устанавливает позицию байта, в которой возникает при следующей операции.</span><span class="sxs-lookup"><span data-stu-id="38170-2832">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="38170-2833">Предположим, `TestFile` — это файл, содержащий несколько строк текста.</span><span class="sxs-lookup"><span data-stu-id="38170-2833">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2834">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2834">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="38170-2835">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2835">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="38170-2836">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2836">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="38170-2837">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2837">Required.</span></span> <span data-ttu-id="38170-2838">Строковое выражение, определяющее имя файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2838">A string expression that specifies a file name.</span></span> <span data-ttu-id="38170-2839"><paramref name="PathName" /> может включать каталог или папку, а также диск.</span><span class="sxs-lookup"><span data-stu-id="38170-2839"><paramref name="PathName" /> can include directory or folder, and drive.</span></span></param>
        <param name="Attributes"><span data-ttu-id="38170-2840">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2840">Required.</span></span> <span data-ttu-id="38170-2841">Константа или числовое выражение, сумма которого определяет атрибуты файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2841">Constant or numeric expression, whose sum specifies file attributes.</span></span></param>
        <summary><span data-ttu-id="38170-2842">Устанавливает атрибуты файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2842">Sets attribute information for a file.</span></span> <span data-ttu-id="38170-2843">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="SetAttr" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2843">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span></span> <span data-ttu-id="38170-2844">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2844">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2845">Ошибка времени выполнения возникает при попытке установить атрибуты для открытого файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2845">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="38170-2846">`Attributes` Используются значения перечисления аргументов следующим образом:</span><span class="sxs-lookup"><span data-stu-id="38170-2846">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="38170-2847">Значение</span><span class="sxs-lookup"><span data-stu-id="38170-2847">Value</span></span>|<span data-ttu-id="38170-2848">Константа</span><span class="sxs-lookup"><span data-stu-id="38170-2848">Constant</span></span>|<span data-ttu-id="38170-2849">Описание</span><span class="sxs-lookup"><span data-stu-id="38170-2849">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="38170-2850">Обычный (по умолчанию).</span><span class="sxs-lookup"><span data-stu-id="38170-2850">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="38170-2851">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="38170-2851">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="38170-2852">Скрытый.</span><span class="sxs-lookup"><span data-stu-id="38170-2852">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="38170-2853">Системный файл.</span><span class="sxs-lookup"><span data-stu-id="38170-2853">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="38170-2854">Метка тома</span><span class="sxs-lookup"><span data-stu-id="38170-2854">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="38170-2855">Каталог или папка.</span><span class="sxs-lookup"><span data-stu-id="38170-2855">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="38170-2856">Файл был изменен с момента создания последней резервной копии.</span><span class="sxs-lookup"><span data-stu-id="38170-2856">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="38170-2857">У файла другое имя.</span><span class="sxs-lookup"><span data-stu-id="38170-2857">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="38170-2858">Эти перечисления определены в языке Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="38170-2858">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="38170-2859">Имена можно использовать в любом месте в коде вместо фактических значений.</span><span class="sxs-lookup"><span data-stu-id="38170-2859">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2860">В этом примере используется `SetAttr` функцию для задания атрибутов файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2860">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38170-2861">Недопустимый тип <paramref name="Attribute" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2861"><paramref name="Attribute" /> type is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count"><span data-ttu-id="38170-2862">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2862">Required.</span></span> <span data-ttu-id="38170-2863">Число пробелов, вставляемых перед отображением или печатью очередного выражения в списке.</span><span class="sxs-lookup"><span data-stu-id="38170-2863">The number of spaces to insert before displaying or printing the next expression in a list.</span></span></param>
        <summary><span data-ttu-id="38170-2864">Используется с функцией <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span><span class="sxs-lookup"><span data-stu-id="38170-2864">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></summary>
        <returns><span data-ttu-id="38170-2865">Используется с функцией <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span><span class="sxs-lookup"><span data-stu-id="38170-2865">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2866">Если `Count` меньше ширины строки вывода, следующая позиция печати непосредственно следует за количество напечатанных пробелов.</span><span class="sxs-lookup"><span data-stu-id="38170-2866">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="38170-2867">Если`Count` больше, чем выводимой строки `SPC` вычисляет следующую позицию печати с помощью формулы:</span><span class="sxs-lookup"><span data-stu-id="38170-2867">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="38170-2868">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="38170-2868">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="38170-2869">Например, если текущая позиция печати равна 24, выводимой строки — 80, а `SPC(90)`, печать начнется с позиции 34 (текущая позиция печати + остаток от 90/80).</span><span class="sxs-lookup"><span data-stu-id="38170-2869">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="38170-2870">Если разница между текущей позицией печати и ширину строки вывода меньше, чем `Count` (или `Count` `Mod` *ширины*), `SPC` функция переходит в начало следующей строки и создает пробелы, равные `Count` -(*ширины* - *текущая_позиция_печати*).</span><span class="sxs-lookup"><span data-stu-id="38170-2870">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` - (*width* - *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38170-2871">Убедитесь, что столбцы таблицы достаточно широки разрешить длинные записи.</span><span class="sxs-lookup"><span data-stu-id="38170-2871">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2872">В этом примере используется `SPC` функции для установки позиции вывода в файле и в **вывода** окна.</span><span class="sxs-lookup"><span data-stu-id="38170-2872">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="38170-2873">Оператор Mod (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="38170-2873">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="38170-2874">Используется с функциями <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span><span class="sxs-lookup"><span data-stu-id="38170-2874">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="38170-2875">Используется с функциями <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span><span class="sxs-lookup"><span data-stu-id="38170-2875">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="38170-2876">Используется с функциями <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span><span class="sxs-lookup"><span data-stu-id="38170-2876">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2877">Если текущая позиция печати в текущей строке больше, чем `Column`, `TAB` пропускает равным значению столбца `Column` на следующую строку.</span><span class="sxs-lookup"><span data-stu-id="38170-2877">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="38170-2878">Если `Column` меньше 1, `TAB` перемещает позицию печати в столбец 1.</span><span class="sxs-lookup"><span data-stu-id="38170-2878">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="38170-2879">Если `Column` больше, чем выводимой строки `TAB` вычисляет следующую позицию печати с помощью формулы:</span><span class="sxs-lookup"><span data-stu-id="38170-2879">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="38170-2880">Mod ширина столбца</span><span class="sxs-lookup"><span data-stu-id="38170-2880">Column Mod width</span></span>  
  
 <span data-ttu-id="38170-2881">Например если *ширины* 80 и указать `TAB(90)`, печать начнется со столбца 10 (остаток от 90/80).</span><span class="sxs-lookup"><span data-stu-id="38170-2881">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="38170-2882">Если `Column` меньше, чем текущая позиция печати, печать начинается на следующей строке в позиции вычисляемой печати.</span><span class="sxs-lookup"><span data-stu-id="38170-2882">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="38170-2883">Если рассчитанная позиция печати больше, чем текущая позиция печати, печать начинается в рассчитанной позиции печати в той же строке.</span><span class="sxs-lookup"><span data-stu-id="38170-2883">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="38170-2884">Самая левая позиция печати строки вывода всегда равно 1.</span><span class="sxs-lookup"><span data-stu-id="38170-2884">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="38170-2885">При использовании `Print` или `PrintLine` функции для печати в файлы, позиция равна ширине выходного файла, который можно задать с помощью `FileWidth` функции.</span><span class="sxs-lookup"><span data-stu-id="38170-2885">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="38170-2886">`TAB` Функция также может использоваться с `WriteLine` функции.</span><span class="sxs-lookup"><span data-stu-id="38170-2886">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="38170-2887">Он не может использоваться с <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> или <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="38170-2887">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38170-2888">Убедитесь, что столбцы таблицы достаточно широки вместить длинные записи.</span><span class="sxs-lookup"><span data-stu-id="38170-2888">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2889">В этом примере используется `TAB` функции для установки позиции вывода в файле и в **вывода** окна.</span><span class="sxs-lookup"><span data-stu-id="38170-2889">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="38170-2890">Оператор Mod (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="38170-2890">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column"><span data-ttu-id="38170-2891">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-2891">Optional.</span></span> <span data-ttu-id="38170-2892">Номер столбца, в который помещается курсор перед отображением или печатью следующего выражения из списка.</span><span class="sxs-lookup"><span data-stu-id="38170-2892">The column number moved to before displaying or printing the next expression in a list.</span></span> <span data-ttu-id="38170-2893">Если этот параметр опущен, <see langword="TAB" /> перемещает положение курсора в начало следующей зоны печати.</span><span class="sxs-lookup"><span data-stu-id="38170-2893">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span></span></param>
        <summary><span data-ttu-id="38170-2894">Используется с функциями <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span><span class="sxs-lookup"><span data-stu-id="38170-2894">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="38170-2895">Используется с функциями <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span><span class="sxs-lookup"><span data-stu-id="38170-2895">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2896">Если текущая позиция печати в текущей строке больше, чем `Column`, `TAB` пропускает равным значению столбца `Column` на следующую строку.</span><span class="sxs-lookup"><span data-stu-id="38170-2896">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="38170-2897">Если `Column` меньше 1, `TAB` перемещает позицию печати в столбец 1.</span><span class="sxs-lookup"><span data-stu-id="38170-2897">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="38170-2898">Если `Column` больше, чем выводимой строки `TAB` вычисляет следующую позицию печати с помощью формулы:</span><span class="sxs-lookup"><span data-stu-id="38170-2898">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="38170-2899">Mod ширина столбца</span><span class="sxs-lookup"><span data-stu-id="38170-2899">Column Mod width</span></span>  
  
 <span data-ttu-id="38170-2900">Например если *ширины* 80 и указать `TAB(90)`, печать начнется со столбца 10 (остаток от 90/80).</span><span class="sxs-lookup"><span data-stu-id="38170-2900">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="38170-2901">Если `Column` меньше, чем текущая позиция печати, печать начинается на следующей строке в позиции вычисляемой печати.</span><span class="sxs-lookup"><span data-stu-id="38170-2901">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="38170-2902">Если рассчитанная позиция печати больше, чем текущая позиция печати, печать начинается в рассчитанной позиции печати в той же строке.</span><span class="sxs-lookup"><span data-stu-id="38170-2902">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="38170-2903">Самая левая позиция печати строки вывода всегда равно 1.</span><span class="sxs-lookup"><span data-stu-id="38170-2903">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="38170-2904">При использовании `Print` или `PrintLine` функции для печати в файлы, позиция равна ширине выходного файла, который можно задать с помощью `FileWidth` функции.</span><span class="sxs-lookup"><span data-stu-id="38170-2904">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="38170-2905">`TAB` Функция также может использоваться с `WriteLine` функции.</span><span class="sxs-lookup"><span data-stu-id="38170-2905">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="38170-2906">Он не может использоваться с <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> или <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="38170-2906">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38170-2907">Убедитесь, что столбцы таблицы достаточно широки вместить длинные записи.</span><span class="sxs-lookup"><span data-stu-id="38170-2907">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2908">В этом примере используется `TAB` функции для установки позиции вывода в файле и в **вывода** окна.</span><span class="sxs-lookup"><span data-stu-id="38170-2908">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="38170-2909">Оператор Mod (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="38170-2909">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="38170-2910">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="38170-2910">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="38170-2911">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2911">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="38170-2912">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2912">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-2913">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2913">Required.</span></span> <span data-ttu-id="38170-2914">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2914">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="38170-2915">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="38170-2915">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="38170-2916">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2916">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="38170-2917">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2917">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2918">`Lock` И `Unlock` функции используются в средах, где несколько процессов может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="38170-2918">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="38170-2919">`Lock` и `Unlock` функций всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="38170-2919">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="38170-2920">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="38170-2920">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="38170-2921">Если `Record`, или `FromRecord` и `ToRecord` являются не указан, будет иметь блокировку для всего файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2921">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="38170-2922">Если `Record` отдельно указано одну запись будет заблокирована или разблокирована.</span><span class="sxs-lookup"><span data-stu-id="38170-2922">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="38170-2923">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` влияют на весь файл, независимо от того, диапазон, указанный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="38170-2923">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2924">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="38170-2924">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="38170-2925">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="38170-2925">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2926">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2926">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-2927">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2927">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-2928">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2928">Required.</span></span> <span data-ttu-id="38170-2929">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2929">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="38170-2930">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-2930">Optional.</span></span> <span data-ttu-id="38170-2931">Номер единственной записи или единственного байта для блокировки или разблокировки.</span><span class="sxs-lookup"><span data-stu-id="38170-2931">Number of the only record or byte to lock or unlock</span></span></param>
        <summary><span data-ttu-id="38170-2932">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="38170-2932">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="38170-2933">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2933">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="38170-2934">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2934">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2935">`Lock` И `Unlock` функции используются в средах, где несколько процессов может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="38170-2935">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="38170-2936">`Lock` и `Unlock` функций всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="38170-2936">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="38170-2937">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="38170-2937">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="38170-2938">Если `Record`, или `FromRecord` и `ToRecord` являются не указан, будет иметь блокировку для всего файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2938">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="38170-2939">Если `Record` отдельно указано одну запись будет заблокирована или разблокирована.</span><span class="sxs-lookup"><span data-stu-id="38170-2939">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="38170-2940">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` влияют на весь файл, независимо от того, диапазон, указанный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="38170-2940">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2941">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="38170-2941">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="38170-2942">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="38170-2942">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2943">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2943">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-2944">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2944">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-2945">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2945">Required.</span></span> <span data-ttu-id="38170-2946">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2946">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="38170-2947">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-2947">Optional.</span></span> <span data-ttu-id="38170-2948">Номер первой записи или первого байта, начиная с которого файл открывается или закрывается для доступа.</span><span class="sxs-lookup"><span data-stu-id="38170-2948">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="38170-2949">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-2949">Optional.</span></span> <span data-ttu-id="38170-2950">Номер последней записи или последнего байта, которыми заканчивается часть файла, открытая или закрытая для доступа.</span><span class="sxs-lookup"><span data-stu-id="38170-2950">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="38170-2951">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="38170-2951">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="38170-2952">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2952">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="38170-2953">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2953">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2954">`Lock` И `Unlock` функции используются в средах, где несколько процессов может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="38170-2954">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="38170-2955">`Lock` и `Unlock` функций всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="38170-2955">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="38170-2956">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="38170-2956">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="38170-2957">Если `Record`, или `FromRecord` и `ToRecord` являются не указан, будет иметь блокировку для всего файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2957">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="38170-2958">Если `Record` отдельно указано одну запись будет заблокирована или разблокирована.</span><span class="sxs-lookup"><span data-stu-id="38170-2958">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="38170-2959">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` влияют на весь файл, независимо от того, диапазон, указанный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="38170-2959">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2960">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="38170-2960">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="38170-2961">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="38170-2961">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2962">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2962">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-2963">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2963">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-2964">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2964">Required.</span></span> <span data-ttu-id="38170-2965">Выражение <see langword="Integer" />, содержащее любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2965">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="38170-2966">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-2966">Optional.</span></span> <span data-ttu-id="38170-2967">Одно или несколько выражений с разделителями-запятыми, которые нужно записать в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-2967">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="38170-2968">Записывает данные в последовательный файл.</span><span class="sxs-lookup"><span data-stu-id="38170-2968">Writes data to a sequential file.</span></span> <span data-ttu-id="38170-2969">Данные, записанные с использованием <see langword="Write" />, обычно считываются с помощью <see langword="Input" />.</span><span class="sxs-lookup"><span data-stu-id="38170-2969">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-2970">`Write` И `WriteLine` функции предоставляются для обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2970">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="38170-2971">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-2971">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="38170-2972">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="38170-2972">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="38170-2973">Если опустить `Output`, пустая строка выводится в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-2973">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="38170-2974">Несколько выражений могут быть разделены запятыми.</span><span class="sxs-lookup"><span data-stu-id="38170-2974">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="38170-2975">В отличие от `Print` функции `Write` функция вставляет запятые между элементами и кавычки вокруг строки, так как они записаны в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-2975">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="38170-2976">Необходимо поместить явные разделители в списке.</span><span class="sxs-lookup"><span data-stu-id="38170-2976">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="38170-2977">Когда `Write` используется для записи данных в файл, только числовые `Boolean`, даты, значения null, и `Error` поддерживаются форматы данных.</span><span class="sxs-lookup"><span data-stu-id="38170-2977">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="38170-2978">Следующие универсальные предположения соблюдать, данные всегда могут быть прочитаны и правильно интерпретированы с помощью `Input`, независимо от языкового стандарта:</span><span class="sxs-lookup"><span data-stu-id="38170-2978">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="38170-2979">Числовые данные всегда записываются с использованием точки в качестве десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="38170-2979">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="38170-2980">Для `Boolean` данных, либо `#TRUE#` или `#FALSE#` печати.</span><span class="sxs-lookup"><span data-stu-id="38170-2980">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="38170-2981">`True` И `False` ключевые слова не преобразуются, вне зависимости от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="38170-2981">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="38170-2982">Дата записывается в файл, используя универсальный формат даты.</span><span class="sxs-lookup"><span data-stu-id="38170-2982">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="38170-2983">Когда дата или время отсутствует или ноль, только часть условии записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-2983">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="38170-2984">Ничего не записывается в файл, если `Output` данных пуст.</span><span class="sxs-lookup"><span data-stu-id="38170-2984">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="38170-2985">Тем не менее для пустых данных `#NULL#` записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-2985">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="38170-2986">Для `Error` данные, выходные данные отображаются как `#ERROR errorcode#`.</span><span class="sxs-lookup"><span data-stu-id="38170-2986">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="38170-2987">`Error` Ключевого слова не преобразуются, вне зависимости от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="38170-2987">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="38170-2988">`WriteLine` Вставляет символ новой строки (то есть перевода каретки и перевода строки, или `Chr(13) + Chr(10)`), после записи последнего символа `Output` к файлу.</span><span class="sxs-lookup"><span data-stu-id="38170-2988">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="38170-2989">Можно вставить кавычки в строке с помощью двойных кавычек, или «».</span><span class="sxs-lookup"><span data-stu-id="38170-2989">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="38170-2990">Например, примененная к объекту директива</span><span class="sxs-lookup"><span data-stu-id="38170-2990">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="38170-2991">Возвращает строку со значением `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="38170-2991">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="38170-2992">Запись в файл с помощью `Write` или `WriteLine` функции требуется `Append` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-2992">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="38170-2993">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="38170-2993">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-2994">В этом примере используется `Write` функции для записи необработанных данных в последовательный файл.</span><span class="sxs-lookup"><span data-stu-id="38170-2994">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="38170-2995">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="38170-2995">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-2996">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2996">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="38170-2997">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-2997">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="38170-2998">Практическое руководство. Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="38170-2998">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="38170-2999">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="38170-2999">Required.</span></span> <span data-ttu-id="38170-3000">Выражение <see langword="Integer" />, содержащее любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="38170-3000">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="38170-3001">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="38170-3001">Optional.</span></span> <span data-ttu-id="38170-3002">Одно или несколько выражений с разделителями-запятыми, которые нужно записать в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-3002">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="38170-3003">Записывает данные в последовательный файл.</span><span class="sxs-lookup"><span data-stu-id="38170-3003">Writes data to a sequential file.</span></span> <span data-ttu-id="38170-3004">Данные, записанные с использованием <see langword="Write" />, обычно считываются с помощью <see langword="Input" />.</span><span class="sxs-lookup"><span data-stu-id="38170-3004">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38170-3005">`Write` И `WriteLine` функции предоставляются для обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-3005">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="38170-3006">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="38170-3006">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="38170-3007">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="38170-3007">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="38170-3008">Если опустить `Output`, пустая строка выводится в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-3008">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="38170-3009">Несколько выражений могут быть разделены запятыми.</span><span class="sxs-lookup"><span data-stu-id="38170-3009">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="38170-3010">В отличие от `Print` функции `Write` функция вставляет запятые между элементами и кавычки вокруг строки, так как они записаны в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-3010">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="38170-3011">Необходимо поместить явные разделители в списке.</span><span class="sxs-lookup"><span data-stu-id="38170-3011">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="38170-3012">Когда `Write` используется для записи данных в файл, только числовые `Boolean`, даты, значения null, и `Error` поддерживаются форматы данных.</span><span class="sxs-lookup"><span data-stu-id="38170-3012">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="38170-3013">Следующие универсальные предположения соблюдать, данные всегда могут быть прочитаны и правильно интерпретированы с помощью `Input`, независимо от языкового стандарта:</span><span class="sxs-lookup"><span data-stu-id="38170-3013">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="38170-3014">Числовые данные всегда записываются с использованием точки в качестве десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="38170-3014">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="38170-3015">Для `Boolean` данных, либо `#TRUE#` или `#FALSE#` печати.</span><span class="sxs-lookup"><span data-stu-id="38170-3015">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="38170-3016">`True` И `False` ключевые слова не преобразуются, вне зависимости от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="38170-3016">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="38170-3017">Дата записывается в файл, используя универсальный формат даты.</span><span class="sxs-lookup"><span data-stu-id="38170-3017">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="38170-3018">Когда дата или время отсутствует или ноль, только часть условии записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="38170-3018">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="38170-3019">Ничего не записывается в файл, если `Output` данных пуст.</span><span class="sxs-lookup"><span data-stu-id="38170-3019">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="38170-3020">Тем не менее для пустых данных `#NULL#` записывается.</span><span class="sxs-lookup"><span data-stu-id="38170-3020">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="38170-3021">Для `Error` данные, выходные данные отображаются как `#ERROR errorcode#`.</span><span class="sxs-lookup"><span data-stu-id="38170-3021">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="38170-3022">`Error` Ключевого слова не преобразуются, вне зависимости от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="38170-3022">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="38170-3023">`WriteLine` Вставляет символ новой строки (то есть перевода каретки и перевода строки, или `Chr(13) + Chr(10)`), после записи последнего символа `Output` к файлу.</span><span class="sxs-lookup"><span data-stu-id="38170-3023">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="38170-3024">Можно вставить кавычки в строке с помощью двойных кавычек, или «».</span><span class="sxs-lookup"><span data-stu-id="38170-3024">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="38170-3025">Например, примененная к объекту директива</span><span class="sxs-lookup"><span data-stu-id="38170-3025">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="38170-3026">Возвращает строку со значением `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="38170-3026">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="38170-3027">Запись в файл с помощью `Write` или `WriteLine` функции требуется `Append` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="38170-3027">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="38170-3028">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="38170-3028">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38170-3029">В этом примере используется `Write` функции для записи необработанных данных в последовательный файл.</span><span class="sxs-lookup"><span data-stu-id="38170-3029">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="38170-3030">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-3030">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="38170-3031">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="38170-3031">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="38170-3032">Практическое руководство. Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="38170-3032">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>