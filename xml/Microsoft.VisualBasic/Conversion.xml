<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata><Meta Name="ms.openlocfilehash" Value="093db67cb3c739ef9d2f91f8d2e98f666d35387b" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70614476" /></Metadata><TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>В модуле <see langword="Conversion" /> содержатся процедуры, используемые для выполнения различных операций преобразования.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот модуль поддерживает ключевые слова языка Visual Basic и элементы библиотеки времени выполнения, которые преобразуют десятичные числа в другие типы, числа в строки, строки в числа и один тип данных в другой.  
  
   
  
## Examples  
 В этом примере `Hex` функция используется для возврата шестнадцатеричного значения числа.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Сводка по преобразованию</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Ключевые слова (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic элементов библиотеки времени выполнения</related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="TargetType" Type="System.Type" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Преобразуемый объект.</param>
        <param name="TargetType">Тип данных, в который требуется преобразовать объект.</param>
        <summary>Преобразовывает объект в указанный тип.</summary>
        <returns>Объект, тип которого во время выполнения является запрошенным типом целевого объекта.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод преобразует объект, переданный в `Expression` качестве параметра, в тип, заданный `TargetType` параметром. `CTypeDynamic` Если объект является динамическим объектом, `CTypeDynamic` метод применяет доступные динамические преобразования.  
  
 `CTypeDynamic` Метод применяет динамические преобразования в соответствии с семантикой преобразования, определенной самим объектом. Если динамический объект наследует от <xref:System.Dynamic.DynamicObject> `CTypeDynamic` , метод сначала пытается выполнить преобразование, используя определяемое пользователем статическое преобразование. Если определяемое пользователем статическое преобразование завершается неудачей `CTypeDynamic` , метод пытается выполнить преобразование с помощью динамических преобразований. Если динамический объект реализует <xref:System.Dynamic.IDynamicMetaObjectProvider> `CTypeDynamic` , метод предоставляет приоритет для динамических преобразований по определяемым пользователем статическим преобразованиям.  
  
   
  
## Examples  
 В следующем примере `CTypeDynamic` метод используется для преобразования динамического объекта в строку с помощью преобразования, определенного динамическим объектом.  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">Работа с динамическими объектами (Visual Basic)</related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">Пошаговое руководство. Создание и использование динамических объектов (C# и Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">Тип данных, в который требуется преобразовать объект.</typeparam>
        <param name="Expression">Преобразуемый объект.</param>
        <summary>Преобразует объект в указанный универсальный тип.</summary>
        <returns>Объект со статической типизацией, имеющий запрошенный универсальный тип.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод преобразует объект, переданный в `Expression` качестве параметра, в тип, заданный типом универсального параметра. `CTypeDynamic` Если объект является динамическим объектом, `CTypeDynamic` метод применяет доступные динамические преобразования.  
  
 `CTypeDynamic` Метод применяет динамические преобразования в соответствии с семантикой преобразования, определенной самим объектом. Если динамический объект наследует от <xref:System.Dynamic.DynamicObject> `CTypeDynamic` , метод сначала пытается выполнить преобразование, используя определяемое пользователем статическое преобразование. Если определяемое пользователем статическое преобразование завершается неудачей `CTypeDynamic` , метод пытается выполнить преобразование с помощью динамических преобразований. Если динамический объект реализует <xref:System.Dynamic.IDynamicMetaObjectProvider> `CTypeDynamic` , метод предоставляет приоритет для динамических преобразований по определяемым пользователем статическим преобразованиям.  
  
   
  
## Examples  
 В следующем примере `CTypeDynamic` метод используется для преобразования динамического объекта в строку с помощью преобразования, определенного динамическим объектом.  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">Работа с динамическими объектами (Visual Basic)</related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">Пошаговое руководство. Создание и использование динамических объектов (C# и Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает сообщение об ошибке, соответствующее данному номеру ошибки.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает сообщение об ошибке, соответствующее данному номеру ошибки.</summary>
        <returns>Сообщение об ошибке, соответствующее самой последней ошибке времени выполнения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Функция проверяет параметры `Err` свойств объекта, чтобы определить самую последнюю ошибку времени выполнения. `ErrorToString` Возвращаемое значение `ErrorToString` функции соответствует `Description` свойству `Err` объекта. Если ошибка времени выполнения не возникла, `ErrorToString` возвращает строку нулевой длины ("").  
  
 В Visual Basic версии 6,0 и более ранних эта функция была предоставлена `Error` функцией.  
  
   
  
## Examples  
 В следующем коде `ErrorToString` функция используется для вывода сообщений об ошибках, соответствующих указанным номерам ошибок.  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ErrorNumber" /> выходит за пределы допустимого диапазона.</exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">Необязательный параметр. Любой допустимый номер ошибки.</param>
        <summary>Возвращает сообщение об ошибке, соответствующее данному номеру ошибки.</summary>
        <returns>Сообщение об ошибке, соответствующее данному номеру ошибки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Функция проверяет параметры `Err` свойств объекта, чтобы определить самую последнюю ошибку времени выполнения. `ErrorToString` Возвращаемое значение `ErrorToString` функции соответствует `Description` свойству `Err` объекта. Если `ErrorNumber` является допустимым номером ошибки, но не определен, `ErrorToString` возвращает строку `"Application-defined or object-defined error."` , если `ErrorNumber` недопустимо, возникает ошибка. Если `ErrorNumber` параметр не указан, возвращается сообщение, соответствующее самой последней ошибке времени выполнения. Если ни одна из ошибок времени выполнения не возникла или `ErrorNumber` равно 0, `ErrorToString` возвращает строку нулевой длины ("").  
  
 В Visual Basic версии 6,0 и более ранних эта функция была предоставлена `Error` функцией.  
  
   
  
## Examples  
 В следующем коде `ErrorToString` функция используется для вывода сообщений об ошибках, соответствующих указанным номерам ошибок.  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ErrorNumber" /> выходит за пределы допустимого диапазона.</exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает целую часть числа.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Число типа <see langword="Decimal" /> или любое допустимое числовое выражение.</param>
        <summary>Возвращает целую часть числа.</summary>
        <returns>Целая часть числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обе функции `Fix` `Number` и удаляют дробную часть и возвращают результирующее целочисленное значение. `Int`  
  
 Различие между `Int` функциями и `Fix` заключается в том, `Number` что если имеет `Int` отрицательное значение, возвращает `Fix` первое отрицательное целое `Number`число, которое меньше или равно, тогда как возвращает первое отрицательное целое число. больше или равно `Number`. Например, `Int` преобразует-8,4 в-9 и `Fix` преобразует-8,4 в-8.  
  
 `Fix(number)`эквивалентно`Sign(number) * Int(Abs(number)).`  
  
## Examples  
 В этом примере показано, `Int` как `Fix` функции и возвращают целочисленные части чисел. В случае отрицательного числового аргумента `Int` функция возвращает первое отрицательное целое число, которое меньше или равно числу `Fix` ; функция возвращает первое отрицательное целое число, которое больше или равно числу. В следующем примере необходимо указать `Option Strict Off` , так как неявное преобразование из типа `Integer` `Double` в тип не допускается `Option Strict On`в следующих условиях:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 `CInt` Функцию можно использовать для явного преобразования других типов данных в тип `Integer` с помощью `Option Strict Off`. `CInt` Однако округляет до ближайшего целого числа вместо усечения дробной части чисел. Например:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 `CInt` Функцию можно использовать для результата `Fix` вызова функции или `Int` , чтобы выполнить явное преобразование в целое число без округления. Например:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Дополнительные сведения о см `CInt`. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Число не указано.</exception>
        <exception cref="T:System.ArgumentException">Число не является числовым типом.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Сводка по математическим функциям</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Математические функции (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Сводка по преобразованию</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Число типа <see langword="Double" /> или любое допустимое числовое выражение.</param>
        <summary>Возвращает целую часть числа.</summary>
        <returns>Целая часть числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обе функции `Fix` `Number` и удаляют дробную часть и возвращают результирующее целочисленное значение. `Int`  
  
 Различие между `Int` функциями и `Fix` заключается в том, `Number` что если имеет `Int` отрицательное значение, возвращает `Fix` первое отрицательное целое `Number`число, которое меньше или равно, тогда как возвращает первое отрицательное целое число. больше или равно `Number`. Например, `Int` преобразует-8,4 в-9 и `Fix` преобразует-8,4 в-8.  
  
 `Fix(number)`эквивалентно`Sign(number) * Int(Abs(number)).`  

Начиная с Visual Basic 15,8, преобразование `Double`производительности в целое число оптимизируется, если передать значение, возвращаемое `Fix` методом, в любую из [целочисленных функций](~/docs/visual-basic/language-reference/functions/conversion-functions.md) `Double` преобразования или если возвращенное значение by `Fix` неявно преобразуется в целое число с [параметром Option](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) , `Off`равным. Эта оптимизация позволяет коду выполняться быстрее — до двух раз быстрее для кода, который выполняет большое количество преобразований в целочисленные типы. В следующем примере показано такое Оптимизированное преобразование:

```vb
Dim d As Double = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
```  
  
## Examples  
 В этом примере показано, `Int` как `Fix` функции и возвращают целочисленные части чисел. В случае отрицательного числового аргумента `Int` функция возвращает первое отрицательное целое число, которое меньше или равно числу `Fix` ; функция возвращает первое отрицательное целое число, которое больше или равно числу. В следующем примере необходимо указать `Option Strict Off` , так как неявное преобразование из типа `Integer` `Double` в тип не допускается `Option Strict On`в следующих условиях:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 `CInt` Функцию можно использовать для явного преобразования других типов данных в тип `Integer` с помощью `Option Strict Off`. `CInt` Однако округляет до ближайшего целого числа вместо усечения дробной части чисел. Например:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 `CInt` Функцию можно использовать для результата `Fix` вызова функции или `Int` , чтобы выполнить явное преобразование в целое число без округления. Например:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Дополнительные сведения о см `CInt`. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Число не указано.</exception>
        <exception cref="T:System.ArgumentException">Число не является числовым типом.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Сводка по математическим функциям</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Математические функции (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Сводка по преобразованию</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Число типа <see langword="Short" /> или любое допустимое числовое выражение.</param>
        <summary>Возвращает целую часть числа.</summary>
        <returns>Целая часть числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обе функции `Fix` `Number` и удаляют дробную часть и возвращают результирующее целочисленное значение. `Int`  
  
 Различие между `Int` функциями и `Fix` заключается в том, `Number` что если имеет `Int` отрицательное значение, возвращает `Fix` первое отрицательное целое `Number`число, которое меньше или равно, тогда как возвращает первое отрицательное целое число. больше или равно `Number`. Например, `Int` преобразует-8,4 в-9 и `Fix` преобразует-8,4 в-8.  
  
 `Fix(number)`эквивалентно`Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 В этом примере показано, `Int` как `Fix` функции и возвращают целочисленные части чисел. В случае отрицательного числового аргумента `Int` функция возвращает первое отрицательное целое число, которое меньше или равно числу `Fix` ; функция возвращает первое отрицательное целое число, которое больше или равно числу. В следующем примере необходимо указать `Option Strict Off` , так как неявное преобразование из типа `Integer` `Double` в тип не допускается `Option Strict On`в следующих условиях:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 `CInt` Функцию можно использовать для явного преобразования других типов данных в тип `Integer` с помощью `Option Strict Off`. `CInt` Однако округляет до ближайшего целого числа вместо усечения дробной части чисел. Например:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 `CInt` Функцию можно использовать для результата `Fix` вызова функции или `Int` , чтобы выполнить явное преобразование в целое число без округления. Например:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Дополнительные сведения о см `CInt`. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Число не указано.</exception>
        <exception cref="T:System.ArgumentException">Число не является числовым типом.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Сводка по математическим функциям</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Математические функции (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Сводка по преобразованию</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Число типа <see langword="Integer" /> или любое допустимое числовое выражение.</param>
        <summary>Возвращает целую часть числа.</summary>
        <returns>Целая часть числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обе функции `Fix` `Number` и удаляют дробную часть и возвращают результирующее целочисленное значение. `Int`  
  
 Различие между `Int` функциями и `Fix` заключается в том, `Number` что если имеет `Int` отрицательное значение, возвращает `Fix` первое отрицательное целое `Number`число, которое меньше или равно, тогда как возвращает первое отрицательное целое число. больше или равно `Number`. Например, `Int` преобразует-8,4 в-9 и `Fix` преобразует-8,4 в-8.  
  
 `Fix(number)`эквивалентно`Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 В этом примере показано, `Int` как `Fix` функции и возвращают целочисленные части чисел. В случае отрицательного числового аргумента `Int` функция возвращает первое отрицательное целое число, которое меньше или равно числу `Fix` ; функция возвращает первое отрицательное целое число, которое больше или равно числу. В следующем примере необходимо указать `Option Strict Off` , так как неявное преобразование из типа `Integer` `Double` в тип не допускается `Option Strict On`в следующих условиях:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 `CInt` Функцию можно использовать для явного преобразования других типов данных в тип `Integer` с помощью `Option Strict Off`. `CInt` Однако округляет до ближайшего целого числа вместо усечения дробной части чисел. Например:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 `CInt` Функцию можно использовать для результата `Fix` вызова функции или `Int` , чтобы выполнить явное преобразование в целое число без округления. Например:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Дополнительные сведения о см `CInt`. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Число не указано.</exception>
        <exception cref="T:System.ArgumentException">Число не является числовым типом.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Сводка по математическим функциям</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Математические функции (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Сводка по преобразованию</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Число типа <see langword="Long" /> или любое допустимое числовое выражение.</param>
        <summary>Возвращает целую часть числа.</summary>
        <returns>Целая часть числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обе функции `Fix` `Number` и удаляют дробную часть и возвращают результирующее целочисленное значение. `Int`  
  
 Различие между `Int` функциями и `Fix` заключается в том, `Number` что если имеет `Int` отрицательное значение, возвращает `Fix` первое отрицательное целое `Number`число, которое меньше или равно, тогда как возвращает первое отрицательное целое число. больше или равно `Number`. Например, `Int` преобразует-8,4 в-9 и `Fix` преобразует-8,4 в-8.  
  
 `Fix(number)`эквивалентно`Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 В этом примере показано, `Int` как `Fix` функции и возвращают целочисленные части чисел. В случае отрицательного числового аргумента `Int` функция возвращает первое отрицательное целое число, которое меньше или равно числу `Fix` ; функция возвращает первое отрицательное целое число, которое больше или равно числу. В следующем примере необходимо указать `Option Strict Off` , так как неявное преобразование из типа `Integer` `Double` в тип не допускается `Option Strict On`в следующих условиях:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 `CInt` Функцию можно использовать для явного преобразования других типов данных в тип `Integer` с помощью `Option Strict Off`. `CInt` Однако округляет до ближайшего целого числа вместо усечения дробной части чисел. Например:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 `CInt` Функцию можно использовать для результата `Fix` вызова функции или `Int` , чтобы выполнить явное преобразование в целое число без округления. Например:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Дополнительные сведения о см `CInt`. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Число не указано.</exception>
        <exception cref="T:System.ArgumentException">Число не является числовым типом.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Сводка по математическим функциям</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Математические функции (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Сводка по преобразованию</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Число типа <see langword="Object" /> или любое допустимое числовое выражение. Если параметр <paramref name="Number" /> имеет значение <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</param>
        <summary>Возвращает целую часть числа.</summary>
        <returns>Целая часть числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обе функции `Fix` `Number` и удаляют дробную часть и возвращают результирующее целочисленное значение. `Int`  
  
 Различие между `Int` функциями и `Fix` заключается в том, `Number` что если имеет `Int` отрицательное значение, возвращает `Fix` первое отрицательное целое `Number`число, которое меньше или равно, тогда как возвращает первое отрицательное целое число. больше или равно `Number`. Например, `Int` преобразует-8,4 в-9 и `Fix` преобразует-8,4 в-8.  
  
 `Fix(number)`эквивалентно`Sign(number) * Int(Abs(number)).`  

Начиная с `Number` Visual Basic 15,8, если аргумент является объектом, тип среды выполнения которого — `Double` или `Single`, то производительность преобразования с плавающей точкой в целое оптимизирована, `Fix` если передать значение, возвращенное для любой из [целочисленных функций преобразования](~/docs/visual-basic/language-reference/functions/conversion-functions.md)или, если значение, возвращаемое функцией `Fix` , автоматически преобразуется в целое число с [параметром Option](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) , равным OFF. Эта оптимизация позволяет коду выполняться быстрее — до двух раз быстрее для кода, который выполняет большое количество преобразований в целочисленные типы. Например:

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```     
  
## Examples  
 В этом примере показано, `Int` как `Fix` функции и возвращают целочисленные части чисел. В случае отрицательного числового аргумента `Int` функция возвращает первое отрицательное целое число, которое меньше или равно числу `Fix` ; функция возвращает первое отрицательное целое число, которое больше или равно числу. В следующем примере необходимо указать `Option Strict Off` , так как неявное преобразование из типа `Integer` `Double` в тип не допускается `Option Strict On`в следующих условиях:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 `CInt` Функцию можно использовать для явного преобразования других типов данных в тип `Integer` с помощью `Option Strict Off`. `CInt` Однако округляет до ближайшего целого числа вместо усечения дробной части чисел. Например:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 `CInt` Функцию можно использовать для результата `Fix` вызова функции или `Int` , чтобы выполнить явное преобразование в целое число без округления. Например:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Дополнительные сведения о см `CInt`. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Число не указано.</exception>
        <exception cref="T:System.ArgumentException">Число не является числовым типом.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Сводка по математическим функциям</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Математические функции (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Сводка по преобразованию</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Число типа <see langword="Single" /> или любое допустимое числовое выражение.</param>
        <summary>Возвращает целую часть числа.</summary>
        <returns>Целая часть числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обе функции `Fix` `Number` и удаляют дробную часть и возвращают результирующее целочисленное значение. `Int`  
  
 Различие между `Int` функциями и `Fix` заключается в том, `Number` что если имеет `Int` отрицательное значение, возвращает `Fix` первое отрицательное целое `Number`число, которое меньше или равно, тогда как возвращает первое отрицательное целое число. больше или равно `Number`. Например, `Int` преобразует-8,4 в-9 и `Fix` преобразует-8,4 в-8.  
  
 `Fix(number)`эквивалентно`Sign(number) * Int(Abs(number)).`  
  
Начиная с Visual Basic 15,8, преобразование `Single`производительности в целое число оптимизируется, если передать значение, возвращаемое `Fix` методом, в любую из [целочисленных функций](~/docs/visual-basic/language-reference/functions/conversion-functions.md) `Single` преобразования или если возвращенное значение Функция `Fix` by автоматически преобразуется в целое число с [параметром Option](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) , равным OFF. Эта оптимизация позволяет коду выполняться быстрее — до двух раз быстрее для кода, который выполняет большое количество преобразований в целочисленные типы. В следующем примере показано такое Оптимизированное преобразование:
   
```vb
Dim s As Single = 173.7619
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```

## Examples  
 В этом примере показано, `Int` как `Fix` функции и возвращают целочисленные части чисел. В случае отрицательного числового аргумента `Int` функция возвращает первое отрицательное целое число, которое меньше или равно числу `Fix` ; функция возвращает первое отрицательное целое число, которое больше или равно числу. В следующем примере необходимо указать `Option Strict Off` , так как неявное преобразование из типа `Integer` `Double` в тип не допускается `Option Strict On`в следующих условиях:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 `CInt` Функцию можно использовать для явного преобразования других типов данных в тип `Integer` с помощью `Option Strict Off`. `CInt` Однако округляет до ближайшего целого числа вместо усечения дробной части чисел. Например:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 `CInt` Функцию можно использовать для результата `Fix` вызова функции или `Int` , чтобы выполнить явное преобразование в целое число без округления. Например:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Дополнительные сведения о см `CInt`. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Число не указано.</exception>
        <exception cref="T:System.ArgumentException">Число не является числовым типом.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Сводка по математическим функциям</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Математические функции (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Сводка по преобразованию</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает строку, представляющую шестнадцатеричное значение числа.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Любое допустимое числовое выражение или выражение типа <see langword="String" />.</param>
        <summary>Возвращает строку, представляющую шестнадцатеричное значение числа.</summary>
        <returns>Строка, представляющая шестнадцатеричное значение числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.  
  
|Если `Number` имеет значение|Шестнадцатеричные возвраты|  
|-|-|  
|Empty|Ноль (0)|  
|Любое числовое значение|До шестнадцати шестнадцатеричных символов|  
  
 Шестнадцатеричные числа можно представлять непосредственно, перед числами в правильном диапазоне с `&H`. Например, `&H10` представляет десятичное число 16 в шестнадцатеричной нотации.  
  
   
  
## Examples  
 В этом примере `Hex` функция используется для возврата шестнадцатеричного значения числа.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> не задан.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> не относится к числовому типу.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Практическое руководство. Преобразование шестнадцатеричных строк в числа</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Любое допустимое числовое выражение или выражение типа <see langword="String" />.</param>
        <summary>Возвращает строку, представляющую шестнадцатеричное значение числа.</summary>
        <returns>Строка, представляющая шестнадцатеричное значение числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.  
  
|Если `Number` имеет значение|Шестнадцатеричные возвраты|  
|-|-|  
|Empty|Ноль (0)|  
|Любое числовое значение|До шестнадцати шестнадцатеричных символов|  
  
 Шестнадцатеричные числа можно представлять непосредственно, перед числами в правильном диапазоне с `&H`. Например, `&H10` представляет десятичное число 16 в шестнадцатеричной нотации.  
  
   
  
## Examples  
 В этом примере `Hex` функция используется для возврата шестнадцатеричного значения числа.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> не задан.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> не относится к числовому типу.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Практическое руководство. Преобразование шестнадцатеричных строк в числа</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Любое допустимое числовое выражение или выражение типа <see langword="String" />.</param>
        <summary>Возвращает строку, представляющую шестнадцатеричное значение числа.</summary>
        <returns>Строка, представляющая шестнадцатеричное значение числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.  
  
|Если `Number` имеет значение|Шестнадцатеричные возвраты|  
|-|-|  
|Empty|Ноль (0)|  
|Любое числовое значение|До шестнадцати шестнадцатеричных символов|  
  
 Шестнадцатеричные числа можно представлять непосредственно, перед числами в правильном диапазоне с `&H`. Например, `&H10` представляет десятичное число 16 в шестнадцатеричной нотации.  
  
   
  
## Examples  
 В этом примере `Hex` функция используется для возврата шестнадцатеричного значения числа.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> не задан.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> не относится к числовому типу.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Практическое руководство. Преобразование шестнадцатеричных строк в числа</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Любое допустимое числовое выражение или выражение типа <see langword="String" />.</param>
        <summary>Возвращает строку, представляющую шестнадцатеричное значение числа.</summary>
        <returns>Строка, представляющая шестнадцатеричное значение числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.  
  
|Если `Number` имеет значение|Шестнадцатеричные возвраты|  
|-|-|  
|Empty|Ноль (0)|  
|Любое числовое значение|До шестнадцати шестнадцатеричных символов|  
  
 Шестнадцатеричные числа можно представлять непосредственно, перед числами в правильном диапазоне с `&H`. Например, `&H10` представляет десятичное число 16 в шестнадцатеричной нотации.  
  
   
  
## Examples  
 В этом примере `Hex` функция используется для возврата шестнадцатеричного значения числа.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> не задан.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> не относится к числовому типу.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Практическое руководство. Преобразование шестнадцатеричных строк в числа</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Любое допустимое числовое выражение или выражение типа <see langword="String" />.</param>
        <summary>Возвращает строку, представляющую шестнадцатеричное значение числа.</summary>
        <returns>Строка, представляющая шестнадцатеричное значение числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.  
  
|Если `Number` имеет значение|Шестнадцатеричные возвраты|  
|-|-|  
|Empty|Ноль (0)|  
|Любое числовое значение|До шестнадцати шестнадцатеричных символов|  
  
 Шестнадцатеричные числа можно представлять непосредственно, перед числами в правильном диапазоне с `&H`. Например, `&H10` представляет десятичное число 16 в шестнадцатеричной нотации.  
  
   
  
## Examples  
 В этом примере `Hex` функция используется для возврата шестнадцатеричного значения числа.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> не задан.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> не относится к числовому типу.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Практическое руководство. Преобразование шестнадцатеричных строк в числа</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Любое допустимое числовое выражение или выражение типа <see langword="String" />.</param>
        <summary>Возвращает строку, представляющую шестнадцатеричное значение числа.</summary>
        <returns>Строка, представляющая шестнадцатеричное значение числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.  
  
|Если `Number` имеет значение|Шестнадцатеричные возвраты|  
|-|-|  
|Empty|Ноль (0)|  
|Любое числовое значение|До шестнадцати шестнадцатеричных символов|  
  
 Шестнадцатеричные числа можно представлять непосредственно, перед числами в правильном диапазоне с `&H`. Например, `&H10` представляет десятичное число 16 в шестнадцатеричной нотации.  
  
   
  
## Examples  
 В этом примере `Hex` функция используется для возврата шестнадцатеричного значения числа.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> не задан.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> не относится к числовому типу.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Практическое руководство. Преобразование шестнадцатеричных строк в числа</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Любое допустимое числовое выражение или выражение типа <see langword="String" />.</param>
        <summary>Возвращает строку, представляющую шестнадцатеричное значение числа.</summary>
        <returns>Строка, представляющая шестнадцатеричное значение числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.  
  
|Если `Number` имеет значение|Шестнадцатеричные возвраты|  
|-|-|  
|Empty|Ноль (0)|  
|Любое числовое значение|До шестнадцати шестнадцатеричных символов|  
  
 Шестнадцатеричные числа можно представлять непосредственно, перед числами в правильном диапазоне с `&H`. Например, `&H10` представляет десятичное число 16 в шестнадцатеричной нотации.  
  
   
  
## Examples  
 В этом примере `Hex` функция используется для возврата шестнадцатеричного значения числа.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> не задан.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> не относится к числовому типу.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Практическое руководство. Преобразование шестнадцатеричных строк в числа</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Любое допустимое числовое выражение или выражение типа <see langword="String" />.</param>
        <summary>Возвращает строку, представляющую шестнадцатеричное значение числа.</summary>
        <returns>Строка, представляющая шестнадцатеричное значение числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.  
  
|Если `Number` имеет значение|Шестнадцатеричные возвраты|  
|-|-|  
|Empty|Ноль (0)|  
|Любое числовое значение|До шестнадцати шестнадцатеричных символов|  
  
 Шестнадцатеричные числа можно представлять непосредственно, перед числами в правильном диапазоне с `&H`. Например, `&H10` представляет десятичное число 16 в шестнадцатеричной нотации.  
  
   
  
## Examples  
 В этом примере `Hex` функция используется для возврата шестнадцатеричного значения числа.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> не задан.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> не относится к числовому типу.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Практическое руководство. Преобразование шестнадцатеричных строк в числа</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Любое допустимое числовое выражение или выражение типа <see langword="String" />.</param>
        <summary>Возвращает строку, представляющую шестнадцатеричное значение числа.</summary>
        <returns>Строка, представляющая шестнадцатеричное значение числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.  
  
|Если `Number` имеет значение|Шестнадцатеричные возвраты|  
|-|-|  
|Empty|Ноль (0)|  
|Любое числовое значение|До шестнадцати шестнадцатеричных символов|  
  
 Шестнадцатеричные числа можно представлять непосредственно, перед числами в правильном диапазоне с `&H`. Например, `&H10` представляет десятичное число 16 в шестнадцатеричной нотации.  
  
   
  
## Examples  
 В этом примере `Hex` функция используется для возврата шестнадцатеричного значения числа.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> не задан.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> не относится к числовому типу.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Практическое руководство. Преобразование шестнадцатеричных строк в числа</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает целую часть числа.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Число типа <see langword="Decimal" /> или любое допустимое числовое выражение.</param>
        <summary>Возвращает целую часть числа.</summary>
        <returns>Целая часть числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обе функции `Fix` `Number` и удаляют дробную часть и возвращают результирующее целочисленное значение. `Int`  
  
 Различие между `Int` функциями и `Fix` заключается в том, `Number` что если имеет `Int` отрицательное значение, возвращает `Fix` первое отрицательное целое `Number`число, которое меньше или равно, тогда как возвращает первое отрицательное целое число. больше или равно `Number`. Например, `Int` преобразует-8,4 в-9 и `Fix` преобразует-8,4 в-8.  
  
 `Fix(number)`эквивалентно`Sign(number) * Int(Abs(number)).`  
  
## Examples  
 В этом примере показано, `Int` как `Fix` функции и возвращают целочисленные части чисел. В случае отрицательного числового аргумента `Int` функция возвращает первое отрицательное целое число, которое меньше или равно числу `Fix` ; функция возвращает первое отрицательное целое число, которое больше или равно числу. В следующем примере необходимо указать `Option Strict Off` , так как неявное преобразование из типа `Integer` `Double` в тип не допускается `Option Strict On`в следующих условиях:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 `CInt` Функцию можно использовать для явного преобразования других типов данных в тип `Integer` с помощью `Option Strict Off`. `CInt` Однако округляет до ближайшего целого числа вместо усечения дробной части чисел. Например:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 `CInt` Функцию можно использовать для результата `Fix` вызова функции или `Int` , чтобы выполнить явное преобразование в целое число без округления. Например:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Дополнительные сведения о см `CInt`. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Число не указано.</exception>
        <exception cref="T:System.ArgumentException">Число не является числовым типом.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Сводка по математическим функциям</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Математические функции (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Сводка по преобразованию</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Число типа <see langword="Double" /> или любое допустимое числовое выражение.</param>
        <summary>Возвращает целую часть числа.</summary>
        <returns>Целая часть числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обе функции `Fix` `Number` и удаляют дробную часть и возвращают результирующее целочисленное значение. `Int`  
  
 Различие между `Int` функциями и `Fix` заключается в том, `Number` что если имеет `Int` отрицательное значение, возвращает `Fix` первое отрицательное целое `Number`число, которое меньше или равно, тогда как возвращает первое отрицательное целое число. больше или равно `Number`. Например, `Int` преобразует-8,4 в-9 и `Fix` преобразует-8,4 в-8.  
  
 `Fix(number)`эквивалентно`Sign(number) * Int(Abs(number)).`  
  
Начиная с Visual Basic 15,8, производительность преобразования типа "двойное в целое число" оптимизирована, если передать значение, возвращаемое `Int` методом, в любую из [целочисленных функций преобразования](~/docs/visual-basic/language-reference/functions/conversion-functions.md)или значение `Int` Double, возвращаемое автоматически преобразуется в целое число с [параметром Option](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) , равным OFF. Эта оптимизация позволяет коду выполняться быстрее — до двух раз быстрее для кода, который выполняет большое количество преобразований в целочисленные типы. В следующем примере показано такое Оптимизированное преобразование:

```vb
Dim dbl As Double = 175.7619
Dim i3 As Integer = CInt(Int(dbl))         ' Result: 175
```  
  
## Examples  
 В этом примере показано, `Int` как `Fix` функции и возвращают целочисленные части чисел. В случае отрицательного числового аргумента `Int` функция возвращает первое отрицательное целое число, которое меньше или равно числу `Fix` ; функция возвращает первое отрицательное целое число, которое больше или равно числу. В следующем примере необходимо указать `Option Strict Off` , так как неявное преобразование из типа `Integer` `Double` в тип не допускается `Option Strict On`в следующих условиях:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 `CInt` Функцию можно использовать для явного преобразования других типов данных в тип `Integer` с помощью `Option Strict Off`. `CInt` Однако округляет до ближайшего целого числа вместо усечения дробной части чисел. Например:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 `CInt` Функцию можно использовать для результата `Fix` вызова функции или `Int` , чтобы выполнить явное преобразование в целое число без округления. Например:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Дополнительные сведения о см `CInt`. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Число не указано.</exception>
        <exception cref="T:System.ArgumentException">Число не является числовым типом.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Сводка по математическим функциям</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Математические функции (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Сводка по преобразованию</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Число типа <see langword="Short" /> или любое допустимое числовое выражение.</param>
        <summary>Возвращает целую часть числа.</summary>
        <returns>Целая часть числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обе функции `Fix` `Number` и удаляют дробную часть и возвращают результирующее целочисленное значение. `Int`  
  
 Различие между `Int` функциями и `Fix` заключается в том, `Number` что если имеет `Int` отрицательное значение, возвращает `Fix` первое отрицательное целое `Number`число, которое меньше или равно, тогда как возвращает первое отрицательное целое число. больше или равно `Number`. Например, `Int` преобразует-8,4 в-9 и `Fix` преобразует-8,4 в-8.  
  
 `Fix(number)`эквивалентно`Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 В этом примере показано, `Int` как `Fix` функции и возвращают целочисленные части чисел. В случае отрицательного числового аргумента `Int` функция возвращает первое отрицательное целое число, которое меньше или равно числу `Fix` ; функция возвращает первое отрицательное целое число, которое больше или равно числу. В следующем примере необходимо указать `Option Strict Off` , так как неявное преобразование из типа `Integer` `Double` в тип не допускается `Option Strict On`в следующих условиях:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 `CInt` Функцию можно использовать для явного преобразования других типов данных в тип `Integer` с помощью `Option Strict Off`. `CInt` Однако округляет до ближайшего целого числа вместо усечения дробной части чисел. Например:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 `CInt` Функцию можно использовать для результата `Fix` вызова функции или `Int` , чтобы выполнить явное преобразование в целое число без округления. Например:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Дополнительные сведения о см `CInt`. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Число не указано.</exception>
        <exception cref="T:System.ArgumentException">Число не является числовым типом.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Сводка по математическим функциям</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Математические функции (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Сводка по преобразованию</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Число типа <see langword="Integer" /> или любое допустимое числовое выражение.</param>
        <summary>Возвращает целую часть числа.</summary>
        <returns>Целая часть числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обе функции `Fix` `Number` и удаляют дробную часть и возвращают результирующее целочисленное значение. `Int`  
  
 Различие между `Int` функциями и `Fix` заключается в том, `Number` что если имеет `Int` отрицательное значение, возвращает `Fix` первое отрицательное целое `Number`число, которое меньше или равно, тогда как возвращает первое отрицательное целое число. больше или равно `Number`. Например, `Int` преобразует-8,4 в-9 и `Fix` преобразует-8,4 в-8.  
  
 `Fix(number)`эквивалентно`Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 В этом примере показано, `Int` как `Fix` функции и возвращают целочисленные части чисел. В случае отрицательного числового аргумента `Int` функция возвращает первое отрицательное целое число, которое меньше или равно числу `Fix` ; функция возвращает первое отрицательное целое число, которое больше или равно числу. В следующем примере необходимо указать `Option Strict Off` , так как неявное преобразование из типа `Integer` `Double` в тип не допускается `Option Strict On`в следующих условиях:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 `CInt` Функцию можно использовать для явного преобразования других типов данных в тип `Integer` с помощью `Option Strict Off`. `CInt` Однако округляет до ближайшего целого числа вместо усечения дробной части чисел. Например:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 `CInt` Функцию можно использовать для результата `Fix` вызова функции или `Int` , чтобы выполнить явное преобразование в целое число без округления. Например:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Дополнительные сведения о см `CInt`. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Число не указано.</exception>
        <exception cref="T:System.ArgumentException">Число не является числовым типом.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Сводка по математическим функциям</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Математические функции (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Сводка по преобразованию</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Число типа <see langword="Long" /> или любое допустимое числовое выражение.</param>
        <summary>Возвращает целую часть числа.</summary>
        <returns>Целая часть числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обе функции `Fix` `Number` и удаляют дробную часть и возвращают результирующее целочисленное значение. `Int`  
  
 Различие между `Int` функциями и `Fix` заключается в том, `Number` что если имеет `Int` отрицательное значение, возвращает `Fix` первое отрицательное целое `Number`число, которое меньше или равно, тогда как возвращает первое отрицательное целое число. больше или равно `Number`. Например, `Int` преобразует-8,4 в-9 и `Fix` преобразует-8,4 в-8.  
  
 `Fix(number)`эквивалентно`Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 В этом примере показано, `Int` как `Fix` функции и возвращают целочисленные части чисел. В случае отрицательного числового аргумента `Int` функция возвращает первое отрицательное целое число, которое меньше или равно числу `Fix` ; функция возвращает первое отрицательное целое число, которое больше или равно числу. В следующем примере необходимо указать `Option Strict Off` , так как неявное преобразование из типа `Integer` `Double` в тип не допускается `Option Strict On`в следующих условиях:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 `CInt` Функцию можно использовать для явного преобразования других типов данных в тип `Integer` с помощью `Option Strict Off`. `CInt` Однако округляет до ближайшего целого числа вместо усечения дробной части чисел. Например:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 `CInt` Функцию можно использовать для результата `Fix` вызова функции или `Int` , чтобы выполнить явное преобразование в целое число без округления. Например:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Дополнительные сведения о см `CInt`. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Число не указано.</exception>
        <exception cref="T:System.ArgumentException">Число не является числовым типом.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Сводка по математическим функциям</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Математические функции (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Сводка по преобразованию</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Число типа <see langword="Object" /> или любое допустимое числовое выражение. Если параметр <paramref name="Number" /> имеет значение <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</param>
        <summary>Возвращает целую часть числа.</summary>
        <returns>Целая часть числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обе функции `Fix` `Number` и удаляют дробную часть и возвращают результирующее целочисленное значение. `Int`  
  
 Различие между `Int` функциями и `Fix` заключается в том, `Number` что если имеет `Int` отрицательное значение, возвращает `Fix` первое отрицательное целое `Number`число, которое меньше или равно, тогда как возвращает первое отрицательное целое число. больше или равно `Number`. Например, `Int` преобразует-8,4 в-9 и `Fix` преобразует-8,4 в-8.  
  
 `Fix(number)`эквивалентно`Sign(number) * Int(Abs(number)).`  
  
Начиная с `Number` Visual Basic 15,8, если аргумент является объектом, тип среды выполнения которого — `Double` или `Single`, то производительность преобразования с плавающей точкой в целое оптимизирована, `Int` если передать значение, возвращенное для любой из [целочисленных функций преобразования](~/docs/visual-basic/language-reference/functions/conversion-functions.md)или, если значение, возвращаемое функцией `Int` , автоматически преобразуется в целое число с [параметром Option](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) , равным OFF. Эта оптимизация позволяет коду выполняться быстрее — до двух раз быстрее для кода, который выполняет большое количество преобразований в целочисленные типы. Например:

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Int(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Int(s))           ' Result: 173
```

## Examples  
 В этом примере показано, `Int` как `Fix` функции и возвращают целочисленные части чисел. В случае отрицательного числового аргумента `Int` функция возвращает первое отрицательное целое число, которое меньше или равно числу `Fix` ; функция возвращает первое отрицательное целое число, которое больше или равно числу. В следующем примере необходимо указать `Option Strict Off` , так как неявное преобразование из типа `Integer` `Double` в тип не допускается `Option Strict On`в следующих условиях:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 `CInt` Функцию можно использовать для явного преобразования других типов данных в тип `Integer` с помощью `Option Strict Off`. `CInt` Однако округляет до ближайшего целого числа вместо усечения дробной части чисел. Например:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 `CInt` Функцию можно использовать для результата `Fix` вызова функции или `Int` , чтобы выполнить явное преобразование в целое число без округления. Например:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Дополнительные сведения о см `CInt`. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Число не указано.</exception>
        <exception cref="T:System.ArgumentException">Число не является числовым типом.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Сводка по математическим функциям</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Математические функции (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Сводка по преобразованию</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Число типа <see langword="Single" /> или любое допустимое числовое выражение.</param>
        <summary>Возвращает целую часть числа.</summary>
        <returns>Целая часть числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обе функции `Fix` `Number` и удаляют дробную часть и возвращают результирующее целочисленное значение. `Int`  
  
 Различие между `Int` функциями и `Fix` заключается в том, `Number` что если имеет `Int` отрицательное значение, возвращает `Fix` первое отрицательное целое `Number`число, которое меньше или равно, тогда как возвращает первое отрицательное целое число. больше или равно `Number`. Например, `Int` преобразует-8,4 в-9 и `Fix` преобразует-8,4 в-8.  
  
 `Fix(number)`эквивалентно`Sign(number) * Int(Abs(number)).`  
  
Начиная с Visual Basic 15,8, преобразование `Single`производительности в целое число оптимизируется, если передать значение, возвращаемое `Int` методом, в любую из [целочисленных функций](~/docs/visual-basic/language-reference/functions/conversion-functions.md) `Single` преобразования или если возвращенное значение Функция `Int` by автоматически преобразуется в целое число с [параметром Option](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) , равным OFF. Эта оптимизация позволяет коду выполняться быстрее — до двух раз быстрее для кода, который выполняет большое количество преобразований в целочисленные типы. В следующем примере показано такое Оптимизированное преобразование:

```vb
Dim sng As Single = 175.7619
Dim i3 As Integer = CInt(Fix(sng))         ' Result: 175
```

## Examples  
 В этом примере показано, `Int` как `Fix` функции и возвращают целочисленные части чисел. В случае отрицательного числового аргумента `Int` функция возвращает первое отрицательное целое число, которое меньше или равно числу `Fix` ; функция возвращает первое отрицательное целое число, которое больше или равно числу. В следующем примере необходимо указать `Option Strict Off` , так как неявное преобразование из типа `Integer` `Double` в тип не допускается `Option Strict On`в следующих условиях:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 `CInt` Функцию можно использовать для явного преобразования других типов данных в тип `Integer` с помощью `Option Strict Off`. `CInt` Однако округляет до ближайшего целого числа вместо усечения дробной части чисел. Например:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 `CInt` Функцию можно использовать для результата `Fix` вызова функции или `Int` , чтобы выполнить явное преобразование в целое число без округления. Например:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Дополнительные сведения о см `CInt`. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Число не указано.</exception>
        <exception cref="T:System.ArgumentException">Число не является числовым типом.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Сводка типов данных (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Сводка по математическим функциям</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Математические функции (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Сводка по преобразованию</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает строку, представляющую восьмеричное значение числа.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Любое допустимое числовое выражение или выражение типа <see langword="String" />.</param>
        <summary>Возвращает строку, представляющую восьмеричное значение числа.</summary>
        <returns>Строка, представляющая восьмеричное значение числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.  
  
|Если число равно|Функция Oct возвращает|  
|-|-|  
|Empty|Ноль (0)|  
|Любое другое число|До 22 восьмеричных символов|  
  
 Восьмеричные числа можно представить непосредственно, перед числами в правильном диапазоне с `&O`. Например, `&O10` является восьмеричной нотацией для десятичного 8.  
  
   
  
## Examples  
 В этом примере `Oct` функция используется для возврата восьмеричного значения числа.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> не задан.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> не относится к числовому типу.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Сводка по преобразованию</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Любое допустимое числовое выражение или выражение типа <see langword="String" />.</param>
        <summary>Возвращает строку, представляющую восьмеричное значение числа.</summary>
        <returns>Строка, представляющая восьмеричное значение числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.  
  
|Если число равно|Функция Oct возвращает|  
|-|-|  
|Empty|Ноль (0)|  
|Любое другое число|До 22 восьмеричных символов|  
  
 Восьмеричные числа можно представить непосредственно, перед числами в правильном диапазоне с `&O`. Например, `&O10` является восьмеричной нотацией для десятичного 8.  
  
   
  
## Examples  
 В этом примере `Oct` функция используется для возврата восьмеричного значения числа.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> не задан.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> не относится к числовому типу.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Сводка по преобразованию</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Любое допустимое числовое выражение или выражение типа <see langword="String" />.</param>
        <summary>Возвращает строку, представляющую восьмеричное значение числа.</summary>
        <returns>Строка, представляющая восьмеричное значение числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.  
  
|Если число равно|Функция Oct возвращает|  
|-|-|  
|Empty|Ноль (0)|  
|Любое другое число|До 22 восьмеричных символов|  
  
 Восьмеричные числа можно представить непосредственно, перед числами в правильном диапазоне с `&O`. Например, `&O10` является восьмеричной нотацией для десятичного 8.  
  
   
  
## Examples  
 В этом примере `Oct` функция используется для возврата восьмеричного значения числа.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> не задан.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> не относится к числовому типу.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Сводка по преобразованию</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Любое допустимое числовое выражение или выражение типа <see langword="String" />.</param>
        <summary>Возвращает строку, представляющую восьмеричное значение числа.</summary>
        <returns>Строка, представляющая восьмеричное значение числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.  
  
|Если число равно|Функция Oct возвращает|  
|-|-|  
|Empty|Ноль (0)|  
|Любое другое число|До 22 восьмеричных символов|  
  
 Восьмеричные числа можно представить непосредственно, перед числами в правильном диапазоне с `&O`. Например, `&O10` является восьмеричной нотацией для десятичного 8.  
  
   
  
## Examples  
 В этом примере `Oct` функция используется для возврата восьмеричного значения числа.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> не задан.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> не относится к числовому типу.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Сводка по преобразованию</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Любое допустимое числовое выражение или выражение типа <see langword="String" />.</param>
        <summary>Возвращает строку, представляющую восьмеричное значение числа.</summary>
        <returns>Строка, представляющая восьмеричное значение числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.  
  
|Если число равно|Функция Oct возвращает|  
|-|-|  
|Empty|Ноль (0)|  
|Любое другое число|До 22 восьмеричных символов|  
  
 Восьмеричные числа можно представить непосредственно, перед числами в правильном диапазоне с `&O`. Например, `&O10` является восьмеричной нотацией для десятичного 8.  
  
   
  
## Examples  
 В этом примере `Oct` функция используется для возврата восьмеричного значения числа.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> не задан.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> не относится к числовому типу.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Сводка по преобразованию</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Любое допустимое числовое выражение или выражение типа <see langword="String" />.</param>
        <summary>Возвращает строку, представляющую восьмеричное значение числа.</summary>
        <returns>Строка, представляющая восьмеричное значение числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.  
  
|Если число равно|Функция Oct возвращает|  
|-|-|  
|Empty|Ноль (0)|  
|Любое другое число|До 22 восьмеричных символов|  
  
 Восьмеричные числа можно представить непосредственно, перед числами в правильном диапазоне с `&O`. Например, `&O10` является восьмеричной нотацией для десятичного 8.  
  
   
  
## Examples  
 В этом примере `Oct` функция используется для возврата восьмеричного значения числа.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> не задан.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> не относится к числовому типу.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Сводка по преобразованию</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Любое допустимое числовое выражение или выражение типа <see langword="String" />.</param>
        <summary>Возвращает строку, представляющую восьмеричное значение числа.</summary>
        <returns>Строка, представляющая восьмеричное значение числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.  
  
|Если число равно|Функция Oct возвращает|  
|-|-|  
|Empty|Ноль (0)|  
|Любое другое число|До 22 восьмеричных символов|  
  
 Восьмеричные числа можно представить непосредственно, перед числами в правильном диапазоне с `&O`. Например, `&O10` является восьмеричной нотацией для десятичного 8.  
  
   
  
## Examples  
 В этом примере `Oct` функция используется для возврата восьмеричного значения числа.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> не задан.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> не относится к числовому типу.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Сводка по преобразованию</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Любое допустимое числовое выражение или выражение типа <see langword="String" />.</param>
        <summary>Возвращает строку, представляющую восьмеричное значение числа.</summary>
        <returns>Строка, представляющая восьмеричное значение числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.  
  
|Если число равно|Функция Oct возвращает|  
|-|-|  
|Empty|Ноль (0)|  
|Любое другое число|До 22 восьмеричных символов|  
  
 Восьмеричные числа можно представить непосредственно, перед числами в правильном диапазоне с `&O`. Например, `&O10` является восьмеричной нотацией для десятичного 8.  
  
   
  
## Examples  
 В этом примере `Oct` функция используется для возврата восьмеричного значения числа.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> не задан.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> не относится к числовому типу.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Сводка по преобразованию</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. Любое допустимое числовое выражение или выражение типа <see langword="String" />.</param>
        <summary>Возвращает строку, представляющую восьмеричное значение числа.</summary>
        <returns>Строка, представляющая восьмеричное значение числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.  
  
|Если число равно|Функция Oct возвращает|  
|-|-|  
|Empty|Ноль (0)|  
|Любое другое число|До 22 восьмеричных символов|  
  
 Восьмеричные числа можно представить непосредственно, перед числами в правильном диапазоне с `&O`. Например, `&O10` является восьмеричной нотацией для десятичного 8.  
  
   
  
## Examples  
 В этом примере `Oct` функция используется для возврата восьмеричного значения числа.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> не задан.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> не относится к числовому типу.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Сводка по преобразованию</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательный. <see langword="Object" />, содержащий любое допустимое числовое выражение.</param>
        <summary>Возвращает представление <see langword="String" /> числа.</summary>
        <returns>Представление <see langword="String" /> числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При преобразовании чисел в строки начальное пространство всегда резервируется для знака `Number`. Если `Number` имеет положительное значение, возвращаемая строка содержит начальный пробел, а знак «плюс» является подразумеваемым. Отрицательное число будет содержать знак "минус" (-) без начального пробела.  
  
 `Format` Используйте функцию для преобразования числовых значений, которые необходимо отформатировать как даты, время или денежные единицы или в других пользовательских форматах. `Number`В `Str` отличие от функции, функция не включает в себя начальный пробел для знака. `Format`  
  
> [!NOTE]
>  Функция распознает только точку (`.`) в качестве допустимого десятичного разделителя. `Str` Если используются разные десятичные разделители (например, в международных приложениях), используйте `CStr` функции или `Format` для преобразования числа в строку. Чтобы получить строковое представление числа в определенном языке и региональных параметрах, используйте `ToString(IFormatProvider)` метод числа. Например, используйте <xref:System.Double.ToString%2A> при преобразовании значения типа `Double` в строку.  
  
   
  
## Examples  
 В этом примере `Str` функция используется для `String` возврата представления числа. Если положительное число преобразуется в строку, то для его знака всегда резервируется начальное пространство.  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> не задан.</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="Number" /> не относится к числовому типу.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Сводка по преобразованию</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">Обязательный. Любое допустимое выражение<see langword="String" />, переменная <see langword="Object" /> или значение <see langword="Char" />. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, значение должно быть преобразуемым в <see langword="String" />. В противном случае возникает ошибка <see cref="T:System.ArgumentException" />.</param>
        <summary>Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</summary>
        <returns>Порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Val` Функция прекращает чтение строки на первом символе, который она не может распознать как часть числа. Символы и символы, часто рассматриваемые как части числовых значений, такие как знаки доллара и запятые, не распознаются. Однако функция распознает префиксы `&O` системы счисления (для восьмеричного) и `&H` (для шестнадцатеричного). Пробелы, знаки табуляции и символы перевода строки удаляются из аргумента.  
  
 Следующий вызов возвращает значение 1615198.  
  
```vb  
Val(" 1615 198th Street N.E.")   
```  
  
Следующий вызов возвращает десятичное значение-1.  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  Функция распознает только точку (`.`) в качестве допустимого десятичного разделителя. `Val` Если используются разные десятичные разделители, как в международных приложениях, используйте `CDbl` или `CInt` вместо этого для преобразования строки в число. Чтобы преобразовать строковое представление числа в определенном языке и региональных параметрах в числовое значение, используйте `Parse(String, IFormatProvider)` метод числового типа. Например, используйте <xref:System.Double.Parse%2A?displayProperty=nameWithType> при преобразовании строки `Double`в.  
  
<xref:System.InvalidCastException> Исключение может быть создано в ответ на определенные нестандартные числовые форматы. Например, следующий код вызывает это исключение.  

```vb
' These examples cause run-time errors.  
Console.WriteLine(Val("1.34%"))  
Console.WriteLine(Val("1.34&"))  
```

Конфликт между числом, отформатированным `Double` как, `Integer` и `Long` символами типа и будет перехвачен компилятором, если он не содержал строку.  

```vb
' These examples cause compiler errors.  
Dim m = 1.34%  
Dim n = 1.34&
```  
  
   
  
## Examples  
 В следующем примере `Val` функция используется для возврата чисел, содержащихся в каждой строке. `Val`прекращает преобразование на первом символе, который не может быть интерпретирован как цифра, числовой модификатор, числовой знак препинания или пробел.  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><paramref name="InputStr" /> — слишком большое значение.</exception>
        <exception cref="T:System.ArgumentException"><see langword="Object" /> — это выражение типа <see langword="String" />, которое нельзя преобразовать в <paramref name="Expression" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Обязательный. Любое допустимое выражение<see langword="String" />, переменная <see langword="Object" /> или значение <see langword="Char" />. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, значение должно быть преобразуемым в <see langword="String" />. В противном случае возникает ошибка <see cref="T:System.ArgumentException" />.</param>
        <summary>Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</summary>
        <returns>Порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Val` Функция прекращает чтение строки на первом символе, который она не может распознать как часть числа. Символы и символы, часто рассматриваемые как части числовых значений, такие как знаки доллара и запятые, не распознаются. Однако функция распознает префиксы `&O` системы счисления (для восьмеричного) и `&H` (для шестнадцатеричного). Пробелы, знаки табуляции и символы перевода строки удаляются из аргумента.  
  
 Следующий вызов возвращает значение 1234123.  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
Следующий вызов возвращает десятичное значение-1.  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  Функция распознает только точку (`.`) в качестве допустимого десятичного разделителя. `Val` Если используются другие десятичные разделители, как в международных приложениях, используйте `CDbl` или `CInt` вместо этого для преобразования строки в число. Чтобы преобразовать строковое представление числа в определенном языке и региональных параметрах в числовое значение, используйте `Parse(String, IFormatProvider)` метод числового типа. Например, используйте <xref:System.Double.Parse%2A?displayProperty=nameWithType> при преобразовании строки `Double`в.  
  
> [!NOTE]
>  <xref:System.InvalidCastException> Исключение может быть создано в ответ на определенные нестандартные числовые форматы. Например, следующий код вызывает это исключение.  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  Конфликт между числом, отформатированным `Double` как, `Integer` и `Long` символами типа и будет перехвачен компилятором, если конфликт не содержался в строках.  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 В следующем примере `Val` функция используется для возврата чисел, содержащихся в каждой строке. `Val`прекращает преобразование на первом символе, который не может быть интерпретирован как цифра, числовой модификатор, числовой знак препинания или пробел.  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><paramref name="InputStr" /> — слишком большое значение.</exception>
        <exception cref="T:System.ArgumentException"><see langword="Object" /> — это выражение типа <see langword="String" />, которое нельзя преобразовать в <paramref name="Expression" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">Обязательный. Любое допустимое выражение<see langword="String" />, переменная <see langword="Object" /> или значение <see langword="Char" />. Если <paramref name="Expression" /> имеет тип <see langword="Object" />, значение должно быть преобразуемым в <see langword="String" />. В противном случае возникает ошибка <see cref="T:System.ArgumentException" />.</param>
        <summary>Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</summary>
        <returns>Порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Val` Функция прекращает чтение строки на первом символе, который она не может распознать как часть числа. Символы и символы, часто рассматриваемые как части числовых значений, такие как знаки доллара и запятые, не распознаются. Однако функция распознает префиксы `&O` системы счисления (для восьмеричного) и `&H` (для шестнадцатеричного). Пробелы, знаки табуляции и символы перевода строки удаляются из аргумента.  
  
 Следующий вызов возвращает значение 1234123.  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
Следующий вызов возвращает десятичное значение-1.  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  Функция распознает только точку (`.`) в качестве допустимого десятичного разделителя. `Val` Если используются другие десятичные разделители, как в международных приложениях, используйте `CDbl` или `CInt` вместо этого для преобразования строки в число. Чтобы преобразовать строковое представление числа в определенном языке и региональных параметрах в числовое значение, используйте `Parse(String, IFormatProvider)` метод числового типа. Например, используйте <xref:System.Double.Parse%2A?displayProperty=nameWithType> при преобразовании строки `Double`в.  
  
> [!NOTE]
>  <xref:System.InvalidCastException> Исключение может возникнуть в ответ на определенные нестандартные числовые форматы. Например, следующий код вызывает это исключение.  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  Конфликт между числом, отформатированным `Double` как, `Integer` и `Long` символами типа и будет перехвачен компилятором, если конфликт не содержался в строках.  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 В следующем примере `Val` функция используется для возврата чисел, содержащихся в каждой строке. `Val`прекращает преобразование на первом символе, который не может быть интерпретирован как цифра, числовой модификатор, числовой знак препинания или пробел.  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><paramref name="InputStr" /> — слишком большое значение.</exception>
        <exception cref="T:System.ArgumentException"><see langword="Object" /> — это выражение типа <see langword="String" />, которое нельзя преобразовать в <paramref name="Expression" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
  </Members>
</Type>
