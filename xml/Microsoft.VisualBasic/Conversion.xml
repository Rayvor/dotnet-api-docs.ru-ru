<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata><Meta Name="ms.openlocfilehash" Value="093db67cb3c739ef9d2f91f8d2e98f666d35387b" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70614476" /></Metadata><TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="8adc8-101">В модуле <see langword="Conversion" /> содержатся процедуры, используемые для выполнения различных операций преобразования.</span><span class="sxs-lookup"><span data-stu-id="8adc8-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-102">Этот модуль поддерживает ключевые слова языка Visual Basic и элементы библиотеки времени выполнения, которые преобразуют десятичные числа в другие типы, числа в строки, строки в числа и один тип данных в другой.</span><span class="sxs-lookup"><span data-stu-id="8adc8-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-103">В этом примере `Hex` функция используется для возврата шестнадцатеричного значения числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="8adc8-104">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="8adc8-104">Conversion Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="8adc8-105">Ключевые слова (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-105">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="8adc8-106">Visual Basic элементов библиотеки времени выполнения</span><span class="sxs-lookup"><span data-stu-id="8adc8-106">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="TargetType" Type="System.Type" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="8adc8-107">Преобразуемый объект.</span><span class="sxs-lookup"><span data-stu-id="8adc8-107">The object to convert.</span></span></param>
        <param name="TargetType"><span data-ttu-id="8adc8-108">Тип данных, в который требуется преобразовать объект.</span><span class="sxs-lookup"><span data-stu-id="8adc8-108">The type to which to convert the object.</span></span></param>
        <summary><span data-ttu-id="8adc8-109">Преобразовывает объект в указанный тип.</span><span class="sxs-lookup"><span data-stu-id="8adc8-109">Converts an object to the specified type.</span></span></summary>
        <returns><span data-ttu-id="8adc8-110">Объект, тип которого во время выполнения является запрошенным типом целевого объекта.</span><span class="sxs-lookup"><span data-stu-id="8adc8-110">An object whose type at run time is the requested target type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-111">Метод преобразует объект, переданный в `Expression` качестве параметра, в тип, заданный `TargetType` параметром. `CTypeDynamic`</span><span class="sxs-lookup"><span data-stu-id="8adc8-111">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="8adc8-112">Если объект является динамическим объектом, `CTypeDynamic` метод применяет доступные динамические преобразования.</span><span class="sxs-lookup"><span data-stu-id="8adc8-112">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="8adc8-113">`CTypeDynamic` Метод применяет динамические преобразования в соответствии с семантикой преобразования, определенной самим объектом.</span><span class="sxs-lookup"><span data-stu-id="8adc8-113">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="8adc8-114">Если динамический объект наследует от <xref:System.Dynamic.DynamicObject> `CTypeDynamic` , метод сначала пытается выполнить преобразование, используя определяемое пользователем статическое преобразование.</span><span class="sxs-lookup"><span data-stu-id="8adc8-114">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="8adc8-115">Если определяемое пользователем статическое преобразование завершается неудачей `CTypeDynamic` , метод пытается выполнить преобразование с помощью динамических преобразований.</span><span class="sxs-lookup"><span data-stu-id="8adc8-115">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="8adc8-116">Если динамический объект реализует <xref:System.Dynamic.IDynamicMetaObjectProvider> `CTypeDynamic` , метод предоставляет приоритет для динамических преобразований по определяемым пользователем статическим преобразованиям.</span><span class="sxs-lookup"><span data-stu-id="8adc8-116">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-117">В следующем примере `CTypeDynamic` метод используется для преобразования динамического объекта в строку с помощью преобразования, определенного динамическим объектом.</span><span class="sxs-lookup"><span data-stu-id="8adc8-117">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="8adc8-118">Работа с динамическими объектами (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-118">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="8adc8-119">Пошаговое руководство. Создание и использование динамических объектов (C# и Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-119">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType"><span data-ttu-id="8adc8-120">Тип данных, в который требуется преобразовать объект.</span><span class="sxs-lookup"><span data-stu-id="8adc8-120">The type to which to convert the object.</span></span></typeparam>
        <param name="Expression"><span data-ttu-id="8adc8-121">Преобразуемый объект.</span><span class="sxs-lookup"><span data-stu-id="8adc8-121">The object to convert.</span></span></param>
        <summary><span data-ttu-id="8adc8-122">Преобразует объект в указанный универсальный тип.</span><span class="sxs-lookup"><span data-stu-id="8adc8-122">Converts an object to the specified generic type.</span></span></summary>
        <returns><span data-ttu-id="8adc8-123">Объект со статической типизацией, имеющий запрошенный универсальный тип.</span><span class="sxs-lookup"><span data-stu-id="8adc8-123">An object statically typed as the requested generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-124">Метод преобразует объект, переданный в `Expression` качестве параметра, в тип, заданный типом универсального параметра. `CTypeDynamic`</span><span class="sxs-lookup"><span data-stu-id="8adc8-124">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="8adc8-125">Если объект является динамическим объектом, `CTypeDynamic` метод применяет доступные динамические преобразования.</span><span class="sxs-lookup"><span data-stu-id="8adc8-125">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="8adc8-126">`CTypeDynamic` Метод применяет динамические преобразования в соответствии с семантикой преобразования, определенной самим объектом.</span><span class="sxs-lookup"><span data-stu-id="8adc8-126">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="8adc8-127">Если динамический объект наследует от <xref:System.Dynamic.DynamicObject> `CTypeDynamic` , метод сначала пытается выполнить преобразование, используя определяемое пользователем статическое преобразование.</span><span class="sxs-lookup"><span data-stu-id="8adc8-127">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="8adc8-128">Если определяемое пользователем статическое преобразование завершается неудачей `CTypeDynamic` , метод пытается выполнить преобразование с помощью динамических преобразований.</span><span class="sxs-lookup"><span data-stu-id="8adc8-128">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="8adc8-129">Если динамический объект реализует <xref:System.Dynamic.IDynamicMetaObjectProvider> `CTypeDynamic` , метод предоставляет приоритет для динамических преобразований по определяемым пользователем статическим преобразованиям.</span><span class="sxs-lookup"><span data-stu-id="8adc8-129">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-130">В следующем примере `CTypeDynamic` метод используется для преобразования динамического объекта в строку с помощью преобразования, определенного динамическим объектом.</span><span class="sxs-lookup"><span data-stu-id="8adc8-130">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="8adc8-131">Работа с динамическими объектами (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-131">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="8adc8-132">Пошаговое руководство. Создание и использование динамических объектов (C# и Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-132">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8adc8-133">Возвращает сообщение об ошибке, соответствующее данному номеру ошибки.</span><span class="sxs-lookup"><span data-stu-id="8adc8-133">Returns the error message that corresponds to a given error number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8adc8-134">Возвращает сообщение об ошибке, соответствующее данному номеру ошибки.</span><span class="sxs-lookup"><span data-stu-id="8adc8-134">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-135">Сообщение об ошибке, соответствующее самой последней ошибке времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="8adc8-135">The error message that corresponds to the most recent run-time error.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-136">Функция проверяет параметры `Err` свойств объекта, чтобы определить самую последнюю ошибку времени выполнения. `ErrorToString`</span><span class="sxs-lookup"><span data-stu-id="8adc8-136">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="8adc8-137">Возвращаемое значение `ErrorToString` функции соответствует `Description` свойству `Err` объекта.</span><span class="sxs-lookup"><span data-stu-id="8adc8-137">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="8adc8-138">Если ошибка времени выполнения не возникла, `ErrorToString` возвращает строку нулевой длины ("").</span><span class="sxs-lookup"><span data-stu-id="8adc8-138">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="8adc8-139">В Visual Basic версии 6,0 и более ранних эта функция была предоставлена `Error` функцией.</span><span class="sxs-lookup"><span data-stu-id="8adc8-139">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-140">В следующем коде `ErrorToString` функция используется для вывода сообщений об ошибках, соответствующих указанным номерам ошибок.</span><span class="sxs-lookup"><span data-stu-id="8adc8-140">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-141"><paramref name="ErrorNumber" /> выходит за пределы допустимого диапазона.</span><span class="sxs-lookup"><span data-stu-id="8adc8-141"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber"><span data-ttu-id="8adc8-142">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="8adc8-142">Optional.</span></span> <span data-ttu-id="8adc8-143">Любой допустимый номер ошибки.</span><span class="sxs-lookup"><span data-stu-id="8adc8-143">Any valid error number.</span></span></param>
        <summary><span data-ttu-id="8adc8-144">Возвращает сообщение об ошибке, соответствующее данному номеру ошибки.</span><span class="sxs-lookup"><span data-stu-id="8adc8-144">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-145">Сообщение об ошибке, соответствующее данному номеру ошибки.</span><span class="sxs-lookup"><span data-stu-id="8adc8-145">The error message that corresponds to a given error number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-146">Функция проверяет параметры `Err` свойств объекта, чтобы определить самую последнюю ошибку времени выполнения. `ErrorToString`</span><span class="sxs-lookup"><span data-stu-id="8adc8-146">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="8adc8-147">Возвращаемое значение `ErrorToString` функции соответствует `Description` свойству `Err` объекта.</span><span class="sxs-lookup"><span data-stu-id="8adc8-147">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="8adc8-148">Если `ErrorNumber` является допустимым номером ошибки, но не определен, `ErrorToString` возвращает строку `"Application-defined or object-defined error."` , если `ErrorNumber` недопустимо, возникает ошибка.</span><span class="sxs-lookup"><span data-stu-id="8adc8-148">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="8adc8-149">Если `ErrorNumber` параметр не указан, возвращается сообщение, соответствующее самой последней ошибке времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="8adc8-149">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="8adc8-150">Если ни одна из ошибок времени выполнения не возникла или `ErrorNumber` равно 0, `ErrorToString` возвращает строку нулевой длины ("").</span><span class="sxs-lookup"><span data-stu-id="8adc8-150">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="8adc8-151">В Visual Basic версии 6,0 и более ранних эта функция была предоставлена `Error` функцией.</span><span class="sxs-lookup"><span data-stu-id="8adc8-151">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-152">В следующем коде `ErrorToString` функция используется для вывода сообщений об ошибках, соответствующих указанным номерам ошибок.</span><span class="sxs-lookup"><span data-stu-id="8adc8-152">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-153"><paramref name="ErrorNumber" /> выходит за пределы допустимого диапазона.</span><span class="sxs-lookup"><span data-stu-id="8adc8-153"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8adc8-154">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-154">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-155">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-155">Required.</span></span> <span data-ttu-id="8adc8-156">Число типа <see langword="Decimal" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="8adc8-156">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="8adc8-157">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-157">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-158">Целая часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-158">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-159">Обе функции `Fix` `Number` и удаляют дробную часть и возвращают результирующее целочисленное значение. `Int`</span><span class="sxs-lookup"><span data-stu-id="8adc8-159">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="8adc8-160">Различие между `Int` функциями и `Fix` заключается в том, `Number` что если имеет `Int` отрицательное значение, возвращает `Fix` первое отрицательное целое `Number`число, которое меньше или равно, тогда как возвращает первое отрицательное целое число. больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-160">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="8adc8-161">Например, `Int` преобразует-8,4 в-9 и `Fix` преобразует-8,4 в-8.</span><span class="sxs-lookup"><span data-stu-id="8adc8-161">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="8adc8-162">`Fix(number)`эквивалентно`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="8adc8-162">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="8adc8-163">В этом примере показано, `Int` как `Fix` функции и возвращают целочисленные части чисел.</span><span class="sxs-lookup"><span data-stu-id="8adc8-163">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="8adc8-164">В случае отрицательного числового аргумента `Int` функция возвращает первое отрицательное целое число, которое меньше или равно числу `Fix` ; функция возвращает первое отрицательное целое число, которое больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-164">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="8adc8-165">В следующем примере необходимо указать `Option Strict Off` , так как неявное преобразование из типа `Integer` `Double` в тип не допускается `Option Strict On`в следующих условиях:</span><span class="sxs-lookup"><span data-stu-id="8adc8-165">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="8adc8-166">`CInt` Функцию можно использовать для явного преобразования других типов данных в тип `Integer` с помощью `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-166">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="8adc8-167">`CInt` Однако округляет до ближайшего целого числа вместо усечения дробной части чисел.</span><span class="sxs-lookup"><span data-stu-id="8adc8-167">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="8adc8-168">Например:</span><span class="sxs-lookup"><span data-stu-id="8adc8-168">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="8adc8-169">`CInt` Функцию можно использовать для результата `Fix` вызова функции или `Int` , чтобы выполнить явное преобразование в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="8adc8-169">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="8adc8-170">Например:</span><span class="sxs-lookup"><span data-stu-id="8adc8-170">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="8adc8-171">Дополнительные сведения о см `CInt`. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="8adc8-171">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-172">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="8adc8-172">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-173">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="8adc8-173">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-174">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-174">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="8adc8-175">Сводка типов данных (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-175">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="8adc8-176">Сводка по математическим функциям</span><span class="sxs-lookup"><span data-stu-id="8adc8-176">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="8adc8-177">Математические функции (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-177">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="8adc8-178">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="8adc8-178">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-179">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-179">Required.</span></span> <span data-ttu-id="8adc8-180">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="8adc8-180">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="8adc8-181">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-181">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-182">Целая часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-182">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-183">Обе функции `Fix` `Number` и удаляют дробную часть и возвращают результирующее целочисленное значение. `Int`</span><span class="sxs-lookup"><span data-stu-id="8adc8-183">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="8adc8-184">Различие между `Int` функциями и `Fix` заключается в том, `Number` что если имеет `Int` отрицательное значение, возвращает `Fix` первое отрицательное целое `Number`число, которое меньше или равно, тогда как возвращает первое отрицательное целое число. больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-184">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="8adc8-185">Например, `Int` преобразует-8,4 в-9 и `Fix` преобразует-8,4 в-8.</span><span class="sxs-lookup"><span data-stu-id="8adc8-185">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="8adc8-186">`Fix(number)`эквивалентно`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="8adc8-186">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="8adc8-187">Начиная с Visual Basic 15,8, преобразование `Double`производительности в целое число оптимизируется, если передать значение, возвращаемое `Fix` методом, в любую из [целочисленных функций](~/docs/visual-basic/language-reference/functions/conversion-functions.md) `Double` преобразования или если возвращенное значение by `Fix` неявно преобразуется в целое число с [параметром Option](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) , `Off`равным.</span><span class="sxs-lookup"><span data-stu-id="8adc8-187">Starting with Visual Basic 15.8, the performance of `Double`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Double` value returned by `Fix` is implicitly converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to `Off`.</span></span> <span data-ttu-id="8adc8-188">Эта оптимизация позволяет коду выполняться быстрее — до двух раз быстрее для кода, который выполняет большое количество преобразований в целочисленные типы.</span><span class="sxs-lookup"><span data-stu-id="8adc8-188">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="8adc8-189">В следующем примере показано такое Оптимизированное преобразование:</span><span class="sxs-lookup"><span data-stu-id="8adc8-189">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim d As Double = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
```  
  
## Examples  
 <span data-ttu-id="8adc8-190">В этом примере показано, `Int` как `Fix` функции и возвращают целочисленные части чисел.</span><span class="sxs-lookup"><span data-stu-id="8adc8-190">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="8adc8-191">В случае отрицательного числового аргумента `Int` функция возвращает первое отрицательное целое число, которое меньше или равно числу `Fix` ; функция возвращает первое отрицательное целое число, которое больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-191">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="8adc8-192">В следующем примере необходимо указать `Option Strict Off` , так как неявное преобразование из типа `Integer` `Double` в тип не допускается `Option Strict On`в следующих условиях:</span><span class="sxs-lookup"><span data-stu-id="8adc8-192">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="8adc8-193">`CInt` Функцию можно использовать для явного преобразования других типов данных в тип `Integer` с помощью `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-193">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="8adc8-194">`CInt` Однако округляет до ближайшего целого числа вместо усечения дробной части чисел.</span><span class="sxs-lookup"><span data-stu-id="8adc8-194">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="8adc8-195">Например:</span><span class="sxs-lookup"><span data-stu-id="8adc8-195">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="8adc8-196">`CInt` Функцию можно использовать для результата `Fix` вызова функции или `Int` , чтобы выполнить явное преобразование в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="8adc8-196">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="8adc8-197">Например:</span><span class="sxs-lookup"><span data-stu-id="8adc8-197">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="8adc8-198">Дополнительные сведения о см `CInt`. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="8adc8-198">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-199">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="8adc8-199">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-200">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="8adc8-200">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-201">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-201">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="8adc8-202">Сводка типов данных (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-202">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="8adc8-203">Сводка по математическим функциям</span><span class="sxs-lookup"><span data-stu-id="8adc8-203">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="8adc8-204">Математические функции (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-204">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="8adc8-205">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="8adc8-205">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-206">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-206">Required.</span></span> <span data-ttu-id="8adc8-207">Число типа <see langword="Short" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="8adc8-207">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="8adc8-208">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-208">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-209">Целая часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-209">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-210">Обе функции `Fix` `Number` и удаляют дробную часть и возвращают результирующее целочисленное значение. `Int`</span><span class="sxs-lookup"><span data-stu-id="8adc8-210">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="8adc8-211">Различие между `Int` функциями и `Fix` заключается в том, `Number` что если имеет `Int` отрицательное значение, возвращает `Fix` первое отрицательное целое `Number`число, которое меньше или равно, тогда как возвращает первое отрицательное целое число. больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-211">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="8adc8-212">Например, `Int` преобразует-8,4 в-9 и `Fix` преобразует-8,4 в-8.</span><span class="sxs-lookup"><span data-stu-id="8adc8-212">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="8adc8-213">`Fix(number)`эквивалентно`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="8adc8-213">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-214">В этом примере показано, `Int` как `Fix` функции и возвращают целочисленные части чисел.</span><span class="sxs-lookup"><span data-stu-id="8adc8-214">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="8adc8-215">В случае отрицательного числового аргумента `Int` функция возвращает первое отрицательное целое число, которое меньше или равно числу `Fix` ; функция возвращает первое отрицательное целое число, которое больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-215">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="8adc8-216">В следующем примере необходимо указать `Option Strict Off` , так как неявное преобразование из типа `Integer` `Double` в тип не допускается `Option Strict On`в следующих условиях:</span><span class="sxs-lookup"><span data-stu-id="8adc8-216">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="8adc8-217">`CInt` Функцию можно использовать для явного преобразования других типов данных в тип `Integer` с помощью `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-217">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="8adc8-218">`CInt` Однако округляет до ближайшего целого числа вместо усечения дробной части чисел.</span><span class="sxs-lookup"><span data-stu-id="8adc8-218">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="8adc8-219">Например:</span><span class="sxs-lookup"><span data-stu-id="8adc8-219">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="8adc8-220">`CInt` Функцию можно использовать для результата `Fix` вызова функции или `Int` , чтобы выполнить явное преобразование в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="8adc8-220">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="8adc8-221">Например:</span><span class="sxs-lookup"><span data-stu-id="8adc8-221">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="8adc8-222">Дополнительные сведения о см `CInt`. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="8adc8-222">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-223">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="8adc8-223">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-224">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="8adc8-224">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-225">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-225">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="8adc8-226">Сводка типов данных (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-226">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="8adc8-227">Сводка по математическим функциям</span><span class="sxs-lookup"><span data-stu-id="8adc8-227">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="8adc8-228">Математические функции (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-228">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="8adc8-229">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="8adc8-229">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-230">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-230">Required.</span></span> <span data-ttu-id="8adc8-231">Число типа <see langword="Integer" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="8adc8-231">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="8adc8-232">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-232">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-233">Целая часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-233">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-234">Обе функции `Fix` `Number` и удаляют дробную часть и возвращают результирующее целочисленное значение. `Int`</span><span class="sxs-lookup"><span data-stu-id="8adc8-234">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="8adc8-235">Различие между `Int` функциями и `Fix` заключается в том, `Number` что если имеет `Int` отрицательное значение, возвращает `Fix` первое отрицательное целое `Number`число, которое меньше или равно, тогда как возвращает первое отрицательное целое число. больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-235">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="8adc8-236">Например, `Int` преобразует-8,4 в-9 и `Fix` преобразует-8,4 в-8.</span><span class="sxs-lookup"><span data-stu-id="8adc8-236">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="8adc8-237">`Fix(number)`эквивалентно`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="8adc8-237">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-238">В этом примере показано, `Int` как `Fix` функции и возвращают целочисленные части чисел.</span><span class="sxs-lookup"><span data-stu-id="8adc8-238">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="8adc8-239">В случае отрицательного числового аргумента `Int` функция возвращает первое отрицательное целое число, которое меньше или равно числу `Fix` ; функция возвращает первое отрицательное целое число, которое больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-239">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="8adc8-240">В следующем примере необходимо указать `Option Strict Off` , так как неявное преобразование из типа `Integer` `Double` в тип не допускается `Option Strict On`в следующих условиях:</span><span class="sxs-lookup"><span data-stu-id="8adc8-240">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="8adc8-241">`CInt` Функцию можно использовать для явного преобразования других типов данных в тип `Integer` с помощью `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-241">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="8adc8-242">`CInt` Однако округляет до ближайшего целого числа вместо усечения дробной части чисел.</span><span class="sxs-lookup"><span data-stu-id="8adc8-242">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="8adc8-243">Например:</span><span class="sxs-lookup"><span data-stu-id="8adc8-243">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="8adc8-244">`CInt` Функцию можно использовать для результата `Fix` вызова функции или `Int` , чтобы выполнить явное преобразование в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="8adc8-244">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="8adc8-245">Например:</span><span class="sxs-lookup"><span data-stu-id="8adc8-245">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="8adc8-246">Дополнительные сведения о см `CInt`. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="8adc8-246">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-247">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="8adc8-247">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-248">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="8adc8-248">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-249">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-249">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="8adc8-250">Сводка типов данных (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-250">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="8adc8-251">Сводка по математическим функциям</span><span class="sxs-lookup"><span data-stu-id="8adc8-251">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="8adc8-252">Математические функции (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-252">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="8adc8-253">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="8adc8-253">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-254">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-254">Required.</span></span> <span data-ttu-id="8adc8-255">Число типа <see langword="Long" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="8adc8-255">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="8adc8-256">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-256">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-257">Целая часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-257">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-258">Обе функции `Fix` `Number` и удаляют дробную часть и возвращают результирующее целочисленное значение. `Int`</span><span class="sxs-lookup"><span data-stu-id="8adc8-258">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="8adc8-259">Различие между `Int` функциями и `Fix` заключается в том, `Number` что если имеет `Int` отрицательное значение, возвращает `Fix` первое отрицательное целое `Number`число, которое меньше или равно, тогда как возвращает первое отрицательное целое число. больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-259">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="8adc8-260">Например, `Int` преобразует-8,4 в-9 и `Fix` преобразует-8,4 в-8.</span><span class="sxs-lookup"><span data-stu-id="8adc8-260">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="8adc8-261">`Fix(number)`эквивалентно`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="8adc8-261">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-262">В этом примере показано, `Int` как `Fix` функции и возвращают целочисленные части чисел.</span><span class="sxs-lookup"><span data-stu-id="8adc8-262">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="8adc8-263">В случае отрицательного числового аргумента `Int` функция возвращает первое отрицательное целое число, которое меньше или равно числу `Fix` ; функция возвращает первое отрицательное целое число, которое больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-263">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="8adc8-264">В следующем примере необходимо указать `Option Strict Off` , так как неявное преобразование из типа `Integer` `Double` в тип не допускается `Option Strict On`в следующих условиях:</span><span class="sxs-lookup"><span data-stu-id="8adc8-264">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="8adc8-265">`CInt` Функцию можно использовать для явного преобразования других типов данных в тип `Integer` с помощью `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-265">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="8adc8-266">`CInt` Однако округляет до ближайшего целого числа вместо усечения дробной части чисел.</span><span class="sxs-lookup"><span data-stu-id="8adc8-266">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="8adc8-267">Например:</span><span class="sxs-lookup"><span data-stu-id="8adc8-267">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="8adc8-268">`CInt` Функцию можно использовать для результата `Fix` вызова функции или `Int` , чтобы выполнить явное преобразование в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="8adc8-268">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="8adc8-269">Например:</span><span class="sxs-lookup"><span data-stu-id="8adc8-269">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="8adc8-270">Дополнительные сведения о см `CInt`. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="8adc8-270">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-271">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="8adc8-271">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-272">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="8adc8-272">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-273">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-273">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="8adc8-274">Сводка типов данных (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-274">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="8adc8-275">Сводка по математическим функциям</span><span class="sxs-lookup"><span data-stu-id="8adc8-275">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="8adc8-276">Математические функции (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-276">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="8adc8-277">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="8adc8-277">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-278">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-278">Required.</span></span> <span data-ttu-id="8adc8-279">Число типа <see langword="Object" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="8adc8-279">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="8adc8-280">Если параметр <paramref name="Number" /> имеет значение <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="8adc8-280">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="8adc8-281">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-281">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-282">Целая часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-282">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-283">Обе функции `Fix` `Number` и удаляют дробную часть и возвращают результирующее целочисленное значение. `Int`</span><span class="sxs-lookup"><span data-stu-id="8adc8-283">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="8adc8-284">Различие между `Int` функциями и `Fix` заключается в том, `Number` что если имеет `Int` отрицательное значение, возвращает `Fix` первое отрицательное целое `Number`число, которое меньше или равно, тогда как возвращает первое отрицательное целое число. больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-284">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="8adc8-285">Например, `Int` преобразует-8,4 в-9 и `Fix` преобразует-8,4 в-8.</span><span class="sxs-lookup"><span data-stu-id="8adc8-285">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="8adc8-286">`Fix(number)`эквивалентно`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="8adc8-286">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="8adc8-287">Начиная с `Number` Visual Basic 15,8, если аргумент является объектом, тип среды выполнения которого — `Double` или `Single`, то производительность преобразования с плавающей точкой в целое оптимизирована, `Fix` если передать значение, возвращенное для любой из [целочисленных функций преобразования](~/docs/visual-basic/language-reference/functions/conversion-functions.md)или, если значение, возвращаемое функцией `Fix` , автоматически преобразуется в целое число с [параметром Option](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) , равным OFF.</span><span class="sxs-lookup"><span data-stu-id="8adc8-287">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="8adc8-288">Эта оптимизация позволяет коду выполняться быстрее — до двух раз быстрее для кода, который выполняет большое количество преобразований в целочисленные типы.</span><span class="sxs-lookup"><span data-stu-id="8adc8-288">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="8adc8-289">Например:</span><span class="sxs-lookup"><span data-stu-id="8adc8-289">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```     
  
## Examples  
 <span data-ttu-id="8adc8-290">В этом примере показано, `Int` как `Fix` функции и возвращают целочисленные части чисел.</span><span class="sxs-lookup"><span data-stu-id="8adc8-290">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="8adc8-291">В случае отрицательного числового аргумента `Int` функция возвращает первое отрицательное целое число, которое меньше или равно числу `Fix` ; функция возвращает первое отрицательное целое число, которое больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-291">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="8adc8-292">В следующем примере необходимо указать `Option Strict Off` , так как неявное преобразование из типа `Integer` `Double` в тип не допускается `Option Strict On`в следующих условиях:</span><span class="sxs-lookup"><span data-stu-id="8adc8-292">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="8adc8-293">`CInt` Функцию можно использовать для явного преобразования других типов данных в тип `Integer` с помощью `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-293">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="8adc8-294">`CInt` Однако округляет до ближайшего целого числа вместо усечения дробной части чисел.</span><span class="sxs-lookup"><span data-stu-id="8adc8-294">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="8adc8-295">Например:</span><span class="sxs-lookup"><span data-stu-id="8adc8-295">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="8adc8-296">`CInt` Функцию можно использовать для результата `Fix` вызова функции или `Int` , чтобы выполнить явное преобразование в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="8adc8-296">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="8adc8-297">Например:</span><span class="sxs-lookup"><span data-stu-id="8adc8-297">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="8adc8-298">Дополнительные сведения о см `CInt`. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="8adc8-298">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-299">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="8adc8-299">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-300">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="8adc8-300">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-301">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-301">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="8adc8-302">Сводка типов данных (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-302">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="8adc8-303">Сводка по математическим функциям</span><span class="sxs-lookup"><span data-stu-id="8adc8-303">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="8adc8-304">Математические функции (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-304">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="8adc8-305">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="8adc8-305">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-306">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-306">Required.</span></span> <span data-ttu-id="8adc8-307">Число типа <see langword="Single" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="8adc8-307">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="8adc8-308">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-308">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-309">Целая часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-309">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-310">Обе функции `Fix` `Number` и удаляют дробную часть и возвращают результирующее целочисленное значение. `Int`</span><span class="sxs-lookup"><span data-stu-id="8adc8-310">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="8adc8-311">Различие между `Int` функциями и `Fix` заключается в том, `Number` что если имеет `Int` отрицательное значение, возвращает `Fix` первое отрицательное целое `Number`число, которое меньше или равно, тогда как возвращает первое отрицательное целое число. больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-311">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="8adc8-312">Например, `Int` преобразует-8,4 в-9 и `Fix` преобразует-8,4 в-8.</span><span class="sxs-lookup"><span data-stu-id="8adc8-312">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="8adc8-313">`Fix(number)`эквивалентно`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="8adc8-313">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="8adc8-314">Начиная с Visual Basic 15,8, преобразование `Single`производительности в целое число оптимизируется, если передать значение, возвращаемое `Fix` методом, в любую из [целочисленных функций](~/docs/visual-basic/language-reference/functions/conversion-functions.md) `Single` преобразования или если возвращенное значение Функция `Fix` by автоматически преобразуется в целое число с [параметром Option](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) , равным OFF.</span><span class="sxs-lookup"><span data-stu-id="8adc8-314">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="8adc8-315">Эта оптимизация позволяет коду выполняться быстрее — до двух раз быстрее для кода, который выполняет большое количество преобразований в целочисленные типы.</span><span class="sxs-lookup"><span data-stu-id="8adc8-315">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="8adc8-316">В следующем примере показано такое Оптимизированное преобразование:</span><span class="sxs-lookup"><span data-stu-id="8adc8-316">The following example illustrates such an optimized conversion:</span></span>
   
```vb
Dim s As Single = 173.7619
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="8adc8-317">В этом примере показано, `Int` как `Fix` функции и возвращают целочисленные части чисел.</span><span class="sxs-lookup"><span data-stu-id="8adc8-317">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="8adc8-318">В случае отрицательного числового аргумента `Int` функция возвращает первое отрицательное целое число, которое меньше или равно числу `Fix` ; функция возвращает первое отрицательное целое число, которое больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-318">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="8adc8-319">В следующем примере необходимо указать `Option Strict Off` , так как неявное преобразование из типа `Integer` `Double` в тип не допускается `Option Strict On`в следующих условиях:</span><span class="sxs-lookup"><span data-stu-id="8adc8-319">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="8adc8-320">`CInt` Функцию можно использовать для явного преобразования других типов данных в тип `Integer` с помощью `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-320">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="8adc8-321">`CInt` Однако округляет до ближайшего целого числа вместо усечения дробной части чисел.</span><span class="sxs-lookup"><span data-stu-id="8adc8-321">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="8adc8-322">Например:</span><span class="sxs-lookup"><span data-stu-id="8adc8-322">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="8adc8-323">`CInt` Функцию можно использовать для результата `Fix` вызова функции или `Int` , чтобы выполнить явное преобразование в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="8adc8-323">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="8adc8-324">Например:</span><span class="sxs-lookup"><span data-stu-id="8adc8-324">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="8adc8-325">Дополнительные сведения о см `CInt`. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="8adc8-325">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-326">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="8adc8-326">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-327">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="8adc8-327">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-328">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-328">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="8adc8-329">Сводка типов данных (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-329">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="8adc8-330">Сводка по математическим функциям</span><span class="sxs-lookup"><span data-stu-id="8adc8-330">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="8adc8-331">Математические функции (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-331">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="8adc8-332">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="8adc8-332">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8adc8-333">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-333">Returns a string representing the hexadecimal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-334">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-334">Required.</span></span> <span data-ttu-id="8adc8-335">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="8adc8-335">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="8adc8-336">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-336">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-337">Строка, представляющая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-337">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-338">Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.</span><span class="sxs-lookup"><span data-stu-id="8adc8-338">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8adc8-339">Если `Number` имеет значение</span><span class="sxs-lookup"><span data-stu-id="8adc8-339">If `Number` is</span></span>|<span data-ttu-id="8adc8-340">Шестнадцатеричные возвраты</span><span class="sxs-lookup"><span data-stu-id="8adc8-340">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="8adc8-341">Empty</span><span class="sxs-lookup"><span data-stu-id="8adc8-341">Empty</span></span>|<span data-ttu-id="8adc8-342">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="8adc8-342">Zero (0)</span></span>|  
|<span data-ttu-id="8adc8-343">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="8adc8-343">Any numeric value</span></span>|<span data-ttu-id="8adc8-344">До шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="8adc8-344">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="8adc8-345">Шестнадцатеричные числа можно представлять непосредственно, перед числами в правильном диапазоне с `&H`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-345">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="8adc8-346">Например, `&H10` представляет десятичное число 16 в шестнадцатеричной нотации.</span><span class="sxs-lookup"><span data-stu-id="8adc8-346">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-347">В этом примере `Hex` функция используется для возврата шестнадцатеричного значения числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-347">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-348"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="8adc8-348"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-349"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-349"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-350">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-350">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="8adc8-351">Практическое руководство. Преобразование шестнадцатеричных строк в числа</span><span class="sxs-lookup"><span data-stu-id="8adc8-351">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-352">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-352">Required.</span></span> <span data-ttu-id="8adc8-353">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="8adc8-353">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="8adc8-354">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-354">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-355">Строка, представляющая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-355">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-356">Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.</span><span class="sxs-lookup"><span data-stu-id="8adc8-356">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8adc8-357">Если `Number` имеет значение</span><span class="sxs-lookup"><span data-stu-id="8adc8-357">If `Number` is</span></span>|<span data-ttu-id="8adc8-358">Шестнадцатеричные возвраты</span><span class="sxs-lookup"><span data-stu-id="8adc8-358">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="8adc8-359">Empty</span><span class="sxs-lookup"><span data-stu-id="8adc8-359">Empty</span></span>|<span data-ttu-id="8adc8-360">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="8adc8-360">Zero (0)</span></span>|  
|<span data-ttu-id="8adc8-361">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="8adc8-361">Any numeric value</span></span>|<span data-ttu-id="8adc8-362">До шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="8adc8-362">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="8adc8-363">Шестнадцатеричные числа можно представлять непосредственно, перед числами в правильном диапазоне с `&H`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-363">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="8adc8-364">Например, `&H10` представляет десятичное число 16 в шестнадцатеричной нотации.</span><span class="sxs-lookup"><span data-stu-id="8adc8-364">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-365">В этом примере `Hex` функция используется для возврата шестнадцатеричного значения числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-365">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-366"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="8adc8-366"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-367"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-367"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-368">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-368">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="8adc8-369">Практическое руководство. Преобразование шестнадцатеричных строк в числа</span><span class="sxs-lookup"><span data-stu-id="8adc8-369">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-370">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-370">Required.</span></span> <span data-ttu-id="8adc8-371">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="8adc8-371">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="8adc8-372">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-372">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-373">Строка, представляющая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-373">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-374">Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.</span><span class="sxs-lookup"><span data-stu-id="8adc8-374">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8adc8-375">Если `Number` имеет значение</span><span class="sxs-lookup"><span data-stu-id="8adc8-375">If `Number` is</span></span>|<span data-ttu-id="8adc8-376">Шестнадцатеричные возвраты</span><span class="sxs-lookup"><span data-stu-id="8adc8-376">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="8adc8-377">Empty</span><span class="sxs-lookup"><span data-stu-id="8adc8-377">Empty</span></span>|<span data-ttu-id="8adc8-378">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="8adc8-378">Zero (0)</span></span>|  
|<span data-ttu-id="8adc8-379">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="8adc8-379">Any numeric value</span></span>|<span data-ttu-id="8adc8-380">До шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="8adc8-380">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="8adc8-381">Шестнадцатеричные числа можно представлять непосредственно, перед числами в правильном диапазоне с `&H`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-381">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="8adc8-382">Например, `&H10` представляет десятичное число 16 в шестнадцатеричной нотации.</span><span class="sxs-lookup"><span data-stu-id="8adc8-382">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-383">В этом примере `Hex` функция используется для возврата шестнадцатеричного значения числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-383">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-384"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="8adc8-384"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-385"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-385"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-386">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-386">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="8adc8-387">Практическое руководство. Преобразование шестнадцатеричных строк в числа</span><span class="sxs-lookup"><span data-stu-id="8adc8-387">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-388">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-388">Required.</span></span> <span data-ttu-id="8adc8-389">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="8adc8-389">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="8adc8-390">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-390">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-391">Строка, представляющая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-391">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-392">Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.</span><span class="sxs-lookup"><span data-stu-id="8adc8-392">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8adc8-393">Если `Number` имеет значение</span><span class="sxs-lookup"><span data-stu-id="8adc8-393">If `Number` is</span></span>|<span data-ttu-id="8adc8-394">Шестнадцатеричные возвраты</span><span class="sxs-lookup"><span data-stu-id="8adc8-394">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="8adc8-395">Empty</span><span class="sxs-lookup"><span data-stu-id="8adc8-395">Empty</span></span>|<span data-ttu-id="8adc8-396">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="8adc8-396">Zero (0)</span></span>|  
|<span data-ttu-id="8adc8-397">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="8adc8-397">Any numeric value</span></span>|<span data-ttu-id="8adc8-398">До шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="8adc8-398">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="8adc8-399">Шестнадцатеричные числа можно представлять непосредственно, перед числами в правильном диапазоне с `&H`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-399">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="8adc8-400">Например, `&H10` представляет десятичное число 16 в шестнадцатеричной нотации.</span><span class="sxs-lookup"><span data-stu-id="8adc8-400">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-401">В этом примере `Hex` функция используется для возврата шестнадцатеричного значения числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-401">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-402"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="8adc8-402"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-403"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-403"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-404">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-404">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="8adc8-405">Практическое руководство. Преобразование шестнадцатеричных строк в числа</span><span class="sxs-lookup"><span data-stu-id="8adc8-405">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-406">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-406">Required.</span></span> <span data-ttu-id="8adc8-407">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="8adc8-407">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="8adc8-408">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-408">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-409">Строка, представляющая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-409">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-410">Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.</span><span class="sxs-lookup"><span data-stu-id="8adc8-410">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8adc8-411">Если `Number` имеет значение</span><span class="sxs-lookup"><span data-stu-id="8adc8-411">If `Number` is</span></span>|<span data-ttu-id="8adc8-412">Шестнадцатеричные возвраты</span><span class="sxs-lookup"><span data-stu-id="8adc8-412">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="8adc8-413">Empty</span><span class="sxs-lookup"><span data-stu-id="8adc8-413">Empty</span></span>|<span data-ttu-id="8adc8-414">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="8adc8-414">Zero (0)</span></span>|  
|<span data-ttu-id="8adc8-415">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="8adc8-415">Any numeric value</span></span>|<span data-ttu-id="8adc8-416">До шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="8adc8-416">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="8adc8-417">Шестнадцатеричные числа можно представлять непосредственно, перед числами в правильном диапазоне с `&H`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-417">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="8adc8-418">Например, `&H10` представляет десятичное число 16 в шестнадцатеричной нотации.</span><span class="sxs-lookup"><span data-stu-id="8adc8-418">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-419">В этом примере `Hex` функция используется для возврата шестнадцатеричного значения числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-419">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-420"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="8adc8-420"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-421"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-421"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-422">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-422">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="8adc8-423">Практическое руководство. Преобразование шестнадцатеричных строк в числа</span><span class="sxs-lookup"><span data-stu-id="8adc8-423">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-424">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-424">Required.</span></span> <span data-ttu-id="8adc8-425">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="8adc8-425">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="8adc8-426">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-426">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-427">Строка, представляющая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-427">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-428">Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.</span><span class="sxs-lookup"><span data-stu-id="8adc8-428">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8adc8-429">Если `Number` имеет значение</span><span class="sxs-lookup"><span data-stu-id="8adc8-429">If `Number` is</span></span>|<span data-ttu-id="8adc8-430">Шестнадцатеричные возвраты</span><span class="sxs-lookup"><span data-stu-id="8adc8-430">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="8adc8-431">Empty</span><span class="sxs-lookup"><span data-stu-id="8adc8-431">Empty</span></span>|<span data-ttu-id="8adc8-432">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="8adc8-432">Zero (0)</span></span>|  
|<span data-ttu-id="8adc8-433">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="8adc8-433">Any numeric value</span></span>|<span data-ttu-id="8adc8-434">До шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="8adc8-434">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="8adc8-435">Шестнадцатеричные числа можно представлять непосредственно, перед числами в правильном диапазоне с `&H`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-435">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="8adc8-436">Например, `&H10` представляет десятичное число 16 в шестнадцатеричной нотации.</span><span class="sxs-lookup"><span data-stu-id="8adc8-436">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-437">В этом примере `Hex` функция используется для возврата шестнадцатеричного значения числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-437">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-438"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="8adc8-438"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-439"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-439"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-440">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-440">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="8adc8-441">Практическое руководство. Преобразование шестнадцатеричных строк в числа</span><span class="sxs-lookup"><span data-stu-id="8adc8-441">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-442">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-442">Required.</span></span> <span data-ttu-id="8adc8-443">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="8adc8-443">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="8adc8-444">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-444">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-445">Строка, представляющая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-445">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-446">Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.</span><span class="sxs-lookup"><span data-stu-id="8adc8-446">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8adc8-447">Если `Number` имеет значение</span><span class="sxs-lookup"><span data-stu-id="8adc8-447">If `Number` is</span></span>|<span data-ttu-id="8adc8-448">Шестнадцатеричные возвраты</span><span class="sxs-lookup"><span data-stu-id="8adc8-448">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="8adc8-449">Empty</span><span class="sxs-lookup"><span data-stu-id="8adc8-449">Empty</span></span>|<span data-ttu-id="8adc8-450">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="8adc8-450">Zero (0)</span></span>|  
|<span data-ttu-id="8adc8-451">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="8adc8-451">Any numeric value</span></span>|<span data-ttu-id="8adc8-452">До шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="8adc8-452">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="8adc8-453">Шестнадцатеричные числа можно представлять непосредственно, перед числами в правильном диапазоне с `&H`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-453">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="8adc8-454">Например, `&H10` представляет десятичное число 16 в шестнадцатеричной нотации.</span><span class="sxs-lookup"><span data-stu-id="8adc8-454">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-455">В этом примере `Hex` функция используется для возврата шестнадцатеричного значения числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-455">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-456"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="8adc8-456"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-457"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-457"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-458">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-458">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="8adc8-459">Практическое руководство. Преобразование шестнадцатеричных строк в числа</span><span class="sxs-lookup"><span data-stu-id="8adc8-459">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-460">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-460">Required.</span></span> <span data-ttu-id="8adc8-461">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="8adc8-461">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="8adc8-462">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-462">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-463">Строка, представляющая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-463">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-464">Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.</span><span class="sxs-lookup"><span data-stu-id="8adc8-464">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8adc8-465">Если `Number` имеет значение</span><span class="sxs-lookup"><span data-stu-id="8adc8-465">If `Number` is</span></span>|<span data-ttu-id="8adc8-466">Шестнадцатеричные возвраты</span><span class="sxs-lookup"><span data-stu-id="8adc8-466">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="8adc8-467">Empty</span><span class="sxs-lookup"><span data-stu-id="8adc8-467">Empty</span></span>|<span data-ttu-id="8adc8-468">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="8adc8-468">Zero (0)</span></span>|  
|<span data-ttu-id="8adc8-469">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="8adc8-469">Any numeric value</span></span>|<span data-ttu-id="8adc8-470">До шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="8adc8-470">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="8adc8-471">Шестнадцатеричные числа можно представлять непосредственно, перед числами в правильном диапазоне с `&H`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-471">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="8adc8-472">Например, `&H10` представляет десятичное число 16 в шестнадцатеричной нотации.</span><span class="sxs-lookup"><span data-stu-id="8adc8-472">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-473">В этом примере `Hex` функция используется для возврата шестнадцатеричного значения числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-473">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-474"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="8adc8-474"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-475"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-475"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-476">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-476">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="8adc8-477">Практическое руководство. Преобразование шестнадцатеричных строк в числа</span><span class="sxs-lookup"><span data-stu-id="8adc8-477">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-478">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-478">Required.</span></span> <span data-ttu-id="8adc8-479">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="8adc8-479">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="8adc8-480">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-480">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-481">Строка, представляющая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-481">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-482">Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.</span><span class="sxs-lookup"><span data-stu-id="8adc8-482">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8adc8-483">Если `Number` имеет значение</span><span class="sxs-lookup"><span data-stu-id="8adc8-483">If `Number` is</span></span>|<span data-ttu-id="8adc8-484">Шестнадцатеричные возвраты</span><span class="sxs-lookup"><span data-stu-id="8adc8-484">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="8adc8-485">Empty</span><span class="sxs-lookup"><span data-stu-id="8adc8-485">Empty</span></span>|<span data-ttu-id="8adc8-486">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="8adc8-486">Zero (0)</span></span>|  
|<span data-ttu-id="8adc8-487">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="8adc8-487">Any numeric value</span></span>|<span data-ttu-id="8adc8-488">До шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="8adc8-488">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="8adc8-489">Шестнадцатеричные числа можно представлять непосредственно, перед числами в правильном диапазоне с `&H`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-489">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="8adc8-490">Например, `&H10` представляет десятичное число 16 в шестнадцатеричной нотации.</span><span class="sxs-lookup"><span data-stu-id="8adc8-490">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-491">В этом примере `Hex` функция используется для возврата шестнадцатеричного значения числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-491">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-492"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="8adc8-492"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-493"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-493"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-494">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-494">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="8adc8-495">Практическое руководство. Преобразование шестнадцатеричных строк в числа</span><span class="sxs-lookup"><span data-stu-id="8adc8-495">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8adc8-496">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-496">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-497">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-497">Required.</span></span> <span data-ttu-id="8adc8-498">Число типа <see langword="Decimal" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="8adc8-498">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="8adc8-499">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-499">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-500">Целая часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-500">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-501">Обе функции `Fix` `Number` и удаляют дробную часть и возвращают результирующее целочисленное значение. `Int`</span><span class="sxs-lookup"><span data-stu-id="8adc8-501">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="8adc8-502">Различие между `Int` функциями и `Fix` заключается в том, `Number` что если имеет `Int` отрицательное значение, возвращает `Fix` первое отрицательное целое `Number`число, которое меньше или равно, тогда как возвращает первое отрицательное целое число. больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-502">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="8adc8-503">Например, `Int` преобразует-8,4 в-9 и `Fix` преобразует-8,4 в-8.</span><span class="sxs-lookup"><span data-stu-id="8adc8-503">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="8adc8-504">`Fix(number)`эквивалентно`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="8adc8-504">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="8adc8-505">В этом примере показано, `Int` как `Fix` функции и возвращают целочисленные части чисел.</span><span class="sxs-lookup"><span data-stu-id="8adc8-505">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="8adc8-506">В случае отрицательного числового аргумента `Int` функция возвращает первое отрицательное целое число, которое меньше или равно числу `Fix` ; функция возвращает первое отрицательное целое число, которое больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-506">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="8adc8-507">В следующем примере необходимо указать `Option Strict Off` , так как неявное преобразование из типа `Integer` `Double` в тип не допускается `Option Strict On`в следующих условиях:</span><span class="sxs-lookup"><span data-stu-id="8adc8-507">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="8adc8-508">`CInt` Функцию можно использовать для явного преобразования других типов данных в тип `Integer` с помощью `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-508">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="8adc8-509">`CInt` Однако округляет до ближайшего целого числа вместо усечения дробной части чисел.</span><span class="sxs-lookup"><span data-stu-id="8adc8-509">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="8adc8-510">Например:</span><span class="sxs-lookup"><span data-stu-id="8adc8-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="8adc8-511">`CInt` Функцию можно использовать для результата `Fix` вызова функции или `Int` , чтобы выполнить явное преобразование в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="8adc8-511">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="8adc8-512">Например:</span><span class="sxs-lookup"><span data-stu-id="8adc8-512">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="8adc8-513">Дополнительные сведения о см `CInt`. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="8adc8-513">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-514">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="8adc8-514">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-515">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="8adc8-515">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-516">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-516">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="8adc8-517">Сводка типов данных (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-517">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="8adc8-518">Сводка по математическим функциям</span><span class="sxs-lookup"><span data-stu-id="8adc8-518">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="8adc8-519">Математические функции (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-519">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="8adc8-520">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="8adc8-520">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-521">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-521">Required.</span></span> <span data-ttu-id="8adc8-522">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="8adc8-522">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="8adc8-523">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-523">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-524">Целая часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-524">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-525">Обе функции `Fix` `Number` и удаляют дробную часть и возвращают результирующее целочисленное значение. `Int`</span><span class="sxs-lookup"><span data-stu-id="8adc8-525">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="8adc8-526">Различие между `Int` функциями и `Fix` заключается в том, `Number` что если имеет `Int` отрицательное значение, возвращает `Fix` первое отрицательное целое `Number`число, которое меньше или равно, тогда как возвращает первое отрицательное целое число. больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-526">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="8adc8-527">Например, `Int` преобразует-8,4 в-9 и `Fix` преобразует-8,4 в-8.</span><span class="sxs-lookup"><span data-stu-id="8adc8-527">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="8adc8-528">`Fix(number)`эквивалентно`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="8adc8-528">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="8adc8-529">Начиная с Visual Basic 15,8, производительность преобразования типа "двойное в целое число" оптимизирована, если передать значение, возвращаемое `Int` методом, в любую из [целочисленных функций преобразования](~/docs/visual-basic/language-reference/functions/conversion-functions.md)или значение `Int` Double, возвращаемое автоматически преобразуется в целое число с [параметром Option](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) , равным OFF.</span><span class="sxs-lookup"><span data-stu-id="8adc8-529">Starting with Visual Basic 15.8, the performance of Double-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the Double value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="8adc8-530">Эта оптимизация позволяет коду выполняться быстрее — до двух раз быстрее для кода, который выполняет большое количество преобразований в целочисленные типы.</span><span class="sxs-lookup"><span data-stu-id="8adc8-530">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="8adc8-531">В следующем примере показано такое Оптимизированное преобразование:</span><span class="sxs-lookup"><span data-stu-id="8adc8-531">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim dbl As Double = 175.7619
Dim i3 As Integer = CInt(Int(dbl))         ' Result: 175
```  
  
## Examples  
 <span data-ttu-id="8adc8-532">В этом примере показано, `Int` как `Fix` функции и возвращают целочисленные части чисел.</span><span class="sxs-lookup"><span data-stu-id="8adc8-532">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="8adc8-533">В случае отрицательного числового аргумента `Int` функция возвращает первое отрицательное целое число, которое меньше или равно числу `Fix` ; функция возвращает первое отрицательное целое число, которое больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-533">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="8adc8-534">В следующем примере необходимо указать `Option Strict Off` , так как неявное преобразование из типа `Integer` `Double` в тип не допускается `Option Strict On`в следующих условиях:</span><span class="sxs-lookup"><span data-stu-id="8adc8-534">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="8adc8-535">`CInt` Функцию можно использовать для явного преобразования других типов данных в тип `Integer` с помощью `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-535">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="8adc8-536">`CInt` Однако округляет до ближайшего целого числа вместо усечения дробной части чисел.</span><span class="sxs-lookup"><span data-stu-id="8adc8-536">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="8adc8-537">Например:</span><span class="sxs-lookup"><span data-stu-id="8adc8-537">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="8adc8-538">`CInt` Функцию можно использовать для результата `Fix` вызова функции или `Int` , чтобы выполнить явное преобразование в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="8adc8-538">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="8adc8-539">Например:</span><span class="sxs-lookup"><span data-stu-id="8adc8-539">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="8adc8-540">Дополнительные сведения о см `CInt`. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="8adc8-540">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-541">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="8adc8-541">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-542">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="8adc8-542">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-543">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-543">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="8adc8-544">Сводка типов данных (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-544">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="8adc8-545">Сводка по математическим функциям</span><span class="sxs-lookup"><span data-stu-id="8adc8-545">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="8adc8-546">Математические функции (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-546">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="8adc8-547">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="8adc8-547">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-548">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-548">Required.</span></span> <span data-ttu-id="8adc8-549">Число типа <see langword="Short" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="8adc8-549">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="8adc8-550">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-550">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-551">Целая часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-551">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-552">Обе функции `Fix` `Number` и удаляют дробную часть и возвращают результирующее целочисленное значение. `Int`</span><span class="sxs-lookup"><span data-stu-id="8adc8-552">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="8adc8-553">Различие между `Int` функциями и `Fix` заключается в том, `Number` что если имеет `Int` отрицательное значение, возвращает `Fix` первое отрицательное целое `Number`число, которое меньше или равно, тогда как возвращает первое отрицательное целое число. больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-553">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="8adc8-554">Например, `Int` преобразует-8,4 в-9 и `Fix` преобразует-8,4 в-8.</span><span class="sxs-lookup"><span data-stu-id="8adc8-554">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="8adc8-555">`Fix(number)`эквивалентно`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="8adc8-555">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-556">В этом примере показано, `Int` как `Fix` функции и возвращают целочисленные части чисел.</span><span class="sxs-lookup"><span data-stu-id="8adc8-556">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="8adc8-557">В случае отрицательного числового аргумента `Int` функция возвращает первое отрицательное целое число, которое меньше или равно числу `Fix` ; функция возвращает первое отрицательное целое число, которое больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-557">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="8adc8-558">В следующем примере необходимо указать `Option Strict Off` , так как неявное преобразование из типа `Integer` `Double` в тип не допускается `Option Strict On`в следующих условиях:</span><span class="sxs-lookup"><span data-stu-id="8adc8-558">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="8adc8-559">`CInt` Функцию можно использовать для явного преобразования других типов данных в тип `Integer` с помощью `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-559">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="8adc8-560">`CInt` Однако округляет до ближайшего целого числа вместо усечения дробной части чисел.</span><span class="sxs-lookup"><span data-stu-id="8adc8-560">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="8adc8-561">Например:</span><span class="sxs-lookup"><span data-stu-id="8adc8-561">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="8adc8-562">`CInt` Функцию можно использовать для результата `Fix` вызова функции или `Int` , чтобы выполнить явное преобразование в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="8adc8-562">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="8adc8-563">Например:</span><span class="sxs-lookup"><span data-stu-id="8adc8-563">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="8adc8-564">Дополнительные сведения о см `CInt`. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="8adc8-564">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-565">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="8adc8-565">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-566">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="8adc8-566">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-567">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-567">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="8adc8-568">Сводка типов данных (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-568">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="8adc8-569">Сводка по математическим функциям</span><span class="sxs-lookup"><span data-stu-id="8adc8-569">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="8adc8-570">Математические функции (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-570">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="8adc8-571">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="8adc8-571">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-572">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-572">Required.</span></span> <span data-ttu-id="8adc8-573">Число типа <see langword="Integer" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="8adc8-573">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="8adc8-574">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-574">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-575">Целая часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-575">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-576">Обе функции `Fix` `Number` и удаляют дробную часть и возвращают результирующее целочисленное значение. `Int`</span><span class="sxs-lookup"><span data-stu-id="8adc8-576">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="8adc8-577">Различие между `Int` функциями и `Fix` заключается в том, `Number` что если имеет `Int` отрицательное значение, возвращает `Fix` первое отрицательное целое `Number`число, которое меньше или равно, тогда как возвращает первое отрицательное целое число. больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-577">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="8adc8-578">Например, `Int` преобразует-8,4 в-9 и `Fix` преобразует-8,4 в-8.</span><span class="sxs-lookup"><span data-stu-id="8adc8-578">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="8adc8-579">`Fix(number)`эквивалентно`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="8adc8-579">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-580">В этом примере показано, `Int` как `Fix` функции и возвращают целочисленные части чисел.</span><span class="sxs-lookup"><span data-stu-id="8adc8-580">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="8adc8-581">В случае отрицательного числового аргумента `Int` функция возвращает первое отрицательное целое число, которое меньше или равно числу `Fix` ; функция возвращает первое отрицательное целое число, которое больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-581">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="8adc8-582">В следующем примере необходимо указать `Option Strict Off` , так как неявное преобразование из типа `Integer` `Double` в тип не допускается `Option Strict On`в следующих условиях:</span><span class="sxs-lookup"><span data-stu-id="8adc8-582">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="8adc8-583">`CInt` Функцию можно использовать для явного преобразования других типов данных в тип `Integer` с помощью `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-583">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="8adc8-584">`CInt` Однако округляет до ближайшего целого числа вместо усечения дробной части чисел.</span><span class="sxs-lookup"><span data-stu-id="8adc8-584">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="8adc8-585">Например:</span><span class="sxs-lookup"><span data-stu-id="8adc8-585">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="8adc8-586">`CInt` Функцию можно использовать для результата `Fix` вызова функции или `Int` , чтобы выполнить явное преобразование в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="8adc8-586">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="8adc8-587">Например:</span><span class="sxs-lookup"><span data-stu-id="8adc8-587">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="8adc8-588">Дополнительные сведения о см `CInt`. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="8adc8-588">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-589">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="8adc8-589">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-590">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="8adc8-590">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-591">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-591">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="8adc8-592">Сводка типов данных (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-592">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="8adc8-593">Сводка по математическим функциям</span><span class="sxs-lookup"><span data-stu-id="8adc8-593">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="8adc8-594">Математические функции (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-594">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="8adc8-595">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="8adc8-595">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-596">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-596">Required.</span></span> <span data-ttu-id="8adc8-597">Число типа <see langword="Long" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="8adc8-597">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="8adc8-598">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-598">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-599">Целая часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-599">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-600">Обе функции `Fix` `Number` и удаляют дробную часть и возвращают результирующее целочисленное значение. `Int`</span><span class="sxs-lookup"><span data-stu-id="8adc8-600">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="8adc8-601">Различие между `Int` функциями и `Fix` заключается в том, `Number` что если имеет `Int` отрицательное значение, возвращает `Fix` первое отрицательное целое `Number`число, которое меньше или равно, тогда как возвращает первое отрицательное целое число. больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-601">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="8adc8-602">Например, `Int` преобразует-8,4 в-9 и `Fix` преобразует-8,4 в-8.</span><span class="sxs-lookup"><span data-stu-id="8adc8-602">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="8adc8-603">`Fix(number)`эквивалентно`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="8adc8-603">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-604">В этом примере показано, `Int` как `Fix` функции и возвращают целочисленные части чисел.</span><span class="sxs-lookup"><span data-stu-id="8adc8-604">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="8adc8-605">В случае отрицательного числового аргумента `Int` функция возвращает первое отрицательное целое число, которое меньше или равно числу `Fix` ; функция возвращает первое отрицательное целое число, которое больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-605">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="8adc8-606">В следующем примере необходимо указать `Option Strict Off` , так как неявное преобразование из типа `Integer` `Double` в тип не допускается `Option Strict On`в следующих условиях:</span><span class="sxs-lookup"><span data-stu-id="8adc8-606">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="8adc8-607">`CInt` Функцию можно использовать для явного преобразования других типов данных в тип `Integer` с помощью `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-607">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="8adc8-608">`CInt` Однако округляет до ближайшего целого числа вместо усечения дробной части чисел.</span><span class="sxs-lookup"><span data-stu-id="8adc8-608">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="8adc8-609">Например:</span><span class="sxs-lookup"><span data-stu-id="8adc8-609">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="8adc8-610">`CInt` Функцию можно использовать для результата `Fix` вызова функции или `Int` , чтобы выполнить явное преобразование в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="8adc8-610">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="8adc8-611">Например:</span><span class="sxs-lookup"><span data-stu-id="8adc8-611">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="8adc8-612">Дополнительные сведения о см `CInt`. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="8adc8-612">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-613">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="8adc8-613">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-614">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="8adc8-614">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-615">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-615">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="8adc8-616">Сводка типов данных (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-616">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="8adc8-617">Сводка по математическим функциям</span><span class="sxs-lookup"><span data-stu-id="8adc8-617">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="8adc8-618">Математические функции (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-618">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="8adc8-619">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="8adc8-619">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-620">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-620">Required.</span></span> <span data-ttu-id="8adc8-621">Число типа <see langword="Object" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="8adc8-621">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="8adc8-622">Если параметр <paramref name="Number" /> имеет значение <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="8adc8-622">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="8adc8-623">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-623">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-624">Целая часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-624">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-625">Обе функции `Fix` `Number` и удаляют дробную часть и возвращают результирующее целочисленное значение. `Int`</span><span class="sxs-lookup"><span data-stu-id="8adc8-625">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="8adc8-626">Различие между `Int` функциями и `Fix` заключается в том, `Number` что если имеет `Int` отрицательное значение, возвращает `Fix` первое отрицательное целое `Number`число, которое меньше или равно, тогда как возвращает первое отрицательное целое число. больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-626">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="8adc8-627">Например, `Int` преобразует-8,4 в-9 и `Fix` преобразует-8,4 в-8.</span><span class="sxs-lookup"><span data-stu-id="8adc8-627">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="8adc8-628">`Fix(number)`эквивалентно`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="8adc8-628">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="8adc8-629">Начиная с `Number` Visual Basic 15,8, если аргумент является объектом, тип среды выполнения которого — `Double` или `Single`, то производительность преобразования с плавающей точкой в целое оптимизирована, `Int` если передать значение, возвращенное для любой из [целочисленных функций преобразования](~/docs/visual-basic/language-reference/functions/conversion-functions.md)или, если значение, возвращаемое функцией `Int` , автоматически преобразуется в целое число с [параметром Option](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) , равным OFF.</span><span class="sxs-lookup"><span data-stu-id="8adc8-629">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="8adc8-630">Эта оптимизация позволяет коду выполняться быстрее — до двух раз быстрее для кода, который выполняет большое количество преобразований в целочисленные типы.</span><span class="sxs-lookup"><span data-stu-id="8adc8-630">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="8adc8-631">Например:</span><span class="sxs-lookup"><span data-stu-id="8adc8-631">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Int(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Int(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="8adc8-632">В этом примере показано, `Int` как `Fix` функции и возвращают целочисленные части чисел.</span><span class="sxs-lookup"><span data-stu-id="8adc8-632">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="8adc8-633">В случае отрицательного числового аргумента `Int` функция возвращает первое отрицательное целое число, которое меньше или равно числу `Fix` ; функция возвращает первое отрицательное целое число, которое больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-633">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="8adc8-634">В следующем примере необходимо указать `Option Strict Off` , так как неявное преобразование из типа `Integer` `Double` в тип не допускается `Option Strict On`в следующих условиях:</span><span class="sxs-lookup"><span data-stu-id="8adc8-634">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="8adc8-635">`CInt` Функцию можно использовать для явного преобразования других типов данных в тип `Integer` с помощью `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-635">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="8adc8-636">`CInt` Однако округляет до ближайшего целого числа вместо усечения дробной части чисел.</span><span class="sxs-lookup"><span data-stu-id="8adc8-636">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="8adc8-637">Например:</span><span class="sxs-lookup"><span data-stu-id="8adc8-637">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="8adc8-638">`CInt` Функцию можно использовать для результата `Fix` вызова функции или `Int` , чтобы выполнить явное преобразование в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="8adc8-638">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="8adc8-639">Например:</span><span class="sxs-lookup"><span data-stu-id="8adc8-639">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="8adc8-640">Дополнительные сведения о см `CInt`. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="8adc8-640">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-641">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="8adc8-641">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-642">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="8adc8-642">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-643">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-643">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="8adc8-644">Сводка типов данных (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-644">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="8adc8-645">Сводка по математическим функциям</span><span class="sxs-lookup"><span data-stu-id="8adc8-645">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="8adc8-646">Математические функции (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-646">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="8adc8-647">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="8adc8-647">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-648">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-648">Required.</span></span> <span data-ttu-id="8adc8-649">Число типа <see langword="Single" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="8adc8-649">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="8adc8-650">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-650">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-651">Целая часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-651">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-652">Обе функции `Fix` `Number` и удаляют дробную часть и возвращают результирующее целочисленное значение. `Int`</span><span class="sxs-lookup"><span data-stu-id="8adc8-652">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="8adc8-653">Различие между `Int` функциями и `Fix` заключается в том, `Number` что если имеет `Int` отрицательное значение, возвращает `Fix` первое отрицательное целое `Number`число, которое меньше или равно, тогда как возвращает первое отрицательное целое число. больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-653">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="8adc8-654">Например, `Int` преобразует-8,4 в-9 и `Fix` преобразует-8,4 в-8.</span><span class="sxs-lookup"><span data-stu-id="8adc8-654">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="8adc8-655">`Fix(number)`эквивалентно`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="8adc8-655">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="8adc8-656">Начиная с Visual Basic 15,8, преобразование `Single`производительности в целое число оптимизируется, если передать значение, возвращаемое `Int` методом, в любую из [целочисленных функций](~/docs/visual-basic/language-reference/functions/conversion-functions.md) `Single` преобразования или если возвращенное значение Функция `Int` by автоматически преобразуется в целое число с [параметром Option](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) , равным OFF.</span><span class="sxs-lookup"><span data-stu-id="8adc8-656">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="8adc8-657">Эта оптимизация позволяет коду выполняться быстрее — до двух раз быстрее для кода, который выполняет большое количество преобразований в целочисленные типы.</span><span class="sxs-lookup"><span data-stu-id="8adc8-657">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="8adc8-658">В следующем примере показано такое Оптимизированное преобразование:</span><span class="sxs-lookup"><span data-stu-id="8adc8-658">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim sng As Single = 175.7619
Dim i3 As Integer = CInt(Fix(sng))         ' Result: 175
```

## Examples  
 <span data-ttu-id="8adc8-659">В этом примере показано, `Int` как `Fix` функции и возвращают целочисленные части чисел.</span><span class="sxs-lookup"><span data-stu-id="8adc8-659">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="8adc8-660">В случае отрицательного числового аргумента `Int` функция возвращает первое отрицательное целое число, которое меньше или равно числу `Fix` ; функция возвращает первое отрицательное целое число, которое больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-660">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="8adc8-661">В следующем примере необходимо указать `Option Strict Off` , так как неявное преобразование из типа `Integer` `Double` в тип не допускается `Option Strict On`в следующих условиях:</span><span class="sxs-lookup"><span data-stu-id="8adc8-661">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="8adc8-662">`CInt` Функцию можно использовать для явного преобразования других типов данных в тип `Integer` с помощью `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-662">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="8adc8-663">`CInt` Однако округляет до ближайшего целого числа вместо усечения дробной части чисел.</span><span class="sxs-lookup"><span data-stu-id="8adc8-663">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="8adc8-664">Например:</span><span class="sxs-lookup"><span data-stu-id="8adc8-664">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="8adc8-665">`CInt` Функцию можно использовать для результата `Fix` вызова функции или `Int` , чтобы выполнить явное преобразование в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="8adc8-665">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="8adc8-666">Например:</span><span class="sxs-lookup"><span data-stu-id="8adc8-666">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="8adc8-667">Дополнительные сведения о см `CInt`. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="8adc8-667">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-668">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="8adc8-668">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-669">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="8adc8-669">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-670">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-670">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="8adc8-671">Сводка типов данных (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-671">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="8adc8-672">Сводка по математическим функциям</span><span class="sxs-lookup"><span data-stu-id="8adc8-672">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="8adc8-673">Математические функции (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8adc8-673">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="8adc8-674">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="8adc8-674">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8adc8-675">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-675">Returns a string representing the octal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-676">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-676">Required.</span></span> <span data-ttu-id="8adc8-677">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="8adc8-677">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="8adc8-678">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-678">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-679">Строка, представляющая восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-679">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-680">Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.</span><span class="sxs-lookup"><span data-stu-id="8adc8-680">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8adc8-681">Если число равно</span><span class="sxs-lookup"><span data-stu-id="8adc8-681">If Number is</span></span>|<span data-ttu-id="8adc8-682">Функция Oct возвращает</span><span class="sxs-lookup"><span data-stu-id="8adc8-682">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="8adc8-683">Empty</span><span class="sxs-lookup"><span data-stu-id="8adc8-683">Empty</span></span>|<span data-ttu-id="8adc8-684">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="8adc8-684">Zero (0)</span></span>|  
|<span data-ttu-id="8adc8-685">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="8adc8-685">Any other number</span></span>|<span data-ttu-id="8adc8-686">До 22 восьмеричных символов</span><span class="sxs-lookup"><span data-stu-id="8adc8-686">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="8adc8-687">Восьмеричные числа можно представить непосредственно, перед числами в правильном диапазоне с `&O`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-687">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="8adc8-688">Например, `&O10` является восьмеричной нотацией для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="8adc8-688">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-689">В этом примере `Oct` функция используется для возврата восьмеричного значения числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-689">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-690"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="8adc8-690"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-691"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-691"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="8adc8-692">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="8adc8-692">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-693">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-693">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-694">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-694">Required.</span></span> <span data-ttu-id="8adc8-695">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="8adc8-695">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="8adc8-696">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-696">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-697">Строка, представляющая восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-697">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-698">Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.</span><span class="sxs-lookup"><span data-stu-id="8adc8-698">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8adc8-699">Если число равно</span><span class="sxs-lookup"><span data-stu-id="8adc8-699">If Number is</span></span>|<span data-ttu-id="8adc8-700">Функция Oct возвращает</span><span class="sxs-lookup"><span data-stu-id="8adc8-700">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="8adc8-701">Empty</span><span class="sxs-lookup"><span data-stu-id="8adc8-701">Empty</span></span>|<span data-ttu-id="8adc8-702">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="8adc8-702">Zero (0)</span></span>|  
|<span data-ttu-id="8adc8-703">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="8adc8-703">Any other number</span></span>|<span data-ttu-id="8adc8-704">До 22 восьмеричных символов</span><span class="sxs-lookup"><span data-stu-id="8adc8-704">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="8adc8-705">Восьмеричные числа можно представить непосредственно, перед числами в правильном диапазоне с `&O`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-705">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="8adc8-706">Например, `&O10` является восьмеричной нотацией для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="8adc8-706">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-707">В этом примере `Oct` функция используется для возврата восьмеричного значения числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-707">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-708"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="8adc8-708"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-709"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-709"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="8adc8-710">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="8adc8-710">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-711">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-711">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-712">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-712">Required.</span></span> <span data-ttu-id="8adc8-713">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="8adc8-713">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="8adc8-714">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-714">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-715">Строка, представляющая восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-715">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-716">Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.</span><span class="sxs-lookup"><span data-stu-id="8adc8-716">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8adc8-717">Если число равно</span><span class="sxs-lookup"><span data-stu-id="8adc8-717">If Number is</span></span>|<span data-ttu-id="8adc8-718">Функция Oct возвращает</span><span class="sxs-lookup"><span data-stu-id="8adc8-718">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="8adc8-719">Empty</span><span class="sxs-lookup"><span data-stu-id="8adc8-719">Empty</span></span>|<span data-ttu-id="8adc8-720">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="8adc8-720">Zero (0)</span></span>|  
|<span data-ttu-id="8adc8-721">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="8adc8-721">Any other number</span></span>|<span data-ttu-id="8adc8-722">До 22 восьмеричных символов</span><span class="sxs-lookup"><span data-stu-id="8adc8-722">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="8adc8-723">Восьмеричные числа можно представить непосредственно, перед числами в правильном диапазоне с `&O`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-723">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="8adc8-724">Например, `&O10` является восьмеричной нотацией для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="8adc8-724">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-725">В этом примере `Oct` функция используется для возврата восьмеричного значения числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-725">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-726"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="8adc8-726"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-727"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-727"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="8adc8-728">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="8adc8-728">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-729">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-729">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-730">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-730">Required.</span></span> <span data-ttu-id="8adc8-731">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="8adc8-731">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="8adc8-732">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-732">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-733">Строка, представляющая восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-733">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-734">Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.</span><span class="sxs-lookup"><span data-stu-id="8adc8-734">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8adc8-735">Если число равно</span><span class="sxs-lookup"><span data-stu-id="8adc8-735">If Number is</span></span>|<span data-ttu-id="8adc8-736">Функция Oct возвращает</span><span class="sxs-lookup"><span data-stu-id="8adc8-736">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="8adc8-737">Empty</span><span class="sxs-lookup"><span data-stu-id="8adc8-737">Empty</span></span>|<span data-ttu-id="8adc8-738">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="8adc8-738">Zero (0)</span></span>|  
|<span data-ttu-id="8adc8-739">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="8adc8-739">Any other number</span></span>|<span data-ttu-id="8adc8-740">До 22 восьмеричных символов</span><span class="sxs-lookup"><span data-stu-id="8adc8-740">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="8adc8-741">Восьмеричные числа можно представить непосредственно, перед числами в правильном диапазоне с `&O`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-741">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="8adc8-742">Например, `&O10` является восьмеричной нотацией для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="8adc8-742">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-743">В этом примере `Oct` функция используется для возврата восьмеричного значения числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-743">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-744"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="8adc8-744"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-745"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-745"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="8adc8-746">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="8adc8-746">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-747">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-747">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-748">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-748">Required.</span></span> <span data-ttu-id="8adc8-749">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="8adc8-749">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="8adc8-750">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-750">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-751">Строка, представляющая восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-751">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-752">Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.</span><span class="sxs-lookup"><span data-stu-id="8adc8-752">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8adc8-753">Если число равно</span><span class="sxs-lookup"><span data-stu-id="8adc8-753">If Number is</span></span>|<span data-ttu-id="8adc8-754">Функция Oct возвращает</span><span class="sxs-lookup"><span data-stu-id="8adc8-754">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="8adc8-755">Empty</span><span class="sxs-lookup"><span data-stu-id="8adc8-755">Empty</span></span>|<span data-ttu-id="8adc8-756">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="8adc8-756">Zero (0)</span></span>|  
|<span data-ttu-id="8adc8-757">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="8adc8-757">Any other number</span></span>|<span data-ttu-id="8adc8-758">До 22 восьмеричных символов</span><span class="sxs-lookup"><span data-stu-id="8adc8-758">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="8adc8-759">Восьмеричные числа можно представить непосредственно, перед числами в правильном диапазоне с `&O`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-759">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="8adc8-760">Например, `&O10` является восьмеричной нотацией для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="8adc8-760">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-761">В этом примере `Oct` функция используется для возврата восьмеричного значения числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-761">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-762"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="8adc8-762"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-763"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-763"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="8adc8-764">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="8adc8-764">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-765">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-765">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-766">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-766">Required.</span></span> <span data-ttu-id="8adc8-767">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="8adc8-767">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="8adc8-768">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-768">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-769">Строка, представляющая восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-769">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-770">Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.</span><span class="sxs-lookup"><span data-stu-id="8adc8-770">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8adc8-771">Если число равно</span><span class="sxs-lookup"><span data-stu-id="8adc8-771">If Number is</span></span>|<span data-ttu-id="8adc8-772">Функция Oct возвращает</span><span class="sxs-lookup"><span data-stu-id="8adc8-772">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="8adc8-773">Empty</span><span class="sxs-lookup"><span data-stu-id="8adc8-773">Empty</span></span>|<span data-ttu-id="8adc8-774">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="8adc8-774">Zero (0)</span></span>|  
|<span data-ttu-id="8adc8-775">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="8adc8-775">Any other number</span></span>|<span data-ttu-id="8adc8-776">До 22 восьмеричных символов</span><span class="sxs-lookup"><span data-stu-id="8adc8-776">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="8adc8-777">Восьмеричные числа можно представить непосредственно, перед числами в правильном диапазоне с `&O`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-777">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="8adc8-778">Например, `&O10` является восьмеричной нотацией для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="8adc8-778">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-779">В этом примере `Oct` функция используется для возврата восьмеричного значения числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-779">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-780"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="8adc8-780"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-781"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-781"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="8adc8-782">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="8adc8-782">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-783">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-783">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-784">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-784">Required.</span></span> <span data-ttu-id="8adc8-785">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="8adc8-785">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="8adc8-786">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-786">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-787">Строка, представляющая восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-787">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-788">Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.</span><span class="sxs-lookup"><span data-stu-id="8adc8-788">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8adc8-789">Если число равно</span><span class="sxs-lookup"><span data-stu-id="8adc8-789">If Number is</span></span>|<span data-ttu-id="8adc8-790">Функция Oct возвращает</span><span class="sxs-lookup"><span data-stu-id="8adc8-790">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="8adc8-791">Empty</span><span class="sxs-lookup"><span data-stu-id="8adc8-791">Empty</span></span>|<span data-ttu-id="8adc8-792">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="8adc8-792">Zero (0)</span></span>|  
|<span data-ttu-id="8adc8-793">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="8adc8-793">Any other number</span></span>|<span data-ttu-id="8adc8-794">До 22 восьмеричных символов</span><span class="sxs-lookup"><span data-stu-id="8adc8-794">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="8adc8-795">Восьмеричные числа можно представить непосредственно, перед числами в правильном диапазоне с `&O`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-795">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="8adc8-796">Например, `&O10` является восьмеричной нотацией для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="8adc8-796">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-797">В этом примере `Oct` функция используется для возврата восьмеричного значения числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-797">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-798"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="8adc8-798"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-799"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-799"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="8adc8-800">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="8adc8-800">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-801">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-801">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-802">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-802">Required.</span></span> <span data-ttu-id="8adc8-803">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="8adc8-803">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="8adc8-804">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-804">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-805">Строка, представляющая восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-805">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-806">Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.</span><span class="sxs-lookup"><span data-stu-id="8adc8-806">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8adc8-807">Если число равно</span><span class="sxs-lookup"><span data-stu-id="8adc8-807">If Number is</span></span>|<span data-ttu-id="8adc8-808">Функция Oct возвращает</span><span class="sxs-lookup"><span data-stu-id="8adc8-808">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="8adc8-809">Empty</span><span class="sxs-lookup"><span data-stu-id="8adc8-809">Empty</span></span>|<span data-ttu-id="8adc8-810">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="8adc8-810">Zero (0)</span></span>|  
|<span data-ttu-id="8adc8-811">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="8adc8-811">Any other number</span></span>|<span data-ttu-id="8adc8-812">До 22 восьмеричных символов</span><span class="sxs-lookup"><span data-stu-id="8adc8-812">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="8adc8-813">Восьмеричные числа можно представить непосредственно, перед числами в правильном диапазоне с `&O`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-813">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="8adc8-814">Например, `&O10` является восьмеричной нотацией для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="8adc8-814">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-815">В этом примере `Oct` функция используется для возврата восьмеричного значения числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-815">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-816"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="8adc8-816"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-817"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-817"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="8adc8-818">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="8adc8-818">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-819">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-819">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-820">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-820">Required.</span></span> <span data-ttu-id="8adc8-821">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="8adc8-821">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="8adc8-822">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-822">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-823">Строка, представляющая восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-823">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-824">Если `Number` значение не является целым числом, оно округляется до ближайшего целого числа, а затем вычисляется.</span><span class="sxs-lookup"><span data-stu-id="8adc8-824">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8adc8-825">Если число равно</span><span class="sxs-lookup"><span data-stu-id="8adc8-825">If Number is</span></span>|<span data-ttu-id="8adc8-826">Функция Oct возвращает</span><span class="sxs-lookup"><span data-stu-id="8adc8-826">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="8adc8-827">Empty</span><span class="sxs-lookup"><span data-stu-id="8adc8-827">Empty</span></span>|<span data-ttu-id="8adc8-828">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="8adc8-828">Zero (0)</span></span>|  
|<span data-ttu-id="8adc8-829">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="8adc8-829">Any other number</span></span>|<span data-ttu-id="8adc8-830">До 22 восьмеричных символов</span><span class="sxs-lookup"><span data-stu-id="8adc8-830">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="8adc8-831">Восьмеричные числа можно представить непосредственно, перед числами в правильном диапазоне с `&O`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-831">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="8adc8-832">Например, `&O10` является восьмеричной нотацией для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="8adc8-832">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-833">В этом примере `Oct` функция используется для возврата восьмеричного значения числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-833">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-834"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="8adc8-834"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-835"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-835"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="8adc8-836">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="8adc8-836">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-837">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-837">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="8adc8-838">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-838">Required.</span></span> <span data-ttu-id="8adc8-839"><see langword="Object" />, содержащий любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="8adc8-839">An <see langword="Object" /> containing any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="8adc8-840">Возвращает представление <see langword="String" /> числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-840">Returns a <see langword="String" /> representation of a number.</span></span></summary>
        <returns><span data-ttu-id="8adc8-841">Представление <see langword="String" /> числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-841">A <see langword="String" /> representation of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-842">При преобразовании чисел в строки начальное пространство всегда резервируется для знака `Number`.</span><span class="sxs-lookup"><span data-stu-id="8adc8-842">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="8adc8-843">Если `Number` имеет положительное значение, возвращаемая строка содержит начальный пробел, а знак «плюс» является подразумеваемым.</span><span class="sxs-lookup"><span data-stu-id="8adc8-843">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="8adc8-844">Отрицательное число будет содержать знак "минус" (-) без начального пробела.</span><span class="sxs-lookup"><span data-stu-id="8adc8-844">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="8adc8-845">`Format` Используйте функцию для преобразования числовых значений, которые необходимо отформатировать как даты, время или денежные единицы или в других пользовательских форматах.</span><span class="sxs-lookup"><span data-stu-id="8adc8-845">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="8adc8-846">`Number`В `Str` отличие от функции, функция не включает в себя начальный пробел для знака. `Format`</span><span class="sxs-lookup"><span data-stu-id="8adc8-846">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8adc8-847">Функция распознает только точку (`.`) в качестве допустимого десятичного разделителя. `Str`</span><span class="sxs-lookup"><span data-stu-id="8adc8-847">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="8adc8-848">Если используются разные десятичные разделители (например, в международных приложениях), используйте `CStr` функции или `Format` для преобразования числа в строку.</span><span class="sxs-lookup"><span data-stu-id="8adc8-848">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="8adc8-849">Чтобы получить строковое представление числа в определенном языке и региональных параметрах, используйте `ToString(IFormatProvider)` метод числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-849">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="8adc8-850">Например, используйте <xref:System.Double.ToString%2A> при преобразовании значения типа `Double` в строку.</span><span class="sxs-lookup"><span data-stu-id="8adc8-850">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-851">В этом примере `Str` функция используется для `String` возврата представления числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-851">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="8adc8-852">Если положительное число преобразуется в строку, то для его знака всегда резервируется начальное пространство.</span><span class="sxs-lookup"><span data-stu-id="8adc8-852">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8adc8-853"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="8adc8-853"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="8adc8-854"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="8adc8-854"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="8adc8-855">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="8adc8-855">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-856">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-856">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8adc8-857">Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-857">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="8adc8-858">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-858">Required.</span></span> <span data-ttu-id="8adc8-859">Любое допустимое выражение<see langword="String" />, переменная <see langword="Object" /> или значение <see langword="Char" />.</span><span class="sxs-lookup"><span data-stu-id="8adc8-859">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="8adc8-860">Если <paramref name="Expression" /> имеет тип <see langword="Object" />, значение должно быть преобразуемым в <see langword="String" />. В противном случае возникает ошибка <see cref="T:System.ArgumentException" />.</span><span class="sxs-lookup"><span data-stu-id="8adc8-860">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="8adc8-861">Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-861">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="8adc8-862">Порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-862">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-863">`Val` Функция прекращает чтение строки на первом символе, который она не может распознать как часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-863">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="8adc8-864">Символы и символы, часто рассматриваемые как части числовых значений, такие как знаки доллара и запятые, не распознаются.</span><span class="sxs-lookup"><span data-stu-id="8adc8-864">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="8adc8-865">Однако функция распознает префиксы `&O` системы счисления (для восьмеричного) и `&H` (для шестнадцатеричного).</span><span class="sxs-lookup"><span data-stu-id="8adc8-865">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="8adc8-866">Пробелы, знаки табуляции и символы перевода строки удаляются из аргумента.</span><span class="sxs-lookup"><span data-stu-id="8adc8-866">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="8adc8-867">Следующий вызов возвращает значение 1615198.</span><span class="sxs-lookup"><span data-stu-id="8adc8-867">The following call returns the value 1615198.</span></span>  
  
```vb  
Val(" 1615 198th Street N.E.")   
```  
  
<span data-ttu-id="8adc8-868">Следующий вызов возвращает десятичное значение-1.</span><span class="sxs-lookup"><span data-stu-id="8adc8-868">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="8adc8-869">Функция распознает только точку (`.`) в качестве допустимого десятичного разделителя. `Val`</span><span class="sxs-lookup"><span data-stu-id="8adc8-869">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="8adc8-870">Если используются разные десятичные разделители, как в международных приложениях, используйте `CDbl` или `CInt` вместо этого для преобразования строки в число.</span><span class="sxs-lookup"><span data-stu-id="8adc8-870">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="8adc8-871">Чтобы преобразовать строковое представление числа в определенном языке и региональных параметрах в числовое значение, используйте `Parse(String, IFormatProvider)` метод числового типа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-871">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="8adc8-872">Например, используйте <xref:System.Double.Parse%2A?displayProperty=nameWithType> при преобразовании строки `Double`в.</span><span class="sxs-lookup"><span data-stu-id="8adc8-872">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
<span data-ttu-id="8adc8-873"><xref:System.InvalidCastException> Исключение может быть создано в ответ на определенные нестандартные числовые форматы.</span><span class="sxs-lookup"><span data-stu-id="8adc8-873">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="8adc8-874">Например, следующий код вызывает это исключение.</span><span class="sxs-lookup"><span data-stu-id="8adc8-874">For example, the following code raises this exception.</span></span>  

```vb
' These examples cause run-time errors.  
Console.WriteLine(Val("1.34%"))  
Console.WriteLine(Val("1.34&"))  
```

<span data-ttu-id="8adc8-875">Конфликт между числом, отформатированным `Double` как, `Integer` и `Long` символами типа и будет перехвачен компилятором, если он не содержал строку.</span><span class="sxs-lookup"><span data-stu-id="8adc8-875">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  

```vb
' These examples cause compiler errors.  
Dim m = 1.34%  
Dim n = 1.34&
```  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-876">В следующем примере `Val` функция используется для возврата чисел, содержащихся в каждой строке.</span><span class="sxs-lookup"><span data-stu-id="8adc8-876">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="8adc8-877">`Val`прекращает преобразование на первом символе, который не может быть интерпретирован как цифра, числовой модификатор, числовой знак препинания или пробел.</span><span class="sxs-lookup"><span data-stu-id="8adc8-877">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="8adc8-878"><paramref name="InputStr" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="8adc8-878"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-879"><see langword="Object" /> — это выражение типа <see langword="String" />, которое нельзя преобразовать в <paramref name="Expression" />.</span><span class="sxs-lookup"><span data-stu-id="8adc8-879"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-880">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-880">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="8adc8-881">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-881">Required.</span></span> <span data-ttu-id="8adc8-882">Любое допустимое выражение<see langword="String" />, переменная <see langword="Object" /> или значение <see langword="Char" />.</span><span class="sxs-lookup"><span data-stu-id="8adc8-882">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="8adc8-883">Если <paramref name="Expression" /> имеет тип <see langword="Object" />, значение должно быть преобразуемым в <see langword="String" />. В противном случае возникает ошибка <see cref="T:System.ArgumentException" />.</span><span class="sxs-lookup"><span data-stu-id="8adc8-883">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="8adc8-884">Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-884">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="8adc8-885">Порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-885">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-886">`Val` Функция прекращает чтение строки на первом символе, который она не может распознать как часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-886">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="8adc8-887">Символы и символы, часто рассматриваемые как части числовых значений, такие как знаки доллара и запятые, не распознаются.</span><span class="sxs-lookup"><span data-stu-id="8adc8-887">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="8adc8-888">Однако функция распознает префиксы `&O` системы счисления (для восьмеричного) и `&H` (для шестнадцатеричного).</span><span class="sxs-lookup"><span data-stu-id="8adc8-888">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="8adc8-889">Пробелы, знаки табуляции и символы перевода строки удаляются из аргумента.</span><span class="sxs-lookup"><span data-stu-id="8adc8-889">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="8adc8-890">Следующий вызов возвращает значение 1234123.</span><span class="sxs-lookup"><span data-stu-id="8adc8-890">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="8adc8-891">Следующий вызов возвращает десятичное значение-1.</span><span class="sxs-lookup"><span data-stu-id="8adc8-891">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="8adc8-892">Функция распознает только точку (`.`) в качестве допустимого десятичного разделителя. `Val`</span><span class="sxs-lookup"><span data-stu-id="8adc8-892">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="8adc8-893">Если используются другие десятичные разделители, как в международных приложениях, используйте `CDbl` или `CInt` вместо этого для преобразования строки в число.</span><span class="sxs-lookup"><span data-stu-id="8adc8-893">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="8adc8-894">Чтобы преобразовать строковое представление числа в определенном языке и региональных параметрах в числовое значение, используйте `Parse(String, IFormatProvider)` метод числового типа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-894">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="8adc8-895">Например, используйте <xref:System.Double.Parse%2A?displayProperty=nameWithType> при преобразовании строки `Double`в.</span><span class="sxs-lookup"><span data-stu-id="8adc8-895">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8adc8-896"><xref:System.InvalidCastException> Исключение может быть создано в ответ на определенные нестандартные числовые форматы.</span><span class="sxs-lookup"><span data-stu-id="8adc8-896">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="8adc8-897">Например, следующий код вызывает это исключение.</span><span class="sxs-lookup"><span data-stu-id="8adc8-897">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="8adc8-898">Конфликт между числом, отформатированным `Double` как, `Integer` и `Long` символами типа и будет перехвачен компилятором, если конфликт не содержался в строках.</span><span class="sxs-lookup"><span data-stu-id="8adc8-898">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-899">В следующем примере `Val` функция используется для возврата чисел, содержащихся в каждой строке.</span><span class="sxs-lookup"><span data-stu-id="8adc8-899">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="8adc8-900">`Val`прекращает преобразование на первом символе, который не может быть интерпретирован как цифра, числовой модификатор, числовой знак препинания или пробел.</span><span class="sxs-lookup"><span data-stu-id="8adc8-900">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="8adc8-901"><paramref name="InputStr" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="8adc8-901"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-902"><see langword="Object" /> — это выражение типа <see langword="String" />, которое нельзя преобразовать в <paramref name="Expression" />.</span><span class="sxs-lookup"><span data-stu-id="8adc8-902"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-903">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-903">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr"><span data-ttu-id="8adc8-904">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="8adc8-904">Required.</span></span> <span data-ttu-id="8adc8-905">Любое допустимое выражение<see langword="String" />, переменная <see langword="Object" /> или значение <see langword="Char" />.</span><span class="sxs-lookup"><span data-stu-id="8adc8-905">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="8adc8-906">Если <paramref name="Expression" /> имеет тип <see langword="Object" />, значение должно быть преобразуемым в <see langword="String" />. В противном случае возникает ошибка <see cref="T:System.ArgumentException" />.</span><span class="sxs-lookup"><span data-stu-id="8adc8-906">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="8adc8-907">Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-907">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="8adc8-908">Порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-908">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8adc8-909">`Val` Функция прекращает чтение строки на первом символе, который она не может распознать как часть числа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-909">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="8adc8-910">Символы и символы, часто рассматриваемые как части числовых значений, такие как знаки доллара и запятые, не распознаются.</span><span class="sxs-lookup"><span data-stu-id="8adc8-910">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="8adc8-911">Однако функция распознает префиксы `&O` системы счисления (для восьмеричного) и `&H` (для шестнадцатеричного).</span><span class="sxs-lookup"><span data-stu-id="8adc8-911">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="8adc8-912">Пробелы, знаки табуляции и символы перевода строки удаляются из аргумента.</span><span class="sxs-lookup"><span data-stu-id="8adc8-912">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="8adc8-913">Следующий вызов возвращает значение 1234123.</span><span class="sxs-lookup"><span data-stu-id="8adc8-913">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="8adc8-914">Следующий вызов возвращает десятичное значение-1.</span><span class="sxs-lookup"><span data-stu-id="8adc8-914">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="8adc8-915">Функция распознает только точку (`.`) в качестве допустимого десятичного разделителя. `Val`</span><span class="sxs-lookup"><span data-stu-id="8adc8-915">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="8adc8-916">Если используются другие десятичные разделители, как в международных приложениях, используйте `CDbl` или `CInt` вместо этого для преобразования строки в число.</span><span class="sxs-lookup"><span data-stu-id="8adc8-916">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="8adc8-917">Чтобы преобразовать строковое представление числа в определенном языке и региональных параметрах в числовое значение, используйте `Parse(String, IFormatProvider)` метод числового типа.</span><span class="sxs-lookup"><span data-stu-id="8adc8-917">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="8adc8-918">Например, используйте <xref:System.Double.Parse%2A?displayProperty=nameWithType> при преобразовании строки `Double`в.</span><span class="sxs-lookup"><span data-stu-id="8adc8-918">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8adc8-919"><xref:System.InvalidCastException> Исключение может возникнуть в ответ на определенные нестандартные числовые форматы.</span><span class="sxs-lookup"><span data-stu-id="8adc8-919">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="8adc8-920">Например, следующий код вызывает это исключение.</span><span class="sxs-lookup"><span data-stu-id="8adc8-920">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="8adc8-921">Конфликт между числом, отформатированным `Double` как, `Integer` и `Long` символами типа и будет перехвачен компилятором, если конфликт не содержался в строках.</span><span class="sxs-lookup"><span data-stu-id="8adc8-921">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="8adc8-922">В следующем примере `Val` функция используется для возврата чисел, содержащихся в каждой строке.</span><span class="sxs-lookup"><span data-stu-id="8adc8-922">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="8adc8-923">`Val`прекращает преобразование на первом символе, который не может быть интерпретирован как цифра, числовой модификатор, числовой знак препинания или пробел.</span><span class="sxs-lookup"><span data-stu-id="8adc8-923">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="8adc8-924"><paramref name="InputStr" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="8adc8-924"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8adc8-925"><see langword="Object" /> — это выражение типа <see langword="String" />, которое нельзя преобразовать в <paramref name="Expression" />.</span><span class="sxs-lookup"><span data-stu-id="8adc8-925"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="8adc8-926">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="8adc8-926">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
