<Type Name="INameCreationService" FullName="System.ComponentModel.Design.Serialization.INameCreationService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="24dd2018a1322ca37eff176a8f1d9bac007bafa5" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63903915" /></Metadata><TypeSignature Language="C#" Value="public interface INameCreationService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INameCreationService" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.Serialization.INameCreationService" />
  <TypeSignature Language="VB.NET" Value="Public Interface INameCreationService" />
  <TypeSignature Language="C++ CLI" Value="public interface class INameCreationService" />
  <TypeSignature Language="F#" Value="type INameCreationService = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="6e7b7-101">Предоставляет службу для генерации уникальных имен объектов.</span><span class="sxs-lookup"><span data-stu-id="6e7b7-101">Provides a service that can generate unique names for objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e7b7-102">Объект <xref:System.ComponentModel.Design.Serialization.DesignerLoader> можно реализовать эту службу, чтобы предоставить конструктор для создания новых, уникальных имен объектов.</span><span class="sxs-lookup"><span data-stu-id="6e7b7-102">A <xref:System.ComponentModel.Design.Serialization.DesignerLoader> can implement this service to provide a way for a designer to create new, unique names for objects.</span></span> <span data-ttu-id="6e7b7-103">Если эта служба не доступен, конструктор использует реализацию по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="6e7b7-103">If this service is not available, the designer uses a default implementation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e7b7-104">В следующем примере кода приведен пример <xref:System.ComponentModel.Design.Serialization.INameCreationService> реализации.</span><span class="sxs-lookup"><span data-stu-id="6e7b7-104">The following example code provides an example <xref:System.ComponentModel.Design.Serialization.INameCreationService> implementation.</span></span> <span data-ttu-id="6e7b7-105">Службу можно создать уникальное имя на основе типа, не соответствующие имена в указанном контейнере.</span><span class="sxs-lookup"><span data-stu-id="6e7b7-105">The service can create a unique name based on a type that does not match any names in the specified container.</span></span> <span data-ttu-id="6e7b7-106">Она также проверяет имя в указанной строке.</span><span class="sxs-lookup"><span data-stu-id="6e7b7-106">It can also validate a specified name string.</span></span>  
  
 [!code-cpp[INameCreationServiceExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/INameCreationServiceExample/CPP/class1.cpp#1)]
 [!code-csharp[INameCreationServiceExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/INameCreationServiceExample/CS/class1.cs#1)]
 [!code-vb[INameCreationServiceExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/INameCreationServiceExample/VB/class1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateName">
      <MemberSignature Language="C#" Value="public string CreateName (System.ComponentModel.IContainer container, Type dataType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CreateName(class System.ComponentModel.IContainer container, class System.Type dataType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.INameCreationService.CreateName(System.ComponentModel.IContainer,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateName (container As IContainer, dataType As Type) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ CreateName(System::ComponentModel::IContainer ^ container, Type ^ dataType);" />
      <MemberSignature Language="F#" Value="abstract member CreateName : System.ComponentModel.IContainer * Type -&gt; string" Usage="iNameCreationService.CreateName (container, dataType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.ComponentModel.IContainer" />
        <Parameter Name="dataType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="container"><span data-ttu-id="6e7b7-107">Контейнер, в который добавляется новый объект.</span><span class="sxs-lookup"><span data-stu-id="6e7b7-107">The container where the new object is added.</span></span></param>
        <param name="dataType"><span data-ttu-id="6e7b7-108">Тип данных объекта, которому возвращается имя.</span><span class="sxs-lookup"><span data-stu-id="6e7b7-108">The data type of the object that receives the name.</span></span></param>
        <summary><span data-ttu-id="6e7b7-109">Создает новое имя, которое уникально для всех компонентов в указанном контейнере.</span><span class="sxs-lookup"><span data-stu-id="6e7b7-109">Creates a new name that is unique to all components in the specified container.</span></span></summary>
        <returns><span data-ttu-id="6e7b7-110">Уникальное имя типа данных.</span><span class="sxs-lookup"><span data-stu-id="6e7b7-110">A unique name for the data type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e7b7-111">Этот метод возвращает имя для нового объекта, которое является уникальным в указанном контейнере.</span><span class="sxs-lookup"><span data-stu-id="6e7b7-111">This method returns a name for the new object that is unique within the specified container.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e7b7-112">В следующем примере кода приведен пример <xref:System.ComponentModel.Design.Serialization.INameCreationService.CreateName%2A?displayProperty=nameWithType> реализацию метода.</span><span class="sxs-lookup"><span data-stu-id="6e7b7-112">The following code example provides an example <xref:System.ComponentModel.Design.Serialization.INameCreationService.CreateName%2A?displayProperty=nameWithType> method implementation.</span></span> <span data-ttu-id="6e7b7-113">Метод может создать имя, основанное на имени указанного типа, который является уникальным для имен компонентов в указанном контейнере.</span><span class="sxs-lookup"><span data-stu-id="6e7b7-113">The method can create a name based on the name of a specified type that is unique to the names of the components within the specified container.</span></span>  
  
 [!code-cpp[INameCreationServiceExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/INameCreationServiceExample/CPP/class1.cpp#2)]
 [!code-csharp[INameCreationServiceExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/INameCreationServiceExample/CS/class1.cs#2)]
 [!code-vb[INameCreationServiceExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/INameCreationServiceExample/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6e7b7-114">Служба такого типа часто применяется для создания уникального имени объекта из имени типа данных, дополняется число, которое позволяет имени как уникальный идентификатор.</span><span class="sxs-lookup"><span data-stu-id="6e7b7-114">This type of service is often implemented to create a unique object name from the name of the data type, often appended with a number that allows the name to be a unique identifier.</span></span> <span data-ttu-id="6e7b7-115">Например <see langword="ListBox1" /> для <see langword="ListBox" /> объекта.</span><span class="sxs-lookup"><span data-stu-id="6e7b7-115">For example, <see langword="ListBox1" /> for a <see langword="ListBox" /> object.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="IsValidName">
      <MemberSignature Language="C#" Value="public bool IsValidName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidName (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsValidName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member IsValidName : string -&gt; bool" Usage="iNameCreationService.IsValidName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6e7b7-116">Имя для проверки.</span><span class="sxs-lookup"><span data-stu-id="6e7b7-116">The name to validate.</span></span></param>
        <summary><span data-ttu-id="6e7b7-117">Возвращает значение, определяющее, является ли указанное имя допустимым.</span><span class="sxs-lookup"><span data-stu-id="6e7b7-117">Gets a value indicating whether the specified name is valid.</span></span></summary>
        <returns><span data-ttu-id="6e7b7-118">Значение <see langword="true" />, если имя является допустимым; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6e7b7-118"><see langword="true" /> if the name is valid; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e7b7-119">Реализация <xref:System.ComponentModel.Design.Serialization.INameCreationService> может иметь правила, определяющие допустимые имена параметров.</span><span class="sxs-lookup"><span data-stu-id="6e7b7-119">An implementation of the <xref:System.ComponentModel.Design.Serialization.INameCreationService> can have rules that define the parameters for valid names.</span></span> <span data-ttu-id="6e7b7-120">Этот метод можно реализовать для проверки имени и принудительное применение этих правил.</span><span class="sxs-lookup"><span data-stu-id="6e7b7-120">This method can be implemented to validate a name and enforce those rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e7b7-121">В следующем примере кода приведен пример <xref:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName%2A?displayProperty=nameWithType> реализацию метода.</span><span class="sxs-lookup"><span data-stu-id="6e7b7-121">The following code example provides an example <xref:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName%2A?displayProperty=nameWithType> method implementation.</span></span> <span data-ttu-id="6e7b7-122">Данный метод использует схему проверки строк, которая проверяет каждый знак указанной строки, чтобы определить, является ли указанная строка является допустимым именем.</span><span class="sxs-lookup"><span data-stu-id="6e7b7-122">The method uses a string validation scheme that examines each character of the specified string to determine whether the specified string is a valid name.</span></span> <span data-ttu-id="6e7b7-123">Этот метод возвращает `true` Если строка является допустимым, или `false` в противном случае.</span><span class="sxs-lookup"><span data-stu-id="6e7b7-123">The method returns `true` if the string is valid, or `false` otherwise.</span></span>  
  
 [!code-cpp[INameCreationServiceExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/INameCreationServiceExample/CPP/class1.cpp#3)]
 [!code-csharp[INameCreationServiceExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/INameCreationServiceExample/CS/class1.cs#3)]
 [!code-vb[INameCreationServiceExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/INameCreationServiceExample/VB/class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateName">
      <MemberSignature Language="C#" Value="public void ValidateName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ValidateName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.INameCreationService.ValidateName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member ValidateName : string -&gt; unit" Usage="iNameCreationService.ValidateName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6e7b7-124">Имя для проверки.</span><span class="sxs-lookup"><span data-stu-id="6e7b7-124">The name to validate.</span></span></param>
        <summary><span data-ttu-id="6e7b7-125">Возвращает значение, определяющее, является ли указанное имя допустимым.</span><span class="sxs-lookup"><span data-stu-id="6e7b7-125">Gets a value indicating whether the specified name is valid.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e7b7-126">Реализация <xref:System.ComponentModel.Design.Serialization.INameCreationService> может иметь правила, определяющие допустимые имена параметров.</span><span class="sxs-lookup"><span data-stu-id="6e7b7-126">An implementation of the <xref:System.ComponentModel.Design.Serialization.INameCreationService> can have rules that define the parameters for valid names.</span></span> <span data-ttu-id="6e7b7-127">Этот метод можно реализовать для проверки имени и принудительное применение этих правил.</span><span class="sxs-lookup"><span data-stu-id="6e7b7-127">This method can be implemented to validate a name and enforce those rules.</span></span>  
  
 <span data-ttu-id="6e7b7-128">Этот метод аналогичен методу <xref:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName%2A>, за исключением того, что этот метод создает исключение, если имя является недопустимым.</span><span class="sxs-lookup"><span data-stu-id="6e7b7-128">This method is similar to <xref:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName%2A>, except that this method throws an exception if the name is invalid.</span></span> <span data-ttu-id="6e7b7-129">Это позволяет разработчикам предоставлять подробные сведения в сообщение об исключении.</span><span class="sxs-lookup"><span data-stu-id="6e7b7-129">This allows implementers to provide detailed information in the exception message.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e7b7-130">В следующем примере кода приведен пример <xref:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName%2A?displayProperty=nameWithType> реализацию метода, который использует схему проверки строк, которая проверяет каждый знак указанной строки, чтобы определить, является ли указанная строка является допустимым именем.</span><span class="sxs-lookup"><span data-stu-id="6e7b7-130">The following code example provides an example <xref:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName%2A?displayProperty=nameWithType> method implementation that uses a string validation scheme that examines each character of the specified string to determine whether the specified string is a valid name.</span></span> <span data-ttu-id="6e7b7-131">Метод вызывает исключение, если строка не является допустимой.</span><span class="sxs-lookup"><span data-stu-id="6e7b7-131">The method throws an exception if the string is not valid.</span></span>  
  
 [!code-cpp[INameCreationServiceExample#4](~/samples/snippets/cpp/VS_Snippets_Winforms/INameCreationServiceExample/CPP/class1.cpp#4)]
 [!code-csharp[INameCreationServiceExample#4](~/samples/snippets/csharp/VS_Snippets_Winforms/INameCreationServiceExample/CS/class1.cs#4)]
 [!code-vb[INameCreationServiceExample#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/INameCreationServiceExample/VB/class1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>