<Type Name="IVsaCodeItem" FullName="Microsoft.Vsa.IVsaCodeItem">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3c91aa7edb11191c98cf33027bcf6f18b2093fb1" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69315526" /></Metadata><TypeSignature Language="C#" Value="public interface IVsaCodeItem : Microsoft.Vsa.IVsaItem" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IVsaCodeItem implements class Microsoft.Vsa.IVsaItem" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Vsa.IVsaCodeItem" />
  <TypeSignature Language="VB.NET" Value="Public Interface IVsaCodeItem&#xA;Implements IVsaItem" />
  <TypeSignature Language="C++ CLI" Value="public interface class IVsaCodeItem : Microsoft::Vsa::IVsaItem" />
  <TypeSignature Language="F#" Value="type IVsaCodeItem = interface&#xA;    interface IVsaItem" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Vsa</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Vsa.IVsaItem</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Obsolete("Use of this type is not recommended because it is being deprecated in Visual Studio 2005; there will be no replacement for this feature. Please see the ICodeCompiler documentation for additional help.")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("E0C0FFE7-7eea-4ee5-b7e4-0080c7eb0b74")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Представляет элемент кода, компилируемого обработчиком сценариев.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks  
Указанный элемент кода может содержать классы, модули или другой исходный текст.

Для вызова любых членов интерфейса Ивсакодеитем разрешения не требуются.

Обработчик скриптов реализует этот интерфейс для добавления элементов кода.

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddEventSource">
      <MemberSignature Language="C#" Value="public void AddEventSource (string eventSourceName, string eventSourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddEventSource(string eventSourceName, string eventSourceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Vsa.IVsaCodeItem.AddEventSource(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddEventSource (eventSourceName As String, eventSourceType As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddEventSource(System::String ^ eventSourceName, System::String ^ eventSourceType);" />
      <MemberSignature Language="F#" Value="abstract member AddEventSource : string * string -&gt; unit" Usage="iVsaCodeItem.AddEventSource (eventSourceName, eventSourceType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSourceName" Type="System.String" />
        <Parameter Name="eventSourceType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventSourceName">Программное имя источника события.</param>
        <param name="eventSourceType">Имя типа источника события.</param>
        <summary>Добавляет источник события в элемент кода. Элемент кода использует источник события для подключения события к именованному источнику события посредством вызова метода IVsaSite.GetEventSourceInstance, реализуемого ведущим приложением.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Обработчик скриптов использует сведения, предоставляемые методом Аддевентсаурце для подключения событий к именованному источнику событий. Он получает источники событий, вызывая метод метода IVsaSite. GetEventSourceInstance, который реализуется хостом. Метод Аддевентсаурце создает класс, который обрабатывает события, вызванные предоставленным узлом объектом.

> [!NOTE]
> Обработчик сценариев JScript .NET не поддерживает этот метод. В случаях, когда обработчик JScript .NET должен подключить событие, необходимо сделать это с помощью глобального элемента. Вместо источников событий обработчик JScript .NET использует типы элементов Аппглобал. Дополнительные сведения см. в разделе Всаитемтипе.


В элементе кода можно получить доступ к объекту источника события по имени, а после обращения к объекту можно написать обработчики событий. Тип источника события передается в виде строки, а не в виде объекта типа для упрощения реализации источников событий неуправляемыми узлами.

Компилятор использует параметр Евентсаурцетипе для привязки к методам, предоставляемым типом. Он также используется позже, когда обработчик скриптов вызывает метод метода IVsaSite. GetEventSourceInstance для запроса экземпляра объекта типа.

Дополнительные сведения о механизмах подключения событий для обработчика скриптов см. в описании метода метода IVsaSite. GetEventSourceInstance.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSourceText">
      <MemberSignature Language="C#" Value="public void AppendSourceText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AppendSourceText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Vsa.IVsaCodeItem.AppendSourceText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSourceText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSourceText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member AppendSourceText : string -&gt; unit" Usage="iVsaCodeItem.AppendSourceText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Текст, который необходимо добавить к элементу кода.</param>
        <summary>Добавляет заданный текст в конец элемента кода.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Добавленный исходный текст не подлежит проверке. По этой причине ошибки, если таковые имеются, будут отображаться при следующем вызове метода Ивсаенгине. Compile.

Добавленный исходный текст предоставляется в виде одной строки. Если строка требует какого бы то ни было форматирования, необходимо предоставить это значение самостоятельно.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CodeDOM">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeObject CodeDOM { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeObject CodeDOM" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Vsa.IVsaCodeItem.CodeDOM" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeDOM As CodeObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeObject ^ CodeDOM { System::CodeDom::CodeObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeDOM : System.CodeDom.CodeObject" Usage="Microsoft.Vsa.IVsaCodeItem.CodeDOM" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает модель DOM кода (CodeDOM), представленную в элементе кода.</summary>
        <value>CodeDOM для элемента кода.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Свойство CodeDOM обычно создается как часть этапа компиляции обработчика сценариев, поэтому оно недоступно до вызова метода Ивсаенгине. Compile. Некоторые реализации VSA могут предоставлять CodeDOM динамически, без необходимости явного этапа компиляции, но узлы не могут полагаться на это поведение. Некоторые обработчики сценариев, например обработчик сценариев JScript .NET, не поддерживают такое поведение.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEventSource">
      <MemberSignature Language="C#" Value="public void RemoveEventSource (string eventSourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveEventSource(string eventSourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Vsa.IVsaCodeItem.RemoveEventSource(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveEventSource (eventSourceName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveEventSource(System::String ^ eventSourceName);" />
      <MemberSignature Language="F#" Value="abstract member RemoveEventSource : string -&gt; unit" Usage="iVsaCodeItem.RemoveEventSource eventSourceName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventSourceName">Программное имя удаляемого источника события.</param>
        <summary>Удаляет заданный источник события из элемента кода.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
При удалении источника событий базовый обработчик событий не удаляется из исходного текста. Вместо этого события больше не вызывают уведомления обработчику событий. Поэтому при удалении источника событий и последующем выходе базовой функции в исходном коде возникнет ошибка компилятора.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceText">
      <MemberSignature Language="C#" Value="public string SourceText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceText" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Vsa.IVsaCodeItem.SourceText" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SourceText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SourceText : string with get, set" Usage="Microsoft.Vsa.IVsaCodeItem.SourceText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Задает или возвращает текст указанного элемента кода, включая автоматически созданный код (если он имеется).</summary>
        <value>Исходный текст элемента кода.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
При установке этого свойства текст не подлежит проверке. По этой причине ошибки, если таковые имеются, будут отображаться при следующем вызове метода Ивсаенгине. Compile.

Свойство Саурцетекст возвращает исходный текст в одной большой строке, включая символы форматирования, такие как возврат каретки.

Чтобы получить это свойство, подсистема не должна быть закрыта. Чтобы задать это свойство, подсистема не должна быть закрыта и подсистема не должна быть запущена.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
