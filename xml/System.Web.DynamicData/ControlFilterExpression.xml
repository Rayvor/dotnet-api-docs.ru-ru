<Type Name="ControlFilterExpression" FullName="System.Web.DynamicData.ControlFilterExpression">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cd527f29c3cb5254911b1012c09fe210a8004bdb" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64089130" /></Metadata><TypeSignature Language="C#" Value="public class ControlFilterExpression : System.Web.UI.WebControls.Expressions.DataSourceExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ControlFilterExpression extends System.Web.UI.WebControls.Expressions.DataSourceExpression" />
  <TypeSignature Language="DocId" Value="T:System.Web.DynamicData.ControlFilterExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class ControlFilterExpression&#xA;Inherits DataSourceExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class ControlFilterExpression : System::Web::UI::WebControls::Expressions::DataSourceExpression" />
  <TypeSignature Language="F#" Value="type ControlFilterExpression = class&#xA;    inherit DataSourceExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Expressions.DataSourceExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Изменяет запрос к базе данных, используя ключ данных элемента, выбранного в элементе управления с привязкой к данным.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DynamicData.ControlFilterExpression> Класс, который предназначен для использования в том случае, если страница содержит два элемента управления с привязкой к данным, таких как <xref:System.Web.UI.WebControls.GridView> управления и <xref:System.Web.UI.WebControls.ListView> элемента управления. Один элемент управления является источником, где выбран ключ данных (строка). Другой элемент управления является целевым объектом, где отображаются данные, в зависимости от выбранного ключа данных. Для получения данных элемента управления источником данных, который выполняет запрос, который определен в <xref:System.Web.UI.WebControls.QueryExtender> класса и создается с помощью выбранного ключа данных.  
  
 Для использования <xref:System.Web.DynamicData.ControlFilterExpression> класса в страницу, выполните следующие действия:  
  
-   Добавление <xref:System.Web.UI.WebControls.QueryExtender> на страницу элемент управления.  
  
-   Задайте `TargetControlID` свойство <xref:System.Web.UI.WebControls.QueryExtender> идентификатор конечного элемента управления источника данных.  
  
-   Добавить <xref:System.Web.DynamicData.ControlFilterExpression> экземпляр <xref:System.Web.UI.WebControls.QueryExtender> элемента управления.  
  
-   Задайте `ControlID` свойство <xref:System.Web.DynamicData.ControlFilterExpression> элемент к элементу управления с привязкой к данным источника.  
  
   
  
## Examples  
 В следующем примере показано, как использовать <xref:System.Web.DynamicData.ControlFilterExpression> класса для ссылки на источник данных элемента управления с привязкой, где установлен ключ данных. <xref:System.Web.UI.WebControls.QueryExtender> Контрольные точки, к элементу управления источником данных целевой объект для получения данных, которая фильтруется с помощью выбранного ключа данных. В примере системы управления версиями с данными, ссылающийся на родительскую таблицу, и целевой элемент управления с привязкой к данным ссылается на дочернюю таблицу.  
  
```  
<asp:QueryExtender ID="QueryExtenderID"   
    TargetControlID="TargetDataSourceID" runat="server">  
    <asp:ControlFilterExpression ControlID="SourceGridViewID" />  
</asp:QueryExtender>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.DynamicData.QueryableFilterRepeater" />
    <altmember cref="T:System.Web.DynamicData.DynamicFilter" />
    <altmember cref="T:System.Web.UI.WebControls.QueryExtender" />
    <altmember cref="P:System.Web.DynamicData.ControlFilterExpression.Column" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlFilterExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.ControlFilterExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ControlFilterExpression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.DynamicData.ControlFilterExpression" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Column">
      <MemberSignature Language="C#" Value="public string Column { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Column" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.ControlFilterExpression.Column" />
      <MemberSignature Language="VB.NET" Value="Public Property Column As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Column { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Column : string with get, set" Usage="System.Web.DynamicData.ControlFilterExpression.Column" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает имя столбца, на котором основан запрос.</summary>
        <value>Имя столбца, на котором основан запрос.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если это свойство не указано, <xref:System.Web.DynamicData.ControlFilterExpression> элемент управления обрабатывает к выбранному ключу данных как первичный ключ из текущей таблицы. Это полезно в случае список сведения, где исходной и целевой элементы управления с привязкой к данным работать с данными из той же таблицы.  
  
 Если присвоить значение свойству, <xref:System.Web.DynamicData.ControlFilterExpression> элемент управления обрабатывает ключ данных как внешний ключ. Этому свойству присвоено значение становится именем столбца, который отображается в элементе управления с привязкой к данным целевой. Это полезно в случае родители потомки, где целевой элемент управления с привязкой к данным работает с данными из дочерней таблицы и системы управления версиями с данными работает с данными из родительской таблицы.  
  
   
  
## Examples  
 В следующем примере показано, как использовать <xref:System.Web.DynamicData.ControlFilterExpression> класса для задания столбца, к которому применяется фильтр.  
  
```  
<asp:QueryExtender ID="QueryExtenderID"   
    TargetControlID="TargetDataSourceID" runat="server">  
    <asp:ControlFilterExpression ControlID="GridViewID" Column="Category"/>  
</asp:QueryExtender>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlID">
      <MemberSignature Language="C#" Value="public string ControlID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ControlID" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.ControlFilterExpression.ControlID" />
      <MemberSignature Language="VB.NET" Value="Public Property ControlID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ControlID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ControlID : string with get, set" Usage="System.Web.DynamicData.ControlFilterExpression.ControlID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает идентификатор исходного элемента управления с привязкой к данным.</summary>
        <value>Идентификатор исходного элемента управления с привязкой к данным.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DynamicData.ControlFilterExpression.ControlID%2A> Свойство идентифицирует привязкой к данным системы управления версиями, из которого выбран ключ данных. К выбранному ключу данных затем используется <xref:System.Web.DynamicData.ControlFilterExpression> управления для построения запроса.  
  
   
  
## Examples  
 В следующем примере показано, как использовать <xref:System.Web.DynamicData.ControlFilterExpression> классу задать идентификатор элемента управления с привязкой к данным источника.  
  
```  
<asp:QueryExtender ID="QueryExtenderID"   
    TargetControlID="TargetDataSourceID" runat="server">  
    <asp:ControlFilterExpression ControlID="GridViewID" Column="Category"/>  
</asp:QueryExtender>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQueryable">
      <MemberSignature Language="C#" Value="public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.IQueryable GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.ControlFilterExpression.GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetQueryable (source As IQueryable) As IQueryable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Linq::IQueryable ^ GetQueryable(System::Linq::IQueryable ^ source);" />
      <MemberSignature Language="F#" Value="override this.GetQueryable : System.Linq.IQueryable -&gt; System.Linq.IQueryable" Usage="controlFilterExpression.GetQueryable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">Изменяемый запрос к источнику данных.</param>
        <summary>Получает изменяемый запрос к источнику данных.</summary>
        <returns>Объект, представляющий запрос к источнику данных, изменяемый данным экземпляром <see cref="T:System.Web.DynamicData.ControlFilterExpression" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DynamicData.ControlFilterExpression.GetQueryable%28System.Linq.IQueryable%29> Метод изменяет запрос, основанный на ключе выбранных данных элемента управления с привязкой к данным источника.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.ControlFilterExpression.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void LoadViewState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.LoadViewState : obj -&gt; unit" Usage="controlFilterExpression.LoadViewState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">Состояние, которое требуется восстановить.</param>
        <summary>Восстанавливает сохраненное раннее состояние представления.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.ControlFilterExpression.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ SaveViewState();" />
      <MemberSignature Language="F#" Value="override this.SaveViewState : unit -&gt; obj" Usage="controlFilterExpression.SaveViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Сохраняет изменения состояния представления с того момента, как страница была отправлена на сервер.</summary>
        <returns>Объект, содержащий изменения состояния представления. Если с объектом не связано состояние представления, метод возвращает значение <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetContext">
      <MemberSignature Language="C#" Value="public override void SetContext (System.Web.UI.Control owner, System.Web.HttpContext context, System.Web.UI.WebControls.IQueryableDataSource dataSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetContext(class System.Web.UI.Control owner, class System.Web.HttpContext context, class System.Web.UI.WebControls.IQueryableDataSource dataSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.ControlFilterExpression.SetContext(System.Web.UI.Control,System.Web.HttpContext,System.Web.UI.WebControls.IQueryableDataSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetContext (owner As Control, context As HttpContext, dataSource As IQueryableDataSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetContext(System::Web::UI::Control ^ owner, System::Web::HttpContext ^ context, System::Web::UI::WebControls::IQueryableDataSource ^ dataSource);" />
      <MemberSignature Language="F#" Value="override this.SetContext : System.Web.UI.Control * System.Web.HttpContext * System.Web.UI.WebControls.IQueryableDataSource -&gt; unit" Usage="controlFilterExpression.SetContext (owner, context, dataSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="owner" Type="System.Web.UI.Control" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="dataSource" Type="System.Web.UI.WebControls.IQueryableDataSource" />
      </Parameters>
      <Docs>
        <param name="owner">Элемент управления, в котором содержится экземпляр <see cref="T:System.Web.DynamicData.ControlFilterExpression" />, такой как элемент управления <see cref="T:System.Web.UI.WebControls.QueryExtender" />.</param>
        <param name="context">Текущий объект <see cref="T:System.Web.HttpContext" /> приложения.</param>
        <param name="dataSource">Целевой источник данных для экземпляра <see cref="T:System.Web.DynamicData.ControlFilterExpression" />. Если экземпляр <see cref="T:System.Web.DynamicData.DynamicFilterExpression" /> содержится в элементе управления <see cref="T:System.Web.UI.WebControls.QueryExtender" />, этот параметр представляет собой источник данных, на который ссылается элемент управления <see cref="T:System.Web.UI.WebControls.QueryExtender" />.</param>
        <summary>Инициализирует выражение фильтра сведениями об источнике данных.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.ControlFilterExpression.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberSignature Language="F#" Value="override this.TrackViewState : unit -&gt; unit" Usage="controlFilterExpression.TrackViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Инициирует отслеживание объектом <see cref="T:System.Web.DynamicData.ControlFilterExpression" /> изменений в состоянии его представления, благодаря чему эти изменения можно сохранить в объекте состояния просмотра элемента управления и хранить их для всех запросов одной и той же страницы.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>