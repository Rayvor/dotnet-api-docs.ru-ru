<Type Name="WorkflowRuntime" FullName="System.Workflow.Runtime.WorkflowRuntime">
  <Metadata><Meta Name="ms.openlocfilehash" Value="53f0790eebeb1af07e9cfe1a269fdcf7309c5726" /><Meta Name="ms.sourcegitcommit" Value="913829d6e739689126fe74be43a8513d4181fd22" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/20/2019" /><Meta Name="ms.locfileid" Value="69629066" /></Metadata><TypeSignature Language="C#" Value="public class WorkflowRuntime : IDisposable, IServiceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi WorkflowRuntime extends System.Object implements class System.IDisposable, class System.IServiceProvider" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.WorkflowRuntime" />
  <TypeSignature Language="VB.NET" Value="Public Class WorkflowRuntime&#xA;Implements IDisposable, IServiceProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowRuntime : IDisposable, IServiceProvider" />
  <TypeSignature Language="F#" Value="type WorkflowRuntime = class&#xA;    interface IServiceProvider&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Представляет настраиваемую среду выполнения, обеспечиваемую механизмом среды выполнения рабочих процессов.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 Класс <xref:System.Workflow.Runtime.WorkflowRuntime> предоставляет функции, которые требуются ведущему приложению и службам для настройки и управления механизмом среды выполнения рабочих процессов и для получения уведомлений об изменениях механизма среды выполнения рабочих процессов и всех экземпляров его рабочих процессов.  
  
   
  
## Examples  
 В следующем примере кода показано использование функций класса <xref:System.Workflow.Runtime.WorkflowRuntime> с узла рабочего процесса. Он содержит примеры использования конструктора <xref:System.Workflow.Runtime.WorkflowRuntime.%23ctor%2A> и методов <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A>, <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> и <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>. Код также демонстрирует метод, рекомендуемый для создания объекта <xref:System.Workflow.Runtime.WorkflowInstance> в узле рабочего процесса с помощью метода <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A>. В нем также показано задание обработчиков для событий <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted>, <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> и <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated>.  
  
 Этот пример кода является частью примера [отмены рабочего процесса](https://go.microsoft.com/fwlink/?LinkID=157346) .  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Данный тип потокобезопасен.</threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowRuntime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowRuntime();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Workflow.Runtime.WorkflowRuntime> инициализируется со значениями свойств по умолчанию и содержит базовые службы по умолчанию. Для дополнительной настройки механизма среды выполнения рабочих процессов можно добавлять и удалять службы с помощью методов <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> и <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A>; также можно задать свойство <xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A>. После настройки объекта <xref:System.Workflow.Runtime.WorkflowRuntime> вызовите метод <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>, чтобы запустить механизм среды выполнения рабочих процессов и его службы.  
  
 В следующей таблице представлены начальные значения свойств для экземпляра класса <xref:System.Workflow.Runtime.WorkflowRuntime>.  
  
|Свойство.|Начальное значение|  
|--------------|-------------------|  
|<xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A>|«WorkflowRuntime»|  
|<xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A>|`false`|  
  
 Базовыми службами по умолчанию являются: <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService> и <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService>.  
  
   
  
## Examples  
 В следующем примере кода показано использование функций класса <xref:System.Workflow.Runtime.WorkflowRuntime> с узла рабочего процесса. Он содержит пример использования конструктора <xref:System.Workflow.Runtime.WorkflowRuntime.%23ctor%2A> для создания экземпляра класса <xref:System.Workflow.Runtime.WorkflowRuntime> и доступа к его методам и событиям.  
  
 Этот пример кода является частью примера [отмены рабочего процесса](https://go.microsoft.com/fwlink/?LinkID=157346) .  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowRuntime (string configSectionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string configSectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (configSectionName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowRuntime(System::String ^ configSectionName);" />
      <MemberSignature Language="F#" Value="new System.Workflow.Runtime.WorkflowRuntime : string -&gt; System.Workflow.Runtime.WorkflowRuntime" Usage="new System.Workflow.Runtime.WorkflowRuntime configSectionName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="configSectionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="configSectionName">Имя допустимого раздела <see langword="workflowSettings" /> в файле конфигурации приложения.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />, используя указанный раздел файла конфигурации приложения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Workflow.Runtime.WorkflowRuntime> инициализируется в соответствии с настройками в разделе, указанном параметром `configSectionName` в файле конфигурации приложения. `configSectionName`должен соответствовать допустимому `workflowSettings` разделу файла конфигурации.  
  
 При настройке подсистемы среды выполнения рабочего процесса с помощью файла конфигурации приложения он загружает и создает экземпляры классов типов, перечисленных в `Services` разделе файла конфигурации. При создании этих классов механизм среды выполнения рабочих процессов выполняет поиск конструкторов классов со следующими сигнатурами в следующем порядке.  
  
1.  Служба(среда выполнения WorkflowRuntime, параметры NameValueCollection)  
  
2.  Служба(среда выполнения WorkflowRuntime)  
  
3.  Служба(параметры NameValueCollection)  
  
4.  Служба()  
  
 Все классы служб, загружаемые из файла конфигурации, должны реализовывать хотя бы одну из этих сигнатур конструкторов.  
  
 Для получения дополнительной информации см. <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="configSectionName" /> является неопределенной ссылкой (<see langword="Nothing" /> в Visual Basic).</exception>
        <exception cref="T:System.ArgumentException">Не удалось найти допустимый раздел <see langword="workflowSettings" /> в файле конфигурации приложения.</exception>
        <exception cref="T:System.InvalidOperationException">Для этого домена приложения уже существует объект <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowRuntime (System.Workflow.Runtime.Configuration.WorkflowRuntimeSection settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Workflow.Runtime.Configuration.WorkflowRuntimeSection settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.#ctor(System.Workflow.Runtime.Configuration.WorkflowRuntimeSection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (settings As WorkflowRuntimeSection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowRuntime(System::Workflow::Runtime::Configuration::WorkflowRuntimeSection ^ settings);" />
      <MemberSignature Language="F#" Value="new System.Workflow.Runtime.WorkflowRuntime : System.Workflow.Runtime.Configuration.WorkflowRuntimeSection -&gt; System.Workflow.Runtime.WorkflowRuntime" Usage="new System.Workflow.Runtime.WorkflowRuntime settings" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="settings" Type="System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" />
      </Parameters>
      <Docs>
        <param name="settings">Объект <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />, используя настройки в указанном разделе <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор предоставляет средства для настройки механизма среды выполнения рабочих процессов с помощью одного вызова метода для узлов, которые не используют файл конфигурации. Имеется много причин, чтобы не использовать файл конфигурации приложения. Ведущее приложение может выполняться в среде, не допускающей использование файлов конфигурации, например в доверенной среде, не разрешающей чтение из файла конфигурации приложения по соображениям безопасности. Кроме того, ведущее приложение может использовать собственный механизм настройки, например хранить параметры конфигурации механизма среды выполнения рабочих процессов в базе данных SQL.  
  
 Механизм среды выполнения рабочих процессов загрузит и создаст классы типов, которые содержатся в свойстве <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.Services%2A?displayProperty=nameWithType>. При создании этих классов механизм среды выполнения рабочих процессов выполняет поиск конструкторов классов со следующими сигнатурами в следующем порядке.  
  
1.  Служба(среда выполнения WorkflowRuntime, параметры NameValueCollection)  
  
2.  Служба(среда выполнения WorkflowRuntime)  
  
3.  Служба(параметры NameValueCollection)  
  
4.  Служба()  
  
 Все классы служб, указанные в `settings`, должны реализовывать хотя бы одну из этих сигнатур конструкторов.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="settings" /> является неопределенной ссылкой (<see langword="Nothing" /> в Visual Basic).</exception>
        <exception cref="T:System.InvalidOperationException">Для этого домена приложения уже существует объект <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddService">
      <MemberSignature Language="C#" Value="public void AddService (object service);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddService(object service) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.AddService(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddService (service As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddService(System::Object ^ service);" />
      <MemberSignature Language="F#" Value="member this.AddService : obj -&gt; unit" Usage="workflowRuntime.AddService service" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="service">Объект, представляющий добавляемую службу.</param>
        <summary>Добавляет указанную службу к механизму среды выполнения рабочих процессов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Механизм среды выполнения рабочих процессов можно настраивать, добавляя базовые службы. Базовые службы — это службы, производные от любого из следующих базовых классов служб: <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService>, <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService>, <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> и <xref:System.Workflow.Runtime.Tracking.TrackingService>.  Основные службы можно добавить, только если не запущена подсистема среды выполнения рабочего процесса. то есть, если <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> имеет `false`. Объект <xref:System.Workflow.Runtime.WorkflowRuntime> также можно использовать в качестве контейнера для хранения других служб, которые могут использоваться другими рабочими процессами или приложениями, выполняемыми на узле. При добавлении небазовой службы, производной от класса <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>, после запуска механизма среды выполнения рабочих процессов, метод <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> вызывает метод <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>, реализованный данной службой.  
  
> [!NOTE]
>  Метод <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> накладывает ограничение, запрещающее добавлять несколько служб одного типа <xref:System.Type> к объекту <xref:System.Workflow.Runtime.WorkflowRuntime>. Однако можно добавлять несколько служб, производных от одного базового класса.  В объекте <xref:System.Workflow.Runtime.WorkflowRuntime> может быть только по одной службе, производной от каждого из следующих базовых классов служб: <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService>, <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> и <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService>.  При добавлении нескольких служб, производных от одного из этих классов, например двух служб сохраняемости, метод <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> вызовет исключение <xref:System.InvalidOperationException>.  
  
   
  
## Examples  
 В следующем примере кода показано использование функций класса <xref:System.Workflow.Runtime.WorkflowRuntime> с узла рабочего процесса. Он содержит пример использования метода <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> для добавления служб <xref:System.Workflow.Activities.ExternalDataExchangeService> и <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> к механизму среды выполнения рабочих процессов.  
  
 Этот пример кода является частью примера [отмены рабочего процесса](https://go.microsoft.com/fwlink/?LinkId=157346) .  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="service" /> является неопределенной ссылкой (<see langword="Nothing" /> в Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> удален.</exception>
        <exception cref="T:System.InvalidOperationException">Служба <paramref name="service" /> уже зарегистрирована механизмом среды выполнения рабочих процессов.  
  
-или- 
 <paramref name="service" /> является базовой службой, и механизм времени выполнения рабочих процессов уже выполняется (свойство <see cref="P:System.Workflow.Runtime.WorkflowRuntime.IsStarted" /> имеет значение <see langword="true" />).</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateWorkflow">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Создает экземпляр рабочего процесса, используя указанные параметры.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если механизм среды выполнения рабочих процессов не запущен, то методы <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> вызывают метод <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>. См. список возможных исключений в разделе <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>. После создания экземпляра рабочего процесса вызовите метод <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A?displayProperty=nameWithType> для объекта <xref:System.Workflow.Runtime.WorkflowInstance>, возвращаемого методом <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A>, чтобы начать его выполнение.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (Type workflowType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Type workflowType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowType As Type) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(Type ^ workflowType);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : Type -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow workflowType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="workflowType">Тип <see cref="T:System.Type" /> создаваемого рабочего процесса.</param>
        <summary>Создает новый экземпляр рабочего процесса, используя заданный тип рабочего процесса <see cref="T:System.Type" />.</summary>
        <returns>Созданий экземпляр рабочего процесса.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Перед созданием экземпляра <xref:System.Workflow.Runtime.WorkflowInstance> выполняется его проверка. Если при проверке возникли какие-либо ошибки, то возникает исключение <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException>. Этот подход хорошо работает в простых ситуациях, однако в серверных средах повторная проверка рабочего процесса для каждой активации может создать излишнюю нагрузку.  
  
 Дополнительные сведения об отключении проверки см. <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>в разделе.  
  
   
  
## Examples  
 В следующем примере кода показан способ, рекомендуемый для создания объекта <xref:System.Workflow.Runtime.WorkflowInstance> в узле рабочего процесса с помощью метода <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A>.  
  
 Этот пример кода является частью примера [отмены рабочего процесса](https://go.microsoft.com/fwlink/?LinkID=157346) .  
  
 [!code-csharp[WF_Samples#260](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#260)]
 [!code-vb[WF_Samples#260](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#260)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="workflowType" /> является неопределенной ссылкой (<see langword="Nothing" /> в Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (System.Xml.XmlReader workflowDefinitionReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Xml.XmlReader workflowDefinitionReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowDefinitionReader As XmlReader) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(System::Xml::XmlReader ^ workflowDefinitionReader);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : System.Xml.XmlReader -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow workflowDefinitionReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowDefinitionReader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="workflowDefinitionReader">Объект <see cref="T:System.Xml.XmlReader" />, содержащий определение рабочего процесса.</param>
        <summary>Создает экземпляр рабочего процесса, используя заданный объект <see cref="T:System.Xml.XmlReader" />.</summary>
        <returns>Созданий экземпляр рабочего процесса.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Экземпляр рабочего процесса создается из файла определения рабочего процесса XAML, на который ссылается объект <xref:System.Xml.XmlReader>.  
  
 Перед созданием экземпляра <xref:System.Workflow.Runtime.WorkflowInstance> выполняется его проверка. Если при проверке возникли какие-либо ошибки, то возникает исключение <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException>. Этот подход хорошо работает в простых ситуациях, однако в серверных средах повторная проверка рабочего процесса для каждой активации может создать излишнюю нагрузку.  
  
 Дополнительные сведения об отключении проверки см. <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>в разделе.  
  
   
  
## Examples  
 В следующем примере показано создание рабочего процесса, для которого дано определение на языке XAML.  
  
```  
static void Main(string[] args)  
{  
    using (WorkflowRuntime workflowRuntime = new WorkflowRuntime())  
    {  
        AutoResetEvent waitHandle = new AutoResetEvent(false);  
        workflowRuntime.WorkflowCompleted += delegate(object sender, WorkflowCompletedEventArgs e)  
        {  
            waitHandle.Set();  
        };  
        workflowRuntime.WorkflowTerminated += delegate(object sender, WorkflowTerminatedEventArgs e)  
        {  
            Console.WriteLine(e.Exception.Message);  
            waitHandle.Set();  
        };  
  
        TypeProvider typeProvider = new TypeProvider(null);  
        // Add referenced assemblies, if needed  
        // typeProvider.AddAssembly(...);  
        workflowRuntime.AddService(typeProvider);  
  
        using (XmlReader reader = XmlReader.Create("Workflow1.xoml"))  
        {  
            WorkflowInstance instance = workflowRuntime.CreateWorkflow(reader);  
            instance.Start();  
        }  
  
        waitHandle.WaitOne();  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="workflowDefinitionReader" /> является неопределенной ссылкой (<see langword="Nothing" /> в Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> удален.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (Type workflowType, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Type workflowType, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowType As Type, namedArgumentValues As Dictionary(Of String, Object)) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(Type ^ workflowType, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : Type * System.Collections.Generic.Dictionary&lt;string, obj&gt; -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow (workflowType, namedArgumentValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowType" Type="System.Type" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflowType">Тип <see cref="T:System.Type" /> создаваемого рабочего процесса.</param>
        <param name="namedArgumentValues">Коллекция <see cref="T:System.Collections.Generic.Dictionary`2" /> объектов, ключом которых является строка, представляющая аргументы рабочего процесса.</param>
        <summary>Создает экземпляр рабочего процесса, используя указанный тип рабочего процесса <see cref="T:System.Type" /> и аргументы рабочего процесса, содержащиеся в указанной коллекции <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
        <returns>Созданий экземпляр рабочего процесса.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Перед созданием экземпляра <xref:System.Workflow.Runtime.WorkflowInstance> выполняется его проверка. Если при проверке возникли какие-либо ошибки, то возникает исключение <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException>. Этот подход хорошо работает в простых ситуациях, однако в серверных средах повторная проверка рабочего процесса для каждой активации может создать излишнюю нагрузку.  
  
 Дополнительные сведения об отключении проверки см. <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>в разделе.  
  
 Пример передачи параметров `CreateWorkflow`в см. в разделе [Рабочий процесс с примером параметров](https://go.microsoft.com/fwlink/?LinkId=157403).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="workflowType" /> является неопределенной ссылкой (<see langword="Nothing" /> в Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (Type workflowType, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues, Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Type workflowType, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues, valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowType As Type, namedArgumentValues As Dictionary(Of String, Object), instanceId As Guid) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(Type ^ workflowType, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues, Guid instanceId);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : Type * System.Collections.Generic.Dictionary&lt;string, obj&gt; * Guid -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow (workflowType, namedArgumentValues, instanceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowType" Type="System.Type" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="workflowType">Тип <see cref="T:System.Type" /> создаваемого рабочего процесса.</param>
        <param name="namedArgumentValues">Коллекция <see cref="T:System.Collections.Generic.Dictionary`2" /> объектов, ключом которых является строка, представляющая аргументы рабочего процесса.</param>
        <param name="instanceId">Тип <see cref="T:System.Guid" /> конкретного создаваемого экземпляра <see cref="T:System.Workflow.Runtime.WorkflowInstance" />.</param>
        <summary>Создает экземпляр рабочего процесса, используя указанные параметры.</summary>
        <returns>Созданий экземпляр рабочего процесса.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Перед созданием экземпляра <xref:System.Workflow.Runtime.WorkflowInstance> выполняется его проверка. Если при проверке возникли какие-либо ошибки, то возникает исключение <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException>. Этот подход хорошо работает в простых ситуациях, однако в серверных средах повторная проверка рабочего процесса для каждой активации может создать излишнюю нагрузку.  
  
 Дополнительные сведения об отключении проверки см. <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>в разделе.  
  
 Идентификаторы `instanceId` выполняемых рабочих процессов, загруженных объектом <xref:System.Workflow.Runtime.WorkflowRuntime>, должны быть уникальными. Если для создания рабочего процесса передается `instanceId` и выполняющийся рабочий процесс уже использует этот `instanceId`, то возникает исключение <xref:System.InvalidOperationException>.  
  
 Пример передачи параметров `CreateWorkflow`в см. в разделе [Рабочий процесс с примером параметров](https://go.microsoft.com/fwlink/?LinkID=157403).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="workflowType" /> является неопределенной ссылкой (<see langword="Nothing" /> в Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (System.Xml.XmlReader workflowDefinitionReader, System.Xml.XmlReader rulesReader, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Xml.XmlReader workflowDefinitionReader, class System.Xml.XmlReader rulesReader, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Xml.XmlReader,System.Xml.XmlReader,System.Collections.Generic.Dictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowDefinitionReader As XmlReader, rulesReader As XmlReader, namedArgumentValues As Dictionary(Of String, Object)) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(System::Xml::XmlReader ^ workflowDefinitionReader, System::Xml::XmlReader ^ rulesReader, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : System.Xml.XmlReader * System.Xml.XmlReader * System.Collections.Generic.Dictionary&lt;string, obj&gt; -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow (workflowDefinitionReader, rulesReader, namedArgumentValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowDefinitionReader" Type="System.Xml.XmlReader" />
        <Parameter Name="rulesReader" Type="System.Xml.XmlReader" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflowDefinitionReader">Объект <see cref="T:System.Xml.XmlReader" />, содержащий определение рабочего процесса.</param>
        <param name="rulesReader">Объект <see cref="T:System.Xml.XmlReader" />.</param>
        <param name="namedArgumentValues">Коллекция <see cref="T:System.Collections.Generic.Dictionary`2" /> объектов, ключом которых является строка, представляющая аргументы рабочего процесса.</param>
        <summary>Создает экземпляр рабочего процесса, используя указанные объекты <see cref="T:System.Xml.XmlReader" /> и аргументы, содержащиеся в указанной коллекции <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
        <returns>Созданий экземпляр рабочего процесса.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Экземпляр рабочего процесса создается из определения рабочего процесса, на которое ссылается объект <xref:System.Xml.XmlReader>, и аргументов, предоставленных параметром `namedArgumentValues`.  
  
 Перед созданием экземпляра <xref:System.Workflow.Runtime.WorkflowInstance> выполняется его проверка. Если при проверке возникли какие-либо ошибки, то возникает исключение <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException>. Этот подход хорошо работает в простых ситуациях, однако в серверных средах повторная проверка рабочего процесса для каждой активации может создать излишнюю нагрузку.  
  
 Дополнительные сведения об отключении проверки см. <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>в разделе.  
  
 Пример передачи параметров `CreateWorkflow`в см. в разделе [Рабочий процесс с примером параметров](https://go.microsoft.com/fwlink/?LinkID=157403).  
  
 Пример использования правил, определенных в XML, см. в разделе Определение [IfElse с помощью правил](https://go.microsoft.com/fwlink/?LinkId=157404).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="workflowDefinitionReader" /> является неопределенной ссылкой (<see langword="Nothing" /> в Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> удален.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (System.Xml.XmlReader workflowDefinitionReader, System.Xml.XmlReader rulesReader, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues, Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Xml.XmlReader workflowDefinitionReader, class System.Xml.XmlReader rulesReader, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues, valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Xml.XmlReader,System.Xml.XmlReader,System.Collections.Generic.Dictionary{System.String,System.Object},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowDefinitionReader As XmlReader, rulesReader As XmlReader, namedArgumentValues As Dictionary(Of String, Object), instanceId As Guid) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(System::Xml::XmlReader ^ workflowDefinitionReader, System::Xml::XmlReader ^ rulesReader, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues, Guid instanceId);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : System.Xml.XmlReader * System.Xml.XmlReader * System.Collections.Generic.Dictionary&lt;string, obj&gt; * Guid -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow (workflowDefinitionReader, rulesReader, namedArgumentValues, instanceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowDefinitionReader" Type="System.Xml.XmlReader" />
        <Parameter Name="rulesReader" Type="System.Xml.XmlReader" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="workflowDefinitionReader">Объект <see cref="T:System.Xml.XmlReader" />, содержащий определение рабочего процесса.</param>
        <param name="rulesReader">Объект <see cref="T:System.Xml.XmlReader" />.</param>
        <param name="namedArgumentValues">Коллекция <see cref="T:System.Collections.Generic.Dictionary`2" /> объектов, ключом которых является строка, представляющая аргументы рабочего процесса.</param>
        <param name="instanceId">Тип <see cref="T:System.Guid" /> конкретного создаваемого экземпляра <see cref="T:System.Workflow.Runtime.WorkflowInstance" />.</param>
        <summary>Создает экземпляр рабочего процесса, используя указанные параметры.</summary>
        <returns>Созданий экземпляр рабочего процесса.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Перед созданием экземпляра <xref:System.Workflow.Runtime.WorkflowInstance> выполняется его проверка. Если при проверке возникли какие-либо ошибки, то возникает исключение <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException>. Этот подход хорошо работает в простых ситуациях, однако в серверных средах повторная проверка рабочего процесса для каждой активации может создать излишнюю нагрузку.  
  
 Дополнительные сведения об отключении проверки см. <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>в разделе.  
  
 Идентификаторы `instanceId` выполняемых рабочих процессов, загруженных объектом <xref:System.Workflow.Runtime.WorkflowRuntime>, должны быть уникальными. Если для создания рабочего процесса передается `instanceId` и выполняющийся рабочий процесс уже использует этот `instanceId`, то возникает исключение <xref:System.InvalidOperationException>.  
  
 Пример передачи параметров `CreateWorkflow`в см. в разделе [Рабочий процесс с примером параметров](https://go.microsoft.com/fwlink/?LinkID=157403).  
  
 Пример использования правил, определенных в XML, см. в разделе Определение [IfElse с помощью правил](https://go.microsoft.com/fwlink/?LinkID=157404).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="workflowType" /> является неопределенной ссылкой (<see langword="Nothing" /> в Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="workflowRuntime.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает ресурсы, используемые объектом <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для правильного закрытия объекта <xref:System.Workflow.Runtime.WorkflowRuntime> метод <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> следует вызывать после вызова метода <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>. Это обусловлено тем, что вызов одного метода <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> оставляет объект <xref:System.Workflow.Runtime.WorkflowRuntime> в непригодном для использования состоянии. Метод <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> освобождает ресурсы, используемые средой выполнения, закрывая открытые дескрипторы файлов, подключения баз данных и т. п., но не выгружает экземпляры рабочих процессов, не останавливает службы и не выполняет другие действия, выполняемые методом <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>.  
  
 Метод <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> следует вызывать только тогда, когда ведущему приложению необходимо освободить ресурсы, используемые объектом<xref:System.Workflow.Runtime.WorkflowRuntime> до их автоматического освобождения сборщиком мусора. Общие сведения о <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A>см. в разделе [Очистка неуправляемых ресурсов](~/docs/standard/garbage-collection/unmanaged.md) и [Реализация метода Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
   
  
## Examples  
 В следующем примере показан вызов метода <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> для объекта <xref:System.Workflow.Runtime.WorkflowRuntime>. В этом образце метод <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> вызывается из обработчика событий «FormClosing» главной формы приложения; это гарантирует, что объекты, созданные средой выполнения, правильно удаляются при завершении работы приложения. Этот пример представлен в [примере приложения распознавания речи](https://go.microsoft.com/fwlink/?LinkId=157405).  
  
 [!code-csharp[WF_Samples#108](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#108)]
 [!code-vb[WF_Samples#108](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#108)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllServices">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;object&gt; GetAllServices (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;object&gt; GetAllServices(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetAllServices(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllServices (serviceType As Type) As ReadOnlyCollection(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Object ^&gt; ^ GetAllServices(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="member this.GetAllServices : Type -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;obj&gt;" Usage="workflowRuntime.GetAllServices serviceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">Возвращаемые службы должны реализовывать тип <see cref="T:System.Type" />.</param>
        <summary>Извлекает все службы, добавленные к механизму среды выполнения рабочих процессов, которые реализуют или являются производными от указанного типа <see cref="T:System.Type" />.</summary>
        <returns>Службы, которые реализуют или являются производными от указанного типа <see cref="T:System.Type" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Пустая коллекция <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> означает, что к механизму среды выполнения рабочих процессов не была добавлена ни одна служба, реализующая или производная от указанного типа <xref:System.Type>.  
  
   
  
## Examples  
 В следующем примере демонстрируется извлечение всех служб данного типа из объекта <xref:System.Workflow.Runtime.WorkflowRuntime>.  
  
 [!code-csharp[WF_Samples#19](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#19)]
 [!code-vb[WF_Samples#19](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="serviceType" /> является неопределенной ссылкой (<see langword="Nothing" /> в Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> удален.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllServices&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; GetAllServices&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;!!T&gt; GetAllServices&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetAllServices``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllServices(Of T) () As ReadOnlyCollection(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;T&gt; ^ GetAllServices();" />
      <MemberSignature Language="F#" Value="member this.GetAllServices : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;'T&gt;" Usage="workflowRuntime.GetAllServices " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Тип службы.</typeparam>
        <summary>Извлекает все службы, добавленные к механизму среды выполнения рабочих процессов, которые реализуют или являются производными от указанного универсального типа.</summary>
        <returns>Службы, которые реализуют или являются производными от указанного универсального типа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Пустая коллекция <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> означает, что к механизму среды выполнения рабочих процессов не добавлена ни одна служба, реализующая или производная от указанного универсального типа.  
  
   
  
## Examples  
 В следующем примере демонстрируется извлечение всех служб данного типа из объекта <xref:System.Workflow.Runtime.WorkflowRuntime>.  
  
 [!code-csharp[WF_Samples#6](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#6)]
 [!code-vb[WF_Samples#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> удален.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetLoadedWorkflows">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowInstance&gt; GetLoadedWorkflows ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Workflow.Runtime.WorkflowInstance&gt; GetLoadedWorkflows() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetLoadedWorkflows" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLoadedWorkflows () As ReadOnlyCollection(Of WorkflowInstance)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Workflow::Runtime::WorkflowInstance ^&gt; ^ GetLoadedWorkflows();" />
      <MemberSignature Language="F#" Value="member this.GetLoadedWorkflows : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowInstance&gt;" Usage="workflowRuntime.GetLoadedWorkflows " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowInstance&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает коллекцию, содержащую экземпляры рабочего процесса, загруженные в память.</summary>
        <returns>Объект <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> для всех экземпляров рабочего процесса, загруженных в память.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обратите внимание, что, в отличие от метода <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A>, этот метод не вызывает исключение <xref:System.InvalidOperationException>, если среда выполнения не запущена.  
  
   
  
## Examples  
 В следующем примере показано извлечение коллекции загруженных рабочих процессов из объекта <xref:System.Workflow.Runtime.WorkflowRuntime>.  
  
 [!code-csharp[WF_Samples#18](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#18)]
 [!code-vb[WF_Samples#18](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> удален.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetService(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="abstract member GetService : Type -&gt; obj&#xA;override this.GetService : Type -&gt; obj" Usage="workflowRuntime.GetService serviceType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IServiceProvider.GetService(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType"><see cref="T:System.Type" /> искомой службы.</param>
        <summary>Извлекает из механизма среды выполнения рабочих процессов службу указанного типа <see cref="T:System.Type" />.</summary>
        <returns>Служба заданного типа <see cref="T:System.Type" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.Workflow.Runtime.WorkflowRuntime.GetService%2A> вызывает исключение <xref:System.InvalidOperationException>, если для указанного типа <xref:System.Type> существует больше одной службы. Поэтому следует использовать один из перегруженных методов <xref:System.Workflow.Runtime.WorkflowRuntime.GetAllServices%2A>, если есть вероятность, что в объекте <xref:System.Workflow.Runtime.WorkflowRuntime> может присутствовать несколько служб указанного типа. Например, подсистема среды выполнения рабочего процесса может иметь несколько служб отслеживания. В случае запроса службы отслеживания путем указания базового класса <xref:System.Workflow.Runtime.Tracking.TrackingService> возможно формирование исключения.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="serviceType" /> является неопределенной ссылкой (<see langword="Nothing" /> в Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> уже удален.</exception>
        <exception cref="T:System.InvalidOperationException">Обнаружено больше одной службы типа <paramref name="serviceType" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetService&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetService&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetService&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetService``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService(Of T) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetService();" />
      <MemberSignature Language="F#" Value="member this.GetService : unit -&gt; 'T" Usage="workflowRuntime.GetService " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Тип службы.</typeparam>
        <summary>Извлекает из механизма среды выполнения рабочих процессов службу указанного универсального типа.</summary>
        <returns>Одна служба заданного универсального типа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.Workflow.Runtime.WorkflowRuntime.GetService%2A> вызывает исключение <xref:System.InvalidOperationException>, если для указанного универсального типа существует больше одной службы. Поэтому следует использовать один из перегруженных методов <xref:System.Workflow.Runtime.WorkflowRuntime.GetAllServices%2A>, если есть вероятность, что в объекте <xref:System.Workflow.Runtime.WorkflowRuntime> может присутствовать несколько служб универсального типа. Например, подсистема среды выполнения рабочего процесса может иметь несколько служб отслеживания. В случае запроса службы отслеживания путем указания базового класса <xref:System.Workflow.Runtime.Tracking.TrackingService> возможно формирование исключения.  
  
   
  
## Examples  
 В следующем примере демонстрируется извлечение одной службы из объекта <xref:System.Workflow.Runtime.WorkflowRuntime>; в данном случае это служба типа <xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService>. Этот пример представлен в [примере потоков рабочих процессов](https://go.microsoft.com/fwlink/?LinkId=157350).  
  
 [!code-csharp[WF_Samples#28](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#28)]
 [!code-vb[WF_Samples#28](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> уже удален.</exception>
        <exception cref="T:System.InvalidOperationException">Обнаружено больше одной службы универсального типа.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance GetWorkflow (Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance GetWorkflow(valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetWorkflow (instanceId As Guid) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ GetWorkflow(Guid instanceId);" />
      <MemberSignature Language="F#" Value="member this.GetWorkflow : Guid -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.GetWorkflow instanceId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="instanceId">Тип <see cref="T:System.Guid" /> экземпляра рабочего процесса.</param>
        <summary>Извлекает экземпляр рабочего процесса, который имеет указанный тип <see cref="T:System.Guid" />.</summary>
        <returns>Экземпляр класса <see cref="T:System.Workflow.Runtime.WorkflowInstance" />, имеющий указанный тип <see cref="T:System.Guid" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если параметр `instanceId` задает экземпляр рабочего процесса, которого нет в памяти, то этот экземпляр рабочего процесса загружается в память и включается в план выполнения. Например, после прерывания выполнения экземпляра рабочего процесса можно вызвать метод <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A>, чтобы снова загрузить этот экземпляр рабочего процесса в память. В этом случае служба сохраняемости загрузит в память последнее сохраненное состояние экземпляра рабочего процесса.  
  
   
  
## Examples  
 В следующем примере кода показан метод `ReloadWorkflow`, вызывающий метод <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A>. Метод `ReloadWorkflow` является частью большего класса, имеющего свойство `Runtime` для доступа ко всем методам, свойствам и событиям класса <xref:System.Workflow.Runtime.WorkflowRuntime>.  
  
 Этот пример кода входит в образец примера [пользовательской службы сохраняемости](https://go.microsoft.com/fwlink/?LinkId=157351) .  
  
> [!NOTE]
>  В этом примере вызов метода <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> является избыточным, так как методы <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> и <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> используют для загрузки экземпляра рабочего процесса в память один и тот же внутренний вспомогательный метод.  
  
 [!code-csharp[WF_Samples#265](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#265)]
 [!code-vb[WF_Samples#265](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#265)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Среда выполнения рабочих процессов не запущена.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsStarted">
      <MemberSignature Language="C#" Value="public bool IsStarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStarted" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowRuntime.IsStarted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStarted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStarted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStarted : bool" Usage="System.Workflow.Runtime.WorkflowRuntime.IsStarted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, показывающее, был ли запущен механизм среды выполнения рабочих процессов.</summary>
        <value>Значение <see langword="true" />, если механизм времени выполнения рабочих процессов запущен; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> показывает, что службы механизма среды выполнения рабочих процессов запущены. <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A>`false` до вызова<xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>узла. Значение `true` сохраняется, пока ведущее приложение не вызовет метод <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>.  
  
> [!NOTE]
>  Пока выполняется механизм среды выполнения рабочих процессов, к нему нельзя добавлять базовые службы. Базовые службы — это службы, производные от классов <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService>, <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService>, <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> и <xref:System.Workflow.Runtime.Tracking.TrackingService>.  
  
   
  
## Examples  
 В следующем примере показан доступ к свойству <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> объекта <xref:System.Workflow.Runtime.WorkflowRuntime>. В этом примере, если среда выполнения запущена, на консоль выводится сообщение.  
  
 [!code-csharp[WF_Samples#21](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#21)]
 [!code-vb[WF_Samples#21](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowRuntime.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Workflow.Runtime.WorkflowRuntime.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает имя, связанное с объектом <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</summary>
        <value>Имя, связанное с данным объектом <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Невозможно задать <xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A> , пока выполняется подсистема среды выполнения рабочего процесса (<xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> имеет значение `true`).  
  
   
  
## Examples  
 В следующем примере показан доступ к свойству <xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A> объекта <xref:System.Workflow.Runtime.WorkflowRuntime>. В этом примере среде выполнения задается имя «Main Runtime».  
  
 [!code-csharp[WF_Samples#20](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#20)]
 [!code-vb[WF_Samples#20](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Происходит попытка задать свойство <see cref="P:System.Workflow.Runtime.WorkflowRuntime.Name" /> для объекта <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />, который удален.</exception>
        <exception cref="T:System.InvalidOperationException">Происходит попытка задать свойство <see cref="P:System.Workflow.Runtime.WorkflowRuntime.Name" /> во время работы механизма среды выполнения рабочих процессов.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveService">
      <MemberSignature Language="C#" Value="public void RemoveService (object service);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveService(object service) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.RemoveService(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveService (service As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveService(System::Object ^ service);" />
      <MemberSignature Language="F#" Value="member this.RemoveService : obj -&gt; unit" Usage="workflowRuntime.RemoveService service" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="service">Объект, представляющий удаляемую службу.</param>
        <summary>Удаляет указанную службу из механизма среды выполнения рабочих процессов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Невозможно удалить основную службу, пока выполняется подсистема среды выполнения рабочего процесса (<xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> имеет значение `true`). Базовые службы — это службы, производные от классов <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService>, <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService>, <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> или <xref:System.Workflow.Runtime.Tracking.TrackingService>.  Если служба `service` является производной от класса <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>, то метод <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A> вызывает метод <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>, реализованный `service`.  
  
   
  
## Examples  
 В следующем примере служба <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> добавляется к объекту <xref:System.Workflow.Runtime.WorkflowRuntime> и удаляется из него.  
  
 [!code-csharp[WF_Samples#16](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#16)]
 [!code-vb[WF_Samples#16](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="service" /> является неопределенной ссылкой (<see langword="Nothing" /> в Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> уже удален.</exception>
        <exception cref="T:System.InvalidOperationException">Механизм среды выполнения рабочих процессов запущен (свойство <see cref="P:System.Workflow.Runtime.WorkflowRuntime.IsStarted" /> имеет значение <see langword="true" />), и <paramref name="service" /> является базовой службой.  
  
- или - 
 Служба <paramref name="service" /> не зарегистрирована механизмом среды выполнения рабочих процессов.</exception>
      </Docs>
    </Member>
    <Member MemberName="ServicesExceptionNotHandled">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt; ServicesExceptionNotHandled;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt; ServicesExceptionNotHandled" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled" />
      <MemberSignature Language="VB.NET" Value="Public Event ServicesExceptionNotHandled As EventHandler(Of ServicesExceptionNotHandledEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::ServicesExceptionNotHandledEventArgs ^&gt; ^ ServicesExceptionNotHandled;" />
      <MemberSignature Language="F#" Value="member this.ServicesExceptionNotHandled : EventHandler&lt;System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt; " Usage="member this.ServicesExceptionNotHandled : System.EventHandler&lt;System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит, когда служба, производная от класса <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />, вызывает метод <see cref="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Служба, производная от класса <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>, может вызвать метод <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A> для оповещения подписчиков события <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled> о возникновении во время ее выполнения исключения, которое она не смогла обработать. На это событие можно подписаться, чтобы реализовать механизм восстановления.  
  
 Это событие происходит при возникновении исключения, когда механизм среды выполнения рабочих процессов еще не создал экземпляр рабочего процесса. В этом сценарии единственным способом уведомления ведущего приложения о возникновении исключения является создание события. Однако механизм среды выполнения рабочих процессов не вызывает его напрямую. Вместо этого механизм среды выполнения рабочих процессов возвращает исключение либо экземпляру рабочего процесса, либо, если экземпляра нет, вызвавшему объекту, который в этом случае фактически является службой, вызывающей данное событие. При создании собственной службы сохраняемости или планирования заданий необходимо реализовать это событие самостоятельно через базовый метод <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A>.  
  
 Отправитель события <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled> содержит объект <xref:System.Workflow.Runtime.WorkflowRuntime>, а объект <xref:System.Workflow.Runtime.WorkflowEventArgs> содержит тип <xref:System.Guid> экземпляра рабочего процесса, который использовал данную службу, и исключение <xref:System.Exception>, которое не удалось обработать.  
  
 Дополнительные сведения об обработке событий см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 В следующем примере кода показано использование функций класса <xref:System.Workflow.Runtime.WorkflowRuntime> с узла рабочего процесса. Этот код связывает событие <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled> с обработчиком событий — методом с именем `OnExceptionNotHandled`.  
  
 Этот пример кода является частью [примера пользовательской службы сохраняемости](https://go.microsoft.com/fwlink/?LinkID=157351).  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Started">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Started;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Started" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.Started" />
      <MemberSignature Language="VB.NET" Value="Public Event Started As EventHandler(Of WorkflowRuntimeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowRuntimeEventArgs ^&gt; ^ Started;" />
      <MemberSignature Language="F#" Value="member this.Started : EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; " Usage="member this.Started : System.EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возникает при запуске механизма среды выполнения рабочих процессов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод вызывает событие после проверки основной конфигурации службы обработчика среды выполнения рабочего процесса <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> , вызвала метод, реализованный в каждой <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> из служб, производных от класса, <xref:System.Workflow.Runtime.WorkflowRuntime.Started> <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> и имеет значение <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A>. `true` Порядок, в котором службы, производные от класса <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>, запускаются механизмом среды выполнения рабочих процессов, не гарантирован, и некоторым службам механизма среды выполнения рабочих процессов для завершения своих задач запуска могут потребоваться функции, предоставляемые другими службами. Службы механизма среды выполнения рабочих процессов могут переопределять метод <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A?displayProperty=nameWithType> для завершения конечных задач запуска, которым требуется поддержка других служб механизма среды выполнения рабочих процессов при возникновении события <xref:System.Workflow.Runtime.WorkflowRuntime.Started>.  
  
 Дополнительные сведения об обработке событий см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 В следующем примере к событию <xref:System.Workflow.Runtime.WorkflowRuntime.Started> объекта <xref:System.Workflow.Runtime.WorkflowRuntime> добавляется обработчик события. В этом примере обработчиком является анонимный метод, который выводит на консоль простое сообщение.  
  
 [!code-csharp[WF_Samples#15](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#15)]
 [!code-vb[WF_Samples#15](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartRuntime">
      <MemberSignature Language="C#" Value="public void StartRuntime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartRuntime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.StartRuntime" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartRuntime ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartRuntime();" />
      <MemberSignature Language="F#" Value="member this.StartRuntime : unit -&gt; unit" Usage="workflowRuntime.StartRuntime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Запускает механизм среды выполнения рабочих процессов и его службы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод проверяет существование допустимого набора базовых служб и запускает службы, производные от класса <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>.  Должна быть только одна из следующих основных служб: служба рабочего процесса `CommitWorkBatch` , производная <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> от базового класса и службы планировщика, производная от <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> базового класса.  Если какая-либо из этих основных служб отсутствует, подсистема среды выполнения рабочих процессов предоставляет соответствующую службу по умолчанию: <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService> для службы рабочего `CommitWorkBatch` процесса и <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService> для службы планировщика. Служба сохраняемости является необязательной, но может присутствовать только одна служба сохраняемости. Метод <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> проверяет конфигурацию служб, а затем вызывает метод <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> для всех служб, производных от класса <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>.  Наконец, механизм среды выполнения рабочих процессов задает значение свойству <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> и создает событие <xref:System.Workflow.Runtime.WorkflowRuntime.Started>.  
  
 После запуска механизма среды выполнения рабочих процессов добавлять или удалять базовые службы нельзя. Базовые службы — это службы, производные от классов <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService>, <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService>, <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> или <xref:System.Workflow.Runtime.Tracking.TrackingService>.  Вызов метода <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> во время работы механизма среды выполнения рабочих процессов не приводит ни к каким действиям.  
  
   
  
## Examples  
 В следующем примере кода показано использование функций класса <xref:System.Workflow.Runtime.WorkflowRuntime> с узла рабочего процесса. Код вызывает метод <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> после того, как метод <xref:System.Workflow.Runtime.WorkflowRuntime.%23ctor%2A> создает экземпляр класса <xref:System.Workflow.Runtime.WorkflowRuntime> и вызывает метод <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A>, чтобы добавить службы к среде выполнения. Он также вызывает метод <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> перед выполнением остальных действий.  
  
 Этот пример кода является частью примера [отмены рабочего процесса](https://go.microsoft.com/fwlink/?LinkId=157346) .  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> удален.</exception>
        <exception cref="T:System.InvalidOperationException">Имеется больше одной службы <see langword="CommitWorkBatch" /> рабочего процесса, зарегистрированной данным объектом <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.  
  
- или - 
Имеется больше одной службы планирования заданий, зарегистрированной данным объектом <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.  
  
- или - 
Имеется больше одной службы сохраняемости, зарегистрированной данным объектом <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Stopped">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Stopped;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Stopped" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.Stopped" />
      <MemberSignature Language="VB.NET" Value="Public Event Stopped As EventHandler(Of WorkflowRuntimeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowRuntimeEventArgs ^&gt; ^ Stopped;" />
      <MemberSignature Language="F#" Value="member this.Stopped : EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; " Usage="member this.Stopped : System.EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возникает при остановке механизма среды выполнения рабочих процессов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> вызывает событие <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> после вызова метода <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>, реализованного всеми его службами, производными от класса <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>.  Порядок остановки служб механизма среды выполнения рабочих процессов не гарантирован, и некоторым из этих служб может понадобиться сохранение некоторых функций, основанных на других службах, пока они также не будут остановлены. Такие службы могут переопределять метод <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A?displayProperty=nameWithType> для реализации прежней логики завершения при возникновении события <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped>.  
  
 Дополнительные сведения об обработке событий см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 В следующем примере к событию <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> объекта <xref:System.Workflow.Runtime.WorkflowRuntime> добавляется обработчик события. В этом примере обработчиком является анонимный метод, который выводит на консоль простое сообщение.  
  
 [!code-csharp[WF_Samples#14](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#14)]
 [!code-vb[WF_Samples#14](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopRuntime">
      <MemberSignature Language="C#" Value="public void StopRuntime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopRuntime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.StopRuntime" />
      <MemberSignature Language="VB.NET" Value="Public Sub StopRuntime ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StopRuntime();" />
      <MemberSignature Language="F#" Value="member this.StopRuntime : unit -&gt; unit" Usage="workflowRuntime.StopRuntime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Останавливает механизм среды выполнения рабочих процессов и ее службы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заставляет подсистеме среды выполнения рабочего процесса выгрузить каждый из экземпляров рабочего процесса, останавливаться на всех службах, производных <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> от класса, <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> `false`установить значение и вызвать <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> событие.  
  
 Для правильного закрытия объекта <xref:System.Workflow.Runtime.WorkflowRuntime> метод <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> вызовите перед вызовом метода <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A>.  
  
 Дополнительные сведения см. в описании метода <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A>.  
  
   
  
## Examples  
 В следующем примере кода показано использование функций класса <xref:System.Workflow.Runtime.WorkflowRuntime> с узла рабочего процесса. Метод <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> вызывается после завершения узлом всех остальных действий, связанных со средой выполнения.  
  
 Этот пример кода является частью примера [отмены рабочего процесса](https://go.microsoft.com/fwlink/?LinkId=157346) .  
  
 [!code-csharp[WF_Samples#259](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#259)]
 [!code-vb[WF_Samples#259](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#259)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> уже удален.</exception>
      </Docs>
    </Member>
    <Member MemberName="WorkflowAborted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowAborted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowAborted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowAborted As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowAborted;" />
      <MemberSignature Language="F#" Value="member this.WorkflowAborted : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowAborted : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при прерывании выполнения экземпляра рабочего процесса.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Событие <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted> происходит после удаления всех ожидающих работ экземпляра рабочего процесса, но до того, как экземпляр рабочего процесса становится недействительным в памяти. Выполнение экземпляра рабочего процесса можно прервать, вызвав метод <xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A?displayProperty=nameWithType>.  
  
 Отправитель этого события содержит объект <xref:System.Workflow.Runtime.WorkflowRuntime>, а объект <xref:System.Workflow.Runtime.WorkflowEventArgs> содержит экземпляр <xref:System.Workflow.Runtime.WorkflowInstance>, связанный с данным событием.  
  
 Дополнительные сведения об обработке событий см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 В следующем примере кода показано использование функций класса <xref:System.Workflow.Runtime.WorkflowRuntime> с узла рабочего процесса. Этот код связывает событие <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted> с обработчиком событий — методом с именем `OnWorkflowAborted`.  
  
 Этот пример кода является частью примера [отмены рабочего процесса](https://go.microsoft.com/fwlink/?LinkID=157346) .  
  
 [!code-csharp[WF_Samples#141](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#141)]
 [!code-vb[WF_Samples#141](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#141)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowCompletedEventArgs&gt; WorkflowCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowCompletedEventArgs&gt; WorkflowCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowCompleted As EventHandler(Of WorkflowCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowCompletedEventArgs ^&gt; ^ WorkflowCompleted;" />
      <MemberSignature Language="F#" Value="member this.WorkflowCompleted : EventHandler&lt;System.Workflow.Runtime.WorkflowCompletedEventArgs&gt; " Usage="member this.WorkflowCompleted : System.EventHandler&lt;System.Workflow.Runtime.WorkflowCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при успешном завершении выполнения экземпляра рабочего процесса.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Событие <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> возникает после успешного завершения выполнения экземпляра рабочего процесса, но до того, как этот экземпляр становится недействительным в памяти.  
  
 Отправитель этого события <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> содержит объект <xref:System.Workflow.Runtime.WorkflowRuntime>, а объект <xref:System.Workflow.Runtime.WorkflowCompletedEventArgs> содержит объект <xref:System.Workflow.Runtime.WorkflowInstance> и его выходные параметры.  
  
 Дополнительные сведения об обработке событий см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 В следующем примере кода показано использование функций класса <xref:System.Workflow.Runtime.WorkflowRuntime> с узла рабочего процесса. Этот код связывает событие <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> с обработчиком событий — методом с именем `OnWorkflowCompleted`.  
  
 Этот пример кода является частью примера [отмены рабочего процесса](https://go.microsoft.com/fwlink/?LinkId=157346) .  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowCreated" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowCreated" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowCreated As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowCreated;" />
      <MemberSignature Language="F#" Value="member this.WorkflowCreated : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowCreated : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при создании экземпляра рабочего процесса.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Механизм среды выполнения рабочих процессов создает событие <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCreated> после того, как экземпляр рабочего процесса полностью создан, но до обработки действий. Отправитель этого события содержит объект <xref:System.Workflow.Runtime.WorkflowRuntime>, а объект <xref:System.Workflow.Runtime.WorkflowEventArgs> содержит экземпляр <xref:System.Workflow.Runtime.WorkflowInstance>, связанный с данным событием.  
  
 Дополнительные сведения об обработке событий см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 В следующем примере кода показано использование функций класса <xref:System.Workflow.Runtime.WorkflowRuntime> с узла рабочего процесса. Этот код связывает событие <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCreated> с обработчиком событий — методом с именем `OnWorkflowCreated`.  
  
 Этот пример кода является частью [примера пользовательской службы сохраняемости](https://go.microsoft.com/fwlink/?LinkID=15735).  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowIdled">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowIdled;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowIdled" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowIdled As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowIdled;" />
      <MemberSignature Language="F#" Value="member this.WorkflowIdled : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowIdled : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при переходе экземпляра рабочего процесса в состояние бездействия.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Механизм среды выполнения рабочих процессов создает событие <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled>, когда экземпляр рабочего процесса переходит в состояние бездействия; например, когда рабочий процесс ожидает завершения действия <xref:System.Workflow.Activities.DelayActivity>.  
  
 Отправитель этого события содержит объект <xref:System.Workflow.Runtime.WorkflowRuntime>, а объект <xref:System.Workflow.Runtime.WorkflowEventArgs> содержит экземпляр <xref:System.Workflow.Runtime.WorkflowInstance>, связанный с данным событием.  
  
 Дополнительные сведения об обработке событий см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 В следующем примере кода показано использование функций класса <xref:System.Workflow.Runtime.WorkflowRuntime> с узла рабочего процесса. Этот код связывает событие <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> с обработчиком событий — методом с именем `OnWorkflowIdled`.  
  
 Этот пример кода является частью примера [отмены рабочего процесса](https://go.microsoft.com/fwlink/?LinkID=157346) .  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowLoaded">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowLoaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowLoaded" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowLoaded As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowLoaded;" />
      <MemberSignature Language="F#" Value="member this.WorkflowLoaded : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowLoaded : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при загрузке экземпляра рабочего процесса в память.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Событие <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> возникает после восстановления службой сохраняемости экземпляра рабочего процесса, но до того, как механизм среды выполнения рабочих процессов начнет выполнение каких-либо действий.  
  
 Отправитель этого события <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> содержит объект <xref:System.Workflow.Runtime.WorkflowRuntime>, а объект <xref:System.Workflow.Runtime.WorkflowEventArgs> содержит объект <xref:System.Workflow.Runtime.WorkflowInstance>, связанный с этим событием.  
  
 Дополнительные сведения об обработке событий см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 В следующем примере кода показано использование функций класса <xref:System.Workflow.Runtime.WorkflowRuntime> с узла рабочего процесса. Этот код связывает событие <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> с обработчиком событий — методом с именем `OnWorkflowLoad`.  
  
 Этот пример кода является частью примера [пользовательской службы сохраняемости](https://go.microsoft.com/fwlink/?LinkID=157351) .  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowPersisted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowPersisted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowPersisted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowPersisted As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowPersisted;" />
      <MemberSignature Language="F#" Value="member this.WorkflowPersisted : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowPersisted : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при сохранении состояния экземпляра рабочего процесса.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Сохранение состояния экземпляра рабочего процесса может происходить по многим причинам. Например, узел может вызвать метод <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A?displayProperty=nameWithType> для экземпляра рабочего процесса; или механизм среды выполнения рабочих процессов может сохранить экземпляр рабочего процесса, так как он стал неактивным или из-за завершения атомарной области. Если служба постоянного хранения присутствует в <xref:System.Workflow.Runtime.WorkflowRuntime>, <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> инициируется средой выполнения после сохранения в памяти состояния экземпляра рабочего процесса. Если служба постоянного хранения не присутствует, событие также инициируется, но состояние экземпляра не сохраняется. Если событие <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> возникает из-за выгрузки экземпляра рабочего процесса, то за ним последует событие <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded>.  
  
 Отправитель этого события <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> содержит объект <xref:System.Workflow.Runtime.WorkflowRuntime>, а объект <xref:System.Workflow.Runtime.WorkflowEventArgs> содержит объект <xref:System.Workflow.Runtime.WorkflowInstance>, связанный с этим событием.  
  
 Дополнительные сведения об обработке событий см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 В следующем примере кода показано использование функций класса <xref:System.Workflow.Runtime.WorkflowRuntime> с узла рабочего процесса. Этот код связывает событие <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> с обработчиком событий — методом с именем `OnWorkflowPersisted`.  
  
 Этот пример кода является частью [примера пользовательской службы сохраняемости](https://go.microsoft.com/fwlink/?LinkID=15735).  
  
 [!code-csharp[WF_Samples#279](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#279)]
 [!code-vb[WF_Samples#279](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#279)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowResumed">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowResumed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowResumed" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowResumed As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowResumed;" />
      <MemberSignature Language="F#" Value="member this.WorkflowResumed : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowResumed : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит, когда выполнение экземпляра рабочего процесса возобновляется после приостановки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Механизм среды выполнения рабочих процессов создает событие <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> непосредственно перед включением экземпляра рабочего процесса в план выполнения. Событие <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> обычно возникает в результате явного вызова метода <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=nameWithType>. Однако механизм среды выполнения рабочих процессов может временно приостановить выполнение операции для экземпляра, например для применения изменения рабочего процесса. В этом случае событие <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> возникает, когда среда выполнения возобновляет выполнение экземпляра рабочего процесса вслед за операцией.  
  
 Отправитель этого события <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> содержит объект <xref:System.Workflow.Runtime.WorkflowRuntime>, а объект <xref:System.Workflow.Runtime.WorkflowEventArgs> содержит объект <xref:System.Workflow.Runtime.WorkflowInstance>, связанный с этим событием.  
  
 Дополнительные сведения об обработке событий см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 В следующем примере кода показано использование функций класса <xref:System.Workflow.Runtime.WorkflowRuntime> с узла рабочего процесса. Этот код связывает событие <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> с обработчиком событий — методом с именем `OnWorkflowResume`.  
  
 Этот пример кода является частью [примера приостановки и завершения](https://go.microsoft.com/fwlink/?LinkId=157402).  
  
 [!code-csharp[WF_Samples#171](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#171)]
 [!code-vb[WF_Samples#171](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#171)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowStarted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowStarted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowStarted As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowStarted;" />
      <MemberSignature Language="F#" Value="member this.WorkflowStarted : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowStarted : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при запуске экземпляра рабочего процесса.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Механизм среды выполнения рабочих процессов создает событие <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowStarted> после запуска экземпляра рабочего процесса с помощью включения корневого действия в план выполнения. Отправитель этого события содержит объект <xref:System.Workflow.Runtime.WorkflowRuntime>, а объект <xref:System.Workflow.Runtime.WorkflowEventArgs> содержит экземпляр <xref:System.Workflow.Runtime.WorkflowInstance>, связанный с данным событием.  
  
 Дополнительные сведения об обработке событий см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 В следующем примере кода показано использование функций класса <xref:System.Workflow.Runtime.WorkflowRuntime> с узла рабочего процесса. Этот код связывает событие <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowStarted> с обработчиком событий — методом с именем `OnWorkflowStarted`.  
  
 Этот пример кода является частью [примера обмена данными с узлом](https://go.microsoft.com/fwlink/?LinkId=157406).  
  
 [!code-csharp[WF_Samples#297](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets38.cs#297)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowSuspended">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt; WorkflowSuspended;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt; WorkflowSuspended" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowSuspended As EventHandler(Of WorkflowSuspendedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowSuspendedEventArgs ^&gt; ^ WorkflowSuspended;" />
      <MemberSignature Language="F#" Value="member this.WorkflowSuspended : EventHandler&lt;System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt; " Usage="member this.WorkflowSuspended : System.EventHandler&lt;System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при приостановке выполнения экземпляра рабочего процесса.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Выполнение экземпляра рабочего процесса может быть приостановлено узлом посредством вызова метода <xref:System.Workflow.Runtime.WorkflowInstance.Suspend%2A>, действием <xref:System.Workflow.ComponentModel.SuspendActivity> или неявно механизмом среды выполнения рабочих процессов. Например, механизм среды выполнения рабочих процессов может временно приостановить выполнение экземпляра при применении к нему динамических изменений.  
  
 Отправитель события <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended> содержит объект <xref:System.Workflow.Runtime.WorkflowRuntime>, а объект <xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs> содержит экземпляр <xref:System.Workflow.Runtime.WorkflowInstance> и строку, описывающую причину приостановки выполнения экземпляра.  
  
 Дополнительные сведения об обработке событий см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 В следующем примере кода показано использование функций класса <xref:System.Workflow.Runtime.WorkflowRuntime> с узла рабочего процесса. Этот код связывает событие <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended> с обработчиком событий — методом с именем `OnWorkflowSuspended`.  
  
 Этот пример кода является частью [примера приостановки и завершения](https://go.microsoft.com/fwlink/?LinkID=157402).  
  
 [!code-csharp[WF_Samples#170](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#170)]
 [!code-vb[WF_Samples#170](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#170)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowTerminated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt; WorkflowTerminated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt; WorkflowTerminated" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowTerminated As EventHandler(Of WorkflowTerminatedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowTerminatedEventArgs ^&gt; ^ WorkflowTerminated;" />
      <MemberSignature Language="F#" Value="member this.WorkflowTerminated : EventHandler&lt;System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt; " Usage="member this.WorkflowTerminated : System.EventHandler&lt;System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при завершении выполнения экземпляра рабочего процесса.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Рабочий процесс может быть завершен узлом посредством вызова метода <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A>, действием <xref:System.Workflow.ComponentModel.TerminateActivity> или механизмом среды выполнения рабочих процессов при возникновении необработанного исключения. Механизм среды выполнения рабочих процессов создает событие <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> после завершения выполнения экземпляра рабочего процесса, но до того, как он станет недействительным в памяти.  
  
 Отправитель события <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> содержит объект <xref:System.Workflow.Runtime.WorkflowRuntime>, а объект <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs> содержит экземпляр <xref:System.Workflow.Runtime.WorkflowInstance> и сведения о причине завершения выполнения экземпляра в свойстве <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs.Exception%2A?displayProperty=nameWithType>.  
  
 Дополнительные сведения об обработке событий см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 В следующем примере кода показано использование функций класса <xref:System.Workflow.Runtime.WorkflowRuntime> с узла рабочего процесса. Этот код связывает событие <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> с обработчиком событий — методом с именем `OnWorkflowCompleted`.  
  
 Этот пример кода является частью примера [отмены рабочего процесса](https://go.microsoft.com/fwlink/?LinkID=157346) .  
  
 [!code-csharp[WF_Samples#260](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#260)]
 [!code-vb[WF_Samples#260](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#260)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowUnloaded">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowUnloaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowUnloaded" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowUnloaded As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowUnloaded;" />
      <MemberSignature Language="F#" Value="member this.WorkflowUnloaded : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowUnloaded : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при выгрузке экземпляра рабочего процесса из памяти.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

Экземпляр рабочего процесса может быть выгружен из памяти явным вызовом метода <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> или неявно механизмом среды выполнения рабочих процессов в соответствии с его собственными правилами. Например, подсистема среды выполнения рабочих процессов выгружает экземпляр рабочего процесса, если экземпляр переходит в состояние бездействия и в среде выполнения <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> добавлен элемент, <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle%2A> для `true`которого задано значение.  
  
Обработчик среды выполнения рабочих процессов создает `WorkflowUnloaded` событие после успешного сохранения состояния экземпляра рабочего процесса, но до того, как экземпляр становится недействительным в памяти. Поэтому событие <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> предшествует событию <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded>.  
  
Отправитель этого события `WorkflowUnloaded` содержит объект <xref:System.Workflow.Runtime.WorkflowRuntime>, а объект <xref:System.Workflow.Runtime.WorkflowEventArgs> содержит объект <xref:System.Workflow.Runtime.WorkflowInstance>, связанный с этим событием.  
  
Дополнительные сведения об обработке событий см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
## Examples

В следующем примере кода показано использование функций класса <xref:System.Workflow.Runtime.WorkflowRuntime> с узла рабочего процесса. Этот код связывает событие <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> с обработчиком событий — методом с именем `OnWorkflowUnload`.  
  
 Этот пример кода является частью [примера пользовательской службы сохраняемости](https://go.microsoft.com/fwlink/?LinkID=157351).  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
