<Type Name="XmlSchemaSet" FullName="System.Xml.Schema.XmlSchemaSet">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2a040021a3f08aaac3fa81b86bd7afe57e728c82" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75180374" /></Metadata><TypeSignature Language="C#" Value="public class XmlSchemaSet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlSchemaSet extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Schema.XmlSchemaSet" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlSchemaSet" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlSchemaSet" />
  <TypeSignature Language="F#" Value="type XmlSchemaSet = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Содержит кэш схем языка определения схем XML (XSD).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
> -   Не используйте схемы из неизвестных или ненадежных источников или расположений. Это приведет к нарушению безопасности кода.  
> -   Схемы XML (включая встроенные схемы) по сути уязвимы для атак типа "отказ в обслуживании"; не принимайте их в недоверенных сценариях.  
> -   Сообщения об ошибках и исключения проверки схемы могут представлять конфиденциальные сведения о модели содержимого или пути URI в файл схемы. Будьте внимательны, чтобы не предоставлять эти сведения ненадежным вызывающим объектам.  
> -   Дополнительные вопросы безопасности описаны в разделе "вопросы безопасности".  
  
 <xref:System.Xml.Schema.XmlSchemaSet> — это кэш или библиотека, в которой можно хранить схемы языка определения схемы XML (XSD). <xref:System.Xml.Schema.XmlSchemaSet> повышает производительность путем кэширования схем в памяти, а не доступа к ним из файла или с помощью URL-адреса. Каждая схема определяется по URI пространства имен и расположению, которое было указано при добавлении схемы в набор. Используйте свойство <xref:System.Xml.XmlReaderSettings.Schemas%2A?displayProperty=nameWithType>, чтобы назначить объект <xref:System.Xml.Schema.XmlSchemaSet>, который модуль чтения XML должен использовать для проверки данных.  
  
## <a name="security-considerations"></a>Вопросы безопасности  
  
-   Не используйте схемы из неизвестных или ненадежных источников. Это приведет к нарушению безопасности кода. Внешние пространства имен или расположения, на которые ссылаются элементы включения, импорта и переопределения схемы, разрешаются по отношению к базовому URI схемы, включающей или импортирующих их. Например, если базовый URI для включения или импорта схемы пуст или `null`, внешние расположения разрешаются по отношению к текущему каталогу. Класс <xref:System.Xml.XmlUrlResolver> используется для разрешения внешних схем по умолчанию. Чтобы отключить разрешение на включение, импорт и переопределение элементов схемы, задайте для свойства <xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A?displayProperty=nameWithType> значение `null`.  
  
-   Класс <xref:System.Xml.Schema.XmlSchemaSet> использует класс <xref:System.Text.RegularExpressions.Regex?displayProperty=nameWithType> для синтаксического анализа и сопоставления регулярных выражений в XML-схеме. Проверка аспектов шаблона с регулярными выражениями в схеме XML может привести к увеличению загрузки ЦП, и ее следует избегать в сценариях высокого уровня доступности.  
  
-   Исключения, возникающие в результате использования класса <xref:System.Xml.Schema.XmlSchemaSet>, например класса <xref:System.Xml.Schema.XmlSchemaException>, могут содержать конфиденциальные сведения, которые не должны предоставляться в ненадежных сценариях. Например, свойство <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> <xref:System.Xml.Schema.XmlSchemaException> Возвращает путь универсального кода ресурса (URI) к файлу схемы, вызвавшему исключение. Свойство <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> не должно предоставляться в недоверенных сценариях. Исключения должны быть правильно обработаны, чтобы эти конфиденциальные сведения не раскрываются в ненадежных сценариях.  
  
   
  
## Examples  
 В следующем примере XML-файл проверяется с использованием схем, хранимых в классе <xref:System.Xml.Schema.XmlSchemaSet>. Пространство имен в XML-файле, `urn:bookstore-schema`, идентифицирует схему в классе <xref:System.Xml.Schema.XmlSchemaSet> для использования при проверке. Выходные данные в примере показывают, что XML-файл имеет два нарушения схемы:

 - Первый \<Book > содержит элемент \<author >, но не \<заголовок > или \<Price >.

 - Элемент \<author > в последнем \<книги > не содержит \<First-Name > и \<Last-Name >, а вместо него имеет недопустимый элемент \<name >.   
  
 [!code-cpp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CPP/XmlReader_Validate_SchemaSet.cpp#1)]
 [!code-csharp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CS/validschemaset.cs#1)]
 [!code-vb[XmlReader_Validate_SchemaSet#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Validate_SchemaSet/VB/validschemaset.vb#1)]  
  
## <a name="input"></a>Входные данные  
 Образец использует следующие два входных файла.  
  
 **Букссчемафаил. XML:**  
  
 [!code-xml[XmlReader_Validate_SchemaSet#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/booksschemafail.xml#2)]  
  
 **Books. xsd:**  
  
 [!code-xml[XmlReader_Validate_SchemaSet#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/books.xsd#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaSet();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaSet (System.Xml.XmlNameTable nameTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlNameTable nameTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.#ctor(System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (nameTable As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaSet(System::Xml::XmlNameTable ^ nameTable);" />
      <MemberSignature Language="F#" Value="new System.Xml.Schema.XmlSchemaSet : System.Xml.XmlNameTable -&gt; System.Xml.Schema.XmlSchemaSet" Usage="new System.Xml.Schema.XmlSchemaSet nameTable" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="nameTable" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="nameTable">Используемый объект <see cref="T:System.Xml.XmlNameTable" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Xml.Schema.XmlSchemaSet" /> указанным значением <see cref="T:System.Xml.XmlNameTable" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Объект <see cref="T:System.Xml.XmlNameTable" />, переданный в качестве параметра, является <see langword="null" />.</exception>
        <altmember cref="T:System.Xml.XmlNameTable" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Добавляет заданную схему языка определения схем XML (XSD) в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Объект <see cref="T:System.Xml.Schema.XmlSchema" />, добавляемый в коллекцию <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
        <summary>Добавляет указанную <see cref="T:System.Xml.Schema.XmlSchema" /> в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Объект <see cref="T:System.Xml.Schema.XmlSchema" />, если схема успешно прошла проверку. Если схема не прошла проверку и задан <see cref="T:System.Xml.Schema.ValidationEventHandler" />, тогда возвращается <see langword="null" /> и возникает соответствующее событие проверки. В противном случае возникает исключение <see cref="T:System.Xml.Schema.XmlSchemaException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если объект <xref:System.Xml.Schema.XmlSchema> уже существует в <xref:System.Xml.Schema.XmlSchemaSet>, метод <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> не выполняет никаких действий.  
  
 Функциональность этого метода идентична функции метода <xref:System.Xml.Schema.XmlSchemaSet.Add%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Схема не прошла проверку.</exception>
        <exception cref="T:System.ArgumentNullException">Объект <see cref="T:System.Xml.Schema.XmlSchema" />, переданный в качестве параметра, является <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (schemas As XmlSchemaSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Xml.Schema.XmlSchemaSet -&gt; unit" Usage="xmlSchemaSet.Add schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas">Объект <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
        <summary>Добавляет все схемы языка определения схем XML (XSD), содержащиеся в заданном <see cref="T:System.Xml.Schema.XmlSchemaSet" />, в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Прежде чем схему можно будет добавить в <xref:System.Xml.Schema.XmlSchemaSet>, ее необходимо успешно обработать. Предварительная обработка выполняет следующие основные задачи.  
  
1.  Схема проверяется на соответствие структурной достоверности согласно правилам схемы W3C XML, но схема не полностью проверена.  
  
2.  Ссылки на внутренние и внешние компоненты схемы разрешаются. Все импортированные или включенные схемы, которые были успешно получены, также добавляются в <xref:System.Xml.Schema.XmlSchemaSet>. Импортированные схемы добавляются в виде отдельных объектов <xref:System.Xml.Schema.XmlSchema>, а включенные схемы делаются частью, включающей в себя <xref:System.Xml.Schema.XmlSchema>.  
  
 Если свойство <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> добавляемого <xref:System.Xml.Schema.XmlSchemaSet> имеет значение `true`, все схемы в <xref:System.Xml.Schema.XmlSchemaSet> для добавления добавляются в <xref:System.Xml.Schema.XmlSchemaSet>. Если свойство <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> добавляемого <xref:System.Xml.Schema.XmlSchemaSet> является `false`, то каждая добавленная схема будет предварительно обработана перед добавлением. Если любая из схем в вновь добавленной <xref:System.Xml.Schema.XmlSchemaSet> не может быть предварительно обработана, схемы не добавляются; Вместо этого выдается <xref:System.Xml.Schema.XmlSchemaException>. В результате следующий два примера кода не эквивалентны.  
  
```vb  
' First example  
schemaSet.Add(schemaSet1)  
  
' Second example  
Dim schema As XmlSchema  
  
For Each schema in schemaSet.Schemas()  
  
    schemaSet.Add(schema)  
  
Next  
```  
  
```csharp  
// First example  
schemaSet.Add(schemaSet1);  
  
// Second example  
foreach(XmlSchema schema in schemaSet.Schemas())  
{  
    schemaSet.Add(schema);  
}  
```  
  
 Предыдущие два примера кода не эквивалентны. В первом примере, если в `schemaSet1` существует недопустимая схема, а ее свойство <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> имеет значение `false`, схемы не добавляются в `schemaSet`. Во втором примере можно добавить несколько схем в `schemaSet`, прежде чем будет обнаружена недопустимая схема, и будет создано исключение.  
  
   
  
## Examples  
 В следующем примере кода показано добавление схем в <xref:System.Xml.Schema.XmlSchemaSet>, а затем Добавление <xref:System.Xml.Schema.XmlSchemaSet> в новый <xref:System.Xml.Schema.XmlSchemaSet> с помощью метода <xref:System.Xml.Schema.XmlSchemaSet.Add%2A>.  
  
```vb  
Dim schemaSet1 As XmlSchemaSet = New XmlSchemaSet  
schemaSet1.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet1.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet1.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schemaSet2 As XmlSchemaSet = New XmlSchemaSet  
schemaSet2.Add(schemaSet1)  
```  
  
```csharp  
XmlSchemaSet schemaSet1 = new XmlSchemaSet();  
schemaSet1.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet1.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet1.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
XmlSchemaSet schemaSet2 = new XmlSchemaSet();  
schemaSet2.Add(schemaSet1);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Схема в <see cref="T:System.Xml.Schema.XmlSchemaSet" /> недействительна.</exception>
        <exception cref="T:System.ArgumentNullException">Объект <see cref="T:System.Xml.Schema.XmlSchemaSet" />, переданный в качестве параметра, является <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (string targetNamespace, string schemaUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(string targetNamespace, string schemaUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (targetNamespace As String, schemaUri As String) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::String ^ targetNamespace, System::String ^ schemaUri);" />
      <MemberSignature Language="F#" Value="member this.Add : string * string -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add (targetNamespace, schemaUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
        <Parameter Name="schemaUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Свойство схемы <paramref name="targetNamespace" /> или <see langword="null" />, чтобы использовалось пространство имен <paramref name="targetNamespace" />, определенное в схеме.</param>
        <param name="schemaUri">URL-адрес, ссылающийся на схему, которую необходимо загрузить.</param>
        <summary>Добавляет схему языка определения схем XML (XSD), расположенную по указанному URL-адресу, в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Объект <see cref="T:System.Xml.Schema.XmlSchema" />, если схема успешно прошла проверку. Если схема не прошла проверку и задан <see cref="T:System.Xml.Schema.ValidationEventHandler" />, тогда возвращается <see langword="null" /> и возникает соответствующее событие проверки. В противном случае возникает исключение <see cref="T:System.Xml.Schema.XmlSchemaException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Прежде чем схему можно будет добавить в <xref:System.Xml.Schema.XmlSchemaSet>, ее необходимо успешно обработать. Предварительная обработка выполняет следующие основные задачи.  
  
1.  Схема проверяется на соответствие структурной достоверности согласно правилам схемы W3C XML, но схема не полностью проверена.  
  
2.  Ссылки на внутренние и внешние компоненты схемы разрешаются. Все импортированные или включенные схемы, которые были успешно получены, также добавляются в <xref:System.Xml.Schema.XmlSchemaSet>. Импортированные схемы добавляются в виде отдельных объектов <xref:System.Xml.Schema.XmlSchema>, а включенные схемы делаются частью, включающей в себя <xref:System.Xml.Schema.XmlSchema>.  
  
 Ниже приведены важные замечания, которые следует учитывать при использовании метода <xref:System.Xml.Schema.XmlSchemaSet.Add%2A>.  
  
-   Добавление схемы в <xref:System.Xml.Schema.XmlSchemaSet> с тем же целевым пространством имен и URL-адресом расположения схемы, что и схема, уже содержащаяся в <xref:System.Xml.Schema.XmlSchemaSet>, вернет исходный объект схемы.  
  
-   При успешном добавлении новой схемы в <xref:System.Xml.Schema.XmlSchemaSet>свойству <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> <xref:System.Xml.Schema.XmlSchemaSet> присваивается значение `false`.  
  
-   Любые элементы включения или импорта, обнаруженные в схеме XML, разрешаются при вызове метода <xref:System.Xml.Schema.XmlSchemaSet.Add%2A>. Сбой при разрешении элементов включения и импорта приводит к предупреждению проверки схемы. Если <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> не было указано для объекта <xref:System.Xml.Schema.XmlSchemaSet>, эти предупреждения не будут выводиться.  
  
-   Если в <xref:System.Xml.Schema.XmlSchemaSet>добавляется схема с тем же целевым пространством имен, что и схема, которая уже существует в <xref:System.Xml.Schema.XmlSchemaSet>, то добавляются обе схемы.  
  
    > [!NOTE]
    >  Это поведение отличается от устаревшего объекта <xref:System.Xml.Schema.XmlSchemaCollection>.  
  
-   Метод <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> <xref:System.Xml.Schema.XmlSchemaSet> имеет возможность использовать целевое пространство имен, определенное в схеме, вместо того чтобы указывать целевое пространство имен в качестве параметра при вызове метода <xref:System.Xml.Schema.XmlSchemaSet.Add%2A>. Указание `null` в параметре `targetNamespace` метода <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> предписывает <xref:System.Xml.Schema.XmlSchemaSet> использовать целевое пространство имен, определенное в схеме, как показано в следующем примере кода.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add(Nothing, "books.xsd")  
  
Dim schema As XmlSchema  
For Each schema In schemaSet.Schemas("http://www.contoso.com/books")  
    schema.Write(Console.Out)  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add(null, "books.xsd");  
  
foreach(XmlSchema schema in schemaSet.Schemas("http://www.contoso.com/books"))  
{  
    schema.Write(Console.Out);  
}  
```  
  
 В приведенном выше примере кода `null` задается в качестве параметра `targetNamespace` метода <xref:System.Xml.Schema.XmlSchemaSet.Add%2A>. В результате используется `targetNamespace`, определенный в файле books. XML. В этом случае результат вызова метода <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> будет идентичен, если `http://www.contoso.com/books` был указан в качестве параметра `targetNamespace`.  
  
-   Схема W3C XML позволяет включать схемы без целевого пространства имен в схемы с определенным целевым пространством имен. В этом случае схема без определенного целевого пространства имен приводится к целевому пространству имен, включающему схему. Включенная схема обрабатывается так, как если бы в ней было определено целевое пространство имен. Аналогичным образом схемы без целевого пространства имен можно добавить в <xref:System.Xml.Schema.XmlSchemaSet> и привести к целевому пространству имен, указанному методом <xref:System.Xml.Schema.XmlSchemaSet.Add%2A>, как показано в следующем примере.  
  
```  
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">  
    <xs:element name="A" type="xs:string" />  
</xs:schema>  
```  
  
 Если приведенная выше схема добавляется в <xref:System.Xml.Schema.XmlSchemaSet> с целевым пространством имен `http://www.contoso.com/new/targetnamespace` (как показано в приведенном ниже коде), оно рассматривается как `http://www.contoso.com/new/targetnamespace`целевого пространства имен, объявленного в схеме.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/new/targetnamespace", "http://www.contoso.com/targetnamespace.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema in schemaSet.Schemas()  
  
    Console.WriteLine(schema.TargetNamespace)     
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/new/targetnamespace", "http://www.contoso.com/targetnamespace.xsd");  
foreach(XmlSchema schema in schemaSet.Schemas())  
{  
    Console.WriteLine(schema.TargetNamespace);  
}  
```  
  
   
  
## Examples  
 В следующем примере кода в <xref:System.Xml.Schema.XmlSchemaSet>добавляется схема `http://www.contoso.com/books.xsd` с целевым пространством имен `http://www.contoso.com/books`.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
```  
  
 В примере в качестве входных данных используется файл `books.xsd`.  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Схема не прошла проверку.</exception>
        <exception cref="T:System.ArgumentNullException">URL-адрес, переданный в качестве параметра, равен <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (string targetNamespace, System.Xml.XmlReader schemaDocument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(string targetNamespace, class System.Xml.XmlReader schemaDocument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (targetNamespace As String, schemaDocument As XmlReader) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::String ^ targetNamespace, System::Xml::XmlReader ^ schemaDocument);" />
      <MemberSignature Language="F#" Value="member this.Add : string * System.Xml.XmlReader -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add (targetNamespace, schemaDocument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
        <Parameter Name="schemaDocument" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Свойство схемы <paramref name="targetNamespace" /> или <see langword="null" />, чтобы использовалось пространство имен <paramref name="targetNamespace" />, определенное в схеме.</param>
        <param name="schemaDocument">Объект <see cref="T:System.Xml.XmlReader" />.</param>
        <summary>Добавляет схему языка определения схем XML (XSD), содержащуюся в <see cref="T:System.Xml.XmlReader" />, в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Объект <see cref="T:System.Xml.Schema.XmlSchema" />, если схема успешно прошла проверку. Если схема не прошла проверку и задан <see cref="T:System.Xml.Schema.ValidationEventHandler" />, тогда возвращается <see langword="null" /> и возникает соответствующее событие проверки. В противном случае возникает исключение <see cref="T:System.Xml.Schema.XmlSchemaException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Прежде чем схему можно будет добавить в <xref:System.Xml.Schema.XmlSchemaSet>, ее необходимо успешно обработать. Предварительная обработка выполняет следующие основные задачи.  
  
1.  Схема проверяется на соответствие структурной достоверности согласно правилам схемы W3C XML, но схема не полностью проверена.  
  
2.  Ссылки на внутренние и внешние компоненты схемы разрешаются. Все импортированные или включенные схемы, которые были успешно получены, также добавляются в <xref:System.Xml.Schema.XmlSchemaSet>. Импортированные схемы добавляются в виде отдельных объектов <xref:System.Xml.Schema.XmlSchema>, а включенные схемы делаются частью, включающей в себя <xref:System.Xml.Schema.XmlSchema>.  
  
 Ниже приведены важные замечания, которые следует учитывать при использовании метода <xref:System.Xml.Schema.XmlSchemaSet.Add%2A>.  
  
-   Успешно извлеченные схемы, импортированные или включенные в схемы, содержащиеся в <xref:System.Xml.XmlReader>, также добавляются в <xref:System.Xml.Schema.XmlSchemaSet>.  
  
-   Если <xref:System.Xml.XmlReader> не находится в корневом элементе, создается исключение <xref:System.Xml.Schema.XmlSchemaException>, если только текущий элемент не является элементом. Если текущий элемент является элементом `xs:schema`, документ схемы считывается в <xref:System.Xml.Schema.XmlSchemaSet>; в противном случае создается <xref:System.Xml.Schema.XmlSchemaException>, так как схема недопустима.  
  
-   Если <xref:System.Xml.XmlReader> располагается на последовательности узлов XML, то добавляется только первый узел в последовательности.  
  
-   Если схема была создана на основе вызова метода <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>, значение свойства <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> игнорируется, так как встроенная обработка схемы не применяется к документам схемы W3C XML.  
  
-   Свойство <xref:System.Xml.XmlResolver> <xref:System.Xml.XmlReader> не используется для разрешения ссылок на пространства имен или расположения схем в элементах include и Import. Вместо этого используется свойство <xref:System.Xml.XmlResolver> <xref:System.Xml.Schema.XmlSchemaSet>.  
  
-   Метод <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> <xref:System.Xml.Schema.XmlSchemaSet> имеет возможность использовать целевое пространство имен, определенное в схеме, вместо того чтобы указывать целевое пространство имен в качестве параметра при вызове метода <xref:System.Xml.Schema.XmlSchemaSet.Add%2A>. Указание `null` или <xref:System.String.Empty?displayProperty=nameWithType> метода <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> предписывает <xref:System.Xml.Schema.XmlSchemaSet> использовать целевое пространство имен, определенное в схеме. Пример такого поведения см. в описании метода <xref:System.Xml.Schema.XmlSchemaSet.Add%2A>.  
  
 Оставшаяся функциональность этого метода идентична функции метода <xref:System.Xml.Schema.XmlSchemaSet.Add%2A>.  
  
   
  
## Examples  
 В следующем примере кода добавляется схема books. xsd, содержащаяся в <xref:System.Xml.XmlTextReader> с целевым пространством имен `http://www.contoso.com/books` в <xref:System.Xml.Schema.XmlSchemaSet>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", New XmlTextReader("books.xsd")  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", new XmlTextReader("books.xsd");  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Схема не прошла проверку.</exception>
        <exception cref="T:System.ArgumentNullException">Объект <see cref="T:System.Xml.XmlReader" />, переданный в качестве параметра, является <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CompilationSettings">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaCompilationSettings CompilationSettings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaCompilationSettings CompilationSettings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.CompilationSettings" />
      <MemberSignature Language="VB.NET" Value="Public Property CompilationSettings As XmlSchemaCompilationSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaCompilationSettings ^ CompilationSettings { System::Xml::Schema::XmlSchemaCompilationSettings ^ get(); void set(System::Xml::Schema::XmlSchemaCompilationSettings ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CompilationSettings : System.Xml.Schema.XmlSchemaCompilationSettings with get, set" Usage="System.Xml.Schema.XmlSchemaSet.CompilationSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaCompilationSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> для объекта <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Объект <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> для <see cref="T:System.Xml.Schema.XmlSchemaSet" />. По умолчанию у экземпляра <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> свойство <see cref="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck" /> принимает значение <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Класс <xref:System.Xml.Schema.XmlSchemaCompilationSettings> указывает параметры проверки соответствия однозначного соответствия (ОДНОЗНАЧНОГО соответствия ПРИМИТИВОВ) для <xref:System.Xml.Schema.XmlSchemaSet>. Дополнительные сведения о включении проверки ОДНОЗНАЧНОГО соответствия ПРИМИТИВОВ см. в описании свойства <xref:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public void Compile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Compile() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Compile" />
      <MemberSignature Language="VB.NET" Value="Public Sub Compile ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Compile();" />
      <MemberSignature Language="F#" Value="member this.Compile : unit -&gt; unit" Usage="xmlSchemaSet.Compile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Компилирует схемы языка определения схем XML (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" /> в одну логическую схему.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод вызывается автоматически при необходимости проверки и <xref:System.Xml.Schema.XmlSchemaSet> не был скомпилирован ранее. Например, если <xref:System.Xml.Schema.XmlSchemaSet> используется в качестве входных данных для создания <xref:System.Xml.XmlReader> объекта в свойстве <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> объекта <xref:System.Xml.XmlReaderSettings>. Если <xref:System.Xml.Schema.XmlSchemaSet> уже находится в компилированном состоянии, этот метод не будет перекомпилировать схемы. Если этот метод успешно выполняется, свойство <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> имеет значение `true`.  
  
 Схемы, которые ранее были скомпилированы <xref:System.Xml.Schema.XmlSchemaSet>, не перекомпилируются. Однако схемы, скомпилированные с помощью метода <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> <xref:System.Xml.Schema.XmlSchema>, будут перекомпилированы.  
  
> [!NOTE]
>  Необходимо вызвать метод <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A>, если вы изменили схему (или одну из ее включений или импортов) после ее добавления в <xref:System.Xml.Schema.XmlSchemaSet>. Метод <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> проверит схему на наличие структурной достоверности в соответствии с правилами схемы W3C XML. Однако полная проверка не выполняется. Он также будет разрешать ссылки на внутренние и внешние компоненты схемы. Все импортированные или включенные схемы, которые были успешно получены, также добавляются в <xref:System.Xml.Schema.XmlSchemaSet>. Импортированные схемы добавляются в виде отдельных объектов <xref:System.Xml.Schema.XmlSchema>, тогда как включенные схемы входят в состав, включающий в себя <xref:System.Xml.Schema.XmlSchema>. Если вызов для повторной обработки выполнен успешно, свойству <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> присваивается значение false.  
  
   
  
## Examples  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Compile()  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Compile();  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Возникла ошибка при проверке и компиляции схем в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Contains">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Определяет, находится ли схема языка определения схем XML (XSD) в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string targetNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string targetNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (targetNamespace As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ targetNamespace);" />
      <MemberSignature Language="F#" Value="member this.Contains : string -&gt; bool" Usage="xmlSchemaSet.Contains targetNamespace" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Свойство <paramref name="targetNamespace" /> схемы.</param>
        <summary>Определяет, находится ли схема языка определения схем XML (XSD) с указанным идентификатором URI целевого пространства имен в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Значение <see langword="true" />, если схема с указанным универсальным кодом ресурса (URI) целевого пространства имен находится в <see cref="T:System.Xml.Schema.XmlSchemaSet" />; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Схемы, косвенно добавляемые в <xref:System.Xml.Schema.XmlSchemaSet>, обнаруживаются методом <xref:System.Xml.Schema.XmlSchemaSet.Contains%2A>; Например, импортированные схемы. В результате, если схема для пространства имен `http://www.contoso.com/retail`, которая импортирует схему для пространства имен `http://www.contoso.com/books`, добавляется в <xref:System.Xml.Schema.XmlSchemaSet>, вызывая <xref:System.Xml.Schema.XmlSchemaSet.Contains%2A> с `http://www.contoso.com/books` в качестве параметра, он возвращает `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Contains(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (schema As XmlSchema) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Xml.Schema.XmlSchema -&gt; bool" Usage="xmlSchemaSet.Contains schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Объект <see cref="T:System.Xml.Schema.XmlSchema" />.</param>
        <summary>Определяет, находится ли указанный объект языка определения схем XML (XSD) <see cref="T:System.Xml.Schema.XmlSchema" /> в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Значение <see langword="true" />, если объект <see cref="T:System.Xml.Schema.XmlSchema" /> находится в <see cref="T:System.Xml.Schema.XmlSchemaSet" />; в противном случае — значение <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.Schema.XmlSchemaSet" />, передаваемый в качестве параметра, равен <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Xml.Schema.XmlSchema[] schemas, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Xml.Schema.XmlSchema[] schemas, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (schemas As XmlSchema(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::Xml::Schema::XmlSchema ^&gt; ^ schemas, int index);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.Xml.Schema.XmlSchema[] * int -&gt; unit" Usage="xmlSchemaSet.CopyTo (schemas, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchema[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="schemas">Массив, в который копируются объекты.</param>
        <param name="index">Индекс массива, начиная с которого будут копироваться объекты.</param>
        <summary>Копирует все объекты <see cref="T:System.Xml.Schema.XmlSchema" /> из <see cref="T:System.Xml.Schema.XmlSchemaSet" /> в заданный массив, начиная с заданного индекса.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере все объекты <xref:System.Xml.Schema.XmlSchema> в <xref:System.Xml.Schema.XmlSchemaSet> копируются в массив объектов <xref:System.Xml.Schema.XmlSchema>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schemas(schemaSet.Count) As XmlSchema  
schemaSet.CopyTo(schemas, 0)  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
XmlSchema[] schemas = new XmlSchema[schemaSet.Count];  
schemaSet.CopyTo(schemas, 0);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Xml.Schema.XmlSchemaSet.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает количество логических схем языка определения схем XML (XSD) в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Количество логических схем в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При наличии двух схем для пространства имен, `http://www.contoso.com` в <xref:System.Xml.Schema.XmlSchemaSet>, свойство <xref:System.Xml.Schema.XmlSchemaSet.Count%2A> возвращает значение 1, так как схемы обрабатываются как одна логическая схема в целях проверки. Однако если схема для пространства имен `http://www.contoso.com/retail` импортировала схему для пространства имен `http://www.contoso.com/books`, значение свойства <xref:System.Xml.Schema.XmlSchemaSet.Count%2A> будет равно 2.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalAttributes">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalAttributes As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalAttributes { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalAttributes : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает все глобальные атрибуты всех схем языка определения схем XML (XSD) в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Коллекция глобальных атрибутов.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="GlobalElements">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalElements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalElements" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalElements As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalElements { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalElements : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalElements" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает все глобальные элементы всех схем языка определения схем XML (XSD) в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Коллекция глобальных элементов.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="GlobalTypes">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalTypes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalTypes As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalTypes { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalTypes : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает все глобальные простые и сложные типы из всех схем языка определения схем XML (XSD) в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Коллекция глобальных простых и сложных типов.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.Xml.Schema.XmlSchemaSet.GlobalTypes%2A> всегда возвращает тип, представляющий `xs:anyType` сложный тип.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="IsCompiled">
      <MemberSignature Language="C#" Value="public bool IsCompiled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompiled" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.IsCompiled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompiled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompiled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompiled : bool" Usage="System.Xml.Schema.XmlSchemaSet.IsCompiled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, были ли скомпилированы все схемы языка определения схем XML (XSD) в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Значение <see langword="true" />, если схемы в <see cref="T:System.Xml.Schema.XmlSchemaSet" /> были скомпилированы с момента последнего добавления или удаления схемы из <see cref="T:System.Xml.Schema.XmlSchemaSet" />; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> не изменяется, если изменяются схемы в классе <xref:System.Xml.Schema.XmlSchemaSet>. Обновления отдельных схем в классе <xref:System.Xml.Schema.XmlSchemaSet> не отслеживаются. В результате свойство <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> может иметь значение `true`, даже если одна из схем в классе <xref:System.Xml.Schema.XmlSchemaSet> была изменена, но схемы не добавлялись и не удалялись из класса <xref:System.Xml.Schema.XmlSchemaSet>.  
  
   
  
## Examples  
 Пример свойства <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> см. в описании метода <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Schema.XmlSchemaSet.Compile" />
        <altmember cref="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)" />
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public System.Xml.XmlNameTable NameTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NameTable : System.Xml.XmlNameTable" Usage="System.Xml.Schema.XmlSchemaSet.NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает имя <see cref="T:System.Xml.XmlNameTable" /> по умолчанию, используемое <see cref="T:System.Xml.Schema.XmlSchemaSet" /> при загрузке новых схем языка определения схем XML (XSD).</summary>
        <value>Таблица атомизированных строчных объектов.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlNameTable" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Remove (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Remove(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Remove(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Remove(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Remove schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Объект <see cref="T:System.Xml.Schema.XmlSchema" />, который необходимо удалить из коллекции <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
        <summary>Удаляет заданную схему языка определения схем XML (XSD) из <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Объект <see cref="T:System.Xml.Schema.XmlSchema" />, удаленный из <see cref="T:System.Xml.Schema.XmlSchemaSet" />, или <see langword="null" />, если схема не была найдена в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Удаление схемы из <xref:System.Xml.Schema.XmlSchemaSet> задает для свойства <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> значение `false`.  
  
   
  
## Examples  
 В следующем примере показано добавление нескольких схем в <xref:System.Xml.Schema.XmlSchemaSet>, а затем удаление одной из схем с помощью метода <xref:System.Xml.Schema.XmlSchemaSet.Remove%2A>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    If schema.TargetNamespace = "http://www.contoso.com/music" Then  
        schemaSet.Remove(schema)  
    End If  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    if (schema.TargetNamespace == "http://www.contoso.com/music")  
    {  
        schemaSet.Remove(schema);  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Схема не является действительной схемой.</exception>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.Schema.XmlSchema" />, передаваемый в качестве параметра, равен <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveRecursive">
      <MemberSignature Language="C#" Value="public bool RemoveRecursive (System.Xml.Schema.XmlSchema schemaToRemove);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveRecursive(class System.Xml.Schema.XmlSchema schemaToRemove) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.RemoveRecursive(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRecursive (schemaToRemove As XmlSchema) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveRecursive(System::Xml::Schema::XmlSchema ^ schemaToRemove);" />
      <MemberSignature Language="F#" Value="member this.RemoveRecursive : System.Xml.Schema.XmlSchema -&gt; bool" Usage="xmlSchemaSet.RemoveRecursive schemaToRemove" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaToRemove" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schemaToRemove">Объект <see cref="T:System.Xml.Schema.XmlSchema" />, который необходимо удалить из коллекции <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
        <summary>Удаляет указанную схему языка определения схем XML (XSD) и все импортируемые ей схемы из <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Значение <see langword="true" />, если объект <see cref="T:System.Xml.Schema.XmlSchema" /> и все импортируемые им объекты были успешно удалены; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> удаляет указанную схему и все импортируемые схемы из <xref:System.Xml.Schema.XmlSchemaSet>, если нет зависимостей от схемы или ее импортированных схем. При наличии зависимостей от схемы или ее импортированных схем в <xref:System.Xml.Schema.XmlSchemaSet>ничего не удаляется и <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> возвращает `false`. Если возвращается `false` и определен <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler>, в обработчик событий, описывающий зависимости, отправляется предупреждение.  
  
 Если указанная схема импортирует другие схемы, а указанная схема была ранее удалена с помощью метода <xref:System.Xml.Schema.XmlSchemaSet.Remove%2A>, то <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> метод не удалит импортированные схемы и вернет `false`. Например, если `parentSchema` импортирует `childSchema1` и `childSchema2` следующий код удалит только `parentSchema`, но не импортированные `childSchema1` и `childSchema2` схемы:  
  
```  
XmlSchemaSet ss = new XmlSchemaSet();  
XmlSchema xs = XmlSchema.Read(XmlReader.Create("parentSchema.xsd"), null);  
ss.Add(xs);  
ss.Compile();  
ss.Remove(xs);  
ss.Compile();  
ss.RemoveRecursive(xs);  
ss.Compile();  
```  
  
 Следующий код удалит `parentSchema` и импортированные схемы:  
  
```  
XmlSchemaSet ss = new XmlSchemaSet();  
XmlSchema xs = XmlSchema.Read(XmlReader.Create("parentSchema.xsd"), null);  
ss.Add(xs);  
ss.Compile();  
ss.RemoveRecursive(xs);  
ss.Compile();  
```  
  
 Метод <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> не влияет на состояние свойства <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>.  
  
   
  
## Examples  
 В следующем примере кода показано добавление нескольких схем в <xref:System.Xml.Schema.XmlSchemaSet>, а также удаление одной из схем и всех импортируемых схем с помощью метода <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    If schema.TargetNamespace = "http://www.contoso.com/music" Then  
        schemaSet.RemoveRecursive(schema)  
    End If  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    if (schema.TargetNamespace == "http://www.contoso.com/music")  
    {  
        schemaSet.RemoveRecursive(schema);  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.Schema.XmlSchema" />, передаваемый в качестве параметра, равен <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Reprocess">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Reprocess (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Reprocess(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Reprocess (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Reprocess(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Reprocess : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Reprocess schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Схема, которую необходимо обработать повторно.</param>
        <summary>Выполняет повторную обработку схемы языка определения схем XML (XSD), которая уже находится в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Объект <see cref="T:System.Xml.Schema.XmlSchema" />, если схема успешно прошла проверку. Если схема не прошла проверку и задан <see cref="T:System.Xml.Schema.ValidationEventHandler" />, тогда возвращается <see langword="null" /> и порождается соответствующее событие проверки. В противном случае возникает исключение <see cref="T:System.Xml.Schema.XmlSchemaException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Повторная обработка схемы выполняет все шаги предварительной обработки, выполненные в схеме при вызове метода <xref:System.Xml.Schema.XmlSchemaSet.Add%2A>. Если вызов <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> успешно выполнен, свойство <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> устанавливается в значение `false`.  
  
 Метод повторной обработки следует использовать после того, как схема в <xref:System.Xml.Schema.XmlSchemaSet> была изменена после того, как <xref:System.Xml.Schema.XmlSchemaSet> выполнил компиляцию.  
  
> [!NOTE]
>  Необходимо вызвать метод <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A>, если вы изменили схему (или одну из ее включений или импортов) после ее добавления в <xref:System.Xml.Schema.XmlSchemaSet>. Метод <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> проверит схему на наличие структурной достоверности в соответствии с правилами схемы W3C XML. Однако полная проверка не выполняется. Он также будет разрешать ссылки на внутренние и внешние компоненты схемы. Все импортированные или включенные схемы, которые были успешно получены, также добавляются в <xref:System.Xml.Schema.XmlSchemaSet>. Импортированные схемы добавляются в виде отдельных объектов <xref:System.Xml.Schema.XmlSchema>, тогда как включенные схемы входят в состав, включающий в себя <xref:System.Xml.Schema.XmlSchema>. Если вызов для повторной обработки выполнен успешно, свойству <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> присваивается значение false.  
  
   
  
## Examples  
 В следующем примере показана повторная обработка схемы, добавленной в <xref:System.Xml.Schema.XmlSchemaSet>. После компиляции <xref:System.Xml.Schema.XmlSchemaSet> с помощью метода <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> и изменения схемы, добавленной в <xref:System.Xml.Schema.XmlSchemaSet>, свойству <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> будет присвоено значение `true`, даже если схема в <xref:System.Xml.Schema.XmlSchemaSet> была изменена. Вызов метода <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> выполняет всю предварительную обработку, выполненную методом <xref:System.Xml.Schema.XmlSchemaSet.Add%2A>, и устанавливает для свойства <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> значение `false`.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
Dim schema As XmlSchema = schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Compile()  
  
Dim element As XmlSchemaElement = New XmlSchemaElement()  
schema.Items.Add(element)  
element.Name = "book"  
element.SchemaTypeName = New XmlQualifiedName("string", "http://www.w3.org/2001/XMLSchema")  
  
schemaSet.Reprocess(schema)  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
XmlSchema schema = schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Compile();  
  
XmlSchemaElement element = new XmlSchemaElement();  
schema.Items.Add(element);  
element.Name = "book";  
element.SchemaTypeName = new XmlQualifiedName("string", "http://www.w3.org/2001/XMLSchema");  
  
schemaSet.Reprocess(schema);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Схема не прошла проверку.</exception>
        <exception cref="T:System.ArgumentNullException">Объект <see cref="T:System.Xml.Schema.XmlSchema" />, переданный в качестве параметра, является <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Объект <see cref="T:System.Xml.Schema.XmlSchema" />, передаваемый в качестве параметра, еще не существует в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Schemas">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает коллекцию схем языка определения схем XML (XSD), содержащихся в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Schemas ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ICollection Schemas() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Schemas" />
      <MemberSignature Language="VB.NET" Value="Public Function Schemas () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ICollection ^ Schemas();" />
      <MemberSignature Language="F#" Value="member this.Schemas : unit -&gt; System.Collections.ICollection" Usage="xmlSchemaSet.Schemas " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает коллекцию всех схем языка определения схем XML (XSD), содержащихся в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Объект <see cref="T:System.Collections.ICollection" />, содержащий все схемы, добавленные в <see cref="T:System.Xml.Schema.XmlSchemaSet" />. Если в <see cref="T:System.Xml.Schema.XmlSchemaSet" /> не были добавлены схемы, возвращается пустой объект <see cref="T:System.Collections.ICollection" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод возвращает схемы, которые были косвенно добавлены в <xref:System.Xml.Schema.XmlSchemaSet>, так как они были импортированы.  
  
> [!NOTE]
>  Метод <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> является эквивалентом метода <xref:System.Xml.Schema.XmlSchemaCollection.GetEnumerator%2A> устаревшей <xref:System.Xml.Schema.XmlSchemaCollection>.  
  
   
  
## Examples  
 В следующем примере показано, как выполнить итерацию по всем схемам в <xref:System.Xml.Schema.XmlSchemaSet>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    schema.Write(Console.Out)  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    schema.Write(Console.Out);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Schemas (string targetNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ICollection Schemas(string targetNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Schemas(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Schemas (targetNamespace As String) As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ICollection ^ Schemas(System::String ^ targetNamespace);" />
      <MemberSignature Language="F#" Value="member this.Schemas : string -&gt; System.Collections.ICollection" Usage="xmlSchemaSet.Schemas targetNamespace" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Свойство <paramref name="targetNamespace" /> схемы.</param>
        <summary>Возвращает коллекцию всех схем языка определения схем XML (XSD) в <see cref="T:System.Xml.Schema.XmlSchemaSet" />, принадлежащих заданному пространству имен.</summary>
        <returns>Объект <see cref="T:System.Collections.ICollection" />, содержащий все схемы, которые были добавлены к <see cref="T:System.Xml.Schema.XmlSchemaSet" />, принадлежащие заданному пространству имен. Если в <see cref="T:System.Xml.Schema.XmlSchemaSet" /> не были добавлены схемы, возвращается пустой объект <see cref="T:System.Collections.ICollection" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если параметр `targetNamespace` имеет значение `null` или <xref:System.String.Empty>, возвращаются все схемы без пространства имен.  
  
 Этот метод возвращает схемы, которые были косвенно добавлены в <xref:System.Xml.Schema.XmlSchemaSet>, так как они были импортированы.  
  
> [!NOTE]
>  Метод <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> является эквивалентом метода <xref:System.Xml.Schema.XmlSchemaCollection.Item%2A> устаревшей <xref:System.Xml.Schema.XmlSchemaCollection>.  
  
   
  
## Examples  
 В следующем примере показано, как выполнить итерацию по всем схемам в пространстве имен `http://www.contoso.com/books` в <xref:System.Xml.Schema.XmlSchemaSet>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas("http://www.contoso.com/books")  
  
    schema.Write(Console.Out)  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas("http://www.contoso.com/books"))  
{  
    schema.Write(Console.Out);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberSignature Language="DocId" Value="E:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Schema::ValidationEventHandler ^ ValidationEventHandler;" />
      <MemberSignature Language="F#" Value="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " Usage="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Указывает обработчик событий, получающий сведения об ошибках проверки схем языка определения схем XML (XSD).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Задает обработчик событий для получения сведений об ошибках проверки схемы при вызове методов <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> или <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> <xref:System.Xml.Schema.XmlSchemaSet>.  
  
 Если обработчик событий не определен, при любых ошибках проверки, в которых <xref:System.Xml.Schema.XmlSeverityType.Error><xref:System.Xml.Schema.XmlSeverityType>, возникает <xref:System.Xml.Schema.XmlSchemaException>. Исключения не создаются для ошибок проверки с <xref:System.Xml.Schema.XmlSeverityType> <xref:System.Xml.Schema.XmlSeverityType.Warning>.  
  
   
  
## Examples  
 В следующем примере кода показано добавление <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> для захвата ошибок и предупреждений при проверке XML-документа на соответствие схеме.  
  
 [!code-cpp[XmlSchemaSetOverall Example#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaSetOverall Example/CPP/xmlschemasetexample.cpp#1)]
 [!code-csharp[XmlSchemaSetOverall Example#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaSetOverall Example/CS/xmlschemasetexample.cs#1)]
 [!code-vb[XmlSchemaSetOverall Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaSetOverall Example/VB/xmlschemasetexample.vb#1)]  
  
 В примере в качестве входных данных используется файл books. XML.  
  
 [!code-xml[XmlSchemaSetOverall Example#2](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xml#2)]  
  
 В этом примере в качестве входных данных используется файл books. xsd.  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.Schema.XmlSchemaSet.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Задает <see cref="T:System.Xml.XmlResolver" />, используемый при разрешении пространств имен и расположений, на которые ссылаются элементы включения и импорта схемы.</summary>
        <value><see cref="T:System.Xml.XmlResolver" />, используемый при разрешении пространств имен и расположений, на которые ссылаются элементы включения и импорта схемы.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlResolver> <xref:System.Xml.Schema.XmlSchemaSet> используется для разрешения пространств имен или расположений, на которые ссылаются элементы include и Import схемы, каждый раз, когда схема добавляется с помощью методов <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> или <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A>.  
  
> [!IMPORTANT]
>  Внешние пространства имен или расположения, на которые ссылаются элементы включения, импорта и переопределения схемы, разрешаются по отношению к базовому URI схемы, включающей или импортирующих их. Например, если базовый URI для включения или импорта схемы пуст или `null`, внешние расположения разрешаются по отношению к текущему каталогу. Класс <xref:System.Xml.XmlUrlResolver> используется для разрешения внешних схем по умолчанию. Чтобы отключить разрешение на включение, импорт и переопределение элементов схемы, задайте для свойства <xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A> значение `null`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlResolver" />
      </Docs>
    </Member>
  </Members>
</Type>
