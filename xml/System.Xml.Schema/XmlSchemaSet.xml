<Type Name="XmlSchemaSet" FullName="System.Xml.Schema.XmlSchemaSet">
  <Metadata><Meta Name="ms.openlocfilehash" Value="57de316ef00b1a3d01051adc15e178fc8abae0f2" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70516905" /></Metadata><TypeSignature Language="C#" Value="public class XmlSchemaSet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlSchemaSet extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Schema.XmlSchemaSet" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlSchemaSet" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlSchemaSet" />
  <TypeSignature Language="F#" Value="type XmlSchemaSet = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Содержит кэш схем языка определения схем XML (XSD).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
> -   Не используйте схемы из неизвестных или ненадежных источников или расположений. Это приведет к нарушению безопасности кода.  
> -   Схемы XML (включая встроенные схемы) по сути уязвимы для атак типа "отказ в обслуживании"; не принимайте их в недоверенных сценариях.  
> -   Сообщения об ошибках и исключения проверки схемы могут представлять конфиденциальные сведения о модели содержимого или пути URI в файл схемы. Будьте внимательны, чтобы не предоставлять эти сведения ненадежным вызывающим объектам.  
> -   Дополнительные вопросы безопасности описаны в разделе "вопросы безопасности".  
  
 <xref:System.Xml.Schema.XmlSchemaSet>— Это кэш или библиотека, в которой можно хранить схемы языка определения схемы XML (XSD). <xref:System.Xml.Schema.XmlSchemaSet>повышает производительность за счет кэширования схем в памяти, а не доступа к ним из файла или с помощью URL-адреса. Каждая схема определяется по URI пространства имен и расположению, которое было указано при добавлении схемы в набор. Используйте <xref:System.Xml.XmlReaderSettings.Schemas%2A?displayProperty=nameWithType> свойство, чтобы <xref:System.Xml.Schema.XmlSchemaSet> назначить объект, который модуль чтения XML должен использовать для проверки данных.  
  
## <a name="security-considerations"></a>Вопросы безопасности  
  
-   Не используйте схемы из неизвестных или ненадежных источников. Это приведет к нарушению безопасности кода. Внешние пространства имен или расположения, на которые ссылаются элементы включения, импорта и переопределения схемы, разрешаются по отношению к базовому URI схемы, включающей или импортирующих их. Например, если базовый URI для схемы включения или импорта пуст или `null`, внешние расположения разрешаются по отношению к текущему каталогу. <xref:System.Xml.XmlUrlResolver> Класс используется для разрешения внешних схем по умолчанию. Чтобы отключить разрешение на включение, импорт и переопределение элементов схемы, присвойте <xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A?displayProperty=nameWithType> `null`свойству значение.  
  
-   <xref:System.Xml.Schema.XmlSchemaSet> Класс <xref:System.Text.RegularExpressions.Regex?displayProperty=nameWithType>  использует класс для синтаксического анализа и сопоставления регулярных выражений в схеме XML. Проверка аспектов шаблона с регулярными выражениями в схеме XML может привести к увеличению загрузки ЦП, и ее следует избегать в сценариях высокого уровня доступности.  
  
-   Исключения, вызванные в результате использования <xref:System.Xml.Schema.XmlSchemaSet> класса, такие <xref:System.Xml.Schema.XmlSchemaException> как класс, могут содержать конфиденциальные сведения, которые не должны предоставляться в ненадежных сценариях. Например, <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> свойство <xref:System.Xml.Schema.XmlSchemaException> объекта возвращает путь универсального кода ресурса (URI) к файлу схемы, вызвавшему исключение. <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> Свойство не должно быть представлено в недоверенных сценариях. Исключения должны быть правильно обработаны, чтобы эти конфиденциальные сведения не раскрываются в ненадежных сценариях.  
  
   
  
## Examples  
 В следующем примере XML-файл проверяется с использованием схем, хранимых в классе <xref:System.Xml.Schema.XmlSchemaSet>. Пространство имен в XML-файле, `urn:bookstore-schema`, идентифицирует схему в классе <xref:System.Xml.Schema.XmlSchemaSet> для использования при проверке. Выходные данные в примере показывают, что XML-файл имеет два нарушения схемы:

 - Первый \<элемент book > содержит элемент Author \<>, но не имеет \<элемента Title > \<или Price >.

 - В \<элементе author > в последней \<записи Book \<> отсутствует элемент First-Name > и \<Last-Name >, а вместо него имеет недопустимый \<элемент > Name.   
  
 [!code-cpp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CPP/XmlReader_Validate_SchemaSet.cpp#1)]
 [!code-csharp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CS/validschemaset.cs#1)]
 [!code-vb[XmlReader_Validate_SchemaSet#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Validate_SchemaSet/VB/validschemaset.vb#1)]  
  
## <a name="input"></a>Входные данные  
 Образец использует следующие два входных файла.  
  
 **Букссчемафаил. XML:**  
  
 [!code-xml[XmlReader_Validate_SchemaSet#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/booksschemafail.xml#2)]  
  
 **Books. xsd:**  
  
 [!code-xml[XmlReader_Validate_SchemaSet#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/books.xsd#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaSet();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaSet (System.Xml.XmlNameTable nameTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlNameTable nameTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.#ctor(System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (nameTable As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaSet(System::Xml::XmlNameTable ^ nameTable);" />
      <MemberSignature Language="F#" Value="new System.Xml.Schema.XmlSchemaSet : System.Xml.XmlNameTable -&gt; System.Xml.Schema.XmlSchemaSet" Usage="new System.Xml.Schema.XmlSchemaSet nameTable" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="nameTable" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="nameTable">Объект <see cref="T:System.Xml.XmlNameTable" />, который следует использовать.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Xml.Schema.XmlSchemaSet" /> указанным значением <see cref="T:System.Xml.XmlNameTable" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Объект <see cref="T:System.Xml.XmlNameTable" />, переданный в качестве параметра, является <see langword="null" />.</exception>
        <altmember cref="T:System.Xml.XmlNameTable" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Добавляет заданную схему языка определения схем XML (XSD) в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Объект <see cref="T:System.Xml.Schema.XmlSchema" />, добавляемый в коллекцию <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
        <summary>Добавляет указанную <see cref="T:System.Xml.Schema.XmlSchema" /> в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Объект <see cref="T:System.Xml.Schema.XmlSchema" />, если схема успешно прошла проверку. Если схема не прошла проверку и задан <see cref="T:System.Xml.Schema.ValidationEventHandler" />, тогда возвращается <see langword="null" /> и возникает соответствующее событие проверки. В противном случае возникает исключение <see cref="T:System.Xml.Schema.XmlSchemaException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если объект уже существует <xref:System.Xml.Schema.XmlSchemaSet>в, <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> метод не выполняет никаких действий. <xref:System.Xml.Schema.XmlSchema>  
  
 Функциональность этого метода идентична <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> функции метода.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Схема не прошла проверку.</exception>
        <exception cref="T:System.ArgumentNullException">Объект <see cref="T:System.Xml.Schema.XmlSchema" />, переданный в качестве параметра, является <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (schemas As XmlSchemaSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Xml.Schema.XmlSchemaSet -&gt; unit" Usage="xmlSchemaSet.Add schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas">Объект <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
        <summary>Добавляет все схемы языка определения схем XML (XSD), содержащиеся в заданном <see cref="T:System.Xml.Schema.XmlSchemaSet" />, в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Прежде чем схему можно будет добавить в <xref:System.Xml.Schema.XmlSchemaSet>, она должна быть успешно обработана. Предварительная обработка выполняет следующие основные задачи.  
  
1.  Схема проверяется на соответствие структурной достоверности согласно правилам схемы W3C XML, но схема не полностью проверена.  
  
2.  Ссылки на внутренние и внешние компоненты схемы разрешаются. Все импортированные или включенные схемы, которые были успешно получены, также добавляются в <xref:System.Xml.Schema.XmlSchemaSet>. Импортированные схемы добавляются как отдельные <xref:System.Xml.Schema.XmlSchema> объекты, а включенные схемы — в состав, включая. <xref:System.Xml.Schema.XmlSchema>  
  
 `true` <xref:System.Xml.Schema.XmlSchemaSet> <xref:System.Xml.Schema.XmlSchemaSet>Если свойство добавляемого элемента имеет значение, то все схемы в добавлении добавляются в. <xref:System.Xml.Schema.XmlSchemaSet> <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> Если свойство добавляемого <xref:System.Xml.Schema.XmlSchemaSet> объекта равно `false`, то каждая добавленная схема предварительно обрабатывается перед добавлением. <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> Если любая из вновь добавленных <xref:System.Xml.Schema.XmlSchemaSet> схем не может быть предварительно обработана, то схемы не добавляются; вместо этого <xref:System.Xml.Schema.XmlSchemaException> создается исключение. В результате следующий два примера кода не эквивалентны.  
  
```vb  
' First example  
schemaSet.Add(schemaSet1)  
  
' Second example  
Dim schema As XmlSchema  
  
For Each schema in schemaSet.Schemas()  
  
    schemaSet.Add(schema)  
  
Next  
```  
  
```csharp  
// First example  
schemaSet.Add(schemaSet1);  
  
// Second example  
foreach(XmlSchema schema in schemaSet.Schemas())  
{  
    schemaSet.Add(schema);  
}  
```  
  
 Предыдущие два примера кода не эквивалентны. В первом примере `schemaSet1` , если имеется недопустимая схема в и для `false`ее <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> свойства задано значение, схемы не добавляются в `schemaSet`. Во втором примере можно добавить `schemaSet` несколько схем, прежде чем будет обнаружена недопустимая схема, и будет создано исключение.  
  
   
  
## Examples  
 В следующем примере кода <xref:System.Xml.Schema.XmlSchemaSet>показано добавление схем в, а затем <xref:System.Xml.Schema.XmlSchemaSet> Добавление в новый <xref:System.Xml.Schema.XmlSchemaSet> с помощью <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> метода.  
  
```vb  
Dim schemaSet1 As XmlSchemaSet = New XmlSchemaSet  
schemaSet1.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet1.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet1.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schemaSet2 As XmlSchemaSet = New XmlSchemaSet  
schemaSet2.Add(schemaSet1)  
```  
  
```csharp  
XmlSchemaSet schemaSet1 = new XmlSchemaSet();  
schemaSet1.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet1.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet1.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
XmlSchemaSet schemaSet2 = new XmlSchemaSet();  
schemaSet2.Add(schemaSet1);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Схема в <see cref="T:System.Xml.Schema.XmlSchemaSet" /> недействительна.</exception>
        <exception cref="T:System.ArgumentNullException">Объект <see cref="T:System.Xml.Schema.XmlSchemaSet" />, переданный в качестве параметра, является <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (string targetNamespace, string schemaUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(string targetNamespace, string schemaUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (targetNamespace As String, schemaUri As String) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::String ^ targetNamespace, System::String ^ schemaUri);" />
      <MemberSignature Language="F#" Value="member this.Add : string * string -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add (targetNamespace, schemaUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
        <Parameter Name="schemaUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Свойство схемы <paramref name="targetNamespace" /> или <see langword="null" />, чтобы использовалось пространство имен <paramref name="targetNamespace" />, определенное в схеме.</param>
        <param name="schemaUri">URL-адрес, ссылающийся на схему, которую необходимо загрузить.</param>
        <summary>Добавляет схему языка определения схем XML (XSD), расположенную по указанному URL-адресу, в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Объект <see cref="T:System.Xml.Schema.XmlSchema" />, если схема успешно прошла проверку. Если схема не прошла проверку и задан <see cref="T:System.Xml.Schema.ValidationEventHandler" />, тогда возвращается <see langword="null" /> и возникает соответствующее событие проверки. В противном случае возникает исключение <see cref="T:System.Xml.Schema.XmlSchemaException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Прежде чем схему можно будет добавить в <xref:System.Xml.Schema.XmlSchemaSet>, она должна быть успешно обработана. Предварительная обработка выполняет следующие основные задачи.  
  
1.  Схема проверяется на соответствие структурной достоверности согласно правилам схемы W3C XML, но схема не полностью проверена.  
  
2.  Ссылки на внутренние и внешние компоненты схемы разрешаются. Все импортированные или включенные схемы, которые были успешно получены, также добавляются в <xref:System.Xml.Schema.XmlSchemaSet>. Импортированные схемы добавляются как отдельные <xref:System.Xml.Schema.XmlSchema> объекты, а включенные схемы — в состав, включая. <xref:System.Xml.Schema.XmlSchema>  
  
 Ниже приведены важные замечания, которые следует учитывать при использовании <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> метода.  
  
-   Добавление схемы <xref:System.Xml.Schema.XmlSchemaSet> в объект с тем же целевым пространством имен и URL-адресом расположения схемы, который уже <xref:System.Xml.Schema.XmlSchemaSet> содержится в схеме, вернет исходный объект схемы.  
  
-   При успешном добавлении новой схемы в <xref:System.Xml.Schema.XmlSchemaSet> <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> свойство <xref:System.Xml.Schema.XmlSchemaSet> имеет значение `false`.  
  
-   Любые элементы включения или импорта, обнаруженные в схеме XML, разрешаются при <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> вызове метода. Сбой при разрешении элементов включения и импорта приводит к возникновению предупреждения проверки схемы. <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> если для объекта не указано <xref:System.Xml.Schema.XmlSchemaSet> значение, эти предупреждения не будут выводиться.  
  
-   Если схема с тем же целевым пространством имен, что и схема, которая уже <xref:System.Xml.Schema.XmlSchemaSet> существует в, добавляется <xref:System.Xml.Schema.XmlSchemaSet>в, то добавляются обе схемы.  
  
    > [!NOTE]
    >  Это поведение отличается от устаревшего <xref:System.Xml.Schema.XmlSchemaCollection> объекта.  
  
-   Метод имеет возможность использовать целевое пространство имен, определенное в схеме, вместо того, чтобы указывать целевое пространство имен в <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> качестве параметра при вызове метода. <xref:System.Xml.Schema.XmlSchemaSet> <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> Указание `null` <xref:System.Xml.Schema.XmlSchemaSet> в параметре <xref:System.Xml.Schema.XmlSchemaSet.Add%2A>  метода указывает, что следует использовать целевое пространство имен, определенное в схеме, как показано в следующем примере кода. `targetNamespace`  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add(Nothing, "books.xsd")  
  
Dim schema As XmlSchema  
For Each schema In schemaSet.Schemas("http://www.contoso.com/books")  
    schema.Write(Console.Out)  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add(null, "books.xsd");  
  
foreach(XmlSchema schema in schemaSet.Schemas("http://www.contoso.com/books"))  
{  
    schema.Write(Console.Out);  
}  
```  
  
 В приведенном выше `null` примере кода в `targetNamespace` качестве параметра для <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> метода указывается. В результате используется объект `targetNamespace` , определенный в файле books. XML. В этом случае результат вызова <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> метода будет идентичен, если `http://www.contoso.com/books` был указан в качестве `targetNamespace` параметра.  
  
-   Схема W3C XML позволяет включать схемы без целевого пространства имен в схемы с определенным целевым пространством имен. В этом случае схема без определенного целевого пространства имен приводится к целевому пространству имен, включающему схему. Включенная схема обрабатывается так, как если бы в ней было определено целевое пространство имен. Аналогичным образом схемы без целевого пространства имен можно добавить в <xref:System.Xml.Schema.XmlSchemaSet> и привести к целевому пространству имен, указанному <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> методом, как показано в следующем примере.  
  
```  
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">  
    <xs:element name="A" type="xs:string" />  
</xs:schema>  
```  
  
 Если приведенная выше схема добавляется <xref:System.Xml.Schema.XmlSchemaSet> в объект с целевым пространством имен `http://www.contoso.com/new/targetnamespace` (как показано в приведенном ниже коде), он обрабатывается так, как если бы целевое `http://www.contoso.com/new/targetnamespace`пространство имен, объявленное в схеме, было.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/new/targetnamespace", "http://www.contoso.com/targetnamespace.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema in schemaSet.Schemas()  
  
    Console.WriteLine(schema.TargetNamespace)     
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/new/targetnamespace", "http://www.contoso.com/targetnamespace.xsd");  
foreach(XmlSchema schema in schemaSet.Schemas())  
{  
    Console.WriteLine(schema.TargetNamespace);  
}  
```  
  
   
  
## Examples  
 Следующий пример кода добавляет `http://www.contoso.com/books.xsd` схему с целевым `http://www.contoso.com/books` пространством имен <xref:System.Xml.Schema.XmlSchemaSet>в.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
```  
  
 В примере в качестве входных данных используется файл `books.xsd`.  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Схема не прошла проверку.</exception>
        <exception cref="T:System.ArgumentNullException">URL-адрес, переданный в качестве параметра, равен <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (string targetNamespace, System.Xml.XmlReader schemaDocument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(string targetNamespace, class System.Xml.XmlReader schemaDocument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (targetNamespace As String, schemaDocument As XmlReader) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::String ^ targetNamespace, System::Xml::XmlReader ^ schemaDocument);" />
      <MemberSignature Language="F#" Value="member this.Add : string * System.Xml.XmlReader -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add (targetNamespace, schemaDocument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
        <Parameter Name="schemaDocument" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Свойство схемы <paramref name="targetNamespace" /> или <see langword="null" />, чтобы использовалось пространство имен <paramref name="targetNamespace" />, определенное в схеме.</param>
        <param name="schemaDocument">Объект <see cref="T:System.Xml.XmlReader" />.</param>
        <summary>Добавляет схему языка определения схем XML (XSD), содержащуюся в <see cref="T:System.Xml.XmlReader" />, в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Объект <see cref="T:System.Xml.Schema.XmlSchema" />, если схема успешно прошла проверку. Если схема не прошла проверку и задан <see cref="T:System.Xml.Schema.ValidationEventHandler" />, тогда возвращается <see langword="null" /> и возникает соответствующее событие проверки. В противном случае возникает исключение <see cref="T:System.Xml.Schema.XmlSchemaException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Прежде чем схему можно будет добавить в <xref:System.Xml.Schema.XmlSchemaSet>, она должна быть успешно обработана. Предварительная обработка выполняет следующие основные задачи.  
  
1.  Схема проверяется на соответствие структурной достоверности согласно правилам схемы W3C XML, но схема не полностью проверена.  
  
2.  Ссылки на внутренние и внешние компоненты схемы разрешаются. Все импортированные или включенные схемы, которые были успешно получены, также добавляются в <xref:System.Xml.Schema.XmlSchemaSet>. Импортированные схемы добавляются как отдельные <xref:System.Xml.Schema.XmlSchema> объекты, а включенные схемы — в состав, включая. <xref:System.Xml.Schema.XmlSchema>  
  
 Ниже приведены важные замечания, которые следует учитывать при использовании <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> метода.  
  
-   Успешно извлеченные схемы, импортированные или включенные в схемы, содержащиеся в, <xref:System.Xml.XmlReader> также добавляются <xref:System.Xml.Schema.XmlSchemaSet>в.  
  
-   Если объект не находится в корневом элементе <xref:System.Xml.Schema.XmlSchemaException> , вызывается исключение, если текущий элемент не является элементом. <xref:System.Xml.XmlReader> Если текущий элемент является `xs:schema` элементом, документ схемы считывается <xref:System.Xml.Schema.XmlSchemaSet>в; в противном случае создается исключение, <xref:System.Xml.Schema.XmlSchemaException> поскольку схема недопустима.  
  
-   <xref:System.Xml.XmlReader> Если располагается на последовательности узлов XML, то добавляется только первый узел в последовательности.  
  
-   Если схема была создана из <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> вызова метода, значение <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> свойства игнорируется, так как встроенная обработка схемы не применяется к документам схемы W3C XML.  
  
-   <xref:System.Xml.XmlResolver> Свойство <xref:System.Xml.XmlReader>  объекта не используется для разрешения ссылок на пространства имен или расположения схем в элементах include и Import. Вместо этого используется <xref:System.Xml.Schema.XmlSchemaSet> свойство объекта. <xref:System.Xml.XmlResolver>  
  
-   Метод имеет возможность использовать целевое пространство имен, определенное в схеме, вместо того, чтобы указывать целевое пространство имен в <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> качестве параметра при вызове метода. <xref:System.Xml.Schema.XmlSchemaSet> <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> Указание `null` или <xref:System.String.Empty?displayProperty=nameWithType> <xref:System.Xml.Schema.XmlSchemaSet> для метода указывает, что следует использовать целевое пространство имен, определенное в схеме. <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> Пример такого поведения см. в <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> описании метода.  
  
 Оставшаяся функциональность этого метода идентична <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> функции метода.  
  
   
  
## Examples  
 В следующем примере кода добавляется схема books. xsd, содержащаяся в <xref:System.Xml.XmlTextReader> с целевым `http://www.contoso.com/books` пространством имен <xref:System.Xml.Schema.XmlSchemaSet>для.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", New XmlTextReader("books.xsd")  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", new XmlTextReader("books.xsd");  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Схема не прошла проверку.</exception>
        <exception cref="T:System.ArgumentNullException">Объект <see cref="T:System.Xml.XmlReader" />, переданный в качестве параметра, является <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CompilationSettings">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaCompilationSettings CompilationSettings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaCompilationSettings CompilationSettings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.CompilationSettings" />
      <MemberSignature Language="VB.NET" Value="Public Property CompilationSettings As XmlSchemaCompilationSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaCompilationSettings ^ CompilationSettings { System::Xml::Schema::XmlSchemaCompilationSettings ^ get(); void set(System::Xml::Schema::XmlSchemaCompilationSettings ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CompilationSettings : System.Xml.Schema.XmlSchemaCompilationSettings with get, set" Usage="System.Xml.Schema.XmlSchemaSet.CompilationSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaCompilationSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> для объекта <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Объект <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> для <see cref="T:System.Xml.Schema.XmlSchemaSet" />. По умолчанию у экземпляра <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> свойство <see cref="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck" /> принимает значение <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Класс задает параметры проверки однозначного соответствия примитивов (однозначного соответствия примитивов) <xref:System.Xml.Schema.XmlSchemaSet>для. <xref:System.Xml.Schema.XmlSchemaCompilationSettings> Дополнительные сведения о включении проверки однозначного соответствия примитивов см. в <xref:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck%2A> описании свойства.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public void Compile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Compile() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Compile" />
      <MemberSignature Language="VB.NET" Value="Public Sub Compile ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Compile();" />
      <MemberSignature Language="F#" Value="member this.Compile : unit -&gt; unit" Usage="xmlSchemaSet.Compile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Компилирует схемы языка определения схем XML (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" /> в одну логическую схему.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод вызывается автоматически при необходимости проверки и <xref:System.Xml.Schema.XmlSchemaSet> не был скомпилирован ранее. Например, <xref:System.Xml.Schema.XmlSchemaSet> если используется в качестве входных данных для <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> создания <xref:System.Xml.XmlReader> объекта в свойстве элемента <xref:System.Xml.XmlReaderSettings> объектами. Если уже <xref:System.Xml.Schema.XmlSchemaSet> находится в компилированном состоянии, этот метод не будет перекомпилировать схемы. Если этот метод успешно выполняется, <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> свойство устанавливается в `true`значение.  
  
 Схемы, которые ранее были скомпилированы <xref:System.Xml.Schema.XmlSchemaSet> с помощью, не компилируются повторно. Однако схемы, которые были скомпилированы с помощью <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> метода, <xref:System.Xml.Schema.XmlSchema> будут перекомпилированы.  
  
> [!NOTE]
>  Необходимо вызвать метод, <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> если схема (или одна из ее включений или импортов) была изменена после ее добавления <xref:System.Xml.Schema.XmlSchemaSet>в. <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> Метод будет проверять схему на наличие структурной достоверности в соответствии с правилами схемы W3C XML. Однако полная проверка не выполняется. Он также будет разрешать ссылки на внутренние и внешние компоненты схемы. Все импортированные или включенные схемы, которые были успешно получены, также добавляются в <xref:System.Xml.Schema.XmlSchemaSet>. Импортированные схемы добавляются как отдельные <xref:System.Xml.Schema.XmlSchema> объекты, а включенные схемы — в состав, включая <xref:System.Xml.Schema.XmlSchema>. Если вызов для повторной обработки выполнен успешно, <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> свойство устанавливается в значение false.  
  
   
  
## Examples  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Compile()  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Compile();  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Возникла ошибка при проверке и компиляции схем в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Contains">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Определяет, находится ли схема языка определения схем XML (XSD) в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string targetNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string targetNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (targetNamespace As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ targetNamespace);" />
      <MemberSignature Language="F#" Value="member this.Contains : string -&gt; bool" Usage="xmlSchemaSet.Contains targetNamespace" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Свойство <paramref name="targetNamespace" /> схемы.</param>
        <summary>Определяет, находится ли схема языка определения схем XML (XSD) с указанным идентификатором URI целевого пространства имен в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Значение <see langword="true" />, если схема с указанным универсальным кодом ресурса (URI) целевого пространства имен находится в <see cref="T:System.Xml.Schema.XmlSchemaSet" />; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Схемы, косвенно добавляемые в, <xref:System.Xml.Schema.XmlSchemaSet> обнаруживаются <xref:System.Xml.Schema.XmlSchemaSet.Contains%2A> методом, например импортированными схемами. В результате, если `http://www.contoso.com/retail` схема для пространства имен, которая импортирует схему `http://www.contoso.com/books` для <xref:System.Xml.Schema.XmlSchemaSet>пространства имен, добавляется в вызов <xref:System.Xml.Schema.XmlSchemaSet.Contains%2A> с `http://www.contoso.com/books` параметром, он возвращает `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Contains(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (schema As XmlSchema) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Xml.Schema.XmlSchema -&gt; bool" Usage="xmlSchemaSet.Contains schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Объект <see cref="T:System.Xml.Schema.XmlSchema" />.</param>
        <summary>Определяет, находится ли указанный объект языка определения схем XML (XSD) <see cref="T:System.Xml.Schema.XmlSchema" /> в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Значение <see langword="true" />, если объект <see cref="T:System.Xml.Schema.XmlSchema" /> находится в <see cref="T:System.Xml.Schema.XmlSchemaSet" />; в противном случае — значение <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.Schema.XmlSchemaSet" />, передаваемый в качестве параметра, равен <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Xml.Schema.XmlSchema[] schemas, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Xml.Schema.XmlSchema[] schemas, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (schemas As XmlSchema(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::Xml::Schema::XmlSchema ^&gt; ^ schemas, int index);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.Xml.Schema.XmlSchema[] * int -&gt; unit" Usage="xmlSchemaSet.CopyTo (schemas, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchema[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="schemas">Массив, в который копируются объекты.</param>
        <param name="index">Индекс массива, начиная с которого будут копироваться объекты.</param>
        <summary>Копирует все объекты <see cref="T:System.Xml.Schema.XmlSchema" /> из <see cref="T:System.Xml.Schema.XmlSchemaSet" /> в заданный массив, начиная с заданного индекса.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере все <xref:System.Xml.Schema.XmlSchema> объекты <xref:System.Xml.Schema.XmlSchemaSet> в массива копируются в массив <xref:System.Xml.Schema.XmlSchema> объектов.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schemas(schemaSet.Count) As XmlSchema  
schemaSet.CopyTo(schemas, 0)  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
XmlSchema[] schemas = new XmlSchema[schemaSet.Count];  
schemaSet.CopyTo(schemas, 0);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Xml.Schema.XmlSchemaSet.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает количество логических схем языка определения схем XML (XSD) в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Количество логических схем в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При наличии двух схем для пространства имен `http://www.contoso.com` <xref:System.Xml.Schema.XmlSchemaSet>в <xref:System.Xml.Schema.XmlSchemaSet.Count%2A> свойстве возвращается значение 1, поскольку схемы обрабатываются как одна логическая схема в целях проверки. Однако если схема для пространства имен `http://www.contoso.com/retail` импортировала схему `http://www.contoso.com/books` для пространства имен <xref:System.Xml.Schema.XmlSchemaSet.Count%2A> , значение свойства будет равно 2.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalAttributes">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalAttributes As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalAttributes { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalAttributes : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает все глобальные атрибуты всех схем языка определения схем XML (XSD) в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Коллекция глобальных атрибутов.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="GlobalElements">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalElements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalElements" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalElements As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalElements { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalElements : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalElements" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает все глобальные элементы всех схем языка определения схем XML (XSD) в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Коллекция глобальных элементов.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="GlobalTypes">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalTypes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalTypes As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalTypes { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalTypes : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает все глобальные простые и сложные типы из всех схем языка определения схем XML (XSD) в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Коллекция глобальных простых и сложных типов.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство всегда возвращает тип, `xs:anyType` представляющий сложный тип. <xref:System.Xml.Schema.XmlSchemaSet.GlobalTypes%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="IsCompiled">
      <MemberSignature Language="C#" Value="public bool IsCompiled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompiled" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.IsCompiled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompiled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompiled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompiled : bool" Usage="System.Xml.Schema.XmlSchemaSet.IsCompiled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, были ли скомпилированы все схемы языка определения схем XML (XSD) в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Значение <see langword="true" />, если схемы в <see cref="T:System.Xml.Schema.XmlSchemaSet" /> были скомпилированы с момента последнего добавления или удаления схемы из <see cref="T:System.Xml.Schema.XmlSchemaSet" />; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> не изменяется, если изменяются схемы в классе <xref:System.Xml.Schema.XmlSchemaSet>. Обновления отдельных схем в классе <xref:System.Xml.Schema.XmlSchemaSet> не отслеживаются. В результате свойство <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> может иметь значение `true`, даже если одна из схем в классе <xref:System.Xml.Schema.XmlSchemaSet> была изменена, но схемы не добавлялись и не удалялись из класса <xref:System.Xml.Schema.XmlSchemaSet>.  
  
   
  
## Examples  
 Пример <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> свойства см. в <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> описании метода.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Schema.XmlSchemaSet.Compile" />
        <altmember cref="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)" />
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public System.Xml.XmlNameTable NameTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NameTable : System.Xml.XmlNameTable" Usage="System.Xml.Schema.XmlSchemaSet.NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает имя <see cref="T:System.Xml.XmlNameTable" /> по умолчанию, используемое <see cref="T:System.Xml.Schema.XmlSchemaSet" /> при загрузке новых схем языка определения схем XML (XSD).</summary>
        <value>Таблица атомизированных объектов строки.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlNameTable" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Remove (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Remove(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Remove(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Remove(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Remove schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Объект <see cref="T:System.Xml.Schema.XmlSchema" />, который необходимо удалить из коллекции <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
        <summary>Удаляет заданную схему языка определения схем XML (XSD) из <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Объект <see cref="T:System.Xml.Schema.XmlSchema" />, удаленный из <see cref="T:System.Xml.Schema.XmlSchemaSet" />, или <see langword="null" />, если схема не была найдена в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При удалении схемы из <xref:System.Xml.Schema.XmlSchemaSet> <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> свойства свойству `false`присваивается значение.  
  
   
  
## Examples  
 В следующем примере показано добавление нескольких схем в <xref:System.Xml.Schema.XmlSchemaSet>, а затем удаление одной из схем <xref:System.Xml.Schema.XmlSchemaSet.Remove%2A> с помощью метода.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    If schema.TargetNamespace = "http://www.contoso.com/music" Then  
        schemaSet.Remove(schema)  
    End If  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    if (schema.TargetNamespace == "http://www.contoso.com/music")  
    {  
        schemaSet.Remove(schema);  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Схема не является действительной схемой.</exception>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.Schema.XmlSchema" />, передаваемый в качестве параметра, равен <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveRecursive">
      <MemberSignature Language="C#" Value="public bool RemoveRecursive (System.Xml.Schema.XmlSchema schemaToRemove);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveRecursive(class System.Xml.Schema.XmlSchema schemaToRemove) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.RemoveRecursive(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRecursive (schemaToRemove As XmlSchema) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveRecursive(System::Xml::Schema::XmlSchema ^ schemaToRemove);" />
      <MemberSignature Language="F#" Value="member this.RemoveRecursive : System.Xml.Schema.XmlSchema -&gt; bool" Usage="xmlSchemaSet.RemoveRecursive schemaToRemove" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaToRemove" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schemaToRemove">Объект <see cref="T:System.Xml.Schema.XmlSchema" />, который необходимо удалить из коллекции <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
        <summary>Удаляет указанную схему языка определения схем XML (XSD) и все импортируемые ей схемы из <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Значение <see langword="true" />, если объект <see cref="T:System.Xml.Schema.XmlSchema" /> и все импортируемые им объекты были успешно удалены; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод удаляет указанную схему и все схемы <xref:System.Xml.Schema.XmlSchemaSet>, которые она импортирует, при условии, что нет зависимостей от схемы или ее импортированных схем. <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> Если имеются зависимости от схемы или ее импортированных схем в <xref:System.Xml.Schema.XmlSchemaSet>, ничего не удаляется и <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> не возвращается `false`. Если `false` возвращается значение <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> и определено, в обработчик событий, описывающий зависимости, отправляется предупреждение.  
  
 Если указанная схема импортирует другие схемы, а указанная схема была ранее удалена с <xref:System.Xml.Schema.XmlSchemaSet.Remove%2A> помощью метода, <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> то этот метод не удалит импортированные схемы и возвратит `false`. `parentSchema` Например, если Imports `childSchema1` и `childSchema2` следующий код удалит только `parentSchema`, но не импортированные `childSchema1` и `childSchema2` схемы:  
  
```  
XmlSchemaSet ss = new XmlSchemaSet();  
XmlSchema xs = XmlSchema.Read(XmlReader.Create("parentSchema.xsd"), null);  
ss.Add(xs);  
ss.Compile();  
ss.Remove(xs);  
ss.Compile();  
ss.RemoveRecursive(xs);  
ss.Compile();  
```  
  
 Следующий код `parentSchema` удалит и импортированные схемы:  
  
```  
XmlSchemaSet ss = new XmlSchemaSet();  
XmlSchema xs = XmlSchema.Read(XmlReader.Create("parentSchema.xsd"), null);  
ss.Add(xs);  
ss.Compile();  
ss.RemoveRecursive(xs);  
ss.Compile();  
```  
  
 Метод не влияет на состояние <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> свойства. <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A>  
  
   
  
## Examples  
 В следующем примере кода показано добавление нескольких схем в <xref:System.Xml.Schema.XmlSchemaSet>, а затем удаление одной из схем и всех импортируемых схем <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> с помощью метода.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    If schema.TargetNamespace = "http://www.contoso.com/music" Then  
        schemaSet.RemoveRecursive(schema)  
    End If  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    if (schema.TargetNamespace == "http://www.contoso.com/music")  
    {  
        schemaSet.RemoveRecursive(schema);  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.Schema.XmlSchema" />, передаваемый в качестве параметра, равен <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Reprocess">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Reprocess (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Reprocess(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Reprocess (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Reprocess(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Reprocess : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Reprocess schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Схема, которую необходимо обработать повторно.</param>
        <summary>Выполняет повторную обработку схемы языка определения схем XML (XSD), которая уже находится в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Объект <see cref="T:System.Xml.Schema.XmlSchema" />, если схема успешно прошла проверку. Если схема не прошла проверку и задан <see cref="T:System.Xml.Schema.ValidationEventHandler" />, тогда возвращается <see langword="null" /> и порождается соответствующее событие проверки. В противном случае возникает исключение <see cref="T:System.Xml.Schema.XmlSchemaException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Повторная обработка схемы выполняет все шаги предварительной обработки, выполненные в схеме при <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> вызове метода. Если вызов метода <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> успешно выполнен <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> , свойство устанавливается в `false`значение.  
  
 Метод повторной обработки следует использовать после того, как схема в <xref:System.Xml.Schema.XmlSchemaSet> будет изменена <xref:System.Xml.Schema.XmlSchemaSet> после выполнения компиляции.  
  
> [!NOTE]
>  Необходимо вызвать метод, <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> если схема (или одна из ее включений или импортов) была изменена после ее добавления <xref:System.Xml.Schema.XmlSchemaSet>в. <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> Метод будет проверять схему на наличие структурной достоверности в соответствии с правилами схемы W3C XML. Однако полная проверка не выполняется. Он также будет разрешать ссылки на внутренние и внешние компоненты схемы. Все импортированные или включенные схемы, которые были успешно получены, также добавляются в <xref:System.Xml.Schema.XmlSchemaSet>. Импортированные схемы добавляются как отдельные <xref:System.Xml.Schema.XmlSchema> объекты, а включенные схемы — в состав, включая <xref:System.Xml.Schema.XmlSchema>. Если вызов для повторной обработки выполнен успешно, <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> свойство устанавливается в значение false.  
  
   
  
## Examples  
 В следующем примере показана повторная обработка схемы, <xref:System.Xml.Schema.XmlSchemaSet>добавленной в. <xref:System.Xml.Schema.XmlSchemaSet> <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> <xref:System.Xml.Schema.XmlSchemaSet> После компиляции `true` с помощью метода и изменения схемы, добавленной в объект, свойству будет присвоено значение, даже если схема в была изменена. <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> <xref:System.Xml.Schema.XmlSchemaSet> При вызове <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> `false`метода выполняется вся предварительная обработка, выполненная методом, и для свойства задается значение. <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A>  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
Dim schema As XmlSchema = schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Compile()  
  
Dim element As XmlSchemaElement = New XmlSchemaElement()  
schema.Items.Add(element)  
element.Name = "book"  
element.SchemaTypeName = New XmlQualifiedName("string", "http://www.w3.org/2001/XMLSchema")  
  
schemaSet.Reprocess(schema)  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
XmlSchema schema = schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Compile();  
  
XmlSchemaElement element = new XmlSchemaElement();  
schema.Items.Add(element);  
element.Name = "book";  
element.SchemaTypeName = new XmlQualifiedName("string", "http://www.w3.org/2001/XMLSchema");  
  
schemaSet.Reprocess(schema);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Схема не прошла проверку.</exception>
        <exception cref="T:System.ArgumentNullException">Объект <see cref="T:System.Xml.Schema.XmlSchema" />, переданный в качестве параметра, является <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Объект <see cref="T:System.Xml.Schema.XmlSchema" />, передаваемый в качестве параметра, еще не существует в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Schemas">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает коллекцию схем языка определения схем XML (XSD), содержащихся в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Schemas ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ICollection Schemas() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Schemas" />
      <MemberSignature Language="VB.NET" Value="Public Function Schemas () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ICollection ^ Schemas();" />
      <MemberSignature Language="F#" Value="member this.Schemas : unit -&gt; System.Collections.ICollection" Usage="xmlSchemaSet.Schemas " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает коллекцию всех схем языка определения схем XML (XSD), содержащихся в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Объект <see cref="T:System.Collections.ICollection" />, содержащий все схемы, добавленные в <see cref="T:System.Xml.Schema.XmlSchemaSet" />. Если в <see cref="T:System.Xml.Schema.XmlSchemaSet" /> не были добавлены схемы, возвращается пустой объект <see cref="T:System.Collections.ICollection" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод возвращает схемы, которые были косвенно добавлены в <xref:System.Xml.Schema.XmlSchemaSet> , так как они были импортированы.  
  
> [!NOTE]
>  Метод является эквивалентом <xref:System.Xml.Schema.XmlSchemaCollection.GetEnumerator%2A> метода устаревшего  <xref:System.Xml.Schema.XmlSchemaCollection> .  <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A>  
  
   
  
## Examples  
 В следующем примере показано, как выполнить итерацию по всем схемам в <xref:System.Xml.Schema.XmlSchemaSet>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    schema.Write(Console.Out)  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    schema.Write(Console.Out);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Schemas (string targetNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ICollection Schemas(string targetNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Schemas(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Schemas (targetNamespace As String) As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ICollection ^ Schemas(System::String ^ targetNamespace);" />
      <MemberSignature Language="F#" Value="member this.Schemas : string -&gt; System.Collections.ICollection" Usage="xmlSchemaSet.Schemas targetNamespace" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Свойство <paramref name="targetNamespace" /> схемы.</param>
        <summary>Возвращает коллекцию всех схем языка определения схем XML (XSD) в <see cref="T:System.Xml.Schema.XmlSchemaSet" />, принадлежащих заданному пространству имен.</summary>
        <returns>Объект <see cref="T:System.Collections.ICollection" />, содержащий все схемы, которые были добавлены к <see cref="T:System.Xml.Schema.XmlSchemaSet" />, принадлежащие заданному пространству имен. Если в <see cref="T:System.Xml.Schema.XmlSchemaSet" /> не были добавлены схемы, возвращается пустой объект <see cref="T:System.Collections.ICollection" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если параметр имеет значение `null` или <xref:System.String.Empty>, то возвращаются все схемы без пространства имен. `targetNamespace`  
  
 Этот метод возвращает схемы, которые были косвенно добавлены в <xref:System.Xml.Schema.XmlSchemaSet> , так как они были импортированы.  
  
> [!NOTE]
>  Метод является эквивалентом <xref:System.Xml.Schema.XmlSchemaCollection.Item%2A> метода устаревшего  <xref:System.Xml.Schema.XmlSchemaCollection> .  <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A>  
  
   
  
## Examples  
 В следующем примере показано, как выполнить итерацию по всем схемам `http://www.contoso.com/books` в пространстве имен <xref:System.Xml.Schema.XmlSchemaSet>в.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas("http://www.contoso.com/books")  
  
    schema.Write(Console.Out)  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas("http://www.contoso.com/books"))  
{  
    schema.Write(Console.Out);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberSignature Language="DocId" Value="E:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Schema::ValidationEventHandler ^ ValidationEventHandler;" />
      <MemberSignature Language="F#" Value="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " Usage="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Указывает обработчик событий, получающий сведения об ошибках проверки схем языка определения схем XML (XSD).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Задает обработчик событий для получения сведений об ошибках проверки схемы при <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> вызове методов <xref:System.Xml.Schema.XmlSchemaSet> или <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> .  
  
 Если обработчик событий не определен, <xref:System.Xml.Schema.XmlSchemaException> при любых ошибках проверки, <xref:System.Xml.Schema.XmlSeverityType> где имеет <xref:System.Xml.Schema.XmlSeverityType.Error>значение, создается исключение. Исключения не создаются для ошибок проверки с <xref:System.Xml.Schema.XmlSeverityType> <xref:System.Xml.Schema.XmlSeverityType.Warning>помощью.  
  
   
  
## Examples  
 В следующем примере кода показано, как <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> добавить объект для отслеживания ошибок и предупреждений при проверке XML-документа на соответствие схеме.  
  
 [!code-cpp[XmlSchemaSetOverall Example#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaSetOverall Example/CPP/xmlschemasetexample.cpp#1)]
 [!code-csharp[XmlSchemaSetOverall Example#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaSetOverall Example/CS/xmlschemasetexample.cs#1)]
 [!code-vb[XmlSchemaSetOverall Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaSetOverall Example/VB/xmlschemasetexample.vb#1)]  
  
 В примере в качестве входных данных используется файл books. XML.  
  
 [!code-xml[XmlSchemaSetOverall Example#2](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xml#2)]  
  
 В этом примере в качестве входных данных используется файл books. xsd.  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.Schema.XmlSchemaSet.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Задает <see cref="T:System.Xml.XmlResolver" />, используемый при разрешении пространств имен и расположений, на которые ссылаются элементы включения и импорта схемы.</summary>
        <value><see cref="T:System.Xml.XmlResolver" />, используемый при разрешении пространств имен и расположений, на которые ссылаются элементы включения и импорта схемы.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Xml.XmlResolver> <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> класса используется для разрешения пространств имен или расположений, на которые ссылаются элементы include и Import схемы, каждый раз, когда схема добавляется с помощью методов или. <xref:System.Xml.Schema.XmlSchemaSet>  
  
> [!IMPORTANT]
>  Внешние пространства имен или расположения, на которые ссылаются элементы включения, импорта и переопределения схемы, разрешаются по отношению к базовому URI схемы, включающей или импортирующих их. Например, если базовый URI для схемы включения или импорта пуст или `null`, внешние расположения разрешаются по отношению к текущему каталогу. <xref:System.Xml.XmlUrlResolver> Класс используется для разрешения внешних схем по умолчанию. Чтобы отключить разрешение на включение, импорт и переопределение элементов схемы, присвойте <xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A> `null`свойству значение.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlResolver" />
      </Docs>
    </Member>
  </Members>
</Type>
