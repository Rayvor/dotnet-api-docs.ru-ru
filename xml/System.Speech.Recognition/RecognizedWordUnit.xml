<Type Name="RecognizedWordUnit" FullName="System.Speech.Recognition.RecognizedWordUnit">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f6e60e03331e99f03ff1e904e2a5581cf4a04c53" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69101025" /></Metadata><TypeSignature Language="C#" Value="public class RecognizedWordUnit" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RecognizedWordUnit extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizedWordUnit" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizedWordUnit" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizedWordUnit" />
  <TypeSignature Language="F#" Value="type RecognizedWordUnit = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Text: {Text}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Предоставляет атомарный блок распознанной речи.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Все результаты, возвращаемые подсистемой распознавания, <xref:System.Speech.Recognition.RecognizedWordUnit> формируются из объектов.  
  
 Массив <xref:System.Speech.Recognition.RecognizedWordUnit> объектов доступен для любой операции распознавания <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> через свойство <xref:System.Speech.Recognition.RecognizedPhrase> объекта.  
  
 В дополнение к обеспечению точности распознавания (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> <xref:System.Speech.Recognition.RecognizedWordUnit> ) экземпляр предоставляет следующие сведения:  
  
-   Нормализованные и точные (или лексические) текстовые представления для распознанного слова. Дополнительные сведения см. в разделах <xref:System.Speech.Recognition.ReplacementText>, <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> и <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>.  
  
-   Произношение данных с использованием символов из поддерживаемого фонетического алфавита, такого как Международный фонетический алфавит (IPA) или универсальный набор телефонов (ИБП). Дополнительные сведения см. в разделе <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>.  
  
-   Форматирование для печати. Дополнительные сведения см. в <xref:System.Speech.Recognition.DisplayAttributes> разделе класс и <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> его свойство.  
  
   
  
## Examples  
 В следующем примере показана служебная программа`stringFromWordArray`(), которая создает строки. Строки содержат лексические выходные данные ( <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>с использованием), нормализованный текст <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>(с использованием) или фонетические символы из международной буквы алфавита (с использованием <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). Строки форматируются с использованием <xref:System.Speech.Recognition.DisplayAttributes> объектов, полученных <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> из свойства из <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> <xref:System.Speech.Recognition.RecognizedWordUnit> объектов. Объекты получаются <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> из свойства <xref:System.Speech.Recognition.RecognizedPhrase> объекта. <xref:System.Speech.Recognition.RecognizedWordUnit>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(ReadOnlyCollection<RecognizedWordUnit> words, WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RecognizedWordUnit (string text, float confidence, string pronunciation, string lexicalForm, System.Speech.Recognition.DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, float32 confidence, string pronunciation, string lexicalForm, valuetype System.Speech.Recognition.DisplayAttributes displayAttributes, valuetype System.TimeSpan audioPosition, valuetype System.TimeSpan audioDuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RecognizedWordUnit(System::String ^ text, float confidence, System::String ^ pronunciation, System::String ^ lexicalForm, System::Speech::Recognition::DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.RecognizedWordUnit : string * single * string * string * System.Speech.Recognition.DisplayAttributes * TimeSpan * TimeSpan -&gt; System.Speech.Recognition.RecognizedWordUnit" Usage="new System.Speech.Recognition.RecognizedWordUnit (text, confidence, pronunciation, lexicalForm, displayAttributes, audioPosition, audioDuration)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="confidence" Type="System.Single" />
        <Parameter Name="pronunciation" Type="System.String" />
        <Parameter Name="lexicalForm" Type="System.String" />
        <Parameter Name="displayAttributes" Type="System.Speech.Recognition.DisplayAttributes" />
        <Parameter Name="audioPosition" Type="System.TimeSpan" />
        <Parameter Name="audioDuration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="text">Нормализованный текст для распознанного слова.  
  
Возможные значения — <see langword="null" />, "" или <see cref="F:System.String.Empty" />.</param>
        <param name="confidence">Значение от 0,0 до 1.0 <see langword="float" />, указывающий определенность распознавания слова.</param>
        <param name="pronunciation">Фонетическое написание распознанного слова.  
  
Возможные значения — <see langword="null" />, "" или <see cref="F:System.String.Empty" />.</param>
        <param name="lexicalForm">Ненормализованный текст для распознанного слова.  
  
Этот аргумент обязателен и не может быть <see langword="null" />, "" или <see cref="F:System.String.Empty" />.</param>
        <param name="displayAttributes">Определяет использование пробелов для отображения распознанных слов.</param>
        <param name="audioPosition">Расположение распознанного слова во входном звуковом потоке.  
  
Это значение может быть равно <see cref="F:System.TimeSpan.Zero" />.</param>
        <param name="audioDuration">Длина входных звуковых данных, которые соответствуют распознанному слову.  
  
Это значение может быть равно <see cref="F:System.TimeSpan.Zero" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Speech.Recognition.RecognizedWordUnit" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `text` <xref:System.Speech.Recognition.RecognizedWordUnit> или `pronunciation` имеет значение, "" или <xref:System.String.Empty> используется в операции распознавания, подсистема распознавания создаст соответствующие значения в любом выходном экземпляре. `null` <xref:System.Speech.Recognition.RecognizedWordUnit>  
  
 Непосредственное создание <xref:System.Speech.Recognition.RecognizedWordUnit> экземпляров обычно используется только при эмуляции операций распознавания <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> с помощью методов <xref:System.Speech.Recognition.SpeechRecognitionEngine> или <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> класса и <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> методов или <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> в <xref:System.Speech.Recognition.SpeechRecognizer> класс.  
  
 Для реальных приложений не создавайте <xref:System.Speech.Recognition.RecognizedWordUnit>напрямую, а получите их <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> через свойство <xref:System.Speech.Recognition.RecognizedPhrase> объекта.  
  
   
  
## Examples  
 Следующий пример представляет собой несколько надуманный тестирования эмуляции, где новые слова создаются на основе входных данных и передаются в эмулятор, а затем проверяются.  
  
```csharp  
private void _emulateAndVerify_Click(object sender, EventArgs e)   
{  
  char[] delimiterChars = { ' ', ',', '.', ':', ';', '\t' };  
  string text = _emulateTextBox.Text;  
  string[] words = text.Split(delimiterChars);  
  
  RecognizedWordUnit[] InputWordUnits = new RecognizedWordUnit[words.Length];  
  for (int i = 0; i < words.Length; i++)   
  {  
    InputWordUnits[i] = new RecognizedWordUnit(  
        "",   
        0,   
        "",  
        words[i].ToLower(),   
        DisplayAttributes.OneTrailingSpace,   
        new TimeSpan(),   
        new TimeSpan());  
  }  
  
  RecognitionResult rec = _recognizer.EmulateRecognize(  
        InputWordUnits,   
        System.Globalization.CompareOptions.IgnoreCase);  
  if (rec == null)   
  {  
    MessageBox.Show(String.Format("Recognition emulation for {0} failed.\n", text));  
  }   
  else if (InputWordUnits.Length != rec.Words.Count)   
  {  
    MessageBox.Show(  
       String.Format("Length mismatch: Input was {0} words, Recognition has {1} words.\n}"));  
  }   
  else   
  {  
    for (int i = 0; i < InputWordUnits.Length; i++)   
    {  
  
      if (rec.Words[i].LexicalForm.ToLower() != InputWordUnits[i].LexicalForm.ToLower())   
      {  
        MessageBox.Show(  
          String.Format("Input word {0} \"{1}\" not found. Recognition output is {2}",  
          i, InputWordUnits[i].LexicalForm, rec.Words[i].LexicalForm));  
        continue;  
      }  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=58363">Международный фонетический алфавит</related>
      </Docs>
    </Member>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public float Confidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Confidence" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Confidence As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Confidence { float get(); };" />
      <MemberSignature Language="F#" Value="member this.Confidence : single" Usage="System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, присвоенное распознавателем, которое представляет вероятность того, что распознанное слово соответствует заданным входным данным.</summary>
        <value>Относительная меры точности для машинного правильного распознавания слов. Значение находится в диапазоне от 0,0 до 1,0 (низкая и высокая достоверность соответственно).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Оценки достоверности не показывают абсолютной вероятности правильного распознавания слова. Вместо этого оценки достоверности предоставляют механизм для сравнения относительной точности нескольких вариантов распознавания для заданных входных данных. Это упрощает возврат наиболее точных результатов распознавания. Например, если распознанное слово имеет показатель достоверности 0,8, это не значит, что слово имеет значение 80%, которое является верным совпадением для входных данных.  Это означает, что слово, скорее всего, будет правильным совпадением для ввода, чем другие результаты, у которых показатели достоверности менее 0,8.  
  
 Сам по себе показатель достоверности не имеет смысла, если у вас нет альтернативных результатов для сравнения, как из той же операции распознавания, так и из предыдущих распознавать одних и тех же входных данных.  
  
 Значения, возвращаемые <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> , являются относительными и уникальными для каждого механизма распознавания. Не существует определения того, как значения достоверности между двумя разными механизмами распознавания сравниваются, и <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> как отдельные <xref:System.Speech.Recognition.RecognizedWordUnit> <xref:System.Speech.Recognition.RecognizedPhrase>объекты определяют его <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> .  
  
 Модуль распознавания речи может нанести низкую достоверность для речевого ввода по различным причинам, в том числе к фоновым помехам, распознаванию речи или непредсказуемым словам или последовательностью слов. Если приложение использует <xref:System.Speech.Recognition.SpeechRecognitionEngine> экземпляр служб, можно изменить уровень достоверности, при котором речевое вход принимается или отклоняется одним <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> из методов. Пороговые значения достоверности для общего распознавателя, управляемого <xref:System.Speech.Recognition.SpeechRecognizer>, связаны с профилем пользователя и хранятся в реестре Windows. Приложения не должны записывать изменения в реестр для свойств общего распознавателя.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayAttributes">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.DisplayAttributes DisplayAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.DisplayAttributes DisplayAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayAttributes As DisplayAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::DisplayAttributes DisplayAttributes { System::Speech::Recognition::DisplayAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayAttributes : System.Speech.Recognition.DisplayAttributes" Usage="System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.DisplayAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает сведения о форматировании, используемые для создания текстового вывода из текущего экземпляра <see cref="T:System.Speech.Recognition.RecognizedWordUnit" />.</summary>
        <value>Указывает использование пробелов для отображения содержимого объекта <see cref="T:System.Speech.Recognition.RecognizedWordUnit" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект, возвращаемый <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> свойством, указывает начальные и конечные пробелы для использования с данным словом, если таковые имеются. <xref:System.Speech.Recognition.DisplayAttributes>  
  
 Дополнительные сведения об использовании этих сведений о форматировании см. в <xref:System.Speech.Recognition.DisplayAttributes> разделе перечисление.  
  
   
  
## Examples  
 В следующем примере показана служебная программа`stringFromWordArray`(), которая создает строку, отформатированную одним из трех способов: лексed ( <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>using), нормализованная ( <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>using) или фонетическая (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). Текстовый вывод получается из <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> свойства <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> <xref:System.Speech.Recognition.RecognizedWordUnit> <xref:System.Speech.Recognition.RecognizedPhrase> объекта, полученного из <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> свойства в объекте.  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
        ReadOnlyCollection<RecognizedWordUnit> words,   
        WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }  
    else if (type == WordType.Pronunciation)   
    {  
       wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
         String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="LexicalForm">
      <MemberSignature Language="C#" Value="public string LexicalForm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LexicalForm" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LexicalForm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LexicalForm { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LexicalForm : string" Usage="System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает ненормализованный текст распознанного слова.</summary>
        <value>Возвращает <see cref="T:System.String" />, содержащий текст распознанного слова, не выполняя нормализации.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В большинстве случаев значения, возвращаемые <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> и <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> , идентичны. Тем не менее, для получения более понятных или разговорной речи текстовых представлений входных данных в механизмах распознавания используется нормализация речи.  
  
 Нормализация речи — это использование специальных конструкций или символов для выражения написания речи. Например, нормализация может заменить произносимые слова "доллар и 16 центов" на "$1,16" в выходном тексте.  
  
   
  
## Examples  
 В следующем примере показана служебная программа, которая создает текст в одном из трех форматов: лексическая (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), нормализованная (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>) и фонетическая (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). Текстовый вывод получается из <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> <xref:System.Speech.Recognition.RecognizedWordUnit> объектов, получаемых <xref:System.Speech.Recognition.RecognizedPhrase> из <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> свойства объекта.  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
         ReadOnlyCollection<RecognizedWordUnit> words,   
         WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
    wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Pronunciation">
      <MemberSignature Language="C#" Value="public string Pronunciation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pronunciation" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Pronunciation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pronunciation { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Pronunciation : string" Usage="System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает фонетическое написание распознанного слова.</summary>
        <value>Строка символов из поддерживаемого фонетического алфавита, такого как международный фонетический алфавит (IPA) или универсальный набор звуков (UPS).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Содержимое <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> указывает, какое произношение подсистемы распознавания речи использовалось для сопоставления речевого ввода с одним из <xref:System.Speech.Recognition.Grammar> загруженных объектов. Произношение может быть определено во внутреннем лексиконе модуля распознавания речи в документе лексикона, который связан с грамматикой распознавания в загруженном <xref:System.Speech.Recognition.Grammar> объекте или встроен в грамматику распознавания в загруженном <xref:System.Speech.Recognition.Grammar> объекте. Модуль распознавания речи также может создавать произношение для редко встречающихся слов, произношение которых не определено в лексиконе или грамматике, к которой в настоящее время имеет доступ обработчик распознавания речи.  
  
 Многие шрифты Юникода на основе Windows, например Courier New, поддерживают отображение строк IPA. Дополнительные сведения см. в разделе [Международный фонетический алфавит](https://go.microsoft.com/fwlink/?LinkId=58363).  
  
   
  
## Examples  
 В следующем примере показана служебная программа, которая создает строку с одним из трех возможных форматов: лексическая <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>(using), нормализованная <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>(using) и фонетическая <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>(using). Текстовый вывод получается из <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> <xref:System.Speech.Recognition.RecognizedWordUnit> объектов, получаемых <xref:System.Speech.Recognition.RecognizedPhrase> из <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> свойства объекта.  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=58363">Международный фонетический алфавит</related>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Text : string" Usage="System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает нормализованный текст для распознанного слова.</summary>
        <value>Строка, содержащая нормализованный текстовый вывод для данного введенного слова.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В большинстве случаев значения, возвращаемые <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> методом <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> и, будут идентичны. Тем не менее, для получения более понятных или разговорной речи текстовых представлений входных данных в механизмах распознавания используется нормализация речи.  
  
 Нормализация речи — это использование специальных конструкций или символов для выражения написания речи. Например, нормализация может заменить произносимые слова "доллар и 16 центов" на "$1,16" в выходном тексте.  
  
   
  
## Examples  
 В следующем примере показана служебная программа, которая создает строку в одном из трех форматов: лексическая <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>(using), нормализованная <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>(using) и фонетическая <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>(using). Текстовый вывод получается из <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> <xref:System.Speech.Recognition.RecognizedWordUnit> объектов, получаемых <xref:System.Speech.Recognition.RecognizedPhrase> из <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> свойства объекта.  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
           String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
