<Type Name="SpeechRecognizer" FullName="System.Speech.Recognition.SpeechRecognizer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="effd367bc33117e5a1eff11d047d4b6473bb107d" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73381223" /></Metadata><TypeSignature Language="C#" Value="public class SpeechRecognizer : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeechRecognizer extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SpeechRecognizer" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeechRecognizer&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechRecognizer : IDisposable" />
  <TypeSignature Language="F#" Value="type SpeechRecognizer = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="b77c6-101">Предоставляет доступ к общей доступной службе распознавания речи на рабочем столе Windows.</span><span class="sxs-lookup"><span data-stu-id="b77c6-101">Provides access to the shared speech recognition service available on the Windows desktop.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-102">Приложения используют общий распознаватель для доступа к распознаванию речи Windows.</span><span class="sxs-lookup"><span data-stu-id="b77c6-102">Applications use the shared recognizer to access Windows Speech Recognition.</span></span> <span data-ttu-id="b77c6-103">Используйте объект <xref:System.Speech.Recognition.SpeechRecognizer> для добавления в пользовательский интерфейс Windows Speech.</span><span class="sxs-lookup"><span data-stu-id="b77c6-103">Use the <xref:System.Speech.Recognition.SpeechRecognizer> object to add to the Windows speech user experience.</span></span>  
  
 <span data-ttu-id="b77c6-104">Этот класс обеспечивает контроль над различными аспектами процесса распознавания речи:</span><span class="sxs-lookup"><span data-stu-id="b77c6-104">This class provides control over various aspects of the speech recognition process:</span></span>  
  
-   <span data-ttu-id="b77c6-105">Для управления грамматиками распознавания речи используйте <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammar%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars%2A>и <xref:System.Speech.Recognition.SpeechRecognizer.Grammars%2A>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-105">To manage speech recognition grammars, use the <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammar%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars%2A>, and <xref:System.Speech.Recognition.SpeechRecognizer.Grammars%2A>.</span></span>  
  
-   <span data-ttu-id="b77c6-106">Чтобы получить сведения о текущих операциях распознавания речи, подпишитесь на события <xref:System.Speech.Recognition.SpeechRecognizer><xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected>и <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-106">To get information about current speech recognition operations, subscribe to the <xref:System.Speech.Recognition.SpeechRecognizer>'s <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> events.</span></span>  
  
-   <span data-ttu-id="b77c6-107">Чтобы просмотреть или изменить число альтернативных результатов, возвращаемых распознавателем, используйте свойство <xref:System.Speech.Recognition.SpeechRecognizer.MaxAlternates%2A>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-107">To view or modify the number of alternate results the recognizer returns, use the <xref:System.Speech.Recognition.SpeechRecognizer.MaxAlternates%2A> property.</span></span> <span data-ttu-id="b77c6-108">Распознаватель возвращает результаты распознавания в объект <xref:System.Speech.Recognition.RecognitionResult>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-108">The recognizer returns recognition results in a <xref:System.Speech.Recognition.RecognitionResult> object.</span></span>  
  
-   <span data-ttu-id="b77c6-109">Чтобы получить доступ к состоянию общего распознавателя или наблюдать за ним, используйте свойства <xref:System.Speech.Recognition.SpeechRecognizer.AudioLevel%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.AudioState%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.Enabled%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A>и <xref:System.Speech.Recognition.SpeechRecognizer.State%2A> и <xref:System.Speech.Recognition.SpeechRecognizer.AudioLevelUpdated>, <xref:System.Speech.Recognition.SpeechRecognizer.AudioSignalProblemOccurred><xref:System.Speech.Recognition.SpeechRecognizer.AudioStateChanged>и <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> событий.</span><span class="sxs-lookup"><span data-stu-id="b77c6-109">To access or monitor the state of the shared recognizer, use the <xref:System.Speech.Recognition.SpeechRecognizer.AudioLevel%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.AudioState%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.Enabled%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A>, and <xref:System.Speech.Recognition.SpeechRecognizer.State%2A> properties and the <xref:System.Speech.Recognition.SpeechRecognizer.AudioLevelUpdated>, <xref:System.Speech.Recognition.SpeechRecognizer.AudioSignalProblemOccurred>, <xref:System.Speech.Recognition.SpeechRecognizer.AudioStateChanged>, and <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> events.</span></span>  
  
-   <span data-ttu-id="b77c6-110">Чтобы синхронизировать изменения распознавателя, используйте метод <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-110">To synchronize changes to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> method.</span></span> <span data-ttu-id="b77c6-111">Общий распознаватель использует более одного потока для выполнения задач.</span><span class="sxs-lookup"><span data-stu-id="b77c6-111">The shared recognizer uses more than one thread to perform tasks.</span></span>  
  
-   <span data-ttu-id="b77c6-112">Чтобы эмулировать входные данные для общего распознавателя, используйте методы <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> и <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-112">To emulate input to the shared recognizer, use the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> and <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="b77c6-113">Настройка распознавания речи Windows осуществляется с помощью диалогового окна « **Свойства речи** **» на панели управления**.</span><span class="sxs-lookup"><span data-stu-id="b77c6-113">The configuration of Windows Speech Recognition is managed by the use of the **Speech Properties** dialog in the **Control Panel**.</span></span> <span data-ttu-id="b77c6-114">Этот интерфейс используется для выбора подсистемы распознавания речи рабочего стола по умолчанию и языка, устройства ввода звука и режима сна распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-114">This interface is used to select the default desktop speech recognition engine and language, the audio input device, and the sleep behavior of speech recognition.</span></span> <span data-ttu-id="b77c6-115">Если настройка распознавания речи Windows изменилась во время работы приложения (например, если распознавание речи отключено или изменился язык ввода), изменение затрагивает все объекты <xref:System.Speech.Recognition.SpeechRecognizer>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-115">If the configuration of Windows Speech Recognition is changed while the application is running, (for instance, if speech recognition is disabled or the input language is changed), the change affects all <xref:System.Speech.Recognition.SpeechRecognizer> objects.</span></span>  
  
 <span data-ttu-id="b77c6-116">Чтобы создать внутрипроцессный распознаватель речи, который не зависит от распознавания речи Windows, используйте класс <xref:System.Speech.Recognition.SpeechRecognitionEngine>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-116">To create an in-process speech recognizer that is independent of Windows Speech Recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b77c6-117">Всегда вызывайте <xref:System.Speech.Recognition.SpeechRecognizer.Dispose%2A> перед тем, как освободить последнюю ссылку на распознаватель речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-117">Always call <xref:System.Speech.Recognition.SpeechRecognizer.Dispose%2A> before you release your last reference to the speech recognizer.</span></span> <span data-ttu-id="b77c6-118">В противном случае ресурсы, которые он использует, не будут освобождены до тех пор, пока сборщик мусора не вызовет метод `Finalize` объекта распознавателя.</span><span class="sxs-lookup"><span data-stu-id="b77c6-118">Otherwise, the resources it is using will not be freed until the garbage collector calls the recognizer object's `Finalize` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b77c6-119">Следующий пример является частью консольного приложения, которое загружает грамматику распознавания речи и демонстрирует асинхронную эмуляцию ввода, связанные результаты распознавания и связанные события, вызванные распознавателем речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-119">The following example is part of a console application that loads a speech recognition grammar and demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span>  <span data-ttu-id="b77c6-120">Если средство распознавания речи Windows не запущено, то при запуске этого приложения также будет запущено распознавание речи Windows.</span><span class="sxs-lookup"><span data-stu-id="b77c6-120">If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition.</span></span> <span data-ttu-id="b77c6-121">Если распознавание речи Windows находится в **спящем** режиме, <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> всегда возвращает значение null.</span><span class="sxs-lookup"><span data-stu-id="b77c6-121">If Windows Speech Recognition is in the **Sleeping** state, then <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> always returns null.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace SharedRecognizer  
{  
  class Program  
  {  
  
    // Indicate whether the asynchronous emulate recognition  
    // operation has completed.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
  
      // Initialize an instance of the shared recognizer.  
      using (SpeechRecognizer recognizer = new SpeechRecognizer())  
      {  
  
        // Create and load a sample grammar.  
        Grammar testGrammar =  
          new Grammar(new GrammarBuilder("testing testing"));  
        testGrammar.Name = "Test Grammar";  
        recognizer.LoadGrammar(testGrammar);  
  
        // Attach event handlers for recognition events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHandler);  
  
        completed = false;  
  
        // Start asynchronous emulated recognition.   
        // This matches the grammar and generates a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing testing");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        completed = false;  
  
        // Start asynchronous emulated recognition.  
        // This does not match the grammar or generate a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing one two three");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null)  
      {  
        Console.WriteLine("Recognition result = {0}",  
          e.Result.Text ?? "<no text>");  
      }  
      else  
      {  
        Console.WriteLine("No recognition result");  
      }  
    }  
  
    // Handle the SpeechRecognizeCompleted event.  
    static void EmulateRecognizeCompletedHandler(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      if (e.Result == null)  
      {  
        Console.WriteLine("No result generated.");  
      }  
  
      // Indicate the asynchronous operation is complete.  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognizer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognizer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b77c6-122">Инициализирует новый экземпляр класса <see cref="T:System.Speech.Recognition.SpeechRecognizer" />.</span><span class="sxs-lookup"><span data-stu-id="b77c6-122">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-123">Каждый объект <xref:System.Speech.Recognition.SpeechRecognizer> поддерживает отдельный набор грамматик распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-123">Each <xref:System.Speech.Recognition.SpeechRecognizer> object maintains a separate set of speech recognition grammars.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b77c6-124">Следующий пример является частью консольного приложения, которое загружает грамматику распознавания речи и демонстрирует асинхронную эмуляцию ввода, связанные результаты распознавания и связанные события, вызванные распознавателем речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-124">The following example is part of a console application that loads a speech recognition grammar and demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="b77c6-125">Если средство распознавания речи Windows не запущено, то при запуске этого приложения также будет запущено распознавание речи Windows.</span><span class="sxs-lookup"><span data-stu-id="b77c6-125">If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition.</span></span> <span data-ttu-id="b77c6-126">Если распознавание речи Windows находится в **спящем** режиме, <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> всегда возвращает значение null.</span><span class="sxs-lookup"><span data-stu-id="b77c6-126">If Windows Speech Recognition is in the **Sleeping** state, then <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> always returns null.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace SharedRecognizer  
{  
  class Program  
  {  
  
    // Indicate whether the asynchronous emulate recognition  
    // operation has completed.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
  
      // Initialize an instance of the shared recognizer.  
      using (SpeechRecognizer recognizer = new SpeechRecognizer())  
      {  
  
        // Create and load a sample grammar.  
        Grammar testGrammar =  
          new Grammar(new GrammarBuilder("testing testing"));  
        testGrammar.Name = "Test Grammar";  
        recognizer.LoadGrammar(testGrammar);  
  
        // Attach event handlers for recognition events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHandler);  
  
        completed = false;  
  
        // Start asynchronous emulated recognition.   
        // This matches the grammar and generates a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing testing");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        completed = false;  
  
        // Start asynchronous emulated recognition.  
        // This does not match the grammar or generate a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing one two three");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null)  
      {  
        Console.WriteLine("Recognition result = {0}",  
          e.Result.Text ?? "<no text>");  
      }  
      else  
      {  
        Console.WriteLine("No recognition result");  
      }  
    }  
  
    // Handle the SpeechRecognizeCompleted event.  
    static void EmulateRecognizeCompletedHandler(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      if (e.Result == null)  
      {  
        Console.WriteLine("No result generated.");  
      }  
  
      // Indicate the asynchronous operation is complete.  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="AudioFormat">
      <MemberSignature Language="C#" Value="public System.Speech.AudioFormat.SpeechAudioFormatInfo AudioFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.AudioFormat.SpeechAudioFormatInfo AudioFormat" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.AudioFormat" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioFormat As SpeechAudioFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::AudioFormat::SpeechAudioFormatInfo ^ AudioFormat { System::Speech::AudioFormat::SpeechAudioFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioFormat : System.Speech.AudioFormat.SpeechAudioFormatInfo" Usage="System.Speech.Recognition.SpeechRecognizer.AudioFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.AudioFormat.SpeechAudioFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b77c6-127">Получает формат аудио, принимаемого распознавателем речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-127">Gets the format of the audio being received by the speech recognizer.</span></span></summary>
        <value><span data-ttu-id="b77c6-128">Звуковой формат ввода для распознавателя речи или <see langword="null" /> если не настроен вход на распознаватель.</span><span class="sxs-lookup"><span data-stu-id="b77c6-128">The audio input format for the speech recognizer, or <see langword="null" /> if the input to the recognizer is not configured.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AudioLevel">
      <MemberSignature Language="C#" Value="public int AudioLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AudioLevel" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.AudioLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AudioLevel { int get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioLevel : int" Usage="System.Speech.Recognition.SpeechRecognizer.AudioLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b77c6-129">Получает уровень звука, принимаемого распознавателем речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-129">Gets the level of the audio being received by the speech recognizer.</span></span></summary>
        <value><span data-ttu-id="b77c6-130">Уровень звука ввода в распознаватель речи, от 0 до 100.</span><span class="sxs-lookup"><span data-stu-id="b77c6-130">The audio level of the input to the speech recognizer, from 0 through 100.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.AudioLevelUpdated" />
      </Docs>
    </Member>
    <Member MemberName="AudioLevelUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; AudioLevelUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; AudioLevelUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.AudioLevelUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioLevelUpdated As EventHandler(Of AudioLevelUpdatedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioLevelUpdatedEventArgs ^&gt; ^ AudioLevelUpdated;" />
      <MemberSignature Language="F#" Value="member this.AudioLevelUpdated : EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; " Usage="member this.AudioLevelUpdated : System.EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b77c6-131">Происходит, когда общий распознаватель сообщает об уровне аудиовхода.</span><span class="sxs-lookup"><span data-stu-id="b77c6-131">Occurs when the shared recognizer reports the level of its audio input.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-132">Распознаватель вызывает это событие несколько раз в секунду.</span><span class="sxs-lookup"><span data-stu-id="b77c6-132">The recognizer raises this event multiple times per second.</span></span> <span data-ttu-id="b77c6-133">Частота, с которой возникает событие, зависит от компьютера, на котором работает приложение.</span><span class="sxs-lookup"><span data-stu-id="b77c6-133">The frequency with which the event is raised depends on the computer on which the application is running.</span></span>  
  
 <span data-ttu-id="b77c6-134">Чтобы получить уровень звука во время события, используйте свойство <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel%2A> связанного <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-134">To get the audio level at the time of the event, use the <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel%2A> property of the associated <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs>.</span></span> <span data-ttu-id="b77c6-135">Чтобы получить текущий уровень звука входных данных распознавателя, используйте свойство <xref:System.Speech.Recognition.SpeechRecognizer.AudioLevel%2A> распознавателя.</span><span class="sxs-lookup"><span data-stu-id="b77c6-135">To get the current audio level of the input to the recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.AudioLevel%2A> property.</span></span>  
  
 <span data-ttu-id="b77c6-136">При создании делегата для события `AudioLevelUpdated` вы определяете метод, который будет обработано событие.</span><span class="sxs-lookup"><span data-stu-id="b77c6-136">When you create a delegate for an `AudioLevelUpdated` event, you identify the method that will handle the event.</span></span> <span data-ttu-id="b77c6-137">Чтобы связать событие с обработчиком событий, нужно добавить в событие экземпляр делегата.</span><span class="sxs-lookup"><span data-stu-id="b77c6-137">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="b77c6-138">Обработчик событий вызывается всякий раз, когда происходит событие, если делегат не удален.</span><span class="sxs-lookup"><span data-stu-id="b77c6-138">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="b77c6-139">Дополнительные сведения о делегатах обработчиков событий см. в разделе [события и делегаты](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="b77c6-139">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b77c6-140">В следующем примере обработчик для события `AudioLevelUpdated` добавляется в объект <xref:System.Speech.Recognition.SpeechRecognizer>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-140">The following example adds a handler for the `AudioLevelUpdated` event to a <xref:System.Speech.Recognition.SpeechRecognizer> object.</span></span> <span data-ttu-id="b77c6-141">Обработчик выводит новый звуковой уровень в консоль.</span><span class="sxs-lookup"><span data-stu-id="b77c6-141">The handler outputs the new audio level to the console.</span></span>  
  
```csharp  
private SpeechRecognizer recognizer;  
  
// Initialize the SpeechRecognizer object.   
private void Initialize()  
{  
  recognizer = new SpeechRecognizer();  
  
  // Add an event handler for the AudioLevelUpdated event.  
  recognizer.AudioLevelUpdated +=   
    new EventHandler<AudioLevelUpdatedEventArgs>(recognizer_AudioLevelUpdated);  
  
  // Add other initialization code here.  
  
}  
  
// Write the audio level to the console when the AudioLevelUpdated event is raised.  
void recognizer_AudioLevelUpdated(object sender, AudioLevelUpdatedEventArgs e)  
{  
  Console.WriteLine("The audio level is now: {0}.", e.AudioLevel);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioLevelUpdatedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioLevel" />
      </Docs>
    </Member>
    <Member MemberName="AudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan AudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AudioPosition { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioPosition : TimeSpan" Usage="System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b77c6-142">Получает текущую позицию в аудиопотоке, создаваемом устройством, которое предоставляет входные данные для распознавателя речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-142">Gets the current location in the audio stream being generated by the device that is providing input to the speech recognizer.</span></span></summary>
        <value><span data-ttu-id="b77c6-143">Текущее местоположение во входном потоке аудио распознавателя речи, через который он получил входные данные.</span><span class="sxs-lookup"><span data-stu-id="b77c6-143">The current location in the speech recognizer's audio input stream through which it has received input.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-144">Общий распознаватель получает входные данные, пока работает распознавание речи рабочего стола.</span><span class="sxs-lookup"><span data-stu-id="b77c6-144">The shared recognizer receives input while the desktop speech recognition is running.</span></span>  
  
 <span data-ttu-id="b77c6-145">Свойство `AudioPosition` ссылается на расположение устройства ввода в созданном звуковом потоке.</span><span class="sxs-lookup"><span data-stu-id="b77c6-145">The `AudioPosition` property references the input device's position in its generated audio stream.</span></span> <span data-ttu-id="b77c6-146">Напротив, свойство <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> ссылается на расположение распознавателя при обработке звуковых входов.</span><span class="sxs-lookup"><span data-stu-id="b77c6-146">By contrast, the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> property references the recognizer's position in processing audio input.</span></span> <span data-ttu-id="b77c6-147">Эти позиции могут отличаться.</span><span class="sxs-lookup"><span data-stu-id="b77c6-147">These positions can be different.</span></span>  <span data-ttu-id="b77c6-148">Например, если распознаватель получил входные данные, для которых он еще не создал результат распознавания, значение свойства <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> меньше значения свойства <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-148">For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> property is less than the value of the <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b77c6-149">В следующем примере общий распознаватель речи использует грамматику диктовки для сопоставления речевого ввода.</span><span class="sxs-lookup"><span data-stu-id="b77c6-149">In the following example, the shared speech recognizer uses a dictation grammar to match speech input.</span></span> <span data-ttu-id="b77c6-150">Обработчик события <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected> записывает в консоль <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A>и <xref:System.Speech.Recognition.SpeechRecognizer.AudioLevel%2A>, когда распознаватель речи обнаруживает речь во входных данных.</span><span class="sxs-lookup"><span data-stu-id="b77c6-150">A handler for the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected> event writes to the console the <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A>, and  <xref:System.Speech.Recognition.SpeechRecognizer.AudioLevel%2A> when the speech recognizer detects speech at its input.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognizer recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize a shared speech recognition engine.  
      recognizer = new SpeechRecognizer();  
  
      // Add handlers for events.  
      recognizer.LoadGrammarCompleted +=   
        new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
      recognizer.SpeechRecognized +=   
        new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
      recognizer.StateChanged +=   
        new EventHandler<StateChangedEventArgs>(recognizer_StateChanged);  
      recognizer.SpeechDetected +=   
        new EventHandler<SpeechDetectedEventArgs>(recognizer_SpeechDetected);  
  
      // Create a dictation grammar.  
      Grammar dictation = new DictationGrammar();  
      dictation.Name = "Dictation";  
  
      // Load the grammar object to the recognizer.  
      recognizer.LoadGrammarAsync(dictation);  
  
      // Keep the console window open.  
      Console.ReadLine();  
    }  
  
    // Gather information about detected speech and write it to the console.  
    static void recognizer_SpeechDetected(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Speech detected:");  
      Console.WriteLine("  Audio level: " + recognizer.AudioLevel);  
      Console.WriteLine("  Audio position: " + recognizer.AudioPosition);  
      Console.WriteLine("  Recognizer audio position: " + recognizer.RecognizerAudioPosition);  
    }  
  
    // Write the text of the recognition result to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {   
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
  
      // Add event handler code here.  
    }  
  
    // Write the name of the loaded grammar to the console.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Put the shared speech recognizer into "listening" mode.  
    static void recognizer_StateChanged(object sender, StateChangedEventArgs e)  
    {  
      if (e.RecognizerState != RecognizerState.Stopped)  
      {  
        recognizer.EmulateRecognizeAsync("Start listening");  
      }  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="AudioSignalProblemOccurred">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; AudioSignalProblemOccurred;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; AudioSignalProblemOccurred" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.AudioSignalProblemOccurred" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioSignalProblemOccurred As EventHandler(Of AudioSignalProblemOccurredEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioSignalProblemOccurredEventArgs ^&gt; ^ AudioSignalProblemOccurred;" />
      <MemberSignature Language="F#" Value="member this.AudioSignalProblemOccurred : EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; " Usage="member this.AudioSignalProblemOccurred : System.EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b77c6-151">Происходит, если средство распознавания обнаруживает проблему аудиосигнала.</span><span class="sxs-lookup"><span data-stu-id="b77c6-151">Occurs when the recognizer encounters a problem in the audio signal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-152">Чтобы узнать, какая проблема возникла, используйте свойство <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem%2A> связанного <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-152">To get which problem occurred, use the <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem%2A> property of the associated <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>.</span></span>  
  
 <span data-ttu-id="b77c6-153">При создании делегата для события `AudioSignalProblemOccurred` вы определяете метод, который будет обработано событие.</span><span class="sxs-lookup"><span data-stu-id="b77c6-153">When you create a delegate for an `AudioSignalProblemOccurred` event, you identify the method that will handle the event.</span></span> <span data-ttu-id="b77c6-154">Чтобы связать событие с обработчиком событий, нужно добавить в событие экземпляр делегата.</span><span class="sxs-lookup"><span data-stu-id="b77c6-154">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="b77c6-155">Обработчик событий вызывается всякий раз, когда происходит событие, если делегат не удален.</span><span class="sxs-lookup"><span data-stu-id="b77c6-155">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="b77c6-156">Дополнительные сведения о делегатах обработчиков событий см. в разделе [события и делегаты](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="b77c6-156">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b77c6-157">В следующем примере определяется обработчик событий, собирающий сведения о событии `AudioSignalProblemOccurred`.</span><span class="sxs-lookup"><span data-stu-id="b77c6-157">The following example defines an event handler that gathers information about an `AudioSignalProblemOccurred` event.</span></span>  
  
```  
private SpeechRecognizer recognizer;  
  
// Initialize the speech recognition engine.  
private void Initialize()  
{  
  recognizer = new SpeechRecognizer();  
  
  // Add a handler for the AudioSignalProblemOccurred event.  
  recognizer.AudioSignalProblemOccurred +=   
    new EventHandler<AudioSignalProblemOccurredEventArgs>(  
      recognizer_AudioSignalProblemOccurred);  
}  
  
// Gather information when the AudioSignalProblemOccurred event is raised.  
void recognizer_AudioSignalProblemOccurred(object sender, AudioSignalProblemOccurredEventArgs e)  
{  
  StringBuilder details = new StringBuilder();  
  
  details.AppendLine("Audio signal problem information:");  
  details.AppendFormat(  
    " Audio level:               {0}" + Environment.NewLine +  
    " Audio position:            {1}" + Environment.NewLine +  
    " Audio signal problem:      {2}" + Environment.NewLine +  
    " Recognition engine audio position: {3}" + Environment.NewLine,  
    e.AudioLevel, e.AudioPosition,  e.AudioSignalProblem,  
    e.recoEngineAudioPosition);  
  
  // Insert additional event handler code here.  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioSignalProblem" />
        <altmember cref="T:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="AudioState">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.AudioState AudioState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.AudioState AudioState" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.AudioState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioState As AudioState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::AudioState AudioState { System::Speech::Recognition::AudioState get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioState : System.Speech.Recognition.AudioState" Usage="System.Speech.Recognition.SpeechRecognizer.AudioState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.AudioState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b77c6-158">Получает состояние звука, принимаемого распознавателем речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-158">Gets the state of the audio being received by the speech recognizer.</span></span></summary>
        <value><span data-ttu-id="b77c6-159">Состояние звукового ввода в распознаватель речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-159">The state of the audio input to the speech recognizer.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.AudioStateChanged" />
      </Docs>
    </Member>
    <Member MemberName="AudioStateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt; AudioStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioStateChangedEventArgs&gt; AudioStateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.AudioStateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioStateChanged As EventHandler(Of AudioStateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioStateChangedEventArgs ^&gt; ^ AudioStateChanged;" />
      <MemberSignature Language="F#" Value="member this.AudioStateChanged : EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt; " Usage="member this.AudioStateChanged : System.EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b77c6-160">Происходит при изменении состояния аудио, получаемого распознавателем.</span><span class="sxs-lookup"><span data-stu-id="b77c6-160">Occurs when the state changes in the audio being received by the recognizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-161">Чтобы получить состояние звука во время события, используйте свойство <xref:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState%2A> связанного <xref:System.Speech.Recognition.AudioStateChangedEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-161">To get the audio state at the time of the event, use the <xref:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState%2A> property of the associated <xref:System.Speech.Recognition.AudioStateChangedEventArgs>.</span></span> <span data-ttu-id="b77c6-162">Чтобы получить текущее звуковое состояние входных данных распознавателя, используйте свойство <xref:System.Speech.Recognition.SpeechRecognizer.AudioState%2A> распознавателя.</span><span class="sxs-lookup"><span data-stu-id="b77c6-162">To get the current audio state of the input to the recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.AudioState%2A> property.</span></span> <span data-ttu-id="b77c6-163">Дополнительные сведения о состоянии звука см. в разделе Перечисление <xref:System.Speech.Recognition.AudioState>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-163">For more information about audio state, see the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
 <span data-ttu-id="b77c6-164">При создании делегата для события `AudioStateChanged` вы определяете метод, который будет обработано событие.</span><span class="sxs-lookup"><span data-stu-id="b77c6-164">When you create a delegate for an `AudioStateChanged` event, you identify the method that will handle the event.</span></span> <span data-ttu-id="b77c6-165">Чтобы связать событие с обработчиком событий, нужно добавить в событие экземпляр делегата.</span><span class="sxs-lookup"><span data-stu-id="b77c6-165">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="b77c6-166">Обработчик событий вызывается всякий раз, когда происходит событие, если делегат не удален.</span><span class="sxs-lookup"><span data-stu-id="b77c6-166">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="b77c6-167">Дополнительные сведения о делегатах обработчиков событий см. в разделе [события и делегаты](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="b77c6-167">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b77c6-168">В следующем примере используется обработчик события `AudioStateChanged` для записи нового <xref:System.Speech.Recognition.SpeechRecognizer.AudioState%2A> распознавателя в консоль при каждом его изменении с помощью члена перечисления <xref:System.Speech.Recognition.AudioState>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-168">The following example uses a handler for the `AudioStateChanged` event to write the recognizer's new <xref:System.Speech.Recognition.SpeechRecognizer.AudioState%2A> to the console each time it changes using a member of the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognizer recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize a shared speech recognition engine.  
      recognizer = new SpeechRecognizer();  
  
        // Create and load a grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(recognizer_AudioStateChanged);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.StateChanged +=  
          new EventHandler<StateChangedEventArgs>(recognizer_StateChanged);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
  
    // Handle the AudioStateChanged event.  
    static void recognizer_AudioStateChanged(object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("The new audio state is: " + e.AudioState);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine();  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
        Console.WriteLine();  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Done.");  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Put the recognizer into Listening mode.  
    static void recognizer_StateChanged(object sender, StateChangedEventArgs e)  
    {  
      if (e.RecognizerState != RecognizerState.Stopped)  
      {  
        Console.WriteLine();  
        recognizer.EmulateRecognizeAsync("Start listening");  
      }  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioState" />
        <altmember cref="T:System.Speech.Recognition.AudioStateChangedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioState" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b77c6-169">Удаляет объект <see cref="T:System.Speech.Recognition.SpeechRecognizer" />.</span><span class="sxs-lookup"><span data-stu-id="b77c6-169">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="speechRecognizer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b77c6-170">Удаляет объект <see cref="T:System.Speech.Recognition.SpeechRecognizer" />.</span><span class="sxs-lookup"><span data-stu-id="b77c6-170">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="speechRecognizer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="b77c6-171">Значение <see langword="true" /> позволяет освободить управляемые и неуправляемые ресурсы; значение <see langword="false" /> позволяет освободить только неуправляемые ресурсы.</span><span class="sxs-lookup"><span data-stu-id="b77c6-171"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="b77c6-172">Удаляет объект <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> и освобождает ресурсы, используемые во время сеанса.</span><span class="sxs-lookup"><span data-stu-id="b77c6-172">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> object and releases resources used during the session.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EmulateRecognize">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b77c6-173">Эмулирует ввод в общий распознаватель речи, используя текст вместо аудио для синхронного распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-173">Emulates input to the shared speech recognizer, using text instead of audio for synchronous speech recognition.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-174">Эти методы обходят входные звуковые данные системы.</span><span class="sxs-lookup"><span data-stu-id="b77c6-174">These methods bypass the system audio input.</span></span> <span data-ttu-id="b77c6-175">Это может быть полезно при тестировании или отладке приложения или грамматики.</span><span class="sxs-lookup"><span data-stu-id="b77c6-175">This can be helpful when you are testing or debugging an application or grammar.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b77c6-176">Если распознавание речи Windows находится в **спящем** режиме, эти методы возвращают `null`.</span><span class="sxs-lookup"><span data-stu-id="b77c6-176">If Windows Speech Recognition is in the **Sleeping** state, then these methods return `null`.</span></span>  
  
 <span data-ttu-id="b77c6-177">Общий распознаватель вызывает события <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected>и <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized>, как если бы операция распознавания не была эмуляциа.</span><span class="sxs-lookup"><span data-stu-id="b77c6-177">The shared recognizer raises the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="b77c6-178">Распознаватель игнорирует новые строки и лишние пробелы и рассматривает знаки препинания как литеральные входные данные.</span><span class="sxs-lookup"><span data-stu-id="b77c6-178">The recognizer ignores new lines and extra white space and treats punctuation as literal input.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b77c6-179">Объект <xref:System.Speech.Recognition.RecognitionResult>, созданный общим распознавателем в ответ на эмулированные входные данные, имеет значение `null` для свойства <xref:System.Speech.Recognition.RecognitionResult.Audio%2A>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-179">The <xref:System.Speech.Recognition.RecognitionResult> object generated by the shared recognizer in response to emulated input has a value of `null` for its <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property.</span></span>  
  
 <span data-ttu-id="b77c6-180">Чтобы эмулировать асинхронное распознавание, используйте метод <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-180">To emulate asynchronous recognition, use the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (string inputText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(string inputText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function EmulateRecognize (inputText As String) As RecognitionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(System::String ^ inputText);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognize : string -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognizer.EmulateRecognize inputText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="b77c6-181">Входные данные для операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="b77c6-181">The input for the recognition operation.</span></span></param>
        <summary><span data-ttu-id="b77c6-182">Эмулирует ввод фразы в общий распознаватель речи, используя текст вместо аудио для синхронного распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-182">Emulates input of a phrase to the shared speech recognizer, using text instead of audio for synchronous speech recognition.</span></span></summary>
        <returns><span data-ttu-id="b77c6-183">Результат распознавания для операции распознавания или <see langword="null" />, если операция завершилась неудачно или распознавание речи Windows находится в состоянии **Сон**.</span><span class="sxs-lookup"><span data-stu-id="b77c6-183">The recognition result for the recognition operation, or <see langword="null" />, if the operation is not successful or Windows Speech Recognition is in the **Sleeping** state.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-184">Распознаватели, поставляемые с Vista и Windows 7, не учитывают регистр и ширину символов при применении грамматических правил к входной фразе.</span><span class="sxs-lookup"><span data-stu-id="b77c6-184">The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase.</span></span> <span data-ttu-id="b77c6-185">Дополнительные сведения об этом типе сравнения см. в разделе значения перечисления <xref:System.Globalization.CompareOptions> <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> и <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-185">For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> and <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span></span> <span data-ttu-id="b77c6-186">Распознаватели также пропускают новые строки и дополнительные пробелы и обрабатывают знаки препинания в качестве литеральных входных данных.</span><span class="sxs-lookup"><span data-stu-id="b77c6-186">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b77c6-187">В следующем примере показана загрузка примера грамматики в общий распознаватель и Эмуляция входных данных распознавателя.</span><span class="sxs-lookup"><span data-stu-id="b77c6-187">The following example loads a sample grammar to the shared recognizer and emulates input to the recognizer.</span></span> <span data-ttu-id="b77c6-188">Если средство распознавания речи Windows не запущено, то при запуске этого приложения также будет запущено распознавание речи Windows.</span><span class="sxs-lookup"><span data-stu-id="b77c6-188">If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition.</span></span> <span data-ttu-id="b77c6-189">Если распознавание речи Windows находится в **спящем** режиме, <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> всегда возвращает значение null.</span><span class="sxs-lookup"><span data-stu-id="b77c6-189">If Windows Speech Recognition is in the **Sleeping** state, then <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> always returns null.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SharedRecognizer  
{  
  class Program  
  {  
  
    static void Main(string[] args)  
    {  
      // Initialize an instance of the shared recognizer.  
      using (SpeechRecognizer recognizer = new SpeechRecognizer())  
      {  
        // Create and load a sample grammar.  
        Grammar testGrammar =  
          new Grammar(new GrammarBuilder("testing testing"));  
        testGrammar.Name = "Test Grammar";  
  
        recognizer.LoadGrammar(testGrammar);  
  
        RecognitionResult result;  
  
        // This EmulateRecognize call matches the grammar and returns a  
        // recognition result.  
        result = recognizer.EmulateRecognize("testing testing");  
        OutputResult(result);  
  
        // This EmulateRecognize call does not match the grammar and   
        // returns null.  
        result = recognizer.EmulateRecognize("testing one two three");  
        OutputResult(result);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Output information about a recognition result to the console.  
    private static void OutputResult(RecognitionResult result)  
    {  
      if (result != null)  
      {  
        Console.WriteLine("Recognition result = {0}",  
          result.Text ?? "<no text>");  
      }  
      else  
      {  
        Console.WriteLine("No recognition result");  
      }  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (System.Speech.Recognition.RecognizedWordUnit[] wordUnits, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(class System.Speech.Recognition.RecognizedWordUnit[] wordUnits, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(cli::array &lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ wordUnits, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognize : System.Speech.Recognition.RecognizedWordUnit[] * System.Globalization.CompareOptions -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognizer.EmulateRecognize (wordUnits, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wordUnits" Type="System.Speech.Recognition.RecognizedWordUnit[]" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="wordUnits"><span data-ttu-id="b77c6-190">Массив единиц слов, содержащий входные данные для операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="b77c6-190">An array of word units that contains the input for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="b77c6-191">Поразрядное сочетание значений перечисления, описывающих тип сравнения, который требуется использовать для эмулируемой операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="b77c6-191">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="b77c6-192">Эмулирует ввод конкретных слов в общий распознаватель речи, используя текст вместо аудио для синхронного распознавания речи, и указывает способ обработки распознавателем сравнения Юникода между словами и загруженными грамматиками распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-192">Emulates input of specific words to the shared speech recognizer, using text instead of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars.</span></span></summary>
        <returns><span data-ttu-id="b77c6-193">Результат распознавания для операции распознавания или <see langword="null" />, если операция завершилась неудачно или распознавание речи Windows находится в состоянии **Сон**.</span><span class="sxs-lookup"><span data-stu-id="b77c6-193">The recognition result for the recognition operation, or <see langword="null" />, if the operation is not successful or Windows Speech Recognition is in the **Sleeping** state.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-194">Этот метод создает объект <xref:System.Speech.Recognition.RecognitionResult>, используя сведения, указанные в параметре `wordUnits`.</span><span class="sxs-lookup"><span data-stu-id="b77c6-194">This method creates a <xref:System.Speech.Recognition.RecognitionResult> object using the information provided in the `wordUnits` parameter.</span></span>  
  
 <span data-ttu-id="b77c6-195">Распознаватель использует `compareOptions`, когда он применяет грамматические правила к входной фразе.</span><span class="sxs-lookup"><span data-stu-id="b77c6-195">The recognizer uses the `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="b77c6-196">Распознаватели, поставляемые с Vista и Windows 7, не учитывают регистр, если указано значение <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> или <xref:System.Globalization.CompareOptions.IgnoreCase>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-196">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="b77c6-197">Распознаватели всегда пропускают ширину символов и никогда не пропускают тип японской азбуки.</span><span class="sxs-lookup"><span data-stu-id="b77c6-197">The recognizers always ignore the character width and never ignore the Kana type.</span></span> <span data-ttu-id="b77c6-198">Распознаватели также пропускают новые строки и дополнительные пробелы и обрабатывают знаки препинания в качестве литеральных входных данных.</span><span class="sxs-lookup"><span data-stu-id="b77c6-198">The recognizers also ignore new lines and extra white space and treats punctuation as literal input.</span></span> <span data-ttu-id="b77c6-199">Дополнительные сведения о ширине символов и типе японской азбуки см. в разделе Перечисление <xref:System.Globalization.CompareOptions>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-199">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (string inputText, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(string inputText, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(System::String ^ inputText, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognize : string * System.Globalization.CompareOptions -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognizer.EmulateRecognize (inputText, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="b77c6-200">Входная фраза для операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="b77c6-200">The input phrase for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="b77c6-201">Поразрядное сочетание значений перечисления, описывающих тип сравнения, который требуется использовать для эмулируемой операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="b77c6-201">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="b77c6-202">Эмулирует ввод фразы в общий распознаватель речи, используя текст вместо аудио для синхронного распознавания речи, и указывает способ обработки распознавателем сравнения Юникода между фразой и загруженными грамматиками распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-202">Emulates input of a phrase to the shared speech recognizer, using text instead of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.</span></span></summary>
        <returns><span data-ttu-id="b77c6-203">Результат распознавания для операции распознавания или <see langword="null" />, если операция завершилась неудачно или распознавание речи Windows находится в состоянии **Сон**.</span><span class="sxs-lookup"><span data-stu-id="b77c6-203">The recognition result for the recognition operation, or <see langword="null" />, if the operation is not successful or Windows Speech Recognition is in the **Sleeping** state.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-204">Распознаватель использует `compareOptions`, когда он применяет грамматические правила к входной фразе.</span><span class="sxs-lookup"><span data-stu-id="b77c6-204">The recognizer uses the `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="b77c6-205">Распознаватели, поставляемые с Vista и Windows 7, не учитывают регистр, если указано значение <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> или <xref:System.Globalization.CompareOptions.IgnoreCase>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-205">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="b77c6-206">Распознаватели всегда пропускают ширину символов и никогда не пропускают тип японской азбуки.</span><span class="sxs-lookup"><span data-stu-id="b77c6-206">The recognizers always ignore the character width and never ignore the Kana type.</span></span> <span data-ttu-id="b77c6-207">Распознаватели также пропускают новые строки и дополнительные пробелы и обрабатывают знаки препинания в качестве литеральных входных данных.</span><span class="sxs-lookup"><span data-stu-id="b77c6-207">The recognizers also ignore new lines and extra white space and treats punctuation as literal input.</span></span> <span data-ttu-id="b77c6-208">Дополнительные сведения о ширине символов и типе японской азбуки см. в разделе Перечисление <xref:System.Globalization.CompareOptions>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-208">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EmulateRecognizeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b77c6-209">Эмулирует ввод в общий распознаватель речи, используя текст вместо аудио для асинхронного распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-209">Emulates input to the shared speech recognizer, using text instead of audio for asynchronous speech recognition.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-210">Эти методы обходят входные звуковые данные системы.</span><span class="sxs-lookup"><span data-stu-id="b77c6-210">These methods bypass the system audio input.</span></span> <span data-ttu-id="b77c6-211">Это может быть полезно при тестировании или отладке приложения или грамматики.</span><span class="sxs-lookup"><span data-stu-id="b77c6-211">This can be helpful when you are testing or debugging an application or grammar.</span></span>  
  
 <span data-ttu-id="b77c6-212">Общий распознаватель вызывает события <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected>и <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized>, как если бы операция распознавания не была эмуляциа.</span><span class="sxs-lookup"><span data-stu-id="b77c6-212">The shared recognizer raises the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="b77c6-213">Когда распознаватель завершает операцию асинхронного распознавания, он вызывает событие <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-213">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted> event.</span></span> <span data-ttu-id="b77c6-214">Распознаватель игнорирует новые строки и лишние пробелы и рассматривает знаки препинания как литеральные входные данные.</span><span class="sxs-lookup"><span data-stu-id="b77c6-214">The recognizer ignores new lines and extra white space and treats punctuation as literal input.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b77c6-215">Если средство распознавания речи Windows находится в **спящем** режиме, то общий распознаватель не обрабатывает входные данные и не создает <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected> и связанные события, но по-прежнему вызывает событие <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-215">If Windows Speech Recognition is in the **Sleeping** state, then the shared recognizer does not process input and does not raise the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected> and related events, but still raises the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted> event.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b77c6-216">Объект <xref:System.Speech.Recognition.RecognitionResult>, созданный общим распознавателем в ответ на эмулированные входные данные, имеет значение `null` для свойства <xref:System.Speech.Recognition.RecognitionResult.Audio%2A>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-216">The <xref:System.Speech.Recognition.RecognitionResult> object generated by the shared recognizer in response to emulated input has a value of `null` for its <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property.</span></span>  
  
 <span data-ttu-id="b77c6-217">Чтобы эмулировать синхронное распознавание, используйте метод <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-217">To emulate synchronous recognition, use the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (string inputText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(string inputText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EmulateRecognizeAsync (inputText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(System::String ^ inputText);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeAsync : string -&gt; unit" Usage="speechRecognizer.EmulateRecognizeAsync inputText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="b77c6-218">Входные данные для операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="b77c6-218">The input for the recognition operation.</span></span></param>
        <summary><span data-ttu-id="b77c6-219">Эмулирует ввод фразы в общий распознаватель речи, используя текст вместо аудио для асинхронного распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-219">Emulates input of a phrase to the shared speech recognizer, using text instead of audio for asynchronous speech recognition.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-220">Распознаватели, поставляемые с Vista и Windows 7, не учитывают регистр и ширину символов при применении грамматических правил к входной фразе.</span><span class="sxs-lookup"><span data-stu-id="b77c6-220">The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase.</span></span> <span data-ttu-id="b77c6-221">Дополнительные сведения об этом типе сравнения см. в разделе значения перечисления <xref:System.Globalization.CompareOptions> <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> и <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-221">For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> and <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span></span> <span data-ttu-id="b77c6-222">Распознаватели также пропускают новые строки и дополнительные пробелы и обрабатывают знаки препинания в качестве литеральных входных данных.</span><span class="sxs-lookup"><span data-stu-id="b77c6-222">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b77c6-223">Следующий пример является частью консольного приложения, которое загружает грамматику распознавания речи и демонстрирует асинхронную эмуляцию ввода, связанные результаты распознавания и связанные события, вызванные распознавателем речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-223">The following example is part of a console application that loads a speech recognition grammar and demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="b77c6-224">Если средство распознавания речи Windows не запущено, то при запуске этого приложения также будет запущено распознавание речи Windows.</span><span class="sxs-lookup"><span data-stu-id="b77c6-224">If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition.</span></span> <span data-ttu-id="b77c6-225">Если распознавание речи Windows находится в **спящем** режиме, <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> всегда возвращает значение null.</span><span class="sxs-lookup"><span data-stu-id="b77c6-225">If Windows Speech Recognition is in the **Sleeping** state, then <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> always returns null.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace SharedRecognizer  
{  
  class Program  
  {  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Initialize an instance of the shared recognizer.  
      using (SpeechRecognizer recognizer = new SpeechRecognizer())  
      {  
        // Create and load a sample grammar.  
        Grammar testGrammar =  
          new Grammar(new GrammarBuilder("testing testing"));  
        testGrammar.Name = "Test Grammar";  
  
        recognizer.LoadGrammar(testGrammar);  
  
        // Attach event handlers for recognition events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHandler);  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call generates a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing testing");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call does not match the grammar   
        // or generate a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing one two three");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null)  
      {  
        Console.WriteLine("Recognition result = {0}",  
          e.Result.Text ?? "<no text>");  
      }  
      else  
      {  
        Console.WriteLine("No recognition result");  
      }  
    }  
  
    // Handle the EmulateRecognizeCompleted event.   
    static void EmulateRecognizeCompletedHandler(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      if (e.Result == null)  
      {  
        Console.WriteLine("No result generated.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (System.Speech.Recognition.RecognizedWordUnit[] wordUnits, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(class System.Speech.Recognition.RecognizedWordUnit[] wordUnits, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(cli::array &lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ wordUnits, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeAsync : System.Speech.Recognition.RecognizedWordUnit[] * System.Globalization.CompareOptions -&gt; unit" Usage="speechRecognizer.EmulateRecognizeAsync (wordUnits, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wordUnits" Type="System.Speech.Recognition.RecognizedWordUnit[]" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="wordUnits"><span data-ttu-id="b77c6-226">Массив единиц слов, содержащий входные данные для операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="b77c6-226">An array of word units that contains the input for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="b77c6-227">Поразрядное сочетание значений перечисления, описывающих тип сравнения, который требуется использовать для эмулируемой операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="b77c6-227">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="b77c6-228">Эмулирует ввод конкретных слов в общий распознаватель речи, используя текст вместо аудио для асинхронного распознавания речи, и указывает способ обработки распознавателем сравнения Юникода между словами и загруженными грамматиками распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-228">Emulates input of specific words to the shared speech recognizer, using text instead of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-229">Этот метод создает объект <xref:System.Speech.Recognition.RecognitionResult>, используя сведения, указанные в параметре `wordUnits`.</span><span class="sxs-lookup"><span data-stu-id="b77c6-229">This method creates a <xref:System.Speech.Recognition.RecognitionResult> object using the information provided in the `wordUnits` parameter.</span></span>  
  
 <span data-ttu-id="b77c6-230">Распознаватель использует `compareOptions`, когда он применяет грамматические правила к входной фразе.</span><span class="sxs-lookup"><span data-stu-id="b77c6-230">The recognizer uses the `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="b77c6-231">Распознаватели, поставляемые с Vista и Windows 7, не учитывают регистр, если указано значение <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> или <xref:System.Globalization.CompareOptions.IgnoreCase>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-231">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="b77c6-232">Распознаватели всегда пропускают ширину символов и никогда не пропускают тип японской азбуки.</span><span class="sxs-lookup"><span data-stu-id="b77c6-232">The recognizers always ignore the character width and never ignore the Kana type.</span></span> <span data-ttu-id="b77c6-233">Распознаватели также пропускают новые строки и дополнительные пробелы и обрабатывают знаки препинания в качестве литеральных входных данных.</span><span class="sxs-lookup"><span data-stu-id="b77c6-233">The recognizers also ignore new lines and extra white space and treats punctuation as literal input.</span></span> <span data-ttu-id="b77c6-234">Дополнительные сведения о ширине символов и типе японской азбуки см. в разделе Перечисление <xref:System.Globalization.CompareOptions>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-234">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (string inputText, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(string inputText, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(System::String ^ inputText, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeAsync : string * System.Globalization.CompareOptions -&gt; unit" Usage="speechRecognizer.EmulateRecognizeAsync (inputText, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="b77c6-235">Входная фраза для операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="b77c6-235">The input phrase for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="b77c6-236">Поразрядное сочетание значений перечисления, описывающих тип сравнения, который требуется использовать для эмулируемой операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="b77c6-236">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="b77c6-237">Эмулирует ввод фразы в общий распознаватель речи, используя текст вместо аудио для асинхронного распознавания речи, и указывает способ обработки распознавателем сравнения Юникода между фразой и загруженными грамматиками распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-237">Emulates input of a phrase to the shared speech recognizer, using text instead of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-238">Распознаватель использует `compareOptions`, когда он применяет грамматические правила к входной фразе.</span><span class="sxs-lookup"><span data-stu-id="b77c6-238">The recognizer uses the `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="b77c6-239">Распознаватели, поставляемые с Vista и Windows 7, не учитывают регистр, если указано значение <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> или <xref:System.Globalization.CompareOptions.IgnoreCase>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-239">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="b77c6-240">Распознаватели всегда пропускают ширину символов и никогда не пропускают тип японской азбуки.</span><span class="sxs-lookup"><span data-stu-id="b77c6-240">The recognizers always ignore the character width and never ignore the Kana type.</span></span> <span data-ttu-id="b77c6-241">Распознаватели также пропускают новые строки и дополнительные пробелы и обрабатывают знаки препинания в качестве литеральных входных данных.</span><span class="sxs-lookup"><span data-stu-id="b77c6-241">The recognizers also ignore new lines and extra white space and treats punctuation as literal input.</span></span> <span data-ttu-id="b77c6-242">Дополнительные сведения о ширине символов и типе японской азбуки см. в разделе Перечисление <xref:System.Globalization.CompareOptions>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-242">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; EmulateRecognizeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; EmulateRecognizeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event EmulateRecognizeCompleted As EventHandler(Of EmulateRecognizeCompletedEventArgs) " FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::EmulateRecognizeCompletedEventArgs ^&gt; ^ EmulateRecognizeCompleted;" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeCompleted : EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; " Usage="member this.EmulateRecognizeCompleted : System.EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; " />
      <MemberSignature Language="VB.NET" Value="Public Event EmulateRecognizeCompleted As EventHandler(Of EmulateRecognizeCompletedEventArgs) " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b77c6-243">Происходит, когда общий распознаватель завершает асинхронную операцию распознавания для эмулированного ввода.</span><span class="sxs-lookup"><span data-stu-id="b77c6-243">Occurs when the shared recognizer finalizes an asynchronous recognition operation for emulated input.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-244">Каждый метод <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> начинает асинхронную операцию распознавания.</span><span class="sxs-lookup"><span data-stu-id="b77c6-244">Each <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> method begins an asynchronous recognition operation.</span></span> <span data-ttu-id="b77c6-245">Распознаватель вызывает событие `EmulateRecognizeCompleted`, когда завершает асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="b77c6-245">The recognizer raises the `EmulateRecognizeCompleted` event when it finalizes the asynchronous operation.</span></span>  
  
 <span data-ttu-id="b77c6-246">Асинхронная операция распознавания может вызвать события <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected>и <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-246">The asynchronous recognition operation can raise the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> events.</span></span> <span data-ttu-id="b77c6-247">Событие <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted> — это последнее событие, которое распознаватель создает для данной операции.</span><span class="sxs-lookup"><span data-stu-id="b77c6-247">The <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted> event is the last such event that the recognizer raises for a given operation.</span></span>  
  
 <span data-ttu-id="b77c6-248">При создании делегата для события `EmulateRecognizeCompleted` вы определяете метод, который будет обработано событие.</span><span class="sxs-lookup"><span data-stu-id="b77c6-248">When you create a delegate for an `EmulateRecognizeCompleted` event, you identify the method that will handle the event.</span></span> <span data-ttu-id="b77c6-249">Чтобы связать событие с обработчиком событий, нужно добавить в событие экземпляр делегата.</span><span class="sxs-lookup"><span data-stu-id="b77c6-249">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="b77c6-250">Обработчик событий вызывается всякий раз, когда происходит событие, если делегат не удален.</span><span class="sxs-lookup"><span data-stu-id="b77c6-250">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="b77c6-251">Дополнительные сведения о делегатах обработчиков событий см. в разделе [события и делегаты](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="b77c6-251">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b77c6-252">Следующий пример является частью консольного приложения, которое загружает грамматику распознавания речи и демонстрирует асинхронную эмуляцию ввода, связанные результаты распознавания и связанные события, вызванные распознавателем речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-252">The following example is part of a console application that loads a speech recognition grammar and demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="b77c6-253">Если средство распознавания речи Windows не запущено, то при запуске этого приложения также будет запущено распознавание речи Windows.</span><span class="sxs-lookup"><span data-stu-id="b77c6-253">If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition.</span></span> <span data-ttu-id="b77c6-254">Если распознавание речи Windows находится в **спящем** режиме, то <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> всегда возвращает значение null.</span><span class="sxs-lookup"><span data-stu-id="b77c6-254">If Windows Speech Recognition is in the **Sleeping** mode, then <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> always returns null.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace SharedRecognizer  
{  
  class Program  
  {  
    // Indicate whether the asynchronous emulate recognition  
    // operation has completed.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
  
      // Initialize an instance of the shared recognizer.  
      using (SpeechRecognizer recognizer = new SpeechRecognizer())  
      {  
        // Create and load a sample grammar.  
        Grammar testGrammar =  
          new Grammar(new GrammarBuilder("testing testing"));  
        testGrammar.Name = "Test Grammar";  
        recognizer.LoadGrammar(testGrammar);  
  
        // Attach event handlers for recognition events.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=   
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHandler);  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call generates a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing testing");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call does not match the grammar  
        // or generate a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing one two three");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null)  
      {  
        Console.WriteLine("Recognition result = {0}",  
          e.Result.Text ?? "<no text>");  
      }  
      else  
      {  
        Console.WriteLine("No recognition result");  
      }  
    }  
  
    // Handle the EmulateRecognizeCompleted event.  
    static void EmulateRecognizeCompletedHandler(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      if (e.Result == null)  
      {  
        Console.WriteLine("No result generated.");  
      }  
  
      // Indicate the asynchronous operation is complete.  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Speech.Recognition.SpeechRecognizer.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b77c6-255">Получает или задает значение, указывающее, готов ли данный объект <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> к обработке речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-255">Gets or sets a value that indicates whether this <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> object is ready to process speech.</span></span></summary>
        <value><span data-ttu-id="b77c6-256"><see langword="true" /> если этот объект <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> выполняет распознавание речи; в противном случае – значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="b77c6-256"><see langword="true" /> if this <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> object is performing speech recognition; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-257">Изменения этого свойства не влияют на другие экземпляры класса <xref:System.Speech.Recognition.SpeechRecognizer>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-257">Changes to this property do not affect other instances of the <xref:System.Speech.Recognition.SpeechRecognizer> class.</span></span>  
  
 <span data-ttu-id="b77c6-258">По умолчанию значением свойства <xref:System.Speech.Recognition.SpeechRecognizer.Enabled%2A> является `true` для вновь созданного экземпляра <xref:System.Speech.Recognition.SpeechRecognizer>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-258">By default, the value of the <xref:System.Speech.Recognition.SpeechRecognizer.Enabled%2A> property is `true` for a newly instantiated instance of <xref:System.Speech.Recognition.SpeechRecognizer>.</span></span> <span data-ttu-id="b77c6-259">В то время как распознаватель отключен, для операций распознавания не доступны никакие грамматики распознавания речи распознавателя.</span><span class="sxs-lookup"><span data-stu-id="b77c6-259">While the recognizer is disabled, none of the recognizer's speech recognition grammars are available for recognition operations.</span></span> <span data-ttu-id="b77c6-260">Установка свойства <xref:System.Speech.Recognition.SpeechRecognizer.Enabled%2A> распознавателя не влияет на свойство <xref:System.Speech.Recognition.SpeechRecognizer.State%2A> распознавателя.</span><span class="sxs-lookup"><span data-stu-id="b77c6-260">Setting the recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.Enabled%2A> property has no effect on the recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.State%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition" />
      </Docs>
    </Member>
    <Member MemberName="Grammars">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt; Grammars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.Grammar&gt; Grammars" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.Grammars" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Grammars As ReadOnlyCollection(Of Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::Grammar ^&gt; ^ Grammars { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::Grammar ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Grammars : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt;" Usage="System.Speech.Recognition.SpeechRecognizer.Grammars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b77c6-261">Получает коллекцию объектов <see cref="T:System.Speech.Recognition.Grammar" />, загруженных в данных экземпляр <see cref="T:System.Speech.Recognition.SpeechRecognizer" />.</span><span class="sxs-lookup"><span data-stu-id="b77c6-261">Gets a collection of the <see cref="T:System.Speech.Recognition.Grammar" /> objects that are loaded in this <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> instance.</span></span></summary>
        <value><span data-ttu-id="b77c6-262">Коллекция объектов <see cref="T:System.Speech.Recognition.Grammar" />, которые приложению удалось загрузить в текущий экземпляр общего распознаватель.</span><span class="sxs-lookup"><span data-stu-id="b77c6-262">A collection of the <see cref="T:System.Speech.Recognition.Grammar" /> objects that the application loaded into the current instance of the shared recognizer.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-263">Это свойство не возвращает грамматики распознавания речи, загруженные другим приложением.</span><span class="sxs-lookup"><span data-stu-id="b77c6-263">This property does not return any speech recognition grammars loaded by another application.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b77c6-264">В следующем примере информация выводится на консоль для каждой грамматики распознавания речи, загруженной в общий распознаватель речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-264">The following example outputs information to the console for each speech recognition grammar loaded into the shared speech recognizer.</span></span>  
  
```csharp  
  
using System;  
using System.Collections.Generic;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace SharedRecognizer  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognizer recognizer = new SpeechRecognizer())  
      {  
        Grammar sampleGrammar = new Grammar(new GrammarBuilder("sample phrase"));  
        sampleGrammar.Name = "Sample Grammar";  
        recognizer.LoadGrammar(sampleGrammar);  
  
        OutputGrammarList(recognizer);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void OutputGrammarList(SpeechRecognizer recognizer)  
    {  
      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
      if (grammars.Count > 0)  
      {  
        Console.WriteLine("Loaded grammars:");  
        foreach (Grammar g in grammars)  
        {  
          Console.WriteLine("  Grammar: {0}",  
            (g.Name != null) ? g.Name : "<no name>");  
        }  
      }  
      else  
      {  
        Console.WriteLine("No grammars loaded.");  
      }  
    }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammar">
      <MemberSignature Language="C#" Value="public void LoadGrammar (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadGrammar(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammar(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadGrammar(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberSignature Language="F#" Value="member this.LoadGrammar : System.Speech.Recognition.Grammar -&gt; unit" Usage="speechRecognizer.LoadGrammar grammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar"><span data-ttu-id="b77c6-265">Грамматика распознавания речи для загрузки.</span><span class="sxs-lookup"><span data-stu-id="b77c6-265">The speech recognition grammar to load.</span></span></param>
        <summary><span data-ttu-id="b77c6-266">Загружает грамматику распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-266">Loads a speech recognition grammar.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-267">Общий распознаватель создает исключение, если Грамматика распознавания речи уже загружена, асинхронно загружена или не может быть загружена в любой распознаватель.</span><span class="sxs-lookup"><span data-stu-id="b77c6-267">The shared recognizer throws an exception if the speech recognition grammar is already loaded, is being asynchronously loaded, or has failed to load into any recognizer.</span></span> <span data-ttu-id="b77c6-268">Если распознаватель запущен, приложения должны использовать <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> для приостановки модуля распознавания речи перед загрузкой, выгрузкой, включением или отключением грамматики.</span><span class="sxs-lookup"><span data-stu-id="b77c6-268">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="b77c6-269">Для асинхронной загрузки грамматики распознавания речи используйте метод <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-269">To load a speech recognition grammar asynchronously, use the <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b77c6-270">Следующий пример является частью консольного приложения, которое загружает грамматику распознавания речи и демонстрирует асинхронную эмуляцию ввода, связанные результаты распознавания и связанные события, вызванные распознавателем речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-270">The following example is part of a console application that loads a speech recognition grammar and demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="b77c6-271">Если средство распознавания речи Windows не запущено, то при запуске этого приложения также будет запущено распознавание речи Windows.</span><span class="sxs-lookup"><span data-stu-id="b77c6-271">If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition.</span></span> <span data-ttu-id="b77c6-272">Если распознавание речи Windows находится в **спящем** режиме, <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> всегда возвращает значение null.</span><span class="sxs-lookup"><span data-stu-id="b77c6-272">If Windows Speech Recognition is in the **Sleeping** state, then <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> always returns null.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace SharedRecognizer  
{  
  class Program  
  {  
    // Indicate whether the asynchronous emulate recognition  
    // operation has completed.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Initialize an instance of the shared recognizer.  
      using (SpeechRecognizer recognizer = new SpeechRecognizer())  
      {  
        // Create and load a sample grammar.  
        Grammar testGrammar =  
          new Grammar(new GrammarBuilder("testing testing"));  
        testGrammar.Name = "Test Grammar";  
  
        recognizer.LoadGrammar(testGrammar);  
  
        // Attach event handlers for recognition events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHandler);  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call generates a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing testing");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call does not match the grammar   
        // or generate a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing one two three");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null)  
      {  
        Console.WriteLine("Recognition result = {0}",  
          e.Result.Text ?? "<no text>");  
      }  
      else  
      {  
        Console.WriteLine("No recognition result");  
      }  
    }   
  
    // Handle the EmulateRecognizeCompleted event.   
    static void EmulateRecognizeCompletedHandler(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      if (e.Result == null)  
      {  
        Console.WriteLine("No result generated.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammarAsync">
      <MemberSignature Language="C#" Value="public void LoadGrammarAsync (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadGrammarAsync(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadGrammarAsync(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberSignature Language="F#" Value="member this.LoadGrammarAsync : System.Speech.Recognition.Grammar -&gt; unit" Usage="speechRecognizer.LoadGrammarAsync grammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar"><span data-ttu-id="b77c6-273">Грамматика распознавания речи для загрузки.</span><span class="sxs-lookup"><span data-stu-id="b77c6-273">The speech recognition grammar to load.</span></span></param>
        <summary><span data-ttu-id="b77c6-274">Выполняет асинхронную загрузку грамматики распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-274">Asynchronously loads a speech recognition grammar.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-275">Когда распознаватель завершает эту асинхронную операцию, он вызывает событие <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-275">When the recognizer completes this asynchronous operation, it raises a <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted> event.</span></span> <span data-ttu-id="b77c6-276">Распознаватель создает исключение, если Грамматика распознавания речи уже загружена, асинхронно загружена или не может быть загружена в любой распознаватель.</span><span class="sxs-lookup"><span data-stu-id="b77c6-276">The recognizer throws an exception if the speech recognition grammar is already loaded, is being asynchronously loaded, or has failed to load into any recognizer.</span></span> <span data-ttu-id="b77c6-277">Если распознаватель запущен, приложения должны использовать <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> для приостановки модуля распознавания речи перед загрузкой, выгрузкой, включением или отключением грамматики.</span><span class="sxs-lookup"><span data-stu-id="b77c6-277">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="b77c6-278">Для синхронной загрузки грамматики распознавания речи используйте метод <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammar%2A>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-278">To load a speech recognition grammar synchronously, use the <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammar%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammarCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; LoadGrammarCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; LoadGrammarCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LoadGrammarCompleted As EventHandler(Of LoadGrammarCompletedEventArgs) " FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::LoadGrammarCompletedEventArgs ^&gt; ^ LoadGrammarCompleted;" />
      <MemberSignature Language="F#" Value="member this.LoadGrammarCompleted : EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; " Usage="member this.LoadGrammarCompleted : System.EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; " />
      <MemberSignature Language="VB.NET" Value="Public Event LoadGrammarCompleted As EventHandler(Of LoadGrammarCompletedEventArgs) " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b77c6-279">Происходит при завершении асинхронной загрузки грамматики распознавания речи средством распознавания.</span><span class="sxs-lookup"><span data-stu-id="b77c6-279">Occurs when the recognizer finishes the asynchronous loading of a speech recognition grammar.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-280">Метод <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync%2A> распознавателя инициирует асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="b77c6-280">The recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync%2A> method initiates an asynchronous operation.</span></span> <span data-ttu-id="b77c6-281">Распознаватель вызывает событие `LoadGrammarCompleted` при завершении операции.</span><span class="sxs-lookup"><span data-stu-id="b77c6-281">The recognizer raises the `LoadGrammarCompleted` event when it completes the operation.</span></span> <span data-ttu-id="b77c6-282">Чтобы получить объект <xref:System.Speech.Recognition.Grammar>, загруженный распознавателем, используйте свойство <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A> связанного <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-282">To get the <xref:System.Speech.Recognition.Grammar> object that the recognizer loaded, use the <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A> property of the associated <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs>.</span></span> <span data-ttu-id="b77c6-283">Чтобы получить текущие <xref:System.Speech.Recognition.Grammar> объекты, загруженные распознавательм, используйте свойство <xref:System.Speech.Recognition.SpeechRecognizer.Grammars%2A> распознавателя.</span><span class="sxs-lookup"><span data-stu-id="b77c6-283">To get the current <xref:System.Speech.Recognition.Grammar> objects the recognizer has loaded, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.Grammars%2A> property.</span></span>  
  
 <span data-ttu-id="b77c6-284">При создании делегата для `LoadGrammarCompleted` события определяется метод, который будет выполнять обработку события.</span><span class="sxs-lookup"><span data-stu-id="b77c6-284">When you create a delegate for a `LoadGrammarCompleted` event, you identify the method that will handle the event.</span></span> <span data-ttu-id="b77c6-285">Чтобы связать событие с обработчиком событий, нужно добавить в событие экземпляр делегата.</span><span class="sxs-lookup"><span data-stu-id="b77c6-285">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="b77c6-286">Обработчик событий вызывается всякий раз, когда происходит событие, если делегат не удален.</span><span class="sxs-lookup"><span data-stu-id="b77c6-286">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="b77c6-287">Дополнительные сведения о делегатах обработчиков событий см. в разделе [события и делегаты](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="b77c6-287">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b77c6-288">В следующем примере создается общий распознаватель речи, а затем создаются два типа грамматики для распознавания конкретных слов и для принятия бесплатной диктовки.</span><span class="sxs-lookup"><span data-stu-id="b77c6-288">The following example creates a shared speech recognizer, and then creates two types of grammars for recognizing specific words and for accepting free dictation.</span></span> <span data-ttu-id="b77c6-289">В примере асинхронно загружается все созданные грамматики в распознаватель.</span><span class="sxs-lookup"><span data-stu-id="b77c6-289">The example asynchronously loads all the created grammars to the recognizer.</span></span> <span data-ttu-id="b77c6-290">Обработчики для <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted> и <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> событий распознавателя записывают в консоль имя грамматики, которая использовалась для распознавания и текста результата распознавания соответственно.</span><span class="sxs-lookup"><span data-stu-id="b77c6-290">Handlers for the recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted> and <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> events write to the console the name of the grammar that was used to perform the recognition and the text of the recognition result, respectively.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognizer recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize a shared speech recognition engine.  
      recognizer = new SpeechRecognizer();  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Add a handler for the StateChanged event.  
        recognizer.StateChanged +=  
          new EventHandler<StateChangedEventArgs>(recognizer_StateChanged);  
  
        // Create "yesno" grammar.  
        Choices yesChoices = new Choices(new string[] { "yes", "yup", "yeah}" });  
        SemanticResultValue yesValue =  
            new SemanticResultValue(yesChoices, (bool)true);  
        Choices noChoices = new Choices(new string[] { "no", "nope", "neah" });  
        SemanticResultValue noValue =  
            new SemanticResultValue(noChoices, (bool)false);  
        SemanticResultKey yesNoKey =  
            new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
        Grammar yesnoGrammar = new Grammar(yesNoKey);  
        yesnoGrammar.Name = "yesNo";  
  
        // Create "done" grammar.  
        Grammar doneGrammar =  
          new Grammar(new Choices(new string[] { "done", "exit", "quit", "stop" }));  
        doneGrammar.Name = "Done";  
  
        // Create dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation";  
  
        // Load grammars to the recognizer.  
        recognizer.LoadGrammarAsync(yesnoGrammar);  
        recognizer.LoadGrammarAsync(doneGrammar);  
        recognizer.LoadGrammarAsync(dictation);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Grammar({0}): {1}", e.Result.Grammar.Name, e.Result.Text);  
  
      // Add event handler code here.  
    }  
  
    // Handle the LoadGrammarCompleted event.   
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      string grammarName = e.Grammar.Name;  
      bool grammarLoaded = e.Grammar.Loaded;  
  
      if (e.Error != null)  
      {  
        Console.WriteLine("LoadGrammar for {0} failed with a {1}.",  
        grammarName, e.Error.GetType().Name);  
  
        // Add exception handling code here.  
      }  
  
      Console.WriteLine("Grammar {0} {1} loaded.",  
      grammarName, (grammarLoaded) ? "is" : "is not");  
    }  
  
    // Put the shared speech recognizer into "listening" mode.   
    static void recognizer_StateChanged(object sender, StateChangedEventArgs e)  
    {  
      if (e.RecognizerState != RecognizerState.Stopped)  
      {  
        recognizer.EmulateRecognizeAsync("Start listening");  
      }  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.LoadGrammarCompletedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.Grammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="MaxAlternates">
      <MemberSignature Language="C#" Value="public int MaxAlternates { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxAlternates" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.MaxAlternates" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxAlternates As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxAlternates { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxAlternates : int with get, set" Usage="System.Speech.Recognition.SpeechRecognizer.MaxAlternates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b77c6-291">Получает или задает максимальное количество альтернативных результатов распознавания, которые общий распознаватель возвращает для каждой операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="b77c6-291">Gets or sets the maximum number of alternate recognition results that the shared recognizer returns for each recognition operation.</span></span></summary>
        <value><span data-ttu-id="b77c6-292">Максимальное количество альтернативных результатов, которые возвращает распознаватель речи для каждой операции распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-292">The maximum number of alternate results that the speech recognizer returns for each recognition operation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-293">Свойство <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> класса <xref:System.Speech.Recognition.RecognitionResult> содержит коллекцию объектов <xref:System.Speech.Recognition.RecognizedPhrase>, которые представляют другие интерпретации кандидатов входных данных.</span><span class="sxs-lookup"><span data-stu-id="b77c6-293">The <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> property of the <xref:System.Speech.Recognition.RecognitionResult> class contains the collection of <xref:System.Speech.Recognition.RecognizedPhrase> objects that represent other candidate interpretations of the input.</span></span>  
  
 <span data-ttu-id="b77c6-294">Значение по умолчанию для <xref:System.Speech.Recognition.SpeechRecognizer.MaxAlternates%2A> равно 10.</span><span class="sxs-lookup"><span data-stu-id="b77c6-294">The default value for <xref:System.Speech.Recognition.SpeechRecognizer.MaxAlternates%2A> is 10.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="PauseRecognizerOnRecognition">
      <MemberSignature Language="C#" Value="public bool PauseRecognizerOnRecognition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PauseRecognizerOnRecognition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition" />
      <MemberSignature Language="VB.NET" Value="Public Property PauseRecognizerOnRecognition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PauseRecognizerOnRecognition { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.PauseRecognizerOnRecognition : bool with get, set" Usage="System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b77c6-295">Получает или задает значение, указывающее, должен ли общий распознаватель приостанавливать операции распознавания, пока приложение обрабатывает событие <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />.</span><span class="sxs-lookup"><span data-stu-id="b77c6-295">Gets or sets a value that indicates whether the shared recognizer pauses recognition operations while an application is handling a <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" /> event.</span></span></summary>
        <value><span data-ttu-id="b77c6-296"><see langword="true" />, если общий распознаватель ожидает обработки ввода, когда какое-либо приложение обрабатывает событие <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />; в противном случае – значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="b77c6-296"><see langword="true" /> if the shared recognizer waits to process input while any application is handling the <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" /> event; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-297">Присвойте этому свойству значение `true`, если в обработчике событий <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> приложение должно изменить состояние службы распознавания речи или изменить загруженные или включенные грамматики распознавания речи, прежде чем служба распознавания речи будет обрабатывать больше входной.</span><span class="sxs-lookup"><span data-stu-id="b77c6-297">Set this property to `true`, if within the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event handler your application needs to change the state of the speech recognition service or change the loaded or enabled speech recognition grammars before the speech recognition service processes more input.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b77c6-298">Присвоение свойству <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> значения `true` приводит к тому, что каждый обработчик событий <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> в каждом приложении блокирует службу распознавания речи Windows.</span><span class="sxs-lookup"><span data-stu-id="b77c6-298">Setting the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> property to `true` causes each <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event handler in every application to block the Windows speech recognition service.</span></span>  
  
 <span data-ttu-id="b77c6-299">Чтобы синхронизировать изменения в общем распознавателе с состоянием приложения, используйте метод <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-299">To synchronize the changes to the shared recognizer with your application state, use the <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> method.</span></span>  
  
 <span data-ttu-id="b77c6-300">Если <xref:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition%2A> `true`, то во время выполнения обработчика <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> служба распознавания речи приостанавливает и помещает в буфер новый ввод звука по мере поступления.</span><span class="sxs-lookup"><span data-stu-id="b77c6-300">When <xref:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition%2A> is `true`, during the execution of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> handler the speech recognition service pauses and buffers new audio input as it arrives.</span></span> <span data-ttu-id="b77c6-301">После завершения работы обработчика <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> событий служба распознавания речи возобновляет распознавание и начинает обработку информации из входного буфера.</span><span class="sxs-lookup"><span data-stu-id="b77c6-301">Once the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event handler exits, the speech recognition service resumes recognition and starts processing information from its input buffer.</span></span>  
  
 <span data-ttu-id="b77c6-302">Чтобы включить или отключить службу распознавания речи, используйте свойство <xref:System.Speech.Recognition.SpeechRecognizer.Enabled%2A>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-302">To enable or disable the speech recognition service, use the <xref:System.Speech.Recognition.SpeechRecognizer.Enabled%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerAudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan RecognizerAudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan RecognizerAudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecognizerAudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan RecognizerAudioPosition { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.RecognizerAudioPosition : TimeSpan" Usage="System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b77c6-303">Получает текущую позицию распознавателя в обрабатываемых им входных аудиоданных.</span><span class="sxs-lookup"><span data-stu-id="b77c6-303">Gets the current location of the recognizer in the audio input that it is processing.</span></span></summary>
        <value><span data-ttu-id="b77c6-304">Позиция распознавателя в обрабатываемых входных звуковых данных.</span><span class="sxs-lookup"><span data-stu-id="b77c6-304">The position of the recognizer in the audio input that it is processing.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-305">Свойство `RecognizerAudioPosition` ссылается на расположение распознавателя при обработке звуковых входных данных.</span><span class="sxs-lookup"><span data-stu-id="b77c6-305">The `RecognizerAudioPosition` property references the recognizer's position in processing its audio input.</span></span> <span data-ttu-id="b77c6-306">Напротив, свойство <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> ссылается на расположение устройства ввода в созданном звуковом потоке.</span><span class="sxs-lookup"><span data-stu-id="b77c6-306">By contrast, the <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> property references the input device's position in its generated audio stream.</span></span> <span data-ttu-id="b77c6-307">Эти позиции могут отличаться.</span><span class="sxs-lookup"><span data-stu-id="b77c6-307">These positions can be different.</span></span> <span data-ttu-id="b77c6-308">Например, если распознаватель получил входные данные, для которых он еще не создал результат распознавания, значение свойства <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> меньше значения свойства <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-308">For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> property is less than the value of the <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerInfo">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognizerInfo RecognizerInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.RecognizerInfo RecognizerInfo" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.RecognizerInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecognizerInfo As RecognizerInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::RecognizerInfo ^ RecognizerInfo { System::Speech::Recognition::RecognizerInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RecognizerInfo : System.Speech.Recognition.RecognizerInfo" Usage="System.Speech.Recognition.SpeechRecognizer.RecognizerInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognizerInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b77c6-309">Получает сведения об общем распознавателе речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-309">Gets information about the shared speech recognizer.</span></span></summary>
        <value><span data-ttu-id="b77c6-310">Сведения об общем распознавателе речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-310">Information about the shared speech recognizer.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-311">Это свойство возвращает сведения о распознавателе речи, используемом программой распознавания речи Windows.</span><span class="sxs-lookup"><span data-stu-id="b77c6-311">This property returns information about the speech recognizer in use by Windows Speech Recognition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b77c6-312">В следующем примере сведения об общем распознавателе отправляются в консоль.</span><span class="sxs-lookup"><span data-stu-id="b77c6-312">The following example sends information about the shared recognizer to the console.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SharedRecognizer  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognizer recognizer = new SpeechRecognizer())  
      {  
        Console.WriteLine("Recognizer information for the shared recognizer:");  
        Console.WriteLine("  Name: {0}", recognizer.RecognizerInfo.Name);  
        Console.WriteLine("  Culture: {0}", recognizer.RecognizerInfo.Culture.ToString());  
        Console.WriteLine("  Description: {0}", recognizer.RecognizerInfo.Description);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizerInfo" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.State" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerUpdateReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; RecognizerUpdateReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; RecognizerUpdateReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RecognizerUpdateReached As EventHandler(Of RecognizerUpdateReachedEventArgs) " FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::RecognizerUpdateReachedEventArgs ^&gt; ^ RecognizerUpdateReached;" />
      <MemberSignature Language="F#" Value="member this.RecognizerUpdateReached : EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; " Usage="member this.RecognizerUpdateReached : System.EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; " />
      <MemberSignature Language="VB.NET" Value="Public Event RecognizerUpdateReached As EventHandler(Of RecognizerUpdateReachedEventArgs) " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b77c6-313">Происходит при приостановке работы распознавателя с целью синхронизировать распознавание и другие операции.</span><span class="sxs-lookup"><span data-stu-id="b77c6-313">Occurs when the recognizer pauses to synchronize recognition and other operations.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-314">Приложения должны использовать <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A>, чтобы приостановить работающий экземпляр <xref:System.Speech.Recognition.SpeechRecognizer> перед изменением его <xref:System.Speech.Recognition.Grammar> объектов.</span><span class="sxs-lookup"><span data-stu-id="b77c6-314">Applications must use <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> to pause a running instance of <xref:System.Speech.Recognition.SpeechRecognizer> before modifying its <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="b77c6-315">Например, когда <xref:System.Speech.Recognition.SpeechRecognizer> приостанавливается, можно загружать, выгружать, включать и отключать <xref:System.Speech.Recognition.Grammar> объекты.</span><span class="sxs-lookup"><span data-stu-id="b77c6-315">For example, while the <xref:System.Speech.Recognition.SpeechRecognizer> is paused, you can load, unload, enable, and disable <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="b77c6-316"><xref:System.Speech.Recognition.SpeechRecognizer> вызывает это событие, когда оно готово к принятию изменений.</span><span class="sxs-lookup"><span data-stu-id="b77c6-316">The <xref:System.Speech.Recognition.SpeechRecognizer> raises this event when it is ready to accept modifications.</span></span>  
  
 <span data-ttu-id="b77c6-317">При создании делегата для <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> события определяется метод, который будет выполнять обработку события.</span><span class="sxs-lookup"><span data-stu-id="b77c6-317">When you create a delegate for a <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event, you identify the method that will handle the event.</span></span> <span data-ttu-id="b77c6-318">Чтобы связать событие с обработчиком событий, нужно добавить в событие экземпляр делегата.</span><span class="sxs-lookup"><span data-stu-id="b77c6-318">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="b77c6-319">Обработчик событий вызывается всякий раз, когда происходит событие, если делегат не удален.</span><span class="sxs-lookup"><span data-stu-id="b77c6-319">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="b77c6-320">Дополнительные сведения о делегатах обработчиков событий см. в разделе [события и делегаты](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="b77c6-320">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b77c6-321">В следующем примере показано консольное приложение для загрузки и выгрузки <xref:System.Speech.Recognition.Grammar> объектов.</span><span class="sxs-lookup"><span data-stu-id="b77c6-321">The following example shows a console application that loads and unloads <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="b77c6-322">Приложение использует метод <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A>, чтобы запросить приостановку обработчика распознавания речи, чтобы он мог получить обновление.</span><span class="sxs-lookup"><span data-stu-id="b77c6-322">The application uses the <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> method to request the speech recognition engine to pause so it can receive an update.</span></span> <span data-ttu-id="b77c6-323">Затем приложение загружает или выгружает объект <xref:System.Speech.Recognition.Grammar>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-323">The application then loads or unloads a <xref:System.Speech.Recognition.Grammar> object.</span></span>  
  
 <span data-ttu-id="b77c6-324">При каждом обновлении обработчик события <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> записывает имя и состояние загруженных в данный момент <xref:System.Speech.Recognition.Grammar> объектов в консоль.</span><span class="sxs-lookup"><span data-stu-id="b77c6-324">At each update, a handler for <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event writes the name and status of the currently loaded <xref:System.Speech.Recognition.Grammar> objects to the console.</span></span> <span data-ttu-id="b77c6-325">По мере загрузки и выгрузки грамматики приложение сначала распознает имена животных фермы, а затем имена животных и имена фруктам, а затем только имена фруктам.</span><span class="sxs-lookup"><span data-stu-id="b77c6-325">As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
using System.Collections.Generic;  
using System.Threading;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognizer recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize a shared speech recognition engine.  
      recognizer = new SpeechRecognizer();  
  
      // Create the first grammar - Farm.  
      Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
      GrammarBuilder farm = new GrammarBuilder(animals);  
      Grammar farmAnimals = new Grammar(farm);  
      farmAnimals.Name = "Farm";  
  
      // Create the second grammar - Fruit.  
      Choices fruit = new Choices(new string[] { "apples", "peaches", "oranges" });  
      GrammarBuilder favorite = new GrammarBuilder(fruit);  
      Grammar favoriteFruit = new Grammar(favorite);  
      favoriteFruit.Name = "Fruit";  
  
      // Attach event handlers.  
      recognizer.SpeechRecognized +=  
        new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
      recognizer.RecognizerUpdateReached +=  
        new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  
      recognizer.StateChanged +=   
        new EventHandler<StateChangedEventArgs>(recognizer_StateChanged);  
  
      // Load the Farm grammar.  
      recognizer.LoadGrammar(farmAnimals);  
      Console.WriteLine("Grammar Farm is loaded");  
  
      // Pause to recognize farm animals.  
      Thread.Sleep(7000);  
      Console.WriteLine();  
  
      // Request an update and load the Fruit grammar.  
      recognizer.RequestRecognizerUpdate();  
      recognizer.LoadGrammarAsync(favoriteFruit);  
      Thread.Sleep(5000);  
  
      // Request an update and unload the Farm grammar.  
      recognizer.RequestRecognizerUpdate();  
      recognizer.UnloadGrammar(farmAnimals);  
      Thread.Sleep(5000);  
  
      // Keep the console window open.  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Put the shared speech recognizer into "listening" mode.  
    static void recognizer_StateChanged(object sender, StateChangedEventArgs e)  
    {  
      if (e.RecognizerState != RecognizerState.Stopped)  
      {  
        recognizer.EmulateRecognizeAsync("Start listening");  
      }  
    }  
  
    // At the update, get the names and enabled status of the currently loaded grammars.  
    public static void recognizer_RecognizerUpdateReached(  
      object sender, RecognizerUpdateReachedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Update reached:");  
      Thread.Sleep(1000);  
  
      string qualifier;  
      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
      foreach (Grammar g in grammars)  
      {  
        qualifier = (g.Enabled) ? "enabled" : "disabled";  
        Console.WriteLine("  Grammar {0} is loaded and is {1}.",  
        g.Name, qualifier);  
      }  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />
        <altmember cref="T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RequestRecognizerUpdate">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b77c6-326">Запрашивает, чтобы общий распознаватель приостановился и обновил свое состояние.</span><span class="sxs-lookup"><span data-stu-id="b77c6-326">Requests that the shared recognizer pause and update its state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-327">Этот метод используется для синхронизации изменений в общем распознавателе.</span><span class="sxs-lookup"><span data-stu-id="b77c6-327">Use this method to synchronize changes to the shared recognizer.</span></span> <span data-ttu-id="b77c6-328">Например, если вы загружаете или выгружаете грамматику распознавания речи во время обработки входных данных распознавателем, используйте этот метод и <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> событие для синхронизации поведения приложения с состоянием распознавателя.</span><span class="sxs-lookup"><span data-stu-id="b77c6-328">For example, if you load or unload a speech recognition grammar while the recognizer is processing input, use this method and the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event to synchronize your application behavior with the state of the recognizer.</span></span>  
  
 <span data-ttu-id="b77c6-329">При вызове этого метода распознаватель приостанавливает или завершает асинхронные операции и создает событие <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-329">When this method is called, the recognizer pauses or completes asynchronous operations and generates a <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event.</span></span> <span data-ttu-id="b77c6-330">Обработчик событий <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> может изменить состояние распознавателя в между операциями распознавания.</span><span class="sxs-lookup"><span data-stu-id="b77c6-330">A <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event handler can then modify the state of the recognizer in between recognition operations.</span></span>  
  
 <span data-ttu-id="b77c6-331">При вызове этого метода:</span><span class="sxs-lookup"><span data-stu-id="b77c6-331">When this method is called:</span></span>  
  
-   <span data-ttu-id="b77c6-332">Если распознаватель не обрабатывает входные данные, распознаватель немедленно создает событие <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-332">If the recognizer is not processing input, the recognizer immediately generates the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event.</span></span>  
  
-   <span data-ttu-id="b77c6-333">Если распознаватель обрабатывает входные данные, состоящие из тишины или фонового шума, распознаватель приостанавливает операцию распознавания и создает событие <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-333">If the recognizer is processing input that consists of silence or background noise, the recognizer pauses the recognition operation and generates the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event.</span></span>  
  
-   <span data-ttu-id="b77c6-334">Если распознаватель обрабатывает входные данные, не состоящие из тишины или фонового шума, распознаватель завершает операцию распознавания, а затем создает событие <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-334">If the recognizer is processing input that does not consist of silence or background noise, the recognizer completes the recognition operation and then generates the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event.</span></span>  
  
 <span data-ttu-id="b77c6-335">В то время как распознаватель обрабатывает событие <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached>:</span><span class="sxs-lookup"><span data-stu-id="b77c6-335">While the recognizer is handling the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event:</span></span>  
  
-   <span data-ttu-id="b77c6-336">Распознаватель не обрабатывает входные данные, и значение свойства <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> остается неизменным.</span><span class="sxs-lookup"><span data-stu-id="b77c6-336">The recognizer does not process input, and the value of the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> property remains the same.</span></span>  
  
-   <span data-ttu-id="b77c6-337">Распознаватель продолжит получать входные данные, а значение свойства <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> может измениться.</span><span class="sxs-lookup"><span data-stu-id="b77c6-337">The recognizer continues to collect input, and the value of the <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> property can change.</span></span>  
  
 <span data-ttu-id="b77c6-338">Чтобы изменить, приостанавливает ли общий распознаватель операции распознавания, пока приложение обрабатывает событие <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized>, используйте свойство <xref:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition%2A>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-338">To change whether the shared recognizer pauses recognition operations while an application is handling a <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> event, use the <xref:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b77c6-339">В следующем примере показано консольное приложение для загрузки и выгрузки <xref:System.Speech.Recognition.Grammar> объектов.</span><span class="sxs-lookup"><span data-stu-id="b77c6-339">The following example shows a console application that loads and unloads <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="b77c6-340">Приложение использует метод <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A>, чтобы запросить приостановку обработчика распознавания речи, чтобы он мог получить обновление.</span><span class="sxs-lookup"><span data-stu-id="b77c6-340">The application uses the <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> method to request the speech recognition engine to pause so it can receive an update.</span></span> <span data-ttu-id="b77c6-341">Затем приложение загружает или выгружает объект <xref:System.Speech.Recognition.Grammar>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-341">The application then loads or unloads a <xref:System.Speech.Recognition.Grammar> object.</span></span>  
  
 <span data-ttu-id="b77c6-342">При каждом обновлении обработчик события <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> записывает имя и состояние загруженных в данный момент <xref:System.Speech.Recognition.Grammar> объектов в консоль.</span><span class="sxs-lookup"><span data-stu-id="b77c6-342">At each update, a handler for <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event writes the name and status of the currently loaded <xref:System.Speech.Recognition.Grammar> objects to the console.</span></span> <span data-ttu-id="b77c6-343">По мере загрузки и выгрузки грамматики приложение сначала распознает имена животных фермы, а затем имена животных и имена фруктам, а затем только имена фруктам.</span><span class="sxs-lookup"><span data-stu-id="b77c6-343">As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
using System.Collections.Generic;  
using System.Threading;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognizer recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and configure its input.  
      recognizer = new SpeechRecognizer();  
  
      // Create the first grammar - Farm.  
      Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
      GrammarBuilder farm = new GrammarBuilder(animals);  
      Grammar farmAnimals = new Grammar(farm);  
      farmAnimals.Name = "Farm";  
  
      // Create the second grammar - Fruit.  
      Choices fruit = new Choices(new string[] { "apples", "peaches", "oranges" });  
      GrammarBuilder favorite = new GrammarBuilder(fruit);  
      Grammar favoriteFruit = new Grammar(favorite);  
      favoriteFruit.Name = "Fruit";  
  
      // Attach event handlers.  
      recognizer.SpeechRecognized +=  
        new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
      recognizer.RecognizerUpdateReached +=  
        new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  
  
      // Check to see if recognizer is loaded, wait if it is not loaded.  
      if (recognizer.State != RecognizerState.Listening)  
      {  
        Thread.Sleep(5000);  
  
        // Put recognizer in listening state.  
        recognizer.EmulateRecognizeAsync("Start listening");  
      }  
  
      // Load the Farm grammar.  
      recognizer.LoadGrammar(farmAnimals);  
      Console.WriteLine("Grammar Farm is loaded");  
  
      // Pause to recognize farm animals.  
      Thread.Sleep(7000);  
      Console.WriteLine();  
  
      // Request an update and load the Fruit grammar.  
      recognizer.RequestRecognizerUpdate();  
      recognizer.LoadGrammarAsync(favoriteFruit);  
      Thread.Sleep(5000);  
  
      // Request an update and unload the Farm grammar.  
      recognizer.RequestRecognizerUpdate();  
      recognizer.UnloadGrammar(farmAnimals);  
      Thread.Sleep(5000);  
  
      // Keep the console window open.  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    public static void recognizer_RecognizerUpdateReached(object sender, RecognizerUpdateReachedEventArgs e)  
    {  
      // At the update, get the names and enabled status of the currently loaded grammars.  
      Console.WriteLine();  
      Console.WriteLine("Update reached:");  
      Thread.Sleep(1000);  
      string qualifier;  
      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
      foreach (Grammar g in grammars)  
      {  
        qualifier = (g.Enabled) ? "enabled" : "disabled";  
        Console.WriteLine("  Grammar {0} is loaded and is {1}.",  
        g.Name, qualifier);  
      }  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached" />
      </Docs>
    </MemberGroup>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate();" />
      <MemberSignature Language="F#" Value="member this.RequestRecognizerUpdate : unit -&gt; unit" Usage="speechRecognizer.RequestRecognizerUpdate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b77c6-344">Запрашивает, чтобы общий распознаватель приостановился и обновил свое состояние.</span><span class="sxs-lookup"><span data-stu-id="b77c6-344">Requests that the shared recognizer pause and update its state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-345">Когда распознаватель создает событие <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached>, свойство <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> `null`.</span><span class="sxs-lookup"><span data-stu-id="b77c6-345">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> is `null`.</span></span>  
  
 <span data-ttu-id="b77c6-346">Чтобы предоставить маркер пользователя, используйте метод <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> или <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-346">To provide a user token, use the <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> or <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> method.</span></span> <span data-ttu-id="b77c6-347">Чтобы указать смещение позиции звука, используйте метод <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-347">To specify an audio position offset, use the <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate (object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate(object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate (userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate(System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.RequestRecognizerUpdate : obj -&gt; unit" Usage="speechRecognizer.RequestRecognizerUpdate userToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userToken"><span data-ttu-id="b77c6-348">Пользовательский объект, содержащий сведения для данной операции.</span><span class="sxs-lookup"><span data-stu-id="b77c6-348">User-defined information that contains information for the operation.</span></span></param>
        <summary><span data-ttu-id="b77c6-349">Запрашивает, чтобы общий распознаватель приостановился и обновил состояние и предоставил токен пользователя для связанного события.</span><span class="sxs-lookup"><span data-stu-id="b77c6-349">Requests that the shared recognizer pause and update its state and provides a user token for the associated event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-350">Когда распознаватель создает событие <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached>, свойство <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> содержит значение параметра `userToken`.</span><span class="sxs-lookup"><span data-stu-id="b77c6-350">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contains the value of the `userToken` parameter.</span></span>  
  
 <span data-ttu-id="b77c6-351">Чтобы указать смещение позиции звука, используйте метод <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-351">To specify an audio position offset, use the <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate (object userToken, TimeSpan audioPositionAheadToRaiseUpdate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate(object userToken, valuetype System.TimeSpan audioPositionAheadToRaiseUpdate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate (userToken As Object, audioPositionAheadToRaiseUpdate As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate(System::Object ^ userToken, TimeSpan audioPositionAheadToRaiseUpdate);" />
      <MemberSignature Language="F#" Value="member this.RequestRecognizerUpdate : obj * TimeSpan -&gt; unit" Usage="speechRecognizer.RequestRecognizerUpdate (userToken, audioPositionAheadToRaiseUpdate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userToken" Type="System.Object" />
        <Parameter Name="audioPositionAheadToRaiseUpdate" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="userToken"><span data-ttu-id="b77c6-352">Пользовательский объект, содержащий сведения для данной операции.</span><span class="sxs-lookup"><span data-stu-id="b77c6-352">User-defined information that contains information for the operation.</span></span></param>
        <param name="audioPositionAheadToRaiseUpdate"><span data-ttu-id="b77c6-353">Смещение от текущего <see cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />, чтобы отложить запрос.</span><span class="sxs-lookup"><span data-stu-id="b77c6-353">The offset from the current <see cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" /> to delay the request.</span></span></param>
        <summary><span data-ttu-id="b77c6-354">Запрашивает, чтобы общий распознаватель приостановился и обновил свое состояния и предоставил смещение и токен пользователя для связанного события.</span><span class="sxs-lookup"><span data-stu-id="b77c6-354">Requests that the shared recognizer pause and update its state and provides an offset and a user token for the associated event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-355">Распознаватель не инициирует запрос на обновление распознавателя до тех пор, пока распознаватель не <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> равен текущему <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> плюс значение параметра `audioPositionAheadToRaiseUpdate`.</span><span class="sxs-lookup"><span data-stu-id="b77c6-355">The recognizer does not initiate the recognizer update request until the recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> equals the current <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> plus the value of the `audioPositionAheadToRaiseUpdate` parameter.</span></span>  
  
 <span data-ttu-id="b77c6-356">Когда распознаватель создает событие <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached>, свойство <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> содержит значение параметра `userToken`.</span><span class="sxs-lookup"><span data-stu-id="b77c6-356">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contains the value of the `userToken` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="SpeechDetected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt; SpeechDetected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechDetectedEventArgs&gt; SpeechDetected" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeechDetected As EventHandler(Of SpeechDetectedEventArgs) " FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechDetectedEventArgs ^&gt; ^ SpeechDetected;" />
      <MemberSignature Language="F#" Value="member this.SpeechDetected : EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt; " Usage="member this.SpeechDetected : System.EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt; " />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechDetected As EventHandler(Of SpeechDetectedEventArgs) " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b77c6-357">Происходит, когда средство распознавания обнаруживает ввод, который может быть идентифицирован как речь.</span><span class="sxs-lookup"><span data-stu-id="b77c6-357">Occurs when the recognizer detects input that it can identify as speech.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-358">Общий распознаватель может вызвать это событие в ответ на ввод.</span><span class="sxs-lookup"><span data-stu-id="b77c6-358">The shared recognizer can raise this event in response to input.</span></span> <span data-ttu-id="b77c6-359">Свойство <xref:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition%2A> связанного объекта <xref:System.Speech.Recognition.SpeechDetectedEventArgs> указывает расположение во входном потоке, в котором распознаватель обнаружил распознавание речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-359">The <xref:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition%2A> property of the associated <xref:System.Speech.Recognition.SpeechDetectedEventArgs> object indicates location in the input stream where the recognizer detected speech.</span></span> <span data-ttu-id="b77c6-360">Дополнительные сведения см. в статьях свойства <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> и <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A>, а также методы <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> и <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-360">For more information see the <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> and <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> properties and the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> and <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="b77c6-361">При создании делегата для <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected> события определяется метод, который будет выполнять обработку события.</span><span class="sxs-lookup"><span data-stu-id="b77c6-361">When you create a delegate for a <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected> event, you identify the method that will handle the event.</span></span> <span data-ttu-id="b77c6-362">Чтобы связать событие с обработчиком событий, нужно добавить в событие экземпляр делегата.</span><span class="sxs-lookup"><span data-stu-id="b77c6-362">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="b77c6-363">Обработчик событий вызывается всякий раз, когда происходит событие, если делегат не удален.</span><span class="sxs-lookup"><span data-stu-id="b77c6-363">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="b77c6-364">Дополнительные сведения о делегатах обработчиков событий см. в разделе [события и делегаты](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="b77c6-364">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b77c6-365">Следующий пример является частью консольного приложения для выбора исходных и целевых городов для рейса.</span><span class="sxs-lookup"><span data-stu-id="b77c6-365">The following example is part of a console application for choosing origin and destination cities for a flight.</span></span> <span data-ttu-id="b77c6-366">Приложение распознает такие фразы, как «я хочу полета из Майами в Чикаго».</span><span class="sxs-lookup"><span data-stu-id="b77c6-366">The application recognizes phrases such as "I want to fly from Miami to Chicago."</span></span>  <span data-ttu-id="b77c6-367">В примере используется событие <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected> для сообщения <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> каждый раз при обнаружении речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-367">The example uses the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected> event to report the <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> each time speech is detected.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize a shared speech recognition engine.  
    {  
      using (SpeechRecognizer recognizer =  
         new SpeechRecognizer())  
      {  
  
        // Create a grammar.  
        Choices cities = new Choices(new string[] {   
          "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I would like to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Create a Grammar object and load it to the recognizer.  
        Grammar g = new Grammar(gb);  
        g.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(g);  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechDetected +=   
          new EventHandler<SpeechDetectedEventArgs>(recognizer_SpeechDetected);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechDetected event.  
    static void recognizer_SpeechDetected(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine("Speech detected at AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="SpeechHypothesized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; SpeechHypothesized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; SpeechHypothesized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeechHypothesized As EventHandler(Of SpeechHypothesizedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechHypothesizedEventArgs ^&gt; ^ SpeechHypothesized;" />
      <MemberSignature Language="F#" Value="member this.SpeechHypothesized : EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; " Usage="member this.SpeechHypothesized : System.EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b77c6-368">Происходит, когда распознаватель распознал слово или слова, которые могут входить в состав нескольких полных фраз в грамматике.</span><span class="sxs-lookup"><span data-stu-id="b77c6-368">Occurs when the recognizer has recognized a word or words that may be a component of multiple complete phrases in a grammar.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-369">Общий распознаватель может вызвать это событие, если входные данные неоднозначны.</span><span class="sxs-lookup"><span data-stu-id="b77c6-369">The shared recognizer can raise this event when the input is ambiguous.</span></span> <span data-ttu-id="b77c6-370">Например, для грамматики распознавания речи, которая поддерживает распознавание "новой игры" или "Новая игра", "Новая игра", является однозначным входом, а "Новая игра" является неоднозначным входом.</span><span class="sxs-lookup"><span data-stu-id="b77c6-370">For example, for a speech recognition grammar that supports recognition of either "new game please" or "new game", "new game please" is an unambiguous input, and "new game" is an ambiguous input.</span></span>  
  
 <span data-ttu-id="b77c6-371">При создании делегата для <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized> события определяется метод, который будет выполнять обработку события.</span><span class="sxs-lookup"><span data-stu-id="b77c6-371">When you create a delegate for a <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized> event, you identify the method that will handle the event.</span></span> <span data-ttu-id="b77c6-372">Чтобы связать событие с обработчиком событий, нужно добавить в событие экземпляр делегата.</span><span class="sxs-lookup"><span data-stu-id="b77c6-372">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="b77c6-373">Обработчик событий вызывается всякий раз, когда происходит событие, если делегат не удален.</span><span class="sxs-lookup"><span data-stu-id="b77c6-373">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="b77c6-374">Дополнительные сведения о делегатах обработчиков событий см. в разделе [события и делегаты](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="b77c6-374">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b77c6-375">В следующем примере распознаются такие фразы, как "отобразить список исполнителей в категории джаз".</span><span class="sxs-lookup"><span data-stu-id="b77c6-375">The following example recognizes phrases such as "Display the list of artists in the jazz category".</span></span> <span data-ttu-id="b77c6-376">В примере используется событие <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized> для вывода неполных фрагментов фраз в консоли по мере их распознавания.</span><span class="sxs-lookup"><span data-stu-id="b77c6-376">The example uses the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized> event to display incomplete phrase fragments in the console as they are recognized.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize a shared speech recognition engine.  
    {  
      using (SpeechRecognizer recognizer =  
         new SpeechRecognizer())  
      {  
  
        // Create a grammar.  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display the list of");  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the");  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category.");  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechHypothesized +=   
          new EventHandler<SpeechHypothesizedEventArgs>(recognizer_SpeechHypothesized);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void recognizer_SpeechHypothesized(object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine("Speech hypothesized: " + e.Result.Text);  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechHypothesizedEventArgs" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognitionRejected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; SpeechRecognitionRejected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; SpeechRecognitionRejected" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeechRecognitionRejected As EventHandler(Of SpeechRecognitionRejectedEventArgs) " FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognitionRejectedEventArgs ^&gt; ^ SpeechRecognitionRejected;" />
      <MemberSignature Language="F#" Value="member this.SpeechRecognitionRejected : EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; " Usage="member this.SpeechRecognitionRejected : System.EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; " />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognitionRejected As EventHandler(Of SpeechRecognitionRejectedEventArgs) " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b77c6-377">Происходит, когда распознаватель получает входные данные, не соответствующие ни одной из загруженных грамматик распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-377">Occurs when the recognizer receives input that does not match any of the speech recognition grammars it has loaded.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-378">Общий распознаватель вызывает это событие, если оно определяет, что входные данные не совпадают с достаточной достоверностью любой из загруженных грамматик распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-378">The shared recognizer raises this event if it determines that input does not match with sufficient confidence any of the loaded speech recognition grammars.</span></span> <span data-ttu-id="b77c6-379">Свойство <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> содержит отклоненный объект <xref:System.Speech.Recognition.RecognitionResult>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-379">The <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contains the rejected <xref:System.Speech.Recognition.RecognitionResult> object.</span></span>  
  
 <span data-ttu-id="b77c6-380">Пороговые значения достоверности для общего распознавателя, управляемого <xref:System.Speech.Recognition.SpeechRecognizer>, связаны с профилем пользователя и хранятся в реестре Windows.</span><span class="sxs-lookup"><span data-stu-id="b77c6-380">Confidence thresholds for the shared recognizer, managed by <xref:System.Speech.Recognition.SpeechRecognizer>, are associated with a user profile and stored in the Windows registry.</span></span> <span data-ttu-id="b77c6-381">Приложения не должны записывать изменения в реестр для свойств общего распознавателя.</span><span class="sxs-lookup"><span data-stu-id="b77c6-381">Applications should not write changes to the registry for the properties of the shared recognizer.</span></span>  
  
 <span data-ttu-id="b77c6-382">При создании делегата для <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected> события определяется метод, который будет выполнять обработку события.</span><span class="sxs-lookup"><span data-stu-id="b77c6-382">When you create a delegate for a <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected> event, you identify the method that will handle the event.</span></span> <span data-ttu-id="b77c6-383">Чтобы связать событие с обработчиком событий, нужно добавить в событие экземпляр делегата.</span><span class="sxs-lookup"><span data-stu-id="b77c6-383">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="b77c6-384">Обработчик событий вызывается всякий раз, когда происходит событие, если делегат не удален.</span><span class="sxs-lookup"><span data-stu-id="b77c6-384">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="b77c6-385">Дополнительные сведения о делегатах обработчиков событий см. в разделе [события и делегаты](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="b77c6-385">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b77c6-386">В следующем примере распознаются такие фразы, как "отобразить список исполнителей в категории джаз" или "отобразить альбомы госпел".</span><span class="sxs-lookup"><span data-stu-id="b77c6-386">The following example recognizes phrases such as "Display the list of artists in the jazz category" or "Display albums gospel".</span></span> <span data-ttu-id="b77c6-387">В примере используется обработчик события <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected> для вывода уведомления в консоли, когда речевой ввод не может быть сопоставлен с содержимым грамматики с достаточным уровнем достоверности для успешного распознавания.</span><span class="sxs-lookup"><span data-stu-id="b77c6-387">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected> event to display a notification in the console when the speech input cannot be matched to the contents of the grammar with sufficient confidence to produce a successful recognition.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize a shared speech recognition engine.  
    {  
      using (SpeechRecognizer recognizer =  
         new SpeechRecognizer())  
      {  
  
        // Create a grammar.  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display");  
        mediaMenu.Append("the list of", 0, 1);  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the", 0, 1);  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category", 0, 1);  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechRecognitionRejected +=   
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("Speech input was rejected.");  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeechRecognized As EventHandler(Of SpeechRecognizedEventArgs) " FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognizedEventArgs ^&gt; ^ SpeechRecognized;" />
      <MemberSignature Language="F#" Value="member this.SpeechRecognized : EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; " Usage="member this.SpeechRecognized : System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; " />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognized As EventHandler(Of SpeechRecognizedEventArgs) " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b77c6-388">Происходит, когда распознаватель получает входные данные, соответствующие одной из загруженных грамматик распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-388">Occurs when the recognizer receives input that matches one of its speech recognition grammars.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-389">Распознаватель вызывает событие `SpeechRecognized`, если оно определяет достаточно уверенности в том, что входные данные соответствуют одной из грамматик, загруженной и включенной для распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-389">The recognizer raises the `SpeechRecognized` event if it determines with sufficient confidence that input matches one of the loaded and enabled speech recognition grammars.</span></span> <span data-ttu-id="b77c6-390">Свойство <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> содержит принятый объект <xref:System.Speech.Recognition.RecognitionResult>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-390">The <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contains the accepted <xref:System.Speech.Recognition.RecognitionResult> object.</span></span>  
  
 <span data-ttu-id="b77c6-391">Пороговые значения достоверности для общего распознавателя, управляемого <xref:System.Speech.Recognition.SpeechRecognizer>, связаны с профилем пользователя и хранятся в реестре Windows.</span><span class="sxs-lookup"><span data-stu-id="b77c6-391">Confidence thresholds for the shared recognizer, managed by <xref:System.Speech.Recognition.SpeechRecognizer>, are associated with a user profile and stored in the Windows registry.</span></span> <span data-ttu-id="b77c6-392">Приложения не должны записывать изменения в реестр для свойств общего распознавателя.</span><span class="sxs-lookup"><span data-stu-id="b77c6-392">Applications should not write changes to the registry for the properties of the shared recognizer.</span></span>  
  
 <span data-ttu-id="b77c6-393">Когда распознаватель получает входные данные, соответствующие грамматике, объект <xref:System.Speech.Recognition.Grammar> может вызвать событие <xref:System.Speech.Recognition.Grammar.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-393">When the recognizer receives input that matches a grammar, the <xref:System.Speech.Recognition.Grammar> object can raise the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event.</span></span> <span data-ttu-id="b77c6-394">Событие <xref:System.Speech.Recognition.Grammar.SpeechRecognized> объекта <xref:System.Speech.Recognition.Grammar> возникает перед событием <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> распознавателя речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-394">The <xref:System.Speech.Recognition.Grammar> object's <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event is raised prior to the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="b77c6-395">При создании делегата для <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> события определяется метод, который будет выполнять обработку события.</span><span class="sxs-lookup"><span data-stu-id="b77c6-395">When you create a delegate for a <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> event, you identify the method that will handle the event.</span></span> <span data-ttu-id="b77c6-396">Чтобы связать событие с обработчиком событий, нужно добавить в событие экземпляр делегата.</span><span class="sxs-lookup"><span data-stu-id="b77c6-396">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="b77c6-397">Обработчик событий вызывается всякий раз, когда происходит событие, если делегат не удален.</span><span class="sxs-lookup"><span data-stu-id="b77c6-397">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="b77c6-398">Дополнительные сведения о делегатах обработчиков событий см. в разделе [события и делегаты](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="b77c6-398">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b77c6-399">Следующий пример является частью консольного приложения, которое загружает грамматику распознавания речи и демонстрирует речевой ввод для общего распознавателя, соответствующие результаты распознавания и связанные события, вызванные распознавателем речи.</span><span class="sxs-lookup"><span data-stu-id="b77c6-399">The following example is part of a console application that loads a speech recognition grammar and demonstrates speech input to the shared recognizer, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="b77c6-400">Если средство распознавания речи Windows не запущено, то при запуске этого приложения также будет запущено распознавание речи Windows.</span><span class="sxs-lookup"><span data-stu-id="b77c6-400">If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition.</span></span>  
  
 <span data-ttu-id="b77c6-401">Входные данные, такие как «я хочу вылет из Чикаго в Майами», активируют событие <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-401">Spoken input such as "I want to fly from Chicago to Miami" will trigger a <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> event.</span></span> <span data-ttu-id="b77c6-402">Говорите, что фраза «Вылет от Хьюстоне к Чикаго» не будет запускать событие <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-402">Speaking the phrase "Fly me from Houston to Chicago " will not trigger a <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="b77c6-403">В примере используется обработчик для события <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized>, чтобы отобразить успешно распознанные фразы и семантику, которую они содержат в консоли.</span><span class="sxs-lookup"><span data-stu-id="b77c6-403">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> event to display successfully recognized phrases and the semantics they contain in the console.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize a shared speech recognition engine.  
    {  
      using (SpeechRecognizer recognizer = new SpeechRecognizer())  
      {  
  
        // Create SemanticResultValue objects that contain cities and airport codes.  
        SemanticResultValue chicago = new SemanticResultValue("Chicago", "ORD");  
        SemanticResultValue boston = new SemanticResultValue("Boston", "BOS");  
        SemanticResultValue miami = new SemanticResultValue("Miami", "MIA");  
        SemanticResultValue dallas = new SemanticResultValue("Dallas", "DFW");  
  
        // Create a Choices object and add the SemanticResultValue objects, using  
        // implicit conversion from SemanticResultValue to GrammarBuilder  
        Choices cities = new Choices();  
        cities.Add(new Choices(new GrammarBuilder[] { chicago, boston, miami, dallas }));  
  
        // Build the phrase and add SemanticResultKeys.  
        GrammarBuilder chooseCities = new GrammarBuilder();  
        chooseCities.Append("I want to fly from");  
        chooseCities.Append(new SemanticResultKey("origin", cities));  
        chooseCities.Append("to");  
        chooseCities.Append(new SemanticResultKey("destination", cities));  
  
        // Build a Grammar object from the GrammarBuilder.  
        Grammar bookFlight = new Grammar(chooseCities);  
        bookFlight.Name = "Book Flight";  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(bookFlight);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized:  " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The flight origin is " + e.Result.Semantics["origin"].Value);  
      Console.WriteLine("  The flight destination is " + e.Result.Semantics["destination"].Value);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizedEventArgs" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognizerState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.RecognizerState State" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.State" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property State As RecognizerState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::RecognizerState State { System::Speech::Recognition::RecognizerState get(); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Speech.Recognition.RecognizerState" Usage="System.Speech.Recognition.SpeechRecognizer.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognizerState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b77c6-404">Получает состояние объекта <see cref="T:System.Speech.Recognition.SpeechRecognizer" />.</span><span class="sxs-lookup"><span data-stu-id="b77c6-404">Gets the state of a <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> object.</span></span></summary>
        <value><span data-ttu-id="b77c6-405">Состояние объекта <see langword="SpeechRecognizer" />.</span><span class="sxs-lookup"><span data-stu-id="b77c6-405">The state of the <see langword="SpeechRecognizer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-406">Это свойство только для чтения указывает, находится ли общий распознаватель, находящийся в Windows, в `Stopped` или `Listening`ном состоянии.</span><span class="sxs-lookup"><span data-stu-id="b77c6-406">This read-only property indicates whether the shared recognizer resident in Windows is in the `Stopped` or the `Listening` state.</span></span> <span data-ttu-id="b77c6-407">Дополнительные сведения см. в описании перечисления <xref:System.Speech.Recognition.RecognizerState>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-407">For more information, see the <xref:System.Speech.Recognition.RecognizerState> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizerState" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.StateChanged" />
      </Docs>
    </Member>
    <Member MemberName="StateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.StateChangedEventArgs&gt; StateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.StateChangedEventArgs&gt; StateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.StateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StateChanged As EventHandler(Of StateChangedEventArgs) " FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::StateChangedEventArgs ^&gt; ^ StateChanged;" />
      <MemberSignature Language="F#" Value="member this.StateChanged : EventHandler&lt;System.Speech.Recognition.StateChangedEventArgs&gt; " Usage="member this.StateChanged : System.EventHandler&lt;System.Speech.Recognition.StateChangedEventArgs&gt; " />
      <MemberSignature Language="VB.NET" Value="Public Event StateChanged As EventHandler(Of StateChangedEventArgs) " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.StateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b77c6-408">Происходит при изменении рабочего состояния механизма распознавания технологии Windows Desktop Speech.</span><span class="sxs-lookup"><span data-stu-id="b77c6-408">Occurs when the running state of the Windows Desktop Speech Technology recognition engine changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-409">Общий распознаватель вызывает это событие при изменении состояния распознавания речи Windows на <xref:System.Speech.Recognition.RecognizerState.Listening> или <xref:System.Speech.Recognition.RecognizerState.Stopped>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-409">The shared recognizer raises this event when the state of Windows Speech Recognition changes to the <xref:System.Speech.Recognition.RecognizerState.Listening> or <xref:System.Speech.Recognition.RecognizerState.Stopped> state.</span></span>  
  
 <span data-ttu-id="b77c6-410">Чтобы получить состояние общего распознавателя во время события, используйте свойство <xref:System.Speech.Recognition.StateChangedEventArgs.RecognizerState%2A> связанного <xref:System.Speech.Recognition.StateChangedEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-410">To get the state of the shared recognizer at the time of the event, use the <xref:System.Speech.Recognition.StateChangedEventArgs.RecognizerState%2A> property of the associated <xref:System.Speech.Recognition.StateChangedEventArgs>.</span></span> <span data-ttu-id="b77c6-411">Чтобы получить текущее состояние общего распознавателя, используйте свойство <xref:System.Speech.Recognition.SpeechRecognizer.State%2A> распознавателя.</span><span class="sxs-lookup"><span data-stu-id="b77c6-411">To get the current state of the shared recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.State%2A> property.</span></span>  
  
 <span data-ttu-id="b77c6-412">При создании делегата для <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> события определяется метод, который будет выполнять обработку события.</span><span class="sxs-lookup"><span data-stu-id="b77c6-412">When you create a delegate for a <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> event, you identify the method that will handle the event.</span></span> <span data-ttu-id="b77c6-413">Чтобы связать событие с обработчиком событий, нужно добавить в событие экземпляр делегата.</span><span class="sxs-lookup"><span data-stu-id="b77c6-413">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="b77c6-414">Обработчик событий вызывается всякий раз, когда происходит событие, если делегат не удален.</span><span class="sxs-lookup"><span data-stu-id="b77c6-414">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="b77c6-415">Дополнительные сведения о делегатах обработчиков событий см. в разделе [события и делегаты](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="b77c6-415">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b77c6-416">В следующем примере создается общий распознаватель речи, а затем создаются два типа грамматики для распознавания конкретных слов и для принятия бесплатной диктовки.</span><span class="sxs-lookup"><span data-stu-id="b77c6-416">The following example creates a shared speech recognizer, and then creates two types of grammars for recognizing specific words and for accepting free dictation.</span></span> <span data-ttu-id="b77c6-417">В примере асинхронно загружается все созданные грамматики в распознаватель.</span><span class="sxs-lookup"><span data-stu-id="b77c6-417">The example asynchronously loads all the created grammars to the recognizer.</span></span>  <span data-ttu-id="b77c6-418">Обработчик события <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> использует метод <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> для перевода распознавания Windows в режим прослушивания.</span><span class="sxs-lookup"><span data-stu-id="b77c6-418">A handler for the <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> event uses the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> method to put Windows Recognition in "listening" mode.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognizer recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize a shared speech recognition engine.  
      recognizer = new SpeechRecognizer();  
  
      // Add a handler for the LoadGrammarCompleted event.  
      recognizer.LoadGrammarCompleted += new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
      // Add a handler for the SpeechRecognized event.  
      recognizer.SpeechRecognized += new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
      // Add a handler for the StateChanged event.  
      recognizer.StateChanged += new EventHandler<StateChangedEventArgs>(recognizer_StateChanged);  
  
      // Create "yesno" grammar.  
      Choices yesChoices = new Choices(new string[] { "yes", "yup", "yah}" });  
      SemanticResultValue yesValue =  
          new SemanticResultValue(yesChoices, (bool)true);  
      Choices noChoices = new Choices(new string[] { "no", "nope", "nah" });  
      SemanticResultValue noValue = new SemanticResultValue(noChoices, (bool)false);  
      SemanticResultKey yesNoKey =  
          new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
      Grammar yesnoGrammar = new Grammar(yesNoKey);  
      yesnoGrammar.Name = "yesNo";  
  
      // Create "done" grammar.  
      Grammar doneGrammar =  
        new Grammar(new Choices(new string[] { "done", "exit", "quit", "stop" }));  
      doneGrammar.Name = "Done";  
  
      // Create dictation grammar.  
      Grammar dictation = new DictationGrammar();  
      dictation.Name = "Dictation";  
  
      // Load grammars to the recognizer.  
      recognizer.LoadGrammarAsync(yesnoGrammar);  
      recognizer.LoadGrammarAsync(doneGrammar);  
      recognizer.LoadGrammarAsync(dictation);  
  
      // Keep the console window open.  
      Console.ReadLine();  
    }  
  
    // Put the shared speech recognizer into "listening" mode.  
    static void  recognizer_StateChanged(object sender, StateChangedEventArgs e)  
    {  
     if (e.RecognizerState != RecognizerState.Stopped)  
      {  
        recognizer.EmulateRecognizeAsync("Start listening");  
      }  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void  recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
     Console.WriteLine("Grammar({0}): {1}", e.Result.Grammar.Name, e.Result.Text);  
  
      // Add event handler code here.  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void  recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
     string grammarName = e.Grammar.Name;  
      bool grammarLoaded = e.Grammar.Loaded;  
      if (e.Error != null)  
      {  
        Console.WriteLine("LoadGrammar for {0} failed with a {1}.",  
        grammarName, e.Error.GetType().Name);  
      }  
  
      // Add exception handling code here.  
      Console.WriteLine("Grammar {0} {1} loaded.",  
      grammarName, (grammarLoaded) ? "is" : "is not");  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizerState" />
        <altmember cref="T:System.Speech.Recognition.StateChangedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.State" />
      </Docs>
    </Member>
    <Member MemberName="UnloadAllGrammars">
      <MemberSignature Language="C#" Value="public void UnloadAllGrammars ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnloadAllGrammars() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnloadAllGrammars ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnloadAllGrammars();" />
      <MemberSignature Language="F#" Value="member this.UnloadAllGrammars : unit -&gt; unit" Usage="speechRecognizer.UnloadAllGrammars " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b77c6-419">Выгружает все грамматики распознавания речи из общего распознавателя.</span><span class="sxs-lookup"><span data-stu-id="b77c6-419">Unloads all speech recognition grammars from the shared recognizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-420">Если распознаватель в данный момент загружает грамматику асинхронно, этот метод ждет загрузки грамматики, прежде чем выгрузит все грамматики распознавателя.</span><span class="sxs-lookup"><span data-stu-id="b77c6-420">If the recognizer is currently loading a grammar asynchronously, this method waits until the grammar is loaded, before it unloads all of the recognizer's grammars.</span></span>  
  
 <span data-ttu-id="b77c6-421">Чтобы выгрузить определенную грамматику, используйте метод <xref:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar%2A>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-421">To unload a specific grammar, use the <xref:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.Grammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="UnloadGrammar">
      <MemberSignature Language="C#" Value="public void UnloadGrammar (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnloadGrammar(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnloadGrammar(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberSignature Language="F#" Value="member this.UnloadGrammar : System.Speech.Recognition.Grammar -&gt; unit" Usage="speechRecognizer.UnloadGrammar grammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar"><span data-ttu-id="b77c6-422">Грамматика для выгрузки.</span><span class="sxs-lookup"><span data-stu-id="b77c6-422">The grammar to unload.</span></span></param>
        <summary><span data-ttu-id="b77c6-423">Выгружает указанную грамматику распознавания речи из общего распознавателя.</span><span class="sxs-lookup"><span data-stu-id="b77c6-423">Unloads a specified speech recognition grammar from the shared recognizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b77c6-424">Если распознаватель запущен, приложения должны использовать <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> для приостановки модуля распознавания речи перед загрузкой, выгрузкой, включением или отключением грамматики.</span><span class="sxs-lookup"><span data-stu-id="b77c6-424">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span> <span data-ttu-id="b77c6-425">Чтобы выгрузить все грамматики, используйте метод <xref:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars%2A>.</span><span class="sxs-lookup"><span data-stu-id="b77c6-425">To unload all grammars, use the <xref:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.Grammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars" />
      </Docs>
    </Member>
  </Members>
</Type>
