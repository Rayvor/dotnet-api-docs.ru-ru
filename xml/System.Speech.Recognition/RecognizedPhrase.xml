<Type Name="RecognizedPhrase" FullName="System.Speech.Recognition.RecognizedPhrase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="532436c4bf4201c336f4d35a62ee5de8416d69f2" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69231142" /></Metadata><TypeSignature Language="C#" Value="public class RecognizedPhrase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RecognizedPhrase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizedPhrase" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizedPhrase" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizedPhrase" />
  <TypeSignature Language="F#" Value="type RecognizedPhrase = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{Text}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Содержит подробные сведения о распознанных входных данных, созданные распознавателем речи.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот класс содержит подробные сведения о словах и фразах, обрабатываемых во время операций распознавания речи, включая следующие:  
  
-   Свойство ссылается на объект <xref:System.Speech.Recognition.Grammar> , используемый распознавателем для идентификации входных данных. <xref:System.Speech.Recognition.RecognizedPhrase.Grammar%2A>  
  
-   <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> Свойство содержит нормализованный текст для фразы.  
  
-   <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> Свойство ссылается на семантическую информацию, содержащуюся в результате. Семантическая информация представляет собой словарь имен ключей и связанных семантических данных.  
  
-   Свойство содержит упорядоченную <xref:System.Speech.Recognition.RecognizedWordUnit> коллекцию объектов, представляющих Каждое распознанное слово во входных данных. <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> Каждая единица слова содержит формат вывода, лексического формата и сведения о произношении для соответствующего слова.  
  
-   <xref:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits%2A> Свойство содержит сведения о подстановке специализированного слова.  
  
-   Свойства <xref:System.Speech.Recognition.RecognizedPhrase.Homophones%2A> и<xref:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId%2A> содержат сведения о вариантах распознавания, которые имеют одинаковое или аналогичное произношение.  
  
-   Значение <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> свойства указывает степень уверенности, назначенную распознавателем речи, что распознанная фраза соответствует входным данным.  
  
 Распознаватель речи возвращает результат распознавания в <xref:System.Speech.Recognition.RecognitionResult> объекте, который наследуется от. <xref:System.Speech.Recognition.RecognizedPhrase> Свойство "результат <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> распознавания" содержит упорядоченную <xref:System.Speech.Recognition.RecognizedPhrase> коллекцию объектов, каждый из которых является возможным совпадением для входных данных распознавателя.  
  
   
  
## Examples  
 В следующем примере <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>показан обработчик для события, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>или <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> , <xref:System.Speech.Recognition.RecognitionResult> а также некоторые сведения, связанные с объектом. Класс <xref:System.Speech.Recognition.RecognitionResult> является производным от класса <xref:System.Speech.Recognition.RecognizedPhrase> .  
  
```csharp  
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  // Add event handler code here.  
  
  // The following code illustrates some of the information available  
  // in the recognition result.  
  Console.WriteLine("Recognition result summary:");  
  Console.WriteLine(  
    "  Recognized phrase: {0}\n" +   
    "  Confidence score {1}\n" +   
    "  Grammar used: {2}\n",   
    e.Result.Text, e.Result.Confidence, e.Result.Grammar.Name);  
  
  // Display the semantic values in the recognition result.  
  Console.WriteLine("  Semantic results:");  
  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  
  {  
    Console.WriteLine("    The {0} city is {1}",  
      child.Key, child.Value.Value ?? "null");  
  }  
  Console.WriteLine();  
  
  // Display information about the words in the recognition result.  
  Console.WriteLine("  Word summary: ");  
  foreach (RecognizedWordUnit word in e.Result.Words)  
  {  
    Console.WriteLine(  
      "    Lexical form ({1})" +  
      " Pronunciation ({0})" +  
      " Display form ({2})",  
      word.Pronunciation, word.LexicalForm, word.DisplayAttributes);  
  }  
  
  // Display information about the audio in the recognition result.  
  Console.WriteLine("  Input audio summary:\n" +  
    "    Candidate Phrase at:       {0} mSec\n" +  
    "    Phrase Length:             {1} mSec\n" +  
    "    Input State Time:          {2}\n" +  
    "    Input Format:              {3}\n",  
    e.Result.Audio.AudioPosition,  
    e.Result.Audio.Duration,  
    e.Result.Audio.StartTime,  
    e.Result.Audio.Format.EncodingFormat);  
  
  // Display information about the alternate recognitions in the recognition result.  
  Console.WriteLine("  Alternate phrase collection:");  
  foreach (RecognizedPhrase phrase in e.Result.Alternates)  
  {  
    Console.WriteLine("    Phrase: " + phrase.Text);  
    Console.WriteLine("    Confidence score: " + phrase.Confidence);  
  }  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
    <altmember cref="T:System.Speech.Recognition.RecognizedWordUnit" />
  </Docs>
  <Members>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public float Confidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Confidence" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Confidence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Confidence As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Confidence { float get(); };" />
      <MemberSignature Language="F#" Value="member this.Confidence : single" Usage="System.Speech.Recognition.RecognizedPhrase.Confidence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает присвоенное распознавателем значение, которое представляет вероятность того, что <see cref="T:System.Speech.Recognition.RecognizedPhrase" /> соответствует заданным входным данным.</summary>
        <value>Относительная мера достоверности правильного распознания фразы. Значение находится в диапазоне от 0,0 до 1,0 (низкая и высокая достоверность соответственно).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Оценки достоверности не показывают абсолютной вероятности правильного распознавания фразы. Вместо этого оценки достоверности предоставляют механизм для сравнения относительной точности нескольких вариантов распознавания для заданных входных данных. Это упрощает возврат наиболее точных результатов распознавания. Например, если распознанная фраза имеет показатель достоверности 0,8, это не значит, что фраза будет иметь значение 80%, которое является верным совпадением для входных данных.  Это означает, что фраза, скорее всего, будет правильным совпадением для ввода, чем другие результаты, у которых показатели достоверности менее 0,8.  
  
 Сам по себе показатель достоверности не имеет смысла, если у вас нет альтернативных результатов для сравнения, как из той же операции распознавания, так и из предыдущих распознавать одних и тех же входных данных. Значения используются для ранжирования альтернативных фраз-кандидатов, <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> возвращаемых <xref:System.Speech.Recognition.RecognitionResult> свойством объектов.  
  
 Значения достоверности являются относительными и уникальными для каждого механизма распознавания. Значения достоверности, возвращаемые двумя разными механизмами распознавания, не могут быть осмысленными.  
  
 Модуль распознавания речи может нанести низкую достоверность для речевого ввода по различным причинам, в том числе к фоновым помехам, распознаванию речи или непредсказуемым словам или последовательностью слов. Если приложение использует <xref:System.Speech.Recognition.SpeechRecognitionEngine> экземпляр служб, можно изменить уровень достоверности, при котором речевое вход принимается или отклоняется одним <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> из методов. Пороговые значения достоверности для общего распознавателя, управляемого <xref:System.Speech.Recognition.SpeechRecognizer>, связаны с профилем пользователя и хранятся в реестре Windows. Приложения не должны записывать изменения в реестр для свойств общего распознавателя.  
  
 Свойство объекта содержит упорядоченную коллекцию объектов, каждый из которых является возможным совпадением для входных данных распознавателя. <xref:System.Speech.Recognition.RecognizedPhrase> <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> <xref:System.Speech.Recognition.RecognitionResult> Альтернативные варианты упорядочены от наивысшей до самой низкой достоверности.  
  
   
  
## Examples  
 В следующем примере показан обработчик для <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>события, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>или <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> . В примере отображаются сведения, связанные с <xref:System.Speech.Recognition.RecognitionResult> объектом, часть которого является производной от <xref:System.Speech.Recognition.RecognizedPhrase>. Обработчик отображает оценки достоверности для распознанной фразы, а также для вариантов распознавания.  
  
```csharp  
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  // Add event handler code here.  
  
  // The following code illustrates some of the information available  
  // in the recognition result.  
  Console.WriteLine("Recognition result summary:");  
  Console.WriteLine(  
    "  Recognized phrase: {0}\n" +   
    "  Confidence score {1}\n" +   
    "  Grammar used: {2}\n",   
    e.Result.Text, e.Result.Confidence, e.Result.Grammar.Name);  
  
  // Display the semantic values in the recognition result.  
  Console.WriteLine("  Semantic results:");  
  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  
  {  
    Console.WriteLine("    The {0} city is {1}",  
      child.Key, child.Value.Value ?? "null");  
  }  
  Console.WriteLine();  
  
  // Display information about the words in the recognition result.  
  Console.WriteLine("  Word summary: ");  
  foreach (RecognizedWordUnit word in e.Result.Words)  
  {  
    Console.WriteLine(  
      "    Lexical form ({1})" +  
      " Pronunciation ({0})" +  
      " Display form ({2})",  
      word.Pronunciation, word.LexicalForm, word.DisplayAttributes);  
  }  
  
  // Display information about the audio in the recognition result.  
  Console.WriteLine("  Input audio summary:\n" +  
    "    Candidate Phrase at:       {0} mSec\n" +  
    "    Phrase Length:             {1} mSec\n" +  
    "    Input State Time:          {2}\n" +  
    "    Input Format:              {3}\n",  
    e.Result.Audio.AudioPosition,  
    e.Result.Audio.Duration,  
    e.Result.Audio.StartTime,  
    e.Result.Audio.Format.EncodingFormat);  
  
  // Display information about the alternate recognitions in the recognition result.  
  Console.WriteLine("  Alternate phrase collection:");  
  foreach (RecognizedPhrase phrase in e.Result.Alternates)  
  {  
    Console.WriteLine("    Phrase: " + phrase.Text);  
    Console.WriteLine("    Confidence score: " + phrase.Confidence);  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName="ConstructSmlFromSemantics">
      <MemberSignature Language="C#" Value="public System.Xml.XPath.IXPathNavigable ConstructSmlFromSemantics ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XPath.IXPathNavigable ConstructSmlFromSemantics() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedPhrase.ConstructSmlFromSemantics" />
      <MemberSignature Language="VB.NET" Value="Public Function ConstructSmlFromSemantics () As IXPathNavigable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XPath::IXPathNavigable ^ ConstructSmlFromSemantics();" />
      <MemberSignature Language="F#" Value="member this.ConstructSmlFromSemantics : unit -&gt; System.Xml.XPath.IXPathNavigable" Usage="recognizedPhrase.ConstructSmlFromSemantics " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.IXPathNavigable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает документ на языке разметки семантики (SML) для семантической информации в объекте <see cref="T:System.Speech.Recognition.RecognizedPhrase" />.</summary>
        <returns>Возвращает описание семантики объекта <see cref="T:System.Speech.Recognition.RecognizedPhrase" /> на языке SML в виде объекта, доступного по пути <see href="https://msdn.microsoft.com/library/ms256115.aspx">XPath</see>.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Сведения о языке семантической разметки (SML) см. в разделе [Справочник по языку семантической разметки](https://msdn.microsoft.com/library/f9d83443-2cac-49bc-a447-210feda62f5d).  
  
   
  
## Examples  
 В следующем примере метод возвращает строку, содержащую SML для семантики распознанной фразы.  
  
```  
private string GetSemanticsSML(RecognizedPhrase result)  
{  
  if (result.Semantics.Count > 0)  
  {  
    return result.ConstructSmlFromSemantics().CreateNavigator().OuterXml;  
  }  
  else  
  {  
    return null;  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Grammar">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.Grammar Grammar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.Grammar Grammar" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Grammar" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Grammar As Grammar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::Grammar ^ Grammar { System::Speech::Recognition::Grammar ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Grammar : System.Speech.Recognition.Grammar" Usage="System.Speech.Recognition.RecognizedPhrase.Grammar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.Grammar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает объект <see cref="T:System.Speech.Recognition.Grammar" />, используемый распознавателем речи для возврата <see cref="T:System.Speech.Recognition.RecognizedPhrase" />.</summary>
        <value>Объект грамматики, который использовался распознавателем для идентификации входных данных.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName="HomophoneGroupId">
      <MemberSignature Language="C#" Value="public int HomophoneGroupId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HomophoneGroupId" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HomophoneGroupId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HomophoneGroupId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.HomophoneGroupId : int" Usage="System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает идентификатор группы омофонов для фразы.</summary>
        <value>Идентификатор группы омофонов для фразы.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Распознаватель речи назначает идентификатор группы всем альтернативам распознавания, которые имеют одинаковое произношение. Для каждого альтернативного, который имеет уникальную произношение, распознаватель создает группу омофонов. Распознаватель речи создает новую группу идентификаторов для каждой операции распознавания, и идентификаторы нельзя использовать для сравнения вариантов, созданных из отдельных операций распознавания.  
  
 Например, для результатов распознавания, содержащих варианты "исчезнувшей", "хвост" и "Ale", первые два альтернативы будут принадлежать к одной группе омофонов, а последняя альтернатива будет единственной частью второй омофонов группы.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Homophones" />
      </Docs>
    </Member>
    <Member MemberName="Homophones">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt; Homophones { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizedPhrase&gt; Homophones" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Homophones" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Homophones As ReadOnlyCollection(Of RecognizedPhrase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedPhrase ^&gt; ^ Homophones { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedPhrase ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Homophones : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt;" Usage="System.Speech.Recognition.RecognizedPhrase.Homophones" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает коллекцию альтернативных результатов распознавания, имеющих то же произношение, что и данная распознанная фраза.</summary>
        <value>Доступная только для чтения коллекция альтернативных результатов распознавания, имеющих то же произношение, что и данная распознанная фраза.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство возвращает все другие варианты распознавания, которые имеют ту же произношение, что и распознанная фраза.  
  
 Например, для результатов распознавания, содержащих альтернативные варианты, «исчезнувшей» и «хвост», коллекция Омофоны для первой альтернативы «исчезнувшей» будет содержать вторую фразу «хвост». Коллекция Омофоны для второй альтернативы, «хвост», будет содержать первую фразу «исчезнувшей».  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId" />
      </Docs>
    </Member>
    <Member MemberName="ReplacementWordUnits">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Speech.Recognition.ReplacementText&gt; ReplacementWordUnits { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Speech.Recognition.ReplacementText&gt; ReplacementWordUnits" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReplacementWordUnits As Collection(Of ReplacementText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Speech::Recognition::ReplacementText ^&gt; ^ ReplacementWordUnits { System::Collections::ObjectModel::Collection&lt;System::Speech::Recognition::ReplacementText ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReplacementWordUnits : System.Collections.ObjectModel.Collection&lt;System.Speech.Recognition.ReplacementText&gt;" Usage="System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Speech.Recognition.ReplacementText&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает сведения о тексте, который распознаватель речи изменил в ходе нормализации преобразования речи в текст.</summary>
        <value>Коллекция объектов <see cref="T:System.Speech.Recognition.ReplacementText" />, описывающих части текста, которые распознаватель речи заменил в процессе нормализации распознанных входных данных.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В рамках процесса распознавания речи средство распознавания речи нормализует распознанный ввод в форму для просмотра.  
  
 Например, речевой ввод «двадцать пяти долларов» создает результат распознавания, где <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> свойство содержит слова «двадцать», «пять» и «доллары», <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> а свойство содержит фразу «$25,00». Дополнительные сведения о нормализации текста см. в <xref:System.Speech.Recognition.ReplacementText> разделе класс.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizedWordUnit" />
        <altmember cref="T:System.Speech.Recognition.ReplacementText" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Text" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      </Docs>
    </Member>
    <Member MemberName="Semantics">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SemanticValue Semantics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.SemanticValue Semantics" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Semantics" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Semantics As SemanticValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SemanticValue ^ Semantics { System::Speech::Recognition::SemanticValue ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Semantics : System.Speech.Recognition.SemanticValue" Usage="System.Speech.Recognition.RecognizedPhrase.Semantics" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SemanticValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает семантическую информацию, связанную с распознанной фразой.</summary>
        <value>Семантическая информация, связанная с распознанной фразой.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Грамматика распознавания речи может включать семантическую информацию. Когда распознаватель речи создает результат распознавания для такой грамматики, семантические сведения могут включаться в результат распознавания в соответствии с правилами грамматики и входными данными распознавателя. Дополнительные сведения о семантических данных см. в разделе [основные](https://msdn.microsoft.com/library/2a9dbd8b-cf6d-42cd-bbb9-ca0b3e534005) сведения о <xref:System.Speech.Recognition.SemanticResultKey> семантических результатах, а также о классах и. <xref:System.Speech.Recognition.SemanticResultValue>  
  
   
  
## Examples  
 В следующем примере определяется метод, который получает конкретную семантическую информацию из распознанной фразы. При возврате из этого метода он содержит значение для семантического ключа или значение null, если значение не было получено. Этот метод проверяет только для ключей верхнего уровня. Поскольку семантические сведения содержатся в дереве значений, доступ к ключам нижнего уровня должен осуществляться через возвращенное семантическое значение.  
  
```  
static bool TryGetSemanticValue(  
      RecognizedPhrase phrase, string key, out SemanticValue value)  
{  
  value = null;  
  bool found = phrase.Semantics.ContainsKey(key);  
  if (found)  
  {  
    value = phrase.Semantics[key];  
  }  
  
  return found;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
        <altmember cref="T:System.Speech.Recognition.SemanticValue" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Text : string" Usage="System.Speech.Recognition.RecognizedPhrase.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает нормализованный текст, созданный распознавателем речи на основе распознанных входных данных.</summary>
        <value>Нормализованный текст, созданный распознавателем речи на основе распознанных входных данных.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как часть процесса распознавания речи, распознаватель речи выполняет нормализацию распознавания речи в текст для распознаваемых входных данных в форме просмотра.  
  
 Например, речевой ввод «двадцать пяти долларов» создает результат распознавания, где <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> свойство содержит слова «двадцать», «пять» и «доллары», <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> а свойство содержит фразу «$25,00». Дополнительные сведения о нормализации текста см. в <xref:System.Speech.Recognition.ReplacementText>разделе.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      </Docs>
    </Member>
    <Member MemberName="Words">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedWordUnit&gt; Words { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizedWordUnit&gt; Words" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Words As ReadOnlyCollection(Of RecognizedWordUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ Words { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Words : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedWordUnit&gt;" Usage="System.Speech.Recognition.RecognizedPhrase.Words" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedWordUnit&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает слова, созданные распознавателем речи на основе распознанных входных данных.</summary>
        <value>Коллекция объектов <see cref="T:System.Speech.Recognition.RecognizedWordUnit" />, созданных распознавателем речи для распознанных входных данных.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство содержит слова, полученные от входных данных распознавателя речи до нормализации речи в тексте распознавателя.  
  
 Например, речевой ввод «двадцать пяти долларов» создает результат распознавания, где <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> свойство содержит слова «двадцать», «пять» и «доллары», <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> а свойство содержит фразу «$25,00». Дополнительные сведения о нормализации текста см. в <xref:System.Speech.Recognition.ReplacementText>разделе.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizedWordUnit" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Text" />
      </Docs>
    </Member>
  </Members>
</Type>
