<Type Name="DictationGrammar" FullName="System.Speech.Recognition.DictationGrammar">
  <Metadata><Meta Name="ms.openlocfilehash" Value="18a457ab8c4b088fb91ffc48e4b48c4dc26c4a89" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69231373" /></Metadata><TypeSignature Language="C#" Value="public class DictationGrammar : System.Speech.Recognition.Grammar" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DictationGrammar extends System.Speech.Recognition.Grammar" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.DictationGrammar" />
  <TypeSignature Language="VB.NET" Value="Public Class DictationGrammar&#xA;Inherits Grammar" />
  <TypeSignature Language="C++ CLI" Value="public ref class DictationGrammar : System::Speech::Recognition::Grammar" />
  <TypeSignature Language="F#" Value="type DictationGrammar = class&#xA;    inherit Grammar" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Recognition.Grammar</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Представляет грамматику распознавания речи, используемую для диктовки вольного текста.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот класс предоставляет приложениям стандартную языковую модель, которая может обрабатывать введенные пользователем данные в текст. Этот класс поддерживает как стандартные, так <xref:System.Speech.Recognition.DictationGrammar> и пользовательские объекты. Дополнительные сведения о выборе грамматики диктовки см. в <xref:System.Speech.Recognition.DictationGrammar.%23ctor%28System.String%29> разделе Конструктор.  
  
 По умолчанию <xref:System.Speech.Recognition.DictationGrammar> языковая модель является бесплатной. Он не использует конкретные слова или порядок слов для определения и интерпретации звукового ввода. Чтобы добавить контекст в грамматику диктовки, используйте <xref:System.Speech.Recognition.DictationGrammar.SetDictationContext%2A> метод.  
  
> [!NOTE]
>  <xref:System.Speech.Recognition.DictationGrammar>объекты не поддерживают <xref:System.Speech.Recognition.Grammar.Priority%2A> свойство. <xref:System.Speech.Recognition.DictationGrammar>создает исключение <xref:System.NotSupportedException> , <xref:System.Speech.Recognition.Grammar.Priority%2A> Если задано значение.  
  
   
  
## Examples  
 В следующем примере создается три грамматики диктовки, добавляется в новый <xref:System.Speech.Recognition.SpeechRecognitionEngine> объект и возвращается новый объект. Первая грамматика является грамматикой диктовки по умолчанию. Вторая грамматика заключается в грамматике диктовки орфографии. Третья грамматика — это Грамматика диктовки по умолчанию, которая включает в себя контекстную фразу. Метод используется для связывания фразы контекста с грамматикой диктовки после ее загрузки <xref:System.Speech.Recognition.SpeechRecognitionEngine> в объект. <xref:System.Speech.Recognition.DictationGrammar.SetDictationContext%2A>  
  
```csharp  
  
private SpeechRecognitionEngine LoadDictationGrammars()  
{  
  
  // Create a default dictation grammar.  
  DictationGrammar defaultDictationGrammar = new DictationGrammar();  
  defaultDictationGrammar.Name = "default dictation";  
  defaultDictationGrammar.Enabled = true;  
  
  // Create the spelling dictation grammar.  
  DictationGrammar spellingDictationGrammar =  
    new DictationGrammar("grammar:dictation#spelling");  
  spellingDictationGrammar.Name = "spelling dictation";  
  spellingDictationGrammar.Enabled = true;  
  
  // Create the question dictation grammar.  
  DictationGrammar customDictationGrammar =  
    new DictationGrammar("grammar:dictation");  
  customDictationGrammar.Name = "question dictation";  
  customDictationGrammar.Enabled = true;  
  
  // Create a SpeechRecognitionEngine object and add the grammars to it.  
  SpeechRecognitionEngine recoEngine = new SpeechRecognitionEngine();  
  recoEngine.LoadGrammar(defaultDictationGrammar);  
  recoEngine.LoadGrammar(spellingDictationGrammar);  
  recoEngine.LoadGrammar(customDictationGrammar);  
  
  // Add a context to customDictationGrammar.  
  customDictationGrammar.SetDictationContext("How do you", null);  
  
  return recoEngine;  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Speech.Recognition.DictationGrammar" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DictationGrammar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.DictationGrammar.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DictationGrammar();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Speech.Recognition.DictationGrammar" /> для грамматики диктовки по умолчанию, предоставляемой технологией Windows Desktop Speech Technology.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Грамматика диктовки по умолчанию эмулирует стандартные методики диктовки, включая пунктуацию. Оно не поддерживает написание слова.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DictationGrammar (string topic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string topic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.DictationGrammar.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (topic As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DictationGrammar(System::String ^ topic);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.DictationGrammar : string -&gt; System.Speech.Recognition.DictationGrammar" Usage="new System.Speech.Recognition.DictationGrammar topic" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="topic" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="topic">Совместимый с XML универсальный идентификатор ресурса (URI), определяющий грамматику диктовки: <c>grammar:dictation</c> или <c>grammar:dictation#spelling</c>.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Speech.Recognition.DictationGrammar" /> с указанной грамматикой диктовки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для определения пользовательской грамматики диктовки в платформе обработки речи используется специальный синтаксис URI. Значение `grammar:dictation` указывает грамматику диктовки по умолчанию. Значение `grammar:dictation#spelling` указывает грамматику диктовки орфографии.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDictationContext">
      <MemberSignature Language="C#" Value="public void SetDictationContext (string precedingText, string subsequentText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDictationContext(string precedingText, string subsequentText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.DictationGrammar.SetDictationContext(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetDictationContext (precedingText As String, subsequentText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetDictationContext(System::String ^ precedingText, System::String ^ subsequentText);" />
      <MemberSignature Language="F#" Value="member this.SetDictationContext : string * string -&gt; unit" Usage="dictationGrammar.SetDictationContext (precedingText, subsequentText)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="precedingText" Type="System.String" />
        <Parameter Name="subsequentText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="precedingText">Текст, указывающий начало контекста диктовки.</param>
        <param name="subsequentText">Текст, указывающий конец контекста диктовки.</param>
        <summary>Добавляет контекст в грамматику диктовки, загруженную объектом <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> или <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию Грамматика диктовки не использует конкретные слова или порядок слов для определения и интерпретации звукового ввода. При добавлении контекста в грамматику диктовки механизм распознавания использует `precedingText` и `subsequentText` , чтобы определить, когда следует интерпретировать речь как диктовку.  
  
> [!NOTE]
>  Перед тем как использовать <xref:System.Speech.Recognition.SpeechRecognizer> <xref:System.Speech.Recognition.DictationGrammar.SetDictationContext%2A> для добавления контекста, необходимо загрузить <xref:System.Speech.Recognition.SpeechRecognitionEngine> грамматику диктовки с помощью объекта или.  
  
 В следующей таблице описано, как механизм распознавания использует два параметра, чтобы определить, когда следует использовать грамматику диктовки.  
  
|`precedingText`|`subsequentText`|Описание|  
|---------------------|----------------------|-----------------|  
|не `null`|не `null`|Механизм распознавания использует термины для квадратных скобок.|  
|`null`|не `null`|Подсистема распознавания использует `subsequentText` для завершения диктовки.|  
|не `null`|`null`|Подсистема распознавания использует `precedingText` для запуска диктовки.|  
|`null`|`null`|Механизм распознавания не использует контекст при использовании грамматики диктовки.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
  </Members>
</Type>
