<Type Name="SemanticResultKey" FullName="System.Speech.Recognition.SemanticResultKey">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9d41242796c25031134a175d7e82a84cb6e4c818" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69231073" /></Metadata><TypeSignature Language="C#" Value="public class SemanticResultKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemanticResultKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SemanticResultKey" />
  <TypeSignature Language="VB.NET" Value="Public Class SemanticResultKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemanticResultKey" />
  <TypeSignature Language="F#" Value="type SemanticResultKey = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_semanticKey.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Связывает ключевую строку со значениями <see cref="T:System.Speech.Recognition.SemanticResultValue" /> для идентификации объектов <see cref="T:System.Speech.Recognition.SemanticValue" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Базовая единица семантического выражения в System. Speech — <xref:System.Speech.Recognition.SemanticValue>это пара "ключ-значение".  
  
 С <xref:System.Speech.Recognition.SemanticResultKey> помощью объектов вы размечеем <xref:System.Speech.Recognition.SemanticResultValue> экземпляры <xref:System.Speech.Recognition.GrammarBuilder> , содержащиеся в объектах и строках, чтобы получить доступ к <xref:System.Speech.Recognition.SemanticValue> значениям из экземпляров при распознавании.  
  
 Для определения семантической <xref:System.Speech.Recognition.SemanticResultKey> структуры для грамматики распознавания речи <xref:System.Speech.Recognition.Choices> можно использовать <xref:System.Speech.Recognition.SemanticResultValue> объекты и в сочетании с <xref:System.Speech.Recognition.GrammarBuilder> объектами и. Чтобы получить доступ к семантическим сведениям в результатах распознавания, получите экземпляр <xref:System.Speech.Recognition.SemanticValue> <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> через свойство в <xref:System.Speech.Recognition.RecognizedPhrase>.  
  
  
## Examples  
 В следующем примере создается <xref:System.Speech.Recognition.Grammar> для распознавания ввода пароля в форме "мой пароль —...", где фактические входные данные сопоставляются с подстановочным знаком.  
  
 Подстановочный знак помечается семантическим ключом, а <xref:System.Speech.Recognition.Grammar.SpeechRecognized> обработчик проверяет наличие этого тега, чтобы убедиться в том, что произошел ввод пароля.  
  
```csharp  
private void pwdGrammar()   
{  
  GrammarBuilder pwdBuilder = new GrammarBuilder("My Password is");  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey wildcardKey= new SemanticResultKey("Password", wildcardBuilder);  
  pwdBuilder+=wildcardKey;  
  Grammar grammar = new Grammar(pwdBuilder);  
  grammar.Name = "Password input";  
  
  grammar.SpeechRecognized += delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
  {  
    SemanticValue semantics = eventArgs.Result.Semantics;  
    RecognitionResult result=eventArgs.Result;  
  
    if (!semantics.ContainsKey("Password"))   
    {  
      SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
    }  
    else   
    {  
      RecognizedAudio pwdAudio = result.GetAudioForWordRange(result.Words[3], result.Words[result.Words.Count - 1]);  
      MemoryStream pwdMemoryStream = new MemoryStream();  
      pwdAudio.WriteToAudioStream(pwdMemoryStream);  
      if (!IsValidPwd(pwdMemoryStream))   
      {  
        string badPwd = System.IO.Path.GetTempPath() + "BadPwd" + (new Random()).Next().ToString() + ".wav";  
        FileStream waveStream = new FileStream(badPwd, FileMode.Create);  
        pwdAudio.WriteToWaveStream(waveStream);  
        waveStream.Flush();  
        waveStream.Close();  
        SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);  
  
      }  
    }  
  };  
  grammar.Enabled = true;  
  _recognizer.LoadGrammar(grammar);  
  UpdateGrammarTree(_grammarTreeView, _recognizer);  
  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.SemanticValue" />
    <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361587(v%3doffice.14)">Использование SemanticResultKey для извлечения Семантикресултвалуе</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Создает экземпляр <see cref="T:System.Speech.Recognition.SemanticResultKey" /> и связывает ключ с компонентами грамматики.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Конструкторы для <xref:System.Speech.Recognition.SemanticResultKey> задания текстового тега (семантического ключа) и набора грамматических компонентов для добавления в грамматику распознавания речи.  
  
 Компоненты грамматики могут быть заданы как массив <xref:System.Speech.Recognition.GrammarBuilder> объектов или как <xref:System.String> массив экземпляров.  
  
 Если компоненты грамматики используются в распознавании, можно получить доступ к возвращенному <xref:System.Speech.Recognition.SemanticValue> с помощью текстового тега, предоставленного <xref:System.Speech.Recognition.SemanticResultKey> конструктору в качестве семантического ключа. Свойство экземпляра будет определяться компонентами грамматики, <xref:System.Speech.Recognition.SemanticResultKey>используемыми в определении. <xref:System.Speech.Recognition.SemanticValue> <xref:System.Speech.Recognition.SemanticValue.Value%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultKey (string semanticResultKey, params System.Speech.Recognition.GrammarBuilder[] builders);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string semanticResultKey, class System.Speech.Recognition.GrammarBuilder[] builders) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (semanticResultKey As String, ParamArray builders As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultKey(System::String ^ semanticResultKey, ... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ builders);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultKey : string * System.Speech.Recognition.GrammarBuilder[] -&gt; System.Speech.Recognition.SemanticResultKey" Usage="new System.Speech.Recognition.SemanticResultKey (semanticResultKey, builders)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="semanticResultKey" Type="System.String" />
        <Parameter Name="builders" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="semanticResultKey">Тег, который будет использоваться как семантический колюч для доступа к экземпляру <see cref="T:System.Speech.Recognition.SemanticValue" />, связанному с объектами <see cref="T:System.Speech.Recognition.GrammarBuilder" />, указанными аргументом <paramref name="builders" />.</param>
        <param name="builders">Массив компонентов грамматики, которые будут связаны с объектом <see cref="T:System.Speech.Recognition.SemanticValue" />, доступным с тегом, который определен в <paramref name="semanticResultKey" />.</param>
        <summary>Присваивает семантический ключ одному или нескольким объектам <see cref="T:System.Speech.Recognition.GrammarBuilder" />, используемым для создания грамматики распознавания речи.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Из-за неявных `builders` преобразований <xref:System.Speech.Recognition.SemanticResultValue>аргумент <xref:System.Speech.Recognition.SemanticResultKey>поддерживает также объекты <xref:System.String> ,, <xref:System.Speech.Recognition.Choices>и. Дополнительные сведения о неявных преобразованиях см. в разделе <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>.  
  
 При выполнении операции распознавания <xref:System.Speech.Recognition.GrammarBuilder> объекты, указанные `builders` в аргументе, обрабатываются как последовательные. Например, если для <xref:System.Speech.Recognition.SemanticResultValue> <xref:System.Speech.Recognition.Grammar>создания, входные данные для подсистемы распознавания используются следующим образом, должны содержать слова «Quick Браун Fox» в последовательности для распознавания.  
  
```csharp  
SemanticResultKey stringTest=new SemanticResultKey(  
    "stringTest", new GrammarBuilder[] {  
    new GrammarBuilder("the"),  
    new GrammarBuilder("quick"),  
    new GrammarBuilder("brown"),  
    new GrammarBuilder("fox")});  
```  
  
 Аргумент содержит тег, используемый для доступа к, <xref:System.Speech.Recognition.SemanticValue> который может быть возвращен. `semanticResultKey`  
  
 Объект <xref:System.Speech.Recognition.SemanticValue.Value%2A> классаопределяется<xref:System.Speech.Recognition.GrammarBuilder>экземплярами ,`builders`предоставленнымипараметром. <xref:System.Speech.Recognition.SemanticValue>  
  
 Если объекты не содержат определяющих <xref:System.Speech.Recognition.SemanticResultValue>экземпляров, значение параметра <xref:System.Speech.Recognition.SemanticValue> равно `null`. <xref:System.Speech.Recognition.GrammarBuilder>  
  
 <xref:System.Speech.Recognition.SemanticResultKey> <xref:System.Speech.Recognition.SemanticResultValue> <xref:System.Speech.Recognition.SemanticResultValue> Если объекты, предоставленные `builders` в параметре, предоставляют экземпляр без тегов (не связанный с объектом), который используется логикой распознавания, то этот экземпляр будет определять <xref:System.Speech.Recognition.GrammarBuilder> <xref:System.Speech.Recognition.SemanticValue.Value%2A>созданное свойство <xref:System.Speech.Recognition.SemanticValue> объекта.  
  
 В объектах, заданных с помощью `builders` параметра, должен быть один и только один экземпляр без тегов. <xref:System.Speech.Recognition.SemanticResultValue> <xref:System.Speech.Recognition.GrammarBuilder> Если с параметром <xref:System.Speech.Recognition.SemanticResultKey>связаны несколько <xref:System.Speech.Recognition.SemanticResultValue> экземпляров без тегов, каждый из них попытается <xref:System.Speech.Recognition.SemanticValue> установить значение объекта, полученного в результате распознавания. Это не разрешено, и распознаватель создает исключение при попытке использования <xref:System.Speech.Recognition.Grammar> созданного с помощью <xref:System.Speech.Recognition.SemanticResultKey> такого экземпляра.  
  
 `builders` <xref:System.Speech.Recognition.SemanticResultKey> <xref:System.Speech.Recognition.SemanticResultKey> Экземпляры, <xref:System.Speech.Recognition.GrammarBuilder> содержащиеся в объектах, заданных параметром и уже связанные с другим, не влияют на текущий экземпляр. <xref:System.Speech.Recognition.SemanticResultValue>  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Speech.Recognition.Grammar> для распознавания ввода пароля в форме "мой пароль —...", где фактические входные данные сопоставляются с подстановочным знаком.  
  
 Подстановочный знак помечается <xref:System.Speech.Recognition.SpeechRecognizer> тегом, значением ключа которого является Password. <xref:System.Speech.Recognition.Grammar.SpeechRecognized> Обработчик проверяет наличие этого тега, получает звуковые входные данные пароля и проверяет пароль.  
  
```csharp  
private void pwdGrammar()   
{  
  GrammarBuilder pwdBuilder = new GrammarBuilder("My Password is");  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey wildcardKey= new SemanticResultKey("Password", wildcardBuilder);  
  pwdBuilder+=wildcardKey;  
  Grammar grammar = new Grammar(pwdBuilder);  
  grammar.Name = "Password input";  
  
  grammar.SpeechRecognized +=   
    delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
    {  
      SemanticValue semantics = eventArgs.Result.Semantics;  
      RecognitionResult result=eventArgs.Result;  
  
      if (!semantics.ContainsKey("Password"))   
      {  
        SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
      }  
      else   
      {  
        RecognizedAudio pwdAudio = result.GetAudioForWordRange(  
                  result.Words[3],  
                  result.Words[result.Words.Count - 1]);  
                  MemoryStream pwdMemoryStream = new MemoryStream();  
                  pwdAudio.WriteToAudioStream(pwdMemoryStream);  
        if (!IsValidPwd(pwdMemoryStream))   
        {  
          string badPwd = System.IO.Path.GetTempPath() + "BadPwd" + (new Random()).Next().ToString() + ".wav";  
          FileStream waveStream = new FileStream(badPwd, FileMode.Create);    
          pwdAudio.WriteToWaveStream(waveStream);  
          waveStream.Flush();  
          waveStream.Close();  
          SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);      
        }  
      }  
    };  
  
  grammar.Enabled = true;  
  _recognizer.LoadGrammar(grammar);  
  UpdateGrammarTree(_grammarTreeView, _recognizer);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultKey (string semanticResultKey, params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string semanticResultKey, string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (semanticResultKey As String, ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultKey(System::String ^ semanticResultKey, ... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultKey : string * string[] -&gt; System.Speech.Recognition.SemanticResultKey" Usage="new System.Speech.Recognition.SemanticResultKey (semanticResultKey, phrases)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="semanticResultKey" Type="System.String" />
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="semanticResultKey">Тег, который будет использоваться, имеет доступ к экземпляру <see cref="T:System.Speech.Recognition.SemanticValue" />, связанному с объектами <see cref="T:System.String" />, указанными аргументом <paramref name="phrases" />.</param>
        <param name="phrases">Один или несколько объектов <see cref="T:System.String" />, урезанный текст которых связан с объектом <see cref="T:System.Speech.Recognition.SemanticValue" />, доступ к которому осуществляется через тег, определенный в <paramref name="semanticResultKey" />.</param>
        <summary>Присваивает семантический ключ одному или нескольким экземплярам <see cref="T:System.String" />, используемым для создания грамматики распознавания речи.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При выполнении операции распознавания <xref:System.String> объекты, используемые `phrases` в параметре, обрабатываются как последовательные. Например, если для <xref:System.Speech.Recognition.SemanticResultValue> <xref:System.Speech.Recognition.Grammar>создания, входные данные для подсистемы распознавания используются следующим образом, должны содержать слова «Quick Браун Fox» в последовательности для распознавания.  
  
```csharp  
SemanticResultKey stringTest=new SemanticResultKey("stringTest",   
                                new string[] {  
                                               "the",  
                                               "quick",  
                                               "brown",  
                                               "fox"});  
```  
  
 Аргумент определяет ключ, используемый для доступа к, <xref:System.Speech.Recognition.SemanticValue> который может быть возвращен. `semanticResultKey`  
  
 При создании <xref:System.Speech.Recognition.Grammar> <xref:System.Speech.Recognition.SemanticValue.Value%2A> с помощью <xref:System.Speech.Recognition.SemanticValue> объекта, содержащего семантический ключ с массивом строковых объектов, объект, созданный операцией распознавания, будет строкой, используемой при распознавании. <xref:System.Speech.Recognition.GrammarBuilder> В предыдущем примере это означает, что <xref:System.Speech.Recognition.SemanticValue.Value%2A> это будет «Quick Браун Fox».  
  
   
  
## Examples  
 В следующем примере <xref:System.Speech.Recognition.Grammar> создается объект <xref:System.Speech.Recognition.GrammarBuilder> из объекта, использующего <xref:System.Speech.Recognition.SemanticResultKey>объект <xref:System.String> , который определяется массивом объектов.  
  
 Подсистема распознавания, <xref:System.Speech.Recognition.Grammar> созданная с помощью команды Created, распознает фразу «красный цвет красного цвета 0». Семантика, <xref:System.Speech.Recognition.RecognizedPhrase> возвращаемая функцией распознавания, будет <xref:System.Speech.Recognition.SemanticValue> содержать символ с <xref:System.Speech.Recognition.SemanticValue.Value%2A> красным зеленым цветом. Доступ к можно получить <xref:System.Speech.Recognition.SemanticValue> с помощью тега "Code".  
  
 Из `SemanticResultValue("zero", 5)` -за добавления <xref:System.Speech.Recognition.GrammarBuilder>к объекту корневой <xref:System.Speech.Recognition.SemanticValue> объект в <xref:System.Speech.Recognition.RecognizedPhrase> будет иметь значение 5.  
  
```csharp  
private void keyTest()   
{  
  // Say "color red green blue zero"  
  GrammarBuilder gb = new GrammarBuilder("color") +  
                        new SemanticResultKey("code",   
                          (new string[] {"red", "green", "blue"})) +  
                        new SemanticResultValue("zero", 5);  
  Grammar g = new Grammar(gb);  
  g.Name = "keyTest";  
  _recognizer.LoadGrammar(g);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="semanticResultKey.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает экземпляр <see cref="T:System.Speech.Recognition.GrammarBuilder" />, созданный из текущего <see cref="T:System.Speech.Recognition.SemanticResultKey" />.</summary>
        <returns>Экземпляр <see cref="T:System.Speech.Recognition.GrammarBuilder" />, созданный из текущего экземпляра <see langword="SemanticResultKey" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Использование метода <xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A> эквивалентно <xref:System.Speech.Recognition.GrammarBuilder> использованию конструктора, который принимает <xref:System.Speech.Recognition.SemanticResultKey> в качестве аргумента (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29>).  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Speech.Recognition.Grammar> объект, который поддерживает команды для изменения цвета фона.  
  
 Объект (`colorChoice`), содержащий список параметров <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> цветов фона, заполняется с помощью метода с <xref:System.Speech.Recognition.GrammarBuilder> экземплярами. <xref:System.Speech.Recognition.Choices> Экземпляры получаются с <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> помощью метода для объектов, <xref:System.Speech.Recognition.SemanticResultValue> созданных из цветовых строк. <xref:System.Speech.Recognition.GrammarBuilder>  
  
 Затем <xref:System.Speech.Recognition.GrammarBuilder> объект получается путем вызова <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> метода в <xref:System.Speech.Recognition.SemanticResultKey> экземпляре, который будет использоваться для выбора семантических выборок `colorChoice`в.  
  
```csharp  
  
private Grammar CreateGrammarBuilderRGBSemantics()   
{  
  
  // Create a set of choices, each a lookup from a color name to RGB.  
  // Choices constructors do not take SemanticResultValue parameters, so cast   
  // the SemanticResultValue to GrammarBuilder.  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
    SemanticResultValue colorValue=new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.  
    colorChoice.Add(colorValue.ToGrammarBuilder());      
  }  
  SemanticResultKey choiceKey = new SemanticResultKey("rgb", colorChoice);  
  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  
  
  // Create two intermediate grammars with introductory phrase and the color choice.  
  GrammarBuilder makeBackgroundBuilder = "Make background";  
  makeBackgroundBuilder.Append(choiceBuilder);  
  
  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder("Configure background as");  
  configureBackgroundBuilder.Append((new SemanticResultKey("rgb", colorChoice)).ToGrammarBuilder());  
  
  // Create the Grammar object, which recognizes either intermediate grammar.  
  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] {makeBackgroundBuilder, configureBackgroundBuilder}));  
  grammar.Name = "Make Background /Configure background as";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
