<Type Name="SemanticResultValue" FullName="System.Speech.Recognition.SemanticResultValue">
  <Metadata><Meta Name="ms.openlocfilehash" Value="73739246a3d34b754f871bb66457c788887dd0b4" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70560265" /></Metadata><TypeSignature Language="C#" Value="public class SemanticResultValue" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemanticResultValue extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SemanticResultValue" />
  <TypeSignature Language="VB.NET" Value="Public Class SemanticResultValue" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemanticResultValue" />
  <TypeSignature Language="F#" Value="type SemanticResultValue = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_tag.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Представляет семантическое значение и, при необходимости, связывает значение с компонентом грамматики распознавания речи.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.SemanticResultKey> <xref:System.Speech.Recognition.GrammarBuilder>  <xref:System.Speech.Recognition.Choices> Использование объектов и в сочетании с и <xref:System.Speech.Recognition.Grammar> является самым простым способом проектирования семантической структуры для. <xref:System.Speech.Recognition.SemanticResultValue> Доступ к семантической информации для фразы осуществляется путем получения экземпляра <xref:System.Speech.Recognition.SemanticValue>с <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> помощью свойства в <xref:System.Speech.Recognition.RecognizedPhrase>.  
  
> [!NOTE]
>  Значения, <xref:System.Speech.Recognition.SemanticResultValue> управляемые объектами, <xref:System.Object> определяются экземплярами, передаваемыми их конструкторам. <xref:System.Object> Базовый тип этого типа должен быть `int` `bool`,, `float`или `string`. Любой другой тип не позволит построить <xref:System.Speech.Recognition.Grammar> экземпляр <xref:System.Speech.Recognition.SemanticResultValue>с помощью.  
  
 Типичное использование <xref:System.Speech.Recognition.SemanticResultValue> экземпляра связывает экземпляр с распознаваемым компонентом <xref:System.Speech.Recognition.Grammar>, таким как фраза, правило или <xref:System.Speech.Recognition.Choices> объект. Если связанный компонент используется как часть операции распознавания, <xref:System.Speech.Recognition.SemanticResultValue> используется для определения значения в семантике возвращаемой фразы.  
  
 Существует два основных метода связывания <xref:System.Speech.Recognition.SemanticResultValue> экземпляра с элементом грамматики в зависимости от конструктора, используемого для <xref:System.Speech.Recognition.SemanticResultValue>создания.  
  
-   Если для <xref:System.Object> <xref:System.Speech.Recognition.SemanticResultValue> создания объекта используется только значение (заданное экземпляром), то в дополнение к <xref:System.Speech.Recognition.GrammarBuilder> объекту связывается с компонентом грамматики, которому он предшествует. <xref:System.Speech.Recognition.SemanticResultValue>  
  
     Например, в приведенном ниже фрагменте кода, если <xref:System.Speech.Recognition.Grammar> созданный с помощью <xref:System.Speech.Recognition.GrammarBuilder> этого экземпляра код распознает слово "Background `true` ", значение задается в распознанной семантике фразы.  
  
    ```csharp  
    GrammarBuilder backgroundGB=new GrammarBuilder("background");  
    backgroundGB.Append(new SemanticResultValue(true));  
    ```  
  
     Дополнительные сведения см. в описании <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>.  
  
-   Если используется строковая фраза или <xref:System.Speech.Recognition.GrammarBuilder> конкретный экземпляр, а <xref:System.Object> с <xref:System.Speech.Recognition.SemanticResultValue> параметром, указывающим значение, это значение автоматически <xref:System.Speech.Recognition.GrammarBuilder> связывается со строковым значением фразы или экземпляром.  Если фраза или <xref:System.Speech.Recognition.GrammarBuilder> объект используется в процессе распознавания, значение будет присвоено семантике распознанной фразы.  
  
     В следующем примере показано это, и функционально эквивалентно предыдущему примеру, в котором использовались явные вызовы функций <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> и <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>. Если в логике распознавания используется слово "Background", значение `true` будет добавлено к распознанной семантике.  
  
    ```csharp  
    fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("background", true));  
    ```  
  
     Дополнительные сведения см. в описании <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Object%29> и. <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.String%2CSystem.Object%29>  
  
 Для использования <xref:System.Speech.Recognition.Grammar> в распознавании все <xref:System.Speech.Recognition.SemanticResultValue> экземпляры должны быть <xref:System.Speech.Recognition.SemanticValue> связаны с одним из объектов, <xref:System.Speech.Recognition.Grammar>используемых этим объектом. Для этого необходимо связать семантический ключ с <xref:System.Speech.Recognition.SemanticResultValue>.  
  
 Семантические ключи можно явно прикрепить <xref:System.Speech.Recognition.SemanticResultValue>к, <xref:System.Speech.Recognition.SemanticResultKey> используя объект.  <xref:System.Speech.Recognition.SemanticResultValue>экземпляры, которые не были явно присоединены к ключу, присоединяются к корневому <xref:System.Speech.Recognition.SemanticValue>ключу по умолчанию.  
  
 После того <xref:System.Speech.Recognition.SemanticResultValue> <xref:System.Speech.Recognition.SemanticValue.Value%2A>, как объект был использован для задания значения, помеченного как корневой ключ по умолчанию или каким <xref:System.Speech.Recognition.SemanticResultKey>-либо конкретным, это значение не должно изменяться, или во время операций распознавания возникает исключение.  
  
 В следующем примере вызывается исключение, так как оно задает, а затем изменяет корневой <xref:System.Speech.Recognition.SemanticValue.Value%2A> элемент. <xref:System.Speech.Recognition.Grammar>  
  
```csharp  
GrammarBuilder gb=new GrammarBuilder();  
gb.Append(new SemanticResultValue("One"));  
gb.Append(new SemanticResultValue("Two"));  
```  
  
 С другой стороны, код в следующем примере разрешается. Хотя он определяет несколько экземпляров <xref:System.Speech.Recognition.SemanticResultValue>, они включаются <xref:System.Speech.Recognition.Choices> в объект, и только один из них будет использоваться для задания значения ключа `bgOrfgText`.  
  
```csharp  
Choices fgOrbgChoice = new Choices();  
fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("background"));  
fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground"));  
SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgText", fgOrbgChoice);  
```
  
## Examples  
 В следующем примере возвращается объект <xref:System.Speech.Recognition.Grammar> , который распознает команду Set/Change/ALTER переднего плана/Background... [список цветов] ".  <xref:System.Speech.Recognition.SemanticResultValue>экземпляры <xref:System.Speech.Recognition.SemanticResultKey> и (в сочетании с <xref:System.Speech.Recognition.Choices> объектами <xref:System.Speech.Recognition.GrammarBuilder> и) используются для определения семантики, которая может быть проанализирована при распознавании.  Проанализированная семантика определяет, какой цвет был запрошен, а также будет ли изменен передний план или фон.  
  
```  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(new SemanticResultValue(introGB, String.Format("Command: {0}", introString)));  
  }    
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
        (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
                       cmdIntro,  
                       new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361587(v%3doffice.14)">Использование SemanticResultKey для извлечения Семантикресултвалуе</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Speech.Recognition.SemanticResultValue" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `int` `bool` `float` `string`Конструкторы поддерживают <xref:System.Object> указание экземпляра с базовым типом данных,, или. `SemanticResultValue`  
  
 Конструктор может создать `SemanticResultValue` экземпляр в одном из двух случаев:  
  
-   Экземпляр должен быть явно связан с элементом грамматики при <xref:System.Speech.Recognition.GrammarBuilder> использовании для создания  <xref:System.Speech.Recognition.Grammar> .  `SemanticResultValue`  
  
-   Объект уже <xref:System.Speech.Recognition.GrammarBuilder>  связан с фразой строки или объектом. `SemanticResultValue`  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Значение, управляемое объектом <see cref="T:System.Speech.Recognition.SemanticResultValue" />. Должен иметь тип <see langword="bool" />, <see langword="int" />, <see langword="float" /> или <see langword="string" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Speech.Recognition.SemanticResultValue" /> и указывает семантическое значение.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект `SemanticResultValue` , возвращенный этим конструктором, не связан с каким-либо определенным элементом грамматики. Связь необходимо сделать явной с помощью экземпляра `SemanticResultValue` в сочетании с. <xref:System.Speech.Recognition.GrammarBuilder>  
  
 Например, в приведенном ниже фрагменте кода, если <xref:System.Speech.Recognition.Grammar> созданный с помощью <xref:System.Speech.Recognition.GrammarBuilder> этого экземпляра код распознает слово "Background `true` ", значение задается в распознанной семантике фразы.  
  
```csharp  
GrammarBuilder backgroundGB=new GrammarBuilder("background");  
backgroundGB.Append(new SemanticResultValue(true));  
```  
  
   
  
## Examples  
 В следующем примере возвращается объект <xref:System.Speech.Recognition.Grammar> , который распознает команду Set/Change/ALTER переднего плана/Background... [список цветов] ". <xref:System.Speech.Recognition.SemanticResultValue>экземпляры <xref:System.Speech.Recognition.SemanticResultKey> и (в сочетании с <xref:System.Speech.Recognition.Choices> объектами <xref:System.Speech.Recognition.GrammarBuilder> и) используются для определения семантики, которая может быть проанализирована при распознавании.  Проанализированная семантика определяет, какой цвет был запрошен, а также будет ли изменен передний план или фон.  
  
```csharp  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }           
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
                 (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
        cmdIntro,   
        new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (System.Speech.Recognition.GrammarBuilder builder, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::Speech::Recognition::GrammarBuilder ^ builder, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : System.Speech.Recognition.GrammarBuilder * obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue (builder, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="builder">Компонент грамматики, используемый при распознавании.</param>
        <param name="value">Значение, управляемое объектом <see cref="T:System.Speech.Recognition.SemanticResultValue" />. Должен иметь тип <see langword="bool" />, <see langword="int" />, <see langword="float" /> или <see langword="string" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Speech.Recognition.SemanticResultValue" /> и связывает семантическое значение с объектом <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если элемент грамматики, заданный параметром <xref:System.Speech.Recognition.GrammarBuilder> , используется в логике распознавания, `value` будет установлен в семантике распознаваемых выходных данных.  
  
 В приведенном ниже фрагменте кода, если логика распознавания, <xref:System.Speech.Recognition.GrammarBuilder> созданная`myGb`с помощью экземпляра <xref:System.Speech.Recognition.Choices> ()`myChoice`, использует объект () для обнаружения `true` входных данных, значение добавляется к распознанной семантике.  
  
```csharp  
myGb.Append(new SemanticResultValue(myChoice, true);  
```  
  
 Так <xref:System.Speech.Recognition.GrammarBuilder> как поддерживает неявное `SemanticResultValue`преобразование для <xref:System.Speech.Recognition.SemanticResultKey> <xref:System.Speech.Recognition.Choices>, и, этот конструктор также может использовать эти объекты.  
  
   
  
## Examples  
 В следующем примере возвращается объект <xref:System.Speech.Recognition.Grammar> , который распознает команду Set/Change/ALTER переднего плана/Background... [список цветов] ". <xref:System.Speech.Recognition.SemanticResultValue>экземпляры <xref:System.Speech.Recognition.SemanticResultKey> и (в сочетании с <xref:System.Speech.Recognition.Choices> объектами <xref:System.Speech.Recognition.GrammarBuilder> и) используются для определения семантики, которая может быть проанализирована при распознавании.  Проанализированная семантика определяет, какой цвет был запрошен, а также будет ли изменен передний план или фон.  
  
```csharp  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }           
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
              (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
    }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
                      cmdIntro,  
                      new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (string phrase, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::String ^ phrase, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : string * obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue (phrase, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="phrase">Фраза, используемый при распознавании.</param>
        <param name="value">Значение, управляемое объектом <see cref="T:System.Speech.Recognition.SemanticResultValue" />. Должен иметь тип <see langword="bool" />, <see langword="int" />, <see langword="float" /> или <see langword="string" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Speech.Recognition.SemanticResultValue" /> и связывает семантическое значение с объектом <see cref="T:System.String" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если строка, заданная `phrase` параметром, используется в логике `value` распознавания, будет задана семантика распознаваемых выходных данных.  
  
 В следующем фрагменте кода, если логика распознавания, созданная <xref:System.Speech.Recognition.GrammarBuilder> с помощью`myGb`экземпляра (), использует строку "Моя закладная" для обозначения `true` входных данных, значение будет добавлено к распознанной семантике.  
  
```csharp  
myGb.Append(new SemanticResultValue("my mortgage", true);  
```  
  
   
  
## Examples  
 В следующем примере возвращается объект <xref:System.Speech.Recognition.Grammar> , который распознает команду Set/Change/ALTER переднего плана/Background... [список цветов] ". <xref:System.Speech.Recognition.SemanticResultValue>экземпляры <xref:System.Speech.Recognition.SemanticResultKey> и (в сочетании с <xref:System.Speech.Recognition.Choices> объектами <xref:System.Speech.Recognition.GrammarBuilder> и) используются для определения семантики, которая может быть проанализирована при распознавании.  Проанализированная семантика определяет, какой цвет был запрошен, а также будет ли изменен передний план или фон.  
  
```  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }  
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
          (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(cmdIntro,  
                         new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="semanticResultValue.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает экземпляр <see cref="T:System.Speech.Recognition.GrammarBuilder" />, созданный из текущего <see cref="T:System.Speech.Recognition.SemanticResultValue" />.</summary>
        <returns>Возвращает экземпляр <see cref="T:System.Speech.Recognition.GrammarBuilder" />, созданный из текущего <see cref="T:System.Speech.Recognition.SemanticResultValue" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Использование <xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A> <xref:System.Speech.Recognition.SemanticResultValue> <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29>функции эквивалентно использованию конструктора, который принимает в качестве аргумента (). <xref:System.Speech.Recognition.GrammarBuilder>  
  
   
  
## Examples  
 В следующем примере создаются <xref:System.Speech.Recognition.Grammar> объекты, поддерживающие команды для изменения цвета фона.  
  
 <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> <xref:System.Speech.Recognition.GrammarBuilder> <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> `SemanticResultValue` Объект (`colorChoice`), содержащий список параметров цветов фона, заполняется с помощью метода экземплярами, полученными из метода в созданных объектах. <xref:System.Speech.Recognition.Choices> из цветовых строк.  
  
 Затем <xref:System.Speech.Recognition.GrammarBuilder> объект получается путем вызова <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> метода в <xref:System.Speech.Recognition.SemanticResultKey> экземпляре, который будет `colorChoice` использоваться для получения ключевых вариантов семантического выбора в экземпляре.  
  
```csharp  
  
private Grammar CreateGrammarBuilderRGBSemantics()   
{  
  
  // Create a set of choices, each a lookup from a color name to RBG.  
  // Choices constructors do not take a SemanticResultValue parameter, so  
  // cast SemanticResultValue to GrammarBuilder.  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    SemanticResultValue colorValue =   
        new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  
    colorChoice.Add(colorValue.ToGrammarBuilder());  
  }  
  
  SemanticResultKey choiceKey = new SemanticResultKey("rgb", colorChoice);  
  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  
  
  // Create two intermediate grammars with an introductory phrase and the  
  // color choice.  
  GrammarBuilder makeBackgroundBuilder = "Make background";  
  makeBackgroundBuilder.Append(choiceBuilder);  
  
  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder("Configure background as");  
  configureBackgroundBuilder.Append((new SemanticResultKey("rgb", colorChoice)).ToGrammarBuilder());  
  
  // Create the final grammar, which recognizes either intermediate grammar.  
  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] { makeBackgroundBuilder, configureBackgroundBuilder }));  
  grammar.Name = "Set Background Color";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
