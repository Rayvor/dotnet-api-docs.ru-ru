<Type Name="PropertyValueUIItemInvokeHandler" FullName="System.Drawing.Design.PropertyValueUIItemInvokeHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="43cf0aaefc550a4bc8a9e3af16aaed617ccca96c" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69250039" /></Metadata><TypeSignature Language="C#" Value="public delegate void PropertyValueUIItemInvokeHandler(ITypeDescriptorContext context, PropertyDescriptor descriptor, PropertyValueUIItem invokedItem);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed PropertyValueUIItemInvokeHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Design.PropertyValueUIItemInvokeHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub PropertyValueUIItemInvokeHandler(context As ITypeDescriptorContext, descriptor As PropertyDescriptor, invokedItem As PropertyValueUIItem)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void PropertyValueUIItemInvokeHandler(ITypeDescriptorContext ^ context, PropertyDescriptor ^ descriptor, PropertyValueUIItem ^ invokedItem);" />
  <TypeSignature Language="F#" Value="type PropertyValueUIItemInvokeHandler = delegate of ITypeDescriptorContext * PropertyDescriptor * PropertyValueUIItem -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
    <Parameter Name="descriptor" Type="System.ComponentModel.PropertyDescriptor" />
    <Parameter Name="invokedItem" Type="System.Drawing.Design.PropertyValueUIItem" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="context">Интерфейс <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> для свойства, связанного со значком, для которого был выполнен двойной щелчок.</param>
    <param name="descriptor">Свойство, связанное со значком, для которого был выполнен двойной щелчок.</param>
    <param name="invokedItem">Объект <see cref="T:System.Drawing.Design.PropertyValueUIItem" />, связанный со значком, для которого был выполнен двойной щелчок.</param>
    <summary>Представляет метод, обрабатывающий событие <see cref="P:System.Drawing.Design.PropertyValueUIItem.InvokeHandler" /> объекта <see cref="T:System.Drawing.Design.PropertyValueUIItem" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Двойной щелчок значка в окно свойств вызовет <xref:System.Drawing.Design.PropertyValueUIItem.InvokeHandler%2A> событие <xref:System.Drawing.Design.PropertyValueUIItem> , с которым связан значок. <xref:System.Drawing.Design.PropertyValueUIItem.InvokeHandler%2A> Событие обычно запускает пользовательский интерфейс для изменения значения свойства. <xref:System.Drawing.Design.PropertyValueUIItemInvokeHandler> Добавьте к<xref:System.Drawing.Design.PropertyValueUIItem.InvokeHandler%2A> свойству<xref:System.Drawing.Design.PropertyValueUIItem> объекта, чтобы присвоить обработчику события соответствующее поведение при двойном щелчке значка, отображаемого рядом с именем свойства.  
  
 При создании делегата <xref:System.Drawing.Design.PropertyValueUIItemInvokeHandler> необходимо указать метод, обрабатывающий событие. Чтобы связать событие с обработчиком событий, нужно добавить в событие экземпляр делегата. Обработчик событий вызывается всякий раз, когда происходит событие, если делегат не удален. Дополнительные сведения о делегатах обработчиков событий см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 В следующем примере кода представлен <xref:System.Drawing.Design.PropertyValueUIItem> объект для всех свойств компонента с именем `HorizontalMargin` или `VerticalMargin`. <xref:System.Drawing.Design.PropertyValueUIItem> Для этих свойств предусмотрено изображение, подсказка и обработчик событий, который отображает окно сообщения при щелчке изображения для свойства. Этот пример кода является частью большого примера, <xref:System.Drawing.Design.IPropertyValueUIService> предоставляемого для интерфейса.  
  
 [!code-cpp[IPropertyValueUIServiceExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/IPropertyValueUIServiceExample/CPP/propertyuicomponent.cpp#2)]
 [!code-csharp[IPropertyValueUIServiceExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/IPropertyValueUIServiceExample/CS/propertyuicomponent.cs#2)]
 [!code-vb[IPropertyValueUIServiceExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IPropertyValueUIServiceExample/VB/propertyuicomponent.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.ITypeDescriptorContext" />
    <altmember cref="T:System.Drawing.Design.PropertyValueUIItem" />
    <altmember cref="T:System.Drawing.Design.IPropertyValueUIService" />
  </Docs>
</Type>
