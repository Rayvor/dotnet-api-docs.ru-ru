<Type Name="WindowInteropHelper" FullName="System.Windows.Interop.WindowInteropHelper">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f4336638cdf2fb1c5cf7d47bec3e51e24af0b3fb" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="64994521" /></Metadata><TypeSignature Language="C#" Value="public sealed class WindowInteropHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WindowInteropHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Interop.WindowInteropHelper" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WindowInteropHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowInteropHelper sealed" />
  <TypeSignature Language="F#" Value="type WindowInteropHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Используется для взаимодействия между кодом Windows Presentation Foundation (WPF) и Win32.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Члены этого класса позволяют вызывающему объекту иметь внутренний доступ к [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] HWND и родительскому дескриптору HWND [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>объекта.  Эти члены выполняют соответствующие проверки безопасности.  
  
 Этот класс следует использовать каждый раз, когда требуется более конкретный объект на основе HWND.  
  
 Примером сценария является необходимость размещения [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] диалогового окна [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] в приложении. Инициализируйте <xref:System.Windows.Interop.WindowInteropHelper> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] с помощью объекта окна для диалогового окна. Затем можно получить [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] дескриптор окна (HWND) <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> из свойства и [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] указать владельца окна со <xref:System.Windows.Interop.WindowInteropHelper.Owner%2A> свойством. В следующем примере кода показано, как использовать <xref:System.Windows.Interop.WindowInteropHelper> при [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] размещении диалогового окна в [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] приложении.  
  
 [!code-csharp[CorePseudocode#WindowInteropHelper](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#windowinterophelper)]
 [!code-vb[CorePseudocode#WindowInteropHelper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#windowinterophelper)]  
  
 Другой сценарий, поддерживаемый этим классом, — <xref:System.Windows.Interop.HwndSource> получение объекта [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window> из объекта. Разрешает прямую обработку сообщений с помощью <xref:System.Windows.Interop.HwndSource.AddHook%2A>метода. [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] <xref:System.Windows.Interop.HwndSource> Используя <xref:System.Windows.Interop.HwndSource> и <xref:System.Windows.Interop.HwndSource.AddHook%2A> вместо [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], вы все равно можете обрабатывать сообщения, которые не имеют эквивалента или обработки в. <xref:System.Windows.Window> <xref:System.Windows.Interop.WindowInteropHelper> Создайте <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> <xref:System.Windows.Interop.HwndSource>с источником, а затем вызовите метод дляполученияизHWNDв.<xref:System.Windows.Interop.WindowInteropHelper> <xref:System.Windows.Window>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Window" />
    <altmember cref="T:System.Windows.Interop.HwndSource" />
    <altmember cref="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowInteropHelper (System.Windows.Window window);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Window window) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowInteropHelper(System::Windows::Window ^ window);" />
      <MemberSignature Language="F#" Value="new System.Windows.Interop.WindowInteropHelper : System.Windows.Window -&gt; System.Windows.Interop.WindowInteropHelper" Usage="new System.Windows.Interop.WindowInteropHelper window" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="window" Type="System.Windows.Window" />
      </Parameters>
      <Docs>
        <param name="window">Объект окна [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Interop.WindowInteropHelper" /> для заданного окна [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)].</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Окно может быть диалоговым окном или окном, которое в противном случае не подходит для размещения внутри границ [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] приложения.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureHandle">
      <MemberSignature Language="C#" Value="public IntPtr EnsureHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int EnsureHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle" />
      <MemberSignature Language="VB.NET" Value="Public Function EnsureHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr EnsureHandle();" />
      <MemberSignature Language="F#" Value="member this.EnsureHandle : unit -&gt; nativeint" Usage="windowInteropHelper.EnsureHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Создает дескриптор окна (HWND), если он еще не был создан.</summary>
        <returns>Объект <see cref="T:System.IntPtr" />, представляющий дескриптор окна (HWND).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте метод <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> , если требуется разделить создание дескриптора окна (HWND) на основе фактического отображения управляемого <xref:System.Windows.Window>объекта. Это полезно, если у вас есть клиент автоматизации, который может выполнять свои задачи без необходимости отображения окна.  
  
 Если собственное окно еще не создано, этот метод создает собственное окно, устанавливает <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> свойство и возвращает HWND. Если собственное окно уже создано, возвращается маркер существующего собственного окна.  
  
 Если в результате вызова этого метода создается собственное окно, <xref:System.Windows.Window.SourceInitialized> возникает событие.  
  
 <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> Запрос свойства <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> после вызова метода возвращает существующий маркер окна. Визуальное дерево не присоединяется к окну до тех пор <xref:System.Windows.Window.Show%2A> , пока не будет вызван метод.  
  
 <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> Вызов метода более одного раза не создает новых дескрипторов окон. Вызов метода <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> , когда маркер уже был создан при вызове <xref:System.Windows.Window.Show%2A> метода, не создает новый обработчик окна. Собственное окно создается только в <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> том случае, если при вызове метода не существует маркеров.  
  
 Свойства окна, заданные с помощью интерфейсов API собственного окна через p/Invoke, могут не отображаться в управляемых окнах API. Например, если задать для окна самое верхнее с помощью встроенного флага MS_EX_TOPMOST после <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> вызова метода <xref:System.Windows.Window.Topmost%2A> , свойство не будет содержать значение, отражающее собственный параметр.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">для создания и доступа к обработчику окна. Связанное перечисление:<see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает дескриптор окна [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)], используемый для создания данного объекта <see cref="T:System.Windows.Interop.WindowInteropHelper" />.</summary>
        <value>Дескриптор (HWND) окна [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)].</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">для получения маркера окна. Связанное перечисление:<see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public IntPtr Owner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Owner" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberSignature Language="VB.NET" Value="Public Property Owner As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Owner { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.Owner : nativeint with get, set" Usage="System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает дескриптор окна владельца [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)].</summary>
        <value>Дескриптор (HWND) окна владельца.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вы можете переподчиненные окна, задав это свойство. Как и для общего [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] программирования, не следует переделать уже используемые окна.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">значение для получения или задания значения этого свойства. Связанное перечисление:<see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
  </Members>
</Type>