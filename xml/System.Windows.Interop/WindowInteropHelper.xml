<Type Name="WindowInteropHelper" FullName="System.Windows.Interop.WindowInteropHelper">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f4336638cdf2fb1c5cf7d47bec3e51e24af0b3fb" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="64994521" /></Metadata><TypeSignature Language="C#" Value="public sealed class WindowInteropHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WindowInteropHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Interop.WindowInteropHelper" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WindowInteropHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowInteropHelper sealed" />
  <TypeSignature Language="F#" Value="type WindowInteropHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Используется для взаимодействия между кодом Windows Presentation Foundation (WPF) и Win32.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Члены этого класса позволяет вызывающему объекту имеют внутренний доступ к [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] HWND и родительского HWND из [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>.  С точки зрения безопасности проверок членам.  
  
 Этот класс используется каждый раз, когда требуется более специализированный объект на основе HWND.  
  
 Примером является ситуация, если необходимо разместить [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] диалогового окна в [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] приложения. Инициализировать <xref:System.Windows.Interop.WindowInteropHelper> с [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] объект окна для диалогового окна. Вы можете получить [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] дескриптор окна (HWND) из <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> свойство и укажите владельца [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] окно с <xref:System.Windows.Interop.WindowInteropHelper.Owner%2A> свойство. В следующем примере кода показано, как использовать <xref:System.Windows.Interop.WindowInteropHelper> при размещении [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] диалогового окна в [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] приложения.  
  
 [!code-csharp[CorePseudocode#WindowInteropHelper](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#windowinterophelper)]
 [!code-vb[CorePseudocode#WindowInteropHelper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#windowinterophelper)]  
  
 Этот класс поддерживает еще один сценарий должен получать <xref:System.Windows.Interop.HwndSource> объекта из [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window> объекта. <xref:System.Windows.Interop.HwndSource> Позволяет осуществлять прямое обработки [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] сообщений через <xref:System.Windows.Interop.HwndSource.AddHook%2A> метод. С помощью <xref:System.Windows.Interop.HwndSource> и <xref:System.Windows.Interop.HwndSource.AddHook%2A> вместо <xref:System.Windows.Window> можно обработать сообщения, не соответствует или обработка в [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]. Создание <xref:System.Windows.Interop.WindowInteropHelper> с <xref:System.Windows.Window> источника, а затем вызовите <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> на <xref:System.Windows.Interop.WindowInteropHelper> для получения из HWND для <xref:System.Windows.Interop.HwndSource>.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Window" />
    <altmember cref="T:System.Windows.Interop.HwndSource" />
    <altmember cref="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowInteropHelper (System.Windows.Window window);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Window window) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowInteropHelper(System::Windows::Window ^ window);" />
      <MemberSignature Language="F#" Value="new System.Windows.Interop.WindowInteropHelper : System.Windows.Window -&gt; System.Windows.Interop.WindowInteropHelper" Usage="new System.Windows.Interop.WindowInteropHelper window" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="window" Type="System.Windows.Window" />
      </Parameters>
      <Docs>
        <param name="window">Объект [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] объект окна.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Interop.WindowInteropHelper" /> класса для указанного [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] окна.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Окно может быть диалоговое окно или окно, которое не подходящим для размещения в пределах [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] приложения.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureHandle">
      <MemberSignature Language="C#" Value="public IntPtr EnsureHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int EnsureHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle" />
      <MemberSignature Language="VB.NET" Value="Public Function EnsureHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr EnsureHandle();" />
      <MemberSignature Language="F#" Value="member this.EnsureHandle : unit -&gt; nativeint" Usage="windowInteropHelper.EnsureHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Создает HWND окна, если еще не был создан HWND.</summary>
        <returns><see cref="T:System.IntPtr" /> , Представляющий дескриптор HWND.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> метод, если вы хотите отделить Создание дескриптор (HWND) окна из Фактическое отображение управляемых <xref:System.Windows.Window>. Это полезно в тех случаях, когда у вас есть клиент автоматизации, который может выполнить свои задачи без необходимости отображения окна.  
  
 Если собственное окно еще не был создан, этот метод создает собственного окна задает <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> свойством и возвращает HWND. Если собственного окна уже создан, возвращается дескриптор существующего собственного окна.  
  
 Если собственное окно создается в результате вызова этого метода <xref:System.Windows.Window.SourceInitialized> события.  
  
 Запрос <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> свойства после <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> вызывается метод возвращает существующий дескриптор окна. Визуальное дерево не присоединенный к окну до после <xref:System.Windows.Window.Show%2A> вызывается метод.  
  
 Вызов <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> метод более одного раза не создает новый дескрипторов окон. Вызов <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> дескриптор уже создан с помощью вызова метода <xref:System.Windows.Window.Show%2A> метод не создает новый дескриптор окна. Собственное окно создается только в том случае, если дескриптор не существует при <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> вызывается метод.  
  
 Окно свойств, заданных с помощью собственного окна API-интерфейсы через p/invoke могут отсутствовать в окне управляемых интерфейсов API. Например, если задать верхнее окно с помощью собственного флага MS_EX_TOPMOST после <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> вызывается метод, <xref:System.Windows.Window.Topmost%2A> свойство не обязательно отражения собственного значения.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">Создание и обращение к дескриптор окна. Связанное перечисление: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает дескриптор окна [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)], используемый для создания данного объекта <see cref="T:System.Windows.Interop.WindowInteropHelper" />.</summary>
        <value>[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] Дескриптор окна (HWND).</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">Чтобы получить дескриптор окна. Связанное перечисление: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public IntPtr Owner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Owner" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberSignature Language="VB.NET" Value="Public Property Owner As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Owner { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.Owner : nativeint with get, set" Usage="System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает дескриптор окна владельца [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)].</summary>
        <value>Дескриптор окна владельца (HWND).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Установив это свойство можно Переподчинение windows. Как и в случае имеет значение true для общих [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] программирования, не Переподчинение windows, которые уже используются.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">Чтобы получить или задать значение этого свойства. Связанное перечисление: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
  </Members>
</Type>